{"metadata":{"buildTime":"2025-08-16T07:38:22.679Z","counts":{"discussions":895,"issues":2539}},"discussions":[{"author":"andreivladbrg","body":"(This idea came prior to [this discussion](https://github.com/sablier-labs/deployments/issues/21))\r\n\r\nBeyond the information (ABIs, contract addresses, broadcasts, etc.) that this repo will provide, I think we could take this even further. What if we make this repo *a central point for everything related to deployments* across all protocols—including the deployment scripts themselves (which means we’d need to add a `foundry.toml` file).\r\n\r\nWe’d also be installing all protocol repos (`lockup`, `flow`, `airdrops`, etc.) here via `package.json`, so we can implement a unified `DeployProtocol` script to handle all contract deployments in one go.  It doesn't mean we can't have individual scripts as well, i.e. `DeployLockup` or `DeployLockupNFTDescriptor`.\r\nOne potential problem is dealing with different deployment profiles—for example, `lockup` requires fewer `optimizer_runs`, while airdrops can use a much higher value. But we can handle this by:\r\n- Easy option: re-introduce `precompiles` in the protocols repos\r\n    -  we could refactor the `DeployOptimized` testing utils to contain the bytecode directly instead of reading it from `out-optimized`\r\n- Harder option: using different Foundry profiles as a pre-step before running the deployment script to generate the `initcode`. \r\n\r\n\r\n<details><summary>If we add the precompiles here</summary>\r\n<p>\r\n\r\n\r\n### foundry.toml\r\n\r\n```toml\r\n[profile.lockup]\r\nsrc = \"src/lockup\"\r\noptimizer_runs = 500\r\n[profile.flow]\r\nsrc = \"src/flow\"\r\noptimizer_runs = 1000\r\n[profile.airdrops]\r\nsrc = \"src/airdrops\"\r\noptimizer_runs = 100_000_000\r\n```\r\n\r\n### script/Precompiles.sol\r\n\r\n```solidity\r\n/// Import to generate the bytecode\r\nimport { LockupNFTDescriptor } from \"@sablier/lockup/src/LockupNFTDescriptor.sol\";\r\nimport { SablierBatchLockup } from \"@sablier/lockup/src/SablierBatchLockup.sol\";\r\nimport { SablierLockup } from \"@sablier/lockup/src/SablierLockup.sol\";\r\n\r\nlibrary Precompiles {\r\n    function lockupInitcode() internal pure returns (bytes memory) {\r\n        return hex'<bytecode>';\r\n    }\r\n    function nftDescriptorInitcode() internal pure returns (bytes memory) {\r\n        return hex'<bytecode>';\r\n    }\r\n    function batchInitcode() internal pure returns (bytes memory) {\r\n        return hex'<bytecode>';\r\n    }\r\n}\r\n```\r\n\r\n### script/DeployProtocol.s.sol\r\n\r\n```solidity\r\n// lockup example but can be extended to include all protocols\r\nfunction run() public pure broadcast returns (address,address,address) {\r\n    address nftDescriptor = _deploy(Precompiles.nftDescriptorInitcode(), \"\", salt);\r\n    address lockup = _deploy(Precompiles.lockupInitcode(), abi.encode(initialAdmin(), nftDescriptor, maxCount), salt);\r\n    address batch = _deploy(Precompiles.batchInitcode(), \"\", salt);\r\n\r\n    // so on for all protocols contract\r\n\r\n    return (lockup, batch, nftDescriptor);\r\n}\r\n\r\nfunction _deploy(\r\n    bytes memory _initcode,\r\n    bytes memory _args,\r\n    bytes32 _salt\r\n)\r\n    private\r\n    returns (address deployedContract)\r\n{   \r\n    // Check to avoid deploying empty contracts \r\n    require(_initcode.length > 0, \"Deployer: initcode length is zero\");\r\n    bytes memory initcode = abi.encodePacked(_initcode, _args);\r\n\r\n    assembly {\r\n        deployedContract := create2(0, add(initcode, 32), mload(initcode), _salt)\r\n    }\r\n}\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n### Main benefits of this approach:\r\n- No need to manually go into each repo to deploy and then move all the broadcasts/ABIs/info to this one\r\n- A single source of truth for `deployments`\r\n- Scripts don’t need to be updated across all repos every time a change is made\r\n- We can fetch previously used addresses like `NFTDescriptor` without storing them in the repo\r\n- Only the mainnet endpoint needs to be configured there for fork testing, no need for all ([lockup](https://github.com/sablier-labs/lockup/blob/8d9a1798c502db3137b7f6947755d246868bb36e/foundry.toml#L92-L131), [airdrops](https://github.com/sablier-labs/airdrops/blob/459f8f4b0f61ae9cafa195c81894c1a9e35d4f60/foundry.toml#L89-L128), [flow](https://github.com/sablier-labs/flow/blob/6547ae68568359c5073ff5f19095299e0340beec/foundry.toml#L74-L113))\r\n\r\nI really think centralizing everything here is the right call in terms of maintenance costs and ease of use (deploying a lot of contracts over the past year 😆). The idea is mainly inspired by how Uniswap handles it (they have a single repo for all [contract deployments](https://github.com/Uniswap/contracts/)), v2/v3/v4/permit2 and so on, and their new [v4-core](https://github.com/uniswap/v4-core) doesn’t even contain any deployment scripts.\r\n\r\n#### Questions\r\n\r\n- If we plan to add Solana deployments as well, things could get messy. In that case, we might want to reconsider the repo name—something like `evm-deployments`—and keep Solana-related broadcasts in the `solsal` repo, as I initially suggested. (we won't have to deal with multichains there, so it makes sense to keep there).\r\n- We could also consider moving the `multichain-deployer` logic into this repo. That way, we could repurpose the current repo into something else—maybe a `multi-scripts` repo—and use it for scripts like [this one](https://github.com/sablier-labs/airdrops/issues/90).\r\n\r\n---\r\n\r\n@sablier-labs/evm RFF — I tried to keep my message concise here, but I highly recommend checking out Uniswap's repo. Not necessarily to do a deep dive, but just to get a general sense of how they’re structuring things and what patterns they're following.\r\n","createdAt":"2025-03-17T19:06:19Z","labels":[],"number":23,"repository":"sablier-labs/deployments","state":"open","title":"Improving the EVM deployment experience","type":"discussion","updatedAt":"2025-04-09T09:53:33Z","url":"https://github.com/sablier-labs/deployments/discussions/23"},{"author":"PaulRBerg","body":"Should we use this repo for Solana too, or should we rename it to `evm-deployments`?\r\n\r\ncc @sablier-labs/evm","createdAt":"2025-02-11T13:07:52Z","labels":[],"number":18,"repository":"sablier-labs/deployments","state":"closed","title":"Rename to \"evm-deployments\"? Or use this for Solana?","type":"discussion","updatedAt":"2025-03-13T22:22:40Z","url":"https://github.com/sablier-labs/deployments/discussions/18"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe `MerkleLockupLL` contract is not meant to be deployed by us, but by users. This means that we cannot verify its source code on Etherscan at the time when we are deploying the protocol - unless we ourselves deploy one campaign.\r\n\r\nI don't find it worth it to pay the deployment cost just to verify the contract. We should let users organically pick up the protocol, and verify the source code only when needed, i.e., only after a campaign gets deployed by a user.\r\n\r\nThe problem is that the `MerkleLockupLL` contract will show up as unverified until we realize it and verify it manually, and the process of monitoring deployments and running a verification script is manual and time-consuming.\r\n\r\n## Potential Solution\r\n\r\nWe need to come with a creative solution. Maybe there is a way to automate this? There must be some sort of Lambda function-like solution that allows us to run a script in response to certain events emitted by the protocol.\r\n\r\nMaybe Tenderly or [Etherhook](https://www.etherhook.io/)?\r\n\r\n## Warp Script\r\n\r\nI've put this into Warp Drive, which we can use a short-term solution.\r\n\r\n```sh\r\nFOUNDRY_PROFILE=optimized \\\r\nforge verify-contract merkleStreamerLL \\\r\n./src/SablierV2MerkleStreamerLL.sol:SablierV2MerkleStreamerLL \\\r\n--chain sepolia \\\r\n--etherscan-api-key $ETHERSCAN_API_KEY \\\r\n--watch \\\r\n--constructor-args \\\r\n$(\r\n  cast abi-encode \"constructor(address,address,address,bytes32,uint40,(uint40,uint40),bool,bool)\" \\\r\n  initialAdmin \\\r\n  lockupLinear \\\r\n  asset \\\r\n  merkleRoot \\\r\n  expiration \\\r\n  durations \\\r\n  cancelable \\\r\n  transferable\r\n)\r\n```","createdAt":"2024-02-02T10:35:44Z","labels":[],"number":32,"repository":"sablier-labs/airdrops","state":"closed","title":"Automated verification of `Merkle` contracts","type":"discussion","updatedAt":"2025-08-05T18:22:35Z","url":"https://github.com/sablier-labs/airdrops/discussions/32"},{"author":"smol-ninja","body":"### Problem\r\n\r\nLet's consider a scenario where a campaign creator announces, in advance, to redistribute forfeited funds among recipients who claim after the vesting period has ended. In this case, a user might take the following steps:\r\n\r\n- Uses the public `claim` function to claim for all users as soon as possible, maximising the forfeited amount.\r\n- Once the campaign ends, this same user claims his own allocation making themselves the sole recipient of the forfeited funds.\r\n\r\nSince this could create incentives to misuse the public `claim` function, I believe it could be a valid concern for VCA users as well.\r\n\r\nWhat do you think about removing the public `claim` function from the `MerkleVCA` contract entirely and only keeping `claimTo` and `claimViaSig`?\r\n\r\n### Solution\r\n\r\nRemove the public `claim` function from the `MerkleVCA` contract entirely and only keeping `claimTo` and `claimViaSig`.\r\n\r\n### References:\r\n- https://github.com/sablier-labs/airdrops/blob/staging/src/SablierMerkleVCA.sol#L150\r\n\r\nRFC @sablier-labs/evm and @razgraf.","createdAt":"2025-06-23T10:57:30Z","labels":[],"number":169,"repository":"sablier-labs/airdrops","state":"closed","title":"Thoughts on removing public `claim` function in VCA campaign?","type":"discussion","updatedAt":"2025-07-11T15:16:28Z","url":"https://github.com/sablier-labs/airdrops/discussions/169"},{"author":"smol-ninja","body":"Dropping some resources for future reference when we integrate more than one oracle (will keeping adding more to the list):\r\n\r\n1. [How Aave implements fallback oracle mechanism](https://github.com/aave/aave-v3-core/blob/master/contracts/misc/AaveOracle.sol)","createdAt":"2025-02-26T07:41:11Z","labels":[],"number":78,"repository":"sablier-labs/airdrops","state":"closed","title":"Resources to study oracle integrations","type":"discussion","updatedAt":"2025-06-23T10:59:32Z","url":"https://github.com/sablier-labs/airdrops/discussions/78"},{"author":"smol-ninja","body":"This is a follow-up to https://github.com/sablier-labs/company-discussions/discussions/98 and focuses on exploring the technical implementations.\r\n\r\n## Context\r\n\r\nThe implementation should integrate with the existing `MerkleVCA` contract. This would enable users to switch to the _REDISTRIBUTE_ strategy later in the campaign.\r\n\r\nLet's say, if a user discovers a high number of early claimers, he could decide to discourage this by transitioning to the _REDISTRIBUTE_ strategy. This added flexibility gives them superpower to have more control over the campaign.\r\n\r\n## Technical implementation\r\n\r\n### Set up\r\n\r\nUsers can select a strategy:\r\n- During the campaign deployment.\r\n- After deployment via a dedicated function. Any _DEFAULT_ Merkle VCA can be converted into _REDISTRIBUTE_.\r\n\r\n```solidity\r\nenum Strategy { DEFAULT, REDISTRIBUTE }\r\nStrategy private _strategy;\r\n\r\nfunction switchToRedistribute(uint40 rewardsTime, uint40 expirationTime) public onlyCampaignCreator;\r\n```\r\n\r\n### Timestamps Chronology\r\n\r\nThe relationship between timestamps is as follows: _vestingStartTime < vestingEndTime <  expiration_ (similar to Standard MerkleVCA)\r\n\r\n### Total Claimed Amount until Vesting end time\r\n\r\n```solidity\r\n/// @dev Total amount until vesting end time. This will be helpful in identifying rewards.\r\nuint256 public totalClaimedAmount;\r\n```\r\n\r\nNote that the total claimed amount represents amount received by the recipients. So, it complements total forgone amount.\r\n\r\n### Claim function after vesting end time\r\n\r\nWe assume optimistically that after the end time has passed, the remaining users will come to claim. So, the rewards calculation takes that into account.\r\n\r\n`rewardsPerToken = totalForgoneAmount / (aggregateAmount - totalClaimedAmount - totalForgoneAmount)`\r\n\r\nThis is analogous to saying that we would distribute `totalForgoneAmount` among all the users left to claim. `aggregateAmount - totalClaimedAmount - totalForgoneAmount` represents amount left to claim. And then we multiply it with `claimAmount` to find the `rewardsAmount`\r\n\r\n### Minimum APY function\r\n\r\n```solidity\r\n/// @notice Returns the minimum APY. Minimum because it assumes that from now \r\n/// on everyone would claim post end time.\r\nfunction rewardsAPY() view returns (UD60x18);\r\n```\r\n\r\n_amountLeftToClaim = aggregateAmount - totalClaimedAmount - totalForgoneAmount\r\n_rewardsAPY = totalForgoneAmount / amountLeftToClaim_\r\n\r\n### Question\r\n\r\nShould redistribution apply only to the `totalForgoneAmount` or to the combined `forgoneAmount + amount unclaimed after vesting end time`.\r\n\r\n#### Answer\r\n\r\nMe and Andrei decided to distribute only `totalForgoneAmount`. After the expiry has passed, campaign created can clawback the leftover balance from the contract.\r\n\r\n@sablier-labs/evm RFC.","createdAt":"2025-03-22T19:04:40Z","labels":[],"number":117,"repository":"sablier-labs/airdrops","state":"closed","title":"`MerkleVCA` with REDISTRIBUTE Strategy","type":"discussion","updatedAt":"2025-04-09T10:01:04Z","url":"https://github.com/sablier-labs/airdrops/discussions/117"},{"author":"smol-ninja","body":"## Problem\r\n\r\nIn solidity contracts, we organize functions into the following categories:\r\n\r\n| Category | Visibility | State mutability | \r\n| -- | -- | -- |\r\n| USER-FACING CONSTANT FUNCTIONS | `public`, `external` | No (view/pure) |\r\n| USER-FACING NON-CONSTANT FUNCTIONS | `public`, `external` | Yes |\r\n| INTERNAL CONSTANT FUNCTIONS | `internal` | No (view/pure) |\r\n| INTERNAL NON-CONSTANT FUNCTIONS | `internal` | Yes |\r\n| PRIVATE CONSTANT FUNCTIONS | `private` | No (view/pure) |\r\n| PRIVATE NON-CONSTANT FUNCTIONS | `private` | Yes |\r\n\r\nThis classification can cause confusion in some situations such as:\r\n\r\n1. The term [constant functions](https://en.wikipedia.org/wiki/Constant_function) refers to a function that return the same value for all inputs. However, in Solidity, it’s used for functions like `getFee(address campaignCreator)`, which conflicts with the definition.\r\n\r\n2. Where would you put a function like `function _forbidNativeToken(address token) internal view;` ([asked here](https://github.com/sablier-labs/airdrops/pull/93#discussion_r2003503578))?\r\n\r\n## Solution\r\n\r\n| Old | New |\r\n| -- | -- |\r\n| USER-FACING CONSTANT FUNCTIONS | USER-FACING READ-ONLY FUNCTIONS  |\r\n| USER-FACING NON-CONSTANT FUNCTIONS | USER-FACING STATE-CHANGING FUNCTIONS  |\r\n| INTERNAL CONSTANT FUNCTIONS | INTERNAL READ-ONLY FUNCTIONS  |\r\n| INTERNAL NON-CONSTANT FUNCTIONS | INTERNAL STATE-CHANGING FUNCTIONS  |\r\n| PRIVATE CONSTANT FUNCTIONS | PRIVATE READ-ONLY FUNCTIONS  |\r\n| PRIVATE NON-CONSTANT FUNCTIONS | PRIVATE STATE-CHANGING FUNCTIONS  |\r\n\r\n- `READ-ONLY`: implies that the function can \"only\" read a state, be it constant or non-constant variable.\r\n- `STATE-CHANGING`: implies it changes states, but it can also read a state.\r\n\r\nSince `_forbidNativeToken` only read states, it can be placed under `INTERNAL READ-ONLY FUNCTIONS` using the new classification. \r\n\r\nAndrei suggested [here](https://github.com/sablier-labs/airdrops/pull/93#discussion_r2003785762) to use `USER-FACING READ FUNCTIONS` and `USER-FACING WRITE FUNCTIONS` to which I think:\r\n\r\n1. READ-ONLY is more explicit as READ is an operation that state-modifying functions perform too.\r\n2. STATE-CHANGING is more explicit over WRITE terminology. Also, we use `STATE VARIABLES` categories for variables so putting functions under STATE-CHANGING seems more reasonable as they changes states specified under `STATE VARIABLES`\r\n\r\nRFC @sablier-labs/evm.","createdAt":"2025-03-20T23:01:50Z","labels":[],"number":110,"repository":"sablier-labs/airdrops","state":"closed","title":"Reclassifying functions","type":"discussion","updatedAt":"2025-03-23T14:54:33Z","url":"https://github.com/sablier-labs/airdrops/discussions/110"},{"author":"PaulRBerg","body":"Something like UD2x18 but for Chainlink 8-decimal prices, e.g.\r\n\r\n```solidity\r\ntype UD70x8 is uint256;\r\n```\r\n\r\nWDYT @sablier-labs/evm?","createdAt":"2025-03-20T21:03:58Z","labels":[],"number":107,"repository":"sablier-labs/airdrops","state":"open","title":"Introducing a PRBMath type for the Chainlink 8-decimals","type":"discussion","updatedAt":"2025-03-21T22:58:21Z","url":"https://github.com/sablier-labs/airdrops/discussions/107"},{"author":"smol-ninja","body":"## Context\r\n\r\nPrior to https://github.com/sablier-labs/airdrops/issues/37, no parameters check were placed in the [`claim`](https://github.com/sablier-labs/airdrops/blob/main/src/SablierMerkleLL.sol#L95-L117) function of Merkle Lockup. The reason was, if any of the parameters is invalid (e.g., `totalDuration < cliffDuration`), stream creation would eventually revert. This could then notify the campaign creator who can take action within the grace period.\r\n\r\nHowever, this changes after https://github.com/sablier-labs/airdrops/pull/77. \r\n\r\n> [!NOTE]  \r\n> Pointed out in Cantina audit's [finding-4](https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/4).\r\n\r\n## Problem\r\n\r\nDue to direct transfers, parameters can be misconfigured in a way that prevents stream creation but allows direct transfer.\r\n\r\nFor example, if the total duration is less than cliff duration. This would allow direct transfer if `startTime + totalDuration <= block.timestamp` but revert on stream creation. [Click](https://github.com/sablier-labs/airdrops/blob/staging/src/SablierMerkleLL.sol#L93-L110) to see the code from `MerkeLL` contract.\r\n\r\n## Auditors's recommendations\r\n\r\nAuditors have suggested to implement Lockup parameter checks directly in the constructor, and make sure all parameters are valid as per the Lockup requirements. This approach, however, doesn’t fully resolve the problem because of the non-ranged streams. \r\n\r\nTo this, @andreivladbrg has suggested a solution to assume expiry to be 1 year for non-ranged streams and run all the checks in the constructor to which I object that the claim can be made after 1 year. So, this doesn't solve it completely.\r\n\r\n## My remarks\r\n\r\nDo nothing and keep it simple.\r\n\r\nIn case of campaigns, params validation should be the responsibility of the campaign creators. Campaign creators can take action within the grace period in case of misconfiguration. By checking all the Lockup requirements in the constructor, campaign creator will pay high gas to create it, whereas the recipients will continue to pay the same cost because of the parameter checks in the Lockup. Also, it will be complicated as we will have the following checks:\r\n\r\n### MerkleLL\r\n#### Ranged streams (can be placed only in constructor)\r\n- `cliff duration <= total duration `\r\n- `startPercentage + cliffPercentage <= 100`\r\n- `if cliffPercentage > 0 => cliff duration > 0`\r\n- `total duration > 0`\r\n- `end time = start time + total duration` to make sure that end time does not overflow.\r\n\r\n#### Non-ranged streams (should be placed both in constructor and claim)\r\n- Same as above except start time can be anywhere until `max(uint40)`\r\n\r\n### MerkleLT\r\n#### Ranged streams (can be placed only in constructor)\r\n- Tranches are in order\r\n- Tranche amounts > 0\r\n- Tranche timestamps > 0\r\n- end time does not overflow\r\n\r\n#### Non-ranged streams (should be placed both in constructor and claim)\r\n- Same as above except start time can be anywhere until `max(uint40)`\r\n\r\nIMO if the end time exceed block time, from the direct transfer point of view, the logic should allow direct transfer of tokens. It is ultimately their responsibility to realize this and take action.\r\n\r\nRFC @sablier-labs/evm and @sablier-labs/frontend.","createdAt":"2025-03-16T19:27:03Z","labels":[],"number":94,"repository":"sablier-labs/airdrops","state":"closed","title":"Misconfigured campaign can revert on Lockup stream but allow direct transfers","type":"discussion","updatedAt":"2025-03-17T18:58:00Z","url":"https://github.com/sablier-labs/airdrops/discussions/94"},{"author":"PaulRBerg","body":"## Context\r\n\r\nIn Airdrops v1.4.0, the tokens will be immediately released if the vesting period had already ended by the time when the user claims the airdrop. See [this issue](https://github.com/sablier-labs/airdrops/issues/37) and [this discussion](https://github.com/sablier-labs/airdrops/discussions/33) for more context on the rationale behind that decision.\r\n\r\n## Problem\r\n\r\nAirdrops support several new vesting shapes now, including _Unlock Linear_ and _Unlock Cliff_:\r\n\r\n<img width=\"400\" alt=\"SCR-20250307-opdn\" src=\"https://github.com/user-attachments/assets/1ec8efe0-1c84-4941-8ac4-bf699ab57adb\" />\r\n\r\nBy creating a stream and not transferring that initial unlock through the airdrop contract itself, we charge users twice — $3 for the airdrop, and $1 for the stream withdrawal.\r\n\r\n## Solution\r\n\r\nCreate the stream as is but immediately withdraw the initial unlock to the user.\r\n\r\n## Feedback\r\n\r\nI'm not fully decided that immediately transferring the tokens is the right call here .. it's not as easy as when the vesting has fully ended.\r\n\r\ncc @sablier-labs/engineers for feedback","createdAt":"2025-03-07T22:39:31Z","labels":[],"number":85,"repository":"sablier-labs/airdrops","state":"open","title":"Immediately transfer the initial unlock in Unlock Linear and Unlock Cliff","type":"discussion","updatedAt":"2025-03-10T16:53:33Z","url":"https://github.com/sablier-labs/airdrops/discussions/85"},{"author":"smol-ninja","body":"## Problem\r\n\r\nOur current `MerkleFactory` design cannot support the `MerkleVCA` contract. After adding `MerkleVCA` code, the Factory contract exceeds the size limit. At 1,000 runs, it is at 29.8 kB which is 5.2 kB over the limit. Even at just one run, it is at 27.9 kB, exceeding the limit by 3.4 kB.\r\n\r\nAs a result, we are at a point where we need to rethink its design to support not only `MerkleVCA` contract but also the [new flavour of AVCA ](https://github.com/sablier-labs/company-discussions/discussions/98) as well as all the new merkle airdrop contracts that we will deploy in the future.\r\n\r\n## Solutions\r\n\r\nI've considered three potential solutions and would like to share them with you.\r\n\r\n### Solution 1: One Factory per Campaign\r\n\r\nEach campaign would have its own dedicated factory. \r\n\r\nThis is definitely scalable, but comes with migraine. We will have to maintain 4 Factory addresses. Its like going back to 3 flavours of Sablier Lockups from the singleton contract.\r\n\r\n### Solution 2: Two Factories for Two Campaign Groups\r\n\r\nWe could separate campaigns into two factories:\r\n\r\n1. One for `MerkleLL` and `MerkleLT`\r\n2. Another for `MerkleInstant` and `MerkleVCA`\r\n\r\nWhile this solution reduces the number of factories compared to Solution 1, it still comes with migraine. When we add new campaign type, additional factories would be required. There can also be grouping problem in the future as which campaign to group together etc.\r\n\r\n### Solution 3: Deploy Proxy for Campaigns\r\n\r\nSo what if we introduce proxy deployments? This would continue to allow us to maintain a single factory to manage all the campaigns. Instead of deploying the Merkle contract directly (current design), the factory would deploy a proxy contract that points to a pre-deployed campaign address. So we get,\r\n\r\n- Each campaign is deployed only once.\r\n- Only one factory is needed.\r\n- Campaign creators deploy proxy contracts via the factory, pointing to an existing campaign contract.\r\n\r\nThis solution is highly scalable. The concern of upgradeability would not apply here as the proxy will not be upgradeable. The addresses of the pre-deployed campaigns will be stored into the Factory bytecode as immutable. It would be similar to Lockup + Library design where we will first deploy campaign contracts and use those addresses to deploy Factory.\r\n\r\n## My vote\r\n\r\nI am in favour of Solution 3.\r\n\r\nRFC @sablier-labs/engineers.","createdAt":"2025-02-05T22:58:32Z","labels":[],"number":57,"repository":"sablier-labs/airdrops","state":"closed","title":"Rethinking `MerkleFactory` design","type":"discussion","updatedAt":"2025-03-04T16:23:00Z","url":"https://github.com/sablier-labs/airdrops/discussions/57"},{"author":"PaulRBerg","body":"Any reason for not making the `clawback` function permisionless (callable by anyone) after expiry?\r\n\r\ncc @sablier-labs/solidity","createdAt":"2025-01-27T14:43:21Z","labels":[],"number":47,"repository":"sablier-labs/airdrops","state":"closed","title":"Making the clawback function permissionless after expiry?","type":"discussion","updatedAt":"2025-01-31T13:58:05Z","url":"https://github.com/sablier-labs/airdrops/discussions/47"},{"author":"razgraf","body":"Support for Lockup Dynamics inside the Merke suite of contracts has been requested by one of our users. They're looking to define a custom shape, so the Linear flavor doesn't match their proposed design.\r\n\r\nWhen/how/should we start working on `SablierV2MerkleStreamerFactoryLD`?\r\n\r\nWorth mentioning this user is considering a very big distribution, so there's a considerable upside in Sablier being able to support their campaign.","createdAt":"2023-12-12T22:03:08Z","labels":[],"number":30,"repository":"sablier-labs/airdrops","state":"closed","title":"Merkle contract for Lockup Dynamic","type":"discussion","updatedAt":"2025-01-31T13:43:17Z","url":"https://github.com/sablier-labs/airdrops/discussions/30"},{"author":"smol-ninja","body":"Rusty mentioned on Discord that the campaign creator relies on the correct lockup address being provided to the constructors of `MerkleLL` and `MerkleLT` during campaign deployment. If an incorrect lockup address is supplied, the constructor could unintentionally grant full token approval to a malicious address. To address this issue, he recommended to move `forceApprove` to the claim function, and only approve the claim amount.\r\n\r\nPros is very clear, cons is each claim will cost more gas at the expense of security.\r\n\r\nhttps://github.com/sablier-labs/airdrops/blob/2fbbe7094c2cd9adeed1a5563e903e5347626dc9/src/SablierMerkleLT.sol#L70-L78\r\n\r\nhttps://github.com/sablier-labs/airdrops/blob/2fbbe7094c2cd9adeed1a5563e903e5347626dc9/src/SablierMerkleLT.sol#L97-L98\r\n\r\ncc @sablier-labs/solidity ","createdAt":"2025-01-09T08:40:42Z","labels":[],"number":42,"repository":"sablier-labs/airdrops","state":"closed","title":"Should we move away from approving max amount to claim amount?","type":"discussion","updatedAt":"2025-01-10T07:56:12Z","url":"https://github.com/sablier-labs/airdrops/discussions/42"},{"author":"PaulRBerg","body":"We need to figure out a way to improve the DX in this case:\r\n\r\n<img width=\"500\" alt=\"SCR-20240201-mwwf\" src=\"https://github.com/sablier-labs/v2-periphery/assets/8782666/3caf0bc2-4833-4244-9aff-cc8969be2661\">\r\n\r\nIdeally, the subgraph should not be required.\r\n\r\nCc @razgraf, @gavriliumircea.","createdAt":"2024-02-01T12:32:12Z","labels":[],"number":31,"repository":"sablier-labs/airdrops","state":"closed","title":"How to improve DX for looking up the stream id after claiming from an airstream?","type":"discussion","updatedAt":"2025-01-06T10:23:23Z","url":"https://github.com/sablier-labs/airdrops/discussions/31"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nAs suggested by user, the idea is to provide an airdrop contract that transfers the assets directly to the user instead of creating a Sablier stream **when the vesting period has ended**.\r\n\r\nOf course, this assumes that the airdrop is [ranged](https://github.com/sablier-labs/v2-periphery/discussions/279).\r\n\r\n<img width=\"300\" alt=\"SCR-20241223-qaqg\" src=\"https://github.com/user-attachments/assets/8088c69c-d0b9-4c60-aac7-4bb74114fac3\" />\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/engineers\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/v2-periphery/discussions/279\r\n- https://github.com/sablier-labs/v2-core/discussions/912","createdAt":"2024-12-23T16:30:08Z","labels":[],"number":33,"repository":"sablier-labs/airdrops","state":"closed","title":"Airdrops in which the tokens are immediately transferred if the vesting period has ended","type":"discussion","updatedAt":"2025-01-05T11:55:00Z","url":"https://github.com/sablier-labs/airdrops/discussions/33"},{"author":"razgraf","body":"A user requested the following feature for airstreams: a synchronized end time for all streams claimed from an airstream campaign. \r\n\r\nThis would involve setting a specific end time for all streams, such that all claimed streams end on the same date. It basically results in support for `createWithRange` alongside the current `duration`-driven claim function.\r\n\r\nSome questions:\r\n- What should the start time be set to? The claim date (meaning streams will end up with different durations) or a hard value provided by the admin at campaign creation?\r\n- Should the end time have any connection to the airstream's expiry date?\r\n\r\n\r\n<img width=\"457\" alt=\"Screenshot 2024-02-05 at 12 19 05\" src=\"https://github.com/sablier-labs/v2-periphery/assets/15740806/9a4a6be4-0f8c-41bb-b2c4-f12b7ca89bb1\">\r\n","createdAt":"2024-02-05T10:28:54Z","labels":[],"number":29,"repository":"sablier-labs/airdrops","state":"closed","title":"Request for range(d) airstreams","type":"discussion","updatedAt":"2025-01-04T06:02:02Z","url":"https://github.com/sablier-labs/airdrops/discussions/29"},{"author":"smol-ninja","body":"The current doc's structure is inspired by Uniswap keeping in mind only 1 product. That structure now seems to be outdated. For example, Uniswap also allows trading NFT (thanks to Genie acquisition) on their platform, but their documentation has no information on Genie. Given that, soon we would have more than 1 protocol (Lockup, Flow, Solana Lockups etc.), its time to think about refactoring the structure of the documentation site.\r\n\r\n----------------\r\n\r\nI looked at several options and balancer docs stood out for me: https://docs.balancer.fi/.\r\n\r\n- Every page is always under a sub-category.\r\n- Developer guides and technical references are separate categories. In our case, they are merged under **Contracts** category. Having them separate is useful to include multiple protocols.\r\n\r\nSimilarly, Sablier docs can be refactored as the following:\r\n\r\n```markdown\r\n\r\n- Top bar\r\n    - Concepts\r\n    - Developer Guides\r\n    - Technical References \r\n    - Apps\r\n    - APIs\r\n\r\n- Concepts\r\n    - What Is Sablier? (includes content from The Sablier Protocol)\r\n    - Streaming\r\n    - Use Cases\r\n    - Lockup\r\n    - Flow\r\n    - Common pages such as Fees, NFTs etc.\r\n    - Security/Audits\r\n    - Governance\r\n    - Glossary\r\n\r\n- Developer Guides\r\n    - Lockup (overview, content from Guides, Gas benchmarks, deployment addresses, older versions)\r\n    - Flow (overview, content, gas benchmarks, deployment addresses, older versions)\r\n\r\n- Technical References\r\n    - Lockup (content from smart contract references)\r\n    - Flow\r\n\r\n- Apps\r\n    - Overview\r\n    - Lockup\r\n    - Airstreams\r\n    - Flow\r\n    - Branding\r\n    - Guides\r\n```\r\n---------------------\r\n\r\nFeel free to share more ideas for docs. Also arguments in favour / against restructuring are welcome.","createdAt":"2024-07-29T20:13:51Z","labels":[],"number":167,"repository":"sablier-labs/docs","state":"closed","title":"Ideas for restructuring documentation site for Lockup and Flow","type":"discussion","updatedAt":"2025-01-18T06:23:09Z","url":"https://github.com/sablier-labs/docs/discussions/167"},{"author":"PaulRBerg","body":"[The deployments page](https://github.com/sablier-labs/docs/blob/0ff9d328a925e9ac2af63268a56b2791dcb0ef3e/docs/contracts/v2/02-deployments.md#L4) has become rather verbose and hence difficult to maintain.\r\n\r\nWhat if we instead kept the deployment addresses in a neat JSON file, and generated the deployments page using a Shell script?\r\n\r\nCC @andreivladbrg @smol-ninja.","createdAt":"2024-07-08T06:37:25Z","labels":[],"number":160,"repository":"sablier-labs/docs","state":"closed","title":"Generate deployments page with script from JSON file","type":"discussion","updatedAt":"2024-07-22T12:51:10Z","url":"https://github.com/sablier-labs/docs/discussions/160"},{"author":"PaulRBerg","body":"The [deployment addresses](https://docs.sablier.com/contracts/v2/deployments) will change when we deploy V2.1.\r\n\r\nWhere should we keep the reference for V2.0?","createdAt":"2023-08-29T08:25:50Z","labels":[],"number":97,"repository":"sablier-labs/docs","state":"closed","title":"Where to index historical deployments?","type":"discussion","updatedAt":"2024-01-01T12:07:23Z","url":"https://github.com/sablier-labs/docs/discussions/97"},{"author":"razgraf","body":"Switching to `styled-components` would make this repository more consistent with the rest of our codebases. \r\n\r\nIn trying to do so, I've started to experience flickers on-page-load, which made it impossible to use `styled-components`. Interestingly enough, `@emotion` doesn't suffer from this same issue - so for the time being we may just have to stick with it (similar to what Uniswap is doing in their own docs website).\r\n\r\nThe problem with CSS-in-JS support seems to be quite well known in the docusaurus community and is being [tracked here](https://github.com/facebook/docusaurus/issues/3236).","createdAt":"2023-07-04T11:29:22Z","labels":[],"number":30,"repository":"sablier-labs/docs","state":"open","title":"CSS-in-JS caveats","type":"discussion","updatedAt":"2023-08-15T18:43:34Z","url":"https://github.com/sablier-labs/docs/discussions/30"},{"author":"PaulRBerg","body":"The current docs show how to create streams by interacting with the core directly:\r\n\r\n- [Create a Lockup Linear stream](https://sablier-v2-docs.vercel.app/contracts/v2/guides/create-stream/linear)\r\n- [Create a Lockup Dynamic stream](https://sablier-v2-docs.vercel.app/contracts/v2/guides/create-stream/dynamic)\r\n\r\nThe problem is that streams not created via the proxy will not appear in the Sablier UI (ref: https://github.com/sablierhq/v2-periphery/discussions/11).\r\n\r\nSo, the question is: should we only document the proxy approach of creating streams, and not even mention the direct way?\r\n\r\nPros for \"yes\":\r\n\r\n- Avoiding cases where the integrators intended the streams to be manageable via the Sablier UI\r\n- Promoting the use of the proxy approach across the ecosystem\r\n\r\nCons for \"yes\":\r\n\r\n- Overcomplicating the docs\r\n- Having to explain the proxy system would make the docs more difficult to follow through\r\n- Not all developers may want to use the periphery; e.g. DAOs creating streams may not need to see their streams in the Sablier UI (as senders)\r\n\r\nCc @razgraf, @gavriliumircea.","createdAt":"2023-05-17T09:14:28Z","labels":[],"number":19,"repository":"sablier-labs/docs","state":"closed","title":"Should we document how to create streams only via the proxy?","type":"discussion","updatedAt":"2024-09-25T17:30:50Z","url":"https://github.com/sablier-labs/docs/discussions/19"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAfter spending ~a month [refactoring the Indexers repo](https://github.com/sablier-labs/indexers/pull/92), I've learned how difficult it is to maintain multiple indexers (Envio, The Graph) for the same EVM product, e.g., Sablier Lockup.\r\n\r\nThe root of the issue is that the mappings logic cannot be reused between The Graph and Envio — the former uses AssemblyScript, whereas the latter uses TypeScript with a [hard dependency on PNPM](https://github.com/enviodev/docs/issues/622).\r\n\r\n## Solution\r\n\r\nFor our next EVM product, which is likely going to be the staking protocol @smol-ninja is currently working, I suggest only implementing Envio — so that we can go to market faster.\r\n\r\n✅ Faster than The Graph\r\n✅ Better customer support than The Graph\r\n\r\ncc @sablier-labs/frontend for feedback","createdAt":"2025-06-17T18:39:43Z","labels":[],"number":149,"repository":"sablier-labs/indexers","state":"closed","title":"Envio-only approach to speed up development of our future EVM products","type":"discussion","updatedAt":"2025-07-18T12:50:13Z","url":"https://github.com/sablier-labs/indexers/discussions/149"},{"author":"PaulRBerg","body":"## Questions\r\n\r\n1. The `parties` array includes duplicates when the sender is the same as the recipient. Is this intended behavior?\r\n2. What do we need the `parties` array for, really? There's quite a bit of engineering effort put into maintaining the array (because AssemblyScript is a PITA). Aren't `sender`, `recipient`, and `proxender` enough? If they are, can we remove it?\r\n\r\nI looked at the UI but couldn't find any place where the `parties` array is used.\r\n\r\ncc @razgraf @gavriliumircea\r\n\r\n## Example\r\n\r\non Mainnet:\r\n\r\n```graphql\r\n{\r\n  stream(id: \"0x7c01aa3783577e15fd7e272443d44b92d5b21056-1-4758\") {\r\n    parties\r\n  }\r\n}\r\n```\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"stream\": {\r\n      \"parties\": [\r\n        \"0xa4a3112178e318dcac4dc661802ea91668e44f23\",\r\n        \"0xa4a3112178e318dcac4dc661802ea91668e44f23\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```","createdAt":"2025-07-14T11:07:05Z","labels":[],"number":171,"repository":"sablier-labs/indexers","state":"closed","title":"The \"parties\" array includes duplicates when the sender is the same as the recipient","type":"discussion","updatedAt":"2025-07-14T11:20:46Z","url":"https://github.com/sablier-labs/indexers/discussions/171"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe ID of a stream is a rather technical blob of information at the moment, e.g.\r\n\r\n```text\r\nLK-42161-625 // contractAlias-chainId-tokenId\r\n```\r\n\r\nSpecifically, the problems are:\r\n\r\n1. It's not obvious that the 2nd number is the chain ID\r\n2. 99% of users don't care about the chain ID anyway.\r\n\r\n## Solution\r\n\r\nReplace the chain ID with the [ERC-3770](https://eips.ethereum.org/EIPS/eip-3770) chain-specific prefix, like so:\r\n\r\n```text\r\nLK-ARB-625\r\n```\r\n\r\nAnd:\r\n\r\n```text\r\nLK-OPT-625\r\n```\r\n\r\n### About Backward-Compatibility\r\n\r\n- The UI can remain backward-compatible by re-routing `LK-42161-625` to `LK-arb-625`\r\n- The indexers won't be backward-compatible. However, I think this is a worthwhile change that would improve the UX for end users. There shouldn't be any integrator depending upon the `alias`.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/frontend for feedback, WDYT?","createdAt":"2025-07-07T20:44:42Z","labels":[],"number":167,"repository":"sablier-labs/indexers","state":"open","title":"Use ERC-3770 chain-specific prefixes instead of chain ID in the stream alias","type":"discussion","updatedAt":"2025-07-08T13:30:40Z","url":"https://github.com/sablier-labs/indexers/discussions/167"},{"author":"PaulRBerg","body":"From the BuildersDAO audit report:\r\n\r\n<img width=\"400\" alt=\"SCR-20250624-ooel\" src=\"https://github.com/user-attachments/assets/d57f36ec-a7d2-4be8-9b26-c7ac642148e2\" />\r\n\r\nI see that the UI queries both the `endTime` and the `timestamp`/ `milestone`. But why? this seems superfluous:\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/subgraphs/src/documents/lockup/fragments.ts#L57-L68\r\n\r\nCan we delete \"Tranche.timestamp\" and \"Segment.milestone\", @razgraf, @gavriliumircea?\r\n","createdAt":"2025-06-24T13:33:34Z","labels":[],"number":158,"repository":"sablier-labs/indexers","state":"closed","title":"Can we delete \"Tranche.timestamp\" and \"Segment.milestone\"?","type":"discussion","updatedAt":"2025-06-27T20:05:04Z","url":"https://github.com/sablier-labs/indexers/discussions/158"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nMK-5 finding from BuildersDAO audit report:\r\n\r\n<img width=\"500\" alt=\"SCR-20250624-pfqp\" src=\"https://github.com/user-attachments/assets/88d17d88-485e-43fe-9d52-d80b0dc8b9b5\" />\r\n\r\n## Potential Solutions\r\n\r\n1. Rename to `latestClawback`\r\n2. Remove fields altogether\r\n3. Remove `clawback` and introduce `clawbacks` array\r\n\r\nWhich one do you want to go with, @razgraf, @gavriliumircea? Not sure what the UI does at the moment.\r\n\r\nAnd can you please create an issue?","createdAt":"2025-06-24T14:23:01Z","labels":[],"number":161,"repository":"sablier-labs/indexers","state":"closed","title":"Airdrop campaigns can be clawbacked multiple times","type":"discussion","updatedAt":"2025-06-27T16:17:34Z","url":"https://github.com/sablier-labs/indexers/discussions/161"},{"author":"kasrakhosravi","body":"gm frens :) \r\n\r\nI think [eRPC](https://github.com/erpc/erpc) can be a useful for Sablier's indexing (or other domains such as frontend). The main benefits probably can be summarized as below:\r\n\r\n* Speed up indexing and data fetching via [caching](https://docs.erpc.cloud/config/database/evm-json-rpc-cache)\r\n* Save costs via caching, multiplexing, and selection policies\r\n* Increase resiliency via [hedging](https://docs.erpc.cloud/config/failsafe#hedge-policy) and failover\r\n* Increase data quality through [integrity](https://docs.erpc.cloud/config/failsafe/integrity) mechanisms\r\n\r\nThe way you can adopt this is to:\r\n\r\n* Either use the open-source version and deploy it in your own infra ([k8s](https://docs.erpc.cloud/deployment/kubernetes), [Docker](https://docs.erpc.cloud/deployment/docker), [Railway](https://docs.erpc.cloud/deployment/railway), etc.). You can configure all your RPC providers into the [config](https://docs.erpc.cloud/config/example)\r\n\r\n* Or use our aggregator endpoint where we give you an endpoint for any evm chain you need access to; and behind the scenes it gets benefit from erpc to offer the sweet spot of latency, data integrity, resiliency and cost.","createdAt":"2025-06-25T08:06:40Z","labels":[],"number":162,"repository":"sablier-labs/indexers","state":"open","title":"Using eRPC to speed up indexing and increasing resiliency and data integrity of Sablier's RPC stack","type":"discussion","updatedAt":"2025-06-26T19:37:08Z","url":"https://github.com/sablier-labs/indexers/discussions/162"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIt makes more logical sense to begin the IDs with the chain ID — not with the contract address or the tx hash or anything else, because the chain is the 'root' differentiator. All data is necessarily tied to one particular chain, and there can be duplicate address across chains. Thus, it's confusing to hav streams with IDs like this on Arbitrum and Optimism:\r\n\r\n| Chain | Stream ID |\r\n|--------|--------|\r\n| Arbitrum | `0xcafe000000000000000000000000000000000000-42161-100` |\r\n| Arbitrum | `0xcafe000000000000000000000000000000000000-42161-101` |\r\n| Optimism | `0xcafe000000000000000000000000000000000000-10-100` |\r\n| Optimism | `0xcafe000000000000000000000000000000000000-10-101` | \r\n\r\nAt first blush, these entities appear related, but they are anything but. One of them is a stream with `tokenId` 100 on the Arbitrum chain (ID 42161), while the other is a stream with `tokenId` 100 on chain Optimism (ID 10).\r\n\r\n> [!NOTE]\r\n> Double points of confusion if the contracts are different products, e.g. Flow and Lockup.\r\n\r\n## Solution\r\n\r\nRefactor the stream IDs - and all other IDs, really - to begin with the chain ID.\r\n\r\nAre any IDs used by the third-parties to query streams? IIRC, you said at one point @razgraf that the IDs aren't really used and we filter by sender addresses and other values like that.\r\n\r\n| Chain | Stream ID |\r\n|--------|--------|\r\n| Arbitrum | `42161-0xcafe000000000000000000000000000000000000-100` |\r\n| Arbitrum | `42161-0xcafe000000000000000000000000000000000000-101` |\r\n| Optimism | `10-0xcafe000000000000000000000000000000000000-100` | \r\n| Optimism | `10-0xcafe000000000000000000000000000000000000-101` | \r\n","createdAt":"2025-05-30T12:17:19Z","labels":[],"number":118,"repository":"sablier-labs/indexers","state":"closed","title":"Refactoring all entity IDs to begin with the chain ID","type":"discussion","updatedAt":"2025-06-24T16:36:23Z","url":"https://github.com/sablier-labs/indexers/discussions/118"},{"author":"PaulRBerg","body":"@razgraf @gavriliumircea\r\n\r\nThere are some chains for which we set the HyperSync config manually, e.g. Chiliz:\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/a432c08c12e0255e874cbac6a8fc20d7de8352ee/apps/flow-envio/config.yaml#L103-L104\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/a432c08c12e0255e874cbac6a8fc20d7de8352ee/packages/constants/src/addresses/chiliz.ts#L7\r\n\r\nI carried over this logic in [my PR](https://github.com/sablier-labs/indexers/pull/92), however, I now realize that I don't understand the goal.\r\n\r\nAs per the Envio docs on [HyperSync](https://docs.envio.dev/docs/HyperIndex/hypersync#improving-resilience-with-rpc-fallback):\r\n\r\n> **Default Enablement**\r\n> HyperSync is used by default as the data source for all HyperIndex networks.\r\n\r\nIs it because in previous versions of the Envio CLI, the HyperSync config was not enabled by default? Or HyperSync did not support some chains, by default?\r\n\r\nSorry to tag you @DZakh but maybe you could help us quickly elucidate this mystery?","createdAt":"2025-06-17T10:08:16Z","labels":[],"number":147,"repository":"sablier-labs/indexers","state":"closed","title":"Why do we manually set the HyperSync URL for some chains but not others?","type":"discussion","updatedAt":"2025-06-24T16:35:23Z","url":"https://github.com/sablier-labs/indexers/discussions/147"},{"author":"PaulRBerg","body":"Question for @razgraf @gavriliumircea\r\n\r\nThese `.cache `directories appear to be auto-generated\r\n\r\ne.g. https://github.com/sablier-labs/indexers/tree/main/apps/flow-envio/.cache\r\n","createdAt":"2025-05-01T09:34:58Z","labels":[],"number":84,"repository":"sablier-labs/indexers","state":"closed","title":"Are the `.cache` directories meant to be kept in version control?","type":"discussion","updatedAt":"2025-06-06T12:44:10Z","url":"https://github.com/sablier-labs/indexers/discussions/84"},{"author":"PaulRBerg","body":"Just like we git ignore `subgraph.yaml` in The Graph packages, shouldn't we also git-ignore the auto-generated `config.yaml` file in the Envio packages? Both are auto-generated and refer to particular chains.\r\n\r\ncc @razgraf @gavriliumircea\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/07b3166a41bda559f94ac5026f038efdbd8fb6fc/apps/flow-envio/config.yaml","createdAt":"2025-05-02T11:10:53Z","labels":[],"number":90,"repository":"sablier-labs/indexers","state":"closed","title":"Shouldn't the `config.yaml` file be kept out of version control?","type":"discussion","updatedAt":"2025-06-04T08:38:10Z","url":"https://github.com/sablier-labs/indexers/discussions/90"},{"author":"PaulRBerg","body":"@razgraf @gavriliumircea\r\n\r\nI was looking at the `chainId` field part of the `Stream` and `Action` entity, e.g.\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/07b3166a41bda559f94ac5026f038efdbd8fb6fc/apps/flow/src/helpers/action.ts#L22\r\n\r\nWhat do we need it for? It seems to be a redundant value because the chain ID is implicit in the subgraph ID being queried.\r\n\r\nI can see that it's used in the UI like so:\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/44c79b3d0d07389c3f6f3e83a7783197081eb7c2/packages/subgraphs/src/documents/flow/queries.ts#L84\r\n\r\nBut that query is necessarily passed to a specific subgraph ID, and that ID is always associated with a single chain ID, so I don't see the point of that `where` field?\r\n\r\nP.S. I'm asking because this `chainId` field might stand in the way of implementing https://github.com/sablier-labs/indexers/issues/93. [There isn't any way to obtain the `chainId` from the `ethereum.Block` type](https://github.com/graphprotocol/graph-tooling/discussions/2011), so we still need to declare a bespoke `env.ts` file with the chain ID. And now, the chain ID is the only thing that needs to be declared like this — whereas all other values (the contract addresses) can be sourced statically from the new `@sablier/deployments` package.\r\n\r\n**Edit**: I removed all `{ where: { chainId: $chainId }}` clauses in the GraphQL queries on a [branch](https://github.com/sablier-labs/interfaces/compare/refactor/remove-where-chain-id) in the UI repo, and the dashboard loaded all streams correctly (on multiple chains): https://github.com/sablier-labs/interfaces/commit/f91844f7a7601cf44f7e1140c86411d3bd02160d","createdAt":"2025-05-04T13:12:16Z","labels":[],"number":94,"repository":"sablier-labs/indexers","state":"closed","title":"What do we need the `chainId` field for?","type":"discussion","updatedAt":"2025-06-02T21:44:40Z","url":"https://github.com/sablier-labs/indexers/discussions/94"},{"author":"PaulRBerg","body":"@razgraf, @gavriliumircea\r\n\r\nThe entities for The Graph do not contain the `chainId`.\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow-envio/src/helpers/batch.ts#L60-L72\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow/src/helpers/batch.ts#L51-L57","createdAt":"2025-05-16T17:23:12Z","labels":[],"number":107,"repository":"sablier-labs/indexers","state":"closed","title":"Is it intentional that the `Batch` and `Batcher` entity IDs are different between Envio and The Graph?","type":"discussion","updatedAt":"2025-06-02T20:56:34Z","url":"https://github.com/sablier-labs/indexers/discussions/107"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/759\r\n- https://github.com/sablier-labs/sablier-v2-integration-template/pull/3","createdAt":"2023-12-31T11:47:06Z","labels":["effort: high","priority: 2","type: build","work: complicated"],"number":51,"repository":"sablier-labs/indexers","state":"closed","title":"Use Bun for dependency management","type":"discussion","updatedAt":"2025-06-02T20:55:59Z","url":"https://github.com/sablier-labs/indexers/discussions/51"},{"author":"PaulRBerg","body":"It looks like Envio's HyperIndexer doesn't require start blocks? @razgraf @gavriliumircea\r\n\r\nhttps://x.com/jonjonclark/status/1922627090609791049","createdAt":"2025-05-14T18:18:48Z","labels":[],"number":105,"repository":"sablier-labs/indexers","state":"closed","title":"Do we need the `start_block` for Envio?","type":"discussion","updatedAt":"2025-06-02T20:55:25Z","url":"https://github.com/sablier-labs/indexers/discussions/105"},{"author":"PaulRBerg","body":"@razgraf, @gavriliumircea\r\n\r\nSee my [StackExchange post](https://ethereum.stackexchange.com/q/168867/24693) to understand the difference between `logIndex` and `transactionLogIndex`.\r\n\r\nThe idea is to use `transactionLogIndex` instead of `logIndex` in the `Action.id` because:\r\n\r\n- The `logIndex` is the index of the log in the block.\r\n- The `transactionLogIndex` is the index of the log in the transaction.\r\n- The `id` already includes the tx hash, so it makes sense to contain an index that is specifically related to the tx.\r\n- In this way, the ID would contain more relevant information.\r\n\r\nRelated:\r\n\r\n- https://github.com/graphprotocol/graph-tooling/issues/2037\r\n- https://github.com/graphprotocol/graph-tooling/issues/2038","createdAt":"2025-05-18T12:29:36Z","labels":[],"number":113,"repository":"sablier-labs/indexers","state":"open","title":"Suggestion to use the `transactionLogIndex` instead of the block `logIndex` in the action ID","type":"discussion","updatedAt":"2025-05-19T13:28:32Z","url":"https://github.com/sablier-labs/indexers/discussions/113"},{"author":"PaulRBerg","body":"@razgraf\r\n\r\nWouldn't two categories be helpful? Especially after AVCAs.\r\n\r\nMaybe even three categories for `Claim`, to mirror the structure of `CampaignCategory`.\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/merkle/schema.graphql#L1-L6","createdAt":"2025-05-17T16:33:24Z","labels":[],"number":111,"repository":"sablier-labs/indexers","state":"open","title":"Don't we need two categories (ClaimInstant and ClaimLockup)?","type":"discussion","updatedAt":"2025-05-19T13:22:30Z","url":"https://github.com/sablier-labs/indexers/discussions/111"},{"author":"PaulRBerg","body":"@razgraf @gavriliumircea\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/c45d9d337e7f1483fc7d49fc7c133d33c56cb09f/apps/flow-envio/config.template.mustache#L34-L50","createdAt":"2025-05-14T10:07:29Z","labels":[],"number":102,"repository":"sablier-labs/indexers","state":"closed","title":"Why do we index only Flow v1.0 and not also Flow v1.1 in the Envio indexer?","type":"discussion","updatedAt":"2025-05-14T13:53:36Z","url":"https://github.com/sablier-labs/indexers/discussions/102"},{"author":"razgraf","body":"### Mustache and multi-network\r\n- In order to use the multi-network approach we went with mustache. There is a new multi-network support in the docs but it uses JSON files for configs.\r\n- As JSON files cannot be imported later into Assembly Script (to re-use constants in code as well as in the YAML template)\r\n- Mustache will take the `$NETWORK` variant given as an argument to the deploy script and prepare a JS file for the YAML template (mustache doesn't work with TS source files) and an `env.ts` file to be imported in the code\r\n\r\n### Configuration files\r\n- We use both YAML and YML because the subgraph requires `subgraph.yaml`. We should test if it works with simple YML type too.\r\n\r\n### Generated files\r\n- Generated files (by us and by `codegen`) have been moved together to `packages/core/src/generated`\r\n\r\n### Linter\r\n- There is no linter for Assembly Script (at least I couldn't find any, except from a makeshift one from Spotify.\r\n\r\n### Graph-cli/ts version\r\n- The latest known version of graph-cli (~0.39)[ doesn't play well](https://github.com/graphprotocol/graph-cli/issues/1008) with yarn berry. We reverted to an older version for the time being.\r\n\r\n\r\n### Duplicated logic in the create stream handlers\r\n\r\n```ts\r\nEventCreateLinearStream | EventCreateProStream\r\n```\r\n\r\nWhile the linear and pro events have a lot of common content, we [cannot use ](https://www.assemblyscript.org/concepts.html#strictly-typed)type **unions** in Assembly Script. AS doesn't even seem to allow defining custom types, which makes generics hard. I've also attempted to do it with classes (extending for common params and overriding different behavior) but to no avail.\r\n","createdAt":"2022-12-24T21:15:05Z","labels":[],"number":1,"repository":"sablier-labs/indexers","state":"closed","title":"Caveats and known limitations","type":"discussion","updatedAt":"2025-05-15T12:38:34Z","url":"https://github.com/sablier-labs/indexers/discussions/1"},{"author":"PaulRBerg","body":"Since:\r\n\r\n- The `initialized` status will no longer be applicable after #92\r\n- The `logs` are not set anywhere (and we should avoid bloating our production subgraph with development entities)\r\n\r\nThe only remaining fields are: `streamIndex` and `actionIndex`, and:\r\n\r\n- `streamIndex` is the same as the onchain field `nextStreamId` — or the last `Stream` entity's `tokenId` + 1.\r\n- And I don't see the point of `actionIndex`. What is it used for?\r\n\r\nSo do we still need this entity, @razgraf @gavriliumircea? If yes, would you be open to renaming `streamIndex` and `actionIndex` to smth like `streamCounter` and `actionCounter`? And similarly, rename `campaignIndex` to `campaignCounter` in the `Factory` entity.\r\n\r\nNote: I think it should be removed.","createdAt":"2025-05-11T13:40:59Z","labels":[],"number":100,"repository":"sablier-labs/indexers","state":"closed","title":"What is the purpose of the `Watcher` entity?","type":"discussion","updatedAt":"2025-05-13T10:42:25Z","url":"https://github.com/sablier-labs/indexers/discussions/100"},{"author":"PaulRBerg","body":"cc @razgraf, @gavriliumircea\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/c45d9d337e7f1483fc7d49fc7c133d33c56cb09f/apps/flow/src/helpers/stream.ts#L61-L63","createdAt":"2025-05-08T21:13:44Z","labels":[],"number":99,"repository":"sablier-labs/indexers","state":"closed","title":"Why do we assign these fields to `null`? Null is the default","type":"discussion","updatedAt":"2025-05-14T10:08:36Z","url":"https://github.com/sablier-labs/indexers/discussions/99"},{"author":"PaulRBerg","body":"I've noticed that we're using both `generated` and `_generated`. Why?\r\n\r\nAnd a question about this path:\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/07b3166a41bda559f94ac5026f038efdbd8fb6fc/.gitignore#L7\r\n\r\nShouldn't this be `_generated` instead of `generated`?\r\n\r\nIf not, why do we keep `src/_generated` in version control?\r\n\r\ncc @razgraf @gavriliumircea","createdAt":"2025-05-01T10:38:23Z","labels":[],"number":88,"repository":"sablier-labs/indexers","state":"closed","title":"Understanding the difference between `generated` and `_generated`","type":"discussion","updatedAt":"2025-05-01T12:35:00Z","url":"https://github.com/sablier-labs/indexers/discussions/88"},{"author":"PaulRBerg","body":"cc @razgraf @gavriliumircea\r\n\r\nI couldn't find any information about these git ignore paths in the Envio docs. Why do we use them?\r\n\r\nIgnoring so many paths is an error-prone approach because it can lead to git ignoring files that should not be git ignored. When so many files have to be git ignored, it is typically better to target specific directories.\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/07b3166a41bda559f94ac5026f038efdbd8fb6fc/.gitignore#L51-L81","createdAt":"2025-05-01T09:37:36Z","labels":[],"number":85,"repository":"sablier-labs/indexers","state":"closed","title":"Do we really need all those git ignore paths for Envio?","type":"discussion","updatedAt":"2025-05-01T09:54:59Z","url":"https://github.com/sablier-labs/indexers/discussions/85"},{"author":"PaulRBerg","body":"How about renaming the `category`:\r\n\r\nhttps://github.com/sablier-labs/v2-subgraphs/blob/main/packages/protocol/schema.graphql#L50-L51\r\n\r\nTo something else, e.g. `model`?\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/456744002f62d0627f10b958d41937ed1e68d95e/src/SablierV2NFTDescriptor.sol#L40\r\n\r\nDoing so would also create a distinction about this property and [`ActionCategory`](https://github.com/sablier-labs/v2-subgraphs/blob/a387cda7eaa512832b2f1374f88cd3e55fd50297/packages/protocol/schema.graphql#L65C13-L65C27).","createdAt":"2023-08-18T13:18:12Z","labels":[],"number":14,"repository":"sablier-labs/indexers","state":"closed","title":"Suggestion to rename contract \"category\" to something else","type":"discussion","updatedAt":"2025-01-31T13:32:35Z","url":"https://github.com/sablier-labs/indexers/discussions/14"},{"author":"PaulRBerg","body":"Fjord Foundry has recently interacted with the Sablier subgraphs, and there have been several cases of confusion caused by having two different subgraphs for Lockup and Airstreams:\r\n\r\n<img width=\"350\" alt=\"SCR-20241127-kreo\" src=\"https://github.com/user-attachments/assets/c1a7a774-1445-451c-a925-89aa610a6e43\">\r\n<img width=\"350\" alt=\"SCR-20241127-krgf\" src=\"https://github.com/user-attachments/assets/7f24e0fb-33cf-4fda-8326-e8b2f038c0ac\">\r\n\r\nWe would avoid these issues altogether if we either (i) renamed `-ms` to `-airdrops`, for clarity OR (ii) merged the two subgraphs into one.\r\n\r\nAs discussed elsewhere (Slack?), to avoid backward-compatibility issues, we can just leave the `-ms` subgraphs as is and recreate other `-airdrops` subgraphs. This refactor would also be in line with the recent package tethering-related changes in Lockup.\r\n\r\ncc @sablier-labs/frontend for feedback","createdAt":"2024-11-27T11:51:58Z","labels":[],"number":53,"repository":"sablier-labs/indexers","state":"closed","title":"Renaming `-ms` to `-airdrops` OR merging the V2 Core and MS subgraphs into one","type":"discussion","updatedAt":"2024-12-21T08:57:01Z","url":"https://github.com/sablier-labs/indexers/discussions/53"},{"author":"PaulRBerg","body":"Could you explain the rationale for \"expected\", @razgraf?\r\n\r\nWhy not `totalAmount` and `totalRecipients`? Or `aggregateAmount` (as it is written in [Solidity](https://github.com/sablier-labs/v2-periphery/blob/6bd538815f8366fa37b065c3712028b14496bbae/src/SablierV2MerkleStreamerFactory.sol#L30))?\r\n\r\nThe issue with \"expected\" is two-fold:\r\n\r\n1. There's no indication that this is the sum of all airstreams.\r\n2. It assumes an _expecting subject_; and who's that? The campaign creator? Some airstream recipient? All recipients? Sablier Labs? Vitalik?\r\n\r\n---\r\n\r\n**Edit**: saw the definition in the code:\r\n\r\n> funds required for the entire campaign to conclude\r\n\r\nSo I gather this is the amount that the `MerkleStreamerLL` contract expects from the campaign deployer.\r\n\r\nMy responses:\r\n\r\n1. We should not name variables that end users see (\"Expected amount\" and \"Expected recipients\" appear in the airstreams dashboard) according to technical interactions\r\n2. The issues above still stand\r\n\r\nThus I posit that `total` or `aggregate` would be much, much clearer.","createdAt":"2023-12-14T16:59:03Z","labels":[],"number":19,"repository":"sablier-labs/indexers","state":"closed","title":"Refactor \"expected\" to \"total\" or \"aggregate\"","type":"discussion","updatedAt":"2024-11-04T12:52:25Z","url":"https://github.com/sablier-labs/indexers/discussions/19"},{"author":"PaulRBerg","body":"Are we still expecting to have multiple subgraphs in V2?\r\n\r\nI know that the periphery will have other events to index (e.g., proxy deployments), but wouldn't it be easier (for us and third-party devs) if we just bundled the implementations under one roof?","createdAt":"2023-03-15T14:44:49Z","labels":[],"number":5,"repository":"sablier-labs/indexers","state":"closed","title":"Rename this to `v2-subgraph`?","type":"discussion","updatedAt":"2024-11-04T12:50:47Z","url":"https://github.com/sablier-labs/indexers/discussions/5"},{"author":"PaulRBerg","body":"This is how we are currently defining the `ContractType`, `StreamType`, and the `ActionType`:\r\n\r\n- https://github.com/sablierhq/v2-subgraphs/blob/b066883b2dacd26acd91ba6b73b4b897a4554ebe/packages/core/schema.graphql#L26\r\n- https://github.com/sablierhq/v2-subgraphs/blob/b066883b2dacd26acd91ba6b73b4b897a4554ebe/packages/core/schema.graphql#L41\r\n- https://github.com/sablierhq/v2-subgraphs/blob/b066883b2dacd26acd91ba6b73b4b897a4554ebe/packages/core/schema.graphql#L88\r\n\r\nMy concern is that this key can be easily mingled with the reserved `type` keyword in GraphQL - I am surprised that GraphQL even allows this word to be used as a key within an actual type.\r\n\r\nProposed alternatives to clear up any doubt:\r\n\r\n- `class`\r\n- `category`\r\n- `entityType`\r\n\r\n","createdAt":"2022-12-31T16:57:25Z","labels":[],"number":2,"repository":"sablier-labs/indexers","state":"closed","title":"Refactor \"type\" into something else","type":"discussion","updatedAt":"2024-11-04T12:50:55Z","url":"https://github.com/sablier-labs/indexers/discussions/2"},{"author":"PaulRBerg","body":"cc @sablier-labs/engineers\r\n\r\n## Print Aliases\r\n\r\n- Run as `just print aliases`\r\n- Warp block link: https://app.warp.dev/block/lxYp2ikRqxS1YArokultbK\r\n- Example output:\r\n\r\n```text\r\nAlias | Contract Name                  | Release      \r\n------|--------------------------------|--------------\r\nFL    | SablierFlow                    | flow v1.0    \r\nFL2   | SablierFlow                    | flow v1.1    \r\nLD    | SablierV2LockupDynamic         | lockup v1.0  \r\nLD2   | SablierV2LockupDynamic         | lockup v1.1  \r\nLD3   | SablierV2LockupDynamic         | lockup v1.2  \r\nLK    | SablierLockup                  | lockup v2.0  \r\nLL    | SablierV2LockupLinear          | lockup v1.0  \r\nLL2   | SablierV2LockupLinear          | lockup v1.1  \r\nLL3   | SablierV2LockupLinear          | lockup v1.2  \r\nLT3   | SablierV2LockupTranched        | lockup v1.2  \r\nMSF2  | SablierV2MerkleStreamerFactory | airdrops v1.1\r\nMSF3  | SablierV2MerkleLockupFactory   | airdrops v1.2\r\nMSF4  | SablierMerkleFactory           | airdrops v1.3\r\n```\r\n\r\n## Print Chains\r\n\r\n- Run as `just print chains`\r\n- Warp block link: https://app.warp.dev/block/GJwNGOKRqBcyMgG3Ergzim\r\n- Example output:\r\n\r\n```text\r\njust print chains\r\n🌐 Mainnets:\r\n- abstract\r\n- arbitrum\r\n- avalanche\r\n- base\r\n- berachain\r\n- blast\r\n- bsc\r\n- chiliz\r\n// <--- snip --->\r\n```\r\n\r\n## Print Missing Broadcasts\r\n\r\n- Run as `just print missing-broacasts flow`\r\n- Warp block link: https://app.warp.dev/block/5SizPJ84IxFPo0npCqL5Ep\r\n- Example output:\r\n\r\n\r\n```text\r\n══════════════════════════════════════════════════\r\n⚠️ Missing Broadcasts\r\n══════════════════════════════════════════════════\r\n\r\n📦 Version: v1.0\r\n\r\n🌐 Mainnets:\r\n   ❌ IoTeX (ID 4689)\r\n   ❌ LightLink Phoenix Mainnet (ID 1890)\r\n   ❌ Tangle (ID 5845)\r\n   ❌ ZKsync Era (ID 324)\r\n\r\n🧪 Testnets:\r\n   ❌ ZKsync Sepolia Testnet (ID 300)\r\n\r\n··················································\r\n\r\n📦 Version: v1.1\r\n\r\n🌐 Mainnets:\r\n   ❌ IoTeX (ID 4689)\r\n   ❌ Tangle (ID 5845)\r\n\r\n🧪 Testnets:\r\n   ❌ Morph Holesky (ID 2810)\r\n   ❌ Superseed Sepolia (ID 53302)\r\n\r\n\r\n══════════════════════════════════════════════════\r\nSummary\r\n══════════════════════════════════════════════════\r\n\r\nTotal missing broadcasts: 9\r\n🌐 Missing mainnet broadcasts: 6\r\n🧪 Missing testnet broadcasts: 3\r\n```","createdAt":"2025-06-07T15:16:00Z","labels":[],"number":12,"repository":"sablier-labs/sdk","state":"open","title":"Show casing the CLI scripts in the SKD","type":"discussion","updatedAt":"2025-06-11T17:13:02Z","url":"https://github.com/sablier-labs/sdk/discussions/12"},{"author":"PaulRBerg","body":"Dumped it from email, needs triaging @razgraf @gavriliumircea:\r\n\r\n```\r\n Repo\r\n ---\r\n \r\n - Readme\r\n \r\n   Great top level readme, very detailed.\r\n \r\n - Personal opinion about repo name  \r\n   Sandbox sounds like we're gonna play\r\n   with core Sablier code. Intuitively I'm expecting this to be a thin\r\n   front layer, that gives me easy access to the contract with a simple UI, \r\n   so I can focus on developing the\r\n   contract itself, not the frontend integrations of it.\r\n   If the goal is to have more examples there, I would consider\r\n   renaming it.\r\n \r\n - Minimize the devenv pain by completing the readmes, like [Vercel](https://github.com/vercel/next.js/tree/canary/examples)  \r\n \r\n   Able to come in, see the readme, have 2, max 3 commands to\r\n   copy paste in the terminal without having to think and have it running.\r\n   It's a great first gauge, especially in open source.\r\n   Don't have the dev figuring out if the example uses this or that package\r\n   manager, or have to read through the readme in details.\r\n \r\n Examples\r\n ---\r\n \r\n - Beyond showcasing different libraries, also showcase different use cases.\r\n   \r\n   For example, a subscription use case where stream can be cancelled\r\n   at any time.\r\n   \r\n   Ask community to contribute their use cases.\r\n \r\n   I would lock in on one library, and use it across all other examples.\r\n   People will figure out how to use it with their stack if they see their\r\n   use cases covered.\r\n \r\n - Read example  \r\n   Showcasing how to read from Sablier using Subgraphs\r\n \r\n - End-to-end example  \r\n   Create simple stream, fetch it's state from Graph, cancel it.\r\n \r\n - Existing examples\r\n \r\n   Links to Sablier app: Would be nice to have a preview of the stream or\r\n   directly the url to the stream in the Sablier app so we could actually\r\n   verify what was created\r\n \r\n   From the headless tab:\r\n   Buttons don't work unless you have approved. Having them all disabled/greyed\r\n   out until it's approved should help.\r\n \r\n   Could be useful to have all the lifecycle actions of a stream, create,\r\n   transfer, revoke, …\r\n \r\nUI\r\n--- \r\n\r\n - Dynamic\r\n   We had some difficulties editing Segment exponent, we either didn't\r\n   understand how it works or something was off\r\n   Having issues adding or deleting numbers, sometimes\r\n \r\n \r\n SDK\r\n ---\r\n \r\n - Would love to see hooks\r\n - Built-in caching, thinking something like `react-query`\r\n ```","createdAt":"2023-12-08T17:23:28Z","labels":[],"number":6,"repository":"sablier-labs/sandbox","state":"open","title":"Generic feedback from TokenOps","type":"discussion","updatedAt":"2023-12-08T17:23:29Z","url":"https://github.com/sablier-labs/sandbox/discussions/6"},{"author":"PaulRBerg","body":"@maxdesalle\r\n\r\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/.sqlfluffignore\r\n","createdAt":"2025-04-12T14:51:24Z","labels":[],"number":19,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Why are these queries in `.sqlfluffignore`?","type":"discussion","updatedAt":"2025-04-12T15:17:43Z","url":"https://github.com/sablier-labs/onchain-analytics/discussions/19"},{"author":"smol-ninja","body":"A better way to structure this repo would be:\r\n\r\n1. Move `.yml` files into a separate `actions` or `src` folder.\r\n2. Use `.github/workflows` for CIs to test the code in this repo similar to how I did it in [`bulloak-toolchain`](https://github.com/smol-ninja/bulloak-toolchain)\r\n\r\nThis is how [dorny/paths-filter](https://github.com/dorny/paths-filter) and other github workflows repo are structured. \r\n\r\n### Motivation\r\n\r\nWhen we make changes to this repo, we have to test them by running workflows in the dependents repos. For example, https://github.com/sablier-labs/reusable-workflows/pull/24.","createdAt":"2025-04-08T15:24:47Z","labels":[],"number":32,"repository":"sablier-labs/gha-utils","state":"closed","title":"Restructure the repo","type":"discussion","updatedAt":"2025-04-16T10:08:48Z","url":"https://github.com/sablier-labs/gha-utils/discussions/32"},{"author":"0xBhumi","body":"Hey Sablier  team and community\r\n\r\nI wanted to share a developer-focused toolkit called OmniKit that might be worth exploring, especially for teams building or maintaining multi-chain smart contracts across the Superchain.\r\n\r\n**What is OmniKit?**\r\n \r\nOmniKit is a toolkit built to abstract away the complexity of multi-chain smart contract development. Designed with the Superchain in mind, it automates deployments, simplifies cross-chain messaging, and enables seamless state synchronization, letting developers focus more on product and less on infrastructure.\r\n\r\n**Challenges OmniKit Solves**\r\n\r\n- **Consistent Deployment Across Chains:**\r\nManual deployments, faucet juggling, and address mismatches are common pain points. OmniKit automates deployments to ensure identical addresses and bytecode where needed, using funds from a single chain.\r\n\r\n- **Hub-and-Spoke Contract Architecture:**\r\nWhen contract logic differs across chains, keeping interoperability intact can be complex. OmniKit enables deployment of distinct bytecode to the same address with built-in support.\r\n\r\n- **Cross-Chain Messaging:**\r\nIntegrating messaging protocols typically involves deep documentation dives, boilerplate-heavy implementations. OmniKit provides clean, pre-built functions for messaging and token transfers across chains.\r\n\r\n- **State Synchronization:**\r\nReflecting state change across chains often needs custom logic and effort. OmniKit abstracts this behind a single function call.\r\n\r\n**What OmniKit Offers**\r\n\r\n- **One-Command Multi-Chain Deployment:** Deploy contracts across multiple chains using a single CLI command, with fund usage optimized to a single chain.\r\n- **Hub-and-Spoke Architecture Support:** Easily deploy distinct logic to the same address across chains without worrying about fund management or deployment scripts.\r\n- **Cross-Chain Messaging and Token Transfers:** Pre-built utility functions reduce overhead and streamline communication setup.\r\n- **Effortless State Synchronization:** Sync state across chains with minimal code and no need for custom implementations.\r\n\r\n**Resources**\r\n\r\n- **OmniKit Deployer on NPM:** https://www.npmjs.com/package/@omni-kit/omni-deployer\r\n- **Core Library for Cross-Chain Abstraction:** https://github.com/Omni-kit/omnikit\r\n- **Examples and Integrations Templates:** https://github.com/Omni-kit/omnikit-examples\r\n\r\n**Open for Feedback**\r\n\r\nWould love to hear your thoughts, questions, or ideas on how OmniKit could be useful and improved. Feedback and contributions are welcome - let's simplify cross-chain development together.\r\n\r\nThanks!","createdAt":"2025-06-25T11:17:14Z","labels":[],"number":21,"repository":"sablier-labs/discussions","state":"open","title":"Suggestion: Explore OmniKit SDK for Simplifying Cross-Chain Smart Contract Development","type":"discussion","updatedAt":"2025-06-27T11:02:49Z","url":"https://github.com/orgs/sablier-labs/discussions/21"},{"author":"cshein45","body":"<p data-start=\"412\" data-end=\"456\"><strong data-start=\"412\" data-end=\"456\">Hello Movement Builders &amp; DAO reviewers,</strong></p>\r\n<p data-start=\"458\" data-end=\"690\">I’m submitting this record to document and request acknowledgment for the <strong data-start=\"532\" data-end=\"569\">founder allocation vesting stream</strong> of my 200M MOVE tokens — executed transparently via <a data-start=\"622\" data-end=\"689\" rel=\"noopener\" target=\"_new\" class=\"\" href=\"https://app.sablier.com/vesting/create/csv/?shape=linear\">Sablier</a>.</p>\r\n<hr data-start=\"692\" data-end=\"695\">\r\n<h3 data-start=\"697\" data-end=\"719\">📦 Vesting Details</h3>\r\n<ul data-start=\"721\" data-end=\"1172\">\r\n<li data-start=\"721\" data-end=\"789\">\r\n<p data-start=\"723\" data-end=\"789\"><strong data-start=\"723\" data-end=\"743\">Recipient Wallet</strong>: <code data-start=\"745\" data-end=\"789\">0xb2cA1CAecd1D3e9bF84B9332cb4aB11961639a5c</code></p>\r\n</li>\r\n<li data-start=\"790\" data-end=\"832\">\r\n<p data-start=\"792\" data-end=\"832\"><strong data-start=\"792\" data-end=\"812\">Total Allocation</strong>: <code data-start=\"814\" data-end=\"832\">200,000,000 MOVE</code></p>\r\n</li>\r\n<li data-start=\"833\" data-end=\"858\">\r\n<p data-start=\"835\" data-end=\"858\"><strong data-start=\"835\" data-end=\"853\">Token Decimals</strong>: <code data-start=\"855\" data-end=\"858\">8</code></p>\r\n</li>\r\n<li data-start=\"859\" data-end=\"893\">\r\n<p data-start=\"861\" data-end=\"893\"><strong data-start=\"861\" data-end=\"881\">Vesting Duration</strong>: ~13 months</p>\r\n</li>\r\n<li data-start=\"894\" data-end=\"1172\">\r\n<p data-start=\"896\" data-end=\"909\"><strong data-start=\"896\" data-end=\"908\">Tranches</strong>:</p>\r\n<div class=\"_tableContainer_16hzy_1\"><div tabindex=\"-1\" class=\"_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse\">\r\nTranche | Start Date | End Date | Amount\r\n-- | -- | -- | --\r\n#1 | 2025-06-24 | 2025-07-31 | 66,000,000\r\n#2 | 2025-08-01 | 2026-01-31 | 66,000,000\r\n#3 | 2026-02-01 | 2026-07-31 | 68,000,000\r\n\r\n<div class=\"sticky end-(--thread-content-margin) h-0 self-end select-none\"><div class=\"absolute end-0 flex items-end\"><span class=\"\" data-state=\"closed\"><button class=\"bg-token-bg-primary hover:bg-token-bg-tertiary text-token-text-secondary my-1 rounded-sm p-1 transition-opacity group-[:not(:hover):not(:focus-within)]:pointer-events-none group-[:not(:hover):not(:focus-within)]:opacity-0\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\"><path d=\"M12.668 10.667C12.668 9.95614 12.668 9.46258 12.6367 9.0791C12.6137 8.79732 12.5758 8.60761 12.5244 8.46387L12.4688 8.33399C12.3148 8.03193 12.0803 7.77885 11.793 7.60254L11.666 7.53125C11.508 7.45087 11.2963 7.39395 10.9209 7.36328C10.5374 7.33197 10.0439 7.33203 9.33301 7.33203H6.5C5.78896 7.33203 5.29563 7.33195 4.91211 7.36328C4.63016 7.38632 4.44065 7.42413 4.29688 7.47559L4.16699 7.53125C3.86488 7.68518 3.61186 7.9196 3.43555 8.20703L3.36524 8.33399C3.28478 8.49198 3.22795 8.70352 3.19727 9.0791C3.16595 9.46259 3.16504 9.95611 3.16504 10.667V13.5C3.16504 14.211 3.16593 14.7044 3.19727 15.0879C3.22797 15.4636 3.28473 15.675 3.36524 15.833L3.43555 15.959C3.61186 16.2466 3.86474 16.4807 4.16699 16.6348L4.29688 16.6914C4.44063 16.7428 4.63025 16.7797 4.91211 16.8027C5.29563 16.8341 5.78896 16.835 6.5 16.835H9.33301C10.0439 16.835 10.5374 16.8341 10.9209 16.8027C11.2965 16.772 11.508 16.7152 11.666 16.6348L11.793 16.5645C12.0804 16.3881 12.3148 16.1351 12.4688 15.833L12.5244 15.7031C12.5759 15.5594 12.6137 15.3698 12.6367 15.0879C12.6681 14.7044 12.668 14.211 12.668 13.5V10.667ZM13.998 12.665C14.4528 12.6634 14.8011 12.6602 15.0879 12.6367C15.4635 12.606 15.675 12.5492 15.833 12.4688L15.959 12.3975C16.2466 12.2211 16.4808 11.9682 16.6348 11.666L16.6914 11.5361C16.7428 11.3924 16.7797 11.2026 16.8027 10.9209C16.8341 10.5374 16.835 10.0439 16.835 9.33301V6.5C16.835 5.78896 16.8341 5.29563 16.8027 4.91211C16.7797 4.63025 16.7428 4.44063 16.6914 4.29688L16.6348 4.16699C16.4807 3.86474 16.2466 3.61186 15.959 3.43555L15.833 3.36524C15.675 3.28473 15.4636 3.22797 15.0879 3.19727C14.7044 3.16593 14.211 3.16504 13.5 3.16504H10.667C9.9561 3.16504 9.46259 3.16595 9.0791 3.19727C8.79739 3.22028 8.6076 3.2572 8.46387 3.30859L8.33399 3.36524C8.03176 3.51923 7.77886 3.75343 7.60254 4.04102L7.53125 4.16699C7.4508 4.32498 7.39397 4.53655 7.36328 4.91211C7.33985 5.19893 7.33562 5.54719 7.33399 6.00195H9.33301C10.022 6.00195 10.5791 6.00131 11.0293 6.03809C11.4873 6.07551 11.8937 6.15471 12.2705 6.34668L12.4883 6.46875C12.984 6.7728 13.3878 7.20854 13.6533 7.72949L13.7197 7.87207C13.8642 8.20859 13.9292 8.56974 13.9619 8.9707C13.9987 9.42092 13.998 9.97799 13.998 10.667V12.665ZM18.165 9.33301C18.165 10.022 18.1657 10.5791 18.1289 11.0293C18.0961 11.4302 18.0311 11.7914 17.8867 12.1279L17.8203 12.2705C17.5549 12.7914 17.1509 13.2272 16.6553 13.5313L16.4365 13.6533C16.0599 13.8452 15.6541 13.9245 15.1963 13.9619C14.8593 13.9895 14.4624 13.9935 13.9951 13.9951C13.9935 14.4624 13.9895 14.8593 13.9619 15.1963C13.9292 15.597 13.864 15.9576 13.7197 16.2939L13.6533 16.4365C13.3878 16.9576 12.9841 17.3941 12.4883 17.6982L12.2705 17.8203C11.8937 18.0123 11.4873 18.0915 11.0293 18.1289C10.5791 18.1657 10.022 18.165 9.33301 18.165H6.5C5.81091 18.165 5.25395 18.1657 4.80371 18.1289C4.40306 18.0962 4.04235 18.031 3.70606 17.8867L3.56348 17.8203C3.04244 17.5548 2.60585 17.151 2.30176 16.6553L2.17969 16.4365C1.98788 16.0599 1.90851 15.6541 1.87109 15.1963C1.83431 14.746 1.83496 14.1891 1.83496 13.5V10.667C1.83496 9.978 1.83432 9.42091 1.87109 8.9707C1.90851 8.5127 1.98772 8.10625 2.17969 7.72949L2.30176 7.51172C2.60586 7.0159 3.04236 6.6122 3.56348 6.34668L3.70606 6.28027C4.04237 6.136 4.40303 6.07083 4.80371 6.03809C5.14051 6.01057 5.53708 6.00551 6.00391 6.00391C6.00551 5.53708 6.01057 5.14051 6.03809 4.80371C6.0755 4.34588 6.15483 3.94012 6.34668 3.56348L6.46875 3.34473C6.77282 2.84912 7.20856 2.44514 7.72949 2.17969L7.87207 2.11328C8.20855 1.96886 8.56979 1.90385 8.9707 1.87109C9.42091 1.83432 9.978 1.83496 10.667 1.83496H13.5C14.1891 1.83496 14.746 1.83431 15.1963 1.87109C15.6541 1.90851 16.0599 1.98788 16.4365 2.17969L16.6553 2.30176C17.151 2.60585 17.5548 3.04244 17.8203 3.56348L17.8867 3.70606C18.031 4.04235 18.0962 4.40306 18.1289 4.80371C18.1657 5.25395 18.165 5.81091 18.165 6.5V9.33301Z\"></path></svg></button></span></div></div></div></div>\r\n</li>\r\n</ul>\r\n<hr data-start=\"1174\" data-end=\"1177\">\r\n<h3 data-start=\"1179\" data-end=\"1196\">📄 CSV Upload</h3>\r\n<blockquote data-start=\"1198\" data-end=\"1399\">\r\n<p data-start=\"1200\" data-end=\"1399\">✅ <span class=\"\" data-state=\"closed\"><a data-start=\"1202\" data-end=\"1278\" class=\"cursor-pointer\">KoKyat_Sablier_3col_CSV.csv</a></span><br data-start=\"1278\" data-end=\"1281\">\r\n<em data-start=\"1281\" data-end=\"1399\">This CSV was formatted with 8-decimal precision and UNIX timestamps compatible with Sablier's <code data-start=\"1376\" data-end=\"1384\">linear</code> stream range.</em></p>\r\n</blockquote>\r\n<hr data-start=\"1401\" data-end=\"1404\">\r\n<h3 data-start=\"1406\" data-end=\"1420\">🧾 Purpose</h3>\r\n<ul data-start=\"1422\" data-end=\"1640\">\r\n<li data-start=\"1422\" data-end=\"1481\">\r\n<p data-start=\"1424\" data-end=\"1481\">Log the token distribution transparently for DAO review</p>\r\n</li>\r\n<li data-start=\"1482\" data-end=\"1529\">\r\n<p data-start=\"1484\" data-end=\"1529\">Ensure verifiable stream lifecycle tracking</p>\r\n</li>\r\n<li data-start=\"1530\" data-end=\"1585\">\r\n<p data-start=\"1532\" data-end=\"1585\">Allow future DAO actions (pause, override, monitor)</p>\r\n</li>\r\n<li data-start=\"1586\" data-end=\"1640\">\r\n<p data-start=\"1588\" data-end=\"1640\">Provide public record for audits and future listings</p>\r\n</li>\r\n</ul>\r\n<hr data-start=\"1642\" data-end=\"1645\">\r\n<h3 data-start=\"1647\" data-end=\"1659\">✍️ Notes</h3>\r\n<ul data-start=\"1661\" data-end=\"1793\">\r\n<li data-start=\"1661\" data-end=\"1722\">\r\n<p data-start=\"1663\" data-end=\"1722\">No private key actions were taken outside DAO visibility.</p>\r\n</li>\r\n<li data-start=\"1723\" data-end=\"1793\">\r\n<p data-start=\"1725\" data-end=\"1793\">I’m open to adding DAO multisig as secondary observer of the stream.</p>\r\n</li>\r\n</ul>\r\n<hr data-start=\"1795\" data-end=\"1798\">\r\n<p data-start=\"1800\" data-end=\"1886\"><strong data-start=\"1800\" data-end=\"1886\">Let’s MOVE transparently — with the code, with the record, and with the community.</strong></p>\r\n<p data-start=\"1888\" data-end=\"1926\">—<br data-start=\"1889\" data-end=\"1892\">\r\nKoKyat<br data-start=\"1898\" data-end=\"1901\">\r\nFounder, Movement Network</p>\r\nHello Movement Builders & DAO reviewers,\r\n\r\nI’m submitting this record to document and request acknowledgment for the founder allocation vesting stream of my 200M MOVE tokens — executed transparently via [Sablier](https://app.sablier.com/vesting/create/csv/?shape=linear).\r\n\r\n📦 Vesting Details\r\nRecipient Wallet: 0xb2cA1CAecd1D3e9bF84B9332cb4aB11961639a5c\r\n\r\nTotal Allocation: 200,000,000 MOVE\r\n\r\nToken Decimals: 8\r\n\r\nVesting Duration: ~13 months\r\n\r\nTranches:\r\n\r\nTranche\tStart Date\tEnd Date\tAmount\r\n#1\t2025-06-24\t2025-07-31\t66,000,000\r\n#2\t2025-08-01\t2026-01-31\t66,000,000\r\n#3\t2026-02-01\t2026-07-31\t68,000,000\r\n\r\n📄 CSV Upload\r\n✅ KoKyat_Sablier_3col_CSV.csv\r\nThis CSV was formatted with 8-decimal precision and UNIX timestamps compatible with Sablier's linear stream range.\r\n\r\n🧾 Purpose\r\nLog the token distribution transparently for DAO review\r\n\r\nEnsure verifiable stream lifecycle tracking\r\n\r\nAllow future DAO actions (pause, override, monitor)\r\n\r\nProvide public record for audits and future listings\r\n\r\n✍️ Notes\r\nNo private key actions were taken outside DAO visibility.\r\n\r\nI’m open to adding DAO multisig as secondary observer of the stream.\r\n\r\nLet’s MOVE transparently — with the code, with the record, and with the community.\r\n\r\n—\r\nKoKyat\r\nFounder, Movement Network","createdAt":"2025-06-22T22:01:53Z","labels":[],"number":20,"repository":"sablier-labs/discussions","state":"open","title":"KoKyat 200M MOVE Founder Allocation via Sablier","type":"discussion","updatedAt":"2025-06-23T11:46:50Z","url":"https://github.com/orgs/sablier-labs/discussions/20"},{"author":"jmulq","body":"Hey guys - I'd like to propose a collaboration between the Sablier and BuildersDAO teams to expand the concept of interest-bearing streams into a robust and flexible system of contracts. The goal, to allow users to build and configure streams that can accrue yield through different DeFi protocols, and to support varied stream types (e.g. linear, dynamic, etc.) and payout models (e.g. interest to sender, recipient, or split).\r\n\r\nI noticed a [discussion](https://github.com/orgs/sablier-labs/discussions/5) around yield bearing streams from 2023, however opted to create a new discussion for this potential collaboration.\r\n\r\nWe’ve implemented a prototype wrapper contract that:\r\n- Wraps `aUSDC` from Aave V3\r\n- Mints `waUSDC`, a 1:1 wrapped token, to stream senders.\r\n- Uses Sablier Lockup to stream `waUSDC` to recipients.\r\n- On withdrawal, burns the wrapped token and converts `aUSDC -> USDC`, transferring the principal to the recipient.\r\n- Retains the accrued yield inside the wrapper for later claiming.\r\n\r\nThis has already been reviewed by @smol-ninja, however the full code and test suite can be viewed [here](https://github.com/Graph-BuildersDAO/waUSDC).\r\n\r\n---\r\n\r\n## Proposal\r\n\r\nWe’d like to start a discussion on whether Sablier sees value in collaborating on a modular, extensible interest-bearing stream system, and what your wishlist or design goals might be for something like this.\r\n\r\n**Potential directions:**\r\n- Support for all Sablier stream types (linear, dynamic, tranched, merged)\r\n- Pluggable yield protocols (e.g., Compound, Aave...)\r\n- Configurable yield routing (e.g., all to sender, all to recipient, 50/50)\r\n- Claimable yield strategies, e.g., auto-claim on cancel, claim mid-stream, etc\r\n- Sablier-native frontend tools to build or interact with interest-bearing streams\r\n\r\nWe're happy to scope, spec, and propose an architecture — but would love to start the conversation with the Sablier team to:\r\n1. Review the existing prototype.\r\n2. Sanity-check feasibility.\r\n3. Understand if there is an appetite for a generalised interest-bearing stream module within the Sablier ecosystem.\r\n4. Get input on desired extensibility, modularity, or limitations to keep in mind.\r\n5. Discuss any other integrations you had in mind that BuildersDAO can take on.\r\n\r\nLooking forward to your thoughts!\r\n\r\n @sablier-labs/evm\r\n","createdAt":"2025-06-18T12:33:48Z","labels":[],"number":19,"repository":"sablier-labs/discussions","state":"open","title":"Expanding Interest-Bearing Stream MVP into a Modular Suite of Integrations","type":"discussion","updatedAt":"2025-06-19T11:27:32Z","url":"https://github.com/orgs/sablier-labs/discussions/19"},{"author":"bensacc","body":"Hello, possibly this is already a feature and I just haven't figured it out, but as an organization that has started using Sablier for payroll, it would be super helpful to be able to fund all of our streams from a common pool, as opposed to invoking the 'Top Up' function for each individually.  At some point, this may become unmanageable for us (which would be a shame, otherwise this is working great for us!).","createdAt":"2025-02-24T16:10:45Z","labels":[],"number":18,"repository":"sablier-labs/discussions","state":"open","title":"Fund streams from a common pool","type":"discussion","updatedAt":"2025-04-07T13:40:47Z","url":"https://github.com/orgs/sablier-labs/discussions/18"},{"author":"andreivladbrg","body":"A list of tasks to be completed before going live with the new version for the contracts team. @sablier-labs/solidity, feel free to edit this list if I missed anything.\r\n\r\n*(Initially created [here](https://github.com/sablier-labs/v2-core/discussions/1137))*\r\n\r\n### Lockup\r\n- [x] Rename the repo to `lockup` and update the [wiki](https://github.com/sablier-labs/v2-core/wiki) and other references where needed. Refer to https://github.com/sablier-labs/v2-core/issues/808.\r\n- [x] Create a PR from `staging` --> `main` and resolve conflicts.\r\n     - ⚠️ Be very careful when rebasing to avoid excluding any of the intended changes.\r\n     - use `git rebase -S --onto base_branch base_branch~ your_branch --committer-date-is-author-date` to persist the commit dates\r\n - [x] Remove [these lines](https://github.com/sablier-labs/v2-core/blob/47c52ec92074270aa35e474c2ae19e9bd78e087a/foundry.toml#L42-L46) from `foundry.toml` to deploy the contracts with the new linking libraries.\r\n - [x] Deploy contracts to all live chains\r\n\r\n### Airdrops\r\n~~- [ ] Link deployed libraries in `airdrop` repo before making the deployment.~~ \r\n     not needed for this launch as the `VestingMath` or `Helpers` are not used anywhere, which will be changed in the next `AVCA` release\r\n- [x] Deploy contracts to all live chains\r\n- [x] Replace [lockup version](https://github.com/sablier-labs/airdrops/blob/main/package.json#L16) with npm release\r\n\r\n### Flow\r\n- [x] Create a PR from `staging` --> `main` and resolve conflicts.\r\n     - ⚠️ Be very careful when rebasing to avoid excluding any of the intended changes.\r\n     - use `git rebase -S --onto base_branch base_branch~ your_branch --committer-date-is-author-date` to persist the commit dates\r\n- [x] Deploy contracts to all live chains\r\n\r\n\r\n### Miscellaneous\r\n- [x] Include the audits in the [audits repo](https://github.com/sablier-labs/audits/).\r\n- [x] Create new GitHub tags and publish on NPM.\r\n- [x] Refactor the `docs` to reflect the new single architecture and updated shapes for Linear. Refer to https://github.com/sablier-labs/docs/issues/203.\r\n- [x] Update `docs` with the deployed addresses\r\n- [x] Update the `deployments`\r\n- [x] Update [examples](https://github.com/sablier-labs/examples/).\r\n- [x] Update  [integration template](https://github.com/sablier-labs/lockup-integration-template).\r\n- [x] Archive `v2-periphery`. Refer to https://github.com/sablier-labs/v2-periphery/issues/386.\r\n","createdAt":"2025-01-10T12:31:19Z","labels":[],"number":15,"repository":"sablier-labs/discussions","state":"closed","title":"Preparations for Q1 2025 launch","type":"discussion","updatedAt":"2025-02-03T16:15:09Z","url":"https://github.com/orgs/sablier-labs/discussions/15"},{"author":"MicahZoltu","body":"Before you connect a wallet, there is a gear in the top right of the UI that lets the user switch a toggle that makes it so the UI will use the wallet's RPC server instead of Sablier's built-in RPC server.  Once you connect a wallet, this gear disappears, thus removing the ability to see what setting you have selected or change it.  There is no UI indication that the user needs to disconnect their wallet to get this setting back.\r\n\r\nSuggestion resolution:\r\nLeave the gear present or move the toggle into account settings UI.  If the user flips the toggle after they are connected, switch how they connect in the background (should be mostly transparent to the user).","createdAt":"2025-01-29T16:43:30Z","labels":[],"number":17,"repository":"sablier-labs/discussions","state":"open","title":"User/Sablier RPC toggle disappears when you connect.","type":"discussion","updatedAt":"2025-01-30T17:42:53Z","url":"https://github.com/orgs/sablier-labs/discussions/17"},{"author":"PaulRBerg","body":"I propose the following classification for smart contract changes:\r\n\r\n| Name | Description |\r\n|--------|--------|\r\n| Non-Breaking Change | Adding functionality + updates that don't change the public API  |\r\n| Soft Breaking Change | Updates that affect only stream or airdrop creation |\r\n| Hard Breaking Change | Updates that affect existing streams OR change the public API | \r\n\r\nUpdating only the stream or airdrop creation functionality doesn't increase the complexity in the UI app/ subgraphs because there is no need to maintain backward compatibility (if/else logic for older versions). The UI would just use the most up-to-date API.\r\n\r\nFYI @sablier-labs/engineers","createdAt":"2025-01-22T12:26:30Z","labels":[],"number":16,"repository":"sablier-labs/discussions","state":"open","title":"Classification of smart contract changes/refactors","type":"discussion","updatedAt":"2025-06-20T15:18:18Z","url":"https://github.com/orgs/sablier-labs/discussions/16"},{"author":"smol-ninja","body":"The following files are currently duplicated across Solidity repos. And for those that are not duplicated, we inherit them from Lockup.\r\n\r\n- [Adminable.sol](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/Adminable.sol)\r\n- [NoDelegateCall.sol](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/NoDelegateCall.sol)\r\n- [Batch.sol](https://github.com/sablier-labs/flow/blob/staging/src/abstracts/Batch.sol)\r\n- Some portions of [Base.s.sol](https://github.com/sablier-labs/airdrops/blob/main/script/Base.s.sol)\r\n- Some test files inherited by Flow from Lockup\r\n\r\nTo lower maintenance (e.g., [this issue](https://github.com/sablier-labs/flow/issues/353) is relevant to both Lockup and Flow), what do you think about creating a dedicated `Utilities` repo that all other repos could inherit from? \r\n\r\nRight now, Lockup is treated as the primary repository and then Flow and Airdrops inherit from it. However, I believe Flow, Lockup, and Airdrops should operate at the same hierarchy level, each inheriting the common code from a shared `Utilities` repo rather than from one another.\r\n\r\ncc @sablier-labs/solidity","createdAt":"2024-12-21T06:15:55Z","labels":[],"number":13,"repository":"sablier-labs/discussions","state":"closed","title":"A shared Utilities repo","type":"discussion","updatedAt":"2024-12-21T13:05:41Z","url":"https://github.com/orgs/sablier-labs/discussions/13"},{"author":"hake-stake","body":"\r\nStreams could allow for payers and recipients to send/receive payments in whatever respective tokens they want.\r\n\r\nThis could be done in a few different ways:\r\n\r\n1. Third Party could permissionlessly execute trades from input to output token (via some DEX) as they are streamed.\r\n2. Tokens can be exchange as they are claimed.\r\n3. Input tokens are exchange at deposit.\r\n\r\nI'm sure there are more ways to do this, but roughly speaking I believe option number 1 might be the most attractive.\r\n\r\ncc @sablier-labs/engineers\r\n","createdAt":"2024-12-17T09:54:06Z","labels":[],"number":12,"repository":"sablier-labs/discussions","state":"open","title":"Suggestions for streams in which InputToken != OutputToken","type":"discussion","updatedAt":"2024-12-17T13:33:26Z","url":"https://github.com/orgs/sablier-labs/discussions/12"},{"author":"boorich","body":"# Project Name\r\n\r\n**Sablier Integration Module for web3.unity SDK**\r\n\r\n## 1. General Information\r\n\r\n- **Team Name:** ChainSafe\r\n- **Funding Details:**\r\n  - **Funding Address:** To be provided upon request\r\n\r\n## 2. Project Overview\r\n\r\n### 2.1 Project Pitch\r\n\r\nThe project aims to develop a module for ChainSafe's open-source [web3.unity SDK](https://github.com/ChainSafe/web3.unity) that integrates Sablier Streams, enabling Unity game developers to utilize real-time token streaming within their games. This integration provides a seamless and innovative monetization model for game developers by leveraging [broker fees](https://docs.sablier.com/concepts/protocol/fees#broker-fees) to create sustainable revenue streams.\r\n\r\n### 2.2 Core Features\r\n#### ChainSafe\r\n- **Token Streaming Integration**: Real-time token streaming capability within Unity games.\r\n- **Broker Fee Implementation**: Monetization via broker fees to generate revenue for developers.\r\n- **Blockchain Interaction**: Secure API integration to interact with Sablier's protocol.\r\n#### Sablier\r\n- **Compatibility with [B3 Chains](https://docs.b3.fun/using-b3)**: Sablier to add support for B3 chains to ensure broad blockchain compatibility.\r\n\r\n### 2.3 Comparable Projects\r\n\r\nAs far as our research goes, there are no existing Unity-compatible SDKs specifically integrating Sablier Streams. However, this project provides a unique solution by focusing on token streaming for game monetization, unlike traditional in-app purchases or ads, and integrates with Unity via a modular, dependency-injection approach.\r\n\r\n### 2.4 Supporting Documentation\r\n\r\nWe are working on a technical design document.\r\n\r\n## 3. Team Information\r\n\r\n### 3.1 Team Members\r\n\r\n- **[Nikola](https://github.com/kantagara), Lead Developer**: Extensive experience in Unity SDK development and blockchain technology. Previously led the development of modular SDK solutions for game developers.\r\n- **[Martin](https://github.com/boorich), Project Manager**: Experience in managing blockchain integration projects, ensuring timely delivery and effective collaboration between partners.\r\n- **[Rob](https://github.com/rob1997), Engineer**: Unity and Blockchain Developer\r\n- **[Sneakz](https://github.com/sneakzttv), Engineer**: Unity and Blockchain Developer\r\n- **[Oleksandr](https://github.com/creeppak), Engineer**: Unity and Blockchain Developer\r\n\r\n### 3.2 Relevant Experience\r\n\r\nPreviously, the team developed web3.unity, an open-source tool allowing Unity game developers to easily integrate blockchain features such as wallet connections and asset management.\r\n\r\n### 3.3 Technical Expertise\r\n\r\nThe team has extensive experience with Unity development, modular SDK design, blockchain integration, and protocols such as Ethereum. We have also worked with broker fee implementations for similar monetization models and created a [prototype game including token streaming for Unity](https://www.loom.com/share/92d4ca550f99490e8bee8194e445acf7?sid=3f78f827-75d2-4939-a1c8-bc0665685cf6) prior to filing this request.\r\n\r\n## 4. Project Development\r\n\r\n### 4.1 Development Status\r\n\r\nCurrently in the planning phase. Technical requirements are being defined, and initial communication has been established with Sablier.\r\n\r\n### 4.2 Milestones & Timeline\r\n\r\n- **Milestone 1: Project Kick-off and Planning**\r\n  - Review Sablier documentation, establish communication channels, define technical requirements.\r\n- **Milestone 2: SDK Module Development**\r\n  - Develop and integrate the Sablier token streaming module within \"web3.unity.\"\r\n- **Milestone 3: Testing and Quality Assurance**\r\n  - Functional, security, and cross-platform testing.\r\n- **Milestone 4: Documentation and Release**\r\n  - Finalize documentation and prepare for launch.\r\n\r\n### 4.3 Funding Requirements\r\n\r\nYes, we require funding to cover development costs, testing, and documentation. Estimated amount: $60,000 - $120.000.\r\n\r\n## 5. Detailed Development Roadmap\r\n\r\n### Milestone 1 — Initial Development\r\n\r\n- **Estimated Duration:** 0.5 - 1 month\r\n- **Key Deliverables:**\r\n  - **0a.** Documentation: Provide an overview of the code and project functionality.\r\n  - **0b.** Initial Project Kick-off: Review Sablier's SDK and define the integration approach.\r\n\r\n### Milestone 2 — Module Development\r\n\r\n- **Estimated Duration:** 1-2 months\r\n- **Key Deliverables:**\r\n  - **1a.** Module Integration: Develop a Unity module for token streaming using the \"web3.unity\" SDK.\r\n  - **1b.** Broker Fee Implementation: Integrate broker fee monetization features.\r\n\r\n### Milestone 3 — Testing and QA\r\n\r\n- **Estimated Duration:** 0.5 -1 month\r\n- **Key Deliverables:**\r\n  - **2a.** Functional Testing: Validate token streaming features.\r\n  - **2b.** Security Testing: Ensure secure API handling and compliance.\r\n  - **2c.** Cross-Platform Testing: Verify functionality across most popular Unity platforms.\r\n\r\n### Milestone 4 — Documentation and Release\r\n\r\n- **Estimated Duration:** 1 month\r\n- **Key Deliverables:**\r\n  - **3a.** Developer Documentation: Create setup guides, API references, and tutorials.\r\n  - **3b.** Release Preparation: Prepare the module for public release and initiate joint promotional activities.\r\n\r\n## 6. Future Plans\r\n\r\n### 6.1 Long-term Vision\r\n\r\nAfter completion, we plan to maintain the module as part of web3.unity, making it open-source and continuously improving it based on community feedback. Furthermore we plan to incorporate it into upcoming games delivered to the [B3 gaming platform](https://basement.fun/). \r\n\r\n## 7. Additional Information\r\n\r\n### 7.1 Questions & Concerns\r\n\r\n- **B3 Chain Support**: Sablier's team needs to add B3 chains to the list of supported chains in their protocol to ensure compatibility with this module.\r\n","createdAt":"2024-10-07T11:54:34Z","labels":[],"number":11,"repository":"sablier-labs/discussions","state":"closed","title":"Unity SDK","type":"discussion","updatedAt":"2024-10-21T09:33:47Z","url":"https://github.com/orgs/sablier-labs/discussions/11"},{"author":"scorpion9979","body":"I have been exploring solutions to enhance a few potential areas of inefficiency within the protocol. Here are the two primary issues I've identified:\r\n\r\n1. The locked underlying assets' opportunity cost due to the inability to earn yield on them.\r\n2. The inability to leverage the voting capability of locked COMP-like governance assets.\r\n\r\nIn my research, I found that [ERC-6551](https://eips.ethereum.org/EIPS/eip-6551) could potentially provide a robust solution to these inefficiencies. In the existing model, when a new Sablier stream is created, the underlying assets for all streams of the same type are sequestered within a single lockup contract.\r\n\r\nMy proposal entails a shift in this approach: the stream NFTs could incorporate ERC-6551, binding each stream NFT to a uniquely tailored contract designed to hold the stream's assets and dictate the lockup and release procedures of those assets.\r\n\r\nHere's how such logic could be applied to address the above-mentioned inefficiencies:\r\n\r\n**Yield Generation**\r\n1. The sender locks up the underlying into a custom NFT bound contract that initiates a constructor logic sequence which deposits the underlying into a yield-generating vault (such as by converting USDC into cUSDC), allowing the locked assets to generate income.\r\n2. The NFT bound contract also includes logic to convert the yield assets back to their original underlying form whenever the stream's recipient unlocks assets from the stream.\r\n\r\n**COMP-like Governance Delegation**\r\n1. The sender locks up the underlying into a custom NFT bound contract, which initiates a constructor logic sequence. This calls the [`delegate`](https://docs.compound.finance/v2/governance/#delegate) function, which delegates the votes of all locked assets to some address.\r\n2. The custom NFT bound contract could also have a mechanism to update the state of delegation whenever the stream's recipient unlocks assets from the stream.\r\n\r\n**Note:** ERC-6551 is still a draft in the very early stages.","createdAt":"2023-07-29T03:36:11Z","labels":[],"number":1,"repository":"sablier-labs/discussions","state":"open","title":"Use ERC-6551 to address inefficiencies in asset lockup","type":"discussion","updatedAt":"2024-09-20T16:38:44Z","url":"https://github.com/orgs/sablier-labs/discussions/1"},{"author":"alexfertel","body":"Hello everyone! I'm the author of https://github.com/alexfertel/bulloak.\r\n\r\nI've been discussing with @PaulRBerg the possibility of creating a better form of documentation for BTT & `bulloak`, starting with a simple landing page.\r\n\r\nThis post wants to make this thought concrete by submitting a proposal requesting a bounty of 1.5k USDC to be awarded for creating the landing page.\r\n\r\n### Deliverables\r\n\r\n- Simple, clean design with precise wording, an explanation of BTT, a brief section on using bulloak, and links to resources.\r\n  -  [Optional] The [Lens docs](https://www.lens.xyz/docs) is an example of excellent documentation, and I think it'd be nice to use it as inspiration.\r\n- Responsive design for desktop, tablet, and mobile devices.\r\n- Basic SEO optimization. It should be discoverable without much trouble when googling.","createdAt":"2024-08-04T12:25:47Z","labels":[],"number":10,"repository":"sablier-labs/discussions","state":"closed","title":"BTT Landing Page Bounty","type":"discussion","updatedAt":"2024-10-07T09:45:23Z","url":"https://github.com/orgs/sablier-labs/discussions/10"},{"author":"PaulRBerg","body":"CodeRabbit is an AI bot for automatic PR reviews:\r\n\r\nhttps://coderabbit.ai/\r\n\r\nExample: see how CodeRabbit handled [my PR in the Optimism docs](https://github.com/ethereum-optimism/docs/pull/708#issuecomment-2123407043).\r\n\r\ncc @sablier-labs/engineers","createdAt":"2024-05-22T10:49:23Z","labels":[],"number":9,"repository":"sablier-labs/discussions","state":"open","title":"CodeRabbit for AI-assisted PR reviews","type":"discussion","updatedAt":"2024-06-05T09:23:59Z","url":"https://github.com/orgs/sablier-labs/discussions/9"},{"author":"tmoindustries","body":"Celo has two interesting angles with mobile first payments approach and their focus on Regenerative Finance. I floated bringing Sablier over there if anyone wants to comment/bump:\r\n\r\nhttps://forum.celo.org/t/composable-protocols-for-celo-6551-tokenbound-0xsplits-sablier/7612","createdAt":"2024-03-09T18:15:54Z","labels":[],"number":8,"repository":"sablier-labs/discussions","state":"open","title":"Celo: mobile first payments and ReFi","type":"discussion","updatedAt":"2024-05-30T19:22:50Z","url":"https://github.com/orgs/sablier-labs/discussions/8"},{"author":"PaulRBerg","body":"## New system\r\n\r\nThe default GitHub labels suck. We need a sane system that groups labels by:\r\n\r\n- Effort: \"epic\", \"high\", \"medium\", or \"low\"\r\n- Priority: 0, 1, 2, and 3\r\n- Type: same as [conventional commits](https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#type)\r\n- Work: via the [Cynefin framework](https://chat.openai.com/share/ba8dc4de-f356-42cb-b9df-d895e520c4ef) (optional)\r\n\r\nBut there will still be some non-grouped labels, i.e., \"backlog\", \"duplicate\", \"good first issue\", and \"help\".\r\n\r\n## Notes\r\n\r\n- I've opted out of Status labels because I consider the Kanban boards in our GitHub Projects to work better for triaging like this\r\n- I've configured GitHub to apply these labels for any future GitHub repo we create in our organization.\r\n\r\n## Research\r\n\r\nI've devised the system above by inspiring from the following articles:\r\n\r\n- [Sensible GitHub labels](https://github.com/Relequestual/sensible-github-labels)\r\n- [GitHub Labels that are logical, colorful and sensible](https://seantrane.com/posts/logical-colorful-github-labels-18230/)\r\n- [Sane GitHub Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63)\r\n- [GitHub Pro Tips For Your Development Team](https://dalezak.medium.com/github-pro-tips-for-your-development-team-9fe0f0a48afb)","createdAt":"2023-12-31T19:04:50Z","labels":[],"number":6,"repository":"sablier-labs/discussions","state":"closed","title":"New GitHub label system","type":"discussion","updatedAt":"2024-06-27T14:31:47Z","url":"https://github.com/orgs/sablier-labs/discussions/6"},{"author":"PaulRBerg","body":"I just read this article that introduces a new development principle called FREI-PI (Function Requirements, Effects, Interactions - Protocol Invariants):\n\n[You're writing require statements wrong](https://www.nascent.xyz/idea/youre-writing-require-statements-wrong)\n\nWhich got me thinking: what if we added a `_verifyBalances` check at the end of the function execution in `_withdraw`, which would check that the balance withdrawn matches the initial balance minus the withdraw amount?\n\nWe could then add a similar check in `_cancel`.","createdAt":"2023-07-01T19:19:25Z","labels":[],"number":7,"repository":"sablier-labs/discussions","state":"open","title":"FREI-PI approach in `_cancel` and `_withdraw`","type":"discussion","updatedAt":"2024-01-01T22:17:20Z","url":"https://github.com/orgs/sablier-labs/discussions/7"},{"author":"PaulRBerg","body":"The Exactly team keeps coming up with fantastic integrations with Sablier V2! They've just built this:\r\n\r\nhttps://github.com/exactly/protocol/blob/9375bec4c8733a70e6f5177f1f5a9cf31aa4d48c/contracts/periphery/EscrowedEXA.sol#L14\r\n\r\nWhich is a dedicated vesting ERC-20 contract that delegates the streaming logic over to Sablier.","createdAt":"2023-10-02T13:46:49Z","labels":[],"number":3,"repository":"sablier-labs/discussions","state":"open","title":"Dedicated vesting ERC-20 contract that creates Sablier streams","type":"discussion","updatedAt":"2023-11-14T17:22:51Z","url":"https://github.com/orgs/sablier-labs/discussions/3"},{"author":"PaulRBerg","body":"These are some wireframes designed by @razgraf back in the day, which represent a custom stream builder:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/discussions/assets/8782666/edb247e0-a8f7-4efa-8691-53009a95c305\"/>\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/discussions/assets/8782666/6cfe2c65-cb0b-499a-9d17-e8df1d6ae52b\"/>\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/discussions/assets/8782666/db59056d-ecb3-43f4-8d35-e5914347f763\"/>\r\n\r\nThe streams can be either LockupLinear, but more often than not they will be LockupDynamic.","createdAt":"2023-10-15T14:03:52Z","labels":[],"number":4,"repository":"sablier-labs/discussions","state":"open","title":"Wireframes for custom stream builder","type":"discussion","updatedAt":"2023-10-15T14:05:16Z","url":"https://github.com/orgs/sablier-labs/discussions/4"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nUsers want their streams to follow a polynomial curve rather than an exponential curve:\r\n\r\n<img width=\"350\" alt=\"Screenshot 2023-09-25 at 3 22 52 PM\" src=\"https://github.com/sablier-labs/discussions/assets/8782666/aff989d0-2010-4b52-9dda-6560953fd419\">\r\n\r\nBut Lockup Dynamic works with piecewise exponential functions, so it is not able to implement polynomials.\r\n\r\n## Solution\r\n\r\nWhile polynomials cannot be directly implemented in Lockup Dynamic, they can be emulated. This is what we can do:\r\n\r\n1. Implement the polynomial using any mathematical software (e.g. Wolfram) to generate the streamed amounts at the end of each moth over the desired period\r\n2. For each month and amount, generate a segment\r\n3. Each segment has an exponent of 1 (which enables linear streaming)\r\n\r\nThe overall result is that the implied curve approximates the desired polynomial fairly accurately\r\n\r\n### Implementation\r\n\r\nRust program that takes an array of objects as input, with each object containing the following data:\r\n\r\n- Amount as an integer\r\n- Date as a string (e.g. Sep 30, 2024)\r\n\r\nWhich then produces some (literal) Solidity code, e.g.\r\n\r\n```solidity\r\npragma solidity >=0.8.19;\r\n\r\nimport { LockupDynamic } from \"@sablier/v2-core/src/types/DataTypes.sol\";\r\n\r\nfunction getSegments() pure returns (LockupDynamic.SegmentWithDelta[] memory) {\r\n    LockupDynamic.SegmentWithDelta[] memory segments = new LockupDynamic.SegmentWithDelta[](1);\r\n    segments[0] = LockupDynamic.SegmentWithDelta({ amount: 100e18, milestone: 1727643600, exponent: ud2x18(1) });\r\n}\r\n\r\n```\r\n\r\n## Examples\r\n\r\n- https://github.com/sablier-labs/sablier-v2-exactly-protocol\r\n- https://github.com/sablier-labs/sablier-v2-steakhut\r\n- https://gist.github.com/PaulRBerg/9c04afad3c6ea8ba0205f18261922c96\r\n\r\n\r\nThe Python script above generates this plot:\r\n\r\n<img width=\"500\" src=\"https://github.com/sablier-labs/discussions/assets/8782666/ff4914d3-9b9a-4c02-94ef-b034a0ef16ef\"/>","createdAt":"2023-09-25T12:25:02Z","labels":[],"number":2,"repository":"sablier-labs/discussions","state":"open","title":"Approximating polynomials with a Solidity code generator for Lockup Dynamic","type":"discussion","updatedAt":"2023-09-26T12:09:46Z","url":"https://github.com/orgs/sablier-labs/discussions/2"},{"author":"razgraf","body":"We've gotten a lot of feedback regarding streaming with yield-enhanced tokens aTokens from Aave, cTokens from Compound.\r\n\r\nWith normal, exchange-rate ERC20s (e.g. Yearn's system) this should be pretty straight forward. X goes in, X goes out - with the X<sub>i</sub> tokens being more valuable than the X<sub>o</sub> (they can be redeemed for more $). \r\n\r\nWith rebasing tokens this becomes an accounting problem - keeping track of balances. Unfortunately both Aave and Compound V3 use this system for their share tokens (e.g. aUSDC or cUSDCV3).\r\n\r\n### Topic 1 - Support this type of assets\r\n\r\nWhile the v2-core itself will only support regular assets, wrapping these rebasing tokens in an ERC4626 vault and streaming the minted shares (ERC20 compliant, exchange-rate) will in theory add support for streaming e.g. `Wrapped aUSDC`. \r\n\r\nAs per this [4626 Alliance page](https://erc4626.info/vaults/) there already are a bunch of adapters written for popular tokens. If we can get some that are already audited, that's even better!\r\n\r\n### Topic 2 - Improving UX with wrap/unwrap\r\n\r\nWhile 4626 solves the compatibility problem, there's still a UX problem at hand: the wrapping and unwrapping mechanisms. Normally, a sender would have to go to etherscan or a dedicated UI to wrap their `aUSDC` in `aUSDC4626`, create a stream with the new asset, while the recipient would have to perform the inverse actions: withdraw and unwrap. \r\n\r\nFor the sender, we could introduce a new method in the target contract which does the wrapping and stream creation, similar to how the protocol periphery already [handles ETH to wETH](https://github.com/sablier-labs/v2-periphery/blob/2a0c05dd6413884415fd9c31223872d2b4ac8d72/src/SablierV2ProxyTarget.sol#L352). For the recipient though, the solution isn't this straightforward.\r\n\r\n### Topic 3 - Bonus: Creating special logic for yield/interest\r\n\r\nSome users have been asking for a different yield split (e.g. instead of the recipient getting the yield, it would be the sender who gets it). With some custom logic and state management this could be achieved using a special kind of wrapping.\r\n\r\nInitial thoughts on this:\r\n- a wrapper contract could store the exchange-rate upon deposit and distribute underlying funds upon withdraw based on the exchange rate at that moment\r\n- this may cause positions in the \"wrapper\" contract to be non fungible (would 4626 still be good here?)","createdAt":"2023-07-26T15:35:41Z","labels":[],"number":5,"repository":"sablier-labs/discussions","state":"open","title":"Stream yield-bearing assets","type":"discussion","updatedAt":"2023-11-26T15:24:26Z","url":"https://github.com/orgs/sablier-labs/discussions/5"},{"author":"PaulRBerg","body":"We should consider implementing a contract similar to Maker's [`dss-change-log`](https://github.com/makerdao/dss-chain-log).\r\n\r\nhttps://docs.makerdao.com/deployment-addresses/multi-collateral-dai-public-releases","createdAt":"2023-05-12T13:41:19Z","labels":[],"number":14,"repository":"sablier-labs/discussions","state":"open","title":"Versioned chain log for onchain integrations","type":"discussion","updatedAt":"2024-12-23T19:52:55Z","url":"https://github.com/orgs/sablier-labs/discussions/14"},{"author":"PaulRBerg","body":"@razgraf I remember that you added these scripts a while ago.\r\n\r\nI tried to run them on my local machine, which uses Node v16, and apparently the `--openssl-legacy-provider` doesn't exist anymore:\r\n\r\n<img width=\"860\" alt=\"Screen Shot 2022-10-09 at 12 24 07 PM\" src=\"https://user-images.githubusercontent.com/8782666/194748916-27fef9fb-beee-48ad-8684-2335a915977d.png\">\r\n\r\nAre these scripts still needed? If not, should we delete them?","createdAt":"2022-10-09T09:25:20Z","labels":[],"number":239,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Should we delete the \"dev\" scripts in \"package.json\"?","type":"discussion","updatedAt":"2025-08-06T15:42:24Z","url":"https://github.com/sablier-labs/legacy-interfaces/discussions/239"},{"author":"PaulRBerg","body":"In the `TokensContextProvider`, there is a callback called `updateToken`:\r\n\r\nhttps://github.com/sablierhq/sablier-frontend/blob/91367f15f8865b7bbd2200f2b3de581157c5b8d8/packages/contexts/src/Tokens.js#L1357-L1359\r\n\r\nThis callback is supposed to be used when a token gets updated. But it seems to me that there is never a need for this. Token properties are pretty much immutable, or at least virtually immutable for the duration a Sablier user stay on our website.","createdAt":"2022-03-24T11:22:31Z","labels":[],"number":197,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Is \"updateToken\" needed at all?","type":"discussion","updatedAt":"2025-08-06T15:42:44Z","url":"https://github.com/sablier-labs/legacy-interfaces/discussions/197"},{"author":"PaulRBerg","body":"In one my recent commits:\r\n\r\n+ 7af13bf690ac4147925dba843fd1a42e9bf57d87\r\n\r\nI implemented a feature that updates the document.title inside of the Balances.js component, setting the label to the total value that has been streamed until now. That is, how much money has been streamed to the recipient.\r\n\r\nI was thinking about this though: shouldn't senders see a decreasing amount, starting with their deposit?","createdAt":"2020-02-07T21:49:13Z","labels":["question"],"number":200,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Should we show a decreasing value for senders?","type":"discussion","updatedAt":"2025-08-06T15:42:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/discussions/200"},{"author":"PaulRBerg","body":"hey @sablier-labs/evm, WDYT about renaming this to one of the following:\r\n\r\n- `evm-lib`\r\n- `evm-stdlib`\r\n- `stdlib` (since our EVM repos typically don't start with `evm-` prefix)\r\n\r\nI feel like any name containing the word 'lib' would better communicate the purpose of the logic maintained in this repository.","createdAt":"2025-06-20T14:43:09Z","labels":[],"number":39,"repository":"sablier-labs/evm-utils","state":"closed","title":"Renaming this to \"evm-lib\"?","type":"discussion","updatedAt":"2025-08-04T09:07:39Z","url":"https://github.com/sablier-labs/evm-utils/discussions/39"},{"author":"andreivladbrg","body":"I'm opening this discussion as a follow-up to the decision to implement a single contract (`Comptroller`) to manage all fee logic across our protocols — airdrops, flow, and lockup.  \r\nSee: https://github.com/sablier-labs/lockup/issues/1219\r\n\r\n(@maxdesalle tagging to get notified about this — as it will be relevant for you since all fees across campaigns, lockup, and flow will be centralized in one place. That means only one `collectFees` per chain. No need to dig into the technical details below)\r\n\r\n## Current Airdrops Design: fee charged in `claim`\r\n\r\nReference: https://github.com/sablier-labs/airdrops/issues/66\r\n\r\n**TLDR:** We store an oracle and a minimum fee in USD, then convert it to wei at claim time — both in the factory and deployed campaigns. Key points:\r\n- **Factory:** Fee can be changed freely (e.g. $0 → $3 → $5 → $3)\r\n    - Custom fees are stored in the factory\r\n- **Campaigns:** Fee can only **decrease** post-deployment\r\n    - It can be either the default or the custom fee set during deployment\r\n\r\n**Note:** with the `Comptroller`, we will have a greater flexibility, which is a plus.\r\n\r\n## Lockup and Flow: fee charged in `withdraw`\r\n\r\nIn these protocols, fees can be dynamic throughout the stream lifecycle. For example, a stream might start with a $0 fee, and the min fee could be increased later — unlike airdrops, where the fee can't be change if is zero at deployment time.\r\n\r\nTo match the airdrops approach, the initial idea was to support **custom fees for stream senders**. But there's a problem:\r\n\r\nIf a stream is **non-cancelable**, the recipient is guaranteed all the funds deposited. This makes the sender role less relevant. A user could set a sender address which has a lower (or zero) fee, so it's bypassing the default `withdraw` fee.\r\n\r\n**Note:**  This isn’t an issue in airdrops because the `msg.sender` is used to get the fee at deployment. In streams, `stream.sender` might differ from `msg.sender`.\r\n\r\n### Possible Solutions\r\n\r\n1. **Simplest:** accept the possible losses (similar to batch withdrawals)\r\n2. Don’t support custom fees for stream senders — only support this business model in airdrops.\r\n3. ~~Set `msg.sender` as `stream.sender` (might be consequences in MerkleLockup campaigns)~~ not a good solution, see below\r\n4. Store both `sender` and `streamCreator` in the stream data\r\n\r\nlmk if you come up with better solutions\r\n\r\nBased on what we decide here, in the `Comptroller` we would need to implement these functions: \r\n- `calculateMinFeeWeiForCampaignCreator(address campaignCreator)` - used in claim \r\n- `calculateMinFeeWeiForSender(address sender)` - used in withdraw\r\n\r\n### Other Question\r\n\r\nGiven our plan is to charge: (i) $1 on `withdraw` (ii) $3 fee on `claim`\r\n\r\nShould the `Comptroller` have:\r\n- Two variables: `minFeeUSDClaim` and `minFeeUSDWithdraw`, or  \r\n- One variable: `minFeeUSD`, set as $1 with a $3 passed in our UI for claims?\r\n\r\nSince getting the Merkle proof isn't easy for users, a single `minFeeUSD` might be enough.\r\n\r\n@sablier-labs/evm @razgraf would appreciate your input. This is **priority 0**, as the audit is approaching.","createdAt":"2025-06-03T22:28:43Z","labels":[],"number":32,"repository":"sablier-labs/evm-utils","state":"open","title":"Comptroller design: a single contract to store all logic related to fees","type":"discussion","updatedAt":"2025-06-04T15:42:21Z","url":"https://github.com/sablier-labs/evm-utils/discussions/32"},{"author":"smol-ninja","body":"I would suggest removing `SablierFees` from this repo. `Adminable`, `Batch`, and `NoDelegateCall` are quite standard and can be expected to be used by external projects without any modification.\r\n\r\nOn the other hand, `collectFees` is a very Sablier-specific function and can have a different implementation. For example, it has an entirely different implementation in the [Airdrops repo](https://github.com/sablier-labs/airdrops/blob/main/src/SablierMerkleFactory.sol#L93C1-L99C6). Similarly, even though it has the same implementation in Lockup and Flow, we cannot be 100% certain that it will remain like that forever, whereas we can say the same about rest of the utility contracts.\r\n\r\nTherefore, I propose removing `SablierFees` from this repo and keeping the local implementation in each repo.\r\n\r\ncc @sablier-labs/solidity ","createdAt":"2025-01-30T09:03:17Z","labels":[],"number":4,"repository":"sablier-labs/evm-utils","state":"closed","title":"Remove `SablierFees` from this repo","type":"discussion","updatedAt":"2025-01-31T15:34:59Z","url":"https://github.com/sablier-labs/evm-utils/discussions/4"},{"author":"andreivladbrg","body":"Should we also publish NPM packages and GitHub releases for this repo or installing it via commit should be fine?  \r\n\r\n```json\r\n\"@sablier/solidity-utils\": \"github:sablier-labs/solidity-utils#main\"\r\n```\r\n\r\nIMO, if integrators have no issues installing the `@sablier/lockup` package (or any other of our protocols that depend on this), we don't need to, since the purpose of this repo is to simply centralize repetitive logic across all _our_ contract repos.  \r\nUp to see\r\n\r\ncc @sablier-labs/solidity  ","createdAt":"2025-01-30T00:15:11Z","labels":[],"number":3,"repository":"sablier-labs/evm-utils","state":"closed","title":"Should we have an NPM package?","type":"discussion","updatedAt":"2025-01-31T14:35:59Z","url":"https://github.com/sablier-labs/evm-utils/discussions/3"},{"author":"PaulRBerg","body":"Ref https://github.com/sablier-labs/v2-core/discussions/442#discussioncomment-6221485.","createdAt":"2023-06-19T16:28:59Z","labels":[],"number":107,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Utility for calculating protocol fee amounts","type":"discussion","updatedAt":"2024-12-23T19:50:41Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/107"},{"author":"andreivladbrg","body":"As we decided that we will no longer use proxy targets in `2.1`, we won't have the `wrapAndCreate` helper functions from targets. Should we add support for them in the `SablierV2Batch` contract? @PaulRBerg\r\n\r\n@razgraf @gavriliumircea, are they used in the app?","createdAt":"2023-11-27T16:03:44Z","labels":[],"number":225,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Should we add wrap-and-create functions in \"Batch\"?","type":"discussion","updatedAt":"2024-12-23T19:49:54Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/225"},{"author":"smol-ninja","body":"> [!TIP]\r\n> Since Etherscan automatically verifies the contracts based on the matching source code criterion, this verification is only required once per chain.\r\n\r\nWe will use the following **MerkleLL** contract, deployed on Polygon, as an example [0x8BBe....7776](https://polygonscan.com/address/0x8bbe24ceee464e8a136fa19d2d099e2917837776).\r\n\r\n## Step 1\r\n\r\n👉 Click the contract creation tx from the \"More Info\" section.\r\n\r\n<img width=\"300\" alt=\"Screenshot 2024-09-25 at 15 03 08\" src=\"https://github.com/user-attachments/assets/e501eecc-ce82-4a22-bbff-f23171367cd9\">\r\n\r\n## Step 2\r\n\r\n🧠 Click to show more → Memorize the function name from the default view.\r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-09-25 at 15 22 51\" src=\"https://github.com/user-attachments/assets/84b82be6-69c1-46fc-9e61-f5ff8ea1dc06\">\r\n\r\n📝 View input as original → Copy the input data.\r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-09-25 at 15 04 25\" src=\"https://github.com/user-attachments/assets/c6aa93c9-f376-4bf2-bbb5-1126eb8e3073\">\r\n\r\n## Step 3\r\n\r\n👉 Go to [`SablierMerkleLockupDecoder` contract](https://sepolia.etherscan.io/address/0xa9fb181be1c9e8b294925964294c9aae86c7a5e9#readContract) → Enter the input data to the relevant function → Copy the output (this is the CONSTUCTOR ARG for merkle lockup contract to verify).\r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-09-25 at 15 06 13\" src=\"https://github.com/user-attachments/assets/a535316c-e5c9-43c4-87e1-598e03b603b5\">\r\n\r\n## Step 4\r\n\r\nGo to `v2-periphery` repo (you have to [clone it](https://github.com/sablier-labs/v2-periphery) and run `bun i` first if you don't have it already).\r\n\r\n🐣 Load the variables into the shell:\r\n\r\n```bash\r\nexport ETHERSCAN_API_KEY=\r\nexport ETHERSCAN_URL=\r\nexport CONSTUCTOR_ARG=\r\nexport CONTRACT_TO_VERIFY=\r\n```\r\n\r\n👨🏻‍💻 Run the verification command:\r\n```bash\r\nFOUNDRY_PROFILE=optimized \\\r\nforge verify-contract --etherscan-api-key $ETHERSCAN_API_KEY --verifier-url $ETHERSCAN_URL \\\r\n--constructor-args $CONSTUCTOR_ARG $CONTRACT_TO_VERIFY \\\r\nsrc/SablierV2MerkleLL.sol:SablierV2MerkleLL --watch\r\n```\r\n\r\nYou must change `src/SablierV2MerkleLL.sol:SablierV2MerkleLL` to `src/SablierV2MerkleLT.sol:SablierV2MerkleLT` if you wish to verify a **MerkleLT** contract.\r\n\r\n<img width=\"248\" alt=\"Screenshot 2024-09-25 at 15 34 56\" src=\"https://github.com/user-attachments/assets/8e3916a4-280b-4357-9da7-5b9e962f4bd2\">\r\n\r\nThat's all for today. Thank you for reading 💚","createdAt":"2024-09-25T14:27:42Z","labels":[],"number":385,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Verify a Merkle Lockup contract in 4 easy steps","type":"discussion","updatedAt":"2024-12-23T19:48:39Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/385"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-periphery/discussions/225, in future releases of the protocol, this contract will do more than just batch-create streams. Accordingly, we need to find a new name for it. Suggestions:\r\n\r\n1. `Router`\r\n2. `Actions`\r\n3. `Wrapper`","createdAt":"2023-12-09T21:40:07Z","labels":[],"number":228,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Suggested new names for the \"Batch\"","type":"discussion","updatedAt":"2024-12-23T19:44:37Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/228"},{"author":"razgraf","body":"### Claim value getter\r\n\r\nA read-only method that returns the value a certain address is entitled to claim from the Airstream contract.","createdAt":"2023-07-31T18:02:35Z","labels":[],"number":157,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Generic feature requests for Airstreams","type":"discussion","updatedAt":"2024-10-14T12:54:36Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/157"},{"author":"PaulRBerg","body":"From my private chat with Luis Cuende:\r\n\r\n<img width=\"547\" alt=\"chat-1\" src=\"https://user-images.githubusercontent.com/8782666/221109117-6e19ebf3-5529-463b-86ae-b51e79990940.png\">\r\n\r\n<img width=\"547\" alt=\"chat-2\" src=\"https://user-images.githubusercontent.com/8782666/221109128-f4fad44d-10c9-4859-a9cc-7fe8ebb18a76.png\">\r\n\r\nThis could be implemented in the proxy by simply canceling the stream but not returning the funds back to the proxy owner. The proxy would \"escrow\" the funds when `pause` is called, and then there would be another function (e.g. `restart`), which would pick up the escrowed funds to create another stream.\r\n","createdAt":"2023-02-24T06:37:19Z","labels":[],"number":14,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Feature request from Nation3: pause streams","type":"discussion","updatedAt":"2024-10-14T12:27:44Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/14"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nYet another productive call with NFTFI today - we dived deep into the difficulties of accepting stream NFTs as collateral.\r\n\r\nOne idea that sprung up was to provide NFTFI with an on-chain helper for calculating the guaranteed minimum value that a stream will have at a particular date or range in the future. This, in turn, will create a sort of \"floor price\" for the NFT.\r\n\r\nThe context is offer bidding. On NFTFI, lenders post bids with a maximum expiration date of 7 days. The issue is that during the bidding window, the recipient may withdraw, and so the collateral value of the stream may end up lower than what had originally been estimated.\r\n\r\nTo mitigate this risk, the lender could floor the value of the collateral to the amount that will remain due to be streamed at a future point in time. In other words, the lender would assume the worst-case scenario whereby all streamed assets are withdrawn at the time when the bid is accepted.\r\n\r\nNote: this would only work for non-cancelable streams.\r\n\r\n## Implementation\r\n\r\n- New periphery contract with helpers functions (we should think about what other helpers would be valuable)\r\n- The contract would have a `remainingAmountOf` function (or something along these lines) which would:\r\n    - Take three parameters: `sablier`, `streamId`, and `timestamp`\r\n    - Return the amount of tokens that are due to be streamed starting at the particular point in time provided by the user\r\n- Move the `streamedAmountOf` calculations to a library in V2 Core so that V2 Periphery can reuse them","createdAt":"2023-09-06T17:23:13Z","labels":[],"number":182,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Predicting the value of a stream at a specific point in the future to provide a \"floor price\"","type":"discussion","updatedAt":"2024-10-07T16:24:28Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/182"},{"author":"andreivladbrg","body":"The current version implemented for Dynamic contract hashes all relevant information for a specific recipient:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/b5e71992fd71a7a1bfb3cda026895c98d890d065/src/SablierV2MerkleLockupLD.sol#L53-L70\r\n\r\n@gavriliumircea mentioned that including the segments in the tree leaf would be time-consuming (when creating the campaign) and also expensive in terms of API calls, and he suggested including only the `(index, recipient, amount)` in the Merkle tree leaf. The `.csv` would still include the segments, but they would be obtained when a claim is being made. (Mircea, correct me if I understood it wrong)\r\n\r\nThe other problem[^why] is when the `protocol fee is > 0`, the amount in the claim function needs to be greater than the amount from the actual leaf amount. To address this, we either:\r\n- add one more amount param in the function: `treeLeafAmount` and `createAmount` - this version would require the UI to calculate both amounts.\r\n- calculate the leaf amount in the `claim` function by summing the segment amounts - this version would be more expensive in terms of gas.\r\n\r\nCurious about your opinions @PaulRBerg @razgraf @smol-ninja. How should the Merkle tree look for Dynamic and Tranched contracts? There are also other discussions regarding UX flow, but they can be open on other repos.\r\n\r\n[^why]: This is a problem because we have an invariant on the core that says the segment amounts sum must equal the deposited amount, and in the `create` function, we need to pass an amount equal to the `leaf amount + the fee amount`.","createdAt":"2024-02-13T15:00:29Z","labels":[],"number":288,"repository":"sablier-labs/v2-periphery","state":"closed","title":"What should we include in the Merkle tree leaf for Dynamic/Tranched campaigns","type":"discussion","updatedAt":"2024-09-04T20:09:54Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/288"},{"author":"PaulRBerg","body":"Ref https://github.com/sablier-labs/v2-periphery/pull/91#issuecomment-1580391265.","createdAt":"2023-06-07T10:13:34Z","labels":[],"number":93,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Consider implementing a `DeployDeterministicProtocol` script","type":"discussion","updatedAt":"2024-06-30T19:32:48Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/93"},{"author":"smol-ninja","body":"### Comments from RustyRabbit (Cantina)\r\n- Since `aggregateAmount` and `recipientCount` are not validated during the execution of `createMerkle` functions, they cannot be trusted in the [emitted events](https://github.com/sablier-labs/v2-periphery/blob/ec5750c25509897bf57e4d551dc71e95eb9108c6/src/SablierV2MerkleLockupFactory.sol#L55).\r\n- People tend to trust event data (blindly) as they assume it’s all validated.\r\n\r\n## An example scenario\r\n1. A legitimate user creates an Airstream campaign.\r\n2. A malicious actor creates another campaign with the same data except for the large value of `expiration` and `aggregateAmount`.\r\n3. Since both the campaigns have the same `initialAdmin`, the Sablier UI will show both campaigns to the legitimate user.\r\n4. The legitimate user can be tricked into funding the malicious stream with a large `aggregateAmount`. Since the `expiration` is very high, he wouldn’t even be able to [`clawback`](https://github.com/sablier-labs/v2-periphery/blob/ec5750c25509897bf57e4d551dc71e95eb9108c6/src/abstracts/SablierV2MerkleLockup.sol#L101C1-L106C10) extra funds.\r\n\r\n### Comment from @razgraf :\r\n- The chances are slim, as (1) they’d probably notice the amount being off (when dealing with such big amounts) and we also have the final step of Airstream creation include “fund” in the series of actions (so you can fund from the same page where you create the campaign).\r\n- It’s quite hard to get this data from the IPFS file on-demand. That’d be the one way to circumvent it.\r\n\r\n### Alternate solution proposed by @smol-ninja:\r\n- We can add a cooldown period of 24 hours. During that period, `clawback` can be called by the admin. it's not elegant but gives admin some time to adjust the deposit amount in case he has been tricked into depositing more.","createdAt":"2024-04-18T11:06:17Z","labels":[],"number":332,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Allowing `clawback` after campaign has been created","type":"discussion","updatedAt":"2024-05-03T16:13:45Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/332"},{"author":"andreivladbrg","body":"Ref https://github.com/cantinasec/review-sablier-3/issues/3","createdAt":"2024-05-01T13:37:26Z","labels":[],"number":336,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Consider changing the proof verify as EigenLayer","type":"discussion","updatedAt":"2024-05-02T15:08:43Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/336"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/06ffb31076f93832e27614612386ef7bc4445bc1/src/types/DataTypes.sol#L101-L110\r\n\r\nCc @sablier-labs/solidity.","createdAt":"2024-04-09T12:41:24Z","labels":[],"number":313,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Any reason for not ordering the ConstructorParams alphabetically?","type":"discussion","updatedAt":"2024-04-15T10:31:13Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/313"},{"author":"razgraf","body":"While implementing support for the \"monthly\" version of airstreams with MLLT in the app (actually after I almost finished it 🤦‍♂️), I released it makes no sense as you cannot predict the length of a month if you don't know the start date of each stream. While \"stepper\" works, as it doesn't involved fixed calendar dates, \"monthly\" is much more sensitive to a known start date.\r\n\r\nE.g. If I calculate that starting today April 4th, the distance to May 4th is 30 days, if we have a user claiming on May 1st, those 30 days will bring him into May 31st, not June 1st. \r\n\r\nThis (h/t @PaulRBerg) would probably be possible only with range(d) airstreams (#279) as that grants us access to this necessary predetermined start date for every user claiming their streams.","createdAt":"2024-04-04T17:00:56Z","labels":[],"number":312,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Requests for monthly unlocked airstreams","type":"discussion","updatedAt":"2024-04-14T17:11:27Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/312"},{"author":"smol-ninja","body":"Currently in v2.2, the following parameters are used to [generate salt](https://github.com/sablier-labs/v2-periphery/blob/8683889a3db3fb2b607861ba0f20b53809710e1f/src/SablierV2MerkleLockupFactory.sol#L36C1-L49C11):\r\n\r\n```solidity\r\nbytes32 salt = keccak256(\r\n    abi.encodePacked(\r\n        baseParams.initialAdmin,\r\n        baseParams.asset,\r\n        abi.encode(baseParams.ipfsCID),\r\n        bytes32(abi.encodePacked(baseParams.name)),\r\n        baseParams.merkleRoot,\r\n        baseParams.expiration,\r\n        baseParams.cancelable,\r\n        baseParams.transferable,\r\n        lockupLinear,\r\n        abi.encode(streamDurations)\r\n    )\r\n);\r\n  ```\r\n\r\nDespite `name` and `ipfsCID` being considered to be unique for each campaign, it does not eliminate the case when all the details could be the same for two distinct campaigns. As an example, a third-party integrator can choose to use the same `name` for all the campaigns created through them.\r\n\r\nA potential solution is to include a `nonce` in the salt that gets auto-incremented for new deployments (similar to how gnosis safe works). It will require adding one storage in the `SablierV2MerkleLockupFactory` mapped against the caller address.\r\n\r\nAnother solution is to include `block.timestamp` in the salt generation. It reduces the likelihood of collision but still doesn't rectify it completely as two campaigns can still be included in the same block.\r\n\r\nShould we pursue this in the future or the cost of developing this could be higher than the likelihood of this collision? cc @sablier-labs/engineers \r\n\r\nRelated:\r\n- https://github.com/sablier-labs/docs/issues/140","createdAt":"2024-04-04T12:28:22Z","labels":[],"number":311,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add entropy to MerkleLockup CREATE2 salt","type":"discussion","updatedAt":"2024-04-11T16:29:12Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/311"},{"author":"andreivladbrg","body":"With the new OE contract, we will have multiple batch contracts, but in different repos.\r\n\r\nThus, to differentiate between them, shouldn't we rename the batch contract to:` SablierV2LockupBatch`?\r\n\r\n@sablier-labs/solidity \r\n\r\nAlso, tagging @razgraf to ask if this would improve the dev work at the app level?","createdAt":"2024-04-10T15:11:13Z","labels":[],"number":318,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Should we rename the SablierV2Batch contract?","type":"discussion","updatedAt":"2024-04-10T18:41:50Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/318"},{"author":"PaulRBerg","body":"It just dawned on me that there is a redundancy in the names of the following contracts (on the `staging` branch):\r\n\r\n- `SablierV2MerkleLockupLL`\r\n- `SablierV2MerkleLockupLT`\r\n\r\nSome background on how we arrived at these names - the `MerkleLockup` contract used to be called `MerkleStreamer`. When \"streamer\" was part of the name, it made sense to append \"LL\" and \"LT\" to distinguish between the underlying distribution contracts. But now, it feels a bit redundant to me. How about we rename the contracts like so?\r\n\r\n- `SablierV2MerkleLL`\r\n- `SablierV2MerkleLT`\r\n\r\nOr like so:\r\n\r\n- `SablierV2MerkleLockupLinear`\r\n- `SablierV2MerkleLockupTranched`\r\n\r\nCc @sablier-labs/solidity and @razgraf.","createdAt":"2024-04-09T12:58:29Z","labels":[],"number":314,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename \"LockupLL\" to \"LockupLinear\" and \"LockupLT\" to \"LockupTranched\"","type":"discussion","updatedAt":"2024-04-10T15:31:04Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/314"},{"author":"smol-ninja","body":"[TrancheWithPercentage](https://github.com/sablier-labs/v2-periphery/blob/staging/src/types/DataTypes.sol#L120C1-L124C6) struct is used to store percentage and tranche duration of a LT stream in case of MLLT.\r\n\r\n```solidity\r\nstruct TrancheWithPercentage {\r\n    // slot 0\r\n    UD2x18 unlockPercentage;\r\n    uint40 duration;\r\n}\r\n```\r\n\r\nHowever, [UD2x18](https://github.com/PaulRBerg/prb-math/blob/main/src/ud2x18/ValueType.sol) can only have upto 2 digits that means it cannot store 100%. The maximum it can have is 99.9999999....(18 digits).\r\n\r\nThere could be a use case where there is a single tranche with 100% of the amount.\r\n\r\nThere are two possible solutions I can think of:\r\n1. Change the datatype to `UD60x18` but it will add a new storage slot.\r\n2. We define a new fixed point number in prb-math such as 4 digits and 14 decimals.\r\n\r\ncc @andreivladbrg @PaulRBerg \r\n\r\nPS: I might be wrong with the claim that it cannot take 100%.","createdAt":"2024-04-02T16:52:13Z","labels":[],"number":310,"repository":"sablier-labs/v2-periphery","state":"closed","title":"How to store 100% with `TrancheWithPercentage`?","type":"discussion","updatedAt":"2024-04-03T11:41:04Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/310"},{"author":"smol-ninja","body":"The [emitted events](https://github.com/sablier-labs/v2-periphery/blob/73831c7dcaa5ec4e2fed6caa0f8040154e53030a/src/interfaces/ISablierV2MerkleLockupFactory.sol#L20C1-L27C7) during `CreateMerkleLockup` index the [whole `ConstructorParams` struct](https://github.com/sablier-labs/v2-periphery/blob/73831c7dcaa5ec4e2fed6caa0f8040154e53030a/src/types/DataTypes.sol#L101C1-L110C6). However, since topics can't hold more than 32 bytes ([from docs](https://docs.soliditylang.org/en/v0.8.25/contracts.html#events)), the whole struct bytes get hashed before being emitted as an indexed value. Thus, any of the parameters of the `ConstructorParams` struct cannot be searched directly on-chain. You need to know the values of all the parameters and then use the Keccak-256 hash in order to search for it.\r\n\r\nTherefore, it does not make sense to index the whole struct. There are two options that we can consider:\r\n\r\n### O1: Full expansion\r\n\r\n```solidity\r\nevent CreateMerkleLockupLL(\r\n    ISablierV2MerkleLockupLL indexed merkleLockupLL,\r\n    address admin,\r\n    IERC20 asset,\r\n    string ipfsCID,\r\n    string name;\r\n    bytes32 merkleRoot;\r\n    uint40 expiration;\r\n    bool cancelable;\r\n    bool transferable;\r\n    ISablierV2LockupLinear lockupLinear,\r\n    LockupLinear.Durations streamDurations,\r\n    uint256 aggregateAmount,\r\n    uint256 recipientsCount\r\n);\r\n```\r\n\r\nThis would increase the gas cost by 2466.\r\n\r\n\r\n### O2: Index `admin` and `asset`\r\n\r\n```solidity\r\nevent CreateMerkleLockupLL(\r\n    ISablierV2MerkleLockupLL indexed merkleLockupLL,\r\n    address indexed admin,\r\n    IERC20 indexed asset,\r\n    MerkleLockup.ConstructorParams indexed baseParams,\r\n    ISablierV2LockupLinear lockupLinear,\r\n    LockupLinear.Durations streamDurations,\r\n    uint256 aggregateAmount,\r\n    uint256 recipientsCount\r\n);\r\n```\r\n\r\nThis would increase the gas cost by 750 = 375 * 2 new topics. Note that we are still hashing `baseParams` to save on gas cost.\r\n\r\n### O3: Unchanged / remove `baseParams`\r\n\r\n```solidity\r\nevent CreateMerkleLockupLL(\r\n    ISablierV2MerkleLockupLL indexed merkleLockupLL,\r\n    MerkleLockup.ConstructorParams indexed baseParams,\r\n    ISablierV2LockupLinear lockupLinear,\r\n    LockupLinear.Durations streamDurations,\r\n    uint256 aggregateAmount,\r\n    uint256 recipientsCount\r\n);\r\n```\r\n\r\nThis imo is the cheapest way to emit event but it makes `baseParams` unusable. **We may be better off not including it at all** and saving 375 gas (1 less topic).\r\n\r\n### O4: Remove indexed from `baseParams`\r\n\r\n```solidity\r\nevent CreateMerkleLockupLL(\r\n    ISablierV2MerkleLockupLL indexed merkleLockupLL,\r\n    MerkleLockup.ConstructorParams baseParams,\r\n    ISablierV2LockupLinear lockupLinear,\r\n    LockupLinear.Durations streamDurations,\r\n    uint256 aggregateAmount,\r\n    uint256 recipientsCount\r\n);\r\n```\r\n\r\nThis would increase gas cost by 2466 but this makes the entire `baseParams` usable through emitted logs.\r\n\r\nComments welcome from @sablier-labs/engineers.","createdAt":"2024-03-27T15:13:07Z","labels":[],"number":308,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Structure of `CreateMerkleLockup` event","type":"discussion","updatedAt":"2024-03-31T09:13:57Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/308"},{"author":"PaulRBerg","body":"Feature request to allow an airstream campaign creator to edit the recipient addresses:\r\n\r\n<img width=\"400\" alt=\"SCR-20240131-ryqh\" src=\"https://github.com/sablier-labs/v2-periphery/assets/8782666/3f9da2ac-1f17-49df-ac39-ca64889b41d8\">\r\n\r\nI don't think this is possible in the Merkle API (cc @gavriliumircea) but I've posted the discussion just in case.","createdAt":"2024-01-31T19:44:21Z","labels":[],"number":270,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Edit recipient addresses in airstream campaigns","type":"discussion","updatedAt":"2024-02-07T11:33:19Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/270"},{"author":"andreivladbrg","body":"In one of our calls, the design decision regarding the Lockup Dynamic segments was to pass them into the constructor and hardcode them within the contract:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/5d55a7e923bab4d330ac758194b2c4de77bbb6d2/src/SablierV2AirstreamCampaignLD.sol#L27-L29\r\n\r\nIn practice, this won't work for winners with different airdrop amounts, because in the segment struct, we have an amount variable that, when summed up, it should be equal to the airdrop amount.\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/456744002f62d0627f10b958d41937ed1e68d95e/src/libraries/Helpers.sol#L209-L213\r\n \r\nOne potential solution I've considered is including the segments (if not the all array of structs, we can include only the amounts) for each airdrop winner in the Merkle tree. However, I'm unsure how this might complicate the frontend and server-side aspects.\r\n\r\n@razgraf, do you think this would be achievable?\r\n\r\nWhat do you think? Are there other solutions we could explore?\r\n\r\nShould we continue with the Lockup Dynamic campaign, or prioritize the release of the Lockup Linear campaign first?\r\n","createdAt":"2023-08-18T18:40:17Z","labels":[],"number":166,"repository":"sablier-labs/v2-periphery","state":"closed","title":"How should we handle the Lockup Dynamic campaign's segments?","type":"discussion","updatedAt":"2024-02-01T22:06:31Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/166"},{"author":"PaulRBerg","body":"Implementing [LockupTranched](https://github.com/sablier-labs/company-discussions/discussions/19) means that the `MerkleStreamer` contract will not handle just streaming models, but also discrete, delineated ones.\r\n\r\nIn light of that, It makes most sense to rename `MerkleStreamer` to `MerkleLockup`.\r\n\r\nSide note - we've previously discussed this [here](https://github.com/sablier-labs/v2-periphery/discussions/222). But, at the time, we didn't know about LockupTranched.","createdAt":"2024-01-04T15:10:51Z","labels":[],"number":255,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename \"MerkleStreamer\" to \"MerkleLockup\"","type":"discussion","updatedAt":"2024-01-31T07:41:51Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/255"},{"author":"razgraf","body":"During a recent discussion we touched upon relayers a.k.a. other people paying gas for someone's withdrawals. Up until now we were thinking of relayers as possible rescuers (#155), whitelisted by the Sablier contracts through a permissioned system. \r\n\r\nWhy not split these two concepts and create a standalone, permissionless relayer system.\r\n\r\n### Idea\r\n\r\nCreate a helper contract that implements a flash-relay method. For the lifetime of one block, the contract will\r\n1. transfer the NFT from your wallet to itself (thus becoming the recipient)\r\n2. withdraw funds from the stream\r\n3. at the end transfer both the NFT and the funds back to your wallet. \r\n \r\nAs a pre-requirement, you (the holder) would have to allow this contract to transfer the NFT. This way, someone running a \"keeper\" could become the caller of this relaying contract. Should we also add an embedded fee here? ","createdAt":"2022-12-07T17:55:23Z","labels":[],"number":12,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Flash-relaying","type":"discussion","updatedAt":"2023-12-03T15:59:41Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/12"},{"author":"PaulRBerg","body":"I can't see any use case for open-ended streaming for airdrops .. but still. WDYT about renaming `MerkleStreamer` to `MerkleLockup` to reflect the fact that the current implementation targets the `Lockup` release?\r\n\r\nCc @andreivladbrg @razgraf","createdAt":"2023-11-26T15:11:48Z","labels":[],"number":222,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename \"MerkleStreamer\" to \"MerkleLockup\"?","type":"discussion","updatedAt":"2023-11-30T15:47:14Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/222"},{"author":"PaulRBerg","body":"Re-posting @razgraf from Slack:\r\n\r\n> Looking at withdraw multiple for the target and realised the `to` parameter doesn't really make sense.\r\n>\r\n> What if I as a proxy sender want to withdraw from multiple streams for my employees. The `to` parameter, because I am a sender, should be locked to each stream's recipient. Unfortunately, I can only provide the to parameter as one single recipient address. So I'm limited to withdrawing multiple streams only between the same sender + recipient pair, if I am the sender. Kind of blocks the possibilities even for relayers right? At least for my use-case above with a company and its employees.\r\nI don't remember if we intended to to this. Am I interpreting the code correctly?\r\n>\r\n> At the very least, if this is indeed the problem, can we maybe re-code the `withdrawMultiple` method in the new targets to loop around an array of structs of `{streamIds , to]` instead of lock to a single possible `to`?","createdAt":"2023-09-02T10:59:40Z","labels":[],"number":179,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Redesign the \"to\" parameter in the proxy target","type":"discussion","updatedAt":"2023-11-26T15:25:09Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/179"},{"author":"PaulRBerg","body":"It dawned on me that the name of the `Airstreams` contract need not be as specific as it currently is.\r\n\r\nWe should consider renaming the contract to something more general-purpose because the same contract could facilitate other use cases, such as non-airdrop vesting. The target audience is normal Sablier senders who want to stream to a large number of recipients; subsidizing the gas costs for everybody is not feasible because only up to ~100 streams can be created in a single Ethereum block.\r\n\r\nSuggested alternative names:\r\n\r\n- `MerkleStreamer` \r\n- `MerkleDistributor` (the name Uniswap used for its airdrop, see https://github.com/Uniswap/merkle-distributor)\r\n\r\nTo avoid any doubts, I don't suggest rebranding the Airstreams product as a whole. All labels in the UI can remain as is.","createdAt":"2023-09-07T12:07:51Z","labels":[],"number":183,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename the \"Airstreams\" contract to something more general-purpose","type":"discussion","updatedAt":"2023-10-30T09:27:48Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/183"},{"author":"PaulRBerg","body":"See the rationale put forth in https://github.com/sablier-labs/v2-interfaces/issues/397.","createdAt":"2023-06-17T15:53:22Z","labels":[],"number":103,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Consider listing the proxy plugin in the archive","type":"discussion","updatedAt":"2023-10-11T10:29:42Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/103"},{"author":"razgraf","body":"### Parameters for the factory `create` method\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/89aa8bd85729d169fbf43b53f38514f82f42e53f/src/SablierV2MerkleStreamerFactory.sol#L50-L51\r\n\r\n**Question:** Why is `campaignTotalAmount` prefixed with `campaign` while `recipientsCount` isn't?\r\n**Suggestion:** Could we somehow bundle these parameters, either by prefixing them similarly or (better) by grouping them under an attributes struct? I'm mostly thinking of those that are meant to be emitted for indexing, so: `[CID, amount, recipients]`. Alternatively, simply removing the campaign prefix would also be much less verbose.\r\n\r\n### Consistency in parameter order\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/89aa8bd85729d169fbf43b53f38514f82f42e53f/src/SablierV2MerkleStreamerFactory.sol#L57-L62\r\n\r\nI don't think it influences the salt in a bad way so could we maybe swap the order of `lockupLinear` and `initialAdmin` to mirror the one we use below for the new LL constructor?","createdAt":"2023-09-18T15:01:35Z","labels":[],"number":189,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Suggestions for the MerkleStreamer API","type":"discussion","updatedAt":"2023-10-16T12:20:09Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/189"},{"author":"PaulRBerg","body":"Copy-pasting Dirk's feedback in https://github.com/cantinasec/review-pr-sablier/issues/1#issuecomment-1691498820:\r\n\r\n> **Description**: PR 161 introduces the use of token approval/allowances for the proxy contract to create streams rather than use explicit Permit2 signatures.The intended use case is for Safe users to avoid having to let every cosigner need to sign the permit2 offline sig and use a Safe multi-send to batch an approve on the ERC20 token and create the stream in the same transaction.\r\n>\r\n> However some non Safe users may be inclined to use approvals over the permit2 use case going even so far as to use infinite approvals to save gas and to ease the Ux.\r\nThe risk is that remaining balances on token approvals (or max approvals) can get abused by rogue envoys (or compromised contracts of those are set as envoys) to create streams to arbitrary receivers.\r\n>\r\n> This wasn't the case with permit2 signatures as each time a stream was created a new permit2 signature was needed from the owner. Additionally any permit2 signature was short-lived due to the expiration time and typically used the exact amount needed.\r\n>\r\n> **Recommendation**: consider using a push model rather than a pull model as the intended use case needs a preceding (approval) transaction on the token which could be replaced by a transfer() transaction. Although this doesn't solve the issue at it's core, balances are more easily to query compared to approvals (watch only address in wallets) and users are less likely to actually send more funds than needed.","createdAt":"2023-08-24T12:35:20Z","labels":[],"number":171,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Enhance security of \"ProxyTargetApprove\" by using a push model","type":"discussion","updatedAt":"2024-02-01T21:36:33Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/171"},{"author":"PaulRBerg","body":"While writing #53, I came up with the following way of framing the devilish problem that led @razgraf and @gavriliumircea to spend weeks debugging Permit2 signatures:\r\n\r\nThe core issue is that the `ProxyTarget` contract requires users to ensure that all of the following parameters are in synchrony:\r\n\r\n- The values passed as the ERC-20 transfer amount (e.g. `createParams.totalAmount`)\r\n- The non-signature struct fields in [`Permit2Params`](https://github.com/sablierhq/v2-periphery/blob/9fd47df12c970a55318c48d44d7e95d71752e48f/src/types/DataTypes.sol#L59-L61)\r\n- The local values the user has signed over to generate the `bytes` signature\r\n\r\nIn hindsight, this seems to me like a bad design because it's easy to shoot yourself in the foot with it.\r\n\r\nTo cut the proverbial Gordian Knot, we could follow in Uniswap's footsteps and require the front-end client to pass the `PermitSingle` struct alongside the Permit2 signature:\r\n\r\nhttps://github.com/Uniswap/universal-router/blob/b01e71f8ea6458ce86cb94ad68b5d4d92d3a7382/contracts/base/Dispatcher.sol#L163-L170\r\n\r\nThis approach is more verbose; values like `nonce` and `spender` would have to be handled by the front-end. However, this should be a worthy trade-off because the system would become more robust and resilient against human error.\r\n\r\nWDYT, @razgraf, @gavriliumircea?","createdAt":"2023-05-12T21:38:00Z","labels":[],"number":54,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Addressing the Permit2 parameter synchrony requirement by having the front-end client pass the `PermitSingle` struct","type":"discussion","updatedAt":"2023-08-17T18:42:07Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/54"},{"author":"PaulRBerg","body":"## Problem Situation\r\n\r\nThe current design on the `feat/airstreams` branch involves an `AirstreamsFactory` contract that deploys a bespoke `Airstreams` contract for every airstream creator. But now I realize that we don't necessarily have to design the airstreams like this. We could instead have a monolith contract where all airstream campaigns are bundled together; there would be an `Airstream` struct and an `airstreams` mapping.\r\n\r\n## Comparison\r\n\r\n| Factory | Monolith |\r\n|:-------|:-------|\r\n| ❌ High gas cost (to deploy the contract) | ✅ Low gas cost |\r\n| ✅ Flexible design for users who need to customize the implementation (e.g., for upgradeability) | ❌ Rigid design |\r\n| ✅ Relatively lower development cost | ❌ High development cost: state access modifiers, special functions for transferring the admin |\r\n| ❌ Indexing and accounting are difficult | ✅ Indexing and accounting are easy |\r\n| ❌ Leaving TVL on the table | ✅ TVL boost | \r\n| ✅ No psychological deterrent for users | ❌ Psychological deterrent for users (deposit assets into a pooled contract) | \r\n\r\n## My Thoughts\r\n\r\nIn an ideal world, we would build both the factory and the monolith. In the UI, we would default to using the latter. Elsewhere, we would mention the possibility of creating bespoke `Airstreams` deployments (to cater to users who prefer to deploy custom contracts).\r\n\r\nHowever, we have limited resources (time and money for audits), so our first MVP should contain only one design. But I can't decide which is better because the pros/ cons analysis doesn't tilt the balance in any particular direction.\r\n\r\nWDYT, @razgraf, @andreivladbrg?","createdAt":"2023-07-31T17:18:55Z","labels":[],"number":156,"repository":"sablier-labs/v2-periphery","state":"closed","title":"To factory or not to factory the airstreams","type":"discussion","updatedAt":"2023-08-09T05:59:52Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/156"},{"author":"PaulRBerg","body":"As I've explained on [Twitter](https://twitter.com/PaulRBerg/status/1653727097767034880):\r\n\r\n- With clones, deployment costs less, but each subsequent call costs more.\r\n- Without clones, deployment costs more, but each subsequent call costs less.\r\n\r\nReferences:\r\n\r\n- [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167)\r\n- OpenZeppelin's [implementation](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/contracts/proxy/Clones.sol)","createdAt":"2023-07-31T07:27:23Z","labels":[],"number":154,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Should Airstream contracts be deployed as EIP-1167 clones?","type":"discussion","updatedAt":"2023-08-02T14:50:07Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/154"},{"author":"PaulRBerg","body":"Airstream contracts will inherit from [`Adminable`](https://github.com/sablier-labs/v2-core/blob/fcbc567aea6362c1f102eb19732badeb4899dec5/src/abstracts/Adminable.sol), and there comes the question of who the stream sender should be when claiming airstreams?\r\n\r\nIt can be either the Airstream contract itself or the administrator's address.\r\n\r\nThe massive benefit of setting the admin as the stream sender would be that we wouldn't have to implement `cancel` and `cancelMultiple` in the Airstream contract. The typical cancellation flow would apply.\r\n\r\nThe only con I can think of is that this might interfere the accounting logic since the nominal sender would be different from the real sender (the Airstreams contract). However, this should be a negligible issue - many airstreams will likely be non-cancelable, and in any case the sender and the funder are different entities in V2 Core:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/fcbc567aea6362c1f102eb19732badeb4899dec5/src/interfaces/ISablierV2LockupLinear.sol#L28-L38","createdAt":"2023-07-31T14:54:12Z","labels":[],"number":155,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Decide if the airstream sender should be the Airstream admin","type":"discussion","updatedAt":"2023-08-10T15:28:00Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/155"},{"author":"razgraf","body":"The proxy plugin used for the Sablier on-cancel callback is called `onStreamCanceled`.\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/453a35ef662183654138bfe8cab2b523f340fa5b/src/SablierV2ProxyPlugin.sol#L77-L79\r\n\r\nWouldn't renaming it in something more unique (e.g. `onSablierStreamCanceled`) help prevent unintended collisions in the future (e.g. other project using the PRBProxy doing \"Potato Streaming\")? That's not necessarily intended to improve security (as bad players could still engineer plugins with our original name) but unknowing developers may benefit from this.","createdAt":"2023-06-27T14:28:36Z","labels":[],"number":112,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Consider renaming the hooks to avoid potential conflicts","type":"discussion","updatedAt":"2023-07-01T16:33:00Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/112"},{"author":"PaulRBerg","body":"It's one thing to use the \"linear\" and the \"dynamic\" shorthands in our tests, and quite another thing to use them in a public setting (i.e. the proxy target).\r\n\r\nWDYT, @andreivladbrg?\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/b93fe2feb1687438405b67ed2323d354745cfa00/src/interfaces/ISablierV2ProxyTarget.sol#L71-L76","createdAt":"2023-05-17T12:58:20Z","labels":[],"number":59,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename `linear` to `lockupLinear` and `dynamic` to `lockupDynamic` function parameters","type":"discussion","updatedAt":"2023-05-31T14:44:03Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/59"},{"author":"PaulRBerg","body":"The recent saga with the front-end Permit2 signatures has made an inexplicit-albeit-very-important assumption explicit - and it did it in a big-time way given how much effort @razgraf, @gavriliumircea, and @andreivladbrg have dedicated to debugging the signatures.\r\n\r\nThe said assumption is that we have been expecting the ERC-20 transfer amount to moonlight as the permitted amount:\r\n\r\n- https://github.com/sablierhq/v2-periphery/blob/5e7406e401f9cb90629a183af906c2191b5ff568/src/SablierV2ProxyTarget.sol#L629\r\n- https://github.com/sablierhq/v2-periphery/blob/5e7406e401f9cb90629a183af906c2191b5ff568/src/SablierV2ProxyTarget.sol#L645\r\n\r\nThis assumption is a foot gun insofar as it doesn't make contract users aware of the role the amount plays in the signature - and this, unfortunately, was the root cause for why the Permit2 signatures failed to work as expected in the front-end for >1 week. See this [unsuspecting line](https://github.com/sablierhq/v2-interfaces/blob/6bdfb4130014a0208bd4be2b14756fccfc0c0026/packages/models/src/Permit/index.ts#L162) in `v2-interfaces`, which hard-codes the permitted amount.\r\n\r\nIt turns out that the permitted amount need not be equal to the transfer amount. It can be greater than the transfer amount, and @razgraf suggested a potential use case on Slack, i.e.:\r\n\r\n> \"give me a permit of 10k and at the end of the month I'll trigger a stream of whatever you owe me e.g. 5k\"\r\n\r\nThe dilemma is whether we should bother with this nuanced behavior by adding an `amount` field in the `permit2Params` struct (and potentially add a new check in `_transferAndApprove` that ensures that the permit amount is greater than or equal (`>=`) the transfer amount).\r\n\r\nI'm personally undecided. However, I think that it would definitely be helpful to add more explanatory comments in the `_transferAndApprove` function and the `Permit2Params` struct, in order to make the role of `amount` explicit.\r\n\r\n_Side note: we are not in a hurry with making this decision - the target is a contract that be easily upgraded (thankfully!), so we could support this behavior in a future release of the periphery system._","createdAt":"2023-05-12T21:14:38Z","labels":[],"number":53,"repository":"sablier-labs/v2-periphery","state":"closed","title":"A little story about Permit2 amounts","type":"discussion","updatedAt":"2023-05-17T19:04:06Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/53"},{"author":"andreivladbrg","body":"In the current version of the target contract I've implemented the following batch create functions:\r\n- `batchCreateWithDurations`\r\n- `batchCreateWithRange`\r\n- `batchCreateWithDeltas`\r\n- `batchCreateWithMilestones`\r\n\r\nShould we also implement functions such as `batchCreateWithDurationsAndDeltas` and `batchCreateWithRangeAndMilestones`?","createdAt":"2023-03-21T14:09:06Z","labels":[],"number":20,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Should we implement more batch create functions?","type":"discussion","updatedAt":"2023-05-11T19:33:11Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/20"},{"author":"andreivladbrg","body":"During our last call, we discussed using Permit2 and we pretty much agreed that it would be a good option. However, I have a question: are we planning to require all users to approve the Permit2 contract, or will we provide an option to approve our contracts? A user might not trust Permit2.\r\n\r\nWe could implement two different versions of the create function: `create` and `permit2Create`. Although, this may confuse some users and require additional information on our end. \r\n\r\nFor maximum clarity this pattern would be used only for the target contract, the core does not integrate Permit2: \r\nuser --> proxy --> target --> core\r\n\r\nRegarding using Permit2: it offers a more user-friendly experience in the DeFi ecosystem (e.g. allowing users to create streams without needing to approve if they've already done that on other platform), there is also the risk of potential loss if the Permit2 contract were to be hacked. It's worth noting that Uniswap has not experienced any such incidents in the past.\r\n\r\nCheck this [link](https://github.com/dragonfly-xyz/useful-solidity-patterns/tree/main/patterns/permit2) for a great explanation.\r\n\r\nWhat do you guys say?","createdAt":"2023-02-22T19:21:08Z","labels":[],"number":13,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Should we support both `Permit2` and traditional ERC-20 approvals?","type":"discussion","updatedAt":"2023-05-11T19:27:25Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/13"},{"author":"PaulRBerg","body":"## Problem Situation\r\n\r\nIt is not possible to batch multiple function calls in one Ethereum transaction. This limitation might be lifted when [Account Abstraction](https://blog.pantherprotocol.io/ethereum-account-abstraction-everything-you-need-to-know/) gets added at the protocol level, but AA will [take years](https://twitter.com/lightclients/status/1623704179737862145) to be implemented. Solutions like [PRBProxy](https://github.com/PaulRBerg/prb-proxy) and [DSProxy](https://github.com/dapphub/ds-proxy) have emerged as interim solutions to this current limitation of the Ethereum protocol.\r\n\r\nInternally, we have toyed with the prospect of using the proxy approach for quite some time now, but we have decided to let go of it in [a recent discussion](https://github.com/sablierhq/v2-periphery/discussions/1). The rationale was that the proxy was unnecessary for the batch create function.\r\n\r\nHowever, more recent discussions have led us to realize that other features may only be implemented with a proxy mechanism, or it would be much easier to implement them with a proxy. For instance, see the discussion in https://github.com/sablierhq/v2-core/discussions/331 regarding stream edits, which can only be implemented in the existing contracts by having a function that batches a call to `cancel` and a call to a create function. I have recently opened a [draft PR](https://github.com/sablierhq/v2-core/pull/337) that takes a first stab at implementing this in `v2-core`, but I have done it somewhat grudgingly. Stuffing too much logic in the \"core\" contracts gnaws away the underlying reason why we named the way we did. Composing functions doesn't sound like something belonging to a \"core\". Thus, I think we have a \"crisis of identity\" in the `v2-core` repository, and my goal with this post is to have us re-consider the proxy approach.\r\n\r\n## Feature Table\r\n\r\nSome features can easily be implemented without the proxy, others can be implemented without the proxy but require us to jump through hoops, and finally, others can only be implemented with the proxy (while still providing a decent UX to our users).\r\n\r\n| **Feature**                                                     | **Proxy**        | **Without Proxy** |\r\n| :-------------------------------------------------------------- | :--------------- | :---------------- |\r\n| Function `createMultiple` (single asset)                        | ✅ Doable (easy) | ✅ Doable (easy)  |\r\n| Function `createMultiple` (multiple assets)                     | ✅ Doable (easy) | ⚠️ Doable (hard)  |\r\n| Function `cancelAndCreate` in the same contract                 | ✅ Doable (easy) | ✅ Doable (easy)  |\r\n| Function `cancelAndCreate` across contracts                     | ✅ Doable (easy) | ❌ Not doable     |\r\n| Function `cancelMultipleAndCreateMultiple` in the same contract | ✅ Doable (easy) | ⚠️ Doable (hard)  |\r\n| Function `cancelMultipleAndCreateMultiple` across contracts     | ✅ Doable (easy) | ❌ Not doable     |\r\n| Migration to v2.x                                               | ✅ Doable (easy) | ❌ Not doable     |\r\n| Migration to v3 (yes, you read it right)                        | ✅ Doable (easy) | ❌ Not doable     |\r\n| Native asset payments (ETH)                                      | ✅ Doable (easy) | ❌ Not doable     |\r\n| Permit2                                                         | ✅ Doable (easy) | ⚠️ Doable (hard)  |\r\n| Tokenized Vaults (ERC-4626)                                     | ✅ Doable (easy) | ⚠️ Doable (hard)  |\r\n\r\n## Comparison\r\n\r\nHere are the pros and cons of using the proxy approach, ordered by significance (the most significant points are at the top).\r\n\r\n### Pros\r\n\r\n1. Ability to migrate streams from V2.0 to V2.x with one zap (instead of N txs).\r\n    - This is useful not just for new feature upgrades, but also for potential bug fixes.\r\n    - Long shot, but the migration may not be limited to just v2.x; with the proxy approach, migrating stream to the v3 chain via a bridge would also be possible.\r\n2. Support for native asset payments (e.g. ETH, MATIC) via `wrapEthAndDoAction` functions (see this [example](https://github.com/hifi-finance/hifi/blob/f1b338ba94b765c829117969dfa7d5cd29b4d38d/packages/proxy-target/contracts/HifiProxyTarget.sol#L518-L526) from the Hifi repository).\r\n3. Support for cross-contract interactions (e.g. canceling a linear stream and creating a pro stream).\r\n4. One ERC-20 approval for *all* future interactions with the protocol (e.g. no need to separately approve the linear and pro contracts).\r\n5. Dead easy support for [`Permit2`](https://uniswap.org/blog/permit2-and-universal-router).\r\n6. Ability to delegate the account management to a third-party via PRBProxy's [envoy<>target access-control system](https://github.com/PaulRBerg/prb-proxy/blob/7d5526206b4c6c11f16e7929f4c05603ead75713/src/PRBProxy.sol#L128-L135). This may be useful for automating withdrawals (a really nice solution to the problems discussed in https://github.com/sablierhq/v2-core/discussions/39 and https://github.com/sablierhq/v2-core/discussions/110).\r\n7. Solves the identity crisis problem explained above.\r\n8. Cleaner core contracts.\r\n    - The `cancelAll` function could be moved to a proxy target (the recipient would lose access to this function, but this sounds okay with me, given the benefit of a cleaner core).\r\n    - The `cancelAndCreate` functions could be implemented in a proxy target.\r\n9. The proxy would have a \"centralizing\" effect on our implementations: the `BatchStream` periphery contract would become a proxy target, and we may also be able to use the proxy approach for the [airstream contract](https://github.com/sablierhq/v2-airstream).\r\n10. Using the proxy is in line with good programming principles, such as separation of concerns\r\n11. Broadly speaking, we would get the ability to add certain new features without modifying the core.\r\n\r\n### Cons\r\n\r\n1. Increased development time for the frontends and the subgraphs.\r\n2. Manually canceling stream would be more difficult for senders, because the proxy would be the sender of the stream. The sender would need to be a sophisticated user who knows how to ABI encode Ethereum txs.\r\n3. Higher upfront deployment cost for senders on Ethereum Mainnet.\r\n4. [Worse developer experience](https://twitter.com/PaulRBerg/status/1346396518450950146) when debugging reverted txs.\r\n5. Increased audit cost due to the need to audit PRBProxy.\r\n    - This may be a moot point, however, because if we want to implement any of the features from the table above, that code would have to be audited, too. The only extra assumption would be the security of the `execute` function of the proxy itself. Still, since the proxy has many users, we would get some shared security.\r\n\r\n## Sender vs Recipient\r\n\r\nTo avoid doubt, I wish to state that the discussion here applies only to senders. It is not practical to use the proxy approach for recipients, due to the following reasons:\r\n\r\n- The NFT functions would become unusable.\r\n- Recipients would only be able to claim via our UI.\r\n- Recipients are typically less well-off than senders (the deployment cost of the proxy might be a deterrent for recipients).\r\n\r\n## My Proposal\r\n\r\nGiven that so many features are impossible to implement without the proxy, and others are difficult to implement without it, I am now firmly in favor of using the proxy approach.  The pros outweigh the cons. If Maker, Balancer, and DeFiSaver managed to get away with it (in spite of the cons), we should be able to do it, too.\r\n\r\n@razgraf and @gavriliumircea - I am keen to hear your thoughts on this.","createdAt":"2023-02-11T14:02:04Z","labels":[],"number":11,"repository":"sablier-labs/v2-periphery","state":"closed","title":"To proxy or not to proxy","type":"discussion","updatedAt":"2023-05-11T19:19:07Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/11"},{"author":"PaulRBerg","body":"## Problem Situation\r\n\r\nThe cancel function in `v2-core` can be called by either the sender or the recipient:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/3883400911f5ec3a65f7a06deb0320e1835dd5c4/src/SablierV2LockupLinear.sol#L293\r\n\r\nOn cancellation, funds are auto-transferred to the sender and the recipient. In a non-proxy world, this wasn't an issue since the sender of the stream would receive the tokens in their typical wallet. But with a proxy, this is problematic because the funds would remain in the proxy itself. This is a con of the proxy approach I omitted when I wrote https://github.com/sablierhq/v2-periphery/discussions/11.\r\n\r\n## Solutions\r\n\r\n1. Allow only the sender to cancel.\r\n2. Implement a page in the UI that lets senders see their claimable balance from the proxy, nothing that we might have to do this at any rate. This is similar to providing a wrap/ unwrap UI for WETH, because there can be many causes for having funds locked in the proxy, e.g. bugs in proxy targets or rounding errors.\r\n3. Write a special-purpose target contract that will be called via [`deployAndExecute`](https://github.com/PaulRBerg/prb-proxy/issues/62) in the BUI. This target would install a [special plugin](https://github.com/PaulRBerg/prb-proxy/blob/86dc90d18e6e8f92a16c6ec4dd6a97dd6d5c4a9d/src/interfaces/IPRBProxyPlugin.sol), which would implement the [`ISablierV2LockupSender`](https://github.com/sablierhq/v2-core/blob/main/src/interfaces/hooks/ISablierV2LockupSender.sol) interface, auto-transferring the `senderAmount` to the proxy owner.\r\n\r\n## My Thoughts\r\n\r\nThe first option is the easiest, but I am uncomfortable taking the cancel functionality away from recipients. This is in the category of permissionless \"escape hatches\" that can help prevent accidental losses of funds.\r\n\r\nThe second option would demand more development cycles from the frontend team, but it would provide our users with a utility that would be super useful to PRBProxy owners.\r\n\r\nThe third option would be the most elegant, but it would demand more effort from the contracts team. In the UI, little would change; they'd just have to call `deployAndExecute` instead of `deploy`. The plugin would run autonomously every time a recipient cancels a stream, and the funds would be auto-transferred to the proxy owner.\r\n\r\n## Your Thoughts\r\n\r\nWDYT?","createdAt":"2023-03-07T12:01:28Z","labels":[],"number":16,"repository":"sablier-labs/v2-periphery","state":"closed","title":"How to handle cancellations triggered by recipients","type":"discussion","updatedAt":"2023-05-11T19:04:40Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/16"},{"author":"razgraf","body":"The batch-create functions will target linear/dynamic contracts. The question becomes: should we store those addresses as **local variables** (through the constructor and/or getters/setters) or pass them as **function arguments**.\r\n\r\n@andreivladbrg already implemented a change from variables to arguments (https://github.com/sablierhq/v2-periphery/commit/3349d80c58677b8556b82bf08dbb854b5438e0a0) which leaves room for us to use the periphery with any matching deployment of the protocol. Having in mind that both the app and the subgraph have already been designed to support multiple deployments, this periphery update would be following that theme.\r\n\r\n@PaulRBerg brought the idea of gas optimizations in discussions, related to the case where addresses are stored directly into the contract (tbd: immutable or not).","createdAt":"2023-02-01T12:26:15Z","labels":[],"number":10,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Defining the target contract (constant vs. argument)","type":"discussion","updatedAt":"2023-04-18T16:52:31Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/10"},{"author":"PaulRBerg","body":"We will write [PRBProxy](https://github.com/paulrberg/prb-proxy)-powered target contracts to batch-create streams.\r\n\r\nThe question is: how to implement the batch-create streaming function without reverting the entire tx if a subset of the streams fail to be created?","createdAt":"2022-07-18T17:51:36Z","labels":[],"number":6,"repository":"sablier-labs/v2-periphery","state":"closed","title":"How should we implement the target contract to make it possible to batch-create streams without reverting the entire tx if a subset of the streams fail to be created?","type":"discussion","updatedAt":"2023-03-17T11:24:50Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/6"},{"author":"razgraf","body":"Should we support tokens that have `permit` enabled?\r\n\r\nPermit has provided a really nice UX improvement to the old and clunky allowance system. As per [EIP-2612 ](https://eips.ethereum.org/EIPS/eip-2612) and the example implementation from [OpenZeppelin](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#ERC20Permit) it doesn't look like we would have to make very intrusive updates to the contracts.\r\n\r\nFrom initial research, we would have to implement `createWithPermit` / `createWithDurationAndPermit` methods that take in 4 additional parameters (a deadline and 3 arguments of the elliptic curve based signature). These method would perform an extra call to the token's permit functionality before reaching the internal `_create` call.\r\n\r\n```\r\n IERC20Permit(address(asset)).permit(msg.sender, address(this), assets, deadline, v, r, s);\r\n ```\r\n","createdAt":"2022-08-11T12:21:26Z","labels":[],"number":5,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Support for EIP-2612 (Permit)","type":"discussion","updatedAt":"2023-03-17T11:24:59Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/5"},{"author":"razgraf","body":"During our last conversations we touched upon the need for chains of transactions. Some examples would be:\r\n\r\n- wrap/unwrap utility assets (e.g. ETH/WETH) + deposit/withdraw\r\n- wrap/unwrap vault assets (e.g. you deposit cUSDC but we wrap it in vault-cUSDC) + deposit/withdraw\r\n- any other combination of at least 2 atomic actions\r\n\r\nThe requirements for these chains to exist might affect (1) the methods we need to implement (see sablierhq/v2-core#39 - things like `onBehalfOf` so that a contract can interact on behalf of a sender) and (2) the logic of our data structures.\r\n\r\nI'm opening this discussion to reference any interesting architecture or methodology that might help us achieve these v2-periphery functionality and see what updates we need to make to v2-core as a result.\r\n","createdAt":"2022-06-14T12:14:09Z","labels":[],"number":3,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Best practices for chaining transactions","type":"discussion","updatedAt":"2023-03-17T11:25:06Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/3"},{"author":"razgraf","body":"During a recent face-2-face discussion (@PaulRBerg @andreivladbrg) we've touched upon allowances and which contracts the user will direct their transactions to.\r\n\r\n### Option 1: Direct-to-contract\r\nUsers will have to call the `linear`, `pro` and `periphery` contracts and grant allowances individually, for each contract. While this may raise the gas cost (at least on mainnet) and friction for Sablier users, it provides more security and a cleaner debugging experience (block explorers can decode data better). Moreover, the app is already engineer with this flow in mind, so there's no refactoring cost involved.\r\n\r\n### Options 2: Through a proxy contract\r\nUsers will bundle their transaction calldata and send it to a (PRB)Proxy contract. In turn, this contract will direct each transaction to the correct target contract. Allowance will have to be granted only once, to the proxy, which will become the \"msg.sender\" for all created streams. A proxy will make sense only in the case when every call to the protocol is done through this proxy, such that allowance and interaction costs are minimal. It does however enforce worse DX/UX as transactions will be harder to decode (both visually and technically).\r\n\r\nThe soft consensus for this is to keep working with Option 1.","createdAt":"2023-01-27T18:40:25Z","labels":[],"number":1,"repository":"sablier-labs/v2-periphery","state":"closed","title":"How should our users interact with the Sablier protocol (direct vs. through proxy)","type":"discussion","updatedAt":"2023-03-17T11:25:14Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/1"},{"author":"andreivladbrg","body":"I started working on the group stream functionality and while implementing I realised that if we are going to allow multiple assets it would be very inefficient because we would have to make the erc-20 transfer twice for each of the struct's (params) `grossDepositAmount` variable. Also at the UI level the user must approve each one.\r\n\r\nuser --> periphery --> core\r\n\r\nIf we are going to limit the create multiple function to have only one asset it will be much more efficient because it will be possible to make only one erc-20 transfer towards the periphery contract.\r\n\r\nThe function looks like this:\r\nhttps://github.com/sablierhq/v2-periphery/blob/5aaaf8fff5ac896e108212d66794838cceaf3c5f/src/interfaces/IBatchStream.sol#L34-L38\r\n\r\nWhat do you think? Should we allow multiple assets? Or should we implement both of these functions?","createdAt":"2023-01-30T11:11:50Z","labels":[],"number":8,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Batch stream for only one asset","type":"discussion","updatedAt":"2023-03-17T11:25:19Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/8"},{"author":"PaulRBerg","body":"A user in our Discord server asked for this feature. Their use case was a DAO context - instead of having to create multiple proposals, they would prefer to create just one, and provide one deposit amount, and then Sablier to take that and create multiple streams.\r\n\r\n<img width=\"1331\" alt=\"Screen Shot 2022-07-20 at 12 56 18 AM\" src=\"https://user-images.githubusercontent.com/8782666/179855812-a4a75105-7bc1-4da7-87fc-62ace5dbd8d8.png\">\r\n\r\nWe should very easily be able to do this via a [PRBProxy](https://github.com/paulrberg/prb-proxy)-enabled target contract, or potentially some dedicated router in the periphery so that DAOs don't have to deploy a PRBProxy.\r\n\r\nAlso relevant: [0xsplits.xyz](https://www.0xsplits.xyz/). Cc @razgraf.","createdAt":"2022-07-19T21:59:59Z","labels":[],"number":4,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Split deposit in multiple streams","type":"discussion","updatedAt":"2023-03-17T11:25:23Z","url":"https://github.com/sablier-labs/v2-periphery/discussions/4"},{"author":"smol-ninja","body":"For DAOs, pausing a stream at a specific timestamp requires a coordination among all the signers at the same time, to ensure that Flow stream doesn't accrue unwanted debt between the intended pause time and when the stream resumes again.\r\n\r\nIn https://github.com/sablier-labs/interfaces/discussions/1415, we considered the possibility of implementing `voidTime` onchain, but may a more practical solution would involve the ability to add `pauseTime` onchain. Pausing the stream is a part of an active stream lifecycle whereas void is the end of it so imo the timestamp is more important in `pause` than `void` (we can consider having it in both though).\r\n\r\nStarting this discussion to track similar requirements.\r\n\r\n---------\r\n\r\nYieldNest on TG had a requirement which could be solved by adding a pause time. \r\n\r\n<img width=\"366\" alt=\"Screenshot 2025-06-23 at 15 00 12\" src=\"https://github.com/user-attachments/assets/3baad775-6a4a-44c5-b0d0-3be4e22e9015\" />\r\n<img width=\"365\" alt=\"Screenshot 2025-06-23 at 15 00 24\" src=\"https://github.com/user-attachments/assets/2bba6175-3c17-4cf7-986f-7ec9cba0e965\" />","createdAt":"2025-06-23T14:10:19Z","labels":[],"number":452,"repository":"sablier-labs/flow","state":"open","title":"Add `pauseTime` to `pause` function","type":"discussion","updatedAt":"2025-06-23T18:52:11Z","url":"https://github.com/sablier-labs/flow/discussions/452"},{"author":"PaulRBerg","body":"Received a feature request for this from a user. They were originally looking for permissioned withdrawals, but we ended up talking about hooks - they said hooks would have worked, too.\r\n\r\n<img width=\"350\" alt=\"image\" src=\"https://github.com/user-attachments/assets/60a953e0-b3d8-4ef4-8739-3ba4f52abc5c\" />\r\n\r\nWDYT @sablier-labs/evm?","createdAt":"2025-06-05T16:08:02Z","labels":[],"number":450,"repository":"sablier-labs/flow","state":"closed","title":"Implementing hooks for Flow streams","type":"discussion","updatedAt":"2025-06-11T12:11:06Z","url":"https://github.com/sablier-labs/flow/discussions/450"},{"author":"maxdesalle","body":"Have the ability to increase the payment rate of a stream within a predefined time window, effectively acting as a bonus.\r\n\r\nSay your monthly salary is 1K a month, your employer could \"boost\" one month and increase the payment rate for that month to 2K, for example, offering you a 1K bonus. Currently this is technically doable by manually increasing the payment rate and then manually decreasing it again exactly a month later, but it requires coordination, etc. it's not a good user experience.\r\n\r\n---\r\n\r\n@sablier-labs/engineers ","createdAt":"2025-06-03T03:11:34Z","labels":[],"number":449,"repository":"sablier-labs/flow","state":"closed","title":"Support payroll bonuses","type":"discussion","updatedAt":"2025-06-04T11:50:56Z","url":"https://github.com/sablier-labs/flow/discussions/449"},{"author":"smol-ninja","body":"Flow follows the white-box testing approach. \r\n\r\n### From ChatGPT\r\n\r\nWhat is white-box testing?\r\n> White-box testing requires understanding the internal structure of the code. It focuses on code paths, loops, and conditions, ensuring that all parts of the code work as expected. White-box testing is often used for unit and integration testing where in-depth knowledge of the code is necessary.\r\n\r\nShould testing of a code be dependent on the internal logic/implementation?\r\n> No, testing of a code should not depend on the internal logic or implementation. Instead, it should focus on testing the external behavior of the code—this is called black-box testing. Tests should validate that the code meets the specified requirements and produces the expected results for given inputs, regardless of how the code is implemented internally. This makes the tests resilient to changes in the code structure, as long as the external behavior remains consistent.\r\n\r\nWhat is black-box testing?\r\n> Black-box testing focuses on testing the external behavior of the software without knowledge of the internal code. It checks whether the input produces the expected output without considering the actual implementation. This method is useful for functional testing and UI testing, where you are more interested in how the system behaves rather than how it is built\r\n\r\nCurrently, all Flow tests (concrete, fuzz, invariant) follow white-box testing, which means if we change an internal implementation of a function without affecting the APIs (inputs, outputs) and expected returned values, we would also be required to change a lot of tests. IMO a good testing system should test for the behavior of the system and not rely on the internal implementation of the functions.\r\n\r\nA good approach would be to have white-box testing in concrete whereas black-box testing in fuzz and invariant, though more knowledge is needed in this domain.\r\n\r\nSo, starting this discussion to brainstorm on these lines, gather resources, understand it better and eventually refactor our tests to use a mix of black and white box techniques.\r\n\r\n### Resources\r\n- https://chatgpt.com/share/670e4dd3-e2e8-8000-8dd2-d372b26a5761\r\n\r\ncc @sablier-labs/engineers as it may be relevant to Solana and other repos.","createdAt":"2024-10-15T11:24:03Z","labels":[],"number":311,"repository":"sablier-labs/flow","state":"closed","title":"Black-box testing vs White-box testing","type":"discussion","updatedAt":"2025-05-02T14:17:32Z","url":"https://github.com/sablier-labs/flow/discussions/311"},{"author":"PaulRBerg","body":"Do we still need this? @sablier-labs/evm\r\n\r\nhttps://github.com/sablier-labs/flow/blob/ba0d774eeb6827e5109ae790407cdc69431e0fa6/remappings.txt","createdAt":"2025-04-08T12:41:32Z","labels":[],"number":430,"repository":"sablier-labs/flow","state":"closed","title":"Can't we remove the remappings file?","type":"discussion","updatedAt":"2025-04-09T23:53:57Z","url":"https://github.com/sablier-labs/flow/discussions/430"},{"author":"PaulRBerg","body":"I think that the [DIAGRAMS](https://github.com/sablier-labs/flow/blob/staging/DIAGRAMS.md) should all be moved to the docs. There's no point in maintaining two documentations for Flow.\r\n\r\ncc @sablier-labs/evm","createdAt":"2025-03-24T20:20:25Z","labels":[],"number":412,"repository":"sablier-labs/flow","state":"closed","title":"Why are we still keeping diagrams in this repository?","type":"discussion","updatedAt":"2025-03-28T00:47:13Z","url":"https://github.com/sablier-labs/flow/discussions/412"},{"author":"maxdesalle","body":"Feature request from power user Micah\r\n![CleanShot 2024-12-18 at 14 12 58@2x](https://github.com/user-attachments/assets/c35b3ae7-b060-4762-90d2-15df1aaf560e)\r\n","createdAt":"2024-12-18T19:13:39Z","labels":[],"number":352,"repository":"sablier-labs/flow","state":"open","title":"Unified balance","type":"discussion","updatedAt":"2025-03-06T20:24:35Z","url":"https://github.com/sablier-labs/flow/discussions/352"},{"author":"andreivladbrg","body":"Also discussed here: [https://github.com/sablier-labs/flow/issues/328](https://github.com/sablier-labs/flow/issues/328).\r\n\r\nInitially, we decided not to remove them to have a smaller diff between the current release and the upcoming one, and to see if we still want to experiment with them. No plans have been made for them yet.\r\n\r\nThe con of keeping them: more work when it comes to changes to the `withdraw` function and maintenance of logic that is very unlikely to be used.\r\n\r\nSo, should we remove them in the `1.2.0` version?\r\n@sablier-labs/solidity ","createdAt":"2025-01-09T16:23:55Z","labels":[],"number":365,"repository":"sablier-labs/flow","state":"closed","title":"Should we remove the fees in the stream's token?","type":"discussion","updatedAt":"2025-01-09T21:15:04Z","url":"https://github.com/sablier-labs/flow/discussions/365"},{"author":"PaulRBerg","body":"Hey @sablier-labs/solidity, I've a question about https://github.com/sablier-labs/flow/issues/351.\r\n\r\nCan we enable the snapshot time to be in the future, not just in the past?\r\n\r\nThis would make it possible to schedule payrolls in advance.","createdAt":"2025-01-08T09:40:51Z","labels":[],"number":364,"repository":"sablier-labs/flow","state":"closed","title":"Can we enable the snapshot time to be in the future?","type":"discussion","updatedAt":"2025-01-08T12:24:30Z","url":"https://github.com/sablier-labs/flow/discussions/364"},{"author":"razgraf","body":"Fees for flow are now considered for the exit-points, specifically `withdraw`, instead of the old fee-model on `create`. Given the `withdraw` method is public, broker fees have been excluded from the mix, as passing them as a parameter could have been front-run (anyone can set themselves as the broker).\r\n\r\nI'd like to propose adding the broker back, but setting it as an immutable parameter at stream creation. \r\n\r\nThis way, when the stream is instantiated, the creator can pass an address and percentage as a \"broker\". This will be used at `withdraw` time, in perpetuity. \r\n\r\nGiven flow streams are, by nature, meant to be long term, this can act as a big incentive for integrators to attract stream creators.\r\n\r\nRelated: #214, https://github.com/sablier-labs/v2-core/issues/1033\r\n\r\n> [!NOTE]\r\n>\r\n> As we're quite ready for audits with flow, we can discuss this for an upcoming version of the protocol, post-launch.","createdAt":"2024-09-17T09:07:54Z","labels":[],"number":242,"repository":"sablier-labs/flow","state":"closed","title":"Add broker fees to flow","type":"discussion","updatedAt":"2025-01-08T09:39:04Z","url":"https://github.com/sablier-labs/flow/discussions/242"},{"author":"smol-ninja","body":"@razgraf [proposed an idea](https://sablier.slack.com/archives/CT3NXSNMS/p1736153965028929) to include a token transfer function (an `ERC20.transfer` wrapper) in the contract. The UI can then use `batch` for transfer + create-stream actions.\n\nThe goal is to enable new use cases such as \"payroll setup + initial bonus\" where sender wants to transfer some tokens directly to the recipient while creating the stream.\n\nRFC @sablier-labs/solidity.","createdAt":"2025-01-06T09:32:52Z","labels":[],"number":360,"repository":"sablier-labs/flow","state":"closed","title":"Add an ERC20.transfer wrapper","type":"discussion","updatedAt":"2025-01-06T12:48:04Z","url":"https://github.com/sablier-labs/flow/discussions/360"},{"author":"smol-ninja","body":"RustyRabbit (from Cantina) suggested to add a feature to be able to set stream \"non-refundable\".\r\n\r\n### Some use cases\r\n- Create a non-refundable stream so that other people can participate in funding without having to trust the sender\r\n- Gitcoin grants. Imagine Gitcoin using Flow to create streams towards grantee which can be funded by anyone. \r\n\r\nStarting this discussion to track similar feature requests from Flow users.","createdAt":"2024-10-14T19:41:22Z","labels":[],"number":308,"repository":"sablier-labs/flow","state":"open","title":"Non-refundable streams","type":"discussion","updatedAt":"2024-12-19T15:16:14Z","url":"https://github.com/sablier-labs/flow/discussions/308"},{"author":"maxdesalle","body":"![CleanShot 2024-12-12 at 10 25 37@2x](https://github.com/user-attachments/assets/874a70b5-b5d2-4c7c-bc3c-4d18cb8c35f6)\r\n","createdAt":"2024-12-12T15:25:53Z","labels":[],"number":347,"repository":"sablier-labs/flow","state":"closed","title":"Feature request: optionally have a start date for Flow streams","type":"discussion","updatedAt":"2024-12-19T13:24:38Z","url":"https://github.com/sablier-labs/flow/discussions/347"},{"author":"maxdesalle","body":"Would be great if users had the ability to both pause a stream and restart it at a specific time. The use case for payroll, for example, would be to stop the stream at the exact time an employee is planned to leave the company, for example. Or if an employee goes on an unpaid vacation, the employer could plan for that by setting the pause date to the first day of the employee's vacation and the restart date on the first day they get back to work from their vacation.\r\n\r\n@sablier-labs/engineers","createdAt":"2024-12-16T23:35:54Z","labels":[],"number":350,"repository":"sablier-labs/flow","state":"open","title":"Ability to pause and restart a stream at a specific date","type":"discussion","updatedAt":"2024-12-18T13:12:10Z","url":"https://github.com/sablier-labs/flow/discussions/350"},{"author":"smol-ninja","body":"As we are nearing launch of Flow, I have prepared a list of task (inspired from @razgraf's https://github.com/sablier-labs/v2-interfaces/discussions/1180):\r\n\r\n### Pre deployments\r\n\r\n- [x] Refactor and merge https://github.com/sablier-labs/examples/pull/37\r\n- [x] Refactor and add [Integration templates](https://github.com/sablier-labs/sablier-v2-integration-template/issues) for Flow. Resolved in a [new repo](https://github.com/sablier-labs/flow-integration-template).\r\n- [x] Include Codehawk reports in the [audits repo](https://github.com/sablier-labs/audits). Resolved in [#12](https://github.com/sablier-labs/audits/pull/12).\r\n- [x] Merge https://github.com/sablier-labs/v2-deployments/pull/14\r\n- [x] Publish npm package: https://www.npmjs.com/package/@sablier/flow\r\n\r\n### Post deployments\r\n- [x] Merge https://github.com/sablier-labs/v2-deployments/pull/12 in deployments repo\r\n- [x] Add deployment addresses in docs: https://github.com/sablier-labs/docs/pull/201\r\n- [x] Merge https://github.com/sablier-labs/flow/pull/345\r\n- [x] Rename `v2-deployments` to `deployments` and update docs accordingly\r\n\r\ncc @sablier-labs/solidity.","createdAt":"2024-11-09T19:31:34Z","labels":[],"number":329,"repository":"sablier-labs/flow","state":"closed","title":"Flow launch preparations","type":"discussion","updatedAt":"2024-12-12T13:30:34Z","url":"https://github.com/sablier-labs/flow/discussions/329"},{"author":"PaulRBerg","body":"We've recently decided to charge [ETH fees](https://github.com/sablier-labs/v2-core/issues/1076) instead of [protocol fees](https://github.com/sablier-labs/v2-core/issues/1034) in Lockup. ETH fees make much more sense for Lockup streams per all the reasons provided [here](https://github.com/sablier-labs/company-discussions/discussions/72#discussioncomment-11115807).\r\n\r\nNow, for Flow streams, the fee is paid in stablecoin. This is not bad, but I wonder if charging in ETH wouldn't be better?\r\n\r\n1. More consistency across our fee models\r\n2. Less psychological resistance; the user has to pay a fee in ETH anyway (for the gas), so charging $1 in ETH should feel less pressuring than paying a *separate* fee in USDC (from the recipient's salary)\r\n3. Charging in ETH means that we are charging the account that withdraws, not the recipient (these accounts might not be the same)\r\n\r\nNotes:\r\n\r\n- I'm not suggesting to change the implementation now because doing so would cancel the validity of the security audits.\r\n- We will start charging in ~March anyway, so changing the implementation in Flow now would be overkill.\r\n\r\nCc @sablier-labs/everybody for feedback.","createdAt":"2024-11-06T16:59:33Z","labels":[],"number":327,"repository":"sablier-labs/flow","state":"closed","title":"Charging ETH fees instead of stablecoin fees","type":"discussion","updatedAt":"2024-11-25T13:22:10Z","url":"https://github.com/sablier-labs/flow/discussions/327"},{"author":"smol-ninja","body":"## Context\r\n@razgraf pointed out in the Slack that [refund would very likely revert](https://github.com/sablier-labs/flow/blob/main/src/interfaces/ISablierFlow.sol#L327) if it's called with the `refundableAmountOf`. The `refundableAmountOf` returns the maximum amount that a user can withdraw, and by the time transaction is mined in the block, this amount would have already exceeded the maximum amount that can be refunded at the block timestamp (due to streaming). This makes it impossible for a user to withdraw the max amount until dealing with a paused stream.\r\n\r\n`batch` can also not be used in this case since there is no way to enter the returned value of one function as the input parameter of another. We will think about improving `batch` in the future release. But for now three simple solutions have been discussed on Slack to resolve this.\r\n\r\n## Solutions\r\n\r\n### Solution 1\r\nImplement `refundMax` that implicitly calculates the max refundable amount.\r\n\r\n### Solution 2\r\nReplace `amount` input with a `percentage` in `refund` function. So if 50% is provided as input, a refund of 50% of the max refundable will be processed.\r\n\r\n### Solution 3\r\nThe `refund` can be modified to allow `maxAmount` instead of `amount` to signal how much maximum the user wants to refund. So, in cases where the maximum refundable amount goes down by the time the tx is included in a block, the function would still make a refund but with the max amount at that time.\r\n\r\nThese two solutions have been discussed on the Slack. Feel free to share more ideas. cc @sablier-labs/engineers","createdAt":"2024-10-28T09:53:42Z","labels":[],"number":322,"repository":"sablier-labs/flow","state":"closed","title":"Dealing with refunds of maximum amount","type":"discussion","updatedAt":"2024-10-28T12:03:38Z","url":"https://github.com/sablier-labs/flow/discussions/322"},{"author":"smol-ninja","body":"I have been brainstorming some ideas by myself to implement into Flow. An open-ended streaming protocol opens up new use cases such as payroll which requires a different design than what we have in v2 and Airstreams. \r\n\r\nI'd love to have comments from @sablier-labs/everybody on these.\r\n\r\nAllowing anyone to initiate withdrawal on behalf of recipients\r\n-----\r\nMotivation\r\n- Recipients will have more flexibility to choose withdrawal addresses. The address could belong to an exchange, a Safe or any crypto wallet that is not integrated into the interface.\r\n- Remove the need for all recipients to interact with the Sablier. \r\n- A recipient can initiate withdrawals through a hot wallet while using a hardware wallet as a withdrawal address.\r\n\r\nCreate multiple streams\r\n------\r\nMotivation\r\n- A new user/corporation migrating to Sablier might wish to create multiple streams at once.\r\n\r\n**Question**: Should it be implemented into core contracts or periphery contracts? If yes, should I move `depositMultiple` to the periphery as well?\r\n\r\nBroke fees\r\n-----\r\nThis feature is similar to [v2-core](https://docs.sablier.com/concepts/protocol/fees#broker-fees) where third-party entities that interact on behalf of users can charge service fees.\r\n\r\nWithdraw from multiple streams\r\n-----\r\nMotivation\r\n- Allowing recipients to withdraw from multiple streams will save gas.\r\n- Stream sender or anybody can initiate withdrawals to stream recipients for multiple streams in one transaction.\r\n- Users can show interest in Sablier UI to allow Sablier to initiate withdrawals on behalf of users. This can lead to improved user experience.\r\n\r\nAllowing anyone to deposit into any stream\r\n---\r\n[`deposit`](https://github.com/sablier-labs/v2-open-ended/blob/main/src/SablierV2OpenEnded.sol#L179) allows anyone to deposit to a stream. It could be a useful feature for corporations where the stream is managed by one address while deposits come from different addresses (finance team, etc). \r\n\r\nOne disadvantage of this feature is if someone accidentally deposits into a stream (for ex. fat finger or entered an incorrect stream ID), those funds can only be withdrawn by the stream creator. \r\n\r\nSince this offers flexibilities for users, we can consider alternating approaches:\r\n\r\n1. The sender can whitelist addresses allowed to deposit into the stream.\r\n2. We can track depositor addresses along with the deposit. In the current model, a stream ID is specified during the deposit. If $\\text{depositAmount} \\leq \\text{refundableAmount} $, the depositor can claim back his deposit. So if someone accidentally deposits to the wrong stream, they can initiate withdrawal as soon as they realize it.\r\n\r\nThe sender deposits into a pool and then allocates to streams\r\n---\r\nMotivation\r\n- Currently, all streams created by a sender are mutually exclusive. This could lead to poor user experience when managing multiple streams as each stream requires managing its deposit. This is also gas expensive.\r\n- I propose a design where the sender can make a single deposit into a pool shared by all the streams created by him. (Inspired by Blur Pools). In Web2, this is similar to using the same credit card for multiple recurring payments.\r\n- Only the sender can get a refund from the pool.\r\n\r\nAnybody can deposit into a pool and then allocate to streams\r\n----\r\nSimilarly, anybody can deposit into a pool shared by all the whitelisted streams.","createdAt":"2023-12-08T01:04:51Z","labels":[],"number":7,"repository":"sablier-labs/flow","state":"closed","title":"Brainstorming ideas for Flow","type":"discussion","updatedAt":"2024-10-15T11:23:44Z","url":"https://github.com/sablier-labs/flow/discussions/7"},{"author":"razgraf","body":"I've noticed that Flow does not have any NFTs. For reference (and possibly debate), would you mind describing the problem and the reasoning behind this decision @andreivladbrg?","createdAt":"2024-04-08T12:45:07Z","labels":[],"number":34,"repository":"sablier-labs/flow","state":"closed","title":"Why are there no NFT-s?","type":"discussion","updatedAt":"2024-10-15T11:23:23Z","url":"https://github.com/sablier-labs/flow/discussions/34"},{"author":"smol-ninja","body":"**From Rustyrabit:**\r\n\r\nSo I see 3 separate issues:\r\n1. user wants a rate that cannot be achieved by RPS accuracy. Solution store the rate as amount and interval. This requires a lot of change though and probably not worth it.\r\n2. snapshotDebt is stored in decimals of the token which leads to a error/delay at each withdrawal. Solution: decrease the error/delay by storing it in 18 decimals regardless of the token’s decimals\r\n3. deciding the precision of the RPS based on the decimals of the token. Effectively you’re saying that for tokens with 18 decimals it is acceptable that they differ more from what the user wants (the incline that is) than for tokens with low decimals. This is because you’re assuming 1 wei of a high decimal token is worth less than 1 wei of a low decimal token. This assumption may not always be true.\r\n\r\nAs an example these are the values of 1 wei of each of these tokens vs their decimals:\r\n```\r\n $0,000_001                    = value of 1 wei of USDC ($1)        1e-6         6 decimals\r\n $0,000_6                      = value of 1 wei of WBTC ($60k)        6e-4         8 decimals\r\n $0,000_000_000_000_002_000    = value of 1 wei of WETH ($2k)        2e-15        18 decimals\r\n```\r\nAs you can see it doesn’t hold up when you compare WBT against USDC. WBTC has more decimals but is worth more per wei.\r\n\r\nFYI we also looked at the fact that the descaling is based on the decimals of the token as determined at the creation of the stream. If a token would change it’s decimals after creation of the stream it could cause problems. We didn’t find a way to exploit this though an any non-malicious token that alters their decimals is just a rebasing token and as such not supported.\r\n\r\n[Submission 1](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/11) [Submission 2](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/10) \r\n\r\n----------------\r\n\r\n**My comments:**\r\n\r\nNote that they are assuming that $0.01 loss per ~20-30 withdrawals is not something we should dismiss, whereas we considered it to be extremely small variation and thus not realistic. Should we defend using this argument? cc @PaulRBerg  @andreivladbrg\r\n\r\nTwo solutions being proposed:\r\n1. Store amount and the interval in which it is expected to be streamed. The check if the time passed is a multiple of “intervals” and if so,withdraw the full amount leaving no precision loss to the users.\r\n2. Store snapshotDebt as 18 decimal format to minimize the difference between the actual and expected.\r\n\r\nI like the first solution as it can mitigate the precision loss entirely. Given that (cc @razgraf) users will be entering his interest in the form of “tokens streamed per interval” instead of exact rps , it makes sense to store it as it is to align with the users expectation. Thought it will be more effort and can affect our timeline for public audit and launch. We can also start a discussion out of it for for Flow’s future release.\r\n\r\nSecond solution, though, seems affordable given the timeline. But, $0.01 is too small, and I think that may still exist even after storing sd in 18 decimal format, it might end up being offering no solution. Given the fact that BTC is $60k now which can be $600k in a month and then it can end up being $0.01 loss to users even with sd as 18 decimals.\r\n\r\nThoughts?\r\n\r\ntagging @sablier-labs/engineers as the decision may affect users' UX.","createdAt":"2024-10-11T06:18:30Z","labels":[],"number":297,"repository":"sablier-labs/flow","state":"closed","title":"Rustyrabbit's comment on precision issue","type":"discussion","updatedAt":"2024-10-14T10:58:28Z","url":"https://github.com/sablier-labs/flow/discussions/297"},{"author":"andreivladbrg","body":"As per one of Rusty’s findings: https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/6\r\n\r\nSince the `deposit` function is publicly callable by anyone, it means that anyone can act as the depositor for any stream. The issue arises when a depositor wants to fund a stream but also guarantee that the recipient will receive all the funds. Currently, this guarantee is not possible.\r\n\r\nIMO we have three possible scenarios:\r\n1. Accept the current implementation and warn other depositors that the funds can be taken by the sender via `refund`\r\n2. Allow only the sender to call deposit\r\n3. Introduce a new variable (non refundable balance - shortly `nr_bal`) that tracks the balance deposited by non-senders \r\n   - the withdrawable amount then becomes: `min(bal + nr_bal, td)` \r\n\r\nBetween these, I would personally vote for either option 1 or 2.\r\n\r\nwdyt? @sablier-labs/solidity  @razgraf \r\n","createdAt":"2024-10-11T16:03:03Z","labels":[],"number":298,"repository":"sablier-labs/flow","state":"closed","title":"Should the senders be allowed to refund others deposits?","type":"discussion","updatedAt":"2024-10-15T14:44:52Z","url":"https://github.com/sablier-labs/flow/discussions/298"},{"author":"smol-ninja","body":"Original discussion: https://github.com/sablier-labs/flow/pull/290#discussion_r1790380236 created by @andreivladbrg.\r\n\r\n### Context\r\n- Refund and Withdraw are only functions allowed on voided streams.\r\n- We have an invariant that checks \"if a stream is voided, it must also be paused\"\r\n- `withdraw` tree has neither of `given paused` or `given voided` branches\r\n- `refund` only has `given paused` branch\r\n\r\n### What is the right approach?\r\n- Should we include both `paused` and `voided` branches in `refund` and `withdraw` concrete tests?\r\n- Should we add only `paused` branch, given that as per above invariant if its voided, it must also be paused?\r\n- Should we not include these branches at all given these functions don't check the paused or voided status of a stream?\r\n\r\nBased on our testing pattern, we do not include branches that are not a part of the implementation. So since neither of these functions check for paused or voided status, these branches should not be a part of it.\r\n\r\nThus starting this issue in the form of a discussion to understand what is the right approach here.","createdAt":"2024-10-07T16:39:40Z","labels":[],"number":294,"repository":"sablier-labs/flow","state":"open","title":"`paused` and `voided` branch in `refund` and `withdraw`","type":"discussion","updatedAt":"2024-10-10T14:46:56Z","url":"https://github.com/sablier-labs/flow/discussions/294"},{"author":"PaulRBerg","body":"This is an idea I first shared [here](https://github.com/sablier-labs/flow/discussions/271#discussioncomment-10801555) — not allowing `rps == 0` in the create function is not an objective necessity.\r\n\r\nUsers may want to set up the streams in advance, and fund them later.\r\n\r\nWhy not introduce a `adjustRatePerSecondAndDeposit` method to enable this behavior? Although, I think that the `batch` function can also do this, right?\r\n\r\nCC @sablier-labs/solidity","createdAt":"2024-10-01T08:29:58Z","labels":[],"number":278,"repository":"sablier-labs/flow","state":"closed","title":"Allow zero RPS in create function","type":"discussion","updatedAt":"2024-10-02T07:27:58Z","url":"https://github.com/sablier-labs/flow/discussions/278"},{"author":"andreivladbrg","body":"**Later edit:** This discussion is outdated, it still has relevant concepts but new updates have been added. Will open a new one as soon as I have new version completed. \r\n\r\n---\r\n\r\n## New features\r\n\r\n - Create streams for an indefinite period of time\r\n - Top ups, which are public (you can ask a friend to deposit money for you instead)\r\n - Withdraw funds from the stream as a sender, if available\r\n - No deposit is required at creation time, basically the sender collects \"debt\"\r\n - No deposit amount limits\r\n\r\n## What is different\r\n\r\nI will start off by showing the `PayrollStream` struct.\r\n\r\n### Data types \r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/libraries/DataTypes.sol#L12-L18\r\n\r\nAs you can see, this struct is pretty different from the linear one. The stream is continuous without having a stop time; the sender will just accumulate debt if he will not cancel it.\r\n\r\n- The `amountPerSecond` represents the amount of tokens (given that we are using PRBMath, we will normalize it to 18 decimals) that the recipient receives every second. This be calculated at the UI level and will be passed in the `create` function.\r\n- The `balance` represents the available tokens in stream.\r\n- The `lastUpdate` represents the time reference for the streamed amount calculation.\r\n\r\nThe stream **creation** and the **deposit** are **two different operations** in the payroll contract.\r\n\r\n### Create function \r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/interfaces/ISablierV2Payroll.sol#L113-L132\r\n\r\nNo deposit and time arguments. \r\n\r\n### Deposit function\r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/interfaces/ISablierV2Payroll.sol#L157-L168\r\n\r\nYou **can't** deposit money into the contract if there is no stream created beforehand.\r\n\r\nTo make this easy for the front-end clients, we will implement such methods as `createAndDeposit` and `depositAll`.\r\n\r\n### Withdraw sender function \r\n\r\nKinda a downstream functionality, but the amount per second is not affected. \r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/interfaces/ISablierV2Payroll.sol#L196-L207\r\n\r\n## How it works\r\n\r\nWhen a stream is created, the `balance` is set to 0 and the `lastUpdate` to `block.timestamp`.\r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/SablierV2Payroll.sol#L346-L354\r\n\r\nEvery time a deposit is made, the `balance` is increased by the given amount. \r\n\r\nEvery time the recipient withdraws money the `balance` is decreased by the given amount and the `lastUpdate` is updated to the `block.timestamp`.\r\n\r\n### The withdrawable amount calculation  \r\n\r\nIf no deposits were made, the function returns 0.  If the calculated streamed amount is greater than the balance, the returned value is `balance`. In all other cases, the withdrawable amount is the calculated streamed amount.\r\n\r\n### The streamed amount calculation\r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/SablierV2Payroll.sol#L121-L137\r\n\r\n### The returnable amount calculation\r\n\r\nThe maximum amount available for the sender to withdraw.\r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/SablierV2Payroll.sol#L96-L101\r\n\r\n### Helper function for sender's debt calculation (if any)\r\n\r\nhttps://github.com/sablierhq/v2-payroll/blob/93378d4d444be88d154ae42b908895d5551352c3/src/SablierV2Payroll.sol#L109-L113\r\n\r\n### Invariants\r\n\r\n - balance >= withdrawable amount\r\n - lastUpdate <= block.timestamp\r\n\r\n**Idea**: a method that changes the `amountPerSecond` without deleting the stream entity.\r\n","createdAt":"2022-10-18T15:01:40Z","labels":[],"number":1,"repository":"sablier-labs/flow","state":"closed","title":"Sablier payroll","type":"discussion","updatedAt":"2024-10-01T17:56:41Z","url":"https://github.com/sablier-labs/flow/discussions/1"},{"author":"andreivladbrg","body":"In this discussion (https://github.com/sablier-labs/flow/discussions/271), @smol-ninja correctly pointed out that we can remove the [isStream](https://github.com/sablier-labs/flow/blob/8d0e464416b2780c784e1a86042af12faac41224/src/types/DataTypes.sol#L70) boolean and rely on a `sender` check to verify whether a stream is null. I agree with his rationale, and I believe we should make this change, as there is no objective necessity for this boolean, and it would save gas in the `create` function.\r\n\r\n---\r\n\r\nPS: I’m opening this discussion here because it’s relevant to flow as well, and we need to make a quicker decision since the audit starts next week. This is in contrast to lockup, where we don’t have anything scheduled yet\r\n\r\n\r\nwdyt? @sablier-labs/solidity ","createdAt":"2024-10-01T11:16:17Z","labels":[],"number":280,"repository":"sablier-labs/flow","state":"closed","title":"Remove `isStream` boolean from stream struct","type":"discussion","updatedAt":"2024-10-01T13:02:36Z","url":"https://github.com/sablier-labs/flow/discussions/280"},{"author":"smol-ninja","body":"I hope it helps to visualize the open-ended streams as per the current implementation. if you think there could be some improvements in the diagram, please let me know and I will be happy to make those changes.\r\n\r\n[Click here to view in Stately Studio](https://stately.ai/registry/editor/embed/dbf93aad-910f-435e-a5ad-297466483e19?mode=Design&machineId=c47a00c5-ff18-4087-a16c-5a6ac5c3d453)\r\n\r\n- The rectangular boxes represent the states.\r\n- The elliptical boxes represent the functions that can be called during a particular state.\r\n\r\n<img width=\"1248\" alt=\"Screenshot 2024-05-09 at 11 04 53\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/6676622/a0ddc931-001b-44a3-90c1-8bcb1517be44\">\r\n","createdAt":"2024-05-09T10:14:13Z","labels":[],"number":70,"repository":"sablier-labs/flow","state":"closed","title":"Open ended state machine diagram","type":"discussion","updatedAt":"2024-10-01T11:47:03Z","url":"https://github.com/sablier-labs/flow/discussions/70"},{"author":"smol-ninja","body":"A paused stream is characterized by two states that are analogous to each other: `rps == 0` and `isPaused == true`. Thus we can remove  `isPaused` state from the contract and instead return `true` if `rps == 0`.\r\n\r\n### Pros\r\n1. 2500 gas saving in `paused`, `void` and `restart`\r\n2. Single state to track whether the stream is paused or not. Currently we have to mandatory update both `rps` and `isPaused`\r\n\r\n### Cons\r\n1. None\r\n\r\n> [!NOTE]\r\n>\r\n> As we're quite ready for audits with flow, we can discuss this for an upcoming version of the protocol, post-launch. However, this change is minor so, if we all agree, it can be included before the audit. I am in favour of including this before audit.\r\n\r\ncc @sablier-labs/solidity ","createdAt":"2024-09-27T08:55:46Z","labels":[],"number":271,"repository":"sablier-labs/flow","state":"closed","title":"Replace `isPaused` state with runtime check with `rps`","type":"discussion","updatedAt":"2024-10-01T08:27:01Z","url":"https://github.com/sablier-labs/flow/discussions/271"},{"author":"smol-ninja","body":"## Context\r\n\r\nOne would assume that `snapshotTime` represents the time when `snapshotDebt` is updated, which is not quite true. For example, \r\n- `pause` and `void` update the `snapshotDebt` but not the `snapshotTime`. \r\n\r\nThis decision was made to make `_ongoingDebtOf` gas efficient for paused streams. But the same can also be achieved by checking for rps value.\r\n\r\n## Problem\r\n\r\nEven though we describe `snapshotTime` as \"The Unix timestamp used for the ongoing debt calculation\" without mentioning anything about snapshot debt, the name itself can be confusing in practice, for auditors, for code readers as well as for the users.\r\n\r\n## Recommendation\r\n\r\nI propose to redefine the `snapshotTime` as the \"Unix timestamp when snapshot debt is updated by adding up the ongoing debt\" and then:\r\n- Update snapshot time every time snapshot debt is updated by adding up the ongoing debt, that means include it in `pause` and `void`\r\n- Remove `isPaused` check from `ongoingDebt` and add rps check.\r\n- The gas efficient changes introduced in https://github.com/sablier-labs/flow/pull/266 won't be affected.\r\n\r\nAnybody can then empirically check that the following hold true regardless of the stream status:\r\n\r\n```math\r\n\\text{total debt} = \\text{snapshot debt} + rps \\times (\\text{block.timestamp} - \\text{snapshot time})\r\n```\r\n\r\n## Effects on the audit timeline\r\n\r\nGiven that it's a minor change, it won't delay the audit timeline for us.\r\n\r\nThoughts, cc @sablier-labs/engineers.","createdAt":"2024-09-26T13:41:14Z","labels":[],"number":269,"repository":"sablier-labs/flow","state":"closed","title":"`snapshotTime` is dubious","type":"discussion","updatedAt":"2024-09-30T18:34:08Z","url":"https://github.com/sablier-labs/flow/discussions/269"},{"author":"smol-ninja","body":"I have crunched some benchmarks for different solutions that we had come up for Flow. The findings can be found in [this google sheet](https://docs.google.com/spreadsheets/d/1qt8TO2UzN9rzC4Ikj2n1cViYUGXDeZpCJtSkMa78G5M/edit?usp=sharing). The data was generated using [this code](https://gist.github.com/smol-ninja/6bd1e69057795d02c33e69907da1cfc2). A similar fuzz test has also been added through [this PR](https://github.com/sablier-labs/flow/pull/258), which ensures that the maximum deviation and deviation are within accepted bounds which is 0.6% for deviation and 6 hours for delay (these bounds are based on the sheet data).\r\n\r\n## Definitions\r\n- A time interval $[t0, t1]$ is defined such that first withdrawal is made at $t > t0$ and last withdrawal is made at $t = t1$\r\n- wc = count of withdrawals made in the above time range\r\n- $rps_{18}$ = rate per second in 18 decimal format\r\n- $f$ = scale factor, i.e. $10^{18 - decimal}$\r\n- $wa_i$ = actual amount withdrawn in $i^{th}$ withdrawal\r\n- $wt_i$ = time when $i^{th}$ withdrawal is made\r\n- actual total amount withdrawn, $wa_{actual} = \\sum_{i=1}^{i=wc} wa_i$\r\n- desired total amount withdrawn $wa_{desired} = rps * (t1 - t0)$. This is what one would expect in the absence of precision error.\r\n\r\n### B-1: Stream deviation\r\nStream deviation represents how much actual total amount withdrawn differ from the desired total amount withdrawn after multiple withdrawals. For example, if a stream is expected to stream 100 tokens in 1 hour, but due to precision error, a user can only withdraw 90 tokens in 1 hour, then deviation is 10%.\r\n\r\n```math\r\ndeviation (\\%) = \\frac{(wa_{desired} - wa_{actual})}{wa_{desired}} \\cdot 100\r\n```\r\n\r\nAn important invariant is that $wa_{actual} <= wa_{desired}$, otherwise the implementation may lead to over streaming.\r\n\r\n_Any better solution would yield into a lower deviation._\r\n\r\n### B-2: Stream Delay\r\nStream Delay represents the time by which a stream would incur delay in streamed tokens due to precision error introduced by the divisions. In the above example, if instead of 1 hour, it takes 1.5 hours before user can withdraw 100 tokens, the delay is 0.5 hours.\r\n\r\n```math\r\ndelay(s) = \\frac{(wa_{desired} - wa_{actual}) \\cdot f}{rps_{18}}\r\n```\r\nwhere \r\n- $f$ = scale factor. For USDC, is is $10^{12}$\r\n- $rps_{18}$ = stream rps in 18 decimal format\r\n\r\n_Any better solution would yield into a lower delay._\r\n\r\n## Data\r\nThe code is run on USDC with 100,000 fuzz runs in foundry. Data can be found in [this google sheet](https://docs.google.com/spreadsheets/d/1qt8TO2UzN9rzC4Ikj2n1cViYUGXDeZpCJtSkMa78G5M/edit?usp=sharing).\r\n\r\n## Findings\r\n- On `main` branch, I discovered that, for USDC, with certain RPS, over multiple withdrawals, the delay can go as high as 266 hours with an average of 4 hours. In terms of deviation, it can go as high as 50% with an avg of 0.6%. on `fix-precision`, the same numbers are very low bringing it closer to a real stream.\r\n\r\n- Before [7a80f4d1](https://github.com/sablier-labs/flow/pull/240/commits/7a80f4d1d5fac1be4780fde0f28b72012cbd0182), the test resulted into the failure of $wa_{actual} <= wa_{desired}$ invariant on `fix/precision-issue` which means that for some values of $rps$, the solution was leading to over streaming, which is bad. \r\n\r\nExplanation below:\r\n1. `_streams[streamId].snapshotTime += uint40(scaledDifference / rps)`\r\n\r\n```math\r\nsnapshotTime_{stored} < snapshotTime_{real} \\text{ due to rounding down by the division}\r\n```\r\n2. `ongoingDebt = (elapsedTime * rps) / scaleFactor`\r\n\r\n```math\r\nongoingDebt_{calculated} < ongoingDebt_{real} \\text{ , note that we now have a } 2^{nd} \\text{ division}\r\n```\r\n\r\n3. withdrawAmount = initialTotalDebt - ongoingDebt\r\n\r\n```math\r\nwithdrawAmount_{calculated} > withdrawAmount_{real} \\text{ this is due to the subtraction with a smaller number which is ongoingDebt}\r\n```\r\n\r\nThus it led to over streaming.\r\n\r\n- This led me to a better solution which not only fix over-streaming but also minimized the deviation and delay for flow streams. The implementation can be found in [7a80f4d1](https://github.com/sablier-labs/flow/pull/240/commits/7a80f4d1d5fac1be4780fde0f28b72012cbd0182). The solution is a simplified version of current solution and uses direct assignments which avoids multiple divisions. I will provide a formal proof of the same through a separate doc.\r\n\r\n### Conclusion\r\n\r\nThe difference that we thought can only be 1 or 2 can be much higher depending on the value of RPS. Thus, instead of asserting differences in the invariant, we should assert deviation and delay similar to https://github.com/sablier-labs/flow/pull/258.\r\n\r\n### Reference\r\n- [Explanation on precision](https://gist.github.com/andreivladbrg/b5968b8c16f5924d082dbce607f55e97) by Andrei","createdAt":"2024-09-23T07:45:05Z","labels":[],"number":259,"repository":"sablier-labs/flow","state":"closed","title":"Benchmarking Flow implementations with Deviation and Delay","type":"discussion","updatedAt":"2024-09-24T11:05:58Z","url":"https://github.com/sablier-labs/flow/discussions/259"},{"author":"smol-ninja","body":"Recently, I've realized that there is no point in having `block.timestamp` anywhere in the code. The debt calculations rely more on the value of the corrected time (https://github.com/sablier-labs/flow/pull/220) than `block.timestamp`. Even when we pass `block.timestamp`, the theoretical amounts calculated may not match because they are rounded down using corrected time.\r\n\r\nThus, I propose to go with one of the following options:\r\n\r\n1. remove `block.timestamp` from functions like `coveredDebtOf`, `totalDebt`, etc., and introduce a `time` input parameter.\r\n2. Or return `correctedTime` in all these functions to inform users that the returned amounts are calculated based on `correctedTime` and not `block.timestamp`.﻿\r\n\r\nPS: in option (1), we would still have to return `correctedTime` so only option (2) makes sense.\r\n\r\ncc @sablier-labs/solidity ","createdAt":"2024-09-05T11:40:02Z","labels":[],"number":228,"repository":"sablier-labs/flow","state":"closed","title":"Return `correctedTime` in getters that rely on `block.timestamp`","type":"discussion","updatedAt":"2024-09-24T10:32:39Z","url":"https://github.com/sablier-labs/flow/discussions/228"},{"author":"andreivladbrg","body":"In the past two weeks, there has been a lot of back-and-forth between @smol-ninja and me regarding how to minimize the precision issue in withdraw, which ultimately only creates a _delay_ problem. It’s becoming overwhelming—every time we think we’ve figured it out, something new comes up.\r\n\r\nThe major concern here is that an external attacker could exploit this by running a loop to withdraw tokens on behalf of the recipient, causing constant delay. For tokens with a lower value compared to USD (unlike BTC), this wouldn’t be practical from a gas cost perspective, as it would be too expensive.\r\n\r\nThe quickest solution to the attacker scenario from above, without adding extra complexity to withdraw, is to restrict the function so that only the sender or recipient can call it.\r\n\r\nCons:\r\n- Inconsistency with the lockup.\r\n\r\nPros:\r\n- Less complexity in the withdraw function. (less prone to issues we didn't find yet)\r\n- Cleaner code.\r\n- Consistency in how the time variable is updated in the contract (always using `block.timestamp`).\r\n\r\nSince we need to make a quick decision with the audit approaching, I would appreciate fast feedback from @sablier-labs/engineers.\r\n\r\n---\r\n\r\nAlso, @maxdesalle, do we have a dune query that searches for the percentage of `withdraw` calls in lockup where `msg.sender != recipient` , `msg.sender != sender` or `msg.sender != approved operator`?","createdAt":"2024-09-23T12:44:20Z","labels":[],"number":260,"repository":"sablier-labs/flow","state":"closed","title":"Should we allow only sender and recipient to call withdraw?","type":"discussion","updatedAt":"2024-09-24T10:27:52Z","url":"https://github.com/sablier-labs/flow/discussions/260"},{"author":"razgraf","body":"During the first demo of the Flow designs we've uncovered a mismatch between contract-level statuses and front-facing statuses for Flow streams. This comes as a necessity to show clearer or easier-to-understand statuses to user. As a possibly incomplete example, the following may very well be defined as \"ended\":\r\n- paused-insolvent-but-paused-with-reason\r\n- paused-solvent \r\n\r\n| Default view | Priority view |\r\n| --- | --- |\r\n| <img width=\"1001\" alt=\"Screenshot 2024-08-20 at 19 33 09\" src=\"https://github.com/user-attachments/assets/fe8641bf-6bb6-4f0c-ae63-0690f2f01db0\"> |<img width=\"1008\" alt=\"Screenshot 2024-08-20 at 19 33 21\" src=\"https://github.com/user-attachments/assets/e5d68674-f75d-4ba1-a6df-84859bf175b1\"> |\r\n\r\n@PaulRBerg suggested we work on aligning these statuses before we go to production.\r\n\r\nThe reasoning behind our current contract-level statuses can be found in the flow diagrams [here](https://github.com/sablier-labs/flow/blob/main/diagrams.md).\r\n\r\nOpening this as a request for ideas and feedback.\r\n\r\n@sablier-labs/everybody \r\n","createdAt":"2024-08-20T16:38:04Z","labels":[],"number":216,"repository":"sablier-labs/flow","state":"closed","title":"Front-facing statuses for Flow","type":"discussion","updatedAt":"2024-09-20T09:19:14Z","url":"https://github.com/sablier-labs/flow/discussions/216"},{"author":"smol-ninja","body":"`bound` and `seed` inputs in invariant handlers make it difficult to debug call sequences in a failed invariant. An example is shown below:\r\n\r\n<img width=\"950\" alt=\"Screenshot 2024-09-17 at 15 37 34\" src=\"https://github.com/user-attachments/assets/deedf3d4-1943-48a7-8cf4-db4aa57eac97\">\r\n\r\nI also discovered that Foundry does not even return the correct sequence in failed test (the above sequence is not correct). The reason we use `bound` and `seed` inputs was to not waste any of the calls during invariant testing. However, it increases the cost to debug a failed invariant test.\r\n\r\n-----------------\r\n\r\nThe screenshot below shows the sequence when I used `vm.assume` and fuzzed inputs in the handler functions.\r\n\r\n<img width=\"945\" alt=\"Screenshot 2024-09-17 at 15 37 20\" src=\"https://github.com/user-attachments/assets/58487b9d-a380-4f3b-8c18-de035906d0dc\">\r\n\r\nYou can see, the sequence and the function inputs are very clear and easy to follow. Thus, I propose to make the following changes:\r\n\r\n- Replace `bound` with `vm.assume` in all handlers\r\n- Use fuzzed inputs directly instead of constructing valid inputs using bound\r\n\r\nPS: We can increase the numbers of runs and depth in CI to compensate for wasted calls.\r\n\r\ncc @sablier-labs/solidity ","createdAt":"2024-09-17T14:43:41Z","labels":[],"number":243,"repository":"sablier-labs/flow","state":"closed","title":"Replace `bound` with `vm.assume` in invariant handlers","type":"discussion","updatedAt":"2024-09-17T14:48:04Z","url":"https://github.com/sablier-labs/flow/discussions/243"},{"author":"smol-ninja","body":"Given that now we have two admin related functions: `recover` and `collectProtocolRevenue`, should we have invariants that make sure that any of the admin functions don't lead to an unexpected behaviour? Or will it be an overkill given they are only callable by admin?\r\n\r\nIt would require us to introduce the following changes:\r\n1. contract `FlowAdminHandler`\r\n2. functions `collectRevenue` and `recover` in `FlowAdminHandler`\r\n3. variables `mapping (IERC20 token => uint256) protocolRevenue` and `mapping (IERC20 token => uint256) aggregateBalance` in FlowStore\r\n4. functions `token.transfer` so that invariant can make random deposits to Flow contract\r\n\r\nAnd we can then introduce the following invariants:\r\n1. $\\text{all stream balance sum} + \\text{revenue} = \\text{aggregate balance}$\r\n2. $\\text{aggregate balance} \\le \\text{token balance}$\r\n\r\ncc @sablier-labs/solidity ","createdAt":"2024-09-14T14:49:47Z","labels":[],"number":239,"repository":"sablier-labs/flow","state":"closed","title":"Should we introduce `FlowAdminHandler` or will that be an overkill?","type":"discussion","updatedAt":"2024-09-16T13:56:03Z","url":"https://github.com/sablier-labs/flow/discussions/239"},{"author":"andreivladbrg","body":"Similar to lockup contracts, where we've added a struct that includes the recipient, should we add here one as well?\r\n\r\nContext:\r\n- Common struct (storage): https://github.com/sablier-labs/v2-core/blob/cf246ef5199289539426ee19476f3ef9ebf0556d/src/types/DataTypes.sol#L82-L97\r\n- `StreamLL` used only in `getStream`: https://github.com/sablier-labs/v2-core/blob/cf246ef5199289539426ee19476f3ef9ebf0556d/src/types/DataTypes.sol#L254-L269\r\n","createdAt":"2024-06-06T12:43:00Z","labels":[],"number":161,"repository":"sablier-labs/flow","state":"closed","title":"Should we add a second stream struct to include the recipient?","type":"discussion","updatedAt":"2024-09-04T19:37:25Z","url":"https://github.com/sablier-labs/flow/discussions/161"},{"author":"andreivladbrg","body":"Since we have removed the protocol fees for the next Lockup release, should we abandon the idea to implement them in this project?\r\n\r\nRef (last point in TODOs): https://github.com/sablier-labs/v2-open-ended/blob/main/README.md#todos\r\n\r\n@PaulRBerg @smol-ninja ","createdAt":"2024-04-03T15:10:34Z","labels":[],"number":24,"repository":"sablier-labs/flow","state":"closed","title":"Should we have protocol fees?","type":"discussion","updatedAt":"2024-09-04T09:02:31Z","url":"https://github.com/sablier-labs/flow/discussions/24"},{"author":"andreivladbrg","body":"After a private discussion with @gavriliumircea, he came up with a good idea to reintroduce the `amount` parameter in `withdraw`, which was initially removed due to the explanation provided [here](https://github.com/sablier-labs/flow/pull/4). In the meantime, we have introduced the storage variable `snapshotDebt`, which changes how things work.\r\n\r\nSo, the proposed change in `withdraw` would be:\r\n- `time` --> `amount`\r\n- calculate `coveredDebt` to the current block (`block.timestamp`)\r\n- check wether the amount passed is greater than `coveredDebt`\r\n- the snapshot debt will be updated to `coveredDebt - withdrawAmount`\r\n- the snapshot time will be updated to `block.timestamp`\r\n\r\n<details><summary>Actual implementation</summary>\r\n<p>\r\n\r\n```solidity\r\n// Check: the stream balance is not zero.\r\nif (balance == 0) {\r\n    revert Errors.SablierFlow_WithdrawNoFundsAvailable(streamId);\r\n}\r\n\r\nuint128 newSnapshotDebt = _coveredDebtOf(streamId, uint40(block.timestamp));\r\n\r\n// Revert if the withdrawal amount is greater than what is available.\r\nif (amount > newSnapshotDebt) {\r\n    revert Errors.SablierFlow_WithdrawAmountTooBig();\r\n}\r\n\r\n// Update the snapshot debt, with the amount to be withdrawn.\r\nunchecked {\r\n    newSnapshotDebt -= amount;\r\n}\r\n\r\n// Effect: update the snapshot debt and time from storage.\r\n_streams[streamId].snapshotDebt = newSnapshotDebt;\r\n_streams[streamId].snapshotTime = uint40(block.timestamp);\r\n\r\n``` \r\n\r\n</p>\r\n</details> \r\n\r\n---\r\n\r\nThis change is going to be helpful for the app, as well as for the users, due to a more concise API (and consistent with `lockup` contracts).\r\n\r\nOne more thing: this change would allow us to enable the withdrawal of an amount less than what has been snapshot in the case of `adjustRps`, which was not possible with a `time` parameter.\r\n\r\nwdyt @sablier-labs/solidity ?\r\n\r\n@gavriliumircea lmk if i missed something","createdAt":"2024-09-03T12:43:23Z","labels":[],"number":223,"repository":"sablier-labs/flow","state":"closed","title":"Re introduce the `amount` param in `withdraw`","type":"discussion","updatedAt":"2024-09-03T15:16:36Z","url":"https://github.com/sablier-labs/flow/discussions/223"},{"author":"razgraf","body":"Requesting some feedback on the following problems (+ the potential solutions). The main issue is with \"socially unwanted debt\" (meaning correct technically, but weird for UX).\r\n\r\n### Scenario\r\n\r\n> Alice works as a contractor for 3 months, gets paid **USDC 1000**/month. Bob, the employer, opens the streams, funds it, 3 months pass and on day **2** of the new month Bob remembers the stream: no money is lost, as he only funded it with **USDC 3000** but now there's **USDC 60** in bad debt as he pauses it.\r\n\r\n### Context\r\n\r\nIn order to \"stop\" a stream, one can:\r\n- as a sender, `pause` it (debt is tracked)\r\n- as a recipient, `void` it (debt is cleared)\r\n\r\n\r\n### Problem 1 - Debt dust\r\n\r\nIn organizations taking care of payroll, senders may forget to stop streams when someone is fired or a contractor finishes their commitment. Even if they do, it invites \"dust\" to accrue as unwanted debt. \r\n\r\nIn our scenario, Bob could pause the stream and go to Alice and ask her to send a `void` transaction. Realistically, this set of actions relies on a non-trivial coordination cost. While technically correct, the debt doesn't really fit with the \"social contract\", therefore causing bad UX for any accounting or portfolio tracking. The question here is:\r\n\r\nHow do we deal with the unwanted debt dust?\r\n\r\n\r\n### Problem 2 - Debt-loaded restarts\r\n\r\nPRB edit: see the [conversation below](https://github.com/sablier-labs/flow/discussions/197#discussioncomment-10190225). This is not a problem because in Flow, there can be multiple streams between two users.\r\n\r\n~~Extending the initial scenario, say:~~\r\n\r\n~~> Bob needs Alice again for 2 months of work. He wants to start a stream of **USDC 1000**/month. The system tells him he needs to pay USDC 60, but that's unwanted debt so why would he?~~\r\n\r\n~~How can Bob start his new agreement with Alice without the unwanted debt?~~\r\n\r\n---\r\n\r\n**Note 1**\r\n\r\nThe example of USDC 60 can be extended to cases of `USDC 999..99` for someone who simply forgets to close the stream.\r\n\r\n**Note 2** \r\n\r\nTo put it another way, I can't pay exactly 3000$ at 1000$/month.\r\n- I will either pay less - I go there at 2990$ paid and pause the stream\r\n- Or pay more - I go there at 3010$ (10$ in debt) and pause the stream - now I have debt, hence the problem above\r\n\r\n\r\n@sablier-labs/everybody \r\n","createdAt":"2024-07-30T10:25:50Z","labels":[],"number":197,"repository":"sablier-labs/flow","state":"closed","title":"UX difficulties with unwanted debt","type":"discussion","updatedAt":"2024-08-29T09:39:10Z","url":"https://github.com/sablier-labs/flow/discussions/197"},{"author":"PaulRBerg","body":"In PR https://github.com/sablier-labs/flow/pull/205/files, I introduced a dichotomy between amounts:\r\n\r\n1. normalized\r\n2. denormalized\r\n\r\n_Side note: in the future, we might rename these to *scaled* and *raw*, but never mind that for now_\r\n\r\nThe idea is to introduce a new `Amounts` struct that encapsulates the `normalized` and `denormalized` amounts. Doing so would allow us to:\r\n\r\n- Return the `Amounts` struct in all debt functions\r\n- Merge the `refundableAmountOf` and `normalizedRefundableAmountOf` functions into a single function that returns a struct (related: https://github.com/sablier-labs/flow/issues/202)\r\n- Emit a struct instead of two amounts (related: https://github.com/sablier-labs/flow/issues/204)\r\n- Generally, encapsulate amounts whenever helpful throughout the code\r\n\r\ncc @sablier-labs/solidity.","createdAt":"2024-08-12T18:15:25Z","labels":[],"number":206,"repository":"sablier-labs/flow","state":"closed","title":"Amounts struct for encapsulation","type":"discussion","updatedAt":"2024-08-16T17:43:14Z","url":"https://github.com/sablier-labs/flow/discussions/206"},{"author":"smol-ninja","body":"@razgraf shared the following idea in Slack:\r\n\r\n> Another thing that will be challenging will be the mental-model around end-dates and possible end-dated. E.g. let's say I pay an employee, but then they just announced they're leaving the company next month. I still wanna pay their salary, but on the 1st of next month I want that stream to stop\r\n\r\nCurrently, this behaviour can be achieved by the following (cc @andreivladbrg):\r\n1. Sender only deposits the necessary withdrawable amount\r\n2. Sender calls `cancel` after 1 month which sets `rps` to zero. In case sender doesn't call the `cancel`, the stream will continue to accumulate debt but recipient wouldn't be able to withdraw anything.\r\n\r\nHowever, @razgraf pointed out that this might be a visual/cognitive blocker for users.\r\n\r\nI have two comments on this:\r\n- Having an end date wouldn't do justice to \"open ended\" name (just saying).\r\n- With an end date, it can possibly compete Lockup Linear streams. The only difference between the two would be the flexibility for sender to deposit funds into stream anytime they want and I think OE may have an advantage over LL streams.\r\n\r\nOther ideas to implement this feature:\r\n\r\n1. This can be automated with tools like gelato since `cancel` function can be called anytime by the sender (cc @andreivladbrg)\r\n2. We can implement execution via signatures in `cancel` that means sender can submit a signed data through the UI which can be used to execute cancel on their behalf but only after a specified date.","createdAt":"2024-04-10T10:39:19Z","labels":[],"number":40,"repository":"sablier-labs/flow","state":"closed","title":"Should there be an end date to open ended streams?","type":"discussion","updatedAt":"2024-08-06T07:32:36Z","url":"https://github.com/sablier-labs/flow/discussions/40"},{"author":"PaulRBerg","body":"Here: \r\n\r\nhttps://github.com/sablier-labs/flow/blob/76bcae36e8286b2465adcf8ab80d8e24d8548bb4/src/interfaces/ISablierFlow.sol#L40\r\n\r\nThe `lastUpdateTime` can be inferred from the block timestamp of the block in which the create event was emitted. AFAIK, this property is available in the subgraph.\r\n\r\nAsking you @sablier-labs/solidity and @razgraf (to double-check my understanding of the subgraph and whether this is a problem)?","createdAt":"2024-07-27T11:59:36Z","labels":[],"number":194,"repository":"sablier-labs/flow","state":"closed","title":"What's the point of emitting the `block.timestamp` in the create event?","type":"discussion","updatedAt":"2024-08-30T13:23:39Z","url":"https://github.com/sablier-labs/flow/discussions/194"},{"author":"smol-ninja","body":"How do we decide which error should contain `streamId`?\r\n\r\nSome of the errors contain `streamId` and some of them not. I failed to understand what determines that. IMO we should exclude `streamId` from errors since they are always part of the function's input data.\r\n\r\nRFC @andreivladbrg.","createdAt":"2024-06-06T18:01:52Z","labels":[],"number":168,"repository":"sablier-labs/flow","state":"closed","title":"Remove `streamId` from `Errors`","type":"discussion","updatedAt":"2024-06-11T11:14:09Z","url":"https://github.com/sablier-labs/flow/discussions/168"},{"author":"smol-ninja","body":"I think there are a few inconsistencies among the events emitted. So I decided to make rules for them.\r\n\r\n### Rules\r\n1. All events must contain `streamId` as the first entry and it must always be indexed.\r\n2. If there is a transfer of asset, the counterparty, which is sending/receiving the asset, must be indexed.\r\n4. As an exception, create must have `asset`, `streamId` and `sender` indexed, regardless.\r\n5. No indexing otherwise.\r\n\r\nHere is the revised version:\r\n\r\n```solidity\r\nevent AdjustFlowStream(\r\n    uint256 indexed streamId, uint128 amountOwed, uint128 newRatePerSecond, uint128 oldRatePerSecond\r\n);\r\n\r\nevent CreateFlowStream(\r\n    uint256 indexed streamId,\r\n    IERC20 indexed asset,\r\n    address indexed sender,\r\n    address recipient,\r\n    uint40 lastTimeUpdate,\r\n    uint128 ratePerSecond\r\n);\r\n\r\nevent DepositFlowStream(\r\n    uint256 indexed streamId, address indexed funder, uint128 depositAmount\r\n);\r\n\r\nevent PauseFlowStream(\r\n    uint256 indexed streamId, address recipient, address sender, uint128 amountOwed\r\n);\r\n\r\nevent RefundFromFlowStream(\r\n    uint256 indexed streamId, address indexed sender, uint128 refundAmount\r\n);\r\n\r\nevent RestartFlowStream(\r\n    uint256 indexed streamId, address recipient, address sender, uint128 ratePerSecond\r\n);\r\n\r\nevent VoidFlowStream(\r\n    uint256 indexed streamId, address recipient, address sender, uint128 forfeitedDebt, uint128 newAmountOwed\r\n);\r\n\r\nevent WithdrawFromFlowStream(\r\n    uint256 indexed streamId, address indexed to, uint128 withdrawnAmount\r\n);\r\n```\r\n\r\nRFC @andreivladbrg.","createdAt":"2024-06-06T18:33:13Z","labels":[],"number":165,"repository":"sablier-labs/flow","state":"closed","title":"Rules for emitted events","type":"discussion","updatedAt":"2024-06-07T16:06:42Z","url":"https://github.com/sablier-labs/flow/discussions/165"},{"author":"smol-ninja","body":"## Context\r\nAndrei published this [excellent bug report](https://github.com/sablier-labs/flow/issues/148) today, noting that one of the invariants fails if the decimal of ERC20 tokens is less than 18. This is due to the precision error in division.  So, this raised a question for me:\r\n\r\n\"**What if we remove the 18 decimal format requirement?**\"\r\n\r\n## Now\r\n\r\nLet's say a user wants to deposit 100 USDC.\r\n- The `deposit(streamId, amount)` function assumes the input amount to have an 18 decimal format. Since USDC has 6 decimals, the user would have to pass $100 \\times 10^{18}$ as value. The deposit execution will then internally calculate the transfer amount as to be $100 \\times 10^6$ using `ERC20.decimal()`. But it gets stored as $100 \\times 10^{18}$ in the storage.\r\n- Similarly, during refunds and withdrawals, the user enters the amount in 18 decimal format and the functions internally calculate the transfer amount.\r\n\r\n## Then\r\n\r\nIf we remove the 18 decimal requirement and treat 1 token as 1 token, then there is no need to convert deposit amounts into 18 decimal format. Lets take the same example again.\r\n\r\nThe user wants to deposit 100 USDC.\r\n- `deposit(streamId, amount)` function takes $100 \\times 10^6$ as the input value. The struct object stores it as it is.\r\n- Similarly, during withdrawal and refund, the function transfers the requested amount without any decimal conversions.\r\n- For the contract, decimals don't exist anymore.\r\n- Rate-per-second is also in the absolute format i.e. if `ratePerSecond = 1000`, that means 1000 tokens are streamed every second.\r\n\r\n## Tests and Risk\r\n\r\nI tested removing all normalizations, and storing the token amounts as they are without converting them to 18 decimal format. All values were treated as absolute, ignoring decimals.\r\n\r\nThe result is that all tests passed, including the previously failing invariant test for decimal values less than 6. This approach doesn't raise precision errors due to rounding and treats all amounts in their absolute form without us making any conversions between different decimals and 18.\r\n\r\nAll streams belonging to one asset are mutually exclusive from the streams belonging to another asset. So it does not have any cross-over effects. \r\n\r\n-----------------------\r\n\r\nLet me know if I am missing something. But this approach looks better to me than having an 18-decimal format.\r\n\r\nSo, I would love to know your thoughts on this.\r\n\r\nPS: This does not require a big change in the codebase. I have already done it locally for testing and it works.\r\n\r\ncc @sablier-labs/engineers.","createdAt":"2024-05-31T19:04:57Z","labels":[],"number":150,"repository":"sablier-labs/flow","state":"closed","title":"What if we remove the 18 decimal format requirement?","type":"discussion","updatedAt":"2024-06-05T09:24:42Z","url":"https://github.com/sablier-labs/flow/discussions/150"},{"author":"PaulRBerg","body":"Idea for a future release of Flow - what if we enabled multiple cadences, more than just per-second?\r\n\r\ne.g. we could do hourly, daily, and weekly. Monthly would be a little more complicated because of the additional calculations requires to predict the beginning of the next month, but it should be doable in practice (sounds like a good idea for a time utils Solidity library). \r\n\r\nWDYT, @sablier-labs/everybody?\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/sabvm/discussions/84","createdAt":"2024-06-03T16:28:56Z","labels":[],"number":152,"repository":"sablier-labs/flow","state":"open","title":"Enabling multiple cadences (more than just per-second)","type":"discussion","updatedAt":"2024-06-05T09:20:20Z","url":"https://github.com/sablier-labs/flow/discussions/152"},{"author":"smol-ninja","body":"A deposit of 10M ERC20 tokens with 32 decimals would fail because of `uint128` type used for amounts. So I would like to discuss the idea of dropping support for ERC20 tokens with decimal values higher than 18.\r\n\r\nIn practice, there are no assets with decimals higher than 18. Even if they exist, providing support to these assets does not make sense if they cannot be deposited into the contract. So until we use `uint256` for amounts, it only adds complexity. That's why either we should drop support for those assets or use `uint256` for amounts.\r\n\r\nThe following table shows how much amount can be deposited with `uint128` data type.\r\n\r\n| Decimals | Max deposit (in asset decimals) |\r\n| -- | -- |\r\n| 25 | 34,028,236,692,094 |\r\n| 26 | 3,402,823,669,209 |\r\n| 27 | 340,282,366,921 |\r\n| 28 | 34,028,236,692 |\r\n| 29 | 3,402,823,669 |\r\n| 30 | 340,282,367 |\r\n| 31 | 34,028,237 |\r\n| 32 | 3,402,824 |\r\n| 33| 340,282 |\r\n|34 | 34,028|\r\n| 35|3,403|\r\n|36|340|\r\n|37|34|\r\n|38|3|\r\n|39|0|  \r\n\r\nWDYT @sablier-labs/everybody?","createdAt":"2024-06-03T22:43:30Z","labels":[],"number":154,"repository":"sablier-labs/flow","state":"closed","title":"Drop support for ERC20 tokens with decimals > 18","type":"discussion","updatedAt":"2024-06-07T13:38:30Z","url":"https://github.com/sablier-labs/flow/discussions/154"},{"author":"smol-ninja","body":"As discussed, the Flow contract will have the following non-view public functions: \r\n\r\n- `adjustRatePerSecond`\r\n- `batch`\r\n- `create`\r\n- `createAndDeposit`\r\n- `createAndDepositViaBroker`\r\n- `deposit`\r\n- `depositViaBroker`\r\n- `pause`\r\n- `depositAndPause`\r\n- `refund`\r\n- `refundAndPause`\r\n- `restart`\r\n- `restartAndDeposit`\r\n- `withdrawAt`\r\n- `withdrawMax`\r\n\r\nRelated discussion: https://github.com/sablier-labs/v2-open-ended/issues/92. FYI cc @sablier-labs/engineers. Please object if you have any comments.","createdAt":"2024-05-21T15:49:30Z","labels":[],"number":97,"repository":"sablier-labs/flow","state":"closed","title":"List of public functions in Sablier flow","type":"discussion","updatedAt":"2024-06-03T16:37:45Z","url":"https://github.com/sablier-labs/flow/discussions/97"},{"author":"PaulRBerg","body":"ENS has a strange implementation of token streaming:\r\n\r\n```solidity\r\nfunction claimableBalance() public view returns(uint256) {\r\n      if(block.timestamp < startTime) {\r\n          return 0;\r\n      }\r\n  \r\n      uint256 end = endTime;\r\n      if(end > block.timestamp) {\r\n          end = block.timestamp;\r\n      }\r\n  \r\n      return (end - startTime) * streamingRate - totalClaimed;\r\n}\r\n\r\nfunction claim(address recipient, uint256 amount) external onlyOwner {\r\n      uint256 claimable = claimableBalance();\r\n      if(amount > claimable) {\r\n          amount = claimable;\r\n      }\r\n      totalClaimed += amount;\r\n      require(token.transferFrom(tokenSender, recipient, amount), \"TokenStream: Transfer failed\");\r\n      emit Claimed(recipient, amount);\r\n}\r\n```\r\n\r\nIt's an open-ended implementation, but it's a strange one. They seem to be continuously extending the end time.\r\n\r\nParameter values:\r\n\r\n- `startTime` is January 1, 2022\r\n- `end` is set to `type(uint256).max`\r\n- `streamingRate` is 133102, i.e., ~0.13 USDC per second\r\n\r\nI have not worked out the low-level details of how this contract plays out in practice. I am not sure what happens when the contract is not topped up - the `claimableBalance` value seems to keep increasing. And thus, the implementation seems to resemble LlamaPay.\r\n\r\nReferences:\r\n\r\n- https://contractreader.io/contract/mainnet/0xB1377e4f32e6746444970823D5506F98f5A04201\r\n- https://discuss.ens.domains/t/update-on-the-ens-streams-dates-rules-and-implementation/18138/19?u=prberg","createdAt":"2023-11-21T11:20:35Z","labels":[],"number":145,"repository":"sablier-labs/flow","state":"closed","title":"Investigate ENS' TokenStream contract","type":"discussion","updatedAt":"2024-06-03T16:23:08Z","url":"https://github.com/sablier-labs/flow/discussions/145"},{"author":"smol-ninja","body":"<sup>Original discussed between @smol-ninja and @andreivladbrg on Slack.</sup>\r\n\r\nIn `create` function, there is a check that revert if asset has 0 decimal:\r\n\r\nhttps://github.com/sablier-labs/flow/blob/b5f70b6fae489d841aca38564099bae304ba82cf/src/SablierV2OpenEnded.sol#L487-L490\r\n\r\nDecimal value plays a key role in normalising the amounts into 18 decimal format.\r\n\r\nhttps://github.com/sablier-labs/flow/blob/b5f70b6fae489d841aca38564099bae304ba82cf/src/SablierV2OpenEnded.sol#L312-L322\r\n\r\nHowever, since the decimal value is not used in the denominator, it does not seem to create any calculation issues. I think that we should allow 0 decimal tokens, regardless of their demand, because fundamentally they are no different than any other ERC20 token.\r\n\r\nWould love to hear your opinion [@sablier-labs/engineers](https://github.com/orgs/sablier-labs/teams/engineers).","createdAt":"2024-05-22T21:49:53Z","labels":[],"number":116,"repository":"sablier-labs/flow","state":"closed","title":"Should we allow ERC20 tokens with 0 decimal value?","type":"discussion","updatedAt":"2024-05-30T11:31:43Z","url":"https://github.com/sablier-labs/flow/discussions/116"},{"author":"smol-ninja","body":"The whole idea behind open-ended streams has been to solve for payrolls. However, different use cases can help us spec down / debate on some features which may not be seen as relevant for payroll.\r\n\r\nStarting this thread to share different possible use cases for open-ended.","createdAt":"2024-04-10T10:18:11Z","labels":[],"number":38,"repository":"sablier-labs/flow","state":"open","title":"Other use cases of open ended streams","type":"discussion","updatedAt":"2024-05-28T20:42:14Z","url":"https://github.com/sablier-labs/flow/discussions/38"},{"author":"smol-ninja","body":"Since there has been an ongoing discussion on using [`bulloak`](https://github.com/alexfertel/bulloak) in slack, I decided to give it a go today. Bulloak uses branch descriptions to generate function names, so I decided to keep the description as minimum as possible to prevent it from creating long names.\r\n\r\nAs an example, I refactored the following tree:\r\n\r\n```tree\r\nwithdrawableAmountOf.t.sol\r\n├── given the id references a null stream\r\n│  └── it should revert\r\n└── given the id does not reference a null stream\r\n   ├── given the stream balance is zero\r\n   │  └── it should return zero\r\n   └── given the stream balance is not zero\r\n      ├── given the stream balance is less than the remaining amount\r\n      │  └── it should return the balance\r\n      └── given the stream balance is not less than the remaining amount\r\n         ├── given the id references a paused stream\r\n         │  └── it should return the remaining amount\r\n         └── given the id does not reference a paused stream\r\n            ├── given the sum of the streamed amount and the remaining amount is less than the balance\r\n            │  └── it should return the balance\r\n            └── given the sum of the streamed amount and the remaining amount is not less than the balance\r\n               └── it should return the correct withdrawable amount \r\n```\r\ninto\r\n```tree\r\nWithdrawableAmountOf_Integration_Test\r\n├── given null\r\n│  └── it should revert\r\n└── given not null\r\n   ├── given canceled\r\n   │  └── it should return the remaining amount\r\n   └── given not canceled\r\n      ├── given zero balance\r\n      │  ├── given zero remainingAmount\r\n      │  │  └── it should return zero\r\n      │  └── given not zero remaining amount\r\n      │     └── it should return the remaining amount\r\n      └── given not zero balance\r\n         ├── given balance greater than streamedAmount\r\n         │  └── it should return the balance plus the remaining amount\r\n         └── given balance not greater than streamedAmount\r\n            └── it should return the correct withdrawable amount\r\n```\r\nwhich generated the following test\r\n\r\n<details><summary>Click to expand test contract</summary>\r\n\r\n```solidity\r\ncontract WithdrawableAmountOf_Integration_Test {\r\n    function test_RevertGiven_Null() external {\r\n        // it should revert\r\n    }\r\n\r\n    modifier givenNotNull() {\r\n        _;\r\n    }\r\n\r\n    function test_GivenCanceled() external givenNotNull {\r\n        // it should return the remaining amount\r\n    }\r\n\r\n    modifier givenNotCanceled() {\r\n        _;\r\n    }\r\n\r\n    modifier givenZeroBalance() {\r\n        _;\r\n    }\r\n\r\n    function test_GivenZeroRemainingAmount() external givenNotNull givenNotCanceled givenZeroBalance {\r\n        // it should return zero\r\n    }\r\n\r\n    function test_GivenNotZeroRemainingAmount() external givenNotNull givenNotCanceled givenZeroBalance {\r\n        // it should return the remaining amount\r\n    }\r\n\r\n    modifier givenNotZeroBalance() {\r\n        _;\r\n    }\r\n\r\n    function test_GivenBalanceGreaterThanStreamedAmount() external givenNotNull givenNotCanceled givenNotZeroBalance {\r\n        // it should return the balance plus the remaining amount\r\n    }\r\n\r\n    function test_GivenBalanceNotGreaterThanStreamedAmount()\r\n        external\r\n        givenNotNull\r\n        givenNotCanceled\r\n        givenNotZeroBalance\r\n    {\r\n        // it should return the correct withdrawable amount\r\n    }\r\n}\r\n```\r\n</details>\r\n\r\nI think It does decreases the developer experience but at the same time, it makes tests generation and check automated by using `bulloak` commands.\r\n\r\nWdyt @sablier-labs/solidity? Does shortening the tree, like above, look good? ","createdAt":"2024-05-21T22:12:16Z","labels":[],"number":111,"repository":"sablier-labs/flow","state":"closed","title":"Using `bulloak` to generate test contracts from tree","type":"discussion","updatedAt":"2024-05-27T21:57:12Z","url":"https://github.com/sablier-labs/flow/discussions/111"},{"author":"smol-ninja","body":"The batch functions such as withdraw-multiple and cancel-multiple revert if the execution of one of the stream IDs reverts. In such cases, the reverted transaction would consume a lot of gas because of the nature of the batch functions.\r\n\r\nThus, I would like to suggest that instead of reverting the entire transaction, it should proceed with the valid stream IDs and ignore the invalid ones.\r\n\r\n```solidity\r\nfunction cancelMultiple(uint256[] calldata streamIds) external override {\r\n    for (uint256 i = 0; i < streamIds.length; ++i) {\r\n        try cancel(streamIds[i]) {\r\n        } catch Error(string memory reason){\r\n            emit Log(reason);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFor invalid IDs, the `catch` block should catch and emit the reverting error. This would help the user identify the invalid IDs by looking at the explorer.  \r\n\r\n\r\nThis offers three advantages to the users:\r\n\r\n1. The transaction cost would not be wasted if some of the IDs are invalid.\r\n2. Since it would execute the valid ones, the user would not have to re-execute in case an invalid ID has been accidentally inserted.\r\n3. It can also be very useful in case of `withdrawMultiple`. Anyone can run a keeper job that would keep calling `withdrawMultiple` on all stream IDs without fail.","createdAt":"2024-05-07T21:22:20Z","labels":[],"number":69,"repository":"sablier-labs/flow","state":"closed","title":"Why do we need to revert a batch execution if one of the execution reverts?","type":"discussion","updatedAt":"2024-05-27T21:55:15Z","url":"https://github.com/sablier-labs/flow/discussions/69"},{"author":"smol-ninja","body":"Originally shared [here](https://github.com/sablier-labs/v2-open-ended/discussions/55#discussioncomment-9285605) and discussed [here](https://github.com/sablier-labs/v2-open-ended/discussions/58) in details.\r\n\r\nThe idea is to include a `batch` function which can be used to construct an array of calls to multiple public functions from the core contract.\r\n\r\n```solidity\r\nfunction batch(bytes[] calldata calls, bool revertOnFail) external payable {\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n        (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n        if (!success && revertOnFail) {\r\n            _getRevertMsg(result);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n- The above function can be seen as a replacement of the [separate periphery contract](https://github.com/sablier-labs/v2-open-ended/discussions/74) and it can be used to expose any API through the user interface.\r\n\r\n- Since it's a delegate call to itself and `batch` can only be applied to public functions, this no additional risks are introduced by it.\r\n\r\n- No need to remove the `noDelegateCall` modifier. The delegate call is made from the contract itself and not from an outside proxy contract. \r\n\r\n```solidity\r\nfunction _preventDelegateCall() private view {\r\n    if (address(this) != ORIGINAL) {\r\n        revert Errors.DelegateCall();\r\n    }\r\n}\r\n```\r\n\r\nIn the above function, `address (this) == ORIGINAL` always.\r\n\r\n## Example\r\n\r\n```solidity\r\nbytes[] memory calls = new bytes[](2);\r\ncalls[0] = abi.encodeWithSelector(ISablierOpenEnded.create.selector, sender, recipient, ratePerSecond, asset);\r\ncalls[1] = abi.encodeWithSelector(ISablierOpenEnded.deposit.selector, OpenEnded.nextStreamId(), amount);\r\nopenEnded.batch(calls, true);\r\n```\r\n\r\nFWIW Uniswap also has [a similar function](https://etherscan.io/address/0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad#code#F1#L28).\r\n\r\n@sablier-labs/everybody.","createdAt":"2024-05-20T10:10:37Z","labels":[],"number":88,"repository":"sablier-labs/flow","state":"closed","title":"`batch` function to replace separate periphery contract","type":"discussion","updatedAt":"2024-05-27T21:53:04Z","url":"https://github.com/sablier-labs/flow/discussions/88"},{"author":"smol-ninja","body":"Minimum Viable Features (MVF):\r\n\r\n- cancelMultiple\r\n- createMultiple\r\n- createMultipleAndDepositMultiple\r\n- withdrawMultiple\r\n\r\nRefer https://github.com/sablier-labs/v2-open-ended/discussions/7","createdAt":"2023-12-10T22:41:55Z","labels":[],"number":74,"repository":"sablier-labs/flow","state":"closed","title":"Periphery contracts","type":"discussion","updatedAt":"2024-05-27T15:24:09Z","url":"https://github.com/sablier-labs/flow/discussions/74"},{"author":"PaulRBerg","body":"See context [here](https://github.com/sablier-labs/v2-open-ended/discussions/83).","createdAt":"2024-05-20T17:41:02Z","labels":[],"number":94,"repository":"sablier-labs/flow","state":"closed","title":"Poll for new name","type":"discussion","updatedAt":"2024-05-21T15:32:22Z","url":"https://github.com/sablier-labs/flow/discussions/94"},{"author":"andreivladbrg","body":"Initially posted in the PR: https://github.com/sablier-labs/v2-open-ended/pull/77\r\n\r\nSince `create` and `deposit` are distinct operations, the most logical place to implement the `Broker` logic is in `deposit` because that is where the `ERC20` transfer occurs. Therefore, I suggest adding another function called `depositWithBroker` instead of modifying the current `deposit` function.\r\n\r\nThe motivation is as follows: Unlike the `lockup` contracts, where the `create` function (where the token transfer happens) is called once for a unique `streamId,` here deposit might be called multiple times (the whole idea with OE is to have top-ups) for a unique ID. Therefore, to improve the DX—and since the broker param is most often set as `address(0)` and 0%—let’s have a default `deposit` function (current version) and add another with the `Broker` parameter. This way, we mentain the business improvements, by allowing other UIs to profit from our contract, without consuming extra gas for each regular top made through our app.\r\n\r\n```solidity\r\n    function depositWithBroker(uint256 streamId, uint128 totalAmount, Broker calldata broker) external {\r\n        if (broker.fee.gt(MAX_BROKER_FEE)) {\r\n            revert Errors.SablierV2OpenEnded_BrokerFeeTooHigh(broker.fee, MAX_BROKER_FEE);\r\n        }\r\n        uint128 brokerFeeAmount;\r\n        uint128 brokerTransferAmount;\r\n        uint128 depositAmount;\r\n\r\n        if (broker.fee.gt(ud(0))) {\r\n            unchecked {\r\n                brokerFeeAmount = ud(totalAmount).mul(broker.fee).intoUint128();\r\n                depositAmount = totalAmount - brokerFeeAmount;\r\n            }\r\n            brokerTransferAmount = _calculateTransferAmount(streamId, brokerFeeAmount);\r\n        }\r\n\r\n        deposit(streamId, depositAmount);\r\n\r\n        // Make here the broker transfer to keep the CEI pattern.\r\n        if (brokerTransferAmount > 0) {\r\n            _streams[streamId].asset.safeTransferFrom({ from: msg.sender, to: broker.account, value: brokerTransferAmount });\r\n        }\r\n    }\r\n```\r\n\r\n---\r\n\r\n#### Pros\r\n\r\n1. More gas efficient for the default version\r\n2. DX improved for integrators who don't care about the Broker (most of them)\r\n3. A more minimalist API where \"andDeposit\" functions don't need to implement `Broker` param (e.g. `createAndDeposit` or `restartAndDeposit`)`\r\n\r\n#### Cons\r\n\r\n1. The contract ABI is increased by one or two functions\r\n\r\n--- \r\n\r\nIMO, the pros outweigh the cons.\r\n\r\n@sablier-labs/solidity @razgraf wdyt?","createdAt":"2024-05-16T23:32:17Z","labels":[],"number":84,"repository":"sablier-labs/flow","state":"closed","title":"Add a different deposit function with the Broker parameter","type":"discussion","updatedAt":"2024-05-21T11:46:56Z","url":"https://github.com/sablier-labs/flow/discussions/84"},{"author":"smol-ninja","body":"Seems like we might need a new name for open ended.\r\n\r\nSuggestion by @PaulRBerg:\r\n\r\n- Continuous\r\n- Flow\r\n- FlexFlow\r\n- Everflow\r\n- Progressive\r\n- TopUp\r\n\r\nSuggestions by @smol-ninja:\r\n- Unlock (opposite of locked which is lockup)\r\n- OpenFlow\r\n- Infinio\r\n- Pulse\r\n- Eien (its a Japanese word for eternity)\r\n\r\nOnce again, request for new names @sablier-labs/everybody.","createdAt":"2024-05-16T21:28:43Z","labels":[],"number":83,"repository":"sablier-labs/flow","state":"closed","title":"Name suggestions for Open ended","type":"discussion","updatedAt":"2024-05-20T17:43:15Z","url":"https://github.com/sablier-labs/flow/discussions/83"},{"author":"smol-ninja","body":"## Context\r\n\r\nCurrently, `pause()` sets `debt` to 0. As I mentioned [here](https://github.com/sablier-labs/v2-open-ended/discussions/70#discussioncomment-9471426), I see value in carrying the accumulated `debt` forward even after pausing the stream[^1].\r\n\r\n## Use case\r\n\r\nConsider the following scenario:\r\n\r\n1. Alice (payer) and Bob (payee) have an ongoing stream with accumulated debt .\r\n2. Alice cannot fulfll her obligation because of lack of funds. To stop further liability, they decide to pause the stream, i.e. stop further debt accumulation.\r\n3. Alice promises Bob to pay the accumulated debt once she receives funding from investors..\r\n\r\nI believe this situation is common. If we allow `pause()` to set debt to zero, the protocol won't support such scenario.\r\n\r\n## Voiding the debt\r\n\r\nIf Alice cannot fulfill her debt obligation, she can discuss with Bob to void the debt. In this case, we can introduce a \"recipient-only\" function called `void()`, as [discussed here](https://github.com/sablier-labs/v2-open-ended/discussions/57), which sets `debt` and `ratePerSecond` to 0.\r\n\r\n## Table\r\n\r\n| Functions | Access control | Actions |\r\n| --- | --- | ---|\r\n| `pause()` | Sender | `ratePerSecond = 0` |\r\n| `void()` | Recipient | `ratePerSecond = 0` and `debt = 0` |\r\n\r\n## Final note\r\n\r\nThis feature is not useful if there is always capital to repay the debt. But in real situations, there could be many many cases where companies want to repay the debt in the far future without voiding it at the time of pausing.\r\n\r\nRFC @sablier-labs/solidity @maxdesalle @razgraf.\r\n\r\n[^1]: For this discussion, we will assume `pause` and `cancel` are same as decide [here](https://github.com/sablier-labs/v2-open-ended/discussions/46#discussioncomment-9450283).","createdAt":"2024-05-17T15:38:05Z","labels":[],"number":86,"repository":"sablier-labs/flow","state":"closed","title":"Should we carry forward the `debt` after the stream has been paused?","type":"discussion","updatedAt":"2024-05-20T10:54:15Z","url":"https://github.com/sablier-labs/flow/discussions/86"},{"author":"razgraf","body":"Say I have a stream of 1000$/month, I keep it open for 3 months but only fund it with 1000$. At the end of the period, I have 2000$ in debt. \r\n\r\nWhat happens when I cancel/stop the payment?\r\n- should the sender be allowed to cancel only if they pay the debt? (might be linked to #57, as they could ask the recipient to void it first if they don't want to pay)\r\n- should I be able to cancel/stop/pause it without paying the debt?\r\n\r\nFollow-up questions: based on the answers for the above, should we have utilities like \"payDebtAndCancelStream\" to be able do do everything in one tx?\r\n\r\n\r\nCC: @smol-ninja @andreivladbrg \r\n","createdAt":"2024-04-30T12:25:33Z","labels":[],"number":58,"repository":"sablier-labs/flow","state":"closed","title":"What happens with debt when a stream is canceled?","type":"discussion","updatedAt":"2024-05-20T11:29:20Z","url":"https://github.com/sablier-labs/flow/discussions/58"},{"author":"smol-ninja","body":"How about we add a `pause()` function? It is technically similar to `cancel` except that there is no refund. This function can be used as a solution to [Discussion: Scheduled paused periods to enable unpaid time off](https://github.com/sablier-labs/v2-open-ended/discussions/22).\r\n\r\n```solidity\r\n/// @notice Pauses the stream by setting ratePerSecond = 0.\r\n///\r\n/// @dev Emits a {PauseOpenEndedStream} event.\r\n///\r\n/// Requirements:\r\n/// - `msg.sender` must be the stream's sender.\r\n///\r\n/// @param streamId The id of the stream to pause.\r\nfunction pause(uint256 streamID) external;\r\n```\r\n\r\n### Why?\r\nBy calling `pause()`, the sender intends to temporarily pause the stream to continue in the future. A similar behaviour can be achieved by calling `cancel()` followed by `restartStreamAndDeposit()` but the psychological barrier to distinguish between cancelling and pausing is too high. Thus I propose to implement a `pause` function in Open-ended.\r\n\r\n### Unpausing\r\nTo unpause, sender can call `restartStream()`.","createdAt":"2024-04-15T15:50:37Z","labels":[],"number":46,"repository":"sablier-labs/flow","state":"closed","title":"`pause()` functionality to temporarily pause the stream","type":"discussion","updatedAt":"2024-05-20T09:36:47Z","url":"https://github.com/sablier-labs/flow/discussions/46"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe've received this feature request from Micah Zoltu today. I will share screenshots of the Discord conversation with him so I don't have to paraphrase the discussion.\r\n\r\n<img width=\"400\" alt=\"micah-1\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/5525191f-ebe4-4e57-82ec-c4fd17f2bae1\">\r\n<img width=\"400\" alt=\"micah-2\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/820af3bb-1c2f-41be-be11-62063c6829bc\">\r\n<img width=\"400\" alt=\"micah-3\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/c217c480-b252-40d9-9121-89030b98f884\">\r\n<img width=\"400\" alt=\"micah-4\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/9e26f5ad-0bd2-4a67-b3a3-dfc70a57f3b4\">\r\n<img width=\"400\" alt=\"micah-5\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/861f41cc-55fc-4b7e-b29d-1b81261d88a8\">\r\n<img width=\"400\" alt=\"micah-6\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/3786f7f7-0fcd-427e-8761-9a9d1469ddd6\">\r\n\r\n## Implementation\r\n\r\nTBD (I will edit this discussion later).","createdAt":"2024-01-02T13:00:25Z","labels":[],"number":22,"repository":"sablier-labs/flow","state":"closed","title":"Scheduled paused periods to enable unpaid time off","type":"discussion","updatedAt":"2024-05-20T09:25:38Z","url":"https://github.com/sablier-labs/flow/discussions/22"},{"author":"smol-ninja","body":"In the current design, the following functions reset the debt to zero by updating `lastTimeUpdate` to `block.timestamp` through `_updateTime()` function:\r\n- `adjustRatePerSecond`\r\n- `restartStream`\r\n\r\nProblems with this approach:\r\n- Imagine an employer wants to `cancel` the stream as he does not want to continue to accumulate debt anymore. But after one month, he then decides to `restart` it. Now this will reset the debt.\r\n- A company increases the salary of an employee which means changing `rps` but doesn't have funds to pay the debt. \r\n\r\nThe following function does not reset the debt:\r\n- `cancel`\r\n\r\nFuture functions that would reset the debt:\r\n- `void`\r\n- `payDebtAndCancelStream`\r\n\r\nIt brings up a very interesting question: what functions should be allowed to reset the debt value to 0 if accumulated over a period of time?\r\n\r\nRelated discussions:\r\n- https://github.com/sablier-labs/v2-open-ended/discussions/60\r\n- https://github.com/sablier-labs/v2-open-ended/discussions/58\r\n- https://github.com/sablier-labs/v2-open-ended/discussions/57\r\n- https://github.com/sablier-labs/v2-open-ended/discussions/34","createdAt":"2024-05-01T12:08:28Z","labels":[],"number":64,"repository":"sablier-labs/flow","state":"closed","title":"When should `debt` reset to zero?","type":"discussion","updatedAt":"2024-05-17T15:47:50Z","url":"https://github.com/sablier-labs/flow/discussions/64"},{"author":"smol-ninja","body":"### Suggestions\r\n\r\n1. Rename [`_calculateTransferAmount`](https://github.com/sablier-labs/v2-open-ended/blob/main/src/SablierV2OpenEnded.sol#L265) to `_normalizeDecimalsTo18` to accurately represents its functionality and can be set as a pure function.\r\n2. Modify [`_deposit`](https://github.com/sablier-labs/v2-open-ended/blob/main/src/SablierV2OpenEnded.sol#L500) to use the provided user value without requiring pre-normalization. Currently, the `_deposit` function expects users to input a normalized value, causing inconvenience and potential errors. By allowing this function to accept the exact amount of the asset's decimals and internally normalizing it will simplify user interactions and prevent miscalculations.\r\n\r\n### Context\r\n\r\nThe `_deposit` function currently requires users to manually convert their asset amounts to match the contract's expected 18-decimal format. By modifying this function to handle the normalization internally, users can directly input their desired asset amount, reducing complexity.\r\n\r\nCurrent _deposit Function:\r\n```solidity\r\n    function _deposit(uint256 streamId, uint128 amount) internal {\r\n        // Effects: update the stream balance.\r\n        _streams[streamId].balance += amount;\r\n\r\n        // Retrieve the ERC-20 asset from storage.\r\n        IERC20 asset = _streams[streamId].asset;\r\n\r\n        // Calculate the transfer amount.\r\n        uint128 transferAmount = _calculateTransferAmount(streamId, amount);\r\n\r\n        // Interactions: transfer the deposit amount.\r\n        asset.safeTransferFrom(msg.sender, address(this), transferAmount);\r\n\r\n        // Log the deposit.\r\n        emit ISablierV2OpenEnded.DepositOpenEndedStream(streamId, msg.sender, asset, amount);\r\n    }\r\n```\r\n\r\nConsider the following scenario: A user wishes to deposit 1000 USDC (= ${1000}*10^{6}$). He will have to back calculate the normalized amount, ${1000}*10^{18}$ in this case, and use that as an input to the above function. \r\n\r\nUpdated _deposit Function:\r\n```solidity\r\n    function _deposit(uint256 streamId, uint128 amount) internal {\r\n        // Effects: update the stream balance.\r\n        _streams[streamId].balance += normalizeDecimalsTo18(amount);\r\n\r\n        // Retrieve the ERC-20 asset from storage.\r\n        IERC20 asset = _streams[streamId].asset;\r\n\r\n        // Interactions: transfer the deposit amount.\r\n        asset.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // Log the deposit.\r\n        emit ISablierV2OpenEnded.DepositOpenEndedStream(streamId, msg.sender, asset, amount);\r\n    }\r\n```\r\nIn this approach, user does not have to do any additional calculation. \r\n\r\nNew _normalizeDecimalsTo18 function:\r\n```solidity\r\n    function _normalizeDecimalsTo18(\r\n        uint256 streamId,\r\n        uint128 amount\r\n    )\r\n        internal\r\n        view\r\n        returns (uint128 normalizedAmount)\r\n    {\r\n       // ............\r\n\r\n        // Calculate the difference in decimals.\r\n        uint8 normalizationFactor = isGreaterThan18 ? assetDecimals - 18 : 18 - assetDecimals;\r\n\r\n        // Change the transfer amount based on the decimal difference.\r\n        normalizedAmount = isGreaterThan18\r\n            ? (amount / (10 ** normalizationFactor)).toUint128()\r\n            : (amount * (10 ** normalizationFactor)).toUint128();\r\n    }\r\n```\r\n\r\nSimilarly, all other public functions will use the same design where they accept exact amount of the asset's decimals and internally normalize it.\r\n\r\n### Advantages\r\n1. Users won't have to worry about the normalization before making a deposit. This simplies user interactions and reduce the chance of errors.\r\n2. `_normalizeDecimalsTo18` accurately represents its functionality and can be set as a pure function.\r\n\r\nWould love to have comments from @andreivladbrg and @IaroslavMazur what do you think?","createdAt":"2023-12-08T12:07:36Z","labels":[],"number":8,"repository":"sablier-labs/flow","state":"closed","title":"Modify `_deposit` and other functions to accept the exact amount of the asset's decimals and internally normalizing it","type":"discussion","updatedAt":"2024-05-17T15:41:31Z","url":"https://github.com/sablier-labs/flow/discussions/8"},{"author":"smol-ninja","body":"<sup>Originally discussed [in this issue](https://github.com/sablier-labs/v2-open-ended/pull/49).</sup>\r\n\r\n## Context\r\n\r\nAs decided [here](https://github.com/sablier-labs/v2-open-ended/issues/10), we've included peripheral functions in `SablierV2OpenEnded.sol` which has resulted into [one big contract](https://github.com/sablier-labs/v2-open-ended/blob/main/src/SablierV2OpenEnded.sol). There are a few issues with it:\r\n1. Too many public functions in the same contract make it difficult to review the code.\r\n2. Some functions just call other public functions. For example, `createAndDepositMultiple` simply makes calls to `createMultiple` and `depositMultiple`. This makes it difficult to separate core logic from the peripheral logic.\r\n\r\n## Proposal\r\n\r\nI would like propose to separate functions that can be classified as peripheral.\r\n\r\n1. Define a new contract called `SablierV2OpenEndedBase.sol` in the `abstracts` folder. Thereby moving all the internal and core functions here.\r\n2. `SablierV2OpenEnded` would inherit from `SablierV2OpenEndedBase` and implement periphery related functions.\r\n\r\n### Public functions in `SablierV2OpenEndedBase`\r\n1. adjustRatePerSecond\r\n2. cancel\r\n3. create\r\n4. deposit\r\n5. restartStream -> how about we call it `restart`?\r\n6. refundFromStream -> how about we call it `refund`?\r\n7. withdraw\r\n\r\n### Public functions in `SablierV2OpenEnded`\r\n1. cancelMultiple\r\n2. createAndDeposit\r\n3. createMultiple\r\n4. createAndDepositMultiple\r\n5. depositMultiple\r\n6. restartStreamAndDeposit\r\n7. withdrawMultiple\r\n8. withdrawMax","createdAt":"2024-04-29T13:40:38Z","labels":[],"number":55,"repository":"sablier-labs/flow","state":"closed","title":"Split `SablierV2OpenEnded.sol` into `SablierV2OpenEndedBase.sol` and `SablierV2OpenEnded.sol`","type":"discussion","updatedAt":"2024-05-17T15:40:05Z","url":"https://github.com/sablier-labs/flow/discussions/55"},{"author":"smol-ninja","body":"In open-ended, since there is no concept of \"operators\" or \"approved third party\", should we remove test branches that deal with malicious third party as the caller?\r\n\r\nTake the following example from [`cancel.tree`](https://github.com/sablier-labs/v2-open-ended/blob/main/test/integration/cancel/cancel.tree):\r\n\r\n```tree\r\ncancel.t.sol\r\n// --- snip --- //\r\n          ├── when the caller is unauthorized\r\n          │  ├── when the caller is the recipient\r\n          │  │  └── it should revert\r\n          │  └── when the caller is a malicious third party\r\n          │     └── it should revert\r\n          └── when the caller is authorized\r\n// --- snip --- //\r\n```\r\n\r\nHowever, we could just say\r\n\r\n```tree\r\ncancel.t.sol\r\n// --- snip --- //\r\n          ├── when the caller is not sender\r\n          │  └── it should revert\r\n          └── when the caller is sender\r\n// --- snip --- //\r\n```\r\n\r\nIt simplifies the integration test and makes it clearer who the caller is.\r\n\r\nWhat do you think @andreivladbrg ?","createdAt":"2024-05-01T17:13:24Z","labels":[],"number":65,"repository":"sablier-labs/flow","state":"closed","title":"How should we deal with redundant branches?","type":"discussion","updatedAt":"2024-05-10T10:08:19Z","url":"https://github.com/sablier-labs/flow/discussions/65"},{"author":"smol-ninja","body":"### Motivation\r\n\r\n- An array of `time` cannot trigger a full withdrawal due to unpredictability of `block.timestamp`\r\n- That means, it wouldn't work if the intent is to withdraw the \"full\" amount from multiple streams which imo is going to be more common.\r\n\r\nThat is why I suggest to remove `uint40[] calldata times` from it and use `block.timestamp` instead.\r\n\r\n```solidity\r\nfunction withdrawMultiple(uint256[] calldata streamIds) external;\r\n```\r\n\r\ninstead of \r\n\r\n```solidity\r\nfunction withdrawMultiple(uint256[] calldata streamIds, uint40[] calldata times) external;\r\n```\r\n\r\n**Side note**: If a user intents to include `time` in `withdrawMultiple`, they can do it programatically using `withdraw` function.","createdAt":"2024-04-27T16:31:51Z","labels":[],"number":53,"repository":"sablier-labs/flow","state":"closed","title":"Refactor `withdrawMultiple` to in include `block.timestamp`","type":"discussion","updatedAt":"2024-05-10T09:34:22Z","url":"https://github.com/sablier-labs/flow/discussions/53"},{"author":"smol-ninja","body":"I would like suggest the following changes:\r\n\r\n1. \r\n```solidity\r\n// Rename\r\nfunction withdrawMax(uint256 streamId, address to) external;\r\n// to\r\nfunction withdraw(uint256 streamId, address to) external;\r\n```\r\n**Rationale**: >90% of users would just like to withdraw maximum amount\r\n\r\n2.\r\n```solidity\r\n// Rename\r\nfunction withdraw(uint256 streamId, address to, uint40 time) external;\r\n// to\r\nfunction withdrawAt(uint256 streamId, address to, uint40 time) external;\r\n```\r\n**Rationale**: This should be treated as a special function that withdraws at a time t.","createdAt":"2024-04-27T16:38:41Z","labels":[],"number":54,"repository":"sablier-labs/flow","state":"closed","title":"Refactor `withdraw` and `withdrawMax`","type":"discussion","updatedAt":"2024-05-10T09:31:44Z","url":"https://github.com/sablier-labs/flow/discussions/54"},{"author":"PaulRBerg","body":"## Context\r\n\r\nMichael Lewellen from OpenZeppelin is interested in beta testing our OpenEnded product. [I met him in person in London](https://www.notion.so/sablier/Michael-Lewellen-OpenZeppelin-e214b4026ea1468889c4673ec2106e86), and presented our plans to him.\r\n\r\nDuring our conversation about their needs, I came up with this idea.\r\n\r\n## Idea\r\n\r\nAdd a new function called `void` with the following **requirements**:\r\n\r\n- Can only be called by the recipient\r\n- Can only be called when the debt exceeds zero\r\n\r\nAnd the following **behavior**:\r\n\r\n- Sets the debt to zero\r\n- Stops the stream from accruing debt in the future\r\n\r\n## Benefits\r\n\r\nImplementing this feature would improve the accounting experience since it would enable recipients to signal to their accountants that \"hey, we are no longer observing stream X, please ignore it\".\r\n\r\nFurthermore, this would provide Sablier with a competitive advantage over LlamaPay, which to my knowledge doesn't implement such a feature.\r\n\r\nCC @sablier-labs/solidity and @razgraf","createdAt":"2024-04-30T12:12:45Z","labels":[],"number":57,"repository":"sablier-labs/flow","state":"closed","title":"Voiding streams with negative debt for improved accounting","type":"discussion","updatedAt":"2024-05-09T10:14:48Z","url":"https://github.com/sablier-labs/flow/discussions/57"},{"author":"smol-ninja","body":"## Problem\r\n\r\nIf `sender` changes the `ratePerSecond`, `streamDebtOf` returns 0. That means by changing the `rps` of the stream, the stream loses track of how much the `sender` owes to the recipient. This should not be allowed.\r\n\r\n## Potential solutions\r\n\r\n1. Does not allow the sender to change `rps` when debt > 0.\r\n2. Store debt in a separate storage variable.","createdAt":"2024-04-30T15:47:28Z","labels":[],"number":60,"repository":"sablier-labs/flow","state":"closed","title":"Changing `ratePerSecond` resets Debt","type":"discussion","updatedAt":"2024-05-01T12:08:49Z","url":"https://github.com/sablier-labs/flow/discussions/60"},{"author":"smol-ninja","body":"### Motivation\r\n1. There is only one contract.\r\n2. All errors are emitted from `SablierV2OpenEnded` contract.\r\n3. Prefixing errors with `SablierV2OpenEnded` makes them longer to read.\r\n4. In lockup contracts it makes sense to use prefix because it has more than one contract.","createdAt":"2024-04-26T11:53:45Z","labels":[],"number":51,"repository":"sablier-labs/flow","state":"closed","title":"Should we remove `SablierV2OpenEnded` prefix from error names?","type":"discussion","updatedAt":"2024-04-29T13:16:51Z","url":"https://github.com/sablier-labs/flow/discussions/51"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/v2-open-ended/pull/4#discussion_r1386576612","createdAt":"2023-11-27T23:41:05Z","labels":[],"number":5,"repository":"sablier-labs/flow","state":"closed","title":"Investigate if we can change the `time` parameter in `withdraw` function","type":"discussion","updatedAt":"2024-04-21T20:22:06Z","url":"https://github.com/sablier-labs/flow/discussions/5"},{"author":"andreivladbrg","body":"In `v2-core`, the reasons behind the optimized profile structure is that we need to run contracts with `via_ir` - otherwise, the contracts would exceed the maximum contract size limit of approximately 24kb. Also because we faced issues with the \"stack too deep\" error.\r\n\r\n<details><summary>Lockup contracts compiled with the default profile</summary>\r\n\r\n<img width=\"502\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/99738872/9d82d69d-b29a-4e7d-9d3a-732e786c4f97\">\r\n\r\n</details> \r\n\r\nFor the OE contract, it is still far from reaching the contract size limit:\r\n\r\n<details><summary>OE contract compiled with the default profile</summary>\r\n\r\n<img width=\"414\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/99738872/d277acaf-7539-454e-9fcf-fc4e4ffcb28e\">\r\n\r\n</details> \r\n\r\nBenefits of having the same profile structure:\r\n- it will slightly optimize the contract, but only if we set the optimizer runs to a much higher number than [1000](https://github.com/sablier-labs/v2-core/blob/660f06c7e6b6d849d97c704e5c3ea509a87e52fb/foundry.toml#L13-L14).\r\n\r\nCons:\r\n- quote from [cameel](https://github.com/cameel): \"the performance is still not good enough\"\r\n- it will increase the complexity of the project and slow down the development process \r\n\r\nMy recommendation is to keep only the default profile for now and see how the development process go.\r\n\r\nWhat do you say? @sablier-labs/solidity ","createdAt":"2024-04-10T14:30:14Z","labels":[],"number":42,"repository":"sablier-labs/flow","state":"closed","title":"What foundry profiles should we have?","type":"discussion","updatedAt":"2024-04-18T17:54:17Z","url":"https://github.com/sablier-labs/flow/discussions/42"},{"author":"andreivladbrg","body":"### Context\r\n\r\nIn [v2-core](https://github.com/sablier-labs/v2-core) the create functions are called: \r\n- LockupLinear\r\n  - `createWithDurations`\r\n  - `createWithRange`\r\n- LockupDynamic\r\n  - `createWithDeltas`\r\n  - `createWithMilestones`\r\n\r\nIn the `OpenEnded` conctract atm we have only one `create` function which is named simply \"create\".\r\n\r\nSince additional logic for this contract will need to be added to the periphery, it's likely that we'll share the same periphery between `v2-core` and `v2-open-ended`. And we would have only one `Batch` contract.\r\n\r\nQuestion: wouldn't it be confusing to have a function simply called `create` there? \r\n\r\nFor context, the functions are called like this:\r\n```solidity \r\n// for lockup\r\nbatch.createWithDurations(lockupLinear, asset, params);\r\nbatch.createWithRange(lockupLinear, asset, params);\r\nbatch.createWithDeltas(lockupDynamic, asset, params);\r\nbatch.createWithMilestones(lockupDynamic, asset, params);\r\n// for open-ended\r\nbatch.create(openEnded, assset, params);\r\n```\r\n\r\nAtm, I don't have suggestions, will come later here if any good idea comes to mind\r\n","createdAt":"2023-12-08T12:54:36Z","labels":[],"number":9,"repository":"sablier-labs/flow","state":"closed","title":"Should we find a new name for the `create` function?","type":"discussion","updatedAt":"2024-04-16T09:09:22Z","url":"https://github.com/sablier-labs/flow/discussions/9"},{"author":"smol-ninja","body":"Context\r\n--------\r\nThe current design of open-ended streams requires senders to deposit funds into each stream they create. We should explore a new feature where instead of manually funding each stream, the sender can deposit a total sum into a pool. This pool would then be used to fund all the streams created by the sender, eliminating the need for individual stream funding. An alternative approach could be to let Sender provide sufficient allowance to Sablier contracts which could then be used to fulfil withdrawals. \r\n\r\nMotivation\r\n-------\r\nRecently, ENS DAO [expressed a desire to pay recipients](https://discuss.ens.domains/t/rfp-stream-platform-for-ens-service-providers/18448/8) through open-ended streams, where DAO would vote to send funds to one contract which could be used to fund all the streams created by them. Our current design cannot support this as it requires each stream to be funded manually.\r\n\r\nBenefits\r\n---------\r\n- Reduces gas fees as it only requires one transaction to fund all streams.\r\n- Low maintenance as it eliminates the need for individual stream funding.\r\n\r\nArguments\r\n------\r\n- As pointed by Iaro, [comment](https://github.com/sablier-labs/company-discussions/discussions/6#discussioncomment-7876963), and Andrei, [comment](https://github.com/sablier-labs/v2-open-ended/discussions/7#discussioncomment-7799411), it could create a poor user experience for recipients if the sender accrues debt. In such cases, the withdrawals would be on a first come first served basis, which could disadvantage slower recipients.\r\n\r\n- The `depositMultiple` function offers a similar experience where you can deposit to multiple streams with a single transaction. However, creating a new stream would require an additional deposit and it lacks composability among streams and modifying stream would require handling funds as well.\r\n  \r\nHowever, while these points are totally valid, for DAOs and non-retail users, who are motivated to ensure the streams always have enough funds, this could be a better design. Instead of changing our current design, we can provide it as a **feature** where senders can choose to have a single pool to fund or allowance-based funding for the streams.\r\n\r\nImplementation\r\n-----\r\nWill add later.","createdAt":"2024-01-02T12:55:55Z","labels":[],"number":21,"repository":"sablier-labs/flow","state":"closed","title":"Single pool powered streams / Allowance based streams","type":"discussion","updatedAt":"2024-04-15T15:35:49Z","url":"https://github.com/sablier-labs/flow/discussions/21"},{"author":"andreivladbrg","body":"A useful feature for lockup streams is the hooks.\r\n\r\nIn the context of open-ended, I personally believe they wouldn't be that helpful since:\r\n- the product is oriented towards the sender\r\n- we don't have NFTs\r\n\r\nI am opening this discussion to see if you have other opinions.\r\n\r\n@sablier-labs/solidity","createdAt":"2024-04-08T12:38:43Z","labels":[],"number":33,"repository":"sablier-labs/flow","state":"closed","title":"Should we add hooks?","type":"discussion","updatedAt":"2024-04-15T13:18:22Z","url":"https://github.com/sablier-labs/flow/discussions/33"},{"author":"razgraf","body":"Should there be a flag per stream that only allows the rate-per-second to be adjusted up (as in only go higher)?","createdAt":"2024-04-10T10:34:49Z","labels":[],"number":39,"repository":"sablier-labs/flow","state":"closed","title":"Should we implement an \"higher only\" flag?","type":"discussion","updatedAt":"2024-04-16T14:10:21Z","url":"https://github.com/sablier-labs/flow/discussions/39"},{"author":"razgraf","body":"Some users have asked us about adjusting the streaming rate (basically increasing or decreasing the amount streamed) based on some external oracle. This should already be possible manually (e.g. increasing the salary of a user with `_adjustRatePerSecond`) but I was wondering what we could suggest/implement that would bring some sort of automated adjusting into play, including something like an optimistic oracle.\r\n\r\nExamples could range from [UMA's](https://docs.uma.xyz/developers/quick-start) KPI options to more customizable logic. Is there an example (even purely from a marketing perspective) we could do to showcase such an integration? Like setting up a grant with a freelancer on [Bountycaster](https://www.bountycaster.xyz/) and increasing or canceling their stream based on delivery/performance?\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-04-08T13:16:01Z","labels":[],"number":35,"repository":"sablier-labs/flow","state":"closed","title":"Change rate-per-second based on some external oracle","type":"discussion","updatedAt":"2024-04-08T13:43:08Z","url":"https://github.com/sablier-labs/flow/discussions/35"},{"author":"smol-ninja","body":"From: https://discuss.ens.domains/t/rfp-stream-platform-for-ens-service-providers/18448\r\n\r\n> Are you able to create indefinite streams? How easy is it to renew, pause or edit an existing stream?\r\nOur current stream providers will be receiving funds for at least one year, but there’s no end date. The goal is to have a new Stream Provider election in Q1 or Q2 2025, followed by an Executable Proposal which will remove some recipients, add others and maybe change the value of some. Your stream must be able to support that without any interruption in the service.\r\n\r\nLooks like a requirement for EOES as there is no end date.\r\n\r\nKey points from this:\r\n1. ability to remove some recipients -> equivalent to closing stream\r\n2. add new recipients -> equivalent to opening new streams\r\n3. change the values -> equivalent to closing followed by opening a new stream. Or should we allow updating recipients as well as rps for an existing stream? Thoughts??","createdAt":"2023-12-18T15:20:12Z","labels":[],"number":18,"repository":"sablier-labs/flow","state":"closed","title":"Key points from ENS RFP for streaming services","type":"discussion","updatedAt":"2024-04-05T14:53:57Z","url":"https://github.com/sablier-labs/flow/discussions/18"},{"author":"andreivladbrg","body":"Since we are going to make the [Package Tethering](https://github.com/sablier-labs/v2-core/issues/808) change in `v2-core` should we also remove \"V2\" from this project? \r\n\r\nIt means that we need to:\r\n- [ ] rename the repo\r\n- [ ] rename all contracts that include \"V2\"\r\n\r\nWhat should be the repo name? \r\n- evm-open-ended\r\n- open-ended\r\n\r\n@smol-ninja @PaulRBerg ","createdAt":"2024-04-04T09:43:04Z","labels":[],"number":25,"repository":"sablier-labs/flow","state":"closed","title":"Rename repo","type":"discussion","updatedAt":"2024-04-04T12:04:41Z","url":"https://github.com/sablier-labs/flow/discussions/25"},{"author":"PaulRBerg","body":"We have recently [removed flash loans](https://github.com/sablier-labs/v2-core/pull/779) from the Lockup series because they can be a [deterrent](https://github.com/sablier-labs/v2-core/discussions/278) for vesting users.\r\n\r\nHowever, none of those arguments apply to OpenEnded, which is meant to be used with stablecoins.\r\n\r\nAny thoughts on enabling support for flash loans in OpenEnded, @sablier-labs/solidity + @razgraf?","createdAt":"2024-03-28T18:53:10Z","labels":[],"number":23,"repository":"sablier-labs/flow","state":"closed","title":"Flash loans","type":"discussion","updatedAt":"2024-03-29T15:08:45Z","url":"https://github.com/sablier-labs/flow/discussions/23"},{"author":"smol-ninja","body":"In the current `deposit` and `depositMultiple` flow, a deposit is made against a stream ID. This makes all the streams created by a single user mutually exclusive and offers an advantage to recipients in terms of user experience.\r\n\r\nFrom https://github.com/sablier-labs/private-discussions/discussions/6#discussioncomment-7304440:\r\n> When having two streams with the amount of 1000 tokens per month and the sender has deposited only 1000 tokens (instead of 2000 for both streams), at the end of the month, a \"first come, first served\" approach would be applied. This means that one recipient could potentially \"steal\" the other recipients' funds, which is, once again, very bad UX.\r\n\r\nThis flow prioritises experience for recipients over senders. If we were to prioritise the sender experience, then we can look into an alternative approach where the sender manages only one pool of money and all the streams created by him share the amount from this pool.\r\n\r\nFor example, a sender has a pool with 1000 USDC and creates 2 streams each of 500 USDC per month. At the end of the month, when recipients withdraw money from their streams, the balance in the pool reduces and gets transferred to each of these recipients. This offers a better experience for stream creators as they only have to ensure there is enough liquidity in the pool for all these streams. \r\n\r\n<img src=\"https://github.com/sablier-labs/v2-open-ended/assets/6676622/944832db-22bd-41b9-bc5e-745902550bc1\" data-canonical-src=\"https://gyazo.com/eb5c5741b6a9a16c692170a41a49c858.png\" width=\"500\"  />\r\n\r\nThe downside as pointed out by @andreivladbrg is that in case of low liquidity in the pool, it becomes a first come first serve basis for recipients.\r\n\r\nI would like to discuss who we think are our primary users for v2-open-ended. Are they stream creators or stream recipients? And which design we should prioritise over other.\r\n\r\nThere is also a very important point made here (https://github.com/sablier-labs/v2-open-ended/discussions/7#discussioncomment-7800111) that a change in architecture like this would break consistency between Sablier products which is true as well. ","createdAt":"2023-12-10T23:37:53Z","labels":[],"number":13,"repository":"sablier-labs/flow","state":"closed","title":"Exploring Stream Dynamics: Sender vs. Recipient Priority","type":"discussion","updatedAt":"2023-12-20T01:30:16Z","url":"https://github.com/sablier-labs/flow/discussions/13"},{"author":"smol-ninja","body":"## About Solx\r\n\r\nSolx is an alternative to Solc. Its built by zkSync team and aims to be faster and more gas (and bytecode) efficient compiler over Solc. Its new but worth watching.\r\n\r\n1. [Website](https://solx.zksync.io/)\r\n2. [X announcement](https://x.com/solx_compiler/status/1951295228775899218)\r\n\r\nI ran some benchmarks to verify its performance over Solc in the Lockup code at [`6341f0f`](https://github.com/sablier-labs/lockup/commit/6341f0f493ac38a3d164e5211b36a8dc3a81f79d). The version used during the benchmark was `0.8.30`.\r\n\r\n## Comparison\r\n\r\n### 1. Build time\r\n\r\na. With `viair`\r\n\r\n| Compiler | Time (s) | Winner |\r\n| -- | -- | -- |\r\n| Solc  | 314.78 | ❌ |\r\n| Solx  | 65.58 | ✅ |\r\n\r\nb. Without `viair`\r\n\r\n| Compiler | Time (s) | Winner |\r\n| -- | -- | -- |\r\n| Solc | 71.59 | ✅ |\r\n| Solx  | 92.41 | ❌ |\r\n\r\n**Conclusion**: With `viair`, Solx is 4.8x faster than Solc whereas without `viair`, its 1.3x slower than `solc`.\r\n\r\n### 2. Optimised contract size\r\n\r\n| Compiler | Lockup size (kB) | Winner |\r\n| -- | -- | -- |\r\n| Solc | 23.157 | ✅ |\r\n| Solx | 26.698 | ❌ |\r\n\r\n**Conclusion**: Solx generates 15% larger contract bytecode compared to Solc.\r\n\r\n### 3. Gas report\r\n\r\n| Compiler | function | Avg | Median | Max | Calls | Winner |\r\n| -- | -- | -- | -- | -- | -- | -- | \r\n| Solc | `createWithDurationsLD` | 12,412,630 | 6,359,686 | 62,832,734 | 1193 | ❌ |\r\n| Solx | `createWithDurationsLD` | 11,999,888 | 6,228,009 | 60,892,105 | 1222 | ✅ |\r\n\r\n**Conclusion**: The `createWithDurationsLD` function consumes 3-4% less gas with Solx.\r\n\r\n## Final note\r\n\r\nSolx performs better than Solc in build time with `viair` and gas optimization but it performs poorly in contract size which is very important for us. But we should keep an eye on its development.","createdAt":"2025-08-05T12:20:40Z","labels":[],"number":1279,"repository":"sablier-labs/lockup","state":"open","title":"Comparing Solx with Solc","type":"discussion","updatedAt":"2025-08-05T15:35:13Z","url":"https://github.com/sablier-labs/lockup/discussions/1279"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nDelete the `BatchLockup` contract and either (i) use the general-purpose `batch` function or (ii) re-implement the logic in `Lockup`.\r\n\r\n## Rationale\r\n\r\nUsers interacting with Sablier programmatically have to ERC-20 approve and whitelist our contracts (e.g., in token contracts in which only some addresses are allowed to transfer tokens).\r\n\r\nUsing one contract (`Lockup`) instead of two (`Lockup` plus `BatchLockup`) would lower the cognitive load for these users.\r\n\r\nHere's a recent example:\r\n\r\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/ad3b45cb-f804-4487-adb4-7c1e00b8632c\"/>\r\n\r\n### General-Purpose Batch\r\n\r\nThe only downside I see with the general-purpose `batch` is that understanding what happened in the transaction through Etherscan will become slightly more complicated.\r\n\r\n### Reimplementing the Logic\r\n\r\nThis would be neater, but the contract size may prevent us from taking this approach.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/solidity and @sablier-labs/frontend for feedback","createdAt":"2025-01-15T10:32:24Z","labels":[],"number":1148,"repository":"sablier-labs/lockup","state":"open","title":"Idea to get rid of \"BatchLockup\" by using the \"batch\" function or reimplementing the create functions","type":"discussion","updatedAt":"2025-07-09T14:33:54Z","url":"https://github.com/sablier-labs/lockup/discussions/1148"},{"author":"PaulRBerg","body":"Similar to the 7-day grace period in Airdrop campaigns.\r\n\r\nIt's a potentially useful feature, but I don't think we can include it until [EIP-7907](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7907.md) is implemented (and the contract size limit is increased).\r\n\r\nWDYT @sablier-labs/engineers?","createdAt":"2025-06-01T14:34:45Z","labels":[],"number":1259,"repository":"sablier-labs/lockup","state":"open","title":"7-day grace period for cancelability of Lockup streams","type":"discussion","updatedAt":"2025-06-13T12:31:42Z","url":"https://github.com/sablier-labs/lockup/discussions/1259"},{"author":"PaulRBerg","body":"Requested by a user recently:\r\n\r\n<img width=\"350\" alt=\"SCR-20240902-lqdg\" src=\"https://github.com/user-attachments/assets/d7b9c90a-bb1a-4e42-84a6-eca096658b27\">\r\n\r\nIIRC:\r\n\r\n1. We have received episodic requests for this feature over the years. Right, @maxdesalle?\r\n2. Hedgey offers this feature already.\r\n\r\nRFC @sablier-labs/everybody","createdAt":"2024-09-02T09:59:40Z","labels":[],"number":1030,"repository":"sablier-labs/lockup","state":"open","title":"Change the sender of a Lockup stream","type":"discussion","updatedAt":"2025-06-02T11:36:43Z","url":"https://github.com/sablier-labs/lockup/discussions/1030"},{"author":"PaulRBerg","body":"Analogous to https://github.com/sablier-labs/lockup/issues/1252#issuecomment-2904224027, what if we split the create functions for `SablierLockup` into:\r\n\r\n- `abstract contract SablierLockupDynamic`\r\n- `abstract contract SablierLockupLinear`\r\n- `abstract contract SablierLockupTranched`\r\n\r\n@sablier-labs/evm","createdAt":"2025-05-23T12:14:37Z","labels":[],"number":1256,"repository":"sablier-labs/lockup","state":"closed","title":"Thoughts about splitting the SablierLockup logic into separate abstracts","type":"discussion","updatedAt":"2025-05-26T15:43:49Z","url":"https://github.com/sablier-labs/lockup/discussions/1256"},{"author":"PaulRBerg","body":"We've recently received this feature request from a user:\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/bfa49ac9-7233-4d44-a560-9db930ed23c5\"/>\r\n\r\n@smol-ninja answered promptly and correctly:\r\n\r\n<img width=\"345\" alt=\"SCR-20241211-rwxb\" src=\"https://github.com/user-attachments/assets/c57e43f0-486b-4853-b1e3-a7c8068b1776\" />\r\n\r\nBut the user made a good point.\r\n\r\nHaving a `createMultiple` function that performs only one ERC-20 would bring huge benefits.\r\n\r\n1. Lower the gas cost for all users.\r\n2. Make it possible to create more than ~60 streams with a single CSV file upload.\r\n\r\nI know we're already close to the maximum size allowed for contracts, but maybe there's a way to make this happen somehow?\r\n\r\ncc @sablier-labs/solidity","createdAt":"2024-12-11T18:39:00Z","labels":[],"number":1114,"repository":"sablier-labs/lockup","state":"closed","title":"Function that creates multiple streams with only one ERC-20 transfer","type":"discussion","updatedAt":"2025-05-21T11:39:31Z","url":"https://github.com/sablier-labs/lockup/discussions/1114"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nUsers want to batch cancel streams, but they are currently limited to a few hundred streams because separate cancel performs an ERC-20 transfer back to the sender.\r\n\r\n<img width=\"300\" alt=\"SCR-20250521-lzjt\" src=\"https://github.com/user-attachments/assets/b61b99f0-9a0c-46b5-8311-3fc0e4fe99d6\" />\r\n\r\n## Solution (Brainstorming)\r\n\r\nProvide a new `cancel` function (name TBD later) that does NOT perform all the ERC-20 transfers in one go. It batch-transfers the cumulative assets to the sender.\r\n\r\nThe cumulative values would have to be grouped by asset.\r\n\r\ncc @sablier-labs/evm for feedback","createdAt":"2025-05-21T10:31:07Z","labels":[],"number":1253,"repository":"sablier-labs/lockup","state":"open","title":"Making batch cancel more gas efficient","type":"discussion","updatedAt":"2025-05-21T11:15:51Z","url":"https://github.com/sablier-labs/lockup/discussions/1253"},{"author":"andreivladbrg","body":"## Problem\r\n\r\nIn the current version of the fuzz and fork tests, if the CI fails, it is **very** likely to be impossible to understand the reason for the failure. This problem exists from how we write our tests:\r\n1. First, we expect an event to be emitted.\r\n2. Then, we run explicit assertions against the contract state.\r\n\r\nSince the first step checks against the emitted event, we don't get a clear indication of the actual reason for the failure.\r\n\r\n```\r\n[FAIL: log != expected log] test_WhenEndTimeNotInPast() \r\n// vs specific assertion\r\n[FAIL: total forgone amount: 7920000000000000000000 != 7919999999999999999999] test_WhenEndTimeNotInPast()\r\n```\r\nFor example, the test fails [here](https://github.com/sablier-labs/airdrops/blob/32ea7a58d69bd0fe752789aff3a8f121cd345948/tests/integration/concrete/campaign/vca/claim/claim.t.sol#L58), instead of [here](https://github.com/sablier-labs/airdrops/blob/32ea7a58d69bd0fe752789aff3a8f121cd345948/tests/integration/concrete/campaign/vca/claim/claim.t.sol#L76)\r\n\r\n*Note:* This issue also applies to concrete tests, but since they use deterministic values (pre-declared), it’s easier to quickly identify what went wrong.  \r\nIn the case of fork and fuzz tests, we use fuzzed and bounded parameters, which means we don’t know exactly what function inputs were used.  \r\nThis makes it nearly impossible to reproduce the failure scenario, as we lack a clear reason for the failure.\r\n\r\n## Solutions\r\n\r\nI have two potential solutions in mind:\r\n1. The straightforward one — remove the `vm.expectEmit` in fuzz/fork tests.\r\n2. Use the [record logs cheatcode](https://book.getfoundry.sh/cheatcodes/get-recorded-logs) from Foundry and assert events after the state assertions.\r\n\r\n**Pros of option 1:** Fast and easy to implement.  \r\n**Con (as presented [here](https://github.com/sablier-labs/evm-utils/issues/17)):** Removing `vm.expectEmit` could result in incomplete fork tests, as events serve as a \"communication layer\" between contracts and subgraphs.\r\n\r\n**My counter-argument:** We already test that events are emitted in the concrete tests, which ensures correctness at the contract level.  \r\nDuplicating these checks in fork tests only verifies that the EVM behaves correctly — something Ethereum engineers are responsible for.  \r\nWhat we could do instead is include a [happy path test](https://en.wikipedia.org/wiki/Happy_path) in fork tests that also covers events (using constants and defaults).\r\n\r\n**Pros of option 2:** More complete test coverage.  \r\n**Cons:** Considerably more complex and longer tests; takes more time to implement.\r\n\r\n<details><summary>Example of record logs</summary>\r\n<p>\r\n\r\n**Note:** Test was chosen at random from [here](https://github.com/sablier-labs/lockup/blob/8f3235538d385a55d13b10f9f623c30016664d3b/tests/integration/concrete/lockup-base/recover/recover.t.sol#L25).\r\n\r\n```solidity\r\nfunction test_WhenTokenBalanceExceedAggregateAmount() external whenCallerAdmin {\r\n    uint256 surplusAmount = 1e18;\r\n\r\n    // Increase the lockup contract balance in order to have a surplus.\r\n    deal({ token: address(dai), to: address(lockup), give: dai.balanceOf(address(lockup)) + surplusAmount });\r\n\r\n    // Start recording logs\r\n    vm.recordLogs();\r\n\r\n    // Recover the surplus.\r\n    lockup.recover(dai, users.admin);\r\n\r\n    // It should lead to token balance same as aggregate amount.\r\n    assertEq(dai.balanceOf(address(lockup)), lockup.aggregateAmount(dai));\r\n\r\n    // Get recorded logs\r\n    Vm.Log[] memory entries = vm.getRecordedLogs();\r\n\r\n    // Check that we have exactly 2 events\r\n    assertEq(entries.length, 2);\r\n\r\n    // Check the first log is the Transfer event from DAI\r\n    bytes32 transferTopic = keccak256(\"Transfer(address,address,uint256)\");\r\n    assertEq(entries[0].topics[0], transferTopic);\r\n    assertEq(entries[0].emitter, address(dai));\r\n\r\n    // Check 'from' address for Transfer\r\n    address from = address(uint160(uint256(entries[0].topics[1])));\r\n    assertEq(from, address(lockup));\r\n\r\n    // Check 'to' address for Transfer\r\n    address to = address(uint160(uint256(entries[0].topics[2])));\r\n    assertEq(to, users.admin);\r\n\r\n    // Check 'value' for Transfer\r\n    uint256 value = abi.decode(entries[0].data, (uint256));\r\n    assertEq(value, surplusAmount);\r\n\r\n    // Check the second log is the Recover event from the lockup contract\r\n    bytes32 recoverTopic = keccak256(\"Recover(address,address,address,uint256)\");\r\n    assertEq(entries[1].topics[0], recoverTopic);\r\n    assertEq(entries[1].emitter, address(lockup));\r\n\r\n    // Check 'admin' parameter for Recover\r\n    address admin = address(uint160(uint256(entries[1].topics[1])));\r\n    assertEq(admin, users.admin);\r\n\r\n    // Check 'token' parameter for Recover\r\n    address token = address(uint160(uint256(entries[1].topics[2])));\r\n    assertEq(token, address(dai));\r\n\r\n    // Check 'surplus' parameter for Recover\r\n    (address recoverTo, uint256 surplus) = abi.decode(entries[1].data, (address, uint256));\r\n    assertEq(recoverTo, users.admin);\r\n    assertEq(surplus, surplusAmount);\r\n}\r\n```\r\n\r\n\r\n\r\n</p>\r\n</details> \r\n\r\n## Feedback\r\n\r\n@sablier-labs/evm what do you all think?","createdAt":"2025-03-27T12:06:55Z","labels":[],"number":1229,"repository":"sablier-labs/lockup","state":"closed","title":"Improve debugging experience in fork and fuzz tests","type":"discussion","updatedAt":"2025-04-10T10:48:55Z","url":"https://github.com/sablier-labs/lockup/discussions/1229"},{"author":"VGabriel45","body":"Hey guys, I was looking to get some feedback on this diagram, is it correct ? \r\n![Screenshot 2025-03-28 at 09 37 18](https://github.com/user-attachments/assets/9c9ba60f-abe8-42c8-b6b3-9613e4be6719)\r\n\r\n","createdAt":"2025-03-28T07:35:15Z","labels":[],"number":1230,"repository":"sablier-labs/lockup","state":"closed","title":"Feedback on Sablier Lockup diagram","type":"discussion","updatedAt":"2025-04-02T12:04:29Z","url":"https://github.com/sablier-labs/lockup/discussions/1230"},{"author":"smol-ninja","body":"The idea behind `SablierLockupBase` was to act as a common contract between `LockupLinear`, `LockupDynamic` and `LockupTranched`. We followed the same pattern with Flow and created `SablierFlowBase` and `SablierFlow`.\r\n\r\nHowever, both Flow and Lockup are singleton contracts and don't technically require a base contract.\r\n\r\nWhat do you think about merging `SablierLockupBase` into `SablierLockup` and same with Flow? cc @sablier-labs/evm.","createdAt":"2025-03-17T16:31:15Z","labels":[],"number":1213,"repository":"sablier-labs/lockup","state":"closed","title":"Temperature check: merging `SablierLockupBase` into `SablierLockup`","type":"discussion","updatedAt":"2025-03-24T12:41:33Z","url":"https://github.com/sablier-labs/lockup/discussions/1213"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThe Sablier UI performs a set of TypeScript-based validations before submitting the create stream transaction, but we've decided to change that approach and instead perform an RPC simulation when batch creating streams. If the RPC simulation passes, the TypeScript validations are skipped. If it doesn't pass, the TypeScript validations are still needed.\r\n\r\nThe new spec and the rationale for it are fully detailed [here](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729865961).\r\n\r\n## Problem\r\n\r\nWhen the RPC simulation fails for a batch stream creation, it is impossible for the frontend to identify which particular stream caused the revert. This means that the TypeScript-based validations (basically, replicas of the `checkCreate` functions in `Helpers.sol`) need to be re-run so that the UI can provide specific error data to the user.\r\n\r\n## Solution\r\n\r\n### Batch Lockup\r\n\r\nTaking `createWithTimestampsLL` as an example:\r\n\r\n<details><summary>Toggle to see implementation</summary>\r\n<p>\r\n\r\n```diff\r\n+ error BatchCreateError(uint256 index, bytes reason);\r\nfunction createWithTimestampsLL(\r\n        ISablierLockup lockup,\r\n        IERC20 token,\r\n        BatchLockup.CreateWithTimestampsLL[] calldata batch\r\n    )\r\n        external\r\n        override\r\n        returns (uint256[] memory streamIds)\r\n    {\r\n    /// ... rest of function ...\r\n    for (i = 0; i < batchSize; ++i) {\r\n-        streamIds[i] = lockup.createWithTimestampsLL(\r\n-            Lockup.CreateWithTimestamps({\r\n-                sender: batch[i].sender,\r\n-                recipient: batch[i].recipient,\r\n-                depositAmount: batch[i].depositAmount,\r\n-                token: token,\r\n-                cancelable: batch[i].cancelable,\r\n-                transferable: batch[i].transferable,\r\n-                timestamps: batch[i].timestamps,\r\n-                shape: batch[i].shape\r\n-            }),\r\n-            batch[i].unlockAmounts,\r\n-            batch[i].cliffTime\r\n-        );\r\n+        bytes memory callData = abi.encodeCall(\r\n+            ISablierLockup.createWithTimestampsLL,\r\n+            (\r\n+                Lockup.CreateWithTimestamps({\r\n+                    sender: batch[i].sender,\r\n+                    recipient: batch[i].recipient,\r\n+                    depositAmount: batch[i].depositAmount,\r\n+                    token: token,\r\n+                    cancelable: batch[i].cancelable,\r\n+                    transferable: batch[i].transferable,\r\n+                    timestamps: batch[i].timestamps,\r\n+                    shape: batch[i].shape\r\n+                }),\r\n+                batch[i].unlockAmounts,\r\n+                batch[i].cliffTime\r\n+            )\r\n+        );\r\n+        (bool success, bytes memory returnData) = address(lockup).call(callData);\r\n+        if (!success) {\r\n+            revert BatchCreateError(i, returnData);\r\n+        }\r\n+        streamIds[i] = abi.decode(returnData, (uint256));\r\n    }\r\n}\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n\r\n### Batch Abstract\r\n\r\nUnlike before, the `errorData` will now also contain the length of the error itself in the first 32 bytes. However, it should be possible to do the following operations in a frontend environment:\r\n\r\n- Decode `BatchRevert`\r\n- Strip away the first 32 bytes from `errorData`\r\n- Decode the remaining bytes in `errorData` as another Sablier error, e.g. `CallerNotAdmin`\r\n\r\n<details><summary>Toggle to see implementation</summary>\r\n<p>\r\n\r\n```diff\r\n+ error BatchRevert(uint256 index, bytes errorData);\r\nfunction batch(bytes[] calldata calls) external payable virtual override returns (bytes[] memory results) {\r\n    uint256 count = calls.length;\r\n    results = new bytes[](count);\r\n\r\n    if (!success) {\r\n-      assembly {\r\n-          // Get the length of the result stored in the first 32 bytes.\r\n-          let resultSize := mload(result)\r\n-\r\n-          // Forward the pointer by 32 bytes to skip the length argument, and revert with the result.\r\n-          revert(add(32, result), resultSize)\r\n-    }\r\n+   revert BatchRevert({ index: i, errorData: result });\r\n}\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n## Feedback\r\n\r\nImplementing this feature would make it possible to remove a lot of validation logic in the UI, which would also decrease the maintenance cost in the UI (as the validation logic will no longer need to be kept in sync).\r\n\r\nHowever, identifying which particular call in the batch array led to the revert sounds like a useful feature to have in general, so this feature may be beneficial in a broader sense.\r\n\r\nRFC @sablier-labs/engineers","createdAt":"2025-03-17T20:27:59Z","labels":[],"number":1217,"repository":"sablier-labs/lockup","state":"open","title":"Indexical error reporting in the batch functions","type":"discussion","updatedAt":"2025-03-19T22:24:30Z","url":"https://github.com/sablier-labs/lockup/discussions/1217"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThis discussion is complementary to the [Indexical error reporting in batch functions](https://github.com/sablier-labs/lockup/discussions/1217) solution and the [Dynamic max batch sizes](https://github.com/sablier-labs/interfaces/issues/1473) problem.\r\n\r\n## Problem\r\n\r\nTo be able to simulate the stream creation transaction, we need the ERC-20 allowance to be set. This means that we cannot parallelize the ERC-20 allowance check and the Sablier stream creation checks.\r\n\r\n## Solution\r\n\r\nMake the `Helpers` library, which contains the `checkCreate` functions, a public library so that it can be called from the frontend.\r\n\r\nThis way, we may be able to provide a better UX by reducing the waiting time when uploading a CSV and batch-creating multiple streams.\r\n\r\n### `maxCount` caveat\r\n\r\nThe `checkCreate` functions require the `maxCount` to be passed as a parameter (because libraries cannot take immutable vars).\r\n\r\n## Feedback\r\n\r\nWould you find this functionality helpful, @sablier-labs/frontend? I'm specifically asking @gavriliumircea and @razgraf.\r\n\r\nTagging @sablier-labs/evm for feedback on the Solidity aspects.\r\n\r\nP.S. we are [contemplating](https://github.com/sablier-labs/lockup/issues/1215) renaming `Helpers` to `CheckCreate`.","createdAt":"2025-03-17T20:37:48Z","labels":[],"number":1218,"repository":"sablier-labs/lockup","state":"closed","title":"Making the \"checkCreate\" functions publicly accessible","type":"discussion","updatedAt":"2025-03-18T14:41:01Z","url":"https://github.com/sablier-labs/lockup/discussions/1218"},{"author":"smol-ninja","body":"By replacing the following modifiers with internal functions, we can free up upto 1,500-2,000 Bytes (thats A LOT). By only replacing `notNull` modifier with an internal function, the margin increased from 34 B to 817 B.\r\n\r\n- `notNull`\r\n- `noDelegateCall`\r\n- `onlyAdmin`\r\n\r\nSimple reason: modifier duplicates the code whereas internal functions don't. I am strongly in favour of it. I already did something similar with [`revertOnNativeToken`](https://github.com/sablier-labs/airdrops/blob/cantina-fixes/src/SablierMerkleFactoryLT.sol#L63) and it looks good.\r\n\r\nRFC @sablier-labs/evm.","createdAt":"2025-03-17T16:37:37Z","labels":[],"number":1214,"repository":"sablier-labs/lockup","state":"closed","title":"Replace all the modifiers with internal functions","type":"discussion","updatedAt":"2025-03-17T18:02:43Z","url":"https://github.com/sablier-labs/lockup/discussions/1214"},{"author":"PaulRBerg","body":"It would be helpful to give users the ability to optionally attach a governance module to a stream at the time of creation.\r\n\r\nThe use case is to give users the ability to use the streamed assets for voting.\r\n\r\nIdeally, this governance module would connect seamlessly with [Tally](https://www.tally.xyz/).","createdAt":"2023-08-13T10:57:48Z","labels":[],"number":652,"repository":"sablier-labs/lockup","state":"open","title":"Optional onchain governance module","type":"discussion","updatedAt":"2025-03-05T21:03:58Z","url":"https://github.com/sablier-labs/lockup/discussions/652"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nI've been thinking about the prospect of rearchitecting V2 Core this:\r\n\r\n- Create a global \"Vat\" registry similar to [MakerDAO's `Vat`](https://docs.makerdao.com/smart-contract-modules/core-module/vat-detailed-documentation).\r\n- Issue multiple stream NFT contracts with different parameters (e.g. cancelable vs non-cancelable, locked vs non-locked)\r\n- The Vat would have an `admin` with permission to list new NFT contracts. Previously listed NFT contracts cannot be delisted.\r\n- The Vat would store the ERC-20 tokens and implement the streaming functions (e.g. `streamedAmountOf`)\r\n- The NFTs would redirect most calls to the Vat, except for those functions that are strictly NFT-related\r\n\r\n## Benefits\r\n\r\n- Globalize the stream ids across all Lockup stream contracts (see the problems discussed in https://github.com/sablier-labs/v2-interfaces/discussions/143)\r\n- Solve issues like #684 by separating the NFT logic from the streaming logic.\r\n\r\n## Flow\r\n\r\n### Create\r\n\r\n1. User calls `create` function on the NFT contract\r\n2. NFT contract performs the necessary checks.\r\n3. NFT queries `nextStreamId`\r\n4. NFT is minted with correspondent steram id\r\n5. ERC-20 tokens are transferred to the VAT\r\n\r\n### Streamed Amount Of\r\n\r\n1. User calls `streamedAmountOf` directly on the Vat, providing a global `streamId`\r\n2. (Optionally) The NFT contract could mirror `streamedAmountOf` and redirect the call to the Vat, for convenience\r\n\r\n### Withdraw\r\n\r\n1. User calls `withdraw` on the NFT contract\r\n3. The call is redirected to the Vat.\r\n4. The Vat checks if the `msg.sender` is a known NFT contract\r\n6. Assets are withdrawn to the provided `to`\r\n\r\n### Burn\r\n\r\n1. User calls `burn` on the NFT contract\r\n2. The NFT contract does _not_ call the Vat\r\n3. The NFT is burned\r\n\r\n\r\n## Diagram\r\n\r\n```mermaid\r\nflowchart LR;\r\n  V[(\"Vat\")];\r\n  N0[\"LockupLinear-Cancelable\"];\r\n  N1[\"LockupLinear-NonCancelable\"];\r\n  N2[\"LockupLinear-Locked\"];\r\n  N3[\"LockupLinear-NonLocked\"];\r\n  U(User);\r\n\r\n  U-->N0;\r\n  U-->N1;\r\n  U-->N2;\r\n  U-->N3;\r\n  N0-->V;\r\n  N1-->V;\r\n  N2-->V;\r\n  N3-->V;\r\n```","createdAt":"2023-09-08T09:21:52Z","labels":[],"number":685,"repository":"sablier-labs/lockup","state":"closed","title":"Modularize NFTs and streaming logic","type":"discussion","updatedAt":"2025-03-05T19:05:19Z","url":"https://github.com/sablier-labs/lockup/discussions/685"},{"author":"mingbaile","body":"Hi, we are a research group on programming languages and software engineering. We recently conducted a systematic study on the causes, effects, and fixes of the inconsistent state update vulnerability in solidity. We are attempting to build a tool to detect bugs about state updates based on our findings. We have tried our prototype tool on some popular Github solidity repositories, and for your repository, we found that there are missing state updates or gas consumption that can be optimized.\n\nThe point is that when we declare a state variable in the contract, if the variable is not reassigned throughout the project, it may be a missed state update, including balance, order number, counter, contract status flag, etc. Of course, it may also be a state variable with special purposes that does not need to be changed, such as maximum supply, contract administrator address, configuration information, etc. When declaring these state variables that do not need to be changed, the _constant_ or _immutable_ modifier should be used as required, which will save gas.\n\nFor your repository, we found the following state variables that may need attention. If you are not forgetting to update them, perhaps you should declare them with the _constant_ or _immutable_ modifier:\n\n[Benchmark.t.sol](https://github.com/sablier-labs/lockup/blob/main/benchmark/Benchmark.t.sol)\n**State variable:** benchmarkResults\n```solidity\nstring internal benchmarkResults = \"benchmark/results/\";\n```\n\n[batch.t.sol](https://github.com/sablier-labs/lockup/blob/main/tests/unit/concrete/batch/batch.t.sol)\n**State variable:** newNumber\n```solidity\nuint256 internal newNumber = 100;\n```\n\nDo you find our results useful? Your reply and invaluable suggestions would be greatly appreciated, and are vital for improving our tool. Thanks a lot for your time!\n(The reason why _constant_ and _immutable_ modifiers can save gas is that they do not consume storage space within the EVM. Their values are compiled directly into smart contract bytecode, which reduces the gas cost of storage. This storage method also avoids the SLOAD operation that reads EVM storage (costs about 100 gas in EVM). The main difference between _constant_ and _immutable_ variables is that the value of _immutable_ variables can be set in the constructor, and _immutable_ variables may cost more gas than _constant_ variables. In addition, there is a slight difference in the variable types they support. The official documentation describes more details: https://docs.soliditylang.org/en/latest/contracts.html)","createdAt":"2025-02-28T15:41:10Z","labels":[],"number":1198,"repository":"sablier-labs/lockup","state":"open","title":"Missing state updates or optimizable state variables","type":"discussion","updatedAt":"2025-03-05T00:55:15Z","url":"https://github.com/sablier-labs/lockup/discussions/1198"},{"author":"andreivladbrg","body":"As discussed in this PR: https://github.com/sablier-labs/evm-utils/pull/8,\r\n\r\nInspired by [Uniswap’s v4-core repo](https://github.com/uniswap/v4-core?tab=readme-ov-file#repository-structure), should we move the test utils from the tests repo to `src/tests/`?\r\nWe are making this change in `evm-utils`, so I believe it makes total sense to do it here as well.\r\n\r\n@sablier-labs/evm ","createdAt":"2025-02-19T15:07:42Z","labels":[],"number":1183,"repository":"sablier-labs/lockup","state":"open","title":"Should we move test utils contracts under `src`?","type":"discussion","updatedAt":"2025-02-24T17:38:12Z","url":"https://github.com/sablier-labs/lockup/discussions/1183"},{"author":"PaulRBerg","body":"WDYT about adding a public getter for retrieving the associated `Lockup` contract in `BatchLockup`, @sablier-labs/evm?\r\n\r\nThis is how the *Read Contract* section looks like on Etherscan at the moment:\r\n\r\n<img width=\"882\" alt=\"SCR-20250219-ples\" src=\"https://github.com/user-attachments/assets/ec705bb7-745e-43a5-acff-e156a5f4eb65\" />\r\n","createdAt":"2025-02-19T15:39:31Z","labels":[],"number":1184,"repository":"sablier-labs/lockup","state":"closed","title":"Providing a getter for the Lockup contract in BatchLockup","type":"discussion","updatedAt":"2025-02-19T16:00:03Z","url":"https://github.com/sablier-labs/lockup/discussions/1184"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n- Company creates stream for employee\r\n- Salary has fixed value\r\n- Company wants to stream the fixed value to the employee\r\n- Company also wants to earn a yield on the idle capital not streamed to the employee already\r\n- Company tries to use an ERC-4626 vault but the yield goes to the recipient\r\n\r\n## Solution\r\n\r\nThere's no simple solution, unfortunately. Retaining the yield for the sender involves a redesign of the core contracts.\r\n\r\n- The naive solution is to have bespoke integrations for yield protocols, e.g. [DSR](https://docs.makerdao.com/smart-contract-modules/proxy-module/dsr-manager-detailed-documentation)\r\n- The proper solution is a modular plugin system that can be used for any yield protocol\r\n\r\nThat said, I'm skeptical that this is worth implementing when simpler alternatives exist - for example, we could use Gelato's [Web3 Functions](https://gelato.network/blog/web3-functions-serverless-apps) to automate the creation of streams.\r\n\r\n## Related\r\n\r\nAn important discussion that is related: [Alternative source of revenues: lending user deposits](https://github.com/sablier-labs/company-discussions/discussions/12)","createdAt":"2023-07-21T21:52:39Z","labels":[],"number":830,"repository":"sablier-labs/lockup","state":"open","title":"Allow sender to earn the interest on the principal locked up in the stream","type":"discussion","updatedAt":"2025-02-17T20:09:08Z","url":"https://github.com/sablier-labs/lockup/discussions/830"},{"author":"PaulRBerg","body":"I made this diagram that highlights the allowed transitions between stream statuses. This diagram is also available in our [docs](https://docs.sablier.com/concepts/lockup/statuses).\r\n\r\n```mermaid\r\n---\r\ntitle: Stream Status\r\n---\r\nstateDiagram-v2\r\n  direction LR\r\n  state Warm {\r\n    Pending\r\n    Streaming\r\n  }\r\n  state Cold {\r\n    Settled\r\n    Canceled\r\n    Depleted\r\n  }\r\n  Null --> Pending\r\n  Null --> Settled\r\n  Pending --> Streaming\r\n  Pending --> Settled\r\n  Pending --> Canceled\r\n  Streaming --> Settled\r\n  Streaming --> Canceled\r\n  Streaming --> Depleted\r\n  Settled --> Depleted\r\n  Canceled --> Depleted\r\n```","createdAt":"2023-06-07T21:32:16Z","labels":[],"number":543,"repository":"sablier-labs/lockup","state":"open","title":"Walkthrough: Stream status","type":"discussion","updatedAt":"2025-02-17T16:45:34Z","url":"https://github.com/sablier-labs/lockup/discussions/543"},{"author":"PaulRBerg","body":"@razgraf suggested taking a look at [zipped-contracts](https://github.com/merklejerk/zipped-contracts) for potentially reducing the deployment size of our [`NFTDescriptor`](https://github.com/sablier-labs/v2-core/tree/239a695e242d0f395d8afdb77777d39c6211a2d2/src) by up to 50%.\r\n\r\nAfter skimming through the README and the [launch thread](https://twitter.com/merklejerk/status/1662438985694601216), these are my thoughts and remarks particularly relevant to Sablier:\r\n\r\n- It is an interesting design, but it relies upon a [whole bunch of inline assembly](https://github.com/merklejerk/zipped-contracts/blob/b934855c723f8cca76b3fa4e03f1105f1daff66f/src/Inflate2.sol), and a quasi-experimental Solidity implementation of the [zlip deflate](https://refspecs.linuxbase.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/zlib-deflate-1.html) algorithm.\r\n- Zipped contracts cannot be interacted with via Etherscan. For this, we would have to write a separate wrapper that calls the zip.\r\n- Certain features, e.g. [`address(this)`](https://github.com/merklejerk/zipped-contracts/tree/b934855c723f8cca76b3fa4e03f1105f1daff66f#addresses), are not compatible with the zipped design. This is not great for us given our protocol's dependency on many runtime features like `block.timestamp`.\r\n\r\nGiven the points above, I suggest waiting before using this zipped contract design, i.e., we should let other (simpler) projects pick it up and make it more robust. Also, it isn't audited at the moment.","createdAt":"2023-06-03T09:13:40Z","labels":[],"number":539,"repository":"sablier-labs/lockup","state":"closed","title":"Reducing the deployment size of the NFT descriptor with zipped contracts","type":"discussion","updatedAt":"2025-02-17T16:44:17Z","url":"https://github.com/sablier-labs/lockup/discussions/539"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nFallibility is a fact of life, and there's nothing we can do to prevent recipients from losing their wallets. Mistakes will still be made even in a world powered by Account Abstraction wallets with social recovery features.\r\n\r\nNote — this discussion refers exclusively to cases when users lose access to their wallets. Cases of wallet hackers are out-of-scope.\r\n\r\nA recent user (Derive) has recently inquired about this possibility on Telegram:\r\n\r\n<img width=\"400\" alt=\"SCR-20250121-mqns\" src=\"https://github.com/user-attachments/assets/4e3a531c-172f-4e06-95a0-de56a949f975\" />\r\n\r\n## Solution\r\n\r\n- [ ] New boolean `isRescuable` (nomenclature due to be settled later) in the stream struct that allows senders to specify if they want to be able to undo the streaming.\r\n    - This boolean setting would be hidden underneath an _Advanced_ section (similar to the [optional public withdraw](https://github.com/sablier-labs/v2-core/discussions/1154) feature), and by default, it would be set to `false`.\r\n- [ ] New function `rescue` that can only be called by the stream sender to undo all streaming and rescue all tokens\r\n    - To simplify the first implementation/API, we could consider allowing this function to only be called once, and have it refund all available tokens back to the sender, and automatically settle the stream.\r\n\r\n### Nota Bene\r\n\r\nIntroducing this feature would make Sablier less trustless for recipients as they would have to trust the sender to not undo the streaming. Historically, we have argued that this is bad because it makes Sablier as a whole less permissionless. However, I would now like to argue against that view:\r\n\r\n- The vast majority of users won't click on _Advanced_, so most streams will remain non-rescuable.\r\n- Only sophisticated users who consider this possibility will use this.\r\n- Even when `isRescuable` is set to `false` (the default), recipients still need to place a high trust on the sender — e.g., they can abandon the project\r\n- At any rate, Sablier Labs will still have zero governing power over the streamed assets. So, from a legal perspective, we're as well-covered as ever.\r\n- Over the years, we have received many feature requests for this. We should listen to users!\r\n- Our competitors Streamflow and Hedgey offer this feature.\r\n- And again, fallibility is a fact. Errors will be made, and this feature will make error correction possible.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/everybody for feedback\r\n\r\n@maxdesalle maybe you can remember any requests for this received over the years?","createdAt":"2025-01-21T12:19:29Z","labels":[],"number":1155,"repository":"sablier-labs/lockup","state":"closed","title":"Allow senders to undo the streaming to rescue tokens in case of recipients losing access to their wallet","type":"discussion","updatedAt":"2025-02-17T14:13:36Z","url":"https://github.com/sablier-labs/lockup/discussions/1155"},{"author":"andreivladbrg","body":"## Background\r\n\r\nWe have had [this idea](https://github.com/sablier-labs/lockup/issues/599) before but abandoned it for two reasons:\r\n1. A long waiting time for the tests to run due to a high number of API calls.\r\n2. Considerably high maintenance costs.\r\n\r\n### Problem\r\n\r\nThe above issue existed in the first place because of our current fork test structure: \r\n- We have `fuzz` fork tests instead of unit/concrete tests.\r\n    - A key factor in the long waiting time for tests to run.\r\n- We are testing the contracts against multiple tokens (and previously, there were multiple versions of Lockup contracts).\r\n    - A key factor in the high maintenance cost.\r\n    - Also contributes to the long test execution time.\r\n- Multiple time warps (with fuzzed params) which would mess up the fork setup and it complicates things.\r\n\r\n## New Proposal\r\n\r\nWhat if we implement these multichain fork tests in a more minimal way?  \r\nWhat I mean is to simply test a [happy flow](https://en.wikipedia.org/wiki/Happy_path) with a minimal scenario in a unit/concrete setup, **for a single token**. Specifically, we would test:\r\n1. `createLD`\r\n2. `cancel`\r\n3. `createLL`\r\n4. `withdraw`\r\n5. `createLT`\r\n6. `renounce`\r\n\r\nWe can choose whether to run assertions or not. The important part is simply calling these functions against a chain fork to ensure they execute correctly.\r\n\r\nAnother idea, besides the happy flow, is to add `admin` tests to verify that the setup is correct across all chains.\r\n\r\n### Motivation\r\n\r\nThis approach would be useful and relevant for app integration, eliminating the need for manual testing on all chains before going live. And it would skip a step in case of bad deployments.\r\nThese tests would be most beneficial between the deployment of new contracts and the app integrating those new contracts. \r\n\r\n### About Implementation\r\n\r\n**Important**: This will most likely not be part of the current fork tests and won't be run in the CI, as it serves a very specific use case.\r\n\r\n\r\nWe can add a JSON file format to store admin addresses and new deployments, which would be automatically generated using the `multichain-deployer` tool.  \r\nThen, we can simply read the data using Foundry's VM and JSON tools, similar to how we do in [BaseScript](https://github.com/sablier-labs/lockup/blob/835cac359e03700cfd713313991e9430d8760c42/script/Base.s.sol#L94-L98).\r\n\r\nThis approach will result in **very low maintenance costs**. See below the details block:\r\n\r\n<details><summary>Example of flow</summary>\r\n<p>\r\n\r\nThe JSON format may vary, but let's assume `admins.json`:\r\n\r\n```json\r\n{\r\n    \"1\": \"0x79Fb3e81aAc012c08501f41296CCC145a1E15844\",\r\n    \"42161\": \"0xF34E41a6f6Ce5A45559B1D3Ee92E141a3De96376\"\r\n}\r\n```\r\n\r\n`sablier_lockup.json`:\r\n\r\n```json\r\n{\r\n    \"1\": \"0x7C01AA3783577E15fD7e272443D44B92d5b21056\",\r\n    \"42161\": \"0x467D5Bf8Cfa1a5f99328fBdCb9C751c78934b725\"\r\n}\r\n```\r\n\r\nFor the above JSON, we would have the following test:\r\n\r\n```solidity\r\naddress internal admin;\r\nISablierLockup internal lockup;\r\n\r\nmodifier runMultichainForkTest() {\r\n    vm.createSelectFork(\"mainnet\"); // read from foundry.toml\r\n    admin = getAddressForChain(\"admin.json\");\r\n    lockup = ISablierLockup(getAddressForChain(\"sablier_lockup.json\"));\r\n    _; // run the test on the first chain\r\n    vm.createSelectFork(\"arbitrum\"); // read from foundry.toml\r\n    admin = getAddressForChain(\"admin.json\");\r\n    lockup = ISablierLockup(getAddressForChain(\"sablier_lockup.json\"));\r\n    _; // run the test on the second chain  \r\n}\r\n\r\nfunction getAddressForChain(string memory jsonFile) internal view returns (address) {\r\n    string memory json = vm.readFile(jsonFile);\r\n    string memory chainId = string.concat(\".\", vm.toString(block.chainid));\r\n    return json.readAddress(chainId);\r\n}\r\n\r\n// a single unit test run for each chain\r\nfunction test_Admin() public runMultichainForkTest {\r\n    assertEq(lockup.admin(), admin);\r\n}\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n## Conclusion\r\n\r\nI believe this approach would work well in practice, making the tests more robust and secure.\r\n\r\nCurious to hear your thoughts, @sablier-labs/solidity.","createdAt":"2025-01-29T23:43:40Z","labels":[],"number":1164,"repository":"sablier-labs/lockup","state":"open","title":"What if we implement the multichain fork tests","type":"discussion","updatedAt":"2025-01-31T13:16:39Z","url":"https://github.com/sablier-labs/lockup/discussions/1164"},{"author":"smol-ninja","body":"## Problem\r\nSince the bytecode of Lockup now contains placeholders for library addresses, it has become complicated to generate the correct bytecode and use it to make deployments.\r\n\r\nSo far, we have been using a \"jugaad\" to make the tests pass which is that we've added dummy libraries addresses (which I intent to remove in https://github.com/sablier-labs/v2-core/pull/1158) and use them in precompile bytecode.\r\n\r\nHowever, this mean that on a new chain, one would have to deploy the libraries first and then replace placeholders with correct library addresses, before making the deployment. This also creates issues for us in `Precompiles_Test`. All of this has made it difficult to maintain and generate precompiles using the shell script.\r\n\r\nIt is much easier to use [custom deployment instructions](https://docs.sablier.com/guides/custom-deployments) or to use Foundry to make the deployment directly.\r\n\r\nTherefore, I recommend to remove precompiles entirely from the Lockup repo.\r\n﻿\r\n## Recommendations\r\n1. Remove [update-precompiles.sh](https://github.com/sablier-labs/v2-core/blob/staging/shell/update-precompiles.sh)\r\n2. Remove [precompiles directory](https://github.com/sablier-labs/v2-core/blob/staging/precompiles/Precompiles.sol)\r\n3. Remove [Precompiles.t.sol](https://github.com/sablier-labs/v2-core/blob/staging/tests/utils/Precompiles.t.sol)\r\n\r\nRFC @sablier-labs/solidity.","createdAt":"2025-01-22T22:14:37Z","labels":[],"number":1159,"repository":"sablier-labs/lockup","state":"closed","title":"Remove precompiles from the Lockup repo","type":"discussion","updatedAt":"2025-01-24T09:10:30Z","url":"https://github.com/sablier-labs/lockup/discussions/1159"},{"author":"PaulRBerg","body":"The idea to jettison the `cancelMultiple` and `withdrawMultiple` functions has been [thrown around](https://github.com/sablier-labs/v2-core/discussions/1120#discussioncomment-11626521) as a potential solution for lowering the contract size should this become necessary in the future.\r\n\r\nHowever, I now wonder if this is really feasible. By switching to `batch`, I reckon that we would lose the ability to ignore reverts in `cancelMultiple` and `withdrawMultiple`, which would be bad.\r\n\r\nIs that so, @sablier-labs/solidity?\r\n\r\n","createdAt":"2025-01-14T11:47:18Z","labels":[],"number":1145,"repository":"sablier-labs/lockup","state":"open","title":"Will we lose ability to ignore reverts if we switch to `batch` for the cancel/withdraw multiple functionality?","type":"discussion","updatedAt":"2025-01-15T12:46:24Z","url":"https://github.com/sablier-labs/lockup/discussions/1145"},{"author":"PaulRBerg","body":"I've just read finding 1 from Cantina now:\r\n\r\n[`withdrawMultiple` not indicating failed withdrawals can be problematic for calling contracts](https://cantina.xyz/code/52d6aa1e-6aa4-4e73-96ed-6077652cf0f1/findings/1)\r\n\r\nI agree with their recommendation.\r\n\r\nThe gas cost for an additional in-memory array of boolean should be small.\r\n\r\nWhy have you decided to acknowledge it, @sablier-labs/solidity?","createdAt":"2025-01-08T12:56:47Z","labels":[],"number":1135,"repository":"sablier-labs/lockup","state":"closed","title":"Implement array of boolean responses in \"cancelMultiple\" and \"withdrawMultiple\"","type":"discussion","updatedAt":"2025-01-14T14:37:49Z","url":"https://github.com/sablier-labs/lockup/discussions/1135"},{"author":"andreivladbrg","body":"A list of tasks to be completed before going live with the new version. @sablier-labs/solidity, feel free to edit this list if I missed anything.\r\n\r\n### Lockup\r\n- [ ] Rename the repo to `lockup` and update the [wiki](https://github.com/sablier-labs/v2-core/wiki) and other references where needed. Refer to https://github.com/sablier-labs/v2-core/issues/808.\r\n- [ ] Create a PR from `staging` --> `main` and resolve conflicts.\r\n     - ⚠️ Be very careful when rebasing to avoid excluding any of the intended changes.\r\n - [ ] Remove [these lines](https://github.com/sablier-labs/v2-core/blob/47c52ec92074270aa35e474c2ae19e9bd78e087a/foundry.toml#L42-L46) from `foundry.toml` to deploy the contracts with the new linking libraries.\r\n - [ ] Deploy contracts to all live chains\r\n\r\n### Airdrops\r\n- [ ] Link deployed libraries in `airdrop` repo before making the deployment.\r\n- [ ] Deploy contracts to all live chains\r\n- [ ] Replace [lockup version](https://github.com/sablier-labs/airdrops/blob/main/package.json#L16) with npm release\r\n\r\n### Flow\r\n- [ ] Create a PR from `staging` --> `main` and resolve conflicts.\r\n     - ⚠️ Be very careful when rebasing to avoid excluding any of the intended changes.\r\n- [ ] Deploy contracts to all live chains\r\n\r\n\r\n### Miscellaneous\r\n- [ ] Include the audits in the [audits repo](https://github.com/sablier-labs/audits/).\r\n- [ ] Create new GitHub tags and publish on NPM.\r\n- [ ] Refactor the `docs` to reflect the new single architecture and updated shapes for Linear. Refer to https://github.com/sablier-labs/docs/issues/203.\r\n- [ ] Update `docs` with the deployed addresses\r\n- [ ] Update the `deployments`\r\n- [ ] Update [examples](https://github.com/sablier-labs/examples/).\r\n- [ ] Update  [integration template](https://github.com/sablier-labs/lockup-integration-template).\r\n- [ ] Archive `v2-periphery`. Refer to https://github.com/sablier-labs/v2-periphery/issues/386.\r\n\r\n*(I wasn’t sure where the best place to put this list would be, but I guess it's fine here.)*","createdAt":"2025-01-09T17:08:55Z","labels":[],"number":1137,"repository":"sablier-labs/lockup","state":"closed","title":"Launch preparations","type":"discussion","updatedAt":"2025-01-14T11:35:10Z","url":"https://github.com/sablier-labs/lockup/discussions/1137"},{"author":"PaulRBerg","body":"Type safety for ERC-20 and ERC-721 interactions:\r\n\r\nhttps://github.com/jtriley-eth/token-types\r\n\r\nCC @sablier-labs/solidity.","createdAt":"2024-04-22T09:28:00Z","labels":[],"number":905,"repository":"sablier-labs/lockup","state":"closed","title":"Consider using Token Types","type":"discussion","updatedAt":"2025-01-13T13:21:49Z","url":"https://github.com/sablier-labs/lockup/discussions/905"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nThere are several cases when streams are created and a portion of the deposit amount is immediately withdrawable:\r\n\r\n- Unlock-Linear and Unlock-Cliff streams\r\n- Streams with the start time in the past\r\n\r\nWhat if we modified the create stream function to transfer any immediately withdrawable amount to the recipient?\r\n\r\n## Cost/ Benefit Analysis\r\n\r\nPros:\r\n\r\n- Improved UX for recipients and senders who'd like their recipients to have access to the unlocked amounts from day 1\r\n- More gas efficiency for recipients\r\n\r\nCons:\r\n\r\n- Less TVL in Sablier\r\n- Less potential to earn revenues (e.g., by lending the deposits).\r\n- Less gas efficiency for senders\r\n\r\n## Validation\r\n\r\nWe have received an explicit feature request for this from CerebrumDAO:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/c1ba0e42-40e4-40de-8f53-9c20eb9da800\"/>\r\n\r\n## RFC\r\n\r\nI'm on the fence. I posted this because I thought it was an interesting idea.\r\n\r\ncc @sablier-labs/solidity and @sablier-labs/frontend","createdAt":"2024-04-30T13:04:42Z","labels":[],"number":912,"repository":"sablier-labs/lockup","state":"closed","title":"Immediately transfer the streamed portion when creating streams","type":"discussion","updatedAt":"2025-01-05T11:31:26Z","url":"https://github.com/sablier-labs/lockup/discussions/912"},{"author":"PaulRBerg","body":"Idea: what if renamed `cancelMultiple` to `batchCancel`, and  `withdrawMultiple` to `batchWithdraw`? That would be more in line with the \"batch\" terminology.\r\n\r\nOr, what if we refactored the cancel and the withdraw functions to take arrays as inputs? 🤔\r\n\r\n@sablier-labs/solidity","createdAt":"2024-12-19T11:57:46Z","labels":[],"number":1120,"repository":"sablier-labs/lockup","state":"closed","title":"Refactoring the batch functions","type":"discussion","updatedAt":"2024-12-20T09:12:11Z","url":"https://github.com/sablier-labs/lockup/discussions/1120"},{"author":"PaulRBerg","body":"TIG, one of our largest users in Lockup, has requested a pausing feature whereby the streaming can be temporarily stopped and restarted later. Example:\r\n\r\n- 300 $TIG vested for 30 days\r\n- Vesting starts on Jan 1 and lasts until Jan 30\r\n- On Jan 10, 100 tokens have been vested\r\n- At this point, the sender pauses the vesting stream\r\n- The sender restarts it on Feb 1\r\n- The 2000 $TIG tokens will be vested until Feb 20\r\n\r\ncc @sablier-labs/engineers for feedback\r\n\r\nkeywords: lockup,vesting,pause,pausing,cancel,feature request,restarting\r\n\r\n<details><summary>Toggle to see user conversation with TIG</summary>\r\n<p>\r\n\r\n<img width=\"400\" alt=\"Pause Feature 0\" src=\"https://github.com/user-attachments/assets/ed6b2ac9-1d84-4786-9baa-369d0cf02cfc\" />\r\n\r\n<img width=\"400\" alt=\"Pause Feature 1\" src=\"https://github.com/user-attachments/assets/77d7c9b3-2f67-4234-9b88-562fe2b4e6ce\" />\r\n\r\n<img width=\"400\" alt=\"Pause Feature 2\" src=\"https://github.com/user-attachments/assets/78aaac8c-2b46-4b61-9b32-9a7962bbee55\" />\r\n\r\n</p>\r\n</details> ","createdAt":"2024-12-19T15:14:54Z","labels":[],"number":1121,"repository":"sablier-labs/lockup","state":"open","title":"Pause functionality for vesting streams","type":"discussion","updatedAt":"2024-12-19T15:15:55Z","url":"https://github.com/sablier-labs/lockup/discussions/1121"},{"author":"andreivladbrg","body":"In the latest PR https://github.com/sablier-labs/v2-core/pull/1108, we realized that we had an incorrect string returned by the `tokenURI` function. This was a consequence of the package tethering and the singleton. The issue consisted of having too many \"Sablier\" and \"Lockup\" words included in the string.\r\n\r\nOne of the reasons for making this mistake was that we wanted to maintain backward compatibility, i.e. allowing the latest version of the `NFTDescriptor` contract to be compatible with all previous releases, even though the actual SVG was not changed (just small things). But in reality, we have never updated the previous versions of the contract with the latest, and those small changes require a non-zero effort from our side. As we release more versions, the difficulty of keeping track of backward compatibility will likely rise exponentially. For example, these lines:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/9ef51a35fe0abe97fd5e4e6e93074f5212e37cf8/src/LockupNFTDescriptor.sol#L73-L83\r\n\r\nare required just to maintain compatibility with the previous wording we used for token (asset). If, in the future, we decide to rename the token to \"asset\" again (hypothetically—we can’t know for sure in advance), we will need to handle all such cases. This is just one example; there are more places.\r\n\r\nAnother argument is that the `NFTDescriptor` is at its size limit, so adding a lot of logic just for backward compatibility will reduce the potential for design improvements, as there is no more space left.\r\n\r\n#### TLDR:\r\n\r\n1. Non-zero effort to maintain backward compatibility.\r\n2. We are not actually updating the contracts.\r\n3. Limited flexibility to add new design features due to size constraints.\r\n\r\nHaving said that, should we give up on backward compatibility? Curious to hear what you think, @sablier-labs/solidity.\r\n\r\n","createdAt":"2024-12-10T18:47:50Z","labels":[],"number":1109,"repository":"sablier-labs/lockup","state":"closed","title":"Should we give up on backward compatibility for the `NFTDescriptor` contract?","type":"discussion","updatedAt":"2024-12-11T16:04:18Z","url":"https://github.com/sablier-labs/lockup/discussions/1109"},{"author":"partylikeits1983","body":"I was wondering why does Sablier allow for token streams to be created with a `startTime` that is in the past relative to the current `block.timestamp`? Are there really use cases to create a stream that has a start and end time that are in the past relative to the current timestamp? \r\n\r\n[This function](https://github.com/sablier-labs/v2-core/blob/43cf7c9d968e61a5a03e9237a71a27165b125414/src/SablierV2LockupLinear.sol#L163) doesn't check if startTime is less than the current timestamp. This doesn't have adverse side effects, just a curious why isn't there a check for: \r\n```solidity\r\nrequire(startTime >= block.timestamp)\r\n```\r\n\r\nWhat use cases are there for creating a stream in the past? \r\n\r\nSource: https://github.com/sablier-labs/v2-core/blob/43cf7c9d968e61a5a03e9237a71a27165b125414/src/SablierV2LockupLinear.sol#L163","createdAt":"2024-12-11T11:11:07Z","labels":[],"number":1111,"repository":"sablier-labs/lockup","state":"closed","title":"Use case for creating a stream with start & end time in the past","type":"discussion","updatedAt":"2024-12-13T10:00:06Z","url":"https://github.com/sablier-labs/lockup/discussions/1111"},{"author":"robotrobo","body":"Hey Sablier team! Paul asked us to share some info on Olympix comparing how we work to Slither/other open-source tools. I think you guys will be really excited to give it a try!\r\n1. Superior Accuracy: Olympix’s static analyzer offers enterprise-grade security with a custom-built compiler and detectors, which are much more precise and faster than open-source alternatives like Slither. This reduces false positives, saving you time and increasing efficiency.\r\n2. Deeper Contract Coverage: Our tool enables deeper contract traversal and vulnerability detection, catching more complex issues that Slither might miss. It’s tailored for large-scale, high-stakes environments.\r\n3. Real-Time Detection: Olympix integrates seamlessly into development environments, providing real-time feedback while writing code. This proactive approach allows devs to identify and fix vulnerabilities before even starting an external audit.\r\n4. Accelerates Development Cycles: By catching vulnerabilities earlier, your team can avoid lengthy remediation periods, speed up audit readiness, and focus on innovation instead of rework.\r\nWe've done a case study on the Eigen Layer codebase where we ran both Slither and our static analyzer to show how they perform (Olympix = 75% accuracy, Slither = 15% accuracy) so happy to dive into the details of that and show you how easy it is to use the tool on a quick call!\r\n\r\nYou can use the free tool as well to get a sense of ux/ui - our enteprise version has more premium detectors and we also have enterprise automated unit testing and mutation testing.\r\nLooking forward to your feedback!! :pray:","createdAt":"2024-11-07T05:08:08Z","labels":[],"number":1078,"repository":"sablier-labs/lockup","state":"open","title":"Alternative to Bulloak + static analysis + mutation testing","type":"discussion","updatedAt":"2024-11-20T18:02:29Z","url":"https://github.com/sablier-labs/lockup/discussions/1078"},{"author":"PaulRBerg","body":"Since the addition of `MerkleInstant` contract, I wonder if the core <> periphery still makes sense?\r\n\r\nThe `MerkleInstant` contract holds the airdrop funds, which are never deposited in any `core` contract.\r\n\r\nWhat do you think, @sablier-labs/solidity?","createdAt":"2024-10-22T12:58:21Z","labels":[],"number":1068,"repository":"sablier-labs/lockup","state":"closed","title":"Getting rid of the core <> periphery terminology","type":"discussion","updatedAt":"2024-11-15T06:57:30Z","url":"https://github.com/sablier-labs/lockup/discussions/1068"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAs @maxdesalle pointed out on [Slack](https://sablier.slack.com/archives/C054UBV3BT9/p1727312549940449), one of the things that holds back NFT adoption is the Balkanization of the NFT collections: different releases, different chains, and different Lockup flavors.\r\n\r\nThe same issue has recently arisen in a conversation with a user — they were unsure which distribution shape in the UI corresponded to which Lockup model.\r\n\r\n<img width=\"350\" alt=\"SCR-20241015-kmtw\" src=\"https://github.com/user-attachments/assets/36efc45e-c845-49c7-9c66-4355ec3c2e0e\">\r\n\r\n## Solution\r\n\r\nMerge all Lockups in one contract with the goal of providing a superior user experience.\r\n\r\nI imagine that the maximum contract size of ~24kB following prevents us from accomplishing this design.\r\n\r\nBut what if we lower the optimizer runs, and we subsume the `LockupLinear` logic in `LockupDynamic`, i.e. we let the LD logic to handle the linear streams? \r\n\r\n## RFC\r\n\r\ncc @sablier-labs/engineers for feedback.","createdAt":"2024-10-15T10:39:26Z","labels":[],"number":1064,"repository":"sablier-labs/lockup","state":"closed","title":"Merging all Lockups in one contract","type":"discussion","updatedAt":"2024-11-14T13:05:23Z","url":"https://github.com/sablier-labs/lockup/discussions/1064"},{"author":"smol-ninja","body":"> [!IMPORTANT]  \r\n> The below proposal is for future release of Lockup and not v2.2.\r\n\r\nContext\r\n---------\r\nIn the current design of Lockup linear, the amount unlocked at `cliff` is a function of the time elapsed. That is, if the cliff timestamp is 30% ahead of the start time, this would unlock 30% of the total amount at the cliff. This makes it less flexible for creating a cliff linear vesting.\r\n\r\n> [!NOTE]  \r\n> In a cliff linear vesting, token distributions include a preset amount unlocked at the cliff followed by a linear distribution. The amount unlocks at the cliff can be any and does not need to follow the curve slope.\r\n\r\nExisting solution\r\n---------\r\nA Cliff linear vesting can be created using Lockup Dynamic (LD). It has a few problems:\r\n1. It is not intuitive to use LD for creating Linear streams with cliffs.\r\n2. Creating a cliff linear vesting stream is less gas efficient (same argument as [why we chose to implement lockup tranched](https://github.com/sablier-labs/company-discussions/discussions/19)). \r\n3. Despite having a cliff feature in Lockup Linear (LL), it does not support Cliff linear vesting. \r\n\r\nProposed solution\r\n---------\r\nModify the Lockup Linear design to allow the creation of cliff linear vesting streams. So that,\r\n1. LL can be used to create streams with unlocks instantly followed by a linear curve (as requested by one of our users). \r\n2. LL can be used to create a stream with a fixed amount of unlock at a cliff time followed by a linear curve.\r\n3. it becomes more gas-efficient than doing the same with LD.\r\n4. Existing curves such as Unlock-cliff and Unlock-linear on Sablier UI will become gas efficient. Because they are created using LD at present. \r\n\r\nThoughts @sablier-labs/everybody?","createdAt":"2024-04-16T11:19:52Z","labels":[],"number":903,"repository":"sablier-labs/lockup","state":"closed","title":"Design Lockup Linear to support Cliff Linear vesting","type":"discussion","updatedAt":"2024-10-31T11:32:18Z","url":"https://github.com/sablier-labs/lockup/discussions/903"},{"author":"andreivladbrg","body":"After the package tethering change, we’ve significantly increased the number of imports in `Base.t.sol`:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/a322ba684812fefb6fbf41cf6fd12e88904df662/test/Base.t.sol#L4-L32\r\n\r\n$~$\r\n\r\n\r\nOne idea to reduce the number of imports (assuming we agree that having this many imports isn’t ideal) is to declare the testing contracts as contracts instead of interfaces (see the code below). Since the contracts themselves already inherit the interfaces, I don’t see any downside to this approach, as it would reduce the overall number of imports throughout the test files.\r\n\r\n\r\ninstead of:\r\n```solidity\r\nISablierLockupDynamic internal lockupDynamic;\r\nISablierLockupLinear internal lockupLinear;\r\nISablierLockupTranched internal lockupTranched;\r\n```\r\n\r\nwe could (option 1):\r\n```solidity\r\nSablierLockupDynamic internal lockupDynamic;\r\nSablierLockupLinear internal lockupLinear;\r\nSablierLockupTranched internal lockupTranched;\r\n```\r\n\r\n---\r\n\r\nAnother alternative to reducing the number of imports would be to import them directly from the contract (option 2):\r\n\r\n```solidity\r\nimport { LockupNFTDescriptor, ILockupNFTDescriptor } from \"src/core/LockupNFTDescriptor.sol\";\r\nimport { SablierLockupDynamic, ISablierLockupDynamic } from \"src/core/SablierLockupDynamic.sol\";\r\nimport { SablierLockupLinear, ISablierLockupLinear } from \"src/core/SablierLockupLinear.sol\";\r\nimport { SablierLockupTranched, ISablierLockupTranched } from \"src/core/SablierLockupTranched.sol\";\r\n```\r\n\r\nPersonally I chose option 1. wdyt @sablier-labs/solidity?","createdAt":"2024-10-12T15:30:52Z","labels":[],"number":1062,"repository":"sablier-labs/lockup","state":"closed","title":"Use contracts instead of interfaces declarations in `Base_Test`","type":"discussion","updatedAt":"2024-10-26T13:45:38Z","url":"https://github.com/sablier-labs/lockup/discussions/1062"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe currently have the `--optimizer-runs` config option set to 10,000:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/4918aca82c552a62619e2c71f2241abf1e877f72/foundry.toml#L16\r\n\r\n## What we want\r\n\r\nThe number of optimizer runs should be set according to how many times the developer expects the contract to be called. To quote the [Solidity docs](https://docs.soliditylang.org/en/v0.8.17/internals/optimizer.html) on this topic:\r\n\r\n> The number of runs specifies roughly how often each opcode of the deployed code will be executed across the life-time of the contract\r\n\r\nThe Sablier V2 lockup contracts are \"singletons\" - they contain both storage and functionality, and are expected to be the main points of entry into the protocol. Assuming Sablier V2 is successful, the contracts will be called a great many number of times. Thus, we would ideally set the number of optimizer runs to the maximum value allowed, which is $2^{32}-1$, just like [Seaport does](https://github.com/ProjectOpenSea/seaport/blob/049828e49da5e142a1a9f6cc0a725069e61e2564/foundry.toml#L14).\r\n\r\n## What we can get\r\n\r\nUnfortunately, as discussed at point 8 in #279, a high number of optimizer runs significantly increases the size. Using commit [9fa613f1](https://github.com/sablier-labs/v2-core/commit/9fa613f1d826d898d216d7d880afaaf20d022cea) and setting the `optimizer_runs` config option to $2^{32}-1$, I have obtained a size of ~29kB for the pro contract, which is ~4.5kB over the ~24.5kB limit.\r\n\r\nAgain, to quote the Solidity docs:\r\n\r\n> This means it is a trade-off parameter between code size (deploy cost) and code execution cost (cost after deployment). A “runs” parameter of “1” will produce short but expensive code. In contrast, a larger “runs” parameter will produce longer but more gas efficient code.\r\n\r\n## Note about Yul IR\r\n\r\nWe are also using the Yul IR optimizer (`--via-ir`), so I am not sure we actually want to bump the optimizer runs to the maximum value possible. [I have posted this as a question on Twitter](https://twitter.com/PaulRBerg/status/1617834302284365832), and I may also follow up in the Solidity server if I don't get a good response on Twitter.","createdAt":"2023-01-24T11:41:23Z","labels":[],"number":290,"repository":"sablier-labs/lockup","state":"closed","title":"Optimizer runs - we can't always get what we want","type":"discussion","updatedAt":"2024-10-21T10:02:22Z","url":"https://github.com/sablier-labs/lockup/discussions/290"},{"author":"lantianlaoli","body":"I'm trying to achieve it (https://github.com/sablier-labs/v2-core/issues/1052)\r\nThe only change to the origin code is change the `renounce` function's visibility `external` to `public`.\r\n```\r\n/// @inheritdoc ISablierV2Lockup\r\n    function renounce(uint256 streamId) public override noDelegateCall notNull(streamId)\r\n```\r\n\r\nThe other change  are newly added code. Please refer to my fork repo for details.(https://github.com/cxp-13/v2-core.git)\r\n\r\n```\r\nPS E:\\solidity_open_source_projects\\v2-core> forge -V\r\nforge 0.2.0 (ef1989d 2023-12-10T13:42:34.571002000Z)\r\n```\r\n\r\nwhen I  execute `forge test --match-contract Renounce_LockupDynamic_Integration_Concrete_Test  -vvv`.\r\nconsole shows:\r\n\r\n<details><summary>Toggle to see logs</summary>\r\n<p>\r\n\r\n```\r\nPS E:\\solidity_open_source_projects\\v2-core> forge test --match-contract Renounce_LockupDynamic_Integration_Concrete_Test  -vvv       \r\n[⠑] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 8 tests for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:Renounce_LockupDynamic_Integration_Concrete_Test\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_Renounce() (gas: 273699)\r\nTraces:\r\n  [273699] Renounce_LockupDynamic_Integration_Concrete_Test::test_Renounce()\r\n    ├─ [0] VM::warp(1714517999 [1.714e9])\r\n    │   └─ ← ()\r\n    ├─ [229592] LockupDynamic::31df3d48(00000000000000000000000000000000000000000000000000000000000000200000000000000000000000006332e7b1deb1f1a0b77b2bb18b144330c7291bca00000000000000000000000003a6a84cd762d9707a21605b548aaab891562aab00000000000000000000000000000000000000000000021fbb76e79bace171bf000000000000000000000000a4ad4f68d0b91cfd19687c881e50f3a00242828c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000066341af00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000142daaefac3480821d046ebae9a2c00b614f9dc0000000000000000000000000000000000000000000000000000aa87bee53800000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000878678326eac9000000000000000000000000000000000000000000000000000002b93855d12ba000000000000000000000000000000000000000000000000000000000000663424b40000000000000000000000000000000000000000000001969368974c05b0000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000066344200)\r\n    │   ├─ emit MetadataUpdate(_tokenId: 2)\r\n    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: Good Recipient: [0x03A6a84cD762D9707A21605b548aaaB891562aAb], tokenId: 2)\r\n    │   ├─ [15318] DAI::transferFrom(Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898], 10000000000000000000000 [1e22])\r\n    │   │   ├─ emit Transfer(from: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], to: LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898], value: 10000000000000000000000 [1e22])\r\n    │   │   └─ ← true\r\n    │   ├─ [8518] DAI::transferFrom(Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], Broker: [0x142daAEFAc3480821D046eBAe9a2C00b614F9dC0], 30090270812437311935 [3.009e19])\r\n    │   │   ├─ emit Transfer(from: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], to: Broker: [0x142daAEFAc3480821D046eBAe9a2C00b614F9dC0], value: 30090270812437311935 [3.009e19])\r\n    │   │   └─ ← true\r\n    │   ├─ emit CreateLockupDynamicStream(streamId: 2, funder: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], sender: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], recipient: Good Recipient: [0x03A6a84cD762D9707A21605b548aaaB891562aAb], amounts: CreateAmounts({ deposit: 10000000000000000000000 [1e22], brokerFee: 30090270812437311935 [3.009e19] }), asset: DAI: [0xA4AD4f68d0b91CFD19687c881e50f3A00242828c], cancelable: true, transferable: true, segments: [Segment({ amount: 2500000000000000000000 [2.5e21], exponent: 3140000000000000000 [3.14e18], timestamp: 1714693300 [1.714e9] }), Segment({ amount: 7500000000000000000000 [7.5e21], exponent: 500000000000000000 [5e17], timestamp: 1714700800 [1.714e9] })], timestamps: Timestamps({ start: 1714690800 [1.714e9], end: 1714700800 [1.714e9] }), broker: Broker: [0x142daAEFAc3480821D046eBAe9a2C00b614F9dC0])\r\n    │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000002\r\n    ├─ [0] VM::expectEmit(LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898])\r\n    │   └─ ← ()\r\n    ├─ emit RenounceLockupStream(streamId: 2)\r\n    ├─ [0] VM::expectEmit(LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898])\r\n    │   └─ ← ()\r\n    ├─ emit MetadataUpdate(_tokenId: 2)\r\n    ├─ [4355] LockupDynamic::renounce(2)\r\n    │   ├─ emit RenounceLockupStream(streamId: 2)\r\n    │   ├─ emit MetadataUpdate(_tokenId: 2)\r\n    │   └─ ← ()\r\n    ├─ [1494] LockupDynamic::isCancelable(2) [staticcall]\r\n    │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000000\r\n    ├─ [0] VM::assertFalse(false, \"isCancelable\") [staticcall]\r\n    │   └─ ← unknown selector `0x7ba04809` for VmCalls\r\n    └─ ← unknown selector `0x7ba04809` for VmCalls\r\n\r\n[PASS] test_RevertGiven_Null() (gas: 11214)\r\n[PASS] test_RevertGiven_StatusCanceled() (gas: 87726)\r\n[PASS] test_RevertGiven_StatusDepleted() (gas: 63282)\r\n[PASS] test_RevertGiven_StatusSettled() (gas: 24947)\r\n[PASS] test_RevertGiven_StreamNotCancelable() (gas: 635254)\r\n[PASS] test_RevertWhen_CallerNotSender() (gas: 268510)\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_RevertWhen_DelegateCalled() (gas: 11794)\r\nTraces:\r\n  [11794] Renounce_LockupDynamic_Integration_Concrete_Test::test_RevertWhen_DelegateCalled()\r\n    ├─ [0] VM::warp(1714517999 [1.714e9])\r\n    │   └─ ← ()\r\n    ├─ [400] LockupDynamic::renounce(1) [delegatecall]\r\n    │   └─ ← custom error a1c0d6e5:\r\n    ├─ [0] VM::assertFalse(false, \"delegatecall success\") [staticcall]\r\n    │   └─ ← unknown selector `0x7ba04809` for VmCalls\r\n    └─ ← unknown selector `0x7ba04809` for VmCalls\r\n\r\nTest result: FAILED. 6 passed; 2 failed; 0 skipped; finished in 13.71ms\r\n\r\nRan 1 test suites: 6 tests passed, 2 failed, 0 skipped (8 total tests)\r\n\r\nFailing tests:\r\nEncountered 2 failing tests in test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:Renounce_LockupDynamic_Integration_Concrete_Test\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_Renounce() (gas: 273699)\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_RevertWhen_DelegateCalled() (gas: 11794)\r\n\r\nEncountered a total of 2 failing tests, 6 tests succeeded\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\nThis issue also occurs in `test\\integration\\concrete\\lockup\\cancel-multiple\\cancelMultiple.t.sol`.  \r\nThere were no issues with the testing of functions other than `test_SevertWhen_DelegateCalled`.\r\n\r\n<details><summary>Toggle to see logs</summary>\r\n<p>\r\n\r\n```\r\nPS E:\\solidity_open_source_projects\\v2-core> forge test --match-test test_RevertGiven_OnlyNull                                 \r\n[⠑] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 1 test for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:RenounceMultiple_LockupDynamic_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12075)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 13.68ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-linear/LockupLinear.t.sol:WithdrawMultiple_LockupLinear_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 20650)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 12.64ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:CancelMultiple_LockupDynamic_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12111)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 14.28ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-tranched/LockupTranched.t.sol:CancelMultiple_LockupTranched_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12066)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 14.83ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:WithdrawMultiple_LockupDynamic_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 20672)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 14.99ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-linear/LockupLinear.t.sol:CancelMultiple_LockupLinear_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12111)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 11.65ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-tranched/LockupTranched.t.sol:WithdrawMultiple_LockupTranched_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 20606)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 12.37ms\r\n\r\nRan 7 test suites: 7 tests passed, 0 failed, 0 skipped (7 total tests)\r\n```\r\n\r\n</p>\r\n</details> ","createdAt":"2024-10-09T14:18:18Z","labels":[],"number":1060,"repository":"sablier-labs/lockup","state":"closed","title":"unknown selector `0x7ba04809` for VmCalls","type":"discussion","updatedAt":"2024-10-10T09:52:21Z","url":"https://github.com/sablier-labs/lockup/discussions/1060"},{"author":"gabrielstoica","body":"Hey, \r\n\r\nI'm looking for a way to withdraw a stream and transfer it to another recipient in a programmatic way, through an intermediary contract (aka Stream Management contract - see [this discussion](https://github.com/sablier-labs/v2-core/discussions/977)).\r\nAs stated in [this discussion](https://github.com/sablier-labs/v2-core/discussions/669) on NFT transferability, only the stream recipient can toggle the transfer - through the `withdrawMaxAndTransfer` method which [checks](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/SablierV2Lockup.sol#L424-L428) if the `msg.sender` is the current recipient.\r\n\r\nHowever, this can be bypassed through a 3-step process, as follows:\r\n1. Approve the intermediary contract to transfer the stream's NFT by calling the `SablierV2Lockup.approve` method;\r\n2. Withdraw the maximum withdrawable amount from the stream by calling the `withdrawMax` method;\r\n3. Transfer the NFT by calling the `transferFrom` exposed by the `SablierV2Lockup` implementation;\r\n\r\nWith all that said, should only the stream recipient be able to transfer the NFT? If so, the workflow above should not be allowed. Otherwise, if that's not an issue, is there another way to accomplish it?\r\n\r\nThanks!","createdAt":"2024-10-04T10:17:54Z","labels":[],"number":1050,"repository":"sablier-labs/lockup","state":"closed","title":"Who can toggle an NFT transfer?","type":"discussion","updatedAt":"2024-10-23T12:31:49Z","url":"https://github.com/sablier-labs/lockup/discussions/1050"},{"author":"andreivladbrg","body":"In [this issue](https://github.com/sablier-labs/v2-core/issues/1032), the question is raised about whether we should charge the claim fee for all existing campaigns or only for campaigns created after the fee is activated.\r\n\r\n**Scenario example:** The fee is initially set to 0, and campaign X1 is created. Half of the recipients claim their airdrop with zero fees. In the meantime, the fee is updated to, let’s say `0.00001 ETH`, and campaign X2 is created. All the recipients in X2 will pay the claim fee, but what about the remaining recipients in X1?\r\n\r\nFor more details, please refer to the comments in issue #1032.\r\n\r\n@sablier-labs/everybody  \r\n\r\nThe question is:\r\n","createdAt":"2024-09-10T12:27:11Z","labels":[],"number":1039,"repository":"sablier-labs/lockup","state":"closed","title":"Decide whether the claim ETH fees should be charged for all existing and future campaigns or only for the upcoming ones","type":"discussion","updatedAt":"2024-09-10T16:01:41Z","url":"https://github.com/sablier-labs/lockup/discussions/1039"},{"author":"PaulRBerg","body":"As per the discussion with @razgraf and @IaroslavMazur in https://github.com/sablier-labs/v2-core/pull/560, we should consider adjusting the design of the hourglass SVG in a future release of the NFT descriptor.\r\n\r\nWhen the stream is `PENDING`:\r\n\r\n- The upper bulb should be comparatively larger than the upper bulb when the stream is `STREAMING`\r\n- The lower bulb should be empty","createdAt":"2023-06-22T21:19:34Z","labels":[],"number":562,"repository":"sablier-labs/lockup","state":"closed","title":"Comparatively larger upper bold + empty lower bulb when the stream is PENDING","type":"discussion","updatedAt":"2024-09-10T13:22:20Z","url":"https://github.com/sablier-labs/lockup/discussions/562"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/company-discussions/discussions/55.</sup>\r\n\r\n## Solution 1: Merkle Lockup like contract\r\n\r\nUse Factory to deploy a contract similar to Merkle Lockup.\r\n\r\n### Pros:\r\n1. Familiar user experience akin to Merkle Lockup.\r\n3. Easier to implement.\r\n4. Each creator has control over their deployed contract.\r\n\r\n### Cons:\r\n1. Does not consolidate TVL, causing fragmented liquidity across multiple contracts. In Merkle Lockup, this isn't a problem because each claim leads to TVL increase of Lockup contracts.\r\n2. Harder to monitor on-chain key KPIs such as combined TVL, total users, and gas usage.\r\n\r\n## Solution 2: Single Bespoke Contract\r\n\r\nA single contract uses campaign ID to store campaign related information without deploying a separate contract for each campaign.\r\n\r\n### Pros:\r\n1. Single contract for all instant airdrop campaigns.\r\n2. Simplifies monitoring of token flow, gas usage, unique users, and TVL.\r\n4. Allows clawback before start time or after expiry.\r\n5. No need for individual contract deployments.\r\n\r\n### Cons:\r\n1. No contract admin means risk of unrecoverable accidental asset transfers.\r\n2. May require UI to adapt to a new contract interface. \r\n\r\n<details><summary>Click to expand mock interface code</summary>\r\n\r\n```solidity\r\ninterface ISablierMerkleDrop {\r\n    /// @notice Admin of the campaign.\r\n    function admin(uint256 campaignId) external returns (address);\r\n\r\n    /// @notice The ERC-20 asset to distribute.\r\n    function asset(uint256 campaignId) external returns (IERC20);\r\n\r\n    /// @notice The cut-off point for the campaign, as a Unix timestamp. A value of zero means there is no expiration.\r\n    function expiration(uint256 campaignId) external returns (uint40);\r\n\r\n    /// @notice Returns a flag indicating whether a claim has been made for a given index.\r\n    /// @dev Uses a bitmap to save gas.\r\n    /// @param index The index of the recipient to check.\r\n    function hasClaimed(uint256 campaignId, uint256 index) external returns (bool);\r\n\r\n    /// @notice Returns a flag indicating whether the campaign has expired.\r\n    function hasExpired(uint256 campaignId) external view returns (bool);\r\n\r\n    /// @notice The content identifier for indexing the campaign on IPFS.\r\n    function ipfsCID(uint256 campaignId) external view returns (string memory);\r\n\r\n    /// @notice The root of the Merkle tree used to validate the proofs of inclusion.\r\n    function merkle_root(uint256 campaignId) external returns (bytes32);\r\n\r\n    /// @notice Returns the amount of tokens available to claim.\r\n    function remainingClaimAmount(uint256 campaignId) external view returns (uint256);\r\n\r\n    /// @notice Returns the start time of the campaign, upto which sender can clawback the funds.\r\n    function startTime(uint256 campaignId) external view returns (uint40);\r\n\r\n    /// @notice Returns the amount of tokens available to claim.\r\n    function TotalClaimAmount(uint256 campaignId) external view returns (uint256);\r\n\r\n    // **************** NON-CONSTANT FUNCTIONS *********** //\r\n\r\n    /// @notice Creates a new campaign.\r\n    function create(Params memory params) external returns (uint256 campaignId);\r\n\r\n    /// @notice Claws back the tokens from the campaign until startTime or after expiration.\r\n    function clawback(uint256 campaignId, address to, uint128 amount) external onlyCampaignAdmin(campaignId);\r\n\r\n    /// @notice Makes the claim and withdraw tokens.\r\n    function claim(\r\n        uint256 campaignId,\r\n        uint256 index,\r\n        address recipient,\r\n        uint128 amount,\r\n        bytes32[] calldata merkleProof\r\n    )\r\n        external;\r\n}\r\n```\r\n</details>\r\n\r\n## My comment\r\n\r\nI am in favour of 2nd solution because I think having on-chain KPIs is important in the absence of stream creations. I'd like to hear everyone's opinion on this. Feel free to suggest more solution.\r\n\r\ncc @sablier-labs/everybody\r\n\r\n### Related discussions\r\n- [Gas guzzling is a key KPI for instant airdrops contract](https://github.com/sablier-labs/company-discussions/discussions/55#discussioncomment-9908640)","createdAt":"2024-07-18T11:35:47Z","labels":[],"number":998,"repository":"sablier-labs/lockup","state":"closed","title":"Brainstorming solutions to implement instant airdrop contract","type":"discussion","updatedAt":"2024-09-06T16:25:36Z","url":"https://github.com/sablier-labs/lockup/discussions/998"},{"author":"andreivladbrg","body":"In the PR [#979](https://github.com/sablier-labs/v2-core/pull/979) a question was raised that remained open ended.\r\n\r\nAfter merging `core` and `periphery` into a [single repository](https://github.com/sablier-labs/v2-core/tree/ce5b2dff5129a4693ce3f7e5776593957aa7bb23/src), we now have a shared architecture between them (abstracts, interfaces, types).\r\n\r\nThe question and proposal from the PR: Should we merge the interfaces and the errors into a single dir in the root of `src`?\r\n\r\n\r\n```sh\r\ncurrent\r\n├── core\r\n│   └──everything the same\r\n└── periphery\r\n    └── everything the same\r\n\r\nidea\r\n├── core\r\n│   └──everything the same but without errors and interfaces\r\n├── errors\r\n│   └── both core and periphery errors\r\n├── interfaces\r\n│   └── both core and periphery interfaces\r\n└── periphery\r\n    └── everything the same but without errors and interfaces\r\n```\r\n\r\nI consider that it is better to keep them separate for an easier repo structure to manage (current version). What do you think? Do you have any suggestions for structuring the `src` dir? @sablier-labs/solidity ","createdAt":"2024-08-12T08:51:48Z","labels":[],"number":1013,"repository":"sablier-labs/lockup","state":"closed","title":"Should we have a common interface and errors directories after package tethering?","type":"discussion","updatedAt":"2024-09-06T10:21:13Z","url":"https://github.com/sablier-labs/lockup/discussions/1013"},{"author":"smol-ninja","body":"### Leaving some links here\r\n- [Running semgrep on lockup `main` branch](https://app.warp.dev/block/QfFqqUDS0iVbg0Iwyrltea)\r\n- [Official website](https://semgrep.dev/)\r\n- [Custom rules for smart contract](https://github.com/Decurity/semgrep-smart-contracts/tree/master?tab=readme-ov-file)\r\n- [Uniswap v4 CI using semgrep](https://github.com/Uniswap/v4-core/actions/runs/10210213833/workflow)\r\n\r\n### Benefits\r\n- Up to date rules based on new public findings in solidity code\r\n- Automatic checks against latest vulnerabilities in Sablier codebase through CI\r\n- Custom rules allow filtering redundant and outdated disclosures such as using `unchecked` for `++i` in loop\r\n\r\n### Running semgrep on `v1.0.0`\r\n\r\n<img width=\"728\" alt=\"Screenshot 2024-09-05 at 23 46 57\" src=\"https://github.com/user-attachments/assets/ee6fe978-8176-4d4c-8c4f-d40b2d69a35f\">\r\n\r\ncc @sablier-labs/solidity","createdAt":"2024-09-05T22:47:59Z","labels":[],"number":1037,"repository":"sablier-labs/lockup","state":"open","title":"Integrate semgrep in CI on every PR as well as CI deep","type":"discussion","updatedAt":"2024-09-06T09:41:37Z","url":"https://github.com/sablier-labs/lockup/discussions/1037"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nI've had a call with [NFTFI.com](https://nftfi.com/), and they shared some feedback:\r\n\r\n1. They can't accept cancelable streams as collateral\r\n2. The fact that cancelable and non-cancelable streams are bundled under the same umbrella is problematic\r\n\r\nNFTFI has a whitelisting mechanism that works on a per-collection basis. But since our NFT collection includes both cancelable and non-cancelable streams, this complicates the integration. They will need to add bespoke checks for the cancelability of streams.\r\n\r\n## Solution\r\n\r\nDeploying separate NFT contracts for cancelable and non-cancelable streams would be the solution.\r\n\r\nHowever, given the significant development cost, I am not yet convinced that we should do this.\r\n\r\nMore brainstorming is needed before arriving at a definite conclusion.","createdAt":"2023-08-22T14:57:08Z","labels":[],"number":659,"repository":"sablier-labs/lockup","state":"closed","title":"Separate NFT contracts for cancelable and non-cancelable streams","type":"discussion","updatedAt":"2024-09-05T12:59:37Z","url":"https://github.com/sablier-labs/lockup/discussions/659"},{"author":"PaulRBerg","body":"I have always found it a bit odd that Foundry went with singular-form nouns for `script` and `test`. In software engineering, plurals are more common (and, I would argue, more natural since multiple files are confined in these directories).\r\n\r\nI've recently seen that Maple used the plural form:\r\n\r\n- https://github.com/maple-labs/maple-core-v2/tree/00f01ae7175885f8d49ac201a1c72465e320b2f6/scripts\r\n- https://github.com/maple-labs/maple-core-v2/tree/00f01ae7175885f8d49ac201a1c72465e320b2f6/tests\r\n\r\nWhat if did the same, and renamed `script` to `scripts`, and `test` to `tests`?","createdAt":"2023-05-21T14:44:49Z","labels":[],"number":506,"repository":"sablier-labs/lockup","state":"closed","title":"Use plural for root directories","type":"discussion","updatedAt":"2024-09-04T21:47:33Z","url":"https://github.com/sablier-labs/lockup/discussions/506"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe've recently run a public audit context on CodeHawks, and it was very much a fruitful exercise. An important finding is [M-03: The caller of withdraw and renounce can skip callbacks, by sending less gas](https://www.codehawks.com/report/clvb9njmy00012dqjyaavpl44#L-01).\r\n\r\n@sablier-labs/solidity brainstormed how to address the issue [internally](https://github.com/sablier-labs/company-discussions/discussions/60) for a few days.\r\n\r\nNow, after some deliberation, I have come up with this new design for the hooks, which will address both the Gas Bomb and the Skipping Hooks problem.\r\n\r\n## Proposal\r\n\r\n- Remove all hooks except the recipient hooks\r\n- Run hooks only to known, previously allowlisted contracts\r\n- The allowlisting can be performed by the contract admin only\r\n- The allowlisting is a 'one-way street' - an allowlisted recipient contract cannot be removed from the allowlist\r\n- The allowlisting is protected by a query to `IERC165-supportsInterface` method which must be implemented.\r\n\r\n## Rationale\r\n\r\nGenerally, the point is to **meet users where they are**. So far, only the recipient hooks have garnered interest, e.g. Fjord Foundry who is building a staking contract for Sablier NFTs. We should optimize our protocol in light of this.\r\n\r\nThe design in this proposal enables the implementation of contracts that hold stream NFTs on behalf of users, such as vaults or staking contracts.\r\n\r\nThe allowlisting is irreversible in order to provide stronger immutability and decentralization guarantees. Once a recipient contract is allowlisted, integrators should NOT have to trust us to keep their contract on the allowlist. Imagine how bad it would be if our keys are hacked - the attacker could effectively freeze all assets in the staking protocol.\r\n\r\nFurthermore, the `supportsInterface` method is there to preclude the contract admin from accidentally allowlisting contracts that do not implement Sablier hooks.\r\n\r\n## API Changes\r\n\r\n### `SablierV2Lockup`\r\n\r\n#### Functions\r\n\r\n- Add `isAllowedToHook`\r\n- Add `allowToHook`\r\n- Change the hooks in `_cancel` and `withdraw` to query the allowlist before running them\r\n- Remove the `try/catch` block to revert the entire tx when the hook reverts\r\n- Remove the sender hooks in `_cancel`, `renounce`, and `withdraw`\r\n\r\n> [!NOTE]\r\n> As suggested by @smol-ninja [here](https://github.com/sablier-labs/v2-core/pull/951#discussion_r1648940696), we might have to ask the hook to return the function selector in order to guarantee that the Sablier function has sufficient gas to finish the execution of the tx. I'm currently investigating this.\r\n\r\n#### Events\r\n\r\n- Add `AllowToHook`\r\n\r\n### New Behavior\r\n\r\n### `ISablierLockupRecipient`\r\n\r\n*Note: I removed \"V2\" from this interface due to the upcoming [package tethering](https://github.com/sablier-labs/v2-core/issues/808).*\r\n\r\n- Inherit `IERC165` interface\r\n\r\n## Risks\r\n\r\nIt is impossible to prevent the following risks without compromising on decentralization. To mitigate them, we will be prudent about what contracts get allowlisted, and maintain an updated list of allowlisted entities in our docs.\r\n\r\n- Revert risk - the recipient hooks SHOULD be designed with no reverts.\r\n- If the allowlisted contract is upgradeable, the owner could upgrade the implementation to not comply with `ISablierLockupRecipient` anymore. Or they could intentionally DoS all senders.\r\n- Gas bomb risk: a contract that consumes a lot of gas could require the sender to pay a huge amount of gas for canceling the stream.\r\n- If the allowlisted contract contains a delegatecall, they can run arbitrary logic and e.g. DoS or gas bomb the sender.\r\n\r\n## RFC\r\n\r\nThis proposal enables a safe and improved hook architecture in the Lockup protocol, all the while not compromising on immutability and decentralization.\r\n\r\nKindly asking @sablier-labs/everybody and the Fjord Foundry team for comments on this.\r\n\r\nSee the accompanying PR for implementation details: https://github.com/sablier-labs/v2-core/pull/951","createdAt":"2024-06-21T16:07:55Z","labels":[],"number":952,"repository":"sablier-labs/lockup","state":"closed","title":"Hook allowlist to fix M-03","type":"discussion","updatedAt":"2024-09-04T17:32:32Z","url":"https://github.com/sablier-labs/lockup/discussions/952"},{"author":"PaulRBerg","body":"The problem with the `sender` argument is that it can be easily confused with the Ethereum property `msg.sender`.\r\n\r\nIn #73, I have changed the NatSpec description of the `sender` argument to the following:\r\n\r\n> /// @param sender The address from which to stream the tokens, which will have the ability to cancel the stream.\r\n> /// It doesn't have to be the same as `msg.sender`.\r\n\r\nWhich clarifies what is the goal of this argument, but I still find it confusing. While writing the tests for the `create` function, I had to use very specific names in the tests variables so I can differentiate between `sender` and `msg.sender`.\r\n\r\nDoes anyone have an idea for a better name?","createdAt":"2022-06-22T09:47:20Z","labels":[],"number":81,"repository":"sablier-labs/lockup","state":"closed","title":"Open-ended question: should we rename \"sender\" to something else?","type":"discussion","updatedAt":"2024-09-10T13:21:03Z","url":"https://github.com/sablier-labs/lockup/discussions/81"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nThe idea is to add a new function that allows the sender to toggle the transferability of a stream.\r\n\r\nThis feature came up recently during a discussion with a potential integration partner, [Smart Token Labs](https://www.linkedin.com/company/smart-token-labs/):\r\n\r\n<img width=\"400\" alt=\"transferability-1\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/246ac532-6bfa-4757-868c-ee11924d92cd\">\r\n<img width=\"400\" alt=\"transferability-2\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/ac5d2ee9-bd77-43d7-9497-ec2e27f4d9c6\">\r\n\r\n## My Thoughts\r\n\r\nUnlike cancelability, it makes sense for transferability to be something that senders can toggle on and off during the lifetime of the stream. From the recipient's perspective, a \"non-cancelable\" stream that can be made cancelable again is not really non-cancelable. However, a non-transferable stream that can be made transferable may be appealing to the recipient. While the reverse (transferable → non-transferable) is not true, the transferability dimension does not affect the core distribution of assets, so disabling transferability should not be a dealbreaker.\r\n\r\n### Cons\r\n\r\nBesides implementation cost, there's another significant con.\r\n\r\nThis feature would throw yet another wrench in the developer experience of making an NFT integration with Sablier. Imagine the following scenario:\r\n\r\n1. Stream is transferable\r\n2. User transfers the stream to a lending protocol (e.g., [NFTfi](https://twitter.com/NFTfi/status/1696523033442443552))\r\n3. Sender makes the stream non-transferable\r\n4. The NFT cannot be returned to the original user\r\n\r\nThus, it seems like transferability would break NFT lending, and the only way to fix the resulting mess would be to implement a [locked NFT wrapper](https://github.com/sablier-labs/v2-core/discussions/684). The problem is that the spec for that is not currently settled.\r\n\r\nI suggest we do more brainstorming on this feature before assuming any particular course of action. Cc @sablier-labs/everybody.","createdAt":"2023-12-28T11:58:59Z","labels":[],"number":769,"repository":"sablier-labs/lockup","state":"closed","title":"Explore the prospect of toggling transferability on and off","type":"discussion","updatedAt":"2024-09-04T17:28:25Z","url":"https://github.com/sablier-labs/lockup/discussions/769"},{"author":"andreivladbrg","body":"> [!Note]\r\n> This is just an idea, and I have not made research on IPFS. First, I want to see your opinions.\r\n\r\nRecently, Max asked me about the `NFTDescriptor` contract. This made me realize that our current design requires a unique implementation of the contract for each new chain (in case we plan to extend the contract to multiple chains). This means higher development and maintenance costs.\r\n\r\nInstead, we should consider adding the NFT to IPFS and using it across all chains to make it more flexible.\r\n\r\nI know that the SVG is dynamically built, which is more problematic. I am not very familiar with IPFS, but there may be a way to pass parameters when obtaining the SVG from it. In the worst case, we could have a template NFT SVG on IPFS and then make some replacements (unique collor and progress) in the `tokenURI` function.\r\n\r\nAnother benefit would be that we would have one less contract to deploy each time - thus, less costs\r\n\r\n@sablier-labs/solidity ","createdAt":"2024-08-28T16:07:27Z","labels":[],"number":1029,"repository":"sablier-labs/lockup","state":"closed","title":"Should we consider adding the Lockup NFT on IPFS?","type":"discussion","updatedAt":"2025-02-17T16:46:33Z","url":"https://github.com/sablier-labs/lockup/discussions/1029"},{"author":"razgraf","body":"Are `address(0)` checks worth it for `msg.sender` and similar?\r\n\r\n1. There's little to no change that senders are going to be `address(0)`\r\n2. Assumptions can still be broken by easy cases such as `address(1)`\r\n\r\nThese are still good for recipients (for e.g. nullable fallbacks in clients).\r\n\r\n","createdAt":"2022-06-09T17:14:31Z","labels":[],"number":38,"repository":"sablier-labs/lockup","state":"closed","title":"Are address(0) checks worth it for msg.sender and similar?","type":"discussion","updatedAt":"2024-08-01T10:24:28Z","url":"https://github.com/sablier-labs/lockup/discussions/38"},{"author":"gabrielstoica","body":"Hi,\r\n\r\nAs stated [here](https://docs.sablier.com/contracts/v2/guides/stream-management/cancel), if a Stream Management contract is used, any stream sender should be allowed to cancel/renounce it. However, the `msg.sender` must be the stream's sender according to [this checker](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/SablierV2Lockup.sol#L481-L483).\r\n\r\nTherefore, any call made by a stream sender through a Stream Management contract to the `cancel` or `renounce` method will result in a `SablierV2Lockup_Unauthorized` revert because the `msg.sender` is not the stream's sender but rather the Stream Management itself.\r\n\r\nHow should one allow stream senders to cancel or renounce it directly through a Stream Management-like contract?\r\n\r\nThanks!","createdAt":"2024-07-18T14:23:21Z","labels":[],"number":977,"repository":"sablier-labs/lockup","state":"closed","title":"Allow stream senders to cancel/renounce through a Stream Management contract","type":"discussion","updatedAt":"2024-07-30T07:22:54Z","url":"https://github.com/sablier-labs/lockup/discussions/977"},{"author":"andreivladbrg","body":"As I started working on [package tethering](https://github.com/sablier-labs/v2-core/issues/808) issue, a question came to mind, as we have different deployment configurations between `v2-core` and `v2-periphery`.\r\n\r\nCore:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/992638415445b0e93d0bb347c8ed1fd0872c9104/foundry.toml#L18\r\n\r\nPeriphery:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/18d08400fa75194ac48c016e7913064eb63c32b1/foundry.toml#L20\r\n\r\nWe have two options:\r\n1. Increase the `optimizer_runs` and use the same configuration for both deployments (we can increase it to 4000)\r\n2. Add two foundry profiles (core/periphery) and deploy the contracts with different `optimizer_runs`\r\n\r\nI personally prefer the first option, as I don’t find the added complexity worth it. Also, regarding option 2, if we want to use different optimizer runs for different contracts, we can use a different number of runs for NFTDescriptor (which has the biggest size), LL, LD, and LT. (I don’t find it worth it)\r\n\r\n@sablier-labs/solidity wdyt?","createdAt":"2024-07-25T13:59:03Z","labels":[],"number":985,"repository":"sablier-labs/lockup","state":"closed","title":"What optimizer runs should we have?","type":"discussion","updatedAt":"2024-07-26T14:21:12Z","url":"https://github.com/sablier-labs/lockup/discussions/985"},{"author":"smol-ninja","body":"## Offers\r\n1. **[One Time Airdrop](https://github.com/sablier-labs/company-discussions/discussions/55)**: Although more expensive than having dedicated one-time airdrop logic, it allows `claim` and `withdraw` in a single tx.\r\n2. **[Ranged Airstreams](https://github.com/sablier-labs/v2-periphery/discussions/279)**: This implementation supports airstreams with uniform start and end times.\r\n3. **Legacy airstreams**[^1]\r\n\r\n## Context\r\n\r\nRelying on `createWithDurations` in `MerkleLockup` has the following limitations:\r\n1. Airstreams cannot start and end at the same time regardless of when they are claimed.\r\n2. Airstreams cannot be used for one-time airdrop because [the end time must be greater than the start time](https://github.com/sablier-labs/v2-core/blob/daeac7c23942ac465fd5da5d8291ecd433326e72/src/libraries/Helpers.sol#L171-L173), preventing token withdrawal in the same transaction.\r\n\r\nIt can only be used to create a campaign where streams begin vesting only when claimed. But what if we can also achieve the same functionality using `createWithTimestamps`?\r\n\r\n## Proposal\r\n\r\n**Replace `createWithDurations` with `createWithTimestamps`**. This would require replacing [`streamDurations`](https://github.com/sablier-labs/v2-periphery/blob/68b5cfab1a2a0912bcf85745de2cd98406181c7f/src/SablierV2MerkleLL.sol#L32C44-L32C59) with a bespoke timestamp variable but with a slight modification:\r\n\r\n```solidity\r\nMerkleLockup.Timestamps public override timestamps;\r\n\r\nMerkleLockup.Timestamps {\r\n    uint40 startTime;\r\n    uint40 cliffDuration;\r\n    uint40 endDuration;\r\n}\r\n```\r\n\r\nWhen a user claims, calculate `cliffTime` and `endTime` as follows to create **ranged airstreams**:\r\n- cliffTime = startTime + cliffDuration\r\n- endTime = startTime + endDuration\r\n\r\nI will explain below why it looks different than [LockupLinear.Timestamp](https://github.com/sablier-labs/v2-core/blob/daeac7c23942ac465fd5da5d8291ecd433326e72/src/types/DataTypes.sol#L275-L279).\r\n\r\n### One-time airdrops\r\n\r\nThis can be achieved by setting the end time in the past. But since Lockup [requires end time to be in the future](https://github.com/sablier-labs/v2-core/blob/daeac7c23942ac465fd5da5d8291ecd433326e72/src/libraries/Helpers.sol#L175-L179), we will have to change that and allow end time to be in the past as long as the following inequality holds: `startTime < cliffTime < endTime`.\r\n\r\n> [!NOTE] \r\n > Even though, one-time airdrop can be unlocked with this approach, I am not against having a bespoke contract for it (see [discussion sablier-labs/v2-periphery#370](https://github.com/sablier-labs/v2-periphery/discussions/370)). Its a similar argument as to why we chose to release Lockup Tranched even though the same curve can also be achieved by Lockup Dynamic - gas efficiency.\r\n\r\n### Legacy Airstreams\r\n\r\nTo create the same airstreams that we allow today, we will allow `startTime` to be 0. When its 0, Lockup Linear's `startTime` will default to `block.timestamp`, making `cliffTime` and `endTime`:\r\n- cliffTime = block.timestamp + cliffDuration\r\n- endTime = block.timestamp + endDuration\r\n\r\nThis would create airstreams that begin vesting when the user claims and end at different dates, similar to the current behaviour.\r\n\r\ncc @sablier-labs/engineers.\r\n\r\n<img width=\"356\" alt=\"Screenshot 2024-07-19 at 12 01 10\" src=\"https://github.com/user-attachments/assets/cfa604d8-314d-4f84-b495-314ab0986030\">\r\n\r\n[^1]: Legacy airstreams are the current airstreams supported by Merkle Lockup. They have start time set as claim time and end time at a fixed duration.","createdAt":"2024-07-17T21:35:09Z","labels":[],"number":997,"repository":"sablier-labs/lockup","state":"closed","title":"Replace  `createWithDurations` with `createWithTimestamps` in Airstreams","type":"discussion","updatedAt":"2024-07-30T13:59:05Z","url":"https://github.com/sablier-labs/lockup/discussions/997"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThere has been a lengthy discussion about the permissiveness of the `withdraw` function in [Withdraw on behalf of](https://github.com/sablierhq/v2-core/discussions/39).\r\n\r\nI will attempt to summarize the dissenting views on the matter here, as objectively as I can, but as you guys know I tend to favor the position that we should make `withdraw` public.\r\n\r\n## Interpretation of Money Ownership\r\n\r\nThere are many ways one could interpret the moneyness of a Sablier stream, but the two ways that are relevant for this discussion are the following:\r\n\r\n1. The money in a Sablier stream is not actually the recipient's until the recipient withdraws.\r\n2. The money in a Sablier stream is actually the recipient's, even before any withdrawal is made.\r\n\r\nI shall refer to the 1st interpretation as the \"Conservative Interpretation\", and to the 2nd as the \"Dynamic Interpretation\".\r\n\r\nCrucially, this distinction is a psychological one. The technology is the same in both cases - it's just a question of how humans interpret it. If we're successful, this distinction might someday be statutory, in which case we will just follow the law. But we're not there yet.\r\n\r\n### The Interpretation Makes the Position\r\n\r\nThe Conservative Interpretation favors making the `withdraw` function private, while in light of the Dynamic Interpretation, making `withdraw` public makes a lot of sense.\r\n\r\nThus I think this is actually a debate about what interpretation we should favor internally.\r\n\r\n## Pros\r\n\r\n### Global Relayers\r\n\r\nA public `withdraw` function would give us extreme optionality. We would be able to:\r\n\r\n1. Withdraw money for stuck users, e.g. those who streamed money to CEX addresses.\r\n2. Offer a great UX for withdrawal automation, e.g. withdrawing for users once per month, without asking users to sign a message or make a transaction. This could potentially be done in exchange for a fee, which would be yet another source of revenues for us.\r\n\r\n### Simpler Implementation\r\n\r\nNo need for any whitelisting mechanism. The pure `withdraw` function would be able to do everything.\r\n\r\n### Scalability\r\n\r\nAssuming the Dynamic Interpretation ...\r\n\r\nThe year is 2025 and Sablier is completely integrated in most web3 wallets, including MetaMask.\r\n\r\nMetaMask now tracks all of your Sablier streams and shows up the total balance access all streams. When you wish to make a transfer, MetaMask will check what is the actual balance of your EOA and, if it is not sufficient to cover the transfer costs, MetaMask will simply call `withdraw` on your behalf on as many streams as needed (or ask one of the many public Sablier relayers to do this), so that you can perform your token transfer.\r\n\r\n## Cons\r\n\r\n### Taxable Events\r\n\r\nAssuming the Conservative Interpretation, anyone would be able to trigger a taxable event for any Sablier user.\r\n\r\n### Lack of Control\r\n\r\nAgain assuming the Conservative Interpretation, users wouldn't be in full control anymore. Some users might feel uncomfortable with the idea that random people on the Internet can move funds for them.\r\n\r\n### Riskier Implementation\r\n\r\nAll else being equal, a function which can be called by anyone is a more dangerous function than a function that can be called only by some users.","createdAt":"2022-07-23T10:24:27Z","labels":[],"number":110,"repository":"sablier-labs/lockup","state":"closed","title":"Making withdraw public: Pros and cons","type":"discussion","updatedAt":"2024-06-28T19:07:09Z","url":"https://github.com/sablier-labs/lockup/discussions/110"},{"author":"PaulRBerg","body":"## Costs\r\n\r\nI used this [smart contract deployment cost estimator](https://www.rareskills.io/smart-contract-deployment-cost-calculator) to estimate the gas costs for deploying our contracts to Ethereum Mainnet. These are based on a [max gas unit price](https://www.blocknative.com/gas-estimator) of 20 gwei.\r\n\r\n| Name | USD Cost |\r\n|--------|--------|\r\n| `Comptroller` | $16 |\r\n| `LockupDynamic` | $200 |\r\n| `LockupLinear` | $158 |\r\n| `NFTDescriptor` | $197 | \r\n| Total | $571 | \r\n\r\nNot cheap, but not super expensive either.\r\n\r\n## Data\r\n\r\n- [Build sizes](https://app.warp.dev/block/MXLMdBFMvjfHdSI2m1839x)\r\n- [Screenshot](https://github.com/sablier-labs/v2-core/assets/8782666/aa7f112d-fd2b-4c12-bafc-5f29d098d51f)","createdAt":"2023-06-03T10:00:17Z","labels":[],"number":540,"repository":"sablier-labs/lockup","state":"closed","title":"V2.0 deployment costs on Mainnet","type":"discussion","updatedAt":"2024-06-28T19:04:58Z","url":"https://github.com/sablier-labs/lockup/discussions/540"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-periphery/pull/91#issuecomment-1580391265\r\n- https://github.com/sablier-labs/v2-periphery/discussions/93","createdAt":"2023-08-23T07:59:53Z","labels":[],"number":662,"repository":"sablier-labs/lockup","state":"closed","title":"Consider moving the precompiles to the \"script\" directory","type":"discussion","updatedAt":"2024-06-28T16:41:13Z","url":"https://github.com/sablier-labs/lockup/discussions/662"},{"author":"PaulRBerg","body":"Similar to the [version constant](https://github.com/PaulRBerg/prb-proxy/blob/28fbc73c6cf4180305bca5ff673502e531d99ea0/src/PRBProxyRegistry.sol#L35) in PRBProxy.\r\n\r\nRelated: https://github.com/sablier-labs/v2-core/issues/761","createdAt":"2023-12-21T11:20:58Z","labels":[],"number":762,"repository":"sablier-labs/lockup","state":"closed","title":"Should we add a \"VERSION\" constant?","type":"discussion","updatedAt":"2024-06-28T16:38:05Z","url":"https://github.com/sablier-labs/lockup/discussions/762"},{"author":"PaulRBerg","body":"We've recently received this feature request from a user:\r\n\r\n<img width=\"535\" alt=\"SCR-20240213-lfcw\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/b88cb582-0694-4357-938a-8e97e42d6467\">\r\n\r\nThis is proof that users are interested in creating streams with a high number of segments.\r\n\r\nDuring the first mainnet deployment of Lockup Dynamic, Andrei [estimated](https://www.notion.so/sablier/Investigate-how-high-MAX_SEGMENT_COUNT-can-be-c92db3bebae1483aa6e7eb5d47334dd7) the optimal number of segments to be 300. That's what we have used for all of our deployments - but I wonder if we can increase that now?\r\n\r\nCc @andreivladbrg, @smol-ninja.","createdAt":"2024-02-13T10:26:34Z","labels":[],"number":823,"repository":"sablier-labs/lockup","state":"closed","title":"Explore how much higher the number of segments can go","type":"discussion","updatedAt":"2024-06-28T16:32:18Z","url":"https://github.com/sablier-labs/lockup/discussions/823"},{"author":"smol-ninja","body":"Thanks to @PaulRBerg, I came across [Coinbase style guide](https://github.com/coinbase/solidity-style-guide). I'd like to share some of ideas from it that that I liked.\r\n\r\n1. [Event names should be past tense](https://github.com/coinbase/solidity-style-guide?tab=readme-ov-file#3-event-names-should-be-past-tense). For example, we use present tense for event names such as `Claim` and `Clawback` instead of `Claimed` and `Clawbacked`. Which ones do you like more?\r\n\r\n2. [Avoid writing interfaces](https://github.com/coinbase/solidity-style-guide?tab=readme-ov-file#7-avoid-writing-interfaces). I don't fully agree with this because interfaces are useful but I agree with the point that it makes it harder to understand the code when NatSpecs are in the interfaces and not in the core contracts. So an idea could be to add NatSpecs to core contracts as well but how would that go? It will be repeated in interfaces and contracts.\r\n\r\n3. [Newlines between tag types](https://github.com/coinbase/solidity-style-guide?tab=readme-ov-file#3-newlines-between-tag-types): this seems to be improving readability.\r\n\r\n```solidity\r\n/// @notice Creates a new MerkleLockup campaign with a LockupLinear distribution.\r\n/// @dev Emits a {CreateMerkleLL} event.\r\n/// @param baseParams Struct encapsulating the {SablierV2MerkleLockup} parameters, which are documented in\r\n/// {DataTypes}.\r\n/// @param lockupLinear The address of the {SablierV2LockupLinear} contract.\r\n/// @param streamDurations The durations for each stream.\r\n/// @param aggregateAmount The total amount of ERC-20 assets to be distributed to all recipients.\r\n/// @param recipientCount The total number of recipients who are eligible to claim.\r\n/// @return merkleLL The address of the newly created MerkleLockup contract.\r\n```\r\n\r\nbecomes \r\n\r\n```solidity\r\n/// @notice Creates a new MerkleLockup campaign with a LockupLinear distribution.\r\n///\r\n/// @dev Emits a {CreateMerkleLL} event.\r\n///\r\n/// @param baseParams Struct encapsulating the {SablierV2MerkleLockup} parameters, which are documented in\r\n/// {DataTypes}.\r\n/// @param lockupLinear The address of the {SablierV2LockupLinear} contract.\r\n/// @param streamDurations The durations for each stream.\r\n/// @param aggregateAmount The total amount of ERC-20 assets to be distributed to all recipients.\r\n/// @param recipientCount The total number of recipients who are eligible to claim.\r\n///\r\n/// @return merkleLL The address of the newly created MerkleLockup contract.\r\n```\r\n\r\n@sablier-labs/solidity ??","createdAt":"2024-04-22T11:18:58Z","labels":[],"number":906,"repository":"sablier-labs/lockup","state":"closed","title":"Some ideas from Coinbase style guide","type":"discussion","updatedAt":"2024-06-21T17:56:04Z","url":"https://github.com/sablier-labs/lockup/discussions/906"},{"author":"smol-ninja","body":"I recommend that we should update the [`evm_version`](https://github.com/sablier-labs/v2-core/blob/8d3ab20abd0c0570313a4b4af53315ac0e5398e2/foundry.toml#L4) to `shanghai` to take advantage of the `PUSH0` opcode. This evm version is supported by all chains we deploy to.\r\n\r\n## Context\r\n\r\nCurrently, we rely on `paris` version of evm for deployment. Foundry uses the value of `evm_version` to generate bytecode during on-chain deployments.\r\n\r\nSince **paris**, there have been two mainnet hardforks - **shanghai** and **dencun**. While **dencun** did not introduce anything relevant to us, **shanghai** introduced `PUSH0` - an opcode to place \"0\" on the stack.\r\n\r\nBenefits of `PUSH0`:\r\n1. `PUSH0` consumes 1 less gas compared to `PUSH1 0` making deployed bytecode smaller and reducing deployment costs.\r\n2. Cheaper transactions for functions that require placing \"0\" on the stack.\r\n\r\n## Support for `PUSH0` Opcode Across Chains\r\n\r\nI have deployed the [following bytecode](https://bytegraph.xyz/bytecode/7ec82be8ef4d997665416023f37c4c4a/graph) on every chain supported by Sablier (except Lightlink, I didn't deploy on it). All the deployments were successful which means all of them support `PUSH0`.\r\n\r\n```bash\r\n0x6080604052348015600e575f80fd5b50600436106026575f3560e01c80632ee921d714602a575b5f80fd5b5f60405190815260200160405180910390f3fea2646970667358221220721ae7de3b3c2a6157c6cb0c3bd4239cf5cd317e94590094fcee9bde551aa99464736f6c63430008170033\r\n```\r\n\r\n> [!IMPORTANT]  \r\n> Since zksync has its own variation of `foundry`, the deployed bytecode on zksync is also different. Therefore, updating the evm version to **shanghai** will have no impact on zksync deployment.\r\n\r\nRFC @sablier-labs/solidity.","createdAt":"2024-05-15T11:31:59Z","labels":[],"number":925,"repository":"sablier-labs/lockup","state":"closed","title":"Update EVM Version to Shanghai","type":"discussion","updatedAt":"2024-06-10T09:35:36Z","url":"https://github.com/sablier-labs/lockup/discussions/925"},{"author":"PaulRBerg","body":"Basically, enable via IR but disable the optimizer in the `lite` profile. As per @cameel's suggestion:\r\n\r\n<img width=\"932\" alt=\"SCR-20240523-sedj\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/95318ffc-14cd-4bfc-b3d9-9b8e9ff2c129\">\r\n","createdAt":"2024-05-23T19:57:56Z","labels":[],"number":933,"repository":"sablier-labs/lockup","state":"closed","title":"Consider using unoptimized IR locally","type":"discussion","updatedAt":"2024-05-25T12:45:19Z","url":"https://github.com/sablier-labs/lockup/discussions/933"},{"author":"PaulRBerg","body":"## Context\r\n\r\nI said [here](https://github.com/sablier-labs/v2-core/pull/908#issuecomment-2115959358) that I will follow up on the cross-chain gas usage issue.\r\n\r\n## My Input\r\n\r\nIt turns out that the heuristic introduced by @smol-ninja in https://github.com/sablier-labs/v2-core/pull/908, i.e. to subtract 1 million gas from the block gas limit, accounts for the whole gamut of cross-chain differences in Minimum Transaction Gas. So we can keep it like that.\r\n\r\nI did some comprehensive research today, and it appears that:\r\n\r\n1. No chain has a Minimum Transaction Go greater than 1 million\r\n2. Execution costs are mostly equivalent to Ethereum Mainnet.\r\n\r\nThe only exception to point no. 2 is zkSync, which provides gas refunds. However, this is not a problem because it means that we will _overestimate_, not _underestimate_. In other words, our estimated max counts will be more than enough to cover the actual execution cost on zkSync.\r\n\r\n## Gas Fee Models\r\n\r\n| Chain     | Type              | Min Tx Gas | Model                     | Explanation                                                          |\r\n| --------- | ----------------- | ---------- | ------------------------- | -------------------------------------------------------------------- |\r\n| Arbitrum  | Optimistic Rollup | 35-70k     | Multifunctional gas limit | Bake L1 data fee into L2 gas limit                                   |\r\n| BNB Chain | Sidechain         | 21k        | EVM                       | Same as vanilla EVM                                                  |\r\n| Gnosis    | Sidechain         | 21k        | EVM                       | Same as vanilla EVM                                                  |\r\n| OP Stack  | Optimistic Rollup | 21k        | Two-dimensional fees      | Explicit L2 execution fee and implicit L1 DA fee                     |\r\n| Polygon   | Sidechain         | 21k        | EVM                       | Same as vanilla EVM                                                  |\r\n| Scroll    | ZK Rollup         | 21k        | Two-dimensional fees      | Explicit L2 execution fee and implicit L1 DA fee                     |\r\n| zkSync    | ZK Rollup         | 120k-190k  | Custom: AA + state diffs  | Gas costs fluctuate a lot due to Account Abstraction and state diffs |\r\n\r\n## References\r\n\r\n- https://github.com/mds1/evm-diff/issues/31\r\n- https://ethereum.stackexchange.com/q/163222/24693\r\n\r\n---\r\n\r\ncc @sablier-labs/solidity\r\n\r\n[^1]: OP Stack includes Optimism and Base","createdAt":"2024-05-17T12:50:10Z","labels":[],"number":932,"repository":"sablier-labs/lockup","state":"closed","title":"The heuristic to subtract 1 million gas to estimate max counts is OK","type":"discussion","updatedAt":"2024-05-30T12:19:23Z","url":"https://github.com/sablier-labs/lockup/discussions/932"},{"author":"PaulRBerg","body":"## Problems\r\n\r\nI've had yet another productive call with NFTFI - we dived deep into the difficulties of accepting stream NFTs as collateral.\r\n\r\nBroadly speaking, there are three problems:\r\n\r\n1. Bidding dynamics. During the bidding window (which can be up to 7 days), the stream parties may withdraw assets from the stream, and so the collateral value may end up lower than what had originally been estimated by the lender.\r\n2. Cancelability. If the stream is canceled during the bidding window or once the NFT borrow has been materialized, the lender will get REKT if the collateral value had been assumed to include the unstreamed funds.\r\n3. After the bid is accepted, the NFT is transferred to an escrow contract, which may or may not be able to handle ERC-20 deposits. See more details in https://github.com/sablier-labs/v2-core/discussions/666.\r\n\r\n## Solutions\r\n\r\nThis is a hairy problem for which the solution is necessarily multi-faceted. Here's what we discussed on the phone:\r\n\r\n1. Create a \"locked\" NFT contract, which would wrap the vanilla Sablier NFTs. This wrapper would have an immutable `expiration` when the NFT becomes unlocked, and there would be a `locker` address with permission to unlock the NFT earlier than `expiration`.\r\n2. Add a new `locker` address in the `Stream` structs that locks the stream NFT when its value is non-zero. NFTfi doesn't like this solution because they would need to build a custom implementation for Sablier, i.e., query the `Stream` structs.\r\n3. Separate the NFT contracts into cancelable and non-cancelable (see https://github.com/sablier-labs/v2-core/discussions/659)\r\n\r\nBroadly speaking, what NFTfi requires (and any other NFT lending platform, presumably) is a way to disable withdrawals during the bidding process.","createdAt":"2023-09-08T09:15:20Z","labels":[],"number":684,"repository":"sablier-labs/lockup","state":"open","title":"Issues with using stream NFTs as collateral for lending","type":"discussion","updatedAt":"2024-05-11T20:39:32Z","url":"https://github.com/sablier-labs/lockup/discussions/684"},{"author":"razgraf","body":"Given we now have generic `createWithTimestamps` methods instead of the old variations (durations, deltas, ranges, milestones), shouldn't we rename the dedicated LockupLinear parameter for start / cliff / end from `range` to `timestamps` in the create method (and the `DataType` itself)?\r\n\r\nCC: @sablier-labs/solidity ","createdAt":"2024-03-29T18:16:25Z","labels":[],"number":902,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"range\" data types to \"timestamps\"","type":"discussion","updatedAt":"2024-04-30T16:24:44Z","url":"https://github.com/sablier-labs/lockup/discussions/902"},{"author":"PaulRBerg","body":"- Benefits: see Fjord's feedback below\r\n- Cons: increased gas cost\r\n\r\n<img width=\"450\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/e6978dc9-4899-49d9-9add-be939dda894b\"/>\r\n\r\n<img width=\"450\" alt=\"SCR-20240425-sgul\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/c85aa49a-d3cb-40e3-8d54-36654e83a975\">","createdAt":"2024-04-25T20:05:49Z","labels":[],"number":909,"repository":"sablier-labs/lockup","state":"closed","title":"Include the chain ID and the Lockup model in the ID itself","type":"discussion","updatedAt":"2024-04-28T14:05:05Z","url":"https://github.com/sablier-labs/lockup/discussions/909"},{"author":"smol-ninja","body":"During our call with Rusty (from Cantina), he suggested us to avoid using `ffi` for the following reasons:\r\n\r\n- Enabling `ffi` allows executing any arbitrary command during foundry tests. This is what enabled us to use `jq` cli to read value of `version` from `package.json`\r\n- \"It is generally advised to use this cheat code as a last resort, and to not enable it by default, as anyone who can change the tests of a project will be able to execute arbitrary commands on devices that run the tests\" - [Foundry doc](https://book.getfoundry.sh/cheatcodes/ffi#ffi)\r\n\r\nHowever, a safer solution is to use [`stdJson`](https://book.getfoundry.sh/cheatcodes/parse-json?highlight=stdJson#how-to-use-stdjson) which allows us to read `package.json` as a JSON object. This is an in-build cheat code in Foundry and doesn't require us to enable `ffi`. It also reduces our dependency from `jq` cli and reduces the number of lines required to create salt.\r\n\r\nThe following function:\r\n```solidity\r\nfunction constructCreate2Salt() public returns (bytes32) {\r\n    string memory chainId = block.chainid.toString();\r\n    string[] memory inputs = new string[](4);\r\n    inputs[0] = \"jq\";\r\n    inputs[1] = \"-r\";\r\n    inputs[2] = \".version\";\r\n    inputs[3] = \"./package.json\";\r\n    bytes memory result = vm.ffi(inputs);\r\n    string memory version = string(result);\r\n    string memory create2Salt = string.concat(\"ChainID \", chainId, \", Version \", version);\r\n    console2.log(\"The CREATE2 salt is \\\"%s\\\"\", create2Salt);\r\n    return bytes32(abi.encodePacked(create2Salt));\r\n}\r\n```\r\nbecomes\r\n\r\n```solidity\r\nfunction constructCreate2Salt() public view returns (bytes32) {\r\n    string memory chainId = block.chainid.toString();\r\n    string memory json = vm.readFile(\"package.json\");\r\n    string memory version = json.readString(\".version\");\r\n    string memory create2Salt = string.concat(\"ChainID \", chainId, \", Version \", version);\r\n    console2.log(\"The CREATE2 salt is \\\"%s\\\"\", create2Salt);\r\n    return bytes32(abi.encodePacked(create2Salt));\r\n}\r\n```\r\n\r\nI've already implemented it in https://github.com/sablier-labs/v2-core/commit/2cc42e51793df5035bbdb1b81818b1a6171a6e06 if we agree to go ahead with this.","createdAt":"2024-04-20T16:36:36Z","labels":[],"number":904,"repository":"sablier-labs/lockup","state":"closed","title":"Replace `ffi` with `stdJson` in `constructCreate2Salt` function","type":"discussion","updatedAt":"2024-04-23T09:29:06Z","url":"https://github.com/sablier-labs/lockup/discussions/904"},{"author":"andreivladbrg","body":"The current `withdrawMultiple` does not take a to address parameter.\r\n\r\nAlso, we have made the `withdraw` function public, allowing anyone to call it if the to address is the recipient.\r\n\r\nThus, we can completely remove it from `SablierV2Lockup` to reduce the size.\r\n\r\nWe would need to call `getRecipient` for each `streamId`, which might slightly increase the gas cost. However, since the purpose of `withdrawMultiple` is not to be as optimized as possible, would it be a good idea to move it to the batch contract?\r\n\r\n@sablier-labs/solidity \r\n","createdAt":"2024-04-10T15:31:27Z","labels":[],"number":891,"repository":"sablier-labs/lockup","state":"closed","title":"Should we move withdrawMultiple from SablierV2Lockup to batch contract?","type":"discussion","updatedAt":"2024-04-11T10:52:11Z","url":"https://github.com/sablier-labs/lockup/discussions/891"},{"author":"PaulRBerg","body":"@smol-ninja's question here remained unanswered:\r\n\r\nhttps://github.com/sablier-labs/v2-core/pull/813#discussion_r1486648845\r\n\r\nSome historical context: we used to use `unchecked`, but then Cantina (Zach and Rusty) recommended removing it during the 1st audit of the code base:\r\n\r\nhttps://github.com/cantinasec/review-sablier/issues/3\r\n\r\nBut IIRC, we didn't have this if block at the time when Cantina's feedback was given:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/src/abstracts/SablierV2Lockup.sol#L559-L561\r\n\r\nAs Shub pointed out, it should be completely safe to use `unchecked` arithmetic for calculating the sender amount.\r\n\r\nWDYT @andreivladbrg?","createdAt":"2024-04-05T13:19:45Z","labels":[],"number":882,"repository":"sablier-labs/lockup","state":"closed","title":"Should we use unchecked arithmetic in the sender amount calculations?","type":"discussion","updatedAt":"2024-04-10T16:23:42Z","url":"https://github.com/sablier-labs/lockup/discussions/882"},{"author":"PaulRBerg","body":"This is a question for you @smol-ninja and @andreivladbrg.\r\n\r\nIf we could avoid deploying the NFTDescriptor, we would save quite a bit of ETH in deployment costs.\r\n\r\nSpeaking of this, it might be helpful to write one or two migration tests showing that V2.2 can be integrated with the previous NFTDescriptor deployment.","createdAt":"2024-04-05T10:25:04Z","labels":[],"number":877,"repository":"sablier-labs/lockup","state":"closed","title":"Do we need to deploy a new NFTDescriptor for V2.2?","type":"discussion","updatedAt":"2024-04-09T15:48:14Z","url":"https://github.com/sablier-labs/lockup/discussions/877"},{"author":"PaulRBerg","body":"This would be a separate repository and npm package.\r\n\r\nThings we could throw in there:\r\n\r\n- Most of the things under `./test/utils`\r\n- The test mocks under `./test/mocks` in V2 Core\r\n- `BaseScript`, which is [95% the same](https://www.diffchecker.com/FHj3rjHI/) in V2 Core and V2 Periphery\r\n\r\nRFC @sablier-labs/solidity","createdAt":"2024-04-09T10:41:40Z","labels":[],"number":887,"repository":"sablier-labs/lockup","state":"closed","title":"Creating a new \"@sablier/test-utils\" package","type":"discussion","updatedAt":"2024-04-09T14:43:52Z","url":"https://github.com/sablier-labs/lockup/discussions/887"},{"author":"andreivladbrg","body":"As per a private discussion with @smol-ninja, we agreed that it would be a good idea to add a benchmark for gas usage to all relevant functions: `createWithDurations`, `createWithTimestamps`, `withdraw`, `cancel`, etc.\r\n\r\nNow, the question is: where would be the best place to include them? I can think of two options:\r\n- we add a new directory called benchmarks, where we can have a single contract and add a test for each targeted function. This way, we have them grouped together.\r\n- we add, at the end of each concrete test, one more function for gas cost ([example of file](https://github.com/sablier-labs/v2-core/blob/staging/test/integration/concrete/lockup-linear/create-with-timestamps/createWithTimestamps.t.sol)). With this option, we wouldn't need to implement a new contract.\r\n\r\nNote: It would be a good idea to name the benchmark tests in a consistent manner, like `testGas_FunctionName`, so that we can run a specific CLI command to obtain them: `forge t --mt \"testGas\"`\r\n\r\n@PaulRBerg, what do you say?","createdAt":"2024-04-03T20:24:28Z","labels":[],"number":875,"repository":"sablier-labs/lockup","state":"closed","title":"Should we add a benchmark in test dir?","type":"discussion","updatedAt":"2024-04-04T14:11:35Z","url":"https://github.com/sablier-labs/lockup/discussions/875"},{"author":"PaulRBerg","body":"> PRB: The event to look for is `WithdrawFromLockupStream` \r\n>\r\n> User: now i cant just listgen for the `withdrawfromlockupstream` because i dont know all the streams that are created. So i think i have to listen to something that registers a stream id so im not trying to cancel streams from other distirbutions.\r\n>\r\n> PRB: Paul R. Berg | Sablier, [Dec 18, 2023 at 11:34:40 PM]:\r\nCan't you just check if the `to` address emitted in the event matches your list of known recipient addresses?\r\n>\r\n> The `to` parameter is indexed so you can also retroactively filter events by that address\r\n>\r\n> oooh wait, to can be a third-party address ..\r\n>\r\n> User: I dont know, im trying to figure out your system to do what we need.\r\n>\r\n> PRB: We're gathering 10/10 product feedback by talking to you, thanks very much. We will include the recipient in a future version of the protocol so that you can filter by the recipient","createdAt":"2023-12-18T21:48:46Z","labels":[],"number":755,"repository":"sablier-labs/lockup","state":"closed","title":"Include \"recipient\" in \"WithdrawFromLockupStream\" event","type":"discussion","updatedAt":"2024-03-29T19:48:54Z","url":"https://github.com/sablier-labs/lockup/discussions/755"},{"author":"PaulRBerg","body":"Is there any reason for _not_ ordering the fields alphabetically in the `StreamLD`, `StreamLL`, and `StreamLT` structs, @smol-ninja, @andreivladbrg?\r\n\r\nAs I understand it, these structs are used only in-memory in the `getStream` getter function.","createdAt":"2024-03-28T18:24:41Z","labels":[],"number":868,"repository":"sablier-labs/lockup","state":"closed","title":"Alphabetical ordering in \"StreamLD\", \"StreamLL\", and \"StreamLT\"","type":"discussion","updatedAt":"2024-03-28T19:22:55Z","url":"https://github.com/sablier-labs/lockup/discussions/868"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIt has become increasingly clear that the term `streams` is a misnomer for `LockupDynamic`. You can find a complete exposition of my rationale [here](https://github.com/sablier-labs/private-discussions/discussions/4), but, in short, the issue is two-fold:\r\n\r\n1. The unlock-in-step curve is one of the payment options available on our official UI. Unlocking in steps is not streaming, so this is a case of cognitive dissonance on our part (I have been saying this [since we launched V2](https://github.com/sablier-labs/v2-interfaces/discussions/140#discussioncomment-6304651)).\r\n2. People are using `LockupDynamic` for timelocks[^1][^2], i.e., \"streams\" in which the payout looks like this:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/355eee50-9be5-4fba-b2f7-9d44f1ffbb53\"/>\r\n\r\n## Solution\r\n\r\nRename the [`_streams` mapping](https://github.com/sablier-labs/v2-core/blob/6189bbc099d1d5fc50b62b93fd9a5fcfbadd7144/src/SablierV2LockupDynamic.sol#L63) to something else, as well as all semantically related references.\r\n\r\nMy suggestions:\r\n\r\n- `payments`\r\n- `plans`\r\n- `agreements`\r\n- `accords`\r\n- `covenants`\r\n- `schedules`\r\n- `flows`\r\n\r\nAlthough I will admit that I don't particularly like any one of these options, for instance, \"payments\" would be confusing because a settled stream may be composed of multiple withdrawals (the recipient may have withdrawn multiple times). And so you end up with a \"payment of payments\".\r\n\r\nWDYT @andreivladbrg, @razgraf?\r\n\r\n## Off-shoots\r\n\r\nThere are several consequences downstream, e.g., the `streamingBalanceOf` function would have to be replaced by `availableBalanceOf` (or something like that). But all these changes flow from the \"streams\" terminology, so let's deal with it first.\r\n\r\n[^1]: https://github.com/sablier-labs/v2-core/issues/706\r\n[^2]: https://twitter.com/ashleighschap/status/1712946120584781961","createdAt":"2023-10-15T13:02:23Z","labels":[],"number":708,"repository":"sablier-labs/lockup","state":"closed","title":"Refactoring the \"streaming\" terminology in \"LockupDynamic\"","type":"discussion","updatedAt":"2024-03-28T19:19:49Z","url":"https://github.com/sablier-labs/lockup/discussions/708"},{"author":"andreivladbrg","body":"Since the `getStream` no longer returns the exact struct from storage, but a built one at the execution time: `Lockup.Stream` + unique information depending the Lockup model (e.g. segments for dynamic).\r\n\r\nI think now, it would be better to also include the `recipient`, so that this natspec is actually correct 😅\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/cbe1c0d61d74217d6ad01599318d5551f3381b2b/src/types/DataTypes.sol#L180-L181\r\n\r\nThe improvement would be:\r\n```solidity\r\nLockupLinear.StreamLL memory streamDetails = lockupLinear.getStream(streamId);\r\naddress recipient = lockupLinear.getRecipient(streamId);\r\n```\r\n\r\nvs\r\n\r\n```solidity\r\nLockupLinear.StreamLL memory streamDetails = lockupLinear.getStream(streamId); // includes the recipient\r\n```\r\n\r\n@PaulRBerg @smol-ninja curious about what you guys have to say.","createdAt":"2024-03-13T16:44:42Z","labels":[],"number":849,"repository":"sablier-labs/lockup","state":"closed","title":"Should we include the recipient in the `StreamLD` `StreamLL` and `StreamLT`?","type":"discussion","updatedAt":"2024-03-28T18:43:29Z","url":"https://github.com/sablier-labs/lockup/discussions/849"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIncluding the `ast` field (Abstract Syntax Tree) in the contract artifacts leads to large NPM package sizes, i.e., 4.7mB for [`@sablier/v2-core`][1]. And it's also an issue of noise - the AST in [the `LockupDynamic` artifact](https://unpkg.com/browse/@sablier/v2-core@1.0.0-rc.0/artifacts/SablierV2LockupDynamic.json) makes up for ~21k lines from a total of 26k lines in the JSON.\r\n\r\nOn the flip side, the AST may be useful for static analysis and developer tooling support (since tools could reconstruct the original code by walking up the AST).\r\n\r\nNo good solution comes to mind, so I suggest keeping `ast` as is for the time being. It's also the past of least resistance because we wouldn't have to modify the `prepare-artifacts.sh` script. However, we can circle back on this topic if it turns out to be a problem for integrators (e.g. if the large number of lines in the JSON impairs the DX).\r\n\r\n## External Conversations\r\n\r\n- [ChatGPT](https://chat.openai.com/share/a8903b83-0ad7-4329-b59b-c2020fa12858)\r\n- [Foundry Support](https://t.me/foundry_support/39972)\r\n\r\n## Package Size Comparison\r\n\r\n| Package | Version | Size |\r\n|--------|--------|--------|\r\n| [`@sablier/v2-core`][1] | 1.0.0-rc.0 | 4.7mB |\r\n| [`@uniswap/v3-core`][2] | 1.0.1 | 426kB |\r\n| [`@ethers`][3] | 6.6.2 | 11.7mB | \r\n\r\n[1]: https://www.npmjs.com/package/@sablier/v2-core\r\n[2]: https://www.npmjs.com/package/@uniswap/v3-core\r\n[3]: https://www.npmjs.com/package/ethers","createdAt":"2023-07-02T17:17:39Z","labels":[],"number":598,"repository":"sablier-labs/lockup","state":"closed","title":"Consider scraping off the AST","type":"discussion","updatedAt":"2024-03-28T11:55:33Z","url":"https://github.com/sablier-labs/lockup/discussions/598"},{"author":"smol-ninja","body":"There is only one place where we still use `assert` check. \r\nhttps://github.com/sablier-labs/v2-core/blob/be1dea483581eefa4a048369853db15404fe1e07/src/libraries/Helpers.sol#L42\r\n\r\nIntegration tests also don't cover this scenario where broker fee exceeds total amount. This seems to be safe because we already have a check above it \r\nhttps://github.com/sablier-labs/v2-core/blob/be1dea483581eefa4a048369853db15404fe1e07/src/libraries/Helpers.sol#L33-L35\r\n\r\nHowever, since we are re-checking whether broker amount is less than total amount, we should also cover this in tests and replae it it with `if`.\r\n\r\n```solidity\r\n  // Assert that the the broker fee amount is strictly less than the total amount.\r\n  if (amounts.brokerFee >= totalAmount) {\r\n      revert Errors.SablierV2Lockup_BrokerFeeExceedsTotalAmount(brokerFee, totalAmount);\r\n  }\r\n```\r\n\r\nThis will also increase branch coverage of Helpers.sol.\r\n\r\n<img width=\"901\" alt=\"Screenshot 2024-03-17 at 16 29 06\" src=\"https://github.com/sablier-labs/v2-core/assets/6676622/01b18a7a-05a0-4597-97f8-cd4f6151c791\">\r\n\r\nWould love to hear your thoughts on this @PaulRBerg.","createdAt":"2024-03-17T16:30:17Z","labels":[],"number":854,"repository":"sablier-labs/lockup","state":"closed","title":"Replace `assert` with `if` condition in `checkAndCalculateBrokerFee`","type":"discussion","updatedAt":"2024-03-21T15:37:31Z","url":"https://github.com/sablier-labs/lockup/discussions/854"},{"author":"andreivladbrg","body":"After this PR https://github.com/sablier-labs/v2-core/pull/813, the only duplicated getter function that remains in the interfaces is `streamedAmountOf`. Its presence in the unique interface is due to the differing natspec comments between them:\r\n\r\n- [ISablierV2LockupLinear](https://github.com/sablier-labs/v2-core/blob/1b2ee6df156b156799a4e3bd680b726079b018fb/src/interfaces/ISablierV2LockupLinear.sol#L62-L74) \r\n- [ISablierV2LockupDynamic](https://github.com/sablier-labs/v2-core/blob/1b2ee6df156b156799a4e3bd680b726079b018fb/src/interfaces/ISablierV2LockupDynamic.sol#L66-L79)\r\n- [ISablierV2LockupTranched](https://github.com/sablier-labs/v2-core/blob/1b2ee6df156b156799a4e3bd680b726079b018fb/src/interfaces/ISablierV2LockupTranched.sol#L66-L77)\r\n\r\nNow, we are simply overriding the function implemented in `SablierV2Lockup`:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/1b2ee6df156b156799a4e3bd680b726079b018fb/src/SablierV2LockupLinear.sol#L128\r\n\r\nI was considering whether it would be better to remove the function from the Linear/Dynamic/Tranched interfaces and move the natspec to the bespoke contract at `_calculateStreamedAmount`?\r\n\r\n<details>\r\n<summary> Example Linear </summary>\r\n\r\n```solidity\r\n    /// @inheritdoc SablierV2Lockup\r\n    ///\r\n    /// @dev When the stream is warm, the streaming function is:\r\n    ///\r\n    /// $$\r\n    /// f(x) = x * d + c\r\n    /// $$\r\n    ///\r\n    /// Where:\r\n    ///\r\n    /// - $x$ is the elapsed time divided by the stream's total duration.\r\n    /// - $d$ is the deposited amount.\r\n    /// - $c$ is the cliff amount.\r\n    function _calculateStreamedAmount(uint256 streamId) internal view override returns (uint128) {\r\n         // -- implementation  --\r\n    }\r\n```\r\n\r\n</details>\r\n\r\n\r\nWhat do you guys say? @PaulRBerg  @smol-ninja ","createdAt":"2024-03-20T10:06:14Z","labels":[],"number":856,"repository":"sablier-labs/lockup","state":"closed","title":"Should we remove streamedAmountOf from Linear/Dynamic/Tranched interfaces?","type":"discussion","updatedAt":"2024-03-21T15:18:47Z","url":"https://github.com/sablier-labs/lockup/discussions/856"},{"author":"smol-ninja","body":"[Sphinx](https://www.sphinx.dev/) is a deployment tool that automates smart contract deployment and etherscan verifications.[^1] Some notable features:\r\n1. UI to view previous deployments\r\n2. UI to trigger deployments\r\n3. Implementation inside Base script i.e. no more bash or CLI\r\n4. Supports all the networks that we need except Blast\r\n5. Unlimited testnet deployments (we wouldn't need to find faucets anymore)\r\n6. Gasless mainnet deployments (billed in fiat after deployments are finished)\r\n7. Supports deterministic deployments\r\n\r\n## Links\r\n- https://twitter.com/sphinxdeploy/status/1758174384408207658\r\n- https://www.loom.com/share/bdda9eae675f4cda818cb92558ee9f0f\r\n- https://github.com/sphinx-labs/sphinx\r\n\r\n[^1]: Credits to PRB for discovering it.","createdAt":"2024-02-26T14:23:56Z","labels":[],"number":828,"repository":"sablier-labs/lockup","state":"closed","title":"Integrate Sphinx for future deployment","type":"discussion","updatedAt":"2024-03-18T12:28:40Z","url":"https://github.com/sablier-labs/lockup/discussions/828"},{"author":"andreivladbrg","body":"In `LockupLinear`, we no longer allow `startTime == 0`. This change has been implemented because we now set `cliffTime == 0` to create a [linear curve stream](https://docs.sablier.com/concepts/protocol/stream-types#lockup-linear).\r\n\r\nHowever, this has introduced inconsistency across contracts. In `LockupDynamic` and `LockupTranched`, the start time can still be zero.\r\n\r\nShould we also disallow a start time of zero in `LockupDynamic` and `LockupTranched`? \r\nWhat are your thoughts? @PaulRBerg @smol-ninja","createdAt":"2024-03-14T10:37:48Z","labels":[],"number":851,"repository":"sablier-labs/lockup","state":"closed","title":"Should we check if `startTime` is zero in LD and LT?","type":"discussion","updatedAt":"2024-03-18T07:41:26Z","url":"https://github.com/sablier-labs/lockup/discussions/851"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOne of the [findings](https://github.com/cantinasec/review-sablier/issues/22) reported by Cantina during their 1st review of the code base has come back to bite us.\r\n\r\nDuring my call with [NFTFI.com](https://nftfi.com/) yesterday to discuss a Sablier V2 integration, it became apparent that allowing the sender to withdraw makes the integration difficult.\r\n\r\nNFTFI has an escrow smart contract where people lock up their NFTs after making a borrow against them. Unfortunately, this contract cannot react to incoming ERC-20 deposits, and it can neither detect increases in ERC-20 balances over time. Consequently, the funds would be forever lost if a sender performs a withdrawal while the NFT sits in this escrow.\r\n\r\nIt is likely that NFTFI is not the only NFT platform that cannot react to/ account for sender withdrawals.\r\n\r\n## Solution\r\n\r\nScrape off the ability of the sender to withdraw on behalf of the recipient.\r\n\r\nOf course, doing so would mean that funds are forever lost if the sender has accidentally started a stream to an address that cannot interact with Sablier, such as an exchange address. There are two ways to go about this problem:\r\n\r\n1. We just accept it and make the warning more prominent in the create stream form (although this would also pose problems for integrations)\r\n2. We implement a permissioned relayer module whereby the Sablier multisig can allow particular accounts to withdraw on behalf of any Sablier user\r\n\r\nSide note: it might be worth it to perform some data crunching to see how many sender-initiated withdrawals there have been in V1 and V2.","createdAt":"2023-08-23T12:36:06Z","labels":[],"number":666,"repository":"sablier-labs/lockup","state":"closed","title":"Consider scraping off the ability of the sender to withdraw on behalf of the recipient","type":"discussion","updatedAt":"2024-03-11T10:31:34Z","url":"https://github.com/sablier-labs/lockup/discussions/666"},{"author":"PaulRBerg","body":"One of the most common reasons for git conflicts and CI failure nowadays are the Precompiles tests failing:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/36223aeb1867b2fc197978fca19cbd5fcc538914/test/utils/Precompiles.t.sol\r\n\r\n@andreivladbrg, what would you say about refactoring the CI workflows to only run the Precompiles tests once weekly, just like the CI Deep workflow?","createdAt":"2023-06-28T04:47:22Z","labels":[],"number":582,"repository":"sablier-labs/lockup","state":"closed","title":"Should we run the Precompiles tests once weekly?","type":"discussion","updatedAt":"2024-03-07T19:29:56Z","url":"https://github.com/sablier-labs/lockup/discussions/582"},{"author":"smol-ninja","body":"[Blast](https://blast.io/) is a new L2 with native yield for ETH and stablecoins. Every token bridged to Blast automatically gets staked to earn yield. There are 3 approaches through which Blast allows smart contracts to handle yield rewards.\r\n\r\n## 1. Void\r\nBy default, all smart contracts are subscribed to disabled yield mode. Any ETH or stablecoin deposited into that contract is excluded from earning yield. Any contract that is deployed on L1 can be directly deployed to Blast without making any change but that would also not allow the contract to re-configure the yield mode in the future.\r\n\r\n```solidity\r\nabstract contract SablierV2Base {\r\n    IBlast public constant BLAST = IBlast(0x4300000000000000000000000000000000000002);\r\n\r\n    constructor(....) {\r\n        ....\r\n        // subscribe to Void mode. \r\n        // the set `governor` address can re-configure yield mode after contract creation.\r\n\tBLAST.configure({ _yield: YieldMode.VOID, gasMode: GasMode.VOID, governor: 0x123...678 });\r\n        ....\r\n    }\r\n}\r\n```\r\n\r\n## 2. Automatic\r\nWhen a smart contract is subscribed to Automatic mode, any ETH or stablecoin deposited earns yield automatically. Blast uses the rebase approach to reflect yield in the balance.\r\n\r\n_For example, a smart contract has 10 ETH and after 24 hours, it earns 0.1 ETH, Blast will automatically change its balance from 10 ETH to 10.1 ETH. This is also reflected in ERC20's `balanceOf`._\r\n\r\nSince Sablier streams don't use `balanceOf`, it would require something similar to [implementing a recovery mechanism](https://github.com/sablier-labs/company-discussions/discussions/11) in order to withdraw the excess yield amount added to its balance.\r\n\r\n```solidity\r\nabstract contract SablierV2Base {\r\n    constructor(....) {\r\n        ....\r\n        // subscribe to Automatic mode\r\n        // the set `governor` address can re-configure yield mode after contract creation.\r\n\tBLAST.configure({ _yield: YieldMode.AUTOMATIC, gasMode: GasMode.VOID, governor: 0x123...678 });\r\n        ....\r\n    }\r\n}\r\n```\r\n## 3. Claimable\r\nIn this mode, a smart contract earns yield automatically without requiring its balance to rebase and accumulating yield separately. **The governor address claims yield on behalf of the contract.**\r\n\r\n_For example, if 10 ETH is deposited, the contract balance will remain at 10 ETH always. The accrued yield balance of 0.1 ETH can be claimed separately._\r\n\r\n```solidity\r\nabstract contract SablierV2Base {\r\n    constructor(....) {\r\n        ....\r\n        // subscribe to Claimable mode\r\n        // the set `governor` address can re-configure yield mode after contract creation.\r\n\tBLAST.configure({ _yield: YieldMode.CLAIMABLE, gasMode: GasMode.VOID, governor: 0x123...678 });\r\n        ....\r\n    }\r\n}\r\n\r\ncontract Governor {\r\n    // to claim yield on behalf of the contract when its subscribed to Claimable mode.\r\n    BLAST.claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\r\n    // to re-configure yield mode after contract creation\r\n    BLAST.configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\r\n}\r\n```\r\n\r\n### My remarks\r\nBlast deployment doesn't require much work. We can deploy the contracts with Claimable mode in the beginning as it keep the yield separate from the main contract balance, and then later figure out what to do with the yield.\r\n\r\n### Links\r\n1. [Blast technical doc](https://docs.blast.io/building/guides/eth-yield)\r\n2. [Blast big bang competition summary](https://docs.google.com/document/d/1UusC3Ey3kts5Wp0hLywiAVgUjJNrOue1MD2INIsOHZk/edit?usp=sharing)","createdAt":"2024-01-24T08:30:31Z","labels":[],"number":802,"repository":"sablier-labs/lockup","state":"closed","title":"Yield modes on Blast L2","type":"discussion","updatedAt":"2024-02-28T14:24:08Z","url":"https://github.com/sablier-labs/lockup/discussions/802"},{"author":"PaulRBerg","body":"The `withdrawMultiple` function is severely limited at the moment: it only works if all the streams in the input array have the same recipient. This issue has been previously flagged by @razgraf [here](https://github.com/sablier-labs/v2-periphery/discussions/179), but his criticism at the time was in the context of the proxy target.\r\n\r\nSince we don't have a proxy target anymore, the only solution now is to refactor the [`withdrawMultiple`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/abstracts/SablierV2Lockup.sol#L328) function to implement this behavior. There are two possible approaches:\r\n\r\n1. Remove the `to` parameter and have the smart contract query the recipient for each stream in the input array.\r\n    - This is less gas-efficient but also less labor-intensive on the client side\r\n2. Allow users to specify an array of `to` addresses.\r\n    - This is more gas-efficient but also more labor-intensive on the client side\r\n    - Technically, this approach unlocks a functionality that otherwise cannot exist, i.e, a recipient with multiple streams could call this function to withdraw to a bunch of different addresses. But this doesn't sound like a super useful feature.\r\n\r\nThere are pros and cons to each approach. Ultimately, we might want to implement both. WDYT, @razgraf, @andreivladbrg?\r\n\r\nAt a minimum, I think we should definitely implement at least the first approach, and so I have created this issue: https://github.com/sablier-labs/v2-core/issues/774","createdAt":"2023-12-29T13:52:15Z","labels":[],"number":773,"repository":"sablier-labs/lockup","state":"closed","title":"Make the \"withdrawMultiple\" function work with multiple recipients","type":"discussion","updatedAt":"2024-02-12T14:53:16Z","url":"https://github.com/sablier-labs/lockup/discussions/773"},{"author":"smol-ninja","body":"A note to the reader: **The following doesn't affect the deployed version of Sablier contracts**.\r\n\r\n## Context\r\nThe recent [PR: Make withdraw function callable by any account](https://github.com/sablier-labs/v2-core/issues/731) enables anyone to call `withdraw()` on any stream. Each withdrawal attempts to call `onLockupStreamWithdrawn()` on both sender and recipient if they are contracts. As discussed privately on Slack, it raises a concern when the stream has the same sender and recipient. [^1]\r\n\r\n## Problem\r\nWe use the same function name `onLockupStreamWithdrawn()` in both `ISablierV2Recipient` and `ISablierV2Sender`. The user is expected to implement `onLockupStreamWithdrawn()` with no information regarding which interface he wants to implement it for.  This leads to duplicate calls on this function when `withdraw()` is triggered by a third party and the sender and recipient are the same contract addresses.\r\n\r\n[SablierV2Lockup.sol#L278C1-L297C10](https://github.com/sablier-labs/v2-core/blob/staging/src/abstracts/SablierV2Lockup.sol#L278C1-L297C10)\r\n```solidity\r\nif (msg.sender != recipient && recipient.code.length > 0) {\r\n    try ISablierV2Recipient(recipient).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n\r\nif (msg.sender != sender && sender.code.length > 0) {\r\n    try ISablierV2Sender(sender).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n```\r\n\r\n## Solutions\r\n### Option 1\r\nRename `onLockupStreamWithdrawn()`\r\n- to `callSenderOnLockupStreamWithdrawn()` in `ISablierV2Sender`\r\n- to `callRecipientOnLockupStreamWithdrawn()` in `ISablierV2Recipient` \r\n\r\nBecause we have other functions `OnLockupStreamCanceled()` and `onLockupStreamRenounced()` in the `ISablierV2Recipient`, we should also consider renaming them to follow the same naming convention.\r\n\r\n### Option 2\r\nWhen the sender is the same as the recipient, `withdraw()` calls on `onLockupStreamWithdrawn()` only once.\r\n\r\n```solidity\r\nif (msg.sender != recipient && recipient.code.length > 0) {\r\n    try ISablierV2Recipient(recipient).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n\r\nif (sender != recipient && msg.sender != sender && sender.code.length > 0) {\r\n    try ISablierV2Sender(sender).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n```\r\n\r\n[^1]: A user provides liquidity on AMM through a multisig and then locks the liquidity by setting up a stream of LP tokens to the same multisig. The multisig implements `onLockupStreamWithdrawn()` to withdraw liquidity from the AMM every time a `withdraw()` is triggered.","createdAt":"2024-01-26T07:11:21Z","labels":[],"number":804,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"onLockupStreamWithdrawn()\" hooks to avoid duplicate calls","type":"discussion","updatedAt":"2024-02-10T12:36:58Z","url":"https://github.com/sablier-labs/lockup/discussions/804"},{"author":"PaulRBerg","body":"[GasHawk](https://www.gashawk.io/#/setup?refCode=OKM-HWG) is a tool that uses a proprietary algorithm for calculating an optimal gas price. We should use it to lower our contract deployment costs.","createdAt":"2023-12-21T10:05:17Z","labels":[],"number":760,"repository":"sablier-labs/lockup","state":"open","title":"Integrate GasHawk to save on deployment costs","type":"discussion","updatedAt":"2024-09-04T17:27:29Z","url":"https://github.com/sablier-labs/lockup/discussions/760"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOwners of non-transferable streams are confused. See this feedback from a $5IRE airstream recipient:\r\n\r\n<img width=\"400\" alt=\"SCR-20240208-lttd\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/51de157a-530a-4a9d-ae9b-0eec644be7de\">\r\n\r\n<img width=\"400\" alt=\"SCR-20240208-mfxg\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/e63279d7-0020-4078-97e1-17d348a28be8\">\r\n\r\n## Proposal\r\n\r\nDo not mint an NFT when the user wishes to make it non-transferable.\r\n\r\n### Benefits\r\n\r\n- No more redundant listings on OpenSea\r\n- No need to implement [this task](https://github.com/sablier-labs/v2-core/issues/818) in the NFT descriptor\r\n- Gas optimization (related: https://github.com/sablier-labs/company-discussions/discussions/36)\r\n\r\n### Cons\r\n\r\n- Losing the aesthetic benefits (e.g., users valuing the NFT for how it looks)\r\n- Bespoke logic for storing the recipient address\r\n- Additional checks required whenever there are interactions with the NFT featuers, e.g. transfer, burn\r\n- More complicated logic in the UI\r\n\r\n## RFC\r\n\r\nCc @sablier-labs/everybody.\r\n\r\n## Context\r\n\r\n","createdAt":"2024-02-08T11:46:42Z","labels":[],"number":819,"repository":"sablier-labs/lockup","state":"closed","title":"Consider not minting the NFT when the stream is non-transferable","type":"discussion","updatedAt":"2024-02-08T13:51:36Z","url":"https://github.com/sablier-labs/lockup/discussions/819"},{"author":"andreivladbrg","body":"We currently have some workflows in the CI, that are meant to be used to deploy contracts. e.g. https://github.com/sablier-labs/v2-core/blob/main/.github/workflows/deploy-core.yml\r\n\r\n<img width=\"1487\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-core/assets/99738872/02461d3c-425b-45c4-b757-f8b4e058ec7e\">\r\n\r\nThe problems are:\r\n- they have never been used in practive (only to see if they work)\r\n- they are outdated\r\n- maintenance costs\r\n- it is better to deploy on the machine to get the broadcasts\r\n- for those who have warp, we can use drive\r\n\r\nIMO they are cool, but not that useful, so I suggest to remove them.\r\n\r\n@PaulRBerg what do you say?\r\n","createdAt":"2024-02-07T13:21:22Z","labels":[],"number":815,"repository":"sablier-labs/lockup","state":"closed","title":"Should we remove the deployment workflows?","type":"discussion","updatedAt":"2024-02-07T14:31:06Z","url":"https://github.com/sablier-labs/lockup/discussions/815"},{"author":"andreivladbrg","body":"The current version of the deterministic deployment scripts requires manually passing the `create2Salt` which is a slow procces and prone to errors:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/7819a3b5122036596edff3326b97a8c03750bbb8/script/DeployDeterministicCore.s.sol#L22-L43\r\n\r\nTo automate this process, I've developed a utility that builds the salt using the [ffi](https://book.getfoundry.sh/cheatcodes/ffi?highlight=ffi#ffi) cheatcode, which allows you to execute an arbitrary shell command and capture the output: \r\n\r\n```solidity\r\nstring memory chainId = block.chainid.toString();\r\nstring[] memory inputs = new string[](4);\r\ninputs[0] = \"jq\";\r\ninputs[1] = \"-r\";\r\ninputs[2] = \".version\";\r\ninputs[3] = \"./package.json\";\r\nbytes memory result = vm.ffi(inputs);\r\nstring memory version = string(result);\r\nstring memory create2Salt = string.concat(\"ChainID \", chainId, \", Version \", version);\r\n```\r\n**Note:** it would require to import and use a library to convert uint256 to string\r\n\r\nI've personally tested this and it works. https://app.warp.dev/block/5564ry0K2Lxbq9seHWJKsx\r\n\r\nThe most appropriate place to implement this is in a function named `getCreate2Salt` within `Base_Script`.\r\n\r\nwdyt @PaulRBerg @smol-ninja ?\r\nI believe you are going to like it 😁","createdAt":"2024-02-01T12:22:16Z","labels":[],"number":810,"repository":"sablier-labs/lockup","state":"closed","title":"Automate the process of passing the `create2Salt`","type":"discussion","updatedAt":"2024-02-03T08:37:26Z","url":"https://github.com/sablier-labs/lockup/discussions/810"},{"author":"andreivladbrg","body":"### Motivation\r\n\r\nBecause  I've been working on implementing the new Sablier streaming model, i.e. [LockupTranched](https://github.com/andreivladbrg/v2-tranched), it reminded my self  how much duplicated logic exists between `LockupLinear` and `LockupDynamic` contracts.\r\n\r\nThis thing is caused by the different `Stream` ([LD](https://github.com/sablier-labs/v2-core/blob/ea6f097d417eee2e0aa2568b4f18cbd2b2f65613/src/types/DataTypes.sol#L166-L182),[LL](https://github.com/sablier-labs/v2-core/blob/ea6f097d417eee2e0aa2568b4f18cbd2b2f65613/src/types/DataTypes.sol#L266-L281)) data structures stored in the contracts:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/ea6f097d417eee2e0aa2568b4f18cbd2b2f65613/src/SablierV2LockupDynamic.sol#L62\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/ea6f097d417eee2e0aa2568b4f18cbd2b2f65613/src/SablierV2LockupLinear.sol#L50\r\n\r\nAs we plan to implement multiple models of `Lockup` contracts in the future, this issue will increasingly cause more harm, in terms of dev work time, maintenance, and ofc more prone to errors (as we discussed here https://github.com/sablier-labs/v2-core/issues/771 - also, we would not need to implement that \"code identity\" test) and I don't think we should leave it as it is.\r\n\r\n### Solution\r\n\r\n**Note:** I've already implemented the changes on this [branch](https://github.com/sablier-labs/v2-core/tree/major-refactor). \r\n\r\nGiven that the structs share more than 90% of the variables, it was inevitable to find a solution by adding a new data structure within the `Lockup` namespace. This structure will be used in all child contracts of `SablierV2Lockup`.\r\n\r\nSo the design I am proposing is:\r\n- All lockup contracts share a common `Stream` entity and it is going to be placed in `SablierV2Lockup`\r\n- Each model has the ability to add new data structures to store in their unique implemention\r\n    - For linear model the new type is going to be cliffs: `mapping(uint256 id => uint40 cliff) internal _cliffs;`\r\n    - For dynamic model the new type is going to be the segments: `mapping(uint256 id => LockupDynamic.Segment[] segments) internal _segments;`\r\n-  All streams will still share the same id (similar to how we get the recipient - it is stored in the owners mapping from `ERC721`)\r\n- The child contracts will only implement the `create` functions and the calculation function: `_calculateStreamedAmount`\r\n- The API remains the same, meaning that `getStream` function will return the same data structure as the current version, but this one is [going to be built in the view function](https://github.com/sablier-labs/v2-core/blob/648f55a21f73686eff5a06c45eeab371a172348b/src/SablierV2LockupLinear.sol#L94-L121)\r\n\r\nThe only downside I can think of is the gas implications in the `create` function, this design will require one more `mapping`. \r\n\r\nI've performed a [benchmark](https://github.com/sablier-labs/v2-core/tree/648f55a21f73686eff5a06c45eeab371a172348b/test/benchmark) and this is the result:\r\n\r\n**Later edit:** the gas costs are increased in the linear contract only when there is a [cliff linear curve](https://docs.sablier.com/concepts/protocol/stream-types#cliffs) stream created. when there is a [simple linear](https://docs.sablier.com/concepts/protocol/stream-types#lockup-linear) stream, no gas increases (benchmarked at 116052).\r\n\r\n| Contract      | Current gas cost | Proposed design gas cost | Increased by | \r\n| ----------- | ----------- | ----------- | ----------- |\r\n| LockupLinear      |   116184    | 138073| 21889 |\r\n| LockupDynamic   | 182841  |182967| 126 |\r\n\r\n**Note:** the gas costs are for the `createWithTimestamps` function and in dynamic contract 2 segments were used.\r\n\r\nIn the linear contract, there is indeed a significant difference, due to the introduction of a new storage slot. In the dynamic contract, there is not a significant difference because the segments were already located at the end of the stream struct.\r\n\r\nDespite the increase in gas, I believe that this refactor is the right choice to make. The code reduction amounts to almost [300 lines](https://github.com/sablier-labs/v2-core/commit/9d140641bc876f0fa32b94591c37b6c28c001c00) lines in the `src` dir. If we were to add `Tranched`, we would have even greater improvement. \r\n_It is a more robust and a much cleaner design._\r\n\r\n### ~Other consideration~\r\n\r\n**Later edit:** as per my comment below, this consideration is not needed anymore because we would leave cliff = 0 in simple linear sterams.\r\n\r\nSince the only unique thing in the linear stream is the `cliff time` variable, and we can achieve the same feature in the dynamic contract with a 2-segment stream, we can consider removing the [cliff streaming curve](https://docs.sablier.com/concepts/protocol/stream-types#cliffs) for linear streams. In this case, the only curve achievable by this contract would be:\r\n<img width=\"313\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-core/assets/99738872/076ff25e-826e-4596-b1a4-af59e5e176d8\">\r\n\r\nThis approach would allow us to maintain the same gas cost as the current version or even slightly reduce it due to the removal of the `cliffTime`. However, before making this decision, we should make a query on Dune for lockup linear contracts to see how frequently [this curve](https://docs.sablier.com/concepts/protocol/stream-types#cliffs) is used. Also, we need to see what's the impact at the app level.\r\n\r\n\r\nI am very curious about your opinion @PaulRBerg @smol-ninja. \r\nYou can view the work [here](https://github.com/sablier-labs/v2-core/tree/major-refactor).\r\n","createdAt":"2024-01-26T13:41:19Z","labels":[],"number":805,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor lockup contracts to move all common logic in `SablierV2Lockup`","type":"discussion","updatedAt":"2024-01-31T14:46:36Z","url":"https://github.com/sablier-labs/lockup/discussions/805"},{"author":"PaulRBerg","body":"The task is to rename the `renounce` functionality (the function name, the event, etc.) to `disableCancelability`.\r\n\r\nThe rationale is two-fold:\r\n\r\n1. Since the introduction of the `transferable` flag in V2.1, there are now multiple properties of the stream that could be \"renounced\" by the sender.\r\n2. \"disable cancelability\" is infinitely clearer than \"renounce\". The latter could be interpreted to mean that the sender gives up on paying the recipient.\r\n","createdAt":"2023-12-22T19:02:27Z","labels":[],"number":777,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"renounce\" to \"disableCancelability\"","type":"discussion","updatedAt":"2024-01-24T11:06:45Z","url":"https://github.com/sablier-labs/lockup/discussions/777"},{"author":"andreivladbrg","body":"Headers are useful to improve readability of the code, and to logically group functions between it's visibility and it's type (constant/non-constant).\r\n\r\nBut, there are places where, IMO, where these headers are a chore (and actually decrease the readability).\r\n\r\nE.g. different headers between constants and storage variables, and internal vs private:\r\nhttps://github.com/sablier-labs/v2-core/blob/7819a3b5122036596edff3326b97a8c03750bbb8/src/abstracts/SablierV2Base.sol#L24-L39\r\n\r\nMy proposal is to use only one header for these variables, and that is:\r\n```solidity\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                 CONTRACT STATE\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n```\r\n\r\nwdyt? @PaulRBerg  @smol-ninja \r\n","createdAt":"2024-01-23T12:53:41Z","labels":[],"number":800,"repository":"sablier-labs/lockup","state":"closed","title":"Remove redundant headers","type":"discussion","updatedAt":"2024-01-24T10:40:31Z","url":"https://github.com/sablier-labs/lockup/discussions/800"},{"author":"PaulRBerg","body":"I'm creating this discussion to use it as a board for posting ideas related to how we can gas golf our contracts.\r\n\r\nAs evidenced by this [discussion on the ENS forum](https://discuss.ens.domains/t/rfp-stream-platform-for-ens-service-providers), gas costs are relevant when DAOs assess Sablier.\r\n\r\n","createdAt":"2023-12-28T09:13:04Z","labels":[],"number":767,"repository":"sablier-labs/lockup","state":"open","title":"Ideas for gas golfing our contracts","type":"discussion","updatedAt":"2024-01-16T06:32:52Z","url":"https://github.com/sablier-labs/lockup/discussions/767"},{"author":"PaulRBerg","body":"Just had this idea while reviewing @smol-ninja's PR here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/pull/752\r\n\r\nWhat would you (Shub and @andreivladbrg) say about turning the deployment Bash script into a Rust-based CLI meant for internal use at Sablier?","createdAt":"2024-01-15T17:04:04Z","labels":[],"number":794,"repository":"sablier-labs/lockup","state":"closed","title":"Turn the deployment script into a Rust-based CLI","type":"discussion","updatedAt":"2024-01-15T21:17:31Z","url":"https://github.com/sablier-labs/lockup/discussions/794"},{"author":"razgraf","body":"### Context\r\n\r\nWe recently discussed with a user looking to integrate the Sablier v2 NFTs into their lending protocol. They presented us with some valuable feedback on the lifecycle of the token and how to possibly improve its DX.\r\n\r\n### Assumption\r\n\r\nIn the current design, the discussion revolved around burning the token (#129) as soon as the stream reaches an end state.\r\n\r\n### New perspective (technical)\r\n\r\nTo support our Sablier v2 NFT, their protocol would implement a special wrapper (a `wNFS` if you may, as in \"_wrapped non fungible stream_\"). The fact that canceling is a hard-to-predict action (sender may choose when [if stream is cancelable]) would force the integrator to code special logic to host not only an ERC721 but ERC20s too, inside the wrapper. This is because, upon cancelation, the owner of the token would have to expect funds being sent into their balance. The owner/recipient here would be the wrapper itself, **hence the need for custom logic**.\r\n\r\n**Proposed solution**\r\n\r\nThe proposed solution consisted of creating a new **end state** that comes into play after the stream gets canceled. Instead of burning the NFT, the `cancel` action would move the idle/non-streamed funds back to the sender, while the ones that haven't been redeemed yet would remain in the custody of the NFT itself. This would actually make `withdraw` the only case when, upon asking to redeem 100% of the available funds would cause the stream to move into an end state and possibly be burned.\r\n\r\n\r\n### New perspective (economical)\r\n\r\nAlthough we are not financial advisors and tax is subjective to our user's own research and jurisdiction, in a borrowing context, leaving the funds locked into the NFT could prove beneficial for its owner. As borrowing is usually not a taxable event, the user could choose to leave their funds idle in the token contract (delaying the final withdrawal) and borrow against it even though the stream itself may have stopped a long time ago.\r\n\r\n\r\n### TL;DR;\r\n\r\n- Token should not be burned on `cancel`\r\n- Token could be burned only on the final `withdraw` (no more value inside)\r\n- In the context of integrations, any other action that's not in the full control of the recipient should be considered with extra care\r\n- Keeping the NFT alive (for as long as it can theoretically hold value) maybe prove to be tax advantageous\r\n\r\n","createdAt":"2022-10-29T20:09:27Z","labels":[],"number":150,"repository":"sablier-labs/lockup","state":"closed","title":"Delay re-routing funds upon a stream getting canceled","type":"discussion","updatedAt":"2024-01-08T16:41:30Z","url":"https://github.com/sablier-labs/lockup/discussions/150"},{"author":"viraj124","body":"We have built a fractionalizer as a usecase for the vesting nft's where instead of having 1 nft that is created upon vesting users can  vest small amounts and thus have multiple vesting nft and can use the fractionalizer to get fungible tokens based on the value of the underlying token their vesting nft holds.\r\n\r\nusers interact through our [ocean protocol](https://wiki.shellprotocol.io/how-shell-works/the-ocean-accounting-hub) which is a common accounting layer for all our primitives and swap the nft for fungible tokens and vice versa","createdAt":"2024-01-06T07:32:41Z","labels":[],"number":782,"repository":"sablier-labs/lockup","state":"open","title":"Vesting NFT fractionalizer with Shell Protocol","type":"discussion","updatedAt":"2024-01-08T11:33:42Z","url":"https://github.com/sablier-labs/lockup/discussions/782"},{"author":"PaulRBerg","body":"Pnpm has compatibility issues because of the way it caches the dependencies in `node_modules/.pnpm`:\r\n\r\n- https://github.com/foundry-rs/foundry/issues/5307#issuecomment-1859191327\r\n- https://github.com/sablier-labs/v2-core/discussions/508#discussioncomment-7751667\r\n\r\nWe should look into alternatives, and Bun looks promising:\r\n\r\nhttps://bun.sh/package-manager","createdAt":"2023-12-18T14:20:56Z","labels":[],"number":754,"repository":"sablier-labs/lockup","state":"closed","title":"Use Bun instead of Pnpm","type":"discussion","updatedAt":"2023-12-31T12:26:46Z","url":"https://github.com/sablier-labs/lockup/discussions/754"},{"author":"PaulRBerg","body":"## Context\r\n\r\nI did some research this morning on the status quo of invariant/fuzz testing in Solana, and unfortunately I have bad news to share.\r\n\r\n> [!NOTE]\r\n> A note about terminology: I use 'fuzzing' and 'invariant' interchangeably.\r\n\r\n## Problem\r\n\r\nThere is little to no support for fuzzing/invariant testing in Solana.\r\n\r\n[Trident](https://github.com/Ackee-Blockchain/trident) is the only framework that provides fuzzing/invariant testing for Solana programs. Sadly, [it doesn't support Anchor v0.31 and Solana v2.1](https://github.com/Ackee-Blockchain/trident/issues/353), and it also struggles to compile on macOS Silicon due to its dependency on [honggfuzz](https://github.com/google/honggfuzz/issues/477).\r\n\r\nOne of its maintainers [told](https://github.com/Ackee-Blockchain/trident/issues/352#issuecomment-3139616009) me that in the next release, they will drop the hard dependency on `honggfuzz`, although that will involve writing more code on our end.\r\n\r\n## What to Do?\r\n\r\nI see two potential solutions:\r\n\r\n1. Work with Trident, scrappy as it is. Aggressively open GitHub issues and pressure the Trident maintainers to add support for Anchor v0.31 and macOS Silicon (I've already started doing this). If this approach doesn't pan out, use desktop software like Parallels Desktop to develop on Ubuntu.\r\n2. Build a fuzzing/invariant engine in TypeScript.  A property-based testing framework like [fast-check](https://github.com/dubzzz/fast-check) might be useful (but I'm not sure, this conjecture should to validated when development is started).\r\n\r\nI am slightly more inclined to go with option 1.\r\n\r\n## References\r\n\r\n- [What is the equivalent of Foundry's invariant testing in Solana?](https://solana.stackexchange.com/questions/22990/what-is-the-equivalent-of-foundrys-invariant-testing-in-solana)\r\n- [Professional workflow for Anchor Tests](https://solana.stackexchange.com/questions/21115/professional-workflow-for-anchor-tests)\r\n\r\nAnd somewhat tangential .. it looks like in Solana, it is not even possible to generate test coverage reports:\r\n\r\n- [Solana program test coverage](https://solana.stackexchange.com/questions/5880/solana-program-test-coverage)\r\n- [How to measure test coverage for Anchor program?](https://solana.stackexchange.com/questions/2610/how-to-measure-test-coverage-for-anchor-program)\r\n\r\n@sablier-labs/solana","createdAt":"2025-07-31T12:11:52Z","labels":[],"number":225,"repository":"sablier-labs/solsab","state":"open","title":"A report on fuzzing/invariant testing in Solana","type":"discussion","updatedAt":"2025-08-04T12:22:48Z","url":"https://github.com/sablier-labs/solsab/discussions/225"},{"author":"PaulRBerg","body":"I was thinking about how we currently emit errors:\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/ec9c546a511241f3b1c42ef6244b6709ce3abca1/programs/lockup/src/utils/validations.rs#L13-L17\r\n\r\nWhat will Solana users see on a blockchain explorer like SolScan?\r\n\r\nWill they see `StreamDepleted`, or the error's numerical code?\r\n\r\nI'm asking because I am thinking about potentially namespacing the errors with the program name, e.g., `SablierLockup_StreamDepleted`.\r\n\r\n@sablier-labs/solana","createdAt":"2025-07-29T16:18:22Z","labels":[],"number":222,"repository":"sablier-labs/solsab","state":"closed","title":"Namespacing error names with the program name","type":"discussion","updatedAt":"2025-07-31T11:52:24Z","url":"https://github.com/sablier-labs/solsab/discussions/222"},{"author":"PaulRBerg","body":"@sablier-labs/solana\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/ec9c546a511241f3b1c42ef6244b6709ce3abca1/programs/lockup/src/instructions/withdraw.rs#L54-L63","createdAt":"2025-07-29T16:12:08Z","labels":[],"number":220,"repository":"sablier-labs/solsab","state":"closed","title":"What happens when the NFT is burned?","type":"discussion","updatedAt":"2025-07-31T11:55:21Z","url":"https://github.com/sablier-labs/solsab/discussions/220"},{"author":"PaulRBerg","body":"@sablier-labs/solana\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/bba5c892c67518c55073f669573bb735fc36059a/programs/lockup/src/state/lockup.rs#L27-L31","createdAt":"2025-07-24T11:11:27Z","labels":[],"number":190,"repository":"sablier-labs/solsab","state":"closed","title":"Why are the timestamp values `i64` and not `u64`?","type":"discussion","updatedAt":"2025-07-25T14:29:58Z","url":"https://github.com/sablier-labs/solsab/discussions/190"},{"author":"PaulRBerg","body":"@sablier-labs/solana\r\n\r\nThey will be auto-generated (I suppose), so give us more homework by appending them as comments, e.g. here?\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/bba5c892c67518c55073f669573bb735fc36059a/programs/lockup/src/utils/errors.rs#L7","createdAt":"2025-07-24T14:51:37Z","labels":[],"number":201,"repository":"sablier-labs/solsab","state":"closed","title":"What's the point of appending the error codes hex values in the Rust code?","type":"discussion","updatedAt":"2025-07-25T08:41:28Z","url":"https://github.com/sablier-labs/solsab/discussions/201"},{"author":"PaulRBerg","body":"@sablier-labs/solana, could you please explain what the safety buffer is?\r\n\r\nThis looks like 0.001 SOL. Right?\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/bba5c892c67518c55073f669573bb735fc36059a/tests/merkle_instant/unit/collectFees.ts#L71\r\n\r\n","createdAt":"2025-07-24T12:41:15Z","labels":[],"number":196,"repository":"sablier-labs/solsab","state":"closed","title":"What is the fee collection safety buffer?","type":"discussion","updatedAt":"2025-07-25T08:40:30Z","url":"https://github.com/sablier-labs/solsab/discussions/196"},{"author":"PaulRBerg","body":"@sablier-labs/solana\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/bba5c892c67518c55073f669573bb735fc36059a/tests/lockup/utils/calculations.ts#L5","createdAt":"2025-07-24T11:26:25Z","labels":[],"number":191,"repository":"sablier-labs/solsab","state":"closed","title":"Why is \"getStreamedAmount\" unused? Should we delete it?","type":"discussion","updatedAt":"2025-07-24T11:38:38Z","url":"https://github.com/sablier-labs/solsab/discussions/191"},{"author":"IaroslavMazur","body":"### The problem\n\nHere's how we're currently validating the `Clawback` Ix:\n```rust\npub fn check_clawback(expiration_time: i64, first_claim_time: i64) -> Result<()> {\n    // Check: the grace period has passed and the campaign has not expired.\n    if has_grace_period_passed(first_claim_time)? && !has_expired(expiration_time)? {\n        return Err(ErrorCode::ClawbackNotAllowed.into());\n    }\n\n    Ok(())\n}\n\npub fn has_expired(expiration_time: i64) -> Result<bool> {\n    let current_time = Clock::get()?.unix_timestamp;\n\n    Ok(expiration_time > 0 && expiration_time <= current_time)\n}\n\npub fn has_grace_period_passed(first_claim_time: i64) -> Result<bool> {\n    let current_time = Clock::get()?.unix_timestamp;\n    let grace_period = 7 * 24 * 60 * 60; // 7 days in seconds\n\n    Ok(first_claim_time > 0 && current_time > first_claim_time + grace_period)\n}\n```\n\nThe problems with this approach are that:\n1. “grace period” normally means “you can be late [to **_pay_** for smth you **_have to_** buy] without penalty.” We're, however, using it to refer to a period during which the campaign creator has the **_opportunity/option_**  to get the funds **_back to themselves_**;\n2. the validations are hard to follow, being \n    - distributed across multiple functions,\n    - wrapped around the terms that name them (sometimes, incorrectly).\n\n### The proposed solution\n\nReplace the above with inline checks that read top-to-bottom and don't require you to do the mental unwrapping and memorization to understand:\n```rust\npub fn check_clawback(expiration_time: i64, first_claim_time: i64) -> Result<()> {\n    // Allow clawback if no claims have been made yet or the campaign has already expired\n    if first_claim_time == 0 || has_expired(expiration_time)? {\n        return Ok(());\n    }\n\n    // Allow clawback if less than a week has passed since the first claim.\n    let current_time = Clock::get()?.unix_timestamp;\n    let a_week_past_first_claim = first_claim_time + 7 * 24 * 60 * 60;\n    if current_time < a_week_past_first_claim {\n        return Ok(());\n    }\n\n    // Otherwise, disallow clawback.\n    Err(ErrorCode::ClawbackNotAllowed.into())\n}\n\npub fn has_expired(expiration_time: i64) -> Result<bool> {\n    let current_time = Clock::get()?.unix_timestamp;\n\n    Ok(expiration_time > 0 && expiration_time <= current_time)\n}\n```\n\nTagging @sablier-labs/solana for feedback.","createdAt":"2025-06-24T11:03:37Z","labels":[],"number":154,"repository":"sablier-labs/solsab","state":"open","title":"Simplify and clarify `Clawback` validation: Deprecate “grace period” in favor of an explicit clawback window","type":"discussion","updatedAt":"2025-06-29T13:04:40Z","url":"https://github.com/sablier-labs/solsab/discussions/154"},{"author":"IaroslavMazur","body":"1) https://github.com/sablier-labs/solsab/pull/126#discussion_r2154939825","createdAt":"2025-06-27T14:10:56Z","labels":[],"number":164,"repository":"sablier-labs/solsab","state":"open","title":"Things to discuss with the frontend team","type":"discussion","updatedAt":"2025-06-27T14:10:57Z","url":"https://github.com/sablier-labs/solsab/discussions/164"},{"author":"andreivladbrg","body":"Currently, the account that receives the streamed tokens passed to the `withdraw` Ix is named:\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/716d12f4874b3645c3efee0d8cc6b1af421b33a0/programs/lockup/src/instructions/withdraw.rs#L59-L68\r\n\r\nIMO this isn't ideal, as it gives the impression that there are two roles for the \"recipient\" in the stream.\r\n\r\nMy suggestion is to rename it to one of the following:\r\n- `to` — matches the [EVM param](https://github.com/sablier-labs/lockup/blob/a0ce5c7c37d03fd6be1076c78d108270d2c25e09/src/interfaces/ISablierLockup.sol#L271-L272)\r\n- `beneficiary`\r\n- `destination`\r\n\r\n@IaroslavMazur lmk what you think","createdAt":"2025-06-25T14:06:32Z","labels":[],"number":157,"repository":"sablier-labs/solsab","state":"open","title":"Rename `withdrawal_recipient` to something more generic","type":"discussion","updatedAt":"2025-06-27T10:32:20Z","url":"https://github.com/sablier-labs/solsab/discussions/157"},{"author":"IaroslavMazur","body":"### The problem\r\n\r\nWhile working on #124, I discovered an issue with the current design of the Merkle Instant program:\r\n\r\nThe `CreateCampaign` Ix executes successfully even if the `Initialize` Ix (for the whole program) hasn’t been run beforehand.\r\nThis happens because `CreateCampaign` doesn’t require the only account created during `Initialize`: the `Treasury`.\r\n\r\n### Possible solutions\r\n\r\nWe have a few potential paths forward:\r\n\r\n#### Option 1: Require `Treasury` in `CreateCampaign` Context\r\n\r\nPros:\r\n- Solves the issue by making `CreateCampaign` implicitly dependent on `Initialize`.\r\n- Enforces a logical program flow.\r\n\r\nCons:\r\n- Slightly worsens DX: `CreateCampaign` would now require passing the `Treasury` account which it doesn’t, actually, use.\r\n\r\n#### Option 2: Allow Campaigns Before Initialization\r\n\r\nPros:\r\n- Simpler UX and program flow.\r\n\r\nCons:\r\n- Program design becomes semantically incorrect - campaigns can exist even though the program hasn’t been initialized.\r\n- Potential for confusion or misuse.\r\n\r\n#### Option 3: ??\r\n\r\nTagging @sablier-labs/solana for feedback","createdAt":"2025-06-03T16:51:59Z","labels":[],"number":125,"repository":"sablier-labs/solsab","state":"closed","title":"Merkle Instant: Issue with `CreateCampaign` not depending on `Initialize`","type":"discussion","updatedAt":"2025-06-20T15:00:21Z","url":"https://github.com/sablier-labs/solsab/discussions/125"},{"author":"IaroslavMazur","body":"While working on the tests for Merkle Instant's `Clawback` Ix, I realized that there is an edge case that could, potentially, result in campaign funds becoming locked inside the campaign ATA account.\r\n\r\n---\r\n\r\n**Important note:** this issue also applies to Lockup's `Cancel` Ix, which similarly transfers tokens to a potentially non-existent `sender_asset_ata`.\r\n\r\n---\r\n\r\n### The Problem\r\n\r\nIf a campaign creator manually closes their token account (ATA) before calling `Clawback`, then:\r\n- Our program attempts to transfer clawed-back funds to a now-nonexistent `campaign_creator_ata`.\r\n- Because of the `#[account(mut)]` constraint, the account is expected to exist and be mutable.\r\n- This leads to a runtime error, preventing the transfer and effectively locking the funds inside the campaign.\r\n\r\nWhile this is clearly the campaign creator’s fault (they closed their own ATA), it’s a fragile UX trap.\r\n\r\n---\r\n\r\n### Suggested Fix\r\n\r\nChange:\r\n```rust\r\n#[account(mut...)]\r\npub campaign_creator_ata: Box<InterfaceAccount<'info, TokenAccount>>\r\n```\r\n\r\ninto:\r\n\r\n```rust\r\n#[account(init_if_needed...)]\r\npub campaign_creator_ata: Box<InterfaceAccount<'info, TokenAccount>>\r\n```\r\n\r\nThis would auto-create the ATA if it has been closed, avoiding a failure and ensuring funds are always recoverable.\r\n\r\n---\r\n\r\n### The alternative approach\r\n\r\nLeave the current behavior as-is. This enforces stricter expectations around ATA management and punishes carelessness, but would be user-hostile in edge cases - and could, ultimately, cause some bad PR for us, as a company.\r\n\r\n---\r\n\r\nTagging @sablier-labs/solana  for input:\r\n\r\n1. Do we want to protect users from themselves here?\r\n2. Or keep the logic strict and trust campaign creators to know what they’re doing?","createdAt":"2025-06-12T11:38:14Z","labels":[],"number":136,"repository":"sablier-labs/solsab","state":"open","title":"Fund lockout in Merkle Instant's `Clawback` and Lockup's `Cancel` Ixs","type":"discussion","updatedAt":"2025-06-18T13:42:25Z","url":"https://github.com/sablier-labs/solsab/discussions/136"},{"author":"IaroslavMazur","body":"It’s not possible to also pass a `SOL` amount when invoking an arbitrary program instruction: the `SOL` transfer needs to happen in a separate/specialized Ix (called `system_instruction::transfer()`).\r\n\r\nAs a result, there’s no such thing as checking how much `SOL` has been passed to an Ix, either.\r\n\r\nHowever, what we can do (considering that we’re discussing this from the perspective of charging our users fees) is:\r\n1) delegate the fee-charging to a separate/new Ix of ours and\r\n2) CPI into that Ix from the Ixs that require a fee to be executed (e.g. `withdraw()`).\r\n\r\ncc @sablier-labs/solana ","createdAt":"2025-01-21T16:29:48Z","labels":[],"number":10,"repository":"sablier-labs/solsab","state":"closed","title":"An alternative for `payable` and `msg.value` on Solana","type":"discussion","updatedAt":"2025-06-16T12:24:26Z","url":"https://github.com/sablier-labs/solsab/discussions/10"},{"author":"andreivladbrg","body":"Currently, all tests are written in a [single 1500-line file](https://github.com/sablier-labs/solsab/blob/04b568e22db203a32854fc17040ed3a99eab3fb2/tests/sablier-lockup.ts).\r\n*(Later edit: it has now >4000 lines)*\r\n\r\nThis is not ideal for developer experience, therefore, I believe we should think of a better structure.\r\nAtm, I haven’t researched the best practices for writing Solana tests with Anchor, so I don’t have any specific recommendations.\r\n\r\nPerhaps we can find an approach that aligns with BTT, the testing framework we are using for EVM contracts.\r\n\r\nThis is an open discussion - @IaroslavMazur, feel free to share your suggestions","createdAt":"2025-01-25T15:49:55Z","labels":[],"number":19,"repository":"sablier-labs/solsab","state":"closed","title":"Find a way to structure the tests in a more friendly way","type":"discussion","updatedAt":"2025-06-16T08:04:53Z","url":"https://github.com/sablier-labs/solsab/discussions/19"},{"author":"IaroslavMazur","body":"Right now, the `Signer` of the Stream Creation tx is, also, considered to be the sender of the created Stream:\n```rust\n#[account(mut)]\npub sender: Signer<'info>,\n```\n\nWhen we introduce Merkle Linear, this might no longer be correct, depending on how CPIs work in Solana, in terms of the \"signer\" of the inner CPIs.\n\nResearch whether this represents a problem - and address it if it does.","createdAt":"2025-06-10T16:50:17Z","labels":[],"number":138,"repository":"sablier-labs/solsab","state":"closed","title":"Tx Signer as the Stream Sender","type":"discussion","updatedAt":"2025-06-14T19:17:59Z","url":"https://github.com/sablier-labs/solsab/discussions/138"},{"author":"IaroslavMazur","body":"Below are some key notes on five of the most popular auditing firms that work with Solana programs.\r\n\r\n### General Observations\r\n\r\n- **Expertise on Solana**: Multi-chain firms make it hard to gauge their specific expertise on Solana, as client testimonials rarely mention the chain, while the client projects may, very well, be multi-chain, as well.\r\n- **Pricing**: Audit prices are not publicly available and need to be requested on an individual basis.\r\n- It’s funny when auditing firms ask you to specify your budget for the audit, as if they’d cut their costs if your budget is below their asking price or smth 🤣\r\n\r\n## Auditing Firms\r\n\r\n**Note**: The companies below are presented in the order of descending preference, with the (seemingly) best companies listed first.\r\n\r\n### Halborn\r\n\r\n- **Website**: [halborn.com](https://www.halborn.com/)\r\n- **Notable Solana Clients**:\r\n   - Solana Foundation\r\n   - Solayer\r\n   - The Vault\r\n   - 40+ other Solana dApps (allegedly)\r\n- **Price**: Unknown\r\n- **Focus**: Multi-chain\r\n- **Social Activity Level**: High\r\n- **Team Composition**: Employees\r\n\r\n### OtterSec\r\n- **Website**: [osec.io](https://osec.io/)\r\n- **Notable Solana Clients**:\r\n   - Solana Foundation\r\n   - Metaplex\r\n   - Anchor\r\n   - Pump Fun\r\n   - Jito\r\n   - Jupiter\r\n   - Phantom\r\n   - Kamino\r\n   - Raydium\r\n- **Price**: Unknown\r\n- **Focus**: Multi-chain\r\n- **Social Activity Level**: Medium\r\n- **Team Composition**: Employees\r\n\r\n### Neodyme\r\n- **Website**: [neodyme.io](https://neodyme.io/)\r\n- **Notable Solana Clients**:\r\n   - Solana Foundation\r\n   - SPL Stake Pool\r\n   - Lido\r\n   - Orca\r\n   - deBridge\r\n- **Price**: Unknown\r\n- **Focus**: Multi-chain\r\n- **Social Activity Level**: Medium to low\r\n- **Team Composition**: Employees\r\n\r\n### Sec3\r\n- **Website**: [sec3.dev](https://www.sec3.dev/)\r\n- **Notable Solana Clients**:\r\n   - Solana Foundation\r\n   - Metaplex\r\n   - Jupiter\r\n- **Price**: Unknown\r\n- **Focus**: Multi-chain\r\n- **Social Activity Level**: Medium to low\r\n- **Team Composition**: Employees\r\n\r\n### Cyfrin\r\n- **Website**: [cyfrin.io](https://www.cyfrin.io/blockchain-security/solana-smart-contract-audit)\r\n- **Notable Solana Clients**: (None listed)\r\n- **Price**: Unknown\r\n- **Focus**: Not specified\r\n- **Social Activity Level**: High\r\n- **Team Composition**: Both employees and external auditors (according to their pricing tiers)\r\n\r\n---\r\n\r\nAs an alternative (h/t @razgraf), we could also consider **[Cantina](https://cantina.xyz/)** with their Audit Competitions.\r\n\r\nThey don't seem to have audited many (notable) Solana protocols, but, maybe, it'd still be a good idea to work with them, as well, given that we've already got a yearlong contract signed with them.\r\n\r\n---\r\n\r\nTagging @sablier-labs/engineers for feedback.","createdAt":"2025-04-12T14:13:25Z","labels":[],"number":54,"repository":"sablier-labs/solsab","state":"open","title":"Popular Auditing Firms for Solana Programs (for us to choose from)","type":"discussion","updatedAt":"2025-04-28T17:16:40Z","url":"https://github.com/sablier-labs/solsab/discussions/54"},{"author":"andreivladbrg","body":"Currently, the `collect_fees.rs` instruction requires a parameter to be passed for the amount collected.\r\n\r\nThe problem i see with this:\r\n- it does not align with the EVM contracts\r\n- we are working on a [script](https://github.com/sablier-labs/multichain-utils/pull/20) to automate this process  \r\n  - it would require additional edge cases to support this in the same flow\r\n- it requires extra validation logic for this parameter — more logic to maintain\r\n\r\nso, i'm proposing to remove it for simplicity.\r\n\r\n@sablier-labs/solana RFF","createdAt":"2025-04-11T16:21:05Z","labels":[],"number":51,"repository":"sablier-labs/solsab","state":"closed","title":"Should we remove the amount param in collect fees instruction?","type":"discussion","updatedAt":"2025-04-15T22:31:55Z","url":"https://github.com/sablier-labs/solsab/discussions/51"},{"author":"andreivladbrg","body":"Creating this discussion to provide useful diagrams for future reviewers of the Solana program.\r\n\r\n**Disclaimer:** It currently only includes the `create` function — I’ll update it later with the rest once I have them. (@IaroslavMazur feel free to also add)\r\n\r\n## Simplified create diagram\r\n\r\n```mermaid\r\n%%{init: {'theme': 'neutral'}}%%\r\ngraph TD\r\n    subgraph \"Create Stream\"\r\n        Sender[Sender] --> |creates| StreamMint[Stream NFT Mint]\r\n        Sender --> |creates| StreamData[Stream Data PDA]\r\n        Sender --> |transfers tokens to| TreasuryATA[Treasury Token Account]\r\n\r\n        StreamMint --> |creates metadata| StreamMeta[Stream NFT Metadata]\r\n        StreamMint --> |creates edition| StreamEdition[Stream NFT Master Edition]\r\n        StreamMint --> |mints to| RecipientATA[Recipient's Token Account]\r\n\r\n        StreamData --> |records details| StreamInfo[Stream Details]\r\n\r\n        NftCollData[Collection Data] --> |increments| Supply[Total Supply Counter]\r\n\r\n        Treasury[Treasury] -.-> |authority for| TreasuryATA\r\n        NftCollMint[Collection Mint] -.-> |collection for| StreamMeta\r\n        NftCollMint -.-> |mint authority| StreamMint\r\n    end\r\n\r\n    classDef newAccount fill:#a8d1ff,stroke:#3584e4\r\n    classDef existingAccount fill:#f6d32d,stroke:#e5a50a\r\n    classDef logicalEntity fill:#c3e5ae,stroke:#26a269,stroke-dasharray: 5 5\r\n\r\n    class StreamMint,StreamData,StreamMeta,StreamEdition,RecipientATA,TreasuryATA newAccount\r\n    class Sender,Treasury,NftCollData,NftCollMint existingAccount\r\n    class StreamInfo,Supply logicalEntity\r\n```\r\n\r\n```mermaid \r\n%%{init: {'theme': 'neutral'}}%%\r\ngraph TD\r\n    subgraph \"Legend\"\r\n        NewAcc[Newly Created Account]:::newAccount\r\n        ExistingAcc[Existing Account]:::existingAccount \r\n        StateChange[StateChange]:::logicalEntity\r\n    end\r\n    \r\n    classDef newAccount fill:#a8d1ff,stroke:#3584e4\r\n    classDef existingAccount fill:#f6d32d,stroke:#e5a50a\r\n    classDef logicalEntity fill:#c3e5ae,stroke:#26a269,stroke-dasharray: 5 5\r\n```","createdAt":"2025-04-04T14:35:11Z","labels":[],"number":41,"repository":"sablier-labs/solsab","state":"open","title":"Technical diagrams","type":"discussion","updatedAt":"2025-04-10T15:51:19Z","url":"https://github.com/sablier-labs/solsab/discussions/41"},{"author":"andreivladbrg","body":"## Context\r\n\r\nIn the EVM contracts, we have scripts to run tests with different profiles/configurations:\r\n\r\nhttps://github.com/sablier-labs/lockup/blob/13750cac0f4cb4cc2edb98f5881fcf02d6bf5d08/package.json#L77C1-L79C91\r\n\r\nCurrently, in the `Anchor.toml`, there are multiple declared ways to run the tests, but they are comment:\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/Anchor.toml#L21-L24\r\n\r\nWhich, IMO, is not the greatest DX — all versions should always be available.\r\n\r\n## Suggestion\r\n\r\nIf possible, we should add scripts under the `package.json` file for (exact names TBD):\r\n- `test:log`\r\n- `test`\r\n- `test:match` – for running specific tests\r\n- and any others we find useful\r\n\r\nThis way, we don't have to manually comment/uncomment every time we want to run a specific command.\r\n\r\n@IaroslavMazur RFF","createdAt":"2025-04-08T14:21:05Z","labels":[],"number":44,"repository":"sablier-labs/solsab","state":"closed","title":"Would it be possible to add test scripts in `package.json`?","type":"discussion","updatedAt":"2025-04-09T15:47:14Z","url":"https://github.com/sablier-labs/solsab/discussions/44"},{"author":"andreivladbrg","body":"@IaroslavMazur and I had a call regarding possible designs to align with the EVM one.\r\nThe objective is to mimic the `payable` functionality from smart contracts. There are a few solutions we can brainstorm around.\r\n\r\n*Note:* The EVM design involves having a stored minimum fee that is less than the actual fee paid by the end user. For example, the min fee is $1, but the actual fee paid in the app for `claim` is $3.\r\n\r\n## First solution\r\n\r\nAdd a `fee_amount` parameter in the instruction that requires a fee to be paid, i.e. `claim` and `withdraw`.\r\nThis amount will be checked against the stored minimum fee, and if it is less, the `tx` is reverted. \r\n\r\n**Cons:** It might feel unnatural to pass a fee amount in the `withdraw` and `claim` functions.  \r\n**Pros:** Everything is in one place, and the total fee of $3 will be clearly visible in the explorer.\r\n\r\n## Second solution\r\n\r\nTransfer the minimum SOL amount ($1) from the user in `withdraw` or `claim`, and then implement a new instruction that takes an additional amount as input. In the case of `claim`, this would be $2, which gets transferred from the user and then from the caller to the treasury. This requires a batch of instructions. (I still need to research this, but Iaro told me that they are atomic)\r\n\r\n**Cons:** Split fees — $1 in one instruction, $2 in another — and potentially more work in the app.  \r\n**Pros:** `withdraw` and `claim` don’t require an awkward parameter.\r\n\r\n---\r\n\r\n### Related question\r\n\r\nShould the min fee in Solana be a constant or should it be editable?  \r\nIf it’s a constant, things would be much simpler since we wouldn’t need to create another account to store its state.\r\n\r\n@sablier-labs/solana What do you think? Which option do you prefer, or do you have a better idea in mind?","createdAt":"2025-03-31T18:36:20Z","labels":[],"number":39,"repository":"sablier-labs/solsab","state":"open","title":"Decision on fee design in Solana","type":"discussion","updatedAt":"2025-04-01T07:46:47Z","url":"https://github.com/sablier-labs/solsab/discussions/39"},{"author":"andreivladbrg","body":"In this discussion https://github.com/sablier-labs/solsab/discussions/5, a question was raised about whether we should use a monorepo for the Solana programs (I believe `solsab` is a good name for it) or create a separate repo for each project. The latter approach would result in three repos: (i) `sol-airdrops` (ii) `sol-flow` and (iii) `sol-lockup` similar to how we handle EVM contract repos.\r\n\r\nIMO we should go for the monorepo approach for the Solana programs, mainly because we are still “testing the waters” with this chain. Currently, we plan to implement only `LL` model and `MerkleInstant` and there will not be a lot of code at start. Also, we are using the `lockup` contracts within `airdrops`, which could become problematic if we keep the `Node.js` approach of installing deps and as AFAIK rust is problematic with it (maybe we might consider using Git submodules ?).\r\n\r\nTho, an advantage of having separate repos is to align with the EVM contracts approach.\r\n\r\nRFF @IaroslavMazur @PaulRBerg @razgraf ","createdAt":"2025-01-19T16:29:03Z","labels":[],"number":6,"repository":"sablier-labs/solsab","state":"open","title":"Should we have separate repos for each solana project?","type":"discussion","updatedAt":"2025-01-29T11:00:06Z","url":"https://github.com/sablier-labs/solsab/discussions/6"},{"author":"andreivladbrg","body":"**ℹ️ Important**: I have not completely reviewed the rust code itself, I just had a brief look, nor have I finished all my documentation about Solana. Thus, some of the ideas might or might not be compatible with how Anchor works.\r\n\r\nCongrats on the great work so far @IaroslavMazur.\r\nIn this discussion, I want to _brainstorm_ some ways to structure and build Solana programs in a robust way.\r\n\r\n---\r\n\r\nAssuming that we will have a pseudo “monorepo” for the Solana programs, i.e. all of the projects we have in Solidity (`lockup`, `airdrops`, and `flow`) we would place them under this repo. (ofc, not in the first version just talking about long term)\r\n\r\nHere is my recommendation:\r\n\r\n```tree\r\nprograms\r\n├── airdrops\r\n│   ├── Cargo.toml\r\n│   └── src\r\n├── flow\r\n│   ├── Cargo.toml\r\n│   └── src\r\n└── lockup\r\n    ├── Cargo.toml\r\n    └── src\r\n```\r\n\r\nThe idea is to have a unique dir for each project, with its individual configuration.\r\n\r\n---\r\n\r\nIdea for structuring the `src`. This can be applied to each dir mentioned above.\r\n\r\nCurrently, I see that all logic is placed under the `lib.rs` and `utils.rs` files, which IMO can be improved.\r\n\r\nTo create a structure similar to Solidity contracts (making it easier for someone familiar with our codebase to see other projects) and at the same time, maintain a familiar environment for Solana, I suggest the following structure:\r\n\r\n```tree\r\n└── src\r\n    ├── instructions\r\n    ├── state\r\n    └── utils\r\n```\r\n\r\n- The `instructions` dir should contain files for each function, with their instruction implementations\r\n- The `state` dir is intended for structs that are stored in storage/state, i.e. [these ones](https://github.com/sablier-labs/solsab/blob/d9185ab63a0473667aa2c7d4bb8d6e824982724b/programs/sablier-on-solana-ts/src/lib.rs#L419-L442).\r\n  It would be equivalent to [types dir](https://github.com/sablier-labs/v2-core/blob/staging/src/types/) in Solidity, but without parameter structs, as we don’t seem to need them.\r\n- The `utils` dir should contain various utility files\r\n\r\nFor the lockup example, the structure would look like this:\r\n\r\n```tree\r\nprograms/lockup/src/\r\n├── instructions\r\n│   ├── cancel.rs\r\n│   ├── createLL.rs\r\n│   └── withdraw.rs\r\n├── lib.rs\r\n├── state\r\n│   └── structs.rs\r\n└── utils\r\n    ├── errors.rs\r\n    ├── helpers.rs\r\n    └── math.rs\r\n```\r\n\r\n---\r\n\r\n@IaroslavMazur I am curious about your thoughts on these ideas.\r\n\r\nAlso, if you have any other suggestions, please share them.\r\n\r\nIf we are going to implement some of these changes, I would like to work on them to (i) review the code and (ii) become more familiar with Solana development, if that's ok.\r\n","createdAt":"2025-01-14T21:37:01Z","labels":[],"number":5,"repository":"sablier-labs/solsab","state":"closed","title":"Ideas to restructure the programs dir","type":"discussion","updatedAt":"2025-01-25T15:44:08Z","url":"https://github.com/sablier-labs/solsab/discussions/5"},{"author":"IaroslavMazur","body":"Floating point is supported natively in Rust (e.g. `f32` and `f64` number types), but it’s not deterministic (e.g. the result of the operations may depend on the hardware the compiler is running on).\r\n\r\nTherefore, because blockchain require math operations to be deterministic (such that the different nodes trying to reach consensus could, actually, do this), the above types, while, theoretically, available for use on Solana, are not recommended.\r\n\r\nThe most popular Rust crates for fixed point math appear to be [rust_decimal](https://crates.io/crates/rust_decimal) and [fixed](https://crates.io/crates/fixed).\r\n\r\ncc @sablier-labs/solana ","createdAt":"2025-01-21T16:27:17Z","labels":[],"number":9,"repository":"sablier-labs/solsab","state":"closed","title":"Fixed point math on Solana","type":"discussion","updatedAt":"2025-01-24T15:43:05Z","url":"https://github.com/sablier-labs/solsab/discussions/9"},{"author":"IaroslavMazur","body":"While “9” is the most common answer I’ve seen, there doesn’t seem to be any widespread consensus regarding this.\r\n\r\nAsked [this question on SE](https://solana.stackexchange.com/questions/19223/is-there-a-standard-for-token-decimals-on-solana-like-ethereums-18) to, hopefully, settle this matter.\r\n\r\ncc @sablier-labs/solana ","createdAt":"2025-01-21T16:26:38Z","labels":[],"number":8,"repository":"sablier-labs/solsab","state":"closed","title":"Token decimals standards on Solana (are there any?)","type":"discussion","updatedAt":"2025-01-24T09:06:15Z","url":"https://github.com/sablier-labs/solsab/discussions/8"},{"author":"IaroslavMazur","body":"Generally speaking, aside from Rent (paid once, at account creation), there are are just 2 types of fees: \r\n- Tx fees (i.e. “gas fees”) and\r\n- Prioritization fees\r\n\r\nWhile the “base” Tx fee is currently set at 5k lamports per signature (subject to change in the future), the Prioritization fee goes up proportionally to the use of the chain bandwidth.\r\n\r\nAkin to the other blockchains, Solana limits the total amount of Compute Units (i.e. “EVM gas”) that can fit inside a block (48M CUs).\r\n\r\nHowever, unlike the other chains, Solana also limits how much CUs each account can use in a block (12M CUs).\r\n\r\nNow, the “Localized fee markets” are not, actually, a separate kind of fee or something. Instead, they are the side-effect of Prioritization fees and the 12M-CUs-per-block account limit.\r\n\r\nIf a program temporarily becomes very popular and achieves the 12M CU limit, then, anyone willing to interact with the program needs to include a bigger Prioritization fee w/ their Tx. However, Txs interacting with the other Solana programs continue paying “normal” Prioritization fees.\r\n\r\nRefs: [Fees on Solana](https://solana.com/docs/core/fees) and [Solana's Local Fee Markets](https://www.publish0x.com/decrypting-crypto/understanding-solanas-local-fee-markets-and-blockspace-struc-xgvddgg)\r\n\r\ncc @sablier-labs/solana","createdAt":"2025-01-21T16:24:12Z","labels":[],"number":7,"repository":"sablier-labs/solsab","state":"open","title":"A summary of fees (gas, priority & \"local fee markets\") on Solana","type":"discussion","updatedAt":"2025-01-22T18:05:41Z","url":"https://github.com/sablier-labs/solsab/discussions/7"},{"author":"IaroslavMazur","body":"Info & ideas regarding our main Solana competitor's (StreamFlow) V2 vesting product (based on the **[rust-sdk](https://github.com/streamflow-finance/rust-sdk)** repo, which is public, unlike the source code of their programs):\r\n\r\n**TL;DR:** After having gone through the available information about their codebase + their audits, I'm sure **we can do (way) better than them**\r\n\r\n- A high-level feature list:\r\n   - Linear streaming, period-based (i.e. the tokens are unlocked linearly, once every period)\r\n   - Open-ended (i.e. no end time)\r\n   - Cliff support\r\n   - Stream cancelability (with separate controls for sender's & recipient's ability to cancel)\r\n   - Stream transferability (with separate controls for sender's & recipient's ability to transfer)\r\n   - Top-ups\r\n   - Pause/un-pause\r\n   - Streaming rate update\r\n      - Given the open-ended-ness & the abilities to top-up, pause and update the streaming rate, I'd be curious to see how they handle:\r\n        - the streamed balance calculation,\r\n        - the eventual (and unavoidable) debt and\r\n        - the Stream state updates, wrt the above + anything else that might happen during the Stream lifecycle\r\n   - Automatic withdrawals (performed by their \"withdrawor\" address, based on the configurable withdrawal frequency)\r\n        - the vast majority of their txs are (currently) coming from their \"withdrawor\" - and not the end users (good for volume, bad for the public on-chain image of their \"popularity\")\r\n        - the automatic withdrawals, once enabled, can't be disabled\r\n   - String names for the Streams\r\n   - A dynamic affiliate system for the whitelisted partners creating Streamflow streams as brokers/intermediaries\r\n   - No **[Token2022](https://spl.solana.com/token-2022)** support (while we'll have it from the get-go)\r\n   - Streamflow is charging 0.19%-0.25% (their Docs & the rust-sdk contradict themselves here):\r\n        - the charging happens at every withdrawal\r\n        - the fee is in the token that's being streamed\r\n   - Integrators/users must generate and save the address/id of the created Stream account themselves, with no (apparent) direct way of recovering the ids (in case they're lost/forgotten)\r\n        - having Stream accounts as NFTs would solve this, as the NFT would, itself, be enough\r\n        - the only way for the (manual) recovery I can think of is to:\r\n           - go back to the Stream creation tx (if you can still find it) \r\n           - look into the accounts created by the tx\r\n           - fetch the id/address of the Stream PDA account\r\n          \r\ncc @sablier-labs/solana ","createdAt":"2025-01-06T14:25:27Z","labels":[],"number":1,"repository":"sablier-labs/solsab","state":"open","title":"Streamflow (V2) product assessment","type":"discussion","updatedAt":"2025-01-06T14:25:29Z","url":"https://github.com/sablier-labs/solsab/discussions/1"},{"author":"razgraf","body":"We'll start with a comparison of the current `create` methods in our contracts\r\n\r\n| Lockup Linear (Durations) | Lockup Linear (Range) |\r\n| ----------------- | ----------------- |\r\n| https://github.com/sablier-labs/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/src/interfaces/ISablierV2LockupLinear.sol#L64-L72 | https://github.com/sablier-labs/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/src/interfaces/ISablierV2LockupLinear.sol#L102-L110 |\r\n\r\n| Lockup Dynamic (Deltas) | Lockup Dynamic (Milestones) |\r\n| ------------------ | ------------------ |\r\n| https://github.com/sablier-labs/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/src/interfaces/ISablierV2LockupPro.sol#L74-L83 | https://github.com/sablier-labs/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/src/interfaces/ISablierV2LockupPro.sol#L115-L124 |\r\n\r\n\r\n## Problem no. 1 - `LockupDynamic.Segment`\r\n\r\n#### Context\r\nThe same segment is being used in both `create` variants. The milestones flavor uses the segment properly, by accessing all variables, including milestones. The deltas flavor won't use milestones **at all**. Instead, it will make use of an additional method argument called `deltas[]` where it will source its durations from.\r\n\r\n#### Problem\r\nBy reusing the segment struct we're causing a few headaches to any developer reading the interface:\r\n - `milestones` isn't being used at all in the delta variant (we ask for a redundant value)\r\n - the assumption of an array with segment definitions is broken, as now we're back to multiple different data sources defining a segment (which now have to be synced)\r\n\r\nI propose we implement two separate structs, one including a milestone, the other a duration. \r\nAs an alternative (although I hope we can have distinct structs), we can discuss the possibility of having a single struct that either re-uses a time dimension (e.g. `lifetime`) but means different things based on the variant chosen -- which is still bad UX but might save up on gas.\r\nAs a second alternative, we revert back to the separate arrays, although I think that was more gas/storage intensive.\r\n\r\n## Problem no. 2 - Order of arguments\r\n\r\nThe linear methods follow an order: `sender, recipient, total, asset, cancelable, [...special...], broker`\r\nThe dynamic methods have: `sender, recipient, total, [...special...], asset, cancelable, [...special...], broker`\r\n\r\nWouldn't it be best to group these similar arguments together, by moving asset and cancelable after the total amount?\r\n\r\n\r\n## Problem no. 3 - Deltas vs Durations and Milestones vs Ranges\r\n\r\nFor consistency, why don't we use durations and ranges for both contracts? At least with milestones I can understand that we're naming the method after the specific `milestone` field of the segment struct, that's driving the temporal logic here. Instead of range, which would work too.\r\n\r\nBut deltas vs. durations feels a bit redundant. Was this made so we have the names completely split between contracts?","createdAt":"2023-02-09T09:50:31Z","labels":[],"number":327,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to refactor the LockupDynamic `create` methods","type":"discussion","updatedAt":"2023-12-28T14:49:06Z","url":"https://github.com/sablier-labs/lockup/discussions/327"},{"author":"PaulRBerg","body":"See my discussion with Drake Evans on Twitter:\r\n\r\nhttps://twitter.com/DrakeEvansV1/status/1659612843849793573","createdAt":"2023-05-21T15:35:50Z","labels":[],"number":508,"repository":"sablier-labs/lockup","state":"closed","title":"Installing dependencies with pnpm instead of git submodules","type":"discussion","updatedAt":"2023-12-15T12:15:26Z","url":"https://github.com/sablier-labs/lockup/discussions/508"},{"author":"lapnd","body":"Hi,\nDoes Sablier support multiple streams with the same payer and payee address?\nLet say, a service provider like google provides multiple services such as gmail, google docs, google sheet. And let assume that user has to pay to use these services. User may user multiple services or may be single service but multiple instances(like pay for gmail services with different domains).\nIn these case, user has to establish multiple stream. Each stream/service , or each stream/service instance. In both cases, it is the same payer and payee addreess. I wonder if Salbier support these cases","createdAt":"2023-12-08T14:29:26Z","labels":[],"number":738,"repository":"sablier-labs/lockup","state":"closed","title":"Multiple streams with the same payer and payee","type":"discussion","updatedAt":"2023-12-19T12:45:35Z","url":"https://github.com/sablier-labs/lockup/discussions/738"},{"author":"PaulRBerg","body":"@razgraf has originally made this suggestion in https://github.com/sablier-labs/v2-periphery/discussions/112:\r\n\r\n> The proxy plugin used for the Sablier on-cancel callback is called `onStreamCanceled`.\r\n> \r\n> https://github.com/sablier-labs/v2-periphery/blob/453a35ef662183654138bfe8cab2b523f340fa5b/src/SablierV2ProxyPlugin.sol#L77-L79\r\n> \r\n> Wouldn't renaming it in something more unique (e.g. `onSablierStreamCanceled`) help prevent unintended collisions in the future (e.g. other project using the PRBProxy doing \"Potato Streaming\")? That's not necessarily intended to improve security (as bad players could still engineer plugins with our original name) but unknowing developers may benefit from this.\r\n\r\nHowever, I've opened another discussion here because it's the `ISablierV2LockupSender` hook that dictates what function the proxy plugin inherits:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/eb5014d7ef608da6a18aaa73ebd40d16dc899a88/src/interfaces/hooks/ISablierV2LockupSender.sol#L20-L26\r\n\r\nNow, about the suggestion itself - it's a great idea, but we've unfortunately run out of time, and we won't be able to implement it if we want to stick to the July 10 deadline :(\r\n\r\nHappy to re-consider the idea for V2.x","createdAt":"2023-07-01T16:30:15Z","labels":[],"number":595,"repository":"sablier-labs/lockup","state":"closed","title":"Consider renaming the hooks to avoid potential conflicts","type":"discussion","updatedAt":"2023-12-08T11:34:35Z","url":"https://github.com/sablier-labs/lockup/discussions/595"},{"author":"PaulRBerg","body":"I've just made the first borrow ever against a Sablier stream on [NFTFI](https://app.nftfi.com/assets/private-offer/0xb10daee1fcf62243ae27776d7a92d39dc8740f95/13).\r\n\r\nOne problem I noticed is that the NFT image is sourced from OpenSea, which means that it is cached. This is a known issue that has been [reported](https://github.com/cantinasec/review-sablier2/issues/20) by Cantina during their latest audit of V2 Core.\r\n\r\nThis is a hairy problem for which the solution is necessarily multi-faceted. There are two practical ways to tackle it:\r\n\r\n- Emit ERC-4906 metadata update events on cancel and on withdraw; this will keep the NFT platforms updated on the key milestones in the stream's evolution\r\n    - This was already done in https://github.com/sablier-labs/v2-core/pull/568\r\n- Write a bot that pings the OpenSea API to update the SVGs for the most significant streams (e.g., active users or streams that are worth at least ~$100)\r\n- Use this [UI tool](https://bulk-metadata-refresh-opensea.vercel.app/) to manually refresh the metadata on OpenSea from time to time","createdAt":"2023-08-28T19:02:48Z","labels":[],"number":671,"repository":"sablier-labs/lockup","state":"closed","title":"OpenSea image cache problem","type":"discussion","updatedAt":"2023-12-08T10:04:24Z","url":"https://github.com/sablier-labs/lockup/discussions/671"},{"author":"PaulRBerg","body":"An offshoot of https://github.com/sablierhq/v2-core/discussions/110:\r\n\r\nWhat if we implemented a simple allowlist of special accounts with permission to call `withdraw` on behalf of the recipient *of any stream*, transferring the funds to the recipient? The allowlist would be managed by a multisig.\r\n\r\n## Pros\r\n\r\n- **Foolproof for stuck users**. We could potentially rescue the funds for the recipient in case the tokens are sent to an address which cannot interact with the Sablier V2 protocol (e.g. a CEX address or a contract) and the sender is not able to claim on behalf of the recipient (e.g. he is unresponsive or lost access to his crypto wallet.\r\n- **Convenience**. We could offer this as a paid service to lazy users who were granted Sablier streams but who couldn't care less about learning how to set up MetaMask to claim from Sablier.\r\n- **Withdrawal automation**: We could potentially offer automate withdrawals at scale, programmatically, in exchange for a subscription fee.\r\n\r\n## Cons\r\n\r\n- If any of the rescuer wallet's private keys get leaked, they would be able to trigger withdrawals on behalf of any Sablier user.\r\n- Though not in a custodian fashion, this would give Sablier a little bit of financial control over the protocol, which would mean another topic to consider from a legal perspective.\r\n\r\n## My Take\r\n\r\nI personally think that the pros outweigh cons. The only real concern about this is the development cost.","createdAt":"2022-11-01T19:33:42Z","labels":[],"number":155,"repository":"sablier-labs/lockup","state":"closed","title":"Allowlist of Sablier \"rescuers\"","type":"discussion","updatedAt":"2023-12-08T10:01:42Z","url":"https://github.com/sablier-labs/lockup/discussions/155"},{"author":"PaulRBerg","body":"I've recently spoken with [Fjord](https://fjordfoundry.com/), who are looking to integrate Sablier to provide users with an automated, on-chain vesting service.\r\n\r\nThe topic of recipient cancellations was brought up during the call. They will create the streams from a contract, which has to be able to respond to cancellations, and so they will have to implement the [`onStreamCanceled`](https://docs.sablier.com/contracts/v2/guides/hooks#sender) hook.\r\n\r\nThen they asked: \"would it be possible to allow only the sender to cancel\"? I said no and explained that we implemented the protocol this way to give maximum flexibility to recipients, e.g., maybe they wish to deny a payment.\r\n\r\nBut is this feature really that useful for recipients? Recipients could simply not withdraw from those streams that they are not interested in. Also, we could add a feature at the UI level for hiding specific streams and/ or tokens.\r\n\r\nIt seems to me that this ability of the recipient to cancel does more harm than good.\r\n\r\nWDYT @andreivladbrg, @razgraf, @IaroslavMazur?","createdAt":"2023-10-16T11:41:16Z","labels":[],"number":709,"repository":"sablier-labs/lockup","state":"closed","title":"Why is the recipient allowed to cancel a stream?","type":"discussion","updatedAt":"2023-12-08T09:50:41Z","url":"https://github.com/sablier-labs/lockup/discussions/709"},{"author":"PaulRBerg","body":"From [BlockEnthusiast](https://twitter.com/BlockEnthusiast/status/1722364045213225255):\r\n\r\n> Would be great if it would visually represent the current balance held and the already streamed balance\r\n> \r\n> Else hard to really determine bid price without going to a block explorer and trying to sort out balances from the contract","createdAt":"2023-11-08T21:26:28Z","labels":[],"number":725,"repository":"sablier-labs/lockup","state":"open","title":"Display withdrawable amount in NFT SVG","type":"discussion","updatedAt":"2025-02-17T16:47:17Z","url":"https://github.com/sablier-labs/lockup/discussions/725"},{"author":"andreivladbrg","body":"As I've mentioned in [this discussion:](https://github.com/sablier-labs/v2-periphery/discussions/179)\r\n\r\n> I realized that if we have separate functions for the sender and for the recipient (implicitly for approved operators) in core, it would allow the recipients to use ERC721.approve and let the sender withdraw to any address for them. \r\n\r\nAt the moment if the sender is an approved operator it would still revert because the check is made in the same function:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/91887daff5872c7fa83fe3644b6f7582e9bffc0d/src/abstracts/SablierV2Lockup.sol#L251-L262\r\n\r\nWhat do you think? Should we have separate functions for withdraw? @PaulRBerg @razgraf ","createdAt":"2023-10-25T13:55:19Z","labels":[],"number":716,"repository":"sablier-labs/lockup","state":"closed","title":"Should we have different `withdraw` functions for the recipient and the sender","type":"discussion","updatedAt":"2023-11-02T16:40:20Z","url":"https://github.com/sablier-labs/lockup/discussions/716"},{"author":"PaulRBerg","body":"The lack of the ERC-20 asset in these events makes it impossible to build certain data queries on Dune, e.g. \"what is the volume of stablecoin withdrawals\".\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/8ca98d3ffad2dd75e0a705ffc0cd5e798acc8058/src/interfaces/ISablierV2Lockup.sol#L29-L35\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/8ca98d3ffad2dd75e0a705ffc0cd5e798acc8058/src/interfaces/ISablierV2Lockup.sol#L53","createdAt":"2023-10-08T15:24:10Z","labels":[],"number":701,"repository":"sablier-labs/lockup","state":"closed","title":"Include ERC-20 asset address in cancel and withdraw events","type":"discussion","updatedAt":"2023-10-26T14:34:33Z","url":"https://github.com/sablier-labs/lockup/discussions/701"},{"author":"smitrajput","body":"We referenced sabllier-v2's config files for our CI config, and noticed you didn't include fuzz files for coverage, and i assume you faced the same issue as us, of facing too much delay for running coverage for them on CI:\r\nhttps://github.com/sablier-labs/v2-core/blob/main/.github/workflows/ci.yml#L256\r\n\r\nWe were thinking of ways to cover fuzzed files in CI with runs = 1 in foundry.toml, but that takes forever too, were you able to find some way to do that in CI? or you just copy their unit variant in the non-fuzzed section of your files to be able to run coverage for them successfully? \r\n\r\nThe latter results in a lot of redundant test files, hence was wondering if you knew some way to do that","createdAt":"2023-10-01T12:46:04Z","labels":[],"number":698,"repository":"sablier-labs/lockup","state":"closed","title":"Including foundry fuzzed files for coverage, without duplicating tests and in reasonable time.","type":"discussion","updatedAt":"2023-10-16T11:33:20Z","url":"https://github.com/sablier-labs/lockup/discussions/698"},{"author":"razgraf","body":"Now that we have access to a solution that generates NFTs (`shell/generate-svg-panoply.sh`) for visual checkup and regression testing, I've coded a small HTML/JS script that helps organize them in a grid for quick review.\r\n\r\nYou can access the code in this [gist](https://gist.github.com/razgraf/5d6064f0be745764f019923bb668a0a3). To run it, simply paste it into a `panoply.html` file and open that file in your browser. Click on the input, select items from the `out-svg` folder and voila. I've purposely written it in vanilla javascript with an input selector rather than `fs` to make it as plug-n-play as possible.\r\n\r\n<img width=\"600\" alt=\"nft-gallery-96d6faf8baa6fbf690ea89d4252ea727\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/117021eb-3c49-45dd-bc67-25364ed17d5f\">\r\n","createdAt":"2023-05-30T14:07:17Z","labels":[],"number":520,"repository":"sablier-labs/lockup","state":"open","title":"Walkthrough: NFT panoply (review grid)","type":"discussion","updatedAt":"2023-09-23T14:06:33Z","url":"https://github.com/sablier-labs/lockup/discussions/520"},{"author":"viraj124","body":"Hi,\r\n\r\nIs there an example of a test or contract demonstrating this type of stream https://docs.sablier.com/concepts/protocol/stream-types#unlock-in-steps?","createdAt":"2023-09-19T15:35:14Z","labels":[],"number":690,"repository":"sablier-labs/lockup","state":"closed","title":"example of a test or a contract that demonstrates a stream that unlocks in steps?","type":"discussion","updatedAt":"2023-09-23T14:01:00Z","url":"https://github.com/sablier-labs/lockup/discussions/690"},{"author":"danielcrt","body":"I wrote 2 onchain tests that can be deployed and staked on [Ante Finance](https://docs.ante.finance/ante/getting-started/how-ante-works).\r\n1. Tests that Sablier TVL of USDC + WETH + DAI doesn't drop more than 90% over time since the time of deployment\r\nhttps://github.com/antefinance/ante-community-tests/pull/228\r\n\r\n2. Tests that Sablier admin will never set the protocol fee to more than `MAX_FEE` (10%). Doing that will cause all new streams to fail being created.\r\nhttps://github.com/antefinance/ante-community-tests/pull/229\r\n\r\nThis is a way Sablier can bet (stake) on its own security and gain more trust from users.","createdAt":"2023-09-17T09:57:20Z","labels":[],"number":689,"repository":"sablier-labs/lockup","state":"open","title":"Onchain tests used to gain protocol trust","type":"discussion","updatedAt":"2023-09-23T10:32:03Z","url":"https://github.com/sablier-labs/lockup/discussions/689"},{"author":"NIC619","body":"Hi @PaulRBerg ! Really appreciate your Random Foundry Tips series.\r\n\r\nI was wondering in the recent tip regarding trailing `src/` in remapping, under what circumstances will the problem manifest itself?\r\n\r\nDoes it happen when you have foundry and hardhat in the same repo? Can it be prevented by installing `foundry-hardhat`?\r\n\r\nhttps://twitter.com/PaulRBerg/status/1692245880584142978","createdAt":"2023-09-01T05:01:47Z","labels":[],"number":676,"repository":"sablier-labs/lockup","state":"closed","title":"Question about trailing `src/` in remapping","type":"discussion","updatedAt":"2023-09-23T14:00:11Z","url":"https://github.com/sablier-labs/lockup/discussions/676"},{"author":"PaulRBerg","body":"Questions from @smol-ninja:\r\n\r\n1. Can NFT transferability only be toggled by sender?\r\n2. When transferability is disabled, how should it be dealt in case of `withdrawMaxAndTransfer()`? This function transfers the NFT to a new recipient and is called by `Stream` owner.\r\n3. Should the default case be transfer enabled?","createdAt":"2023-08-26T09:01:03Z","labels":[],"number":669,"repository":"sablier-labs/lockup","state":"closed","title":"Questions on NFT transferability","type":"discussion","updatedAt":"2023-08-30T17:53:56Z","url":"https://github.com/sablier-labs/lockup/discussions/669"},{"author":"smol-ninja","body":"I have been working on [refactoring](https://github.com/sablier-labs/v2-core/issues/621) the test code by following the best practices for Branching Tree Technique (BTT) as explained in the presentation- [Testing Best Practices in Foundry](https://prberg.com/presentations/ethcc-2023/) by @PaulRBerg. The techniques aim at creating a tree structure that can explain test case scenarios even to a non-technical person. A simple example:\r\n```solidity\r\ncontract Integration_test {\r\n  function test_RevertWhen_Null() external {...}\r\n  \r\n  modifier whenNotNull() {...}\r\n  \r\n  function test_GetSegments() external whenNotNull {...}\r\n}\r\n```\r\ncan be represented by the following tree structure.\r\n```tree\r\n├── when the id references a null stream\r\n│  └── it should revert\r\n└── when the id does not reference a null stream\r\n   └── it should return the correct segments\r\n```\r\n\r\nThere are two keywords to specify the states: `When` for function parameters and `Given` for contract states. As in the above example, `Null` is a functional parameter condition represented by the `When` keyword. \r\n\r\nIn a more complicated scenario such as\r\n```solidity\r\nfunction test_RevertWhen_DelegateCalled {}\r\n\r\nfunction test_RevertWhen_AmountTooHigh() external whenNotDelegateCalled {}\r\n\r\nfunction test_RevertWhen_AssetNotFlashLoanable() external whenNotDelegateCalled whenAmountNotTooHigh {}\r\n```\r\nwhere `DelegateCalled` is technically not a contract state but a mode of execution, it becomes hard to categorize this into `When` and `Given`.\r\n\r\nIf we use `Given` for `DelegateCalled`, we can also use `RevertGiven` instead of `RevertWhen` for it but `RevertWhen` sounds friendlier as a function name while `Given` can be more appropriate as a modifier's name. (_Given this, Revert when_)\r\n\r\nIt, thus, can be refactored as the following: \r\n```solidity\r\nfunction test_RevertWhen_DelegateCalled {}\r\n\r\nfunction test_RevertWhen_AmountTooHigh() external givenNotDelegateCalled {}\r\n\r\nfunction test_RevertWhen_AssetNotFlashLoanable() external givenNotDelegateCalled givenAmountNotTooHigh {}\r\n```\r\nThis improves the readability of the tree structure in line with the naming convention used for function names, but brings in inconsistencies in the use of `Given` and `When` to specify states. Have a look at the below tree structure:\r\n\r\n```tree\r\n├── when delegate called\r\n│  └── it should revert\r\n└── given delegate not called\r\n│  └── when amount too high\r\n│     └── it should revert\r\n│  └── given amount not too high\r\n│     └── when asset not flash loanable\r\n│          └── it should revert\r\n│     └── when asset flash loanable\r\n│          └── it should not revert\r\n```\r\n\r\nThe goal of this discussion is to find the best approach for using English keywords to build a tree structure so that it can be automated with the naming conventions of the test functions.","createdAt":"2023-08-04T18:15:07Z","labels":[],"number":647,"repository":"sablier-labs/lockup","state":"closed","title":"Best practices for Branching Tree Technique (BTT)","type":"discussion","updatedAt":"2023-09-23T14:21:39Z","url":"https://github.com/sablier-labs/lockup/discussions/647"},{"author":"scorpion9979","body":"As the protocol moves closer to public release, it may be beneficial to include an \"Architecture\" section in the README. The intent behind this is to provide a bird's-eye view of the codebase to aid researchers, developers, and other community members in better understanding the structure and functioning of the protocol.\r\nA good inspiration for this could potentially be the architecture section provided in the [Uniswap V4 README](https://github.com/Uniswap/v4-core/blob/30d6c5f75d5b607afc0f3bdf87d31cc7288e02e8/README.md#architecture).","createdAt":"2023-06-14T23:20:02Z","labels":[],"number":551,"repository":"sablier-labs/lockup","state":"closed","title":"Add an \"Architecture\" Section to the README","type":"discussion","updatedAt":"2023-08-23T07:48:44Z","url":"https://github.com/sablier-labs/lockup/discussions/551"},{"author":"PaulRBerg","body":"As recommended by Cantina [here](https://github.com/cantinasec/review-sablier2/issues/20).\r\n\r\nMy thoughts:\r\n\r\n- Not sure where we could include this property - we may have to replace a part of the current design (ref: https://github.com/sablier-labs/v2-core/discussions/520)\r\n- A major difficulty would be having to clarify that this property stands for the time when the NFT was generated, and not to any intrinsic property of the stream itself (e.g., the time when the stream was created)\r\n- Including a raw Unix timestamp in the SVG would be (mostly) useless; to do it properly, we would need to turn the `block.timestamp` into a human-readable date using a library like Solady's [`DateTimeLib`](https://github.com/Vectorized/solady/blob/main/src/utils/DateTimeLib.sol)). Implementing this is non-trivial.\r\n\r\nGiven the problems above, I remain unconvinced about the value of including the generated time in the NFT SVG. We may not implement this feature any time soon, but I opened this issue to shine some light on the underlying issue and open up the conversation in case anyone comes up with a creative workaround.","createdAt":"2023-06-23T17:11:23Z","labels":[],"number":569,"repository":"sablier-labs/lockup","state":"closed","title":"Including the time when the NFT was generated in the SVG","type":"discussion","updatedAt":"2023-08-23T07:42:32Z","url":"https://github.com/sablier-labs/lockup/discussions/569"},{"author":"andreivladbrg","body":"In the latest npm packages release for `v2-core` and `v2-periphery` we addressed an [issue](https://github.com/sablier-labs/v2-core/issues/646) faced by our integrators when importing `@prb/math` in `v2-core` and `@prb/proxy` in `v2-periphery`.\r\n\r\nWe fixed it by removing `src` in the remappings file:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/456744002f62d0627f10b958d41937ed1e68d95e/remappings.txt#L2\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/7283580fadc2a7a1677b3dd53f3d76b0ff967fdd/remappings.txt#L2\r\n\r\nThe question I want to ask is: would it have been better if we had changed the `src` dir to `contracts`?\r\n\r\nOfc, the `foundry.toml` would need to be updated accordingly: `src = \"contracts\"`\r\n","createdAt":"2023-08-19T14:26:14Z","labels":[],"number":655,"repository":"sablier-labs/lockup","state":"closed","title":"Change `src` to `contracts`","type":"discussion","updatedAt":"2023-08-21T08:20:37Z","url":"https://github.com/sablier-labs/lockup/discussions/655"},{"author":"mds1","body":"The test architecture in this repo is very clean and well thought out. As I was reviewing it to extract some ideas and best practices, one thing that confused me is that the [`test/unit`](https://github.com/sablier-labs/v2-core/tree/main/test/unit) directory has very few unit tests.\r\n- It has some tests for `Adminable`, `Comptroller`, and `NFTDescriptor` tests\r\n- It has no tests for everything else in `src/`, and there's a lot there! The dynamic and linear lockup contracts, various abstract contracts, and libraries all have no unit tests.\r\n\r\nI was expecting the unit test folder to have at least `concrete/` unit tests and `.tree` files for everything in `src/`. Instead, it seems a lot of these instead are in the integration folder, but they still look like unit tests to me.\r\n\r\nThe line between unit and integration tests can certainly be blurry, and I'd be interested to here the definitions you used here / how you decided what was a unit vs. integrations. But it still feels like there is a lack of unit tests based on the current architecture, which threw me off a bit. Per @PaulRBerg's suggestion, I'm starting this discussion to better understand the rationale here and hopefully come away with some broader takeaways other projects can use.","createdAt":"2023-07-04T14:03:46Z","labels":[],"number":603,"repository":"sablier-labs/lockup","state":"closed","title":"Should there be more unit tests and fewer integration tests?","type":"discussion","updatedAt":"2023-08-10T14:38:48Z","url":"https://github.com/sablier-labs/lockup/discussions/603"},{"author":"mds1","body":"The `basic/` subfolder in test folders refers to what I've (thanks to dapptools) always called \"concrete\" tests. Concrete tests are your standard deterministic unit test that take no inputs and run the exact same test every time (in contrast to fuzz/property/invariant tests which are not deterministic).\r\n\r\nThe term concrete is commonly used in the context of symbolic execution. With symbolic execution program inputs are represented as generic symbols to test all execution paths, whereas with concrete execution inputs are fixed and test a specific path. You may have heard of [concolic testing](https://en.wikipedia.org/wiki/Concolic_testing), where the name \"concolic\" is derived from **conc**rete and symb**olic**\r\n\r\n\"Concrete\" feels like a clear, unambiguous term to refer to deterministic unit tests, whereas \"basic\" is more vague. I'd suggest renaming \"basic\" to \"concrete\" everywhere both to make the architecture in this repo more clear, and to help the ecosystem standardize around a useful terminology\r\n\r\nI know you've already gone through some audits and are likely deploying to production soon, so totally understand if you want to avoid a big rename since the codebase is likely largely frozen at this point. But still wanted to bring this up as a broader discussion and something to consider going forward.","createdAt":"2023-07-04T14:17:21Z","labels":[],"number":604,"repository":"sablier-labs/lockup","state":"closed","title":"Recommendation: Rename the `basic/` test folder to `concrete/`","type":"discussion","updatedAt":"2023-07-11T13:50:37Z","url":"https://github.com/sablier-labs/lockup/discussions/604"},{"author":"andreivladbrg","body":"One of the main motivation for launching our project on npm was to simplify the installation process of `v2-core` for integrators using the Hardhat environment.\r\n\r\nHowever, due to the [remappings](https://github.com/sablier-labs/v2-core/blob/main/remappings.txt) we've configured, this becomes impossible without installing extra plugins.\r\n\r\nFor instance, if you're looking to incorporate the contracts into your Hardhat project via `pnpm install @sablier/v2-core`, you would import and use them as follows:\r\n```solidity\r\nimport \"hardhat/console.sol\";\r\nimport \"@sablier/v2-core/src/SablierV2LockupLinear.sol\";\r\n\r\ncontract Example {\r\n    SablierV2LockupLinear internal sablier;\r\n\r\n    constructor(SablierV2LockupLinear _sablier) {\r\n        sablier = _sablier;\r\n    }\r\n\r\n    function foo() public {\r\n        console.log(\"The next stream id is: \", sablier.nextStreamId());\r\n    }\r\n}\r\n\r\n```\r\n\r\nThe code from above would revert due to [HH404](https://hardhat.org/hardhat-runner/docs/errors#HH404);\r\n![image](https://github.com/sablier-labs/v2-core/assets/99738872/0343923e-bf4f-4ded-9d07-44fee3c1ad5f)\r\n\r\nThis is because we're importing prb math from the following path:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/e6b705be300bbbb5824911152768390031bd2175/src/SablierV2LockupLinear.sol#L7\r\n\r\nBut the correct path for hardhat should be `@prb/math/src/UD60x18.sol\";`\r\n\r\nGiven Hardhat's lack of native support for remappings, such as:\r\n```\r\n@sablier/v2-core/=node_modules/@sablier/v2-core/src/\r\n@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\r\n@prb/math/=node_modules/@prb/math/src/\r\n```\r\nThere are two solutions for this: \r\n1. [hardhat-preprocessor ](https://book.getfoundry.sh/config/hardhat#instructions) - a more complex route\r\n2. [hardhat-foundry](https://hardhat.org/hardhat-runner/docs/advanced/hardhat-and-foundry) - a simpler approach and one recommended by Hardhat team \r\n\r\nThis problem manifests the same way in Truffle. However, I think it wouldn't be an issue for [Brownie](https://eth-brownie.readthedocs.io/en/stable/compile.html#compile-remap), which supports remapping.\r\n\r\nGiven this, I'm left wondering: aside from facilitating front-end integration via React, are there any other reasons to maintain the npm package?","createdAt":"2023-07-02T20:45:25Z","labels":[],"number":601,"repository":"sablier-labs/lockup","state":"closed","title":"Limited utility of NPM package for contract projects","type":"discussion","updatedAt":"2023-07-07T10:57:52Z","url":"https://github.com/sablier-labs/lockup/discussions/601"},{"author":"PaulRBerg","body":"The `SablierV2Pro` contract need to use [SD59x18](https://github.com/paulrberg/prb-math/blob/95b8fd8dfac7d42194e9e8bb48213e9a3b92f2a2/contracts/SD59x18.sol) because all quotients end up taking a value between 0 and 1, and that value is passed as a base to the `exp` function, which uses `log2` under the hood, which spits out a negative value when the input is smaller than 1.\r\n\r\nThe `SablierV2Linear` contract doesn't use the `exp` function though, so that's why we implemented the calculations in the `getWithdrawableAmount` function with [UD60x18](https://github.com/paulrberg/prb-math/blob/95b8fd8dfac7d42194e9e8bb48213e9a3b92f2a2/contracts/UD60x18.sol).\r\n\r\nQuestion is: should we switch to use `SD59x18` everywhere?\r\n\r\nThe main pro would be consistency. The main con would be the slightly higher gas of working with signed numbers.","createdAt":"2022-06-16T08:46:16Z","labels":[],"number":58,"repository":"sablier-labs/lockup","state":"closed","title":"Should we use SD59x18 in SablierV2Linear, too?","type":"discussion","updatedAt":"2023-06-30T11:12:24Z","url":"https://github.com/sablier-labs/lockup/discussions/58"},{"author":"PaulRBerg","body":"It looks quite verbose when there are many segments.\r\n\r\n<img width=\"1728\" alt=\"Screen Shot 2022-06-07 at 5 07 48 PM\" src=\"https://user-images.githubusercontent.com/8782666/172401415-a1d1c370-6cca-4139-b50d-099c24c7646e.png\">\r\n","createdAt":"2022-06-07T14:09:19Z","labels":[],"number":21,"repository":"sablier-labs/lockup","state":"closed","title":"Should we emit the segment data in the event arguments in SablierV2Pro?","type":"discussion","updatedAt":"2023-06-30T11:09:18Z","url":"https://github.com/sablier-labs/lockup/discussions/21"},{"author":"razgraf","body":"Our protocol allows for streaming of ERC20 tokens. While this reduces complexity to only having to handle one type of asset, we lack the possibility to stream chain native assets, such as ETH (on Ethereum), MATIC (on Polygon) or most recently requested RON (on Ronin).\r\n\r\nWith v1 because we don't have `onBehalf/from` variants for our methods it would be hard to achieve wrap+create, unwrap+withdraw. With v2 tho, this will be possible with a custom router that has payable functions and chains these transactions.","createdAt":"2022-06-10T12:33:25Z","labels":[],"number":41,"repository":"sablier-labs/lockup","state":"closed","title":"Streaming of native chain tokens","type":"discussion","updatedAt":"2023-06-30T11:04:55Z","url":"https://github.com/sablier-labs/lockup/discussions/41"},{"author":"PaulRBerg","body":"## Context\r\n\r\nIn #90, I have completely refactored our test files to more accurately reflect the testing branches written in the `*.tree` file. This discussion delves into the rationale that went into the refactor and how I arrived at the final version used in the PR.\r\n\r\n## Problem\r\n\r\nThe testing branches are not mirrored exactly in the testing files.\r\n\r\n## Solutions\r\n\r\nGiven this testing tree:\r\n\r\n```tree\r\nfunction.t.sol\r\n├── when foo\r\n│  └── it should revert\r\n└── when not foo\r\n   ├── when bar\r\n   │  └── it should revert\r\n   └── when not bar\r\n      └── it should work\r\n```\r\n\r\n### V1\r\n\r\nYou can see a full example in this GitHub gist: [create-v1.t.sol](https://gist.github.com/paulrberg/7c94faec40a18f5778b71824fe7ea44a).\r\n\r\n```solidity\r\nSablierV2Linear__Function__Foo {}\r\n\r\nSablierV2Linear__Function__NotFoo__Bar {}\r\n\r\nSablierV2Linear__Function__NotFoo__NotBar {}\r\n```\r\n\r\n### V2\r\n\r\nYou can see a full example in this GitHub gist: [create-v2.t.sol](https://gist.github.com/paulrberg/d49bf9d2e078de83c7162e770ae0cdef).\r\n\r\n```solidity\r\nSablierV2Linear__Function {\r\n    function testCannot__Foo() external {}\r\n    \r\n    function testCannot__NotFoo__Bar() external {}\r\n    \r\n    function testCannot__NotFoo__NotBar() external {}\r\n}\r\n```\r\n\r\n### V3\r\n\r\nYou can see a full example in this GitHub gist: [create-v3.t.sol](https://gist.github.com/paulrberg/0c95566e5ad85bc680542c00a3ad5042).\r\n\r\n```solidity\r\nSablierV2Linear__Function__Foo {}\r\n\r\ncontract NotFoo {}\r\n\r\nSablierV2Linear__Function__Bar is NotFoo {}\r\n\r\ncontract NotBar {}\r\n\r\nSablierV2Linear__Function is NotFoo, NotBar {}\r\n```\r\n\r\n## My Decision\r\n\r\nI have ultimately chosen V3, because it was the only that:\r\n\r\n1. Scales\r\n2. Remains readable at scale\r\n \r\nV1 did not scale, because Forge enforces a limit on how large a contract name can be (`os error 63`), and it also wasn't very readable at scale, due to the long contract names. Whereas V2 scaled, in that Foundry could run the tests even with very long function names, but again the readability wasn't great.\r\n\r\nThe only slight problem with V3 is that in case where the tree branches in multiple directions (a good example is [getWithdrawableAmount.tree](https://github.com/sablierhq/v2-core/blob/01dd01087ca2702d29c7956cf31128a233931b42/test/unit/sablier-v2-linear/get-withdrawable-amount/getWithdrawableAmount.tree)), the contract names sort of have to be written using the V1 methodology, lest we get duplicates. But this shouldn't be a problem because usually the branching in one direction stops earlier than the bottom-most branch.\r\n\r\n## Screenshots\r\n\r\n### OS Error 63\r\n\r\n<img width=\"1728\" alt=\"os-error-63\" src=\"https://user-images.githubusercontent.com/8782666/175808452-d50beae3-86a3-4583-b838-d58c735d0f27.png\">","createdAt":"2022-06-26T09:48:45Z","labels":[],"number":91,"repository":"sablier-labs/lockup","state":"closed","title":"Testing branching rationale","type":"discussion","updatedAt":"2023-06-30T10:41:43Z","url":"https://github.com/sablier-labs/lockup/discussions/91"},{"author":"andreivladbrg","body":"In this PR https://github.com/sablierhq/v2-core/pull/271 I suggested to rename the [ISablierV2](https://github.com/sablierhq/v2-core/blob/prb/lockup/src/interfaces/ISablierV2.sol) interface to `ISablierV2Administrative` with the idea that in the future we will have multiple products (LockUp, Payroll) and would be better to create then a common interface, `ISablierV2`, for both of them.\r\n\r\nThe options I suggest are: \r\n- `ISablierV2Administrative`\r\n- `ISablierV2AdminActions`\r\n\r\nWhat do you think, do you have better ideas?","createdAt":"2023-01-23T14:04:58Z","labels":[],"number":286,"repository":"sablier-labs/lockup","state":"closed","title":"Rename the `ISablierV2` interface","type":"discussion","updatedAt":"2023-06-30T10:38:57Z","url":"https://github.com/sablier-labs/lockup/discussions/286"},{"author":"PaulRBerg","body":"Transferring a stream NFT is a potentially dangerous operation because the user may be unaware that doing so means forsaking all the streamed funds that have not been withdrawn. The user has to remember to withdraw manually before transferring the NFT.\r\n\r\nThey might, for instance, assume that the funds had already been streamed to their wallet address and that the NFT was just an SVG representation.\r\n\r\nTo prevent this, we could implement a `withdrawMaxAndTransfer` functionality in the `SablierV2Lockup` contract, and default to using this function in the UI.","createdAt":"2023-06-21T19:08:26Z","labels":[],"number":558,"repository":"sablier-labs/lockup","state":"closed","title":"Provide \"withdrawMaxAndTransfer\" functionality","type":"discussion","updatedAt":"2023-06-25T09:47:10Z","url":"https://github.com/sablier-labs/lockup/discussions/558"},{"author":"IaroslavMazur","body":"As of now, only the structs that are known to later be initialized and kept in contract `storage` have the information about how much memory (slots-wise) they occupy. I suggest using the term \"word\"/\"EVM word\" (instead of \"slot\") and having this information for all of the structs in `DataTypes.sol`.\r\n\r\nThe advantages of this approach are:\r\n1. the increased code readability and\r\n2. the removed burden of having to have the knowledge of the specific uses of the structs declared in `DataTypes.sol`, which increases the coupling between the declarations and the definitions of the structs (i.e. the exact opposite of the motivation for the existence of `DataTypes.sol`).","createdAt":"2023-06-16T14:57:58Z","labels":[],"number":552,"repository":"sablier-labs/lockup","state":"closed","title":"Uniform markups for the memory requirements of structs declared in DataTypes.sol","type":"discussion","updatedAt":"2023-06-25T09:46:47Z","url":"https://github.com/sablier-labs/lockup/discussions/552"},{"author":"PaulRBerg","body":"See [ERC-4906](https://eips.ethereum.org/EIPS/eip-4906).\r\n\r\nContext:\r\n\r\n<img width=\"1284\" alt=\"Screenshot 2023-06-12 at 11 27 25 PM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/ec7b57e9-7b69-42d7-a018-5ad31689ed97\">\r\n","createdAt":"2023-06-12T20:30:55Z","labels":[],"number":545,"repository":"sablier-labs/lockup","state":"closed","title":"Emitting ERC-4096 events to update the NFT metadata","type":"discussion","updatedAt":"2023-06-30T11:02:05Z","url":"https://github.com/sablier-labs/lockup/discussions/545"},{"author":"IaroslavMazur","body":"The current way of visually representing the `STREAMING` and `DEPLETED` is confusing to the user, because the fluidity of the matter inside the hourglass (representing a Stream) is visually incorrect (relative to the 2 Stream states): instead of flowing, in its entirety, to the bottom half of the hourglass, the matter seems to be evaporating/disappearing from inside the hourglass as the time goes by (`STREAMING` -> `DEPLETED`).\r\n\r\nHere are the referenced images:\r\n![image](https://github.com/sablier-labs/v2-core/assets/22785348/8c3f29b0-b3ee-4b9f-8565-2393106dfff3)\r\n","createdAt":"2023-06-08T12:18:11Z","labels":[],"number":544,"repository":"sablier-labs/lockup","state":"closed","title":"Visually incorrect relative representation of the `STREAMING` and `DEPLETED` hourglasses","type":"discussion","updatedAt":"2023-08-23T07:42:50Z","url":"https://github.com/sablier-labs/lockup/discussions/544"},{"author":"PaulRBerg","body":"One of the suggestions left by Rahul Saxena in his audit report was to loosen the deposit amount requirement in `_checkSegments`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/main/src/libraries/Helpers.sol#L209\r\n\r\nThe idea is to handle the user inputs more gracefully by not requiring the deposit amount to be exactly equal to the sum of the segment amounts.\r\n\r\nIn practice, there are two ways to implement this:\r\n\r\n1. Transfer any excess funds to the funder (in the create transaction)\r\n2. Store the excess in the stream struct, and include it in the calcuations in `refundableAmountOf`\r\n\r\nThe first approach is obviously simpler, since it doesn't break any current protocol invariants and it doesn't interfere with the lifecycle of the stream.\r\n\r\nWhat do you guys think about this proposal? Cc @razgraf, @andreivladbrg.\r\n\r\nI'm personally in favor of loosening this requirement, since getting the deposit amount to exactly match the segment amounts sum is not easy. I mean, just look at how convoluted the logic in `Fuzzers.t.sol` is:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/main/test/utils/Fuzzers.sol","createdAt":"2023-04-19T06:45:03Z","labels":[],"number":442,"repository":"sablier-labs/lockup","state":"closed","title":"Loosen deposit amount requirement in `_checkSegments`","type":"discussion","updatedAt":"2023-06-19T16:28:37Z","url":"https://github.com/sablier-labs/lockup/discussions/442"},{"author":"PaulRBerg","body":"I've recently noticed the \"builder\" utilities in Permit2, and I like the idea a lot:\r\n\r\n- [`AddressBuilder`](https://github.com/Uniswap/permit2/blob/bbbc92f895049ca45c4b25a450f9d3e907659284/test/utils/AddressBuilder.sol)\r\n- [`AmountBuilder`](https://github.com/Uniswap/permit2/blob/bbbc92f895049ca45c4b25a450f9d3e907659284/test/utils/AmountBuilder.sol)\r\n- [`StructBuilder`](https://github.com/Uniswap/permit2/blob/bbbc92f895049ca45c4b25a450f9d3e907659284/test/utils/StructBuilder.sol)\r\n\r\nWe should consider whether we can offer something similar for creating, managing, and testing streams.","createdAt":"2023-05-19T09:06:33Z","labels":[],"number":502,"repository":"sablier-labs/lockup","state":"open","title":"Provide more testing utilities","type":"discussion","updatedAt":"2023-06-01T13:26:50Z","url":"https://github.com/sablier-labs/lockup/discussions/502"},{"author":"PaulRBerg","body":"Scenario:\r\n\r\n- We make a change in `src`\r\n- We run the tests locally, and we see that they pass\r\n- We make a PR\r\n- The tests fail (specifically the `test-utils` job fails) because of the [`Precompiles` tests](https://github.com/sablier-labs/v2-core/blob/main/test/utils/Precompiles.t.sol)\r\n\r\nTo address this issue in a scalable way, we need an automated solution. But for now, I wrote these commands for quickly copy-pasting the bytecodes from the `out-optimized` directory\r\n\r\n```bash\r\n$ cat out-optimized/SablierV2Comptroller.sol/SablierV2Comptroller.json | jq -r '.bytecode.object' | pbcopy\r\n$ cat out-optimized/SablierV2LockupDynamic.sol/SablierV2LockupDynamic.json | jq -r '.bytecode.object' | pbcopy\r\n$ cat out-optimized/SablierV2LockupLinear.sol/SablierV2LockupLinear.json | jq -r '.bytecode.object' | pbcopy\r\n$ cat out-optimized/SablierV2NFTDescriptor.sol/SablierV2NFTDescriptor.json | jq -r '.bytecode.object' | pbcopy\r\n```","createdAt":"2023-05-30T16:39:44Z","labels":[],"number":523,"repository":"sablier-labs/lockup","state":"closed","title":"Commands for copy-pasting the bytecodes from the `out-optimized` directory","type":"discussion","updatedAt":"2024-06-28T16:45:07Z","url":"https://github.com/sablier-labs/lockup/discussions/523"},{"author":"PaulRBerg","body":"A random idea just came to me.\r\n\r\nWhat if we merged the \"unit\" and \"fuzz\" tests under a new umbrella category \"integration\"?\r\n\r\nI know we used this name before, and we ended up separating them because we couldn't run them differently in CI. But that was before we started using the [\"test_\" and \"testFuzz\"](https://twitter.com/PaulRBerg/status/1616068157088714765) naming convention.\r\n\r\nThe current tests are not actually and rightfully \"unit\", as per my explanation [here](https://twitter.com/PaulRBerg/status/1347884079421812737).","createdAt":"2023-05-05T09:17:29Z","labels":[],"number":468,"repository":"sablier-labs/lockup","state":"closed","title":"Merging the \"unit\" and \"fuzz\" tests under a new umbrella category \"integration\"","type":"discussion","updatedAt":"2023-05-24T14:10:55Z","url":"https://github.com/sablier-labs/lockup/discussions/468"},{"author":"PaulRBerg","body":"The version is currently set to `1.0.0`, but I'm not sure this is good. Might it be better to have the Node.js version match the protocol release (i.e. `2.0.0`)?\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/11a57870cf603895b5d70a950fead68651d35e2b/package.json#L5","createdAt":"2023-05-09T16:26:13Z","labels":[],"number":476,"repository":"sablier-labs/lockup","state":"closed","title":"What version should we use in `package.json`?","type":"discussion","updatedAt":"2023-05-26T14:12:18Z","url":"https://github.com/sablier-labs/lockup/discussions/476"},{"author":"PaulRBerg","body":"This idea just came to me - what if we split `DataTypes.sol` into multiple files?\r\n\r\n- `types/Generics.sol`\r\n- `types/Lockup.sol`\r\n- `types/LockupDynamic.sol`\r\n- `types/LockupLinear.sol`\r\n\r\nThis design is (i) more specific, (ii) less repetitive, and (ii) more robust in the long term because the `DataTypes.sol` file would not get cluttered with increasingly more types.","createdAt":"2023-05-15T10:54:11Z","labels":[],"number":488,"repository":"sablier-labs/lockup","state":"closed","title":"Split `DataTypes.sol` in separate files","type":"discussion","updatedAt":"2023-05-19T17:22:56Z","url":"https://github.com/sablier-labs/lockup/discussions/488"},{"author":"razgraf","body":"Some questions and feedback for the current state of the contracts as of [#2de2f40](https://github.com/sablierhq/v2-core/commit/d465399f50e89cbd8ece5a83b8d71571fd1b451d).\r\n\r\n### SablierV2Adminable\r\n\r\n**→ transferAdmin**\r\n\r\nSimilar to an optimization made in prb-proxy I suggest getting rid of the oldAdmin placeholder. The transfer method can only be accessed by msg.sender which is in this situation the old admin. No need to use that extra contextual variable.\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/d7f46c1212ebf9e56b93dfa1acec910b0193e0e9/src/abstracts/SablierV2Adminable.sol#L34-L42\r\n\r\n### SablierV2Lockup \r\n\r\n**→ nftDescriptor**\r\n\r\nThe logic of having a separate contract for the descriptor was (aside from separation of concerns and freezing purposes) to be able to fix visual bugs or update it later. I see that we're storing the descriptor address in an immutable value with no possibility of updating it later on. I suggest we implement a setter for this value.\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/d7f46c1212ebf9e56b93dfa1acec910b0193e0e9/src/abstracts/SablierV2Lockup.sol#L27\r\n\r\n**→ withdrawMultiple**\r\n\r\nThe permission schema for \"who can withdraw\" (from an item) is (a) a recipient, (b) an authorized person or (c) the sender, as long as the withdraw is directed to the current recipient. (C) is very smart as it allows the sender to pay for the transaction, thus relieving the recipient from that cost.\r\n\r\nThe \"multiple\" version unfortunately limits this ability to just the recipient. Some notes:\r\nI think the name of the function is a bit misleading in the sense that withdrawMultiple != x * withdraw .\r\nWe could use structs for this one, if gas costs allow it (as in a struct containing {streamId, to, amount} ) mainly for consistency - a nice side effect: it would unlock the ability to target separate account (separate to)\r\n\r\n**→ maxFee**\r\n\r\nI see that we're using the same MAX_FEE value for both broker fees and protocol fees. This again is a good place to either split the two or make sure we explain in the docs that the actual maximum fee you could pay from your principal is 2 * MAX_FEE (broker + protocol).\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/d7f46c1212ebf9e56b93dfa1acec910b0193e0e9/src/libraries/Helpers.sol#L29-L40\r\n\r\n### SablierV2Config, SablierV2LockupLinear, SablierV2Comptroller and SablierV2NftDescriptor\r\n\r\nThese look good and I haven't found any issues with them (neither logical nor subjective). Complex actions will most of the times benefit from a check against the initial deposit amount, so \"extracting\" money from outside of a stream seems impossible at the moment, which is a good thing.\r\n\r\n### SablierV2LockupPro, FlashLoans\r\n\r\nReview on-going.","createdAt":"2023-03-12T21:57:54Z","labels":[],"number":362,"repository":"sablier-labs/lockup","state":"closed","title":"Codebase feedback and questions (Gabriel, March '23)","type":"discussion","updatedAt":"2023-05-14T15:56:53Z","url":"https://github.com/sablier-labs/lockup/discussions/362"},{"author":"PaulRBerg","body":"As pointed out by @andreivladbrg in https://github.com/sablierhq/v2-core/pull/467#issuecomment-1545396914, there is a name collision between the `isCancelable` getter and the `isCancelable` storage variable (a field in the `LockupLinear.Stream` and `LockupDynamic.Stream` struct).\r\n\r\n- The getter returns `false` when the stream is `SETTLED`\r\n- However, the storage variable is still `true` in the struct returned by the `getStream` getter when the stream is `SETTLED`\r\n\r\nThus, we should consider finding a new name for the `isCancelable` storage variable.\r\n\r\nIf we don't find a solution ourselves, we should ask our auditors for guidance.","createdAt":"2023-05-12T11:04:30Z","labels":[],"number":486,"repository":"sablier-labs/lockup","state":"closed","title":"Name collision between the `isCancelable` getter and the storage variable","type":"discussion","updatedAt":"2023-05-23T11:34:21Z","url":"https://github.com/sablier-labs/lockup/discussions/486"},{"author":"PaulRBerg","body":"While writing the [docs](https://sablier-v2-docs.vercel.app/contracts/v2/guides/create-stream/linear), I realized the UX of creating streams is tarnished by the requirement to import several data types from the `@sablier/v2-core` package. The `broker` parameter is particularly problematic because, as a struct, it occupies quite a bit of screen space. I expect many users will prefer to leave it uninitialized (i.e. set zero values for the broker address and broker fee).\r\n\r\nIt'd be nice to offer a broker-free overload for each of the create functions:\r\n\r\n- `createWithDeltas`\r\n- `createWithDurations`\r\n- `createWithMilestones`\r\n- `createWithRange`","createdAt":"2023-05-10T13:52:49Z","labels":[],"number":478,"repository":"sablier-labs/lockup","state":"closed","title":"Provide an overload for the create functions that doesn't have a `broker` parameter","type":"discussion","updatedAt":"2023-05-11T18:42:43Z","url":"https://github.com/sablier-labs/lockup/discussions/478"},{"author":"maxdesalle","body":"Some minor suggestions and questions that came to mind while going through the contracts:\r\n- Shouldn't we replace the [\"V2\" in the ascii art](https://github.com/sablierhq/v2-core/blob/939319f3f4004ca56fb0e63d4acd3235ec2a174c/src/SablierV2Comptroller.sol#L13) with \"V2.0\" given there will be new versions of the protocol?\r\n- Is it normal that [the license for the SablierV2NftDescriptor.sol contract](https://github.com/sablierhq/v2-core/blob/939319f3f4004ca56fb0e63d4acd3235ec2a174c/src/SablierV2NftDescriptor.sol#L1) is unlicensed, as opposed to licensed with the BUSL-1.1? [Same for the interface contracts](https://github.com/sablierhq/v2-core/blob/939319f3f4004ca56fb0e63d4acd3235ec2a174c/src/interfaces/ISablierV2Lockup.sol#L1), they are all licensed under the GPL.\r\n- Very minor thing, but it seems like there is [unnecessary spacing here](https://github.com/sablierhq/v2-core/blob/939319f3f4004ca56fb0e63d4acd3235ec2a174c/src/interfaces/ISablierV2Comptroller.sol#L62) (and in the below function descriptions too).\r\n- Why is there [a limit on the fee](https://github.com/sablierhq/v2-core/blob/aaceec49eb9ee46a0d83b1308289032e8a28da22/src/interfaces/ISablierV2LockupLinear.sol#L104) frontends can charge?","createdAt":"2023-03-12T21:33:56Z","labels":[],"number":361,"repository":"sablier-labs/lockup","state":"closed","title":"Codebase feedback and questions (Max, March '23)","type":"discussion","updatedAt":"2023-04-13T19:25:32Z","url":"https://github.com/sablier-labs/lockup/discussions/361"},{"author":"andreivladbrg","body":"While I was making the change from `uint256` to `uint128` for the `totalAmount` and `withdrawnAmount` variables,\r\nit dawned on me that the only reason we use `SD59x18` in the `SablierV2LockupDynamic` contract is to allow a negative exponent. \r\n\r\nIMO it is unnecessary to use `SD59x18` because it complicates things with the all conversions we have to make. \r\n\r\nGiven that we use the `pow` function only here:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/8bd57ebb31fddf6ef262477e5a378027db8b85d8/src/SablierV2LockupDynamic.sol#L338\r\n\r\nWhere:  $elapsedTimePercentage \\in R+ , \\forall currentSegmentExponent  => multiplier \\ge 0$ \r\n\r\nMy proposal is to either add a function in our contract either add in the PRBMath library called `powi` for the `UD60x18` type.\r\n\r\n```solidity\r\n/// @param x The base as an UD60x18 number.\r\n/// @param y The exponent as an int256.\r\n/// @return result The result as an UD60x18 number.\r\nfunction powi(UD60x18 x, int256 y) external returns (UD60x18 result);\r\n```\r\nThis may also solve this issue https://github.com/sablierhq/v2-core/issues/178.","createdAt":"2022-12-01T13:12:46Z","labels":[],"number":181,"repository":"sablier-labs/lockup","state":"closed","title":"Use `UD60x18` in the Dynamic contract","type":"discussion","updatedAt":"2023-03-27T14:33:28Z","url":"https://github.com/sablier-labs/lockup/discussions/181"},{"author":"PaulRBerg","body":"@andreivladbrg - WDYT about this?","createdAt":"2023-03-15T08:08:01Z","labels":[],"number":370,"repository":"sablier-labs/lockup","state":"closed","title":"Renaming `SablierV2Config` to `SablierV2Base`","type":"discussion","updatedAt":"2023-03-20T18:38:43Z","url":"https://github.com/sablier-labs/lockup/discussions/370"},{"author":"PaulRBerg","body":"I know we've beaten this topic to death, but I keep getting the same feedback in all Sablier V2 demos I make: that the name of the `SablierV2LockupPro` contract (and the associated labels in the frontend) is confusing.\r\n\r\nIn business, \"pro\" is typically associated with a premium product with a cost. But that is not the case here; quite the contrary! `SablierV2LockupPro` is an open, permissionless smart contract that can create non-linear streams for anyone in the world with an Internet connection and an Ethereum wallet.\r\n\r\nWhat would you guys say about the following alternatives (I have sourced some of these suggestions from ChatGPT):\r\n\r\n- `LockupNonLinear`\r\n- `LockupCurve`\r\n- `LockupCustom`\r\n- `LockupDynamic`\r\n- `LockupFlex`\r\n\r\nI don't like any of these better than `Pro`, TBH. It should be fine to keep using `Pro` for the contracts as long as only smart contract devs know about this term. But what we should do, at a minimum, is to abstract away the word \"pro\" in the frontend.","createdAt":"2023-03-15T10:27:49Z","labels":[],"number":371,"repository":"sablier-labs/lockup","state":"closed","title":"Should we rename `SablierV2LockupPro`?","type":"discussion","updatedAt":"2023-03-20T18:38:27Z","url":"https://github.com/sablier-labs/lockup/discussions/371"},{"author":"andreivladbrg","body":"In the last [PR](https://github.com/sablierhq/v2-core/pull/366), I suggested removing the `initialNFTDescriptor` from the constructor arguments because we implemented a setter function. This way, we can reduce some code in multiple places such as source code, scripts, and CI deployments.\r\n\r\nThe same think can be done for `comptroller`.\r\n\r\n What do you think about this idea?","createdAt":"2023-03-14T10:14:48Z","labels":[],"number":368,"repository":"sablier-labs/lockup","state":"closed","title":"Remove constructor arguments","type":"discussion","updatedAt":"2023-03-17T17:22:45Z","url":"https://github.com/sablier-labs/lockup/discussions/368"},{"author":"PaulRBerg","body":"In a recent internal discussion on Slack, @maxdesalle was confused about what exactly \"callbacks\" mean in the context of Sablier V2:\r\n\r\n<img width=\"744\" alt=\"Screenshot 2023-03-13 at 12 00 55 PM\" src=\"https://user-images.githubusercontent.com/8782666/224669227-7ef69ae0-751f-4db7-aa42-77320f3441e6.png\">\r\n\r\n@andreivladbrg and I have been using the terms \"hooks\" and \"callbacks\" interchangeably. These terms refer to our V2 contracts' capacity to notify the senders and the recipients of streams when the other party makes a move (cancellation, renouncement, or withdrawal). For the callback to be triggered, the sender and the recipient must be a contract that implements one of the two following interfaces:\r\n\r\n- [`ISablierV2LockupRecipient`](https://github.com/sablierhq/v2-core/blob/d7f46c1212ebf9e56b93dfa1acec910b0193e0e9/src/interfaces/hooks/ISablierV2LockupRecipient.sol)\r\n- [`ISablierV2LockupSender`](https://github.com/sablierhq/v2-core/blob/d7f46c1212ebf9e56b93dfa1acec910b0193e0e9/src/interfaces/hooks/ISablierV2LockupSender.sol)\r\n\r\nThe question is: should we rename the [`hooks`](https://github.com/sablierhq/v2-core/tree/d7f46c1212ebf9e56b93dfa1acec910b0193e0e9/src/interfaces/hooks) directory to `callbacks`? Alternatively, should we keep `hooks` but never refer to them as callbacks in our public outreach (marketing, documentation website, etc.)?\r\n\r\nBoth sound okay, but I see the value in having just one way we refer to this functionality.\r\n\r\nRelated:\r\n\r\n- https://github.com/sablierhq/v2-core/discussions/157\r\n- https://github.com/sablierhq/v2-core/issues/164","createdAt":"2023-03-13T10:06:26Z","labels":[],"number":363,"repository":"sablier-labs/lockup","state":"closed","title":"Refer to \"hooks\" as \"callbacks\"?","type":"discussion","updatedAt":"2023-03-17T11:16:41Z","url":"https://github.com/sablier-labs/lockup/discussions/363"},{"author":"andreivladbrg","body":"As we discussed on the call we should add an address argument to both the linear and pro contracts that will be passed in the constructor. This contract will implement a `tokenURI` function to produce the NFT-SVG from the stream values.\r\n\r\nThe primary reason behind this proposal is to close the `v2-core` repository and pass it to auditors. Furthermore, the logic for the SVG is quite voluminous, and the core repository is already a large codebase.\r\n\r\nHow should we name those interfaces? My current suggestion is to use something like:\r\n- ISablierV2LinearSvg and ISablierV2ProSvg\r\n- ISablierV2LinearNftBuilder and ISablierV2ProNftBuilder\r\n- ISablierV2LinearNftDescriptor and ISablierV2ProNftDescriptor\r\n\r\nUniswap has used the \"[descriptor](https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/INonfungibleTokenPositionDescriptor.sol)\" keyword. Do you have any other suggestions?","createdAt":"2023-02-23T09:06:48Z","labels":[],"number":348,"repository":"sablier-labs/lockup","state":"closed","title":"Token-URI interfaces","type":"discussion","updatedAt":"2023-03-17T11:17:13Z","url":"https://github.com/sablier-labs/lockup/discussions/348"},{"author":"PaulRBerg","body":"There would be a few benefits:\r\n\r\n1. Reduced gas cost (due to there being one if statement fewer)\r\n2. Easier to maintain the tests (due to there being one testing branch fewer)\r\n\r\nI can't think of any major downside. ","createdAt":"2022-06-14T11:59:34Z","labels":[],"number":50,"repository":"sablier-labs/lockup","state":"closed","title":"Should we just not revert when the array is empty in `withdrawMultiple`?","type":"discussion","updatedAt":"2023-03-17T11:17:19Z","url":"https://github.com/sablier-labs/lockup/discussions/50"},{"author":"PaulRBerg","body":"A frequent feature request we frequently receive from users is the ability to \"edit\" or \"top up\" an ongoing stream. Oftentimes, users don't know exactly what they want when they make this feature request - some people mean to change the payment rate per second while keeping the deposit amount intact, while others refer to the ability to edit certain lockup-specific properties like the total amount, end time, etc. It is the latter use case that I will target with this discussion.\r\n\r\nThere are multiple ways to implement this functionality. One way is to add an `edit` function that literally updates the properties of an going stream struct. However, this would be difficult to implement, and it would introduce new security assumptions in the protocol, which seem unnecessary in light of the other alternatives.\r\n\r\nAnother way is to add a `cancelAndCreate` function in a PRBProxy-backed target contract. Note that this has to be PRBProxy because the `msg.sender` would have to be PRBProxy itself, otherwise the stream couldn't be cancelled.\r\n\r\nYet another way would be to implement a `cancelAndCreate` function (or functions) in the core contracts themselves, which would simply call the `cancel` and the `create` function(s) one after each other.\r\n\r\nFinally, we could also just abstract this at the frontend level, though this would mean having the user sign two transactions (pre Account Abstraction, at least).","createdAt":"2023-02-09T15:10:23Z","labels":[],"number":331,"repository":"sablier-labs/lockup","state":"closed","title":"`cancelAndCreate` functions","type":"discussion","updatedAt":"2023-03-17T11:17:31Z","url":"https://github.com/sablier-labs/lockup/discussions/331"},{"author":"PaulRBerg","body":"## Description\r\n\r\nI think that we all agree that making the protocol upgradeable would be too much of a liability for us. It would basically make us custodians.\r\n\r\nIt just so happens that I have recently been involved in a [Twitter discussion](https://twitter.com/adamscochran/status/1586732575992709121) about this very topic with Adam Cochran, who made this point:\r\n\r\n> I’m actually suggesting upgradable contracts are dumb. Hard code versions and let people migrate between.\r\n\r\nI think that this is a known pattern in the industry but I can't recall off the top of my head how it's called. Anyway, the idea is the following:\r\n\r\n1. We build the protocol in such a way that it has a \"migrate\" function that basically transfers a stream from the `_streams` mapping to another v2.x Sablier contract. The transfer would basically delete the stream in the `v2.n` contract and re-create the stream in the `v2.(n+1)` contract, all while not making any claim of funds for either the sender or the recipient.\r\n2. We add a state variable `nextSablierV2Linear` of type `address` that is initially set to zero but which can be subsequently modified by governance. This is the future address of the v2.x Sablier contract.\r\n\r\n## Pros\r\n\r\nI personally find this model great, because:\r\n\r\n1. It gives us flexibility to keep developing v2.x in a proper, logical way.\r\n2. It doesn't make us custodians in any way whatsoever.\r\n3. It doesn't coerce users into accepting an upgrade of the contract. It's up to them to decide if they want to migrate.\r\n\r\n## Cons\r\n\r\n1. Added development costs (and a bit of added complexity in the contracts themselves).\r\n2. Huge maintenance costs at the front-end level. We would have to maintain the front-end for every `v2.x` release, *and* for every migration between them.","createdAt":"2022-11-01T21:34:46Z","labels":[],"number":156,"repository":"sablier-labs/lockup","state":"closed","title":"Designing the protocol to be migrateable (but not upgradeable)","type":"discussion","updatedAt":"2023-03-17T11:17:36Z","url":"https://github.com/sablier-labs/lockup/discussions/156"},{"author":"andreivladbrg","body":"In this PR https://github.com/sablierhq/v2-core/pull/220 we faced some issues with the well known: \"Stack too deep\" error, and because of that we added a couple of [structs](https://github.com/sablierhq/v2-core/blob/prb/total-amount/src/types/DataTypes.sol) to get rid of some function parameters. One of them is the `Range` struct:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/55a4d2ed225131247c97dd5ed352c44d755007eb/src/types/DataTypes.sol#L66-L70\r\n\r\nWhich has the purpose of replacing these variables from create function:\r\n```solidity\r\n    uint40 startTime; \r\n    uint40 cliffTime; \r\n    uint40 endTime; \r\n```\r\n\r\nThere is an issue with it: @PaulRBerg decided to also use it in the `storage` struct and the gas has increased with 21740 in `{SablierV2LockupLinear-createWithRange}`, the time variables are not tight packed anymore.\r\nhttps://github.com/sablierhq/v2-core/blob/55a4d2ed225131247c97dd5ed352c44d755007eb/src/types/DataTypes.sol#L81-L88\r\n\r\n<details>\r\n<summary>Gas comparison</summary>\r\n\r\n### With Range struct\r\n\r\n#### Linear\r\n\r\n<img width=\"1353\" alt=\"WithRangeLinear\" src=\"https://user-images.githubusercontent.com/99738872/216351330-115f0ead-7f8b-4cf9-b163-e91973f656a6.png\">\r\n\r\n\r\n#### Pro\r\n\r\n<img width=\"1356\" alt=\"WithRangePro\" src=\"https://user-images.githubusercontent.com/99738872/216351347-c925e09d-df71-4718-882e-26e5cb7443fe.png\">\r\n\r\n### Without Range struct\r\n\r\n#### Linear\r\n\r\n<img width=\"1332\" alt=\"NoRangeLinear\" src=\"https://user-images.githubusercontent.com/99738872/216351112-68812bed-073e-4739-85c8-aac6aaf5b073.png\">\r\n\r\n#### Pro\r\n\r\n<img width=\"918\" alt=\"NoRangePro\" src=\"https://user-images.githubusercontent.com/99738872/216351013-47b5deb9-c82d-4192-9ab3-44954808c850.png\">\r\n\r\n</details>\r\n\r\nMy suggestion is to continue using the `Range` struct as a function parameter but to remove it from the storage struct. The downside is that the refactor will take time and I don't know if we can delay more, @razgraf needs the contracts for the app development.","createdAt":"2023-02-02T14:40:26Z","labels":[],"number":310,"repository":"sablier-labs/lockup","state":"closed","title":"Change \"Range\" with the actual variables in the storage structs","type":"discussion","updatedAt":"2023-03-17T11:17:45Z","url":"https://github.com/sablier-labs/lockup/discussions/310"},{"author":"razgraf","body":"The `Broker` struct has two fields that provide:\r\n\r\n1. The address to send those funds to.\r\n2. The amount of fees requested by the broker.\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/src/types/DataTypes.sol#L11-L14\r\n\r\nI think `addr` here is the only abbreviated variable name we use in the contracts. Isn't it better to rename it to `address` as that's a reserved keyword. But can we maybe go with `Broker.target` or `Broker.account`?","createdAt":"2023-02-08T19:12:39Z","labels":[],"number":325,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename field in the `Broker` struct","type":"discussion","updatedAt":"2023-03-17T11:17:55Z","url":"https://github.com/sablier-labs/lockup/discussions/325"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe current size of the `SablierV2LockupPro` is ~25.49kB, which is ~0.914kB higher than the contract code size limit of ~24.576kB implemented in [EIP-170](https://eips.ethereum.org/EIPS/eip-170).\r\n\r\nTo be able to deploy this contract to mainnet, we have to get it under the limit.\r\n\r\n## Potential Solutions\r\n\r\nThere is no silver-bullet solution - we will have to be creative and employ a mixed approach. Below I have suggested a few potential solutions, ordered by desirability and implementation difficulty.\r\n\r\n### 1. Move `createWithDurations` in the periphery\r\n\r\nIt is not necessary to keep the `createWithDurations` function in the core contracts - all this function does is to compute the parameters for the `createWithRange` function dynamically using the `block.timestamp` at the time of including the transaction in the block.\r\n\r\nSimilar to the `createMultiple` function(s) that we plan on implementing in the periphery, we could move this function over there.\r\n\r\n### 2. Move the `getStreamed` helpers in an external library\r\n\r\nAs suggested by @andreivladbrg in this [comment](https://github.com/sablierhq/v2-core/pull/220#pullrequestreview-1232365340), we could move the `getStreamed` helpers in a separate library:\r\n\r\n- `getStreamedAmountForMultipleSegments`\r\n- `getStreamedAmountForOneSegment`\r\n\r\nAs I said in that other conversation, one other reason I like this idea is that it makes it possible to perform the pro calculations from outside of the pro contracts - which might be helpful for integrators, or in our periphery contracts.\r\n\r\n### 3. ERC-721 Implementation with Custom Errors\r\n\r\nThis would reduce the bytecode significantly, but unfortunately there is no good, off-the-shelf implementation of ERC-721 that uses custom errors. [I have asked about this on Twitter](https://twitter.com/PaulRBerg/status/1614347562508500994), and I got no answer.\r\n\r\nOpenZeppelin has opened [EIP-6093](https://eips.ethereum.org/EIPS/eip-6093), which purports to retroactively add custom errors to the popular token standards ERC-20, ERC-721, and ERC-1155. However, the EIP is still in draft, and they are still working on implementing it in their own contracts library.\r\n\r\nTherefore, the only workaround in the short term would be to implement this ourselves in [prb-contracts](https://github.com/PaulRBerg/prb-contracts/issues/28).\r\n\r\n### 4. Move the getters to the periphery\r\n\r\nThe idea is to move all the static `get` functions (that is, all except the calculation functions) to the periphery.\r\n\r\nThe counter-argument to this is that it would deteriorate the developer experience for integrators, and really anyone else who'd like to query the data from the core contracts directly, e.g. Etherscan users.\r\n\r\n### 5. Remove flash loan support\r\n\r\nSee the discussion I opened here:\r\n\r\nhttps://github.com/sablierhq/v2-core/discussions/278\r\n\r\n### ~~6. Merge the `getRecipient` function with `ownerOf`~~\r\n\r\n~~We have a function `getRecipient` that does the same thing as the ERC-721's [`ownerOf`](https://eips.ethereum.org/EIPS/eip-721) function.~~\r\n\r\n~~We provide the former function to provide context to our users (so we have an on-chain reference to who is the \"recipient of the stream\"). But we might have to jettison this function to reduce the size of the pro contract .. after all, the vast majority of Sablier users will use a UI to access the protocol. The UI can make the translation for the user, and refer to the NFT owner as the recipient.~~\r\n\r\n**Update**: the bytecode saving for doing this would be a paltry ~0.05kB. See my [comment](https://github.com/sablierhq/v2-core/discussions/279#discussioncomment-4759616) below.\r\n\r\n### 7. Delete the `renounceAdmin` function\r\n\r\nThis wouldn't save much gas, but the [`renounceAdmin`](https://github.com/PaulRBerg/prb-contracts/blob/1b1693930274cf9806832bbd376412b7ccbe1769/src/access/Adminable.sol#L44) of the `Adminable` contract is technically redundant. We could refactor the `Adminable` contract that has no `renounceAdmin` but which contains only a `transferAdmin` function that accepts a zero address as an argument.\r\n\r\n**Update**: actually, we should definitely do, see #289.\r\n\r\n### 8. Tune down the optimizer\r\n\r\nIt just dawned on me that the *simplest* way to lower the contract size is to lower the number of optimizer runs. This is explained in detail in the [Downsizing contracts](https://ethereum.org/en/developers/tutorials/downsizing-contracts-to-fight-the-contract-size-limit/) guide on the Ethereum website, and also in the Solidity docs on the [optimizer](https://docs.soliditylang.org/en/v0.8.17/internals/optimizer.html).\r\n\r\nJust by changing the number of optimizer runs to 5,000, I have managed to get the size of the pro contract down to ~24.472kB.\r\n\r\nThe only caveat to this solution is that it goes against what we want - we would ideally set the optimizer runs to 2^32-1, just like [Seaport does](https://github.com/ProjectOpenSea/seaport/blob/049828e49da5e142a1a9f6cc0a725069e61e2564/foundry.toml#L14), since we expect the Sablier V2 contracts to be called lots and lots of time during their lifetimes (they are singleton contracts, after all - storage and functionality and bundled together).\r\n\r\nSee related discussion in #290.","createdAt":"2023-01-19T12:15:54Z","labels":[],"number":279,"repository":"sablier-labs/lockup","state":"closed","title":"Strategies for lowering the size of the `SablierV2LockupPro` contract","type":"discussion","updatedAt":"2023-03-17T11:18:28Z","url":"https://github.com/sablier-labs/lockup/discussions/279"},{"author":"PaulRBerg","body":"During one of our latest meetings in person, we have agreed that it would be clearer to rename the `SablierV2Linear` and the `SablierV2Pro` contracts differently to signal the fact that these contracts enabled closed-ended streaming with capital lockups.\r\n\r\nWe haven't, however, agreed upon a final new prefix. These are the idea we had:\r\n\r\n- `Lockup`\r\n- `CapitalLockup`\r\n- `ClosedEnded`\r\n- `ClosedEndedLockup`\r\n- `CE` (as in, \"Closed Ended\")\r\n- `Closed`\r\n- `Vesting` (though I know @razgraf doesn't like to reference any particular use case in the contract name)\r\n\r\nThe `Linear` and the `Pro` suffixes could be optionally shortened to `L` and `P`, respectively.\r\n\r\nAt the moment, the variant I like the most is `Lockup` because it captures the current logic of creating streams quite accurately. \"Lockup\" as a term [is used in traditional finance in vesting contexts](https://www.lawinsider.com/clause/lock-up-vesting), as well as in crypto (see [Near's post](https://wiki.near.org/getting-started/near-token/lockups)).\r\n\r\nBy contrast, the issue with `ClosedEnded` is that it doesn't indicate to users that they have to make a one-time deposit in order for the stream to start. In principle, a stream could be closed-ended while being lockup-free, allowing users to top up.\r\n\r\nOn the flip side, an open-ended stream must necessarily be lockup-free, because a payment rate per second cannot be calculated from a fixed deposit without a stop time. From this perspective, `ClosedEnded` would be a better prefix, because it would mirror the `OpenEnded` prefix we would presumably use for what we currently call [`SablierV2Payroll`](https://github.com/sablierhq/v2-payroll/).\r\n\r\nTo sum up, I tend to favor `Lockup`, but if we agree that we will never build a closed-ended contract that is lockup-free and has top ups, then `ClosedEnded` would also be a good fit.","createdAt":"2022-12-31T17:46:25Z","labels":[],"number":232,"repository":"sablier-labs/lockup","state":"closed","title":"Ideas for how to rename the contracts","type":"discussion","updatedAt":"2023-03-17T11:18:41Z","url":"https://github.com/sablier-labs/lockup/discussions/232"},{"author":"razgraf","body":"Related to PR #31 we should start tracking (probably using data from foundry) gas consumption for our heavy read-only methods.\r\n\r\nIn case we decide to have a light version of the app that only relies on web3 calls, we'll make use of multicalls to batch queries to the RPC. These RPC nodes will probably have limits for how much gas a read-only method can consume. Therefore, by figuring our the gas limit and the gas required to gather data for one stream, we can optimize the number of sequential queries needed in the web3 native version of the app.\r\n\r\nP.S. Worth looking into this version of [Multicall 3](https://github.com/mds1/multicall) which might be more efficient on reads.","createdAt":"2022-06-09T11:49:24Z","labels":[],"number":37,"repository":"sablier-labs/lockup","state":"closed","title":"Track gas for read-only methods","type":"discussion","updatedAt":"2023-03-17T11:18:47Z","url":"https://github.com/sablier-labs/lockup/discussions/37"},{"author":"PaulRBerg","body":"During my work on adding support for ERC-3156 flash loans in the `SablierV2Lockup` contracts (see #277), I thought about the following scenario.\r\n\r\nImagine you have just launched your token and you have a governance system in place, which allows token holders to vote on proposals. Imagine that you hear about Sablier and you are interested to set up streams for your team and your investors.\r\n\r\nNow, someone tells you that the Sablier V2 contract admin has the ability to turn on flash loans for any token being streamed via the Sablier V2 protocol.\r\n\r\nHow would you react to this?\r\n\r\nThe rational answer should be that you don't care - your governance system is presumably flash-loan resistant, lest the system is guaranteed to break in the future, e.g. when creating a lending market on Aave for your token.\r\n\r\nHowever, people can sometimes be irrational, and their knee-jerk reaction might be to eschew using Sablier just because of the *possibility* of flash loans being turned on. One doesn't have to assume that the contract admin is malicious - assuming that the admin key can be compromised suffices in this context.\r\n\r\nTherefore, I wish to re-consider the flash loanability idea and/ or implementation. As much as I am on board with the revenue-generating benefits of flash loans, I wonder if this will not end up losing us users, and thus earning less broker and protocol fees in the long-term.\r\n\r\nOne potential workaround is to limit the flash loans to a stablecoin allowlist - we would hard-code the addresses of USDC, DAI, etc., in the contract constructor. This is not obviously not great, since it would add additional complexity in contracts that are otherwise already complex, and it would also limit the protocol to a few asset addresses that might change in the future, but the idea makes sense.\r\n\r\nI would be very curious to hear your thoughts on this concern - @razgraf, @maxdesalle, and @andreivladbrg.","createdAt":"2023-01-19T11:26:33Z","labels":[],"number":278,"repository":"sablier-labs/lockup","state":"closed","title":"Flash loans as a potential deterrent for vesting users","type":"discussion","updatedAt":"2023-03-17T11:18:54Z","url":"https://github.com/sablier-labs/lockup/discussions/278"},{"author":"PaulRBerg","body":"As discussed in #204, I find the `grossDepositAmount` param name rather verbose. It's a good fit for the create functions but there's something bugging me about there being three words in the name. In addition, there's a question of marketing at play here - we don't want to give an indication that fees are charged by default when in fact they aren't.\r\n\r\nSuggested alternatives ordered by how much I like them:\r\n\r\n1. `totalAmount`\r\n2. `depositAmount`\r\n3. `lockupAmount`\r\n4. `grossAmount`\r\n5. `amount`\r\n\r\nNone is great, and I can come up with an explanation for why `grossDepositAmount` is a better fit than each of the above. But we gotta start somewhere - WDYT?\r\n\r\nFor me, `depositAmount` is the leading candidate, since I expect many V2 streams to be fee-less. For fee-less streams, the \"gross deposit amount\" is the same as the struct \"deposit amount\". Conversely, the fees should be small anyway, so it's fine to call the function name \"deposit amount\" just like the struct because they will have approximately the same value.\r\n\r\n`totalAmount` is my second favorite candidate, because it communicates the fact that there is something more than just the deposit amount in this function param (i.e. the amount that gets stored in the struct as `.amounts.deposit`).\r\n\r\nAlternatively, we could consider renaming the `amounts.deposit` in the struct to something else .. though that would also mean renaming `getDepositAmount`.","createdAt":"2023-01-30T14:06:40Z","labels":[],"number":304,"repository":"sablier-labs/lockup","state":"closed","title":"Ideas for renaming `grossDepositAmount`","type":"discussion","updatedAt":"2023-03-17T11:19:07Z","url":"https://github.com/sablier-labs/lockup/discussions/304"},{"author":"PaulRBerg","body":"This is only needed for responding to ETH deposits.\r\n\r\nSee:\r\n\r\n- [What is the receive keyword in solidity?](https://ethereum.stackexchange.com/questions/81994/what-is-the-receive-keyword-in-solidity)\r\n- [payable() function In solidity](https://ethereum.stackexchange.com/questions/20874/payable-function-in-solidity)","createdAt":"2022-06-15T21:07:32Z","labels":[],"number":57,"repository":"sablier-labs/lockup","state":"closed","title":"Should we implement the fallback function?","type":"discussion","updatedAt":"2023-03-17T11:19:11Z","url":"https://github.com/sablier-labs/lockup/discussions/57"},{"author":"PaulRBerg","body":"In a similar vein to #222, what would you guys say about renaming `getWithdrawableAmount` to `getRecipientAmount`, and `getReturnableAmount` to `getSenderAmount`?\r\n\r\n\"withdrawable\" can be confusing, because it's not obvious that the amount is the recipient's.\r\n\r\nAlternatives: `getRecipientBalance` and `getSenderBalance`, to signal a difference between static amounts (such as the deposit amount) and dynamic streaming balances.","createdAt":"2022-12-31T11:40:52Z","labels":[],"number":227,"repository":"sablier-labs/lockup","state":"closed","title":"Idea to rename \"getWithdrawableAmount\" to \"getRecipientAmount\", and \"getReturnableAmount\" to \"getSenderAmount\"","type":"discussion","updatedAt":"2023-03-17T11:19:21Z","url":"https://github.com/sablier-labs/lockup/discussions/227"},{"author":"PaulRBerg","body":"We are struggling to keep the size of the `SablierV2Pro` contract under 24kB. It is currently at ~22.8kB, and I fear that after we implement #239, #246, and #255, we will go over the limit.\r\n\r\nIf I now think about it, I can't remember why we implemented the `cancelAll` function in the core contract. Was there a real reason, or was the motive a bit of laziness to move them to a different repo?\r\n\r\nI realize why we did it for `withdrawMultiple` - this is a function that is mostly useful for the recipient. But the converse applies to `cancelAll` - it's a function mostly useful for the sender. Therefore, just like `createMultiple` (that batch-creates streams), we could easily move this function to the periphery.\r\n\r\nAny thoughts, @andreivladbrg and @razgraf?","createdAt":"2023-01-13T19:22:16Z","labels":[],"number":264,"repository":"sablier-labs/lockup","state":"closed","title":"Should we move the `cancelMultiple` function to the periphery?","type":"discussion","updatedAt":"2023-03-17T11:19:49Z","url":"https://github.com/sablier-labs/lockup/discussions/264"},{"author":"PaulRBerg","body":"This is an open-ended question addressed to @razgraf and @gavriliumircea - would it help you guys if we did not delete the struct entity on cancel or when the stream is fully withdrawn?\r\n\r\n- https://github.com/sablierhq/v2-core/blob/d9fffa978da342785be2bd3b5899a803e6b0a212/src/SablierV2Linear.sol#L288\r\n- https://github.com/sablierhq/v2-core/blob/d9fffa978da342785be2bd3b5899a803e6b0a212/src/SablierV2Linear.sol#L432\r\n\r\nThe way I see it, this would be useful for two purposes:\r\n\r\n1. Better data support in the light app.\r\n2. Better data support for the web3 community who might prefer to query the data from the smart contracts directly, rather than the subgraphs.\r\n\r\nBut please do let me know if you envisage more use cases!\r\n\r\nIn terms of implementation, this would't be easy, since we would have to refactor the `streamExists` modifier into a `streamExistsAndNotEnded` modifier, and then add a slew of new tests that ensure that ended streams cannot be interacted with.\r\n\r\nThere would also be two additional implications:\r\n\r\n1. The gas cost for canceling and withdrawing would increase a bit, because there would be no storage erase refund anymore.\r\n2. Long term, we might incur additional costs on smart contract storage rent. It is known that ETH2 is going to update the current model, because it is unsustainable. It is not feasible to keep increasing the storage of the blockchain forever.","createdAt":"2023-01-08T11:43:27Z","labels":[],"number":258,"repository":"sablier-labs/lockup","state":"closed","title":"Would it help to not delete the struct entity on cancel or when the stream is fully withdrawn?","type":"discussion","updatedAt":"2023-03-17T11:19:57Z","url":"https://github.com/sablier-labs/lockup/discussions/258"},{"author":"PaulRBerg","body":"Adding support for flash loans would be cool, but I worry that we will not have bandwidth for this (implementing this won't be trivial).  I would regard this as a priority 2, or even a priority 3. What do you guys think?\r\n\r\nIf we were to implement this, I imagine the implementation would look something like this:\r\n\r\n- We would have a per-token mapping that would map token addresses to boolean flags, such that we don't allow any token to be flash loaned, willy-nilly\r\n- All tokens are non-flash-loanable, by default\r\n- The implementation would follow a standard like [ERC-3156](https://eips.ethereum.org/EIPS/eip-3156)","createdAt":"2022-11-17T09:39:19Z","labels":[],"number":170,"repository":"sablier-labs/lockup","state":"closed","title":"Flash loans","type":"discussion","updatedAt":"2023-03-17T11:20:05Z","url":"https://github.com/sablier-labs/lockup/discussions/170"},{"author":"razgraf","body":"Should we consider renaming the streamed `token` into a streamed `asset`?\r\n\r\nIn v2, the stream itself is a token (an NFT to be specific). As it inherits attributes and methods from ERC721, it gets a `tokenId` and other \"token\"-related features. This could make it a bit unclear for the underlying ERC20 the stream runs on. There will be getters for things like `stream.token, stream.tokenId` which are very different things but due to naming will most often live alongside each other.\r\n\r\n@PaulRBerg @andreivladbrg \r\n","createdAt":"2023-01-16T17:45:27Z","labels":[],"number":273,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename `token` to `asset`","type":"discussion","updatedAt":"2023-03-17T11:20:10Z","url":"https://github.com/sablier-labs/lockup/discussions/273"},{"author":"PaulRBerg","body":"We might be able to save some gas in the [`Broker`](https://github.com/sablierhq/v2-core/blob/873d4f67a7d85351fcf0ada2acf2057bb130f7d8/src/types/Structs.sol#L13-L16) struct by tightly packing the `addr` and the `fee` fields.\r\n\r\nWe would pack them by using the `UD2x18` type instead of `UD60x18`. `address` has 160 bits and `UD2x18` 64 bits, so in total 224 bits,  which is less than 256.\r\n\r\nThere are two downsides, though:\r\n\r\n1. We would have to also refactor the `protocolFee` to be an `UD2x18`.\r\n2. The `UD2x18` type is a bit counter-intuitive - the [maximum value](https://github.com/PaulRBerg/prb-math/blob/c7f76a7179afecefc0df3819e9bc4d2f8a20230c/src/ud2x18/Constants.sol#L10) is ~18.44, which is not what you expect from a type that purportedly [\"can have up to 2 digits\"](https://github.com/PaulRBerg/prb-math/blob/c7f76a7179afecefc0df3819e9bc4d2f8a20230c/src/ud2x18/ValueType.sol#L6) in the whole part.\r\n\r\nHoweveeere, the second downside is a weak contention, because we are already using the `UD2x18` type in the segment exponent, and so we would have to document and explain its internal logic anyway. In fact, it might be a good thing to stick with using a single PRBMath value type in the public smart contract API.","createdAt":"2023-01-27T11:42:20Z","labels":[],"number":298,"repository":"sablier-labs/lockup","state":"closed","title":"Potential gas optimization in the `Broker` struct","type":"discussion","updatedAt":"2023-03-17T11:20:14Z","url":"https://github.com/sablier-labs/lockup/discussions/298"},{"author":"PaulRBerg","body":"The following functions are mission-critical:\r\n\r\n- `getReturnableAmount`\r\n- `getStreamedAmount`\r\n- `getWithdrawableAmount`\r\n\r\nAnd they are in a different category of importance compared to the static getters (e.g. `getStartTime`).\r\n\r\nThis fact has become clearer once I got to implement stream statuses in #269, since I had to add special checks for the status of the stream (based on @andreivladbrg's feedback, thanks again) just in these functions but not in the other getters. In addition, I have also thought about this when I started working on invariant tests (#244) - there are a few protocol invariants that depend upon the functions above.\r\n\r\nIt is thus that I find it a little bit uncomfortable to have these functions start with the same prefix as the static getters. There's no hint at the dynamic nature of these functions.\r\n\r\nWhat would you say about using one of the following prefixes instead?\r\n\r\n- `compute`\r\n- `calculate`","createdAt":"2023-01-23T19:00:21Z","labels":[],"number":287,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename all dynamic calculation functions","type":"discussion","updatedAt":"2023-03-17T11:20:24Z","url":"https://github.com/sablier-labs/lockup/discussions/287"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThe goal is to monetize Sablier V2.\r\n\r\n## Desiderata\r\n\r\n1. Add a percentage fee in the core contract, which applies to all streams.\r\n2. The fee can be turned off by the contract administrator.\r\n3. Split the fee with potential third-party front-end developers (\"TPFEDs\").\r\n\r\n## Open-Ended Questions\r\n\r\n1. Should the fee be a universal percentage that applies to all tokens, or should it be set on a per-token basis?\r\n2. Should the fee be charged in a different token, e.g. USDC?\r\n3. If yes, how do we properly measure the fees based on the deposit amount? Or do we just charge a flat fee in USDC?\r\n4. Should we lazily store the fees in the contracts and make them withdrawable via a bespoke function?\r\n\r\n## Potential Solution\r\n\r\nI call this the **Router Allowlist** solution.\r\n\r\nBy default, the contract charges a fee that is cashed in by us. However, if the caller is an allow-listed router, then the fee is split with the router (e.g. we get to keep 20%). The router would be a middleware smart contract that would create the stream on behalf of the end user, and it would be the responsibility of the TPFED to build it (we could recommend them to use something like [PRBProxy][prb-proxy]).\r\n\r\nLimitations with this approach are:\r\n\r\n- The % that we get to split with all TPFEDs is fixed. We cannot split preferentially based on how much TVL the TPFED brings to Sablier. It's quite important to be able to charge preferentially because as the TPFED grows, they will increasingly have an incentive to move away from Sablier\r\n- We cannot at the same time not charge a fee on our UI and let TPFED charge fees. When the fee is disabled, it is disabled for everyone.\r\n\r\n[prb-proxy]: https://github.com/paulrberg/prb-proxy","createdAt":"2022-10-24T21:15:06Z","labels":[],"number":145,"repository":"sablier-labs/lockup","state":"closed","title":"Musings on the fee model","type":"discussion","updatedAt":"2023-03-17T11:20:30Z","url":"https://github.com/sablier-labs/lockup/discussions/145"},{"author":"PaulRBerg","body":"The `create` functions expects a ERC-20 contract in the `token` argument. We're currently requiring users to import the `IERC20` defined in [prb-contracts](https://github.com/paulrberg/prb-contracts), but users might not like that. That is, they might not like the fact that in order to use Sablier's `v2-core`, they have to also import `prb-contracts`. The latter is effectively a peer dependency of the former.\r\n\r\nSee the discussion on [Twitter](https://twitter.com/PaulRBerg/status/1583789145205268481) for more thoughts and opinions.","createdAt":"2022-10-29T09:03:34Z","labels":[],"number":147,"repository":"sablier-labs/lockup","state":"closed","title":"\"IERC20\" or \"address\" for \"token\" argument","type":"discussion","updatedAt":"2023-03-17T11:20:35Z","url":"https://github.com/sablier-labs/lockup/discussions/147"},{"author":"PaulRBerg","body":"There's quite a bit of repetitive code in the current withdraw functions, which is mainly due to the plurality of functions we have.\r\n\r\nWhat if we merged the basic \"withdraw\" and the \"withdraw to\" variants, like this?\r\n\r\n- We would only have the `withdraw` and `withdrawAll` functions, but each would have an additional argument `to`\r\n- `to` can be any other address, but only if the caller is the recipient or an approved operator thereof\r\n- If the caller is the sender but `to` is not the recipient, the function reverts\r\n\r\nThis design would let us delete two functions and two large test suites, with the only cost being the slight added cost for checking the new input argument requirements.","createdAt":"2022-12-11T13:55:58Z","labels":[],"number":192,"repository":"sablier-labs/lockup","state":"closed","title":"Merge the \"withdraw\" with the \"withdraw to\" functions","type":"discussion","updatedAt":"2023-03-17T11:20:43Z","url":"https://github.com/sablier-labs/lockup/discussions/192"},{"author":"andreivladbrg","body":"As I mentioned in this [comment](https://github.com/sablierhq/v2-core/pull/196#issuecomment-1351377206), I suggest adding a function that returns whether the caller of a function is the sender or not. \r\n\r\n### Pros\r\n\r\n- Would be possible to remove the `getSender` function from `SablierV2` contract and to change it to `external`\r\n- Using the `isCallerSender` would be more gas efficient because it would return a boolean instead of an address, not by much tho \r\n- Consistency regarding checks in the `SablierV2` contract","createdAt":"2022-12-14T15:13:40Z","labels":[],"number":198,"repository":"sablier-labs/lockup","state":"closed","title":"Add `_isCallerStreamSender` function","type":"discussion","updatedAt":"2023-03-17T11:20:49Z","url":"https://github.com/sablier-labs/lockup/discussions/198"},{"author":"PaulRBerg","body":"Due to the `streamId` argument, all functions can be inferred to be about streaming. But there are two exceptions - the `create` and the `createWithDuration` functions.\r\n\r\nIt is not immediately obvious that these functions are creating streams. One would need to have the wider context on what Sablier is to infer that.\r\n\r\nWhat if we renamed the `create` and the `createWithDuration` to simply `stream`? (noting that it is possible to overload functions in Solidity, as long as the arguments differ, and in this case they do)\r\n\r\nThere's something about the simplicity and actionability of `stream` that makes me like it a lot. I came up with this idea while brainstorming (on my own) what name to give the gross deposit amount. `grossDepositAmount` is good from a clarity point of view, but it's rather verbose. `grossAmount`, on the other hand, does not communicate what the amount is, but that is also due to the lack of context in the function name itself. That's when I thought about renaming `create` to `stream` - if we make this change, then we could potentially use the `grossAmount` naming, because the purpose of the amount would be inferred from the stream verb.\r\n\r\nCc @razgraf, @andreivladbrg.","createdAt":"2022-12-17T17:35:45Z","labels":[],"number":204,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename the \"create\" function to \"stream\"","type":"discussion","updatedAt":"2023-03-17T11:20:53Z","url":"https://github.com/sablier-labs/lockup/discussions/204"},{"author":"PaulRBerg","body":"The current names might be misconstrued as meaning to meaning to \"withdraw everything\". Wouldn't `withdrawMultiple` be a better name?","createdAt":"2022-12-22T14:53:04Z","labels":[],"number":212,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename \"cancelAll\" and \"withdrawAll\"","type":"discussion","updatedAt":"2023-03-17T11:21:23Z","url":"https://github.com/sablier-labs/lockup/discussions/212"},{"author":"PaulRBerg","body":"The current names are a bit misleading because, technically, even the returned amount is withdrawn.\r\n\r\nIf we rename `withdrawAmount` to `recipientAmount`, and `returnAmount` to `senderAmount`, we would give a hint about the fact that a cancelation marks the ending of the streaming relationship between the sender and the recipient. After all, it is a one-time event.","createdAt":"2022-12-30T12:12:58Z","labels":[],"number":222,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename \"withdrawAmount\" to \"recipientAmount\", and \"returnAmount\" to \"senderAmount\"","type":"discussion","updatedAt":"2023-03-17T11:21:01Z","url":"https://github.com/sablier-labs/lockup/discussions/222"},{"author":"PaulRBerg","body":"The `stopTime` property redundant because the same information can be gleaned from the last segment milestone.\r\n\r\nThe only place where it is needed is the [`getWithdrawableAmount`](https://github.com/sablierhq/v2-core/blob/aeb6f4c1ff2102753cd898c015b7480aa9b9bff2/src/SablierV2Pro.sol#L135). It might be slightly more gas efficient to keep it as is in the `getWithdrawableAmount`, but this comes at a cost of 20,000 gas for committing this property in storage and, more importantly, at the cost of making it difficult to avoid the [StackTooDeep issue](https://soliditydeveloper.com/stacktoodeep).\r\n\r\nFinally, I should clarify that this proposal is strictly about the `stopTime` storage property - the `getStopTime` getter is still helpful, and I am happy to keep it.","createdAt":"2022-12-30T08:58:44Z","labels":[],"number":221,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to get rid of the \"stopTime\" storage property in the pro contract","type":"discussion","updatedAt":"2023-03-17T11:21:06Z","url":"https://github.com/sablier-labs/lockup/discussions/221"},{"author":"PaulRBerg","body":"In #220, I have implemented operator fees (https://github.com/sablierhq/v2-core/issues/208) by adding the two following arguments in the create functions:\r\n\r\n- `operator`\r\n- `operatorFee`\r\n\r\nBut @andreivladbrg has pointed out to me that this term is already used by the [ERC-721](https://eips.ethereum.org/EIPS/eip-721) standard to refer to an approved account that can transfer the NFT on behalf of the owner.\r\n\r\nI agree with Andrei that this is not good - it's confusing to have the same term referring to two different concepts in the same code base.\r\n\r\nAlternatives:\r\n\r\n- `agent`\r\n- `broker`\r\n- `intermediary` (though this doesn't sound nice in the wider context of decentralization)\r\n\r\nNone is better than `operator`, though.","createdAt":"2023-01-02T09:53:29Z","labels":[],"number":234,"repository":"sablier-labs/lockup","state":"closed","title":"Should we rename the \"operator\" and the \"operatorFee\" arguments?","type":"discussion","updatedAt":"2023-03-24T13:52:53Z","url":"https://github.com/sablier-labs/lockup/discussions/234"},{"author":"andreivladbrg","body":"Now whenever a stream is cancelled or fully withdrawn, it is deleted only from the Sablier contracts storage.\r\nhttps://github.com/sablierhq/v2-core/blob/c04f0ffb71678e1c82a5cb6515fa54d68dc9e994/src/SablierV2Linear.sol#L185\r\nhttps://github.com/sablierhq/v2-core/blob/c04f0ffb71678e1c82a5cb6515fa54d68dc9e994/src/SablierV2Linear.sol#L298-L300\r\n\r\nSince we inherit the `ERC721` contract in the `SablierV2Linear` and `SablierV2Pro`, we also have other storages, that can be deleted via `_burn` function, besides our `_streams` mapping.\r\n\r\nIn my opinion, we should only use `delete _streams[streamId]` together with the `_burn` function, and never just one of them.\r\n\r\nI think there are three good options:\r\n1. Remove deletion from the `_cancel` and `_withdraw` functions, and add an `external` function that burns and deletes the NFT, it can be called by the `recipient` only after the stream is finished. This will give free will wether he wants to keep the NFT or not.\r\n2. Delete and burn the stream always when the stream gets cancelled or fully withdrawn. This will save gas.\r\n3. Remove deletion only from the `_withdraw` function, add an `external` function, and also call `_burn` from the `ERC721` contract in the `_cancel` function. \r\n\r\nAt the moment, I don't know how the SVG NFT will work, it might depend on the `Stream` struct, in this case, the option to choose is option 1.\r\n\r\nWhat do you think? Do you have other suggestions?","createdAt":"2022-08-12T12:16:15Z","labels":[],"number":129,"repository":"sablier-labs/lockup","state":"closed","title":"What should we do with the NFT stream after it gets canceled or fully withdrawn?","type":"discussion","updatedAt":"2023-03-17T11:21:28Z","url":"https://github.com/sablier-labs/lockup/discussions/129"},{"author":"PaulRBerg","body":"For consistency purposes, I suggest we rename to `cancelable` to `isCancelable`, to make it homologous to `isEntity`.\r\n\r\nI also thought about the converse, i.e. renaming `isEntity` to `entity`, but this doesn't sound right to me.","createdAt":"2022-12-23T12:08:46Z","labels":[],"number":213,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to rename \"cancelable\" to \"isCancelable\"","type":"discussion","updatedAt":"2023-03-17T11:21:33Z","url":"https://github.com/sablier-labs/lockup/discussions/213"},{"author":"PaulRBerg","body":"I was looking at our implementation of `_isApprovedOrOwner`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/2445865e3269481fb47fb320e71d2e1f42382cf6/src/SablierV2Linear.sol#L201\r\n\r\nWe need to define it in the abstract contract `SablierV2` because it's needed by the common implementations in there. That is fine. What is not fine is the fact that we're piggybacking off the standard ERC-721 implementation written by OpenZeppelin:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/49c0e4370d0cc50ea6090709e3835a3091e33ee2/contracts/token/ERC721/ERC721.sol#L239-L242\r\n\r\nThey [check](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/49c0e4370d0cc50ea6090709e3835a3091e33ee2/contracts/token/ERC721/ERC721.sol#L72) whether the owner is the zero address, but this is a redundant check in our case, because all of our functions are protected by the [`streamExists`](https://github.com/sablierhq/v2-core/blob/2445865e3269481fb47fb320e71d2e1f42382cf6/src/SablierV2.sol#L41-L46) modifier.\r\n\r\nIt is a protocol invariant that if the stream exists, the NFT exists, too. It is not possible for the stream to exist without the NFT existing. However, once https://github.com/sablierhq/v2-core/issues/169 is implemented, it will be possible for a stream to not exist while a \"zombie\" NFT still exists, though even in that case, the `streamExists` modifier will do its job and prevent any misuse of our functions.\r\n\r\nTherefore, I suggest we rewrite a custom `_isApprovedOrOwner` implementation to remove the check for the owner address.\r\n\r\n**Update**: I can confirm that after implementing `_isApprovedOrOwner` myself and calling `_ownerOf` instead of `ownerOf` (to avoid the zero address check), all tests are still passing. Therefore, I suggest we march on with my proposal.","createdAt":"2022-12-15T09:44:19Z","labels":[],"number":199,"repository":"sablier-labs/lockup","state":"closed","title":"Why are we calling the ERC721 `_isApprovedOrOwner` function?","type":"discussion","updatedAt":"2023-03-17T11:22:39Z","url":"https://github.com/sablier-labs/lockup/discussions/199"},{"author":"PaulRBerg","body":"While writing my feedback to #150, it dawned on me what is the solution to the problems raised by Astaria.\r\n\r\nIt's to make it possible for third-party contracts to \"react\" to Sablier stream interactions, i.e. cancelations and withdrawals, via cross-contract hooks.\r\n\r\nHow could this work, in practice? There are a couple of ways I can think of; both would require the drafting of an `IERCSablierResponder` interface with two functions `onCancelHook` and `onWithdrawHook`.\r\n\r\n1. We attempt to call `onCancelHook` at the bottom of the `_cancel` function on the `recipient` itself, but use something like `try/catch` to not revert if the recipient does not implement the hook.\r\n2. We add a `responder` field in the stream struct and check if this is defined and if it is, we call the `onCancelHook` function on the `responder`.\r\n\r\nBoth should cost the same in terms of gas, on average, though the second approach would cost more when setting the `responder` field due to the storage gas overhead.\r\n\r\nNeedless to say that by doing this, Astaria could easily react to whatever happens to the streams, and update their internal state accordingly (e.g. account for the fact that ERC-20 tokens have been transferred in).\r\n","createdAt":"2022-11-01T21:49:30Z","labels":[],"number":157,"repository":"sablier-labs/lockup","state":"closed","title":"Hooks and reactivity","type":"discussion","updatedAt":"2023-03-17T11:22:59Z","url":"https://github.com/sablier-labs/lockup/discussions/157"},{"author":"PaulRBerg","body":"Why are not emitting the \"sender\" in the \"Cancel\" event?","createdAt":"2022-12-01T14:46:08Z","labels":[],"number":183,"repository":"sablier-labs/lockup","state":"closed","title":"Why are we not emitting the \"sender\" in the \"Cancel\" event?","type":"discussion","updatedAt":"2023-03-17T11:23:02Z","url":"https://github.com/sablier-labs/lockup/discussions/183"},{"author":"andreivladbrg","body":"The variable indeed is the quotient of `elapsedTime` and `totalTime`, but this does not say much about what it represents.\r\n\r\nI'm proposing we change the variable name to something more specific, like `percentStreamed`.\r\n\r\nDo you have any idea for a better name?","createdAt":"2022-07-09T08:25:47Z","labels":[],"number":93,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"quotient\" variable from the \"getWithdrawableAmount\" method.","type":"discussion","updatedAt":"2023-03-17T11:23:11Z","url":"https://github.com/sablier-labs/lockup/discussions/93"},{"author":"razgraf","body":"For streams with tokens that are very illiquid you might be able to use flash-loans with Sablier (with funds coming from vesting streams) to short the asset or arbitrage it pretty easily.\r\n\r\nShould we integrate or develop an opt-in system?\r\nShould this system be per-stream or per-asset?","createdAt":"2022-07-13T16:20:12Z","labels":[],"number":97,"repository":"sablier-labs/lockup","state":"closed","title":"Should flash-loanable funds be opt-in?","type":"discussion","updatedAt":"2023-12-28T11:53:46Z","url":"https://github.com/sablier-labs/lockup/discussions/97"},{"author":"PaulRBerg","body":"@andreivladbrg, would you be open to refactoring all of our function calls to use explicit arguments, e.g. like this?\r\n\r\n```solidity\r\nfoo({ x: 1, y: 2})\r\n```\r\n\r\nSee my [tweet](https://twitter.com/PaulRBerg/status/1574071928544976896) for more details on this.","createdAt":"2022-10-30T15:42:49Z","labels":[],"number":151,"repository":"sablier-labs/lockup","state":"closed","title":"Calling functions with explicit arguments","type":"discussion","updatedAt":"2023-03-17T11:23:15Z","url":"https://github.com/sablier-labs/lockup/discussions/151"},{"author":"PaulRBerg","body":"`> 0 == false` is more gas efficient than `== 0`.","createdAt":"2022-05-03T11:39:20Z","labels":[],"number":14,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"> 0 == false\" instead of \"== 0\"","type":"discussion","updatedAt":"2023-03-17T11:23:20Z","url":"https://github.com/sablier-labs/lockup/discussions/14"},{"author":"PaulRBerg","body":"@andreivladbrg what do you think about remapping the `src` folder with the tilde symbol `~`?\r\n\r\n```text\r\n# remappings.txt\r\n~/=src/\r\n```\r\n\r\nWe are currently using `@sablier/v2-core` but I think that it can be a bit confusing to import the source contracts using the full package name from within the package itself.","createdAt":"2022-10-30T15:44:26Z","labels":[],"number":152,"repository":"sablier-labs/lockup","state":"closed","title":"Using the tilde symbol \"~\" as a remapping","type":"discussion","updatedAt":"2023-03-17T11:23:31Z","url":"https://github.com/sablier-labs/lockup/discussions/152"},{"author":"razgraf","body":"In light of #110 , #155 etc. I'm not sure I remember why we landed on giving the sender permission to withdraw for the recipient? \r\n\r\nIt would allow them to run a \"relayer\" themselves for created streams sure. But if we implement #155 this relaying becomes a business model for the \"Sablier Keepers\". Also, in need of extra customization, one could just implement a **recipient contract/proxy** that has a permission list for everything from transfer to withdraw. \r\n\r\nThe downside with maintaining this sender power is that we create yet another edge-case for integrators to take into account.\r\n\r\n\r\n_Note: I could not find this exact topic documented in our discussions, so the thread can serve as historical reference for our decision._","createdAt":"2022-11-02T11:19:21Z","labels":[],"number":158,"repository":"sablier-labs/lockup","state":"closed","title":"Should we allow the sender to withdraw for the recipient?","type":"discussion","updatedAt":"2023-03-17T11:23:36Z","url":"https://github.com/sablier-labs/lockup/discussions/158"},{"author":"PaulRBerg","body":"https://github.com/sablierhq/v2-core/pull/31 implemented getters for all stream struct members, except the complex segment-related arrays in the `SablierV2Pro` contract.\r\n\r\nShould we add getters for `segmentAmounts`, `segmentExponents` and `segmentMilestones`?","createdAt":"2022-06-09T11:05:12Z","labels":[],"number":34,"repository":"sablier-labs/lockup","state":"closed","title":"Should we add getters for segments?","type":"discussion","updatedAt":"2023-03-17T11:23:51Z","url":"https://github.com/sablier-labs/lockup/discussions/34"},{"author":"andreivladbrg","body":"The way how it works now is like this:  the UI calls the external create function and it calls an internal function `createInternal` which has all the logic. \r\n\r\nKnowing that we plan to create a periphery that will implement a stream batch with a non blocking behaviour (if one fails it will not influence the others), I suggest to move all the logic that checks the stream creation requirements from the internal function to the external function to have a non reverting function. This way will be more efficient because it will not check twice for the requirements on batch. \r\n\r\nI think the best solution for the batch contracts would be to have a method `checkRequirements ` which returns true/false, and if it returns `true` it will call the internal function from the core contracts.","createdAt":"2022-07-15T13:18:36Z","labels":[],"number":98,"repository":"sablier-labs/lockup","state":"closed","title":"Should we move the checks from the \"createInternal\" to the \"create\" function?","type":"discussion","updatedAt":"2023-05-09T08:14:45Z","url":"https://github.com/sablier-labs/lockup/discussions/98"},{"author":"PaulRBerg","body":"Before implementing https://github.com/sablierhq/v2-core/issues/16, we should validate our assumption that a binary search algo will be faster than the [current iterative approach](https://github.com/sablierhq/v2-core/blob/80e474b3ae88e9228d1c7a43ce7410235f9f60de/src/SablierV2Pro.sol#L107-L111) to find the current segment time in the `getWithdrawableAmount` function.\r\n\r\nBinary search may not be faster, because after you find the result, you then still have to iterate over all segments up to the result.","createdAt":"2022-06-03T15:24:45Z","labels":[],"number":17,"repository":"sablier-labs/lockup","state":"closed","title":"Compare gas efficiency of binary search versus iterative","type":"discussion","updatedAt":"2023-03-17T11:25:47Z","url":"https://github.com/sablier-labs/lockup/discussions/17"},{"author":"PaulRBerg","body":"The former is a bit unclear with respect to what exactly is the role of `from`: is it the stream sender, or the stream funder?\r\n\r\n`createOnBehalfOf` would be more verbose, but much clearer.","createdAt":"2022-06-14T12:03:43Z","labels":[],"number":51,"repository":"sablier-labs/lockup","state":"closed","title":"What if we renamed \"createFrom\" to \"createOnBehalfOf\"?","type":"discussion","updatedAt":"2023-03-17T11:25:53Z","url":"https://github.com/sablier-labs/lockup/discussions/51"},{"author":"PaulRBerg","body":"## Introduction\r\n\r\nMy understanding is that we had initially wanted an allowance system similar to ERC-20's transfer approval flow because we thought we need it for our periphery contracts. But does that assumption hold water?\r\n\r\nLet's explore the user flow in three cases. I shall assume that Alice wishes to create one $USDC stream toward Bob. What I refer to by \"periphery contract\" is either a bespoke implementation or an instance of PRBProxy (the logic is the same).\r\n\r\n## 1. Authorization\r\n\r\n1. Alice authorizes the periphery contract Foo to create Sablier streams on her behalf.\r\n2. Alice approves the Sablier contract to spend her $USDC balance (this step is still necessary because the ERC-20 contract knows nothing about the Sablier authorization flow).\r\n3. Alice calls a function on Foo to create the stream, and Foo creates it on her behalf.\r\n\r\n## 2. Standard Transfer From\r\n\r\n1. Alice authorizes the periphery contract to spend her $USDC balance.\r\n2. Alice calls a function on Foo to create the stream, Foo transfers the tokens from her to it, and then creates the stream on her behalf by setting the `sender` argument to be Alice's address.\r\n\r\n## 3. EIP-2612 Permit\r\n\r\nThis only works with ERC-20 tokens compatible with [EIP-2612](https://eips.ethereum.org/EIPS/eip-2612). \r\n\r\n1. Alice signs a transaction data blob off-chain. Notably, this step is *not* a transaction (unlike all others).\r\n2. Alice calls a function on Foo to create the stream *with a signature* ([see this](https://github.com/hifi-finance/hifi/blob/cf10f3be1dfaacd5b703cedd8898dd511da06a54/packages/proxy-target/contracts/HifiProxyTarget.sol#L535-L545) as an example for how I implemented permit signatures at Hifi). Foo then creates the stream on her behalf by setting the `sender` argument to be Alice's address.\r\n\r\n## Conclusion\r\n\r\nIt turns out that the authorization system is the worst UX of all, because there are 3 separate transactions needed for creating the stream. EIP-2612 permit is the best, but few ERC-20 tokens support it, and the frontend implementation is non-trivial.\r\n\r\nThe only case that I can think of when the 1st method would be useful is when a DeFi protocol integrates Sablier V2 and, for some reason or another, they would also like their users to create the Sablier streams on their UI. But still, I don't see why they wouldn't go with the 2nd method described above.\r\n\r\nTherefore, I would suggest sticking with the standard `transferFrom` flow and completely remove the authorization system from our contracts. It adds undue complexity, which costs time and money (remember we want to audit this). We can still keep a copy of the current logic on an archive branch, for historical purposes.","createdAt":"2022-06-19T10:18:39Z","labels":[],"number":74,"repository":"sablier-labs/lockup","state":"closed","title":"The authorization system is not needed anymore","type":"discussion","updatedAt":"2023-03-17T11:25:59Z","url":"https://github.com/sablier-labs/lockup/discussions/74"},{"author":"PaulRBerg","body":"In an offline discussion, @razgraf made the suggestion to implement a \"withdraw on behalf of\" functionality, which would enable  third-party relayers to pay the gas costs for withdrawing for end-users.\r\n\r\nMy only reservation is that it would take quite some time to implement this, and we already have a long list of more urgent matters to tackle. Multiple new functions and one big mapping would be needed to add support for withdrawing on behalf of other users.\r\n\r\nThat said, there are two alternative implementations that would achieve the same goal, albeit they would involve different assumptions:\r\n\r\n1. What if we let anyone call the `withdraw` function? Obviously the concern with this is that anyone would be able to trigger taxable events for other people.\r\n2. In a similar vein to #1, what if we add a new boolean property in the `Stream` struct that by default is set to `false` but users can set to `true` which would allow anyone to call the `withdraw` function?","createdAt":"2022-06-10T06:54:54Z","labels":[],"number":39,"repository":"sablier-labs/lockup","state":"closed","title":"Withdraw on behalf of","type":"discussion","updatedAt":"2023-03-17T11:26:30Z","url":"https://github.com/sablier-labs/lockup/discussions/39"},{"author":"andreivladbrg","body":"In the actual implementation of the `core` contracts we are storing in the `Stream` struct only `uint256` type variables, which are expensive in terms of gas cost. \r\nhttps://github.com/sablierhq/v2-core/blob/c7cbed688b87facd042dfeaa869882b7a3c66dc5/src/interfaces/ISablierV2Linear.sol#L56-L66\r\nhttps://github.com/sablierhq/v2-core/blob/c7cbed688b87facd042dfeaa869882b7a3c66dc5/src/interfaces/ISablierV2Pro.sol#L81-L93\r\n\r\nI was toying with all the `uint` types that solidity has and I think the best solution is to change the `uint256` type to `uint64`  for  our time variables: `cliffTime` `segmentMilestones` `startTime` and `stopTime`.\r\n\r\nThe only assumption we have to make is that all timestamps can fit in `uint64`, i.e. this number 18446744073709551615, this will be true until the year ~584942417303, means it is totally safe.\r\n\r\nI've actually created a branch 0eeba8cd2e3761088fb76d88bd5a1f23a6ee1382 to test the gas benefits and I was surprised to find out that this change would save us **43,212** gas in average for the `create` function in the `SablierV2Linear` contract and **140,236** in the `SablierV2Pro` contract.\r\n\r\nHere are some of the screenshots of the gas reports:\r\n## Before\r\nFrom this commit: 3003b344749550c9bd07f4840af4c737c6f157f8\r\nhttps://imgur.com/a/fooGyFr\r\n\r\n## After\r\nFrom this commit: 0eeba8cd2e3761088fb76d88bd5a1f23a6ee1382\r\nhttps://imgur.com/a/HoIBp0a\r\n","createdAt":"2022-08-01T14:31:42Z","labels":[],"number":122,"repository":"sablier-labs/lockup","state":"closed","title":"Should we change the type of the time variables?","type":"discussion","updatedAt":"2023-03-17T11:26:24Z","url":"https://github.com/sablier-labs/lockup/discussions/122"},{"author":"andreivladbrg","body":" I suggest the following changes:\r\n- `SablierV2UnitTest` to `SablierV2BaseTest`\r\n- `SablierV2LinearUnitTest` to `SablierV2LinearTest`\r\n-  `SablierV2Linear__Foo` to `Foo_Tests`\r\n### Example\r\n```\r\nSablierV2BaseTest is Test {}\r\n\r\nSablierV2LinearBaseTest is SablierV2BaseTest {}\r\n\r\nFoo_Tests is SablierV2LinearBaseTest {}\r\n```\r\n This way will be cleaner and will make our tests more DRY.","createdAt":"2022-09-06T13:09:27Z","labels":[],"number":134,"repository":"sablier-labs/lockup","state":"closed","title":"Change the test contracts names","type":"discussion","updatedAt":"2023-03-17T17:23:23Z","url":"https://github.com/sablier-labs/lockup/discussions/134"},{"author":"PaulRBerg","body":"A follow-up to #142.\r\n\r\n@andreivladbrg, should we also include the caller among the `Withdraw` event's arguments? This is so that we can differentiate withdrawals made by the recipient vs withdrawals made by approved operators.\r\n","createdAt":"2022-10-29T20:06:23Z","labels":[],"number":149,"repository":"sablier-labs/lockup","state":"closed","title":"Should we include the caller in the \"Withdraw\" event arguments?","type":"discussion","updatedAt":"2023-03-17T11:26:51Z","url":"https://github.com/sablier-labs/lockup/discussions/149"},{"author":"PaulRBerg","body":"## Description\r\n\r\nIt's becoming increasingly more difficult to maintain the `SablierV2Linear` and `SablierV2Cliff` contracts.  They have a lot of overlapping behavior, but because [Solidity doesn't have something equivalent to Rust traits](https://twitter.com/PaulRBerg/status/1531652974161838082), we have to maintain and test the two contracts separately. Each depends upon a slightly different `Stream` struct.\r\n\r\nReally the only argument against this merge is the gas efficiency of not having to deal with the cliff time. But is it so significant to warrant the maintenance cost?\r\n\r\nWe should do some back-of-the-napkin calculations to get an idea about the magnitude at play here. If it's a few hundred gas (say), it would totally be worth it from a development POV to merge the two contracts.\r\n\r\n## Pros\r\n\r\n1. Easier for devs to integrate Sablier V2\r\n2. Easier to maintain the contracts and the tests\r\n3. Smaller audit cost\r\n\r\n## Cons\r\n\r\n1. Higher gas cost for cliff-less users (`create` costs ~11k more, `withdraw` costs ~2k more)\r\n\r\n## Conclusion\r\n\r\nAll in all, I think that merging the two contracts would be worth it. The slightly higher gas cost should be fine. The gas cost is also influenced by the underlying ERC-20 token used for streaming, so whatever small optimization we do here might not matter as much as we'd think it does.","createdAt":"2022-06-13T16:13:11Z","labels":[],"number":47,"repository":"sablier-labs/lockup","state":"closed","title":"Should we merge the SablierV2Linear and SablierV2Cliff contracts?","type":"discussion","updatedAt":"2023-03-17T11:26:58Z","url":"https://github.com/sablier-labs/lockup/discussions/47"},{"author":"PaulRBerg","body":"In #131, @andreivladbrg made all of our contract inherit from the ERC-721 standard. The most crucial implication of that is that now there is no `recipient` field in the `Stream` struct anymore - the [`ownerOf`](https://eips.ethereum.org/EIPS/eip-721#specification) function of the ERC-721 is what gives the recipient of the stream now.\r\n\r\nWe have a terminology problem. We can keep referring to the recipient of the stream as the \"recipient\" in the code, too, by choosing to keep the `getRecipient` getters and by naming our in-memory variables as such.\r\n\r\nHowever, that incurs a little bit of additional gas (though I am not sure if it's only deployment cost that get affected or there's also a runtime overhead).\r\n\r\nIt would certainly be more gas efficient to use the `ownerOf` function directly and remove all `recipient` references. But that would create some confusion because the sender of the stream could easily be confused with the ERC-721 owner.\r\n\r\nI'm leaning towards keeping the `recipient`, since the gas overhead is small while the clarity benefits are large. But I opened this discussion to document my thinking and let you all share your feedback if you disagree.","createdAt":"2022-10-22T14:07:12Z","labels":[],"number":141,"repository":"sablier-labs/lockup","state":"closed","title":"Should we refer to the recipient as the owner?","type":"discussion","updatedAt":"2023-03-17T11:27:12Z","url":"https://github.com/sablier-labs/lockup/discussions/141"},{"author":"andreivladbrg","body":"Given that  the `createInternal` function calls `checkSegmentCounts` function that checks if the counts of segments match and if the counts are less than the `MAX_SEGMENT_COUNT`, I don't think this check from the `createWithDuration` function is still necessary:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/5f13c560f6a3c99a10899ffc95907a8bc7414d84/src/SablierV2Pro.sol#L238-L241","createdAt":"2022-07-13T11:53:42Z","labels":[],"number":96,"repository":"sablier-labs/lockup","state":"closed","title":"Should we remove the `deltaCount` check?","type":"discussion","updatedAt":"2023-03-17T11:27:06Z","url":"https://github.com/sablier-labs/lockup/discussions/96"},{"author":"PaulRBerg","body":"See the [deal](https://github.com/foundry-rs/forge-std/blob/c965b7dec2dc73d21923290cfd011d735e001f28/src/Test.sol#L111-L137) cheatcode in `forge-std`.","createdAt":"2022-07-10T21:23:42Z","labels":[],"number":95,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to use \"vm.deal\" instead of \"ERC20GodMode\" for minting ERC-20 tokens in tests","type":"discussion","updatedAt":"2023-05-09T08:15:10Z","url":"https://github.com/sablier-labs/lockup/discussions/95"},{"author":"PaulRBerg","body":"It was suggested in https://github.com/sablierhq/v2-core/discussions/34 to move the constant getters to the periphery, and we sort of reached a rough consensus on that.\r\n\r\nBut after pondering this for a while, I think that it would be better to keep the constant getters in the core contracts (`SablierV2Linear` etc.). Here's my rationale:\r\n\r\n1. The bespoke getters for each struct member will be very useful for third-party integrations and devs. Asking them to store an additional periphery contract's address just for accessing some basic data about the core contract's streams adds overhead to the complexity of integrating Sablier.\r\n2. Making a query through a periphery contract that further calls the core contract would be more expensive gas-wise than just calling the core contract.\r\n3. As per the discussion in https://github.com/sablierhq/v2-core/discussions/52, we might end up using [PRBProxy](https://github.com/paulrberg/prb-proxy) instead of building customized periphery contracts.","createdAt":"2022-06-16T09:45:14Z","labels":[],"number":59,"repository":"sablier-labs/lockup","state":"closed","title":"Suggestion to keep the getters in the core contracts","type":"discussion","updatedAt":"2023-03-17T11:22:27Z","url":"https://github.com/sablier-labs/lockup/discussions/59"},{"author":"PaulRBerg","body":"We're currently using the default [checked arithmetic](https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic) in the `decreaseAuthorization` implementation:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/5331ac43f6dcae9bc4ba1b795b89d0153ac2d7da/src/SablierV2.sol#L60-L65\r\n\r\nThis is good because it prevents underflowing `uint256`. But what if we instead used unchecked arithmetic and took the minimum between the given `amount` and the current authorization in the argument passed to `authorizeInternal`?\r\n\r\nThis would be different to the way OpenZeppelin [implements](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/ERC20.sol#L204) the `decreaseAllowance` function, but if it would save gas, it might be worth it.","createdAt":"2022-06-14T12:29:19Z","labels":[],"number":54,"repository":"sablier-labs/lockup","state":"closed","title":"Should we use unchecked arithmetic in \"decreaseAuthorization\"?","type":"discussion","updatedAt":"2023-03-17T11:22:23Z","url":"https://github.com/sablier-labs/lockup/discussions/54"},{"author":"PaulRBerg","body":"The [current](https://github.com/sablierhq/v2-core/blob/80e474b3ae88e9228d1c7a43ce7410235f9f60de/src/SablierV2Pro.sol#L107-L111) approach to find the current segment time is to loop through the segments iteratively. When the segment array has a big length, this is gas inefficient.\r\n\r\nWe could make the implementation faster by using a [binary search](https://www.geeksforgeeks.org/binary-search/) algorithm. OpenZeppelin offers a Solidity v0.8 [implementation](https://ethereum.stackexchange.com/a/129511/24693) for it.","createdAt":"2022-06-03T15:12:54Z","labels":[],"number":15,"repository":"sablier-labs/lockup","state":"closed","title":"Implement binary search algo to find the current segment more quickly","type":"discussion","updatedAt":"2023-03-17T11:22:16Z","url":"https://github.com/sablier-labs/lockup/discussions/15"},{"author":"razgraf","body":"I'm proposing we add a variant to the withdraw method that allows routing claimed funds to a specified address.\r\n\r\n```solidity\r\nfunction withdrawTo(uint256 streamId, uint256 amount, address destination) external;\r\n```\r\n\r\nDX: It might be useful to have this for certain proxy patterns, erc4626 or purely integration utility\r\nUX: It allows us to add an extra (advanced) field to the withdraw form where a user could specify the destination of funds","createdAt":"2022-05-19T16:48:42Z","labels":[],"number":6,"repository":"sablier-labs/lockup","state":"closed","title":"Variants of the \"withdraw\" method","type":"discussion","updatedAt":"2023-03-17T11:22:03Z","url":"https://github.com/sablier-labs/lockup/discussions/6"},{"author":"PaulRBerg","body":"One of the limitations of structs in Solidity is that they [don't have anything equivalent to Rust traits](https://twitter.com/PaulRBerg/status/1531652974161838082). So testing against some expected shared behavior between multiple different structs is not possible in Solidity (alas).\r\n\r\nWe could go around this though by defining constant getters for those particular struct members that we're interested in. For example, if we wanted to DRY-ify the `renounce` function (that is, move it in the `ISablierV2` contract), we would have to define only two getters: `getStreamSender` and `isStreamCancelable`.\r\n\r\nWe would of course still have to test these getters on a per-contract basis, but the number of test cases would be just 1, or 2 at worst. The `reduce` function could thus be moved to the abstract contract `ISablierV2` and tested only once.\r\n\r\n","createdAt":"2022-06-07T15:36:46Z","labels":[],"number":25,"repository":"sablier-labs/lockup","state":"closed","title":"Define constant getter for struct members so we can keep the code DRY","type":"discussion","updatedAt":"2023-03-17T11:21:59Z","url":"https://github.com/sablier-labs/lockup/discussions/25"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablierhq/v2-core/discussions/15\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **paulrberg** June  3, 2022</sup>\r\nThe [current approach](https://github.com/sablierhq/v2-core/blob/80e474b3ae88e9228d1c7a43ce7410235f9f60de/src/SablierV2Pro.sol#L107-L111) to find the current segment time is to loop through the segments iteratively. When the segment array has a big length, this is gas inefficient.\r\n\r\nWe could make the implementation faster by using a [binary search](https://www.geeksforgeeks.org/binary-search/) algorithm. OpenZeppelin offers a Solidity v0.8 [implementation](https://ethereum.stackexchange.com/a/129511/24693) for it.</div>","createdAt":"2022-06-03T15:14:10Z","labels":[],"number":138,"repository":"sablier-labs/lockup","state":"closed","title":"Implement binary search algo to find the current segment more quickly","type":"discussion","updatedAt":"2023-03-17T11:21:53Z","url":"https://github.com/sablier-labs/lockup/discussions/138"},{"author":"PaulRBerg","body":"The current approach to refer to streams within `SablierV2Linear` as linear streams might be a bit verbose, since the name of the contract itself provides a namespace.","createdAt":"2022-04-07T19:35:03Z","labels":[],"number":1,"repository":"sablier-labs/lockup","state":"closed","title":"Should we rename the \"linearStreams\" to just \"streams\" in the \"SablierV2Linear\" contract?","type":"discussion","updatedAt":"2023-03-17T11:21:48Z","url":"https://github.com/sablier-labs/lockup/discussions/1"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThis code base uses `undefined` as a falsy value explicitly provided by users.\r\n\r\nThis is problematic because `undefined` is what TypeScript uses when the parameter is not provided. Thus, `undefined` has a **dual** meaning throughout our code base. The meaning is context-dependent, and this can easily lead to errors.\r\n\r\n## Solution\r\n\r\nWhen a falsy value is explicitly expected, use `null`.\r\n\r\n```diff\r\n+ function myFunction(foo: number | null) {\r\n- function myFunction(foo: number | undefined) {\r\n  // ...\r\n}\r\n```\r\n\r\nIn this way, `null` becomes known as the 'expected falsy value', whereas `undefined` is reserved as the 'implicit falsy value'.\r\n\r\nClear and crisp separation of concerns and meanings.\r\n\r\n### Benefit\r\n\r\nWe can now have both expected falsy and implicit falsy!\r\n\r\n```typescript\r\nfunction myFunction(foo?: number | null) {\r\n  // ...\r\n}\r\n```\r\n\r\n## References\r\n\r\n- https://github.com/sablier-labs/interfaces/issues/400\r\n- https://github.com/sablier-labs/indexers/pull/92\r\n- [Notion: Optionality ≠ Lack of value](https://www.notion.so/sablier/2406105ad8b680c5b259c5637f742cac?v=2406105ad8b680348fbe000cb9270487&p=2416105ad8b680029ee3ecf8237d8177&pm=c)\r\n\r\ncc @sablier-labs/frontend","createdAt":"2025-08-13T13:00:18Z","labels":[],"number":1771,"repository":"sablier-labs/interfaces","state":"open","title":"Suggestion to use \"null\" as an explicit falsy value instead of \"undefined\"","type":"discussion","updatedAt":"2025-08-13T13:35:41Z","url":"https://github.com/sablier-labs/interfaces/discussions/1771"},{"author":"PaulRBerg","body":"## High Priority\r\n\r\n### HP-1: Code Repetition\r\n\r\nThis is the most critical finding in this report. **If you take away only one thing from reading this document, it's that extensive code repetition exists throughout the codebase, and I think this requires our attention.**\r\n\r\nCode repetition occurs across:\r\n\r\n- Flow and Lockup streams\r\n- Flow, Lockup, and Airdrops\r\n- GraphQL fragments and queries (resolved in [PR #1712](https://github.com/sablier-labs/interfaces/pull/1712))\r\n- The modals and the forms\r\n- Multiple other areas throughout the codebase\r\n\r\n#### Why it's Bad\r\n\r\n1. **Maintenance nightmare** - When we need to fix a bug or update functionality, we have to hunt down and modify the same code in multiple places. This increases the risk of missing spots and introducing inconsistencies.\r\n\r\n2. **Difficult to ship new features** - Development velocity is slowed down.\r\n\r\n3. **Bundle size bloat** - Repeated code unnecessarily increases our JavaScript bundle size, leading to slower load times and poor performance, especially on mobile devices.\r\n\r\n#### Example\r\n\r\nSee [issue #1716](https://github.com/sablier-labs/interfaces/issues/1716).\r\n\r\n- `useAirdropDashboardWatcher`\r\n- `useFlowDashboardWatcher`\r\n- `useLockupDashboardWatcher`\r\n\r\nExample fix:\r\n\r\n```typescript\r\nexport function useDashboardWatcher<RT extends QueryResult>(\r\n  useQueryHook: () => RT,\r\n  targetPath: string,\r\n  reroute = false,\r\n);\r\n```\r\n\r\n### HP-2: Deep Nesting Patterns\r\n\r\nThe codebase contains many instances of deep nesting patterns:\r\n\r\n```typescript\r\nif (foo) {\r\n  if (bar) {\r\n    if (baz) {\r\n      // do something\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis pattern creates code that is both difficult to read and challenging to refactor.\r\n\r\nSee [issue #1689](https://github.com/sablier-labs/interfaces/issues/1689).\r\n\r\n#### Solution\r\n\r\nEarly returns!\r\n\r\n```typescript\r\nif (!foo) {\r\n  // do something\r\n  return;\r\n}\r\nif (!bar) {\r\n  // do something\r\n  return;\r\n}\r\n// do something\r\n```\r\n\r\n### HP-3: Lack of Explanatory Comments\r\n\r\nThere are many cases of footguns and complicated behaviors (from external libraries, etc.) in the Interfaces repo that\r\nwould benefit from explanatory comments.\r\n\r\nExample: [issue #1716](https://github.com/sablier-labs/interfaces/issues/1716).\r\n\r\n### HP-4: Error Management\r\n\r\nDebugging the Interfaces is difficult, and we don't have a robust pipeline on Sentry.\r\n\r\nI've compiled a list of issues in this [meta issue #1587](https://github.com/sablier-labs/interfaces/issues/1587) to\r\nmake our error management more robust.\r\n\r\n## Medium Priority\r\n\r\n### MP-1: Problematic `isNilOrEmptyString` and `isNil` Usage\r\n\r\nTwo issues here:\r\n\r\n- **Reduced readability**: `if (foo)` is far more readable than `!_.isNilOrEmptyString(foo)`. The latter also inverts\r\n  the conventional approach to checking truthy values.\r\n- **Redundant type checking**: These utility functions prevent TypeScript from detecting unnecessary checks. For\r\n  instance, `isSearched` is a boolean that cannot be undefined, yet it's checked\r\n  [here](https://github.com/sablier-labs/interfaces/blob/30fffc0/apps/client/src/hooks/useLockupDashboardTable.ts#L63).\r\n\r\nSee [issue #1658](https://github.com/sablier-labs/interfaces/issues/1658).\r\n\r\n#### Solution\r\n\r\n- Use direct truthy/falsy comparisons: `if (foo)` and `if (!foo)`\r\n- For boolean variables, use the built-in `Boolean()` syntax for cleaner, less verbose code\r\n\r\n### MP-2: Oversized Directories\r\n\r\nSome directories contain too many files, such as the 87 files in `packages/hooks/*.ts`.\r\n\r\nSee [issue #1724](https://github.com/sablier-labs/interfaces/issues/1724).\r\n\r\n### MP-3: Redundant Operations\r\n\r\nThe codebase performs unnecessary operations, such as converting the same string to lowercase multiple times across\r\ndifferent sections.\r\n\r\nThese operations should be centralized to a few functions, which should be unit-tested.\r\n\r\n### MP-4: Switch to `bun`\r\n\r\nSee [issue #1549](https://github.com/sablier-labs/interfaces/issues/1549).\r\n\r\n### MP-5: Remove Redundant `package.json` Files\r\n\r\nSee [issue #1721](https://github.com/sablier-labs/interfaces/issues/1721).\r\n\r\n### MP-6: Easy to Trigger Infinite Re-renders\r\n\r\nSeveral patterns throughout the codebase can easily trigger infinite re-renders:\r\n\r\n- [Issue #1716](https://github.com/sablier-labs/interfaces/issues/1716)\r\n- [Issue #1719](https://github.com/sablier-labs/interfaces/issues/1719)\r\n\r\nAdditional instances likely exist. Every implementation using `router.push` should be double-checked.\r\n\r\n## Low Priority\r\n\r\n### LP-1: Remove Unnecessary Types\r\n\r\nRemove superfluous types such as `IEnvironmentVariable`.\r\n\r\nSee [issue #1722](https://github.com/sablier-labs/interfaces/issues/1722).\r\n\r\n### LP-2: Migration to Biome\r\n\r\nBiome offers significantly faster performance and simpler configuration compared to the current Prettier + ESLint setup.\r\n\r\nSee [issue #1556](https://github.com/sablier-labs/interfaces/issues/1556).\r\n\r\n### LP-3: `bn()` Utility\r\n\r\nSee [issue #1676](https://github.com/sablier-labs/interfaces/issues/1676).\r\n\r\n### LP-4: Cleaner `_.find` and `_.some` Syntax\r\n\r\nSee [issue #1685](https://github.com/sablier-labs/interfaces/issues/1685).","createdAt":"2025-06-26T21:18:56Z","labels":[],"number":1725,"repository":"sablier-labs/interfaces","state":"open","title":"Metamorphic Findings","type":"discussion","updatedAt":"2025-08-12T15:52:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/1725"},{"author":"tukwan","body":"## Solana UI & Tech Debt\r\n\r\nTo reduce technical debt and unlock new possibilities, as also @razgraf suggested, I built a [POC](https://github.com/sablier-labs/solsab-ui) Solana app using the Next.js App Router. I [integrated](https://github.com/sablier-labs/interfaces/compare/feat/solana-app?expand=1) it into our interfaces repo and successfully [reused](https://github.com/sablier-labs/interfaces/blob/4a4620ab743e39d264868c007643cee7481b1e53/apps/solsab/src/components/header/header.tsx#L5) styled-components from our components library. However, this approach has surfaced several challenges.\r\n\r\n## Problems\r\n\r\n### **1. Rendering Issues**\r\n\r\n- The styled-components library isn’t fully compatible with React Server Components (RSC), introduced in the Next.js App Router. Since it relies on React Context—which RSC disallows—it must fall back on a global context.\r\n- Every component that uses styled-components must include the `'use client'` directive, forcing client-side rendering even when server-side rendering would be beneficial.\r\n- A `StyledComponentsRegistry` [workaround](https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-components) is required, adding complexity.\r\n\r\n### **2. Compatibility Concerns**\r\n\r\n- Next.js now recommends `styled-components@6` for integration, but our repo currently uses v5. This discrepancy may or may not lead to unpredictable issues over time.\r\n- Styled-components v5 works with Next.js 14 and React 18 but breaks in Next.js 15 and React 19 workaround part, likely due to type mismatches in React 19.\r\n\r\n### **3. Migration Challenges**\r\n\r\n- The primary blocker for now is styled-components. A potential long-term solution would be transitioning to Tailwind CSS (or another modern industry-standard solution) that is fully compatible with the Next.js App Router.\r\n\r\n## **Potential Solutions**\r\n\r\n### **1. Maintain the Current Setup**\r\n\r\n- Continue using Next.js 14 pages with styled-components as-is.\r\n- This approach ensures stability and allows us to ship the product faster.\r\n- Later, we can adopt Tailwind CSS (or another solution) through a gradual migration.\r\n\r\n### **2. Use the App Router**\r\n\r\n- Utilize the Next.js App Router with a styled-components [workaround](https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-components) while progressively refactoring components to Tailwind CSS (or an alternative).\r\n- This approach enables new features to leverage the App Router while phasing out styled-components, enhancing [performance](https://nextjs.org/docs/app/building-your-application/rendering/server-components#benefits-of-server-rendering), SEO, and reducing technical debt. It may also help resolve old rendering [issues](https://github.com/sablier-labs/interfaces/discussions/1188#discussion-7481689).\r\n- Because of the many shared dependencies in the current interfaces repo, the new setup is more unstable and may cause delays.\r\n\r\n## **Feedback**\r\n\r\nI'm leaning a bit more toward the second option since reducing technical debt can pay off in the long run. However, if fast product shipping is the priority, I think the first option might be better. WDYT?\r\n\r\n---\r\n<details><summary>References</summary>\r\n\r\n- https://github.com/sablier-labs/interfaces/compare/feat/solana-app?expand=1\r\n- https://github.com/sablier-labs/solsab-ui\r\n- https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-components\r\n- https://styled-components.com/docs/advanced#app-directory\r\n- https://medium.com/@felipe.nava/using-styled-components-in-nextjs-app-router-35295688e27a\r\n- https://nextjs.org/docs/app/building-your-application/rendering/server-components#benefits-of-server-rendering\r\n- https://github.com/styled-components/styled-components/issues/4025#issuecomment-1575284022\r\n- https://github.com/styled-components/styled-components/issues/3856#issuecomment-1299331697\r\n- https://github.com/sablier-labs/interfaces/discussions/1188\r\n</details> \r\n","createdAt":"2025-02-14T09:38:35Z","labels":[],"number":1428,"repository":"sablier-labs/interfaces","state":"open","title":"Solana UI & Tech Debt","type":"discussion","updatedAt":"2025-08-12T12:33:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/1428"},{"author":"PaulRBerg","body":"# Two Principles for a Happy Team\r\n\r\nFollowing the [Metamorphic Refactor](https://github.com/sablier-labs/interfaces/discussions/1726) discussion, going\r\nforward, I'd like to ask @sablier-labs/frontend to embrace these two principles:\r\n\r\n## 1. Metamorphic Mindset\r\n\r\nWe should aim to write highly metamorphic software—easy to refactor, not just to run.\r\n\r\nHow quickly we can refactor and add new features is infinitely more important than whether the code has a particular\r\nfeature at any given time (or whether we have ticked an item off our TODO list).\r\n\r\nIn practice, this means:\r\n\r\n**Ruthlessly de-duplicating code and minimizing repetitions. TypeScript gives us the tools to achieve this with\r\nabstractions and generics—let's use them!**\r\n\r\nThe concept of local vs. global maxima is relevant here: codebases with extensive repetition get stuck at local maxima, while\r\nhighly metamorphic codebases can easily refactor toward global maxima—enabling us to deliver whatever users want,\r\nquickly.\r\n\r\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/fc204736-9f85-4781-9631-4f9b8627d637\"/>\r\n\r\n### Beating the Averages\r\n\r\n> [!NOTE]\r\n>\r\n> Paul Graham's [Beating the Averages](https://www.paulgraham.com/avg.html) essay is relevant reading. Written in 2001\r\n> about Lisp, but the principles translate directly to this Metamorphic Mindset.\r\n\r\n## 2. Explanations, Explanations Everywhere\r\n\r\nJust like all observation is theory-laden, no code is self-explanatory. We make conjectures when reading others' code,\r\noften different from our colleagues' intent.\r\n\r\nIt's helpful to add explanatory comments above code that involves:\r\n\r\n- **Footguns** - single parameter changes that can crash the app or create painful debugging experiences. Example:\r\n  [issue #1716](https://github.com/sablier-labs/interfaces/issues/1716).\r\n- **Undocumented/unclear external library behavior.**\r\n- **Complex features/behavior** that benefit from English explanation.\r\n\r\n> [!TIP]\r\n>\r\n> We can use the JSDoc tags @see and @file:// syntax to cross-reference internet links and local files.\r\n","createdAt":"2025-06-26T21:23:47Z","labels":[],"number":1727,"repository":"sablier-labs/interfaces","state":"open","title":"Two Coding Principles for a Happy Team","type":"discussion","updatedAt":"2025-07-28T08:20:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/1727"},{"author":"razgraf","body":"Ongoing thread researching indexing solutions for Solana.\r\n\r\nImportant notes:\r\n- We need a solution that grants us access to more state not just the context of the current event being indexed.\r\n- We want to consume GraphQL at the end of the flow\r\n- Self-hosting is possible but it'd be best not to have to do it","createdAt":"2025-07-17T13:28:03Z","labels":[],"number":1755,"repository":"sablier-labs/interfaces","state":"open","title":"Researching Solana Indexers","type":"discussion","updatedAt":"2025-07-23T14:18:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/1755"},{"author":"PaulRBerg","body":"# Metamorphic Refactor\r\n\r\n## Problem Situation\r\n\r\nIn an effort to speed up our EVM deployments and lower our maintenance cost, I've spent the last two months building:\r\n\r\n- The [SDK package](https://github.com/sablier-labs/sdk)\r\n- The new [Indexers repo](https://github.com/sablier-labs/indexers/pull/92)\r\n- The new [auto-generated Docs](https://github.com/sablier-labs/docs/pull/308)\r\n\r\nThese are ready for production.\r\n\r\nI've also started integrating this work into the Interfaces repo via [PR 1712](https://github.com/sablier-labs/interfaces/pull/1712). While working on the integration, I got stuck several times, which led me to discover many opportunities for improvement. I've prepared a detailed report with my findings here: [Metamorphic Findings](https://github.com/sablier-labs/interfaces/discussions/1725) report, but here are the key areas I'd like us to consider:\r\n\r\n1. Code repetition → by far, the biggest one.\r\n2. Deep nesting patterns.\r\n3. Explanatory comments.\r\n4. More robust error management.\r\n\r\n### Chubby Kid Analogy\r\n\r\nTo help illustrate where we are, imagine our codebase as a teenager who's been growing fast and developing some habits that aren't serving him well. He's been consuming too much sugar (repeated code patterns), which is starting to affect his energy and agility. The complexity is making it harder for him to move quickly and adapt to new situations. He has become a chubby kid.\r\n\r\nWhen he tries to make changes or tackle new challenges, he finds himself getting winded more easily than he'd like.\r\nSmall adjustments in one area often require compensating changes in 2-3 other places. Even their development environment\r\nruns hot under the workload (Next.js in dev mode really heats up my M4 Max).\r\n\r\nThe good news? This is totally fixable.\r\n\r\n## Solutioning and Planning Ahead\r\n\r\nWith the Solana launch approaching, we have two options for implementing the Metamorphic Refactor (MR):\r\n\r\n1. Tackle the MR before Solana (my recommendation).\r\n2. Address the MR after Solana.\r\n\r\n### Why I'd Suggest Going First\r\n\r\nHere's my thinking:\r\n\r\n1. I believe the MR is the single, most impactful investment we can make in our codebase right now (i.e. `priority: 0`). It's the foundation that will make every future feature — including Solana — easier to build and maintain.\r\n2. Addressing these patterns now will actually make us faster in the long run. If we wait until after Solana, we'll be working with more complex interdependencies, which may slow down our Q4 roadmap.\r\n\r\nI'm confident we can still hit our August 31st launch target with this approach:\r\n\r\n- During and after EthCC, I'll focus entirely on preparing the MR.\r\n- I'll get the PR ready for your review.\r\n- Once we're aligned, you can focus on implementing it.\r\n- Then you can rebuild the Solana work on the new foundation (manually, not via rebase).\r\n\r\n### Your Decision\r\n\r\nThat said, this is ultimately your call. I respect whatever direction you choose, and I'm committed to making either\r\npath work.\r\n\r\nI would like to get [PR 1712](https://github.com/sablier-labs/interfaces/pull/1712_) merged soon, and it would be helpful if we could start incorporating some of these patterns in the Solana branch going forward.\r\n\r\nAll I ask is to get hasty and avoid a long-winded debate. If you have not been persuaded after reading this discussion and the associated report, that's fine.\r\n\r\nHappy to discuss this over Zoom or in person in Cannes—whatever works best for you.\r\n\r\n## Nota Bene\r\n\r\nBuilding safe and scalable software is hard work. Very hard. I'm really proud of what we've accomplished with the Sablier UI so far.\r\n\r\nI also believe the issues reported are serious, and I see this as an opportunity for improvement—both on the technical\r\nside and in our team cohesion and productivity.\r\n","createdAt":"2025-06-26T21:20:29Z","labels":[],"number":1726,"repository":"sablier-labs/interfaces","state":"open","title":"Metamorphic Refactor","type":"discussion","updatedAt":"2025-07-16T08:21:46Z","url":"https://github.com/sablier-labs/interfaces/discussions/1726"},{"author":"PaulRBerg","body":"I don't see any reason for using `distinct_on` in the Envio queries. This is a globally unique field.\r\n\r\n```typescript\r\nexport const getStreams = gql(/* GraphQL */ `\r\n  query getStreams($first: Int!, $skip: Int!, $where: Stream_bool_exp!) {\r\n    Stream(\r\n      distinct_on: [subgraphId]\r\n      limit: $first\r\n      offset: $skip\r\n      order_by: { subgraphId: desc }\r\n      where: $where\r\n    ) {\r\n      ...StreamFragment\r\n    }\r\n  }\r\n`);\r\n```\r\n\r\nWhy are we using this query filter, @razgraf, @gavriliumircea?","createdAt":"2025-07-13T14:03:12Z","labels":[],"number":1748,"repository":"sablier-labs/interfaces","state":"open","title":"Why is `distinct_on` needed for the Envio queries?","type":"discussion","updatedAt":"2025-07-15T13:47:26Z","url":"https://github.com/sablier-labs/interfaces/discussions/1748"},{"author":"PaulRBerg","body":"## Question\r\n\r\nThe Envio response data is converted to The Graph's format:\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/subgraphs/src/client/middleware.ts#L22-L34\r\n\r\nSo that the app only has to handle a single data formt. That makes sense.\r\n\r\nBut I would like to understand why we need both singular (object) and plural (array)?\r\n\r\n## Example\r\n\r\nMy understanding is that an input like this:\r\n\r\n```json5\r\n// Input:\r\n{ Action: [{id: 1}, {id: 2}], Asset: {name: \"test\"} }\r\n```\r\n\r\nWould be converted to an output like this:\r\n\r\n```json6\r\n// Input:\r\n{ Action: [{id: 1}, {id: 2}], Asset: {name: \"test\"} }\r\n\r\n// Output:\r\n{ \r\n  Action: [{id: 1}, {id: 2}],\r\n  action: {id: 1},           // first item from array\r\n  actions: [{id: 1}, {id: 2}], // full array\r\n  Asset: {name: \"test\"},\r\n  asset: {name: \"test\"},     // the value itself\r\n  assets: []                 // empty array since not originally an array\r\n}\r\n```\r\n\r\nWhy do we need `action` (singular) and `assets` (plural, but empty)?\r\n\r\n@razgraf @gavriliumircea","createdAt":"2025-07-01T08:05:31Z","labels":[],"number":1729,"repository":"sablier-labs/interfaces","state":"closed","title":"Why add both singular and plural in the indexer middleware (transforming Envio response to The Graph)?","type":"discussion","updatedAt":"2025-07-15T10:00:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/1729"},{"author":"razgraf","body":"As usage grows and we'll start seeing DAOs create tens if not hundreds of streams, we may see a need for more fine-grained control over the stream lists/tables displayed in the app.\r\n\r\nThis discussion is meant to aggregate proposals and requests for advanced table functionality like filtering, sorting or click-to-select (search).","createdAt":"2023-06-26T16:35:36Z","labels":["type: feature"],"number":480,"repository":"sablier-labs/interfaces","state":"open","title":"Feature request: additional functionality for tables","type":"discussion","updatedAt":"2025-07-14T15:09:20Z","url":"https://github.com/sablier-labs/interfaces/discussions/480"},{"author":"PaulRBerg","body":"Created this to track feature requests. Just received a request from Velvet:\r\n\r\n<img width=\"400\" alt=\"SCR-20250709-sxds\" src=\"https://github.com/user-attachments/assets/f495fa49-7d2e-47b1-b89c-8c9a28b9c1f4\" />\r\n\r\nThis is not high-priority since alternatives exist (e.g., creating the stream programmatically or creating it from the Safe UI). However, if we keep getting requests for this, we should consider it.\r\n\r\nRelated: https://github.com/sablier-labs/interfaces/discussions/1743","createdAt":"2025-07-09T18:51:01Z","labels":[],"number":1742,"repository":"sablier-labs/interfaces","state":"open","title":"Custom sender addresses in the create stream form","type":"discussion","updatedAt":"2025-07-10T11:40:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/1742"},{"author":"PaulRBerg","body":"Random idea, but I wonder if it's possible to rely on an English dictionary for the locales `words`, so that we could delete these translations (and hence lower the maintenance cost!):\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/f977898d04f5896e44b42372e0b67d3309bf9634/packages/locales/src/global/en/global.json#L537\r\n\r\ncc @sablier-labs/frontend.\r\n\r\n","createdAt":"2025-07-09T19:03:10Z","labels":[],"number":1745,"repository":"sablier-labs/interfaces","state":"open","title":"Investigate whether it's possible to use a dictionary for the \"words\" locales","type":"discussion","updatedAt":"2025-07-09T19:03:12Z","url":"https://github.com/sablier-labs/interfaces/discussions/1745"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n1. Some users want [non-public withdraw function](https://github.com/sablier-labs/command-center/discussions/158).\r\n2. Some users want [custom sender addresses](https://github.com/sablier-labs/interfaces/discussions/1742).\r\n\r\n## Solution\r\n\r\nProvide additional inputs in the create stream form that would be classified as \"Advanced\". Include the features requested above there.","createdAt":"2025-07-09T18:55:38Z","labels":[],"number":1743,"repository":"sablier-labs/interfaces","state":"open","title":"Advanced Settings toggle for streams","type":"discussion","updatedAt":"2025-07-09T18:55:39Z","url":"https://github.com/sablier-labs/interfaces/discussions/1743"},{"author":"PaulRBerg","body":"Keywords: dates,fixed dates,timer,timing,ux,user experience\r\n\r\nAs I said [here](https://github.com/sablier-labs/interfaces/issues/1390#issuecomment-2631551706).\r\n\r\nIt seems to me that the \"Fixed Dates\" vs \"Duration\" toggle is quite difficult to see. Should we highlight it some more?\r\n\r\nOr maybe we should explicitly ask the user what kind of vesting they want — relative or ranged.\r\n\r\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1d9e07e8-7b11-4282-995e-85a0c06c26db\" />\r\n\r\ncc @sablier-labs/frontend","createdAt":"2025-02-04T16:01:50Z","labels":[],"number":1399,"repository":"sablier-labs/interfaces","state":"open","title":"Improving the UX for the timing toggle (making it more visible)","type":"discussion","updatedAt":"2025-07-09T14:17:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/1399"},{"author":"razgraf","body":"The css-in-js library we're using, `styled-components` has recently been moved to maintenance-mode, which, along-side React's latest developments (e.g. server components) may lead to a slow deprecation. This thread will facilitate R&D on whether we should keep the styling process as-is or figure out a refactoring strategy and move to another system. \r\n\r\nThe refactor cost itself is far from negligible, which is why keeping `styled-components` in the codebase is also an option, at least until we reach profitability and the team grows. \r\n\r\nOn the other hand, apart from eliminating technical debt, there already have been instances of `styled-components` being incompatible with features we may need e.g. Miko's notes on it not being compatible with recent versions of React/Next in https://github.com/sablier-labs/interfaces/discussions/1428 .\r\n\r\n**Context**\r\n- https://medium.com/@kaiqueperezz/is-styled-components-reaching-the-end-of-the-road-e58084486667\r\n- https://opencollective.com/styled-components/updates/thank-you?trk=public_post_comment-text\r\n- https://www.reddit.com/r/reactjs/comments/1jlu01u/styledcomponents_entering_maintenance_mode/\r\n\r\n\r\n**Questions**\r\n- Should we move entirely away from css-in-js?\r\n- If no, is keeping `styled-components` an option? If no, should we move to `emotion` or something similar?\r\n- If yes, is Tailwind the best approach? And if so, what's the easiest way for the refactor to happen?\r\n\r\n","createdAt":"2025-05-04T09:59:59Z","labels":[],"number":1624,"repository":"sablier-labs/interfaces","state":"open","title":"Alternatives to styled-components (being deprecated)","type":"discussion","updatedAt":"2025-07-09T14:11:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/1624"},{"author":"maxdesalle","body":"Had a call with [bloXroute](https://bloxroute.com/), a sort of [GasHawk](https://www.gashawk.io/) competitor. They are basically an MEV/mempool/transaction speeder service. Wasn’t immediately clear to me how they could be useful, but they proposed an interesting idea.\r\n\r\nA way we could generate an additional revenue stream would be to send transactions created via our user interface to their cloud API, they execute it, and if their system finds a way to execute the transaction faster or for cheaper gas, they execute it, and we get a portion or the entirety of the gas saved. We could also, of course, give that back to the user. Anyway, the point being that this could be a new way for us to monetize in a discrete way our protocol.\r\n\r\ncc @sablier-labs/engineers for feedback","createdAt":"2024-01-19T14:50:17Z","labels":[],"number":832,"repository":"sablier-labs/interfaces","state":"closed","title":"Use a gas saving RPC to lower transaction costs and potentially make revenues","type":"discussion","updatedAt":"2025-07-09T14:07:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/832"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\nThe code base doesn't currently have any unit tests, but it would be helpful to have some.\r\n\r\nUnit tests provide greater confidence that the internal logic of the front-end apps works as expected.\r\n\r\n## Targets\r\n\r\nThe packages where unit tests would be particularly helpful are:\r\n\r\n- `utils`\r\n- `hooks`\r\n- `machines` (maybe)\r\n- Some parts of the apps (maybe)\r\n\r\n## Tooling\r\n\r\nIt looks like Jest and Vitest are both good tools to use in a Next.js-powered monorepo:\r\n\r\nhttps://github.com/belgattitude/nextjs-monorepo-example#53-tests\r\n\r\n## Related Issues\r\n\r\n- #331","createdAt":"2023-06-10T11:23:34Z","labels":["backlog"],"number":396,"repository":"sablier-labs/interfaces","state":"open","title":"Unit tests","type":"discussion","updatedAt":"2025-07-01T08:07:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/396"},{"author":"PaulRBerg","body":"My understanding is that the React Context is pretty bad, and it can easily result into re-rendering the entire React component tree.\r\n\r\nWe already have Zustand integrated for the Lockup, Flow, etc. stores. Why not use it for the table, too?\r\n\r\ncc @sablier-labs/frontend\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/contexts/src/Table/provider.tsx#L31-L41","createdAt":"2025-06-26T20:58:21Z","labels":[],"number":1723,"repository":"sablier-labs/interfaces","state":"closed","title":"Why are we using the React Context API for the Table?","type":"discussion","updatedAt":"2025-07-09T18:46:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/1723"},{"author":"razgraf","body":"[Bun](https://bun.sh/) is a new tool promising to deliver an all-in-one JS kit for developers. It brings faster install and startup times (8ms), it has native support for TS (as well as annoying lil things like parallel support for CJS and ESM) and handled module caching much faster than PNPM/YARN (ofc, with some tradeoffs).\r\n\r\nSome more research is required as Bun was literally launched this week but here are a few articles comparing Bun with existing solutions:\r\n- https://github.com/directus/directus/discussions/19643\r\n- https://javascript.plainenglish.io/npm-yarn-pnpm-bun-install-real-app-benchmarking-72c475498024\r\n- https://www.youtube.com/watch?v=1xoy8Q5o8ws\r\n- https://www.youtube.com/watch?v=EVMMoDWN79E","createdAt":"2023-09-15T09:36:46Z","labels":[],"number":579,"repository":"sablier-labs/interfaces","state":"closed","title":"Research using Bun","type":"discussion","updatedAt":"2025-06-26T19:59:59Z","url":"https://github.com/sablier-labs/interfaces/discussions/579"},{"author":"smol-ninja","body":"### Problem\r\n\r\nIn VCA campaigns, users have an incentive to claim near the end of the campaign. This creates two potential risks:\r\n\r\n1.  A misconfigured campaign won't get detected until the end. \r\n2. In case of a correctly configured campaign, the campaign owner could misuse the grace period, which begins near the end, and clawback funds.\r\n\r\n### Solutions\r\n\r\n### Solution 1: Checkbox\r\nWe could implement a checkbox before contract deployment that requires the user to confirm the following statements:\r\n\r\n1. I confirm that the Merkle Root is valid.\r\n2. I confirm that I will not misuse the grace period, during which I can claw back all funds from the campaign..\r\n\r\n<img width=\"405\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0c0d446a-57b1-4b6a-97d4-cb774b6de0a9\" />\r\n\r\nThough this does not solve the problem, this ensures that all campaign creators understand these risks.\r\n\r\n### Solution 2: Test Recipient\r\n\r\nAnother possible approach is to include a test recipient (either us or the campaign creator) with a very small allocation. This recipient would immediately claim their allocation after the campaign is created (either automatically through the UI or manually later), verifying that the claim process works as expected. This would also initiate the grace period early. However, implementing this would require (i) consent from the campaign creator (ii) changes to the CSV file.\r\n\r\nOpening this issue for discussion and feedback.","createdAt":"2025-03-17T13:12:41Z","labels":["type: feature","priority: 3","effort: medium","work: complicated"],"number":1523,"repository":"sablier-labs/interfaces","state":"open","title":"Preventing potential misuses of grace period in VCA campaigns","type":"discussion","updatedAt":"2025-06-24T11:56:26Z","url":"https://github.com/sablier-labs/interfaces/discussions/1523"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThere are users who want to use Sablier to park their assets for 20+ years, as evidence by this exchange of comments on YouTube (cc @maxdesalle):\r\n\r\n> [!NOTE]\r\n> We have recently gotten [some attention](https://x.com/PaulRBerg/status/1928066084038389867) with the [Reddit thread](https://www.reddit.com/r/ethereum/comments/1kxtua0/leave_inheritance_money_after_death_monthly) about using Sablier for leaving inheritance money.\r\n\r\n## Solution\r\n\r\n### Quick'N'Dirty Solution: Etherscan\r\n\r\nRecommend using the [Etherscan guide](https://docs.sablier.com/guides/lockup/etherscan).\r\n\r\n### Proper Solution: IPFS\r\n\r\nBuild a simple version of our API for claiming streams (not airdrops), and host it on IPFS.\r\n\r\nThe app should not rely on any GraphQL indexer — only on RPC data. Ideally, the user would provide their stream IDs. We could provide a guide for how to find out this value, e.g., by looking up the metadata of the NFTs in their wallet.\r\n\r\n## Open-Ended Question\r\n\r\nWill a fee be charged in the simple IPFS app? If not, this would create an incentive for users to use that basic UI to avoid the fees in the main UI. But if we do charge a fee, users could fork the UI and remove the fee from the tx. However:\r\n\r\n1. This problem may be alleviated by keeping the UI code closed-source.\r\n2. This won't be a problem after we add ETH fees in the Flow/Lockup contracts.\r\n\r\n## Feedback\r\n\r\nRelated: [Lite app discussion](https://github.com/sablier-labs/interfaces/discussions/930)\r\n\r\ncc @sablier-labs/everybody for feedback (not urgent, we can talk about it later, or maybe in person at EthCC).","createdAt":"2025-06-12T14:05:57Z","labels":[],"number":1705,"repository":"sablier-labs/interfaces","state":"open","title":"IPFS deployment to provide reassurance for long-term users","type":"discussion","updatedAt":"2025-06-17T10:07:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/1705"},{"author":"PaulRBerg","body":"@sablier-labs/frontend\r\n\r\n1. We're using 120 everywhere else (not just Solidity; docs, deployments, indexers, etc.)\r\n2. All of our devices' screens are big enough nowadays to fit at least 120 characters\r\n3. Some code snippets look really ugly with a print width of 80, e.g.\r\n\r\n<img width=\"300\" alt=\"SCR-20250531-rhfe\" src=\"https://github.com/user-attachments/assets/4aa2f5d9-1ebe-4c95-a64f-2ac0d3ff979a\" />\r\n\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/.prettierrc.yml#L3","createdAt":"2025-05-31T16:53:28Z","labels":[],"number":1677,"repository":"sablier-labs/interfaces","state":"closed","title":"Can we plz increase the `printWidth` to 120","type":"discussion","updatedAt":"2025-06-06T12:27:31Z","url":"https://github.com/sablier-labs/interfaces/discussions/1677"},{"author":"PaulRBerg","body":"@razgraf @gavriliumircea\r\n\r\nin both Flow and Lockup, these queries do not appear to be used anywhere in the runtime code. Only the `getActions_` and `getStreams_` queries are run.\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/flow/queries.ts#L777\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/flow/queries.ts#L796\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/flow/queries.ts#L815","createdAt":"2025-05-30T11:24:56Z","labels":[],"number":1663,"repository":"sablier-labs/interfaces","state":"closed","title":"Can you confirm the \"getStreamIds_\" queries are unused and can be safely deleted?","type":"discussion","updatedAt":"2025-06-03T11:45:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/1663"},{"author":"PaulRBerg","body":"I am working on a massive DRY-ification of the GraphQL fragments and queries, and I hit a blocker when working with these fragments here:\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/lockup/fragments.ts#L123-L128\r\n\r\nAnd here:\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/airdrop/fragments.ts#L120-L122\r\n\r\nThe GraphQL Code Generator [doesn't support template literals](https://github.com/dotansimha/graphql-code-generator/discussions/9600) (unfortunately), so we cannot reuse the fragments if they differ in any way.\r\n\r\nDo we truly need this filter `first: 1000` or can we remove it, @razgraf?\r\n\r\nI don't think there are any streams with more than 1000 segments/tranches. This is prohibited by the block gas limit, and in historical versions, by the `MAX_COUNT` immutable variables.","createdAt":"2025-05-30T10:05:57Z","labels":[],"number":1661,"repository":"sablier-labs/interfaces","state":"closed","title":"Are the \"first: 1000\" filters necessary or can we remove them?","type":"discussion","updatedAt":"2025-06-03T12:28:11Z","url":"https://github.com/sablier-labs/interfaces/discussions/1661"},{"author":"PaulRBerg","body":"I am getting this error when building the app from `main` and running it on `localhost`:\r\n\r\n> crash.ts:93 ClientError: auth error: domain not authorized by user: {\"response\":{\"errors\":[{\"message\":\"auth error: domain not authorized by user\"}],\"status\":200\r\n\r\n<details><summary>Details</summary>\r\n<p>\r\n\r\n```\r\ncrash.ts:93 ClientError: auth error: domain not authorized by user: {\"response\":{\"errors\":[{\"message\":\"auth error: domain not authorized by user\"}],\"status\":200,\"headers\":{\"map\":{\"content-type\":\"application/json\"}}},\"request\":{\"query\":\"query getStreams_BySender_Or_ByRecipient($first: Int!, $skip: Int!, $chainId: BigInt!, $recipient: Bytes!, $sender: Bytes!, $subgraphId: BigInt!) {\\n  streams(\\n    first: $first\\n    skip: $skip\\n    orderBy: subgraphId\\n    orderDirection: desc\\n    where: {or: [{and: [{sender: $sender}, {subgraphId_lt: $subgraphId}, {chainId: $chainId}]}, {and: [{proxender: $sender}, {subgraphId_lt: $subgraphId}, {chainId: $chainId}]}, {and: [{recipient: $recipient}, {subgraphId_lt: $subgraphId}, {chainId: $chainId}]}]}\\n  ) {\\n    ...StreamFragment\\n  }\\n}\\n\\nfragment AssetFragment on Asset {\\n  id\\n  address\\n  chainId\\n  decimals\\n  name\\n  symbol\\n}\\n\\nfragment BatchFragment on Batch {\\n  id\\n  label\\n  size\\n}\\n\\nfragment ContractFragment on Contract {\\n  id\\n  address\\n  category\\n  version\\n}\\n\\nfragment SegmentFragment on Segment {\\n  id\\n  position\\n  amount\\n  exponent\\n  milestone\\n  endTime\\n  startTime\\n  startAmount\\n  endAmount\\n}\\n\\nfragment TrancheFragment on Tranche {\\n  id\\n  position\\n  amount\\n  timestamp\\n  endTime\\n  startTime\\n  startAmount\\n  endAmount\\n}\\n\\nfragment StreamFragment on Stream {\\n  id\\n  tokenId\\n  subgraphId\\n  chainId\\n  alias\\n  category\\n  funder\\n  sender\\n  recipient\\n  hash\\n  timestamp\\n  depositAmount\\n  startTime\\n  endTime\\n  cliff\\n  cliffTime\\n  cliffAmount\\n  initial\\n  initialAmount\\n  cancelable\\n  renounceTime\\n  canceled\\n  canceledTime\\n  withdrawnAmount\\n  intactAmount\\n  position\\n  proxied\\n  proxender\\n  transferable\\n  shape\\n  version\\n  asset {\\n    ...AssetFragment\\n  }\\n  batch {\\n    ...BatchFragment\\n  }\\n  contract {\\n    ...ContractFragment\\n  }\\n  segments(first: 1000) {\\n    ...SegmentFragment\\n  }\\n  tranches(first: 1000) {\\n    ...TrancheFragment\\n  }\\n}\",\"variables\":{\"chainId\":42161,\"first\":31,\"skip\":0,\"subgraphId\":\"1000000000\",\"sender\":\"0x0298f4332e3857631385b39766325058a93e249f\",\"recipient\":\"0x0298f4332e3857631385b39766325058a93e249f\",\"token\":\"\"}}}\r\n    at makeRequest (index.js:301:15)\r\n    at async Module.request (index.ts:100:17)\r\n    at async queryFn (useRequestLockupList.ts:76:22)\r\n    ```\r\n\r\n</p>\r\n</details> \r\n\r\nHow can I get rid of this error during development, @sablier-labs/frontend?","createdAt":"2025-05-04T13:48:04Z","labels":[],"number":1631,"repository":"sablier-labs/interfaces","state":"open","title":"How to allow localhost domain on subgraphs?","type":"discussion","updatedAt":"2025-06-02T10:51:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/1631"},{"author":"PaulRBerg","body":"A possible unintended behavior/mistake? @razgraf @gavriliumircea\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/flow/queries.ts#L846-L856\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/documents/lockup/queries.ts#L851-L871","createdAt":"2025-05-30T10:53:35Z","labels":[],"number":1662,"repository":"sablier-labs/interfaces","state":"open","title":"Why is the \"creator\" not included in the \"_ByUser\" actions query in Flow but the \"funder\" is included in the equivalent Lockup query?","type":"discussion","updatedAt":"2025-06-02T10:41:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/1662"},{"author":"PaulRBerg","body":"## Global View\r\n\r\nFor recipients, the Sablier UI can be viewed as a kind of crypto wallet focused on streamed payments.\r\n\r\nAnd, since a wallet can typically display the aggregate value in the user's account, offering a dashboard where the value of all streams is aggregated would be helpful. The \"Withdraw All\" and \"Cancel All\" buttons could be moved here.\r\n\r\nTo begin with, we could have a dropdown to filter by the token. In a more advanced setup, we could show a list of the most popular tokens and their respective aggregate values.\r\n\r\n## Per-Group View\r\n\r\nAnother twist to this idea is to show an overview for a particular group of streams, similar to how Hedgey [does it](https://app.hedgey.finance/grants/public/arbitrum/0x5a5c8da41220eef8e7f423f6e9028da5b9e70f8b/0x912ce59144191c1204e64559fe8253a0e49e6548).","createdAt":"2023-08-16T10:13:14Z","labels":["type: feature"],"number":558,"repository":"sablier-labs/interfaces","state":"closed","title":"Aggregation dashboard for global view of streams","type":"discussion","updatedAt":"2025-05-31T15:42:16Z","url":"https://github.com/sablier-labs/interfaces/discussions/558"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nStream names are not friendly. They currently have the form `CONTRACT-CHAINID-STREAMID`. With the advent of multiple Sablier releases and chain deployments, the stream names have become super verbose. Here's some recent feedback recently from a user:\r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/452a2808-c32f-407b-a240-4c50df0133bd\" width=\"300\"/>\r\n\r\n## Solution\r\n\r\n- Allow users to label streams and save the labels in local browser storage.\r\n- Allow users to export the labels using a QR code or a JSON file so that they can import it in other browsers.\r\n\r\nThis functionality is similar to how Safe allows users to name their multisigs, and how Zapper allows named bundles.\r\n\r\nOne limitation is that other recipients won't see the names set by senders. However, this is a feature, not a bug. The names may contain sensitive information, and so the senders may not want all recipients to see that a particular stream is associated with a particular entity.\r\n\r\nP.S. this local storage implementation was also suggested to us by our fellow cohort participants at CSX.\r\n\r\n### Alternatives Considered\r\n\r\n- **Onchain names**. Adding a `name` parameter in the create functions has security implications. See https://github.com/sablier-labs/v2-core/pull/945.\r\n- **Web2 API storage**. As explained by Mircea, this would involve a significant refactor of the API, the UI, and the database. Hosting costs may also increase.\r\n\r\n## References\r\n\r\n- [Canny: Name streams](https://sablier.canny.io/feature-requests/p/name-streams)\r\n- [Internal discussion on Slack](https://sablier.slack.com/archives/C032HBFV4QJ/p1719488683994349)\r\n\r\n## Feedback\r\n\r\nRFC @sablier-labs/frontend.","createdAt":"2024-06-27T13:53:58Z","labels":["type: feature"],"number":986,"repository":"sablier-labs/interfaces","state":"open","title":"Labeling streams and saving the labels in the browser's local storage","type":"discussion","updatedAt":"2025-05-31T08:24:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/986"},{"author":"PaulRBerg","body":"@razgraf @gavriliumircea \r\n\r\nWhy are we duplicating the fragments under the `**/documents` directory if they are already available in the codegen produced by `graphql-codegen`?\r\n\r\nIt looks like the `fragments.ts` files are not used anywhere.\r\n\r\n- https://github.com/sablier-labs/interfaces/blob/ed5b8da4063b24d34779e4b2303d0527f2eedc7d/packages/subgraphs/src/documents/flow/fragments.ts#L3-L9\r\n- https://github.com/sablier-labs/interfaces/blob/ed5b8da4063b24d34779e4b2303d0527f2eedc7d/packages/subgraphs/src/generated/flow/gql.ts#L15-L16\r\n\r\nRelated: https://github.com/sablier-labs/command-center/issues/153","createdAt":"2025-05-28T11:55:38Z","labels":[],"number":1644,"repository":"sablier-labs/interfaces","state":"closed","title":"Why are the GraphQL fragments duplicated if they are already generated by `graphql-codegen`?","type":"discussion","updatedAt":"2025-05-29T05:59:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/1644"},{"author":"PaulRBerg","body":"I couldn't find any place where these re-exported GraphQL types are used. Should we remove them? @sablier-labs/frontend\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/ed5b8da4063b24d34779e4b2303d0527f2eedc7d/packages/subgraphs/src/index.ts#L20","createdAt":"2025-05-28T12:20:36Z","labels":[],"number":1645,"repository":"sablier-labs/interfaces","state":"open","title":"Where are these re-exported GraphQL types used?","type":"discussion","updatedAt":"2025-05-28T12:20:37Z","url":"https://github.com/sablier-labs/interfaces/discussions/1645"},{"author":"razgraf","body":"Spent some time researching a missing feature for our Solana app: wallet (and chain) switching. The app should react to a user changing their connected wallet and assume the new identity automatically.\r\n\r\nIt turns out Solana wallets do not implement this standard or, for those that do, it's broken.\r\n\r\n### The research\r\n\r\n#### General\r\n\r\nStarting out from [this comment](https://solana.stackexchange.com/a/309/40290) from '22 it's clear that there's no standard being implemented for emitting account-changed events.\r\n\r\nSince Phantom (followed by Backpack or Solflare) are the main wallets by usage on Solana, I figured we focused on one at a time, to at least fix the UX for some big part of our future users. Phantom should do for the first sprint.\r\n\r\n#### Phantom\r\n\r\nPhantom's official docs state they offer support for [detecting](https://docs.phantom.com/solana/detecting-the-provider) the connected wallet and, our goal, listening for [account changes](https://docs.phantom.com/solana/establishing-a-connection#changing-accounts).\r\n<img width=\"809\" alt=\"Screenshot 2025-05-20 at 14 29 09\" src=\"https://github.com/user-attachments/assets/73a4c6da-a92a-456d-adcf-dd85b7aecf48\" />\r\n\r\nWe can also confirm this implementation being available through our wallet wrapper SDK (@solana/wallet-adapter-base) inside the [Phantom adapter](https://github.com/anza-xyz/wallet-adapter/blob/master/packages/wallets/phantom/src/adapter.ts) - see [`accountChanged`](https://github.com/anza-xyz/wallet-adapter/blob/cf1d21701904d40eeb061ae180d8878a93434c26/packages/wallets/phantom/src/adapter.ts#L161).\r\n\r\n```ts\r\nwallet.on('accountChanged', this._accountChanged);\r\n```\r\n\r\nUnfortunately, while testing it out, the app couldn't catch any `accountChanged` events being emitted. The adapter did emit events for `connect` whenever there was a complete flow (user is not connected, clicks to connect - not working on auto-connect) but no changes were recorded afterwards.\r\n\r\nUpon further research we can see some more instances of this issue being flagged:\r\n\r\n- https://github.com/anza-xyz/wallet-adapter/issues/883\r\n- https://github.com/anza-xyz/wallet-adapter/issues/1008\r\n- https://github.com/anza-xyz/wallet-adapter/issues/1069\r\n\r\n> Try building your app and running in production mode. It worked for me.\r\n\r\nSome mention building the app as a fix, although this hasn't [worked](https://github.com/anza-xyz/wallet-adapter/issues/883#issuecomment-2532872504) for others - I've also tested it and it doesn't work on my end either.\r\n\r\n#### Network changes\r\n\r\nThis problem extends to network/chain changes between devnet and mainnet, where I don't believe we'd even have events being emitted (even if they don't work).\r\n\r\n\r\n### Proposed solution\r\n\r\nWhile this issue is (hopefully) being handled wallet-side, I propose we add an informational note / warning in the **Account Modal** about wallet switching in Solana (and possibly a \"refresh\" button a.k.a. log-out and reload page). The flow our user has to follow will be:\r\n\r\n- Switch to the other account from the wallet\r\n- Log out\r\n- Refresh page\r\n- Log back in\r\n\r\nIf the other account is already \"approved\" to connect to the app, users can simply change account and refresh the app. But the explainer should cover the full use-case.\r\n\r\n---\r\n\r\n\r\nLater edit: streamflow has this working ... need to check exactly how\r\n","createdAt":"2025-05-20T11:43:30Z","labels":["topic: solana"],"number":1638,"repository":"sablier-labs/interfaces","state":"open","title":"Wallet switching in Solana","type":"discussion","updatedAt":"2025-05-26T08:37:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/1638"},{"author":"razgraf","body":"[Biome](https://biomejs.dev/) is a tool I've noticed while playing with the [wagmi](https://github.com/wevm/wagmi) codebase. It provides a set of cool utilities such as a [formatter](https://biomejs.dev/formatter/differences-with-prettier/) and a linter and it looks like it's way faster than its counter-parties!\r\n\r\n> Biome is an opinionated formatter that has the goal to stop all ongoing debates over styles. It follows a similar [philosophy to Prettier](https://prettier.io/docs/en/option-philosophy.html), only supporting a few options to avoid debates over styles, turning into debates over Biome options. It deliberately [resists the urge to add new options](https://github.com/prettier/prettier/issues/40) to prevent [bike-shed discussions](https://en.wikipedia.org/wiki/Law_of_triviality) in teams so they can focus on what really matters instead.\r\n\r\nInstead of upgrading to prettier and eslint, we could look into switching to Biome ourselves. It could\r\n- Replace #276\r\n- Fix or improve in situations related to #561 or #823\r\n\r\nQuestions:\r\n- does it play well with `stylelint`\r\n- does it support the most important rules we care about (e.g. import ordering)\r\n- does it work in our monorepo structure and is it easy to extend if needed\r\n- what's the community feedback around it vs. the usual alternatives (eslint, prettier)","createdAt":"2024-02-17T12:19:31Z","labels":[],"number":899,"repository":"sablier-labs/interfaces","state":"open","title":"Investigate Biome vs. Prettier","type":"discussion","updatedAt":"2025-05-19T15:32:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/899"},{"author":"razgraf","body":"Thread with feedback from Micah that still needs to be triaged.\r\n\r\n<img width=\"842\" alt=\"Screenshot 2025-05-16 at 14 42 37\" src=\"https://github.com/user-attachments/assets/ee3577d5-b5e0-4db8-8df9-ff4c35ebcf5f\" />\r\n\r\n\r\n","createdAt":"2025-05-16T11:43:24Z","labels":[],"number":1637,"repository":"sablier-labs/interfaces","state":"open","title":"Feedback from Micah","type":"discussion","updatedAt":"2025-05-16T11:43:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/1637"},{"author":"PaulRBerg","body":"@razgraf @gavriliumircea\r\n\r\ni.e. this\r\n\r\nhttps://github.com/sablier-labs/interfaces/tree/e5bb3e03eb932aa188ce339ee4a28c35b3361907/packages/subgraphs/src/generated","createdAt":"2025-05-04T13:16:54Z","labels":[],"number":1625,"repository":"sablier-labs/interfaces","state":"closed","title":"Why are the subgraphs \"generated\" folders kept in version control?","type":"discussion","updatedAt":"2025-05-06T16:16:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/1625"},{"author":"PaulRBerg","body":"## Context\r\n\r\nFeature request tracker for a custom shape generator tool to enable shapes that are not available by default in the Sablier Interface, but which can be implemented via the Sablier Protocol.\r\n\r\n## First Request\r\n\r\nWe've recently received this request from SteakHut:\r\n\r\n<img width=\"491\" alt=\"Screenshot 2023-09-05 at 5 56 08 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c37e1b8a-0389-480d-bbf2-b29a3b3bfbb7\">\r\n\r\n<img width=\"493\" alt=\"Screenshot 2023-09-05 at 5 56 26 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a33908bf-4b87-469a-888e-698ca2f3ddaf\">","createdAt":"2023-09-05T14:58:04Z","labels":["type: feature"],"number":577,"repository":"sablier-labs/interfaces","state":"open","title":"Custom shape generator UI","type":"discussion","updatedAt":"2025-04-25T11:00:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/577"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729865961\r\n\r\ncc @razgraf @gavriliumircea\r\n\r\n```mermaid\r\nsequenceDiagram\r\n    title TOA with Guardrails - User Flow\r\n    \r\n    participant User\r\n    participant UI\r\n    participant Blockchain\r\n    participant TRM\r\n    \r\n    User->>UI: Upload CSV\r\n    Note over UI: Check stream count vs guardrail\r\n    \r\n    alt Stream count exceeds guardrail\r\n        UI-->>User: Error: Too many streams for this shape/chain\r\n    else Stream count is acceptable\r\n        Note over UI: Pre-Flight Validations\r\n        UI->>UI: Calculate total deposit amount\r\n        UI->>Blockchain: Check ERC-20 allowance\r\n        \r\n        alt Insufficient allowance\r\n            Blockchain-->>UI: Insufficient allowance\r\n            UI-->>User: Request token approval\r\n            User->>Blockchain: Approve token spending\r\n        end\r\n        \r\n        Note over UI,Blockchain: Transaction Simulation\r\n        UI->>Blockchain: Simulate transaction\r\n        \r\n        alt Block gas limit exceeded\r\n            Blockchain-->>UI: Gas limit error\r\n            UI-->>User: Suggest Airdrops or splitting CSV\r\n        else Sablier-specific errors found\r\n            Blockchain-->>UI: Sablier error detected\r\n            Note over UI: Run In-Flight Validations\r\n            UI-->>User: Show error with context about CSV entry\r\n        else No simulation errors\r\n            Note over UI: Post-Flight Validations\r\n            UI->>TRM: Check all recipient addresses\r\n            \r\n            alt High-risk addresses detected\r\n                TRM-->>UI: High-risk address(es) found\r\n                UI-->>User: Display security error\r\n            else All addresses are safe\r\n                UI->>Blockchain: Submit transaction\r\n                Blockchain-->>User: Transaction successfully processed\r\n            end\r\n        end\r\n    end\r\n```\r\n","createdAt":"2025-04-17T21:17:26Z","labels":[],"number":1602,"repository":"sablier-labs/interfaces","state":"open","title":"Diagram for tx simulation flow (needed for calculating dynamic max batch size)","type":"discussion","updatedAt":"2025-04-22T16:08:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/1602"},{"author":"PaulRBerg","body":"I find it a little strange to say \"Streaming\" when the stream is in the cliff period, when there is a monthly unlock, a timelock, etc.\r\n\r\n<img width=\"221\" alt=\"SCR-20250202-lhbw\" src=\"https://github.com/user-attachments/assets/60954097-ad8c-4fe2-b329-c72c07a36b40\" />\r\n\r\nAny disagreements @sablier-labs/engineers?","createdAt":"2025-02-02T12:38:17Z","labels":[],"number":1379,"repository":"sablier-labs/interfaces","state":"closed","title":"Thoughts about saying \"Vesting\" instead of \"Streaming\" in the Vesting tab streams?","type":"discussion","updatedAt":"2025-04-18T10:29:55Z","url":"https://github.com/sablier-labs/interfaces/discussions/1379"},{"author":"razgraf","body":"## About virtualized lists\r\n\r\n### What is [react-window](https://github.com/bvaughn/react-window) and why do we need virtualized lists?\r\n\r\n> React window works by only rendering part of a large data set (just enough to fill the viewport). This helps address some common performance bottlenecks:\r\n>\r\n>    It reduces the amount of work (and time) required to render the initial view and to process updates.\r\n>    It reduces the memory footprint by avoiding over-allocation of DOM nodes.\r\n\r\n### How do we bind this system to our page scroll?\r\n\r\nFor things like the Token List, we can pre-define the scroll-surface to a set height.\r\n\r\nFor places where the scroll surface is .. the page itself (think X/Facebook's timeline page) we need to bind the scroll (of the virtualized list) to the top-level scroll container. Based on this comment [here](https://github.com/bvaughn/react-window/issues/192#issuecomment-654269017) we've forked the functionality of Frederico's [react-window-scroller](https://github.com/FedericoDiRosa/react-window-scroller) and used it to implement our Dashboard stream table - and the [<Virtualized.Scroller/> ](https://github.com/sablier-labs/v2-interfaces/blob/41af77001d4afe7e9b6edc0feb7975c4fa4f3c61/packages/components/src/molecules/Virtualized/Scroller/index.tsx)system.\r\n\r\n## Important notes\r\n\r\n### Hierarchy in the DOM and top-margin spacing\r\n\r\nThe scroll re-positioning relies on a container's `offsetTop`, a value influenced by the `offsetParent`. This parent, as per the [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent) docs is **not the nearest DOM parent** as one would think.\r\n\r\n>  The HTMLElement.offsetParent read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.\r\n>\r\n> A positioned ancestor is either:\r\n>   - an element with a non-static position, or\r\n>   - td, th, table in case the element itself is static positioned.\r\n\r\nTherefore, in our current Table system, this usually is the first **relative** parent, closest to the Table's body. In the case of the main dashboard, the `offsetParent` of our table of streams is the Page itself. \r\n\r\n<img width=\"1302\" alt=\"Screenshot 2023-10-29 at 15 49 57\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/e651868f-0c02-4c86-a170-56ea737424ab\">\r\n\r\n### Misbehaving tables and the fix\r\n\r\nThe above is quite important as an implementation where an element *closer to the table* but *further away from the top-page elements* is marked as the `offsetParent` will cause the scroller offset to start removing items from the DOM much earlier than needed. \r\n\r\nIn the example below, we can see a wrapper intentionally positioned `relative` will cause this visual bug.\r\n\r\n| App | DOM |\r\n| -- | -- |\r\n| <img width=\"852\" alt=\"Screenshot 2023-10-29 at 15 52 03\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/769f1ecf-38a1-4608-8db5-22eddf3360fa\"> | <img width=\"1417\" alt=\"Screenshot 2023-10-29 at 15 54 58\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/3562d75e-4e9d-44a9-b10f-e1a297019eab\"> |\r\n\r\nIf we make sure the path is clear and the `offsetParent` is yet again our top level component (the page div), things go back to normal.\r\n\r\n<img width=\"1704\" alt=\"Screenshot 2023-10-29 at 15 57 21\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/245bae90-c15c-4f24-b3b7-87a39a05e2c6\">\r\n","createdAt":"2023-10-29T16:08:47Z","labels":[],"number":612,"repository":"sablier-labs/interfaces","state":"open","title":"[Walkthrough] React window scroller and virtualized lists","type":"discussion","updatedAt":"2025-04-15T11:02:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/612"},{"author":"PaulRBerg","body":"> [!NOTE]\r\n> The lists herein refer to high-level features that are noticeable by end users. Bugs, small enhancements, and technical refactors are not included.\r\n\r\n## General\r\n\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1371\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1493\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1562\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1563\r\n\r\n## Landing Page\r\n\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1250\r\n\r\n## Airdrops\r\n\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1580\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1554\r\n\r\n## Lockup/Vesting\r\n\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1332\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1473\r\n\r\n## Flow/Payments\r\n\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1433\r\n- [ ] https://github.com/sablier-labs/interfaces/issues/1566\r\n\r\n---\r\n\r\ncc @sablier-labs/everybody","createdAt":"2025-04-10T13:46:20Z","labels":[],"number":1581,"repository":"sablier-labs/interfaces","state":"open","title":"Roadmap for Q2 2025 in the EVM Interfaces","type":"discussion","updatedAt":"2025-04-10T14:28:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/1581"},{"author":"razgraf","body":"Given we are and will be working on so many new features in the following period, I'm taking the opportunity to aggregate them here. This list is meant to track only those that require support in the apps.\r\n\r\n## Lockup\r\n\r\n1. [x] Instant airstreams (app) [#CD55](https://github.com/sablier-labs/company-discussions/discussions/55), https://github.com/sablier-labs/v2-core/discussions/998\r\n2. [x] Ranged airstreams (backends, app) https://github.com/sablier-labs/v2-periphery/discussions/279, https://github.com/sablier-labs/v2-core/discussions/997\r\n\r\n## Flow\r\n\r\n1. [x] Integrate flow streams (subgraphs, app) [#Flow](https://github.com/sablier-labs/flow) - Figma\r\n\r\n## General\r\n\r\n- [x] Use-case driven redesign (app) - Figma\r\n- [ ] **[Done but outdated]** IPFS support for main app (app) #1021\r\n- [x] Fee-switch support (app) [#CD48](https://github.com/sablier-labs/company-discussions/discussions/48), [#CD71](https://github.com/sablier-labs/company-discussions/discussions/71)\r\n- [x] Landing page updates (landing) #802 \r\n- [ ] Labels (app) #986\r\n- [ ] CSV Exports (backends, app) #807\r\n- [ ] **[In Progress]** Analytics dashboard (backends, app) #1332\r\n\r\n## Multi-VM\r\n\r\n- [x] Solana (*)\r\n- [x] Optional: Starknet, Fuel\r\n\r\nAnd miscellaneous such as bug-fixes or an optimizations sprint for the app.\r\n\r\nResources: [Figma](https://www.figma.com/design/hn1BBR5KXrMjNA8VyOt2AF/V2%3A-UI%2C-Labs?node-id=4087-37447&t=zdNfO85bVyYYrN3o-1)\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-09-02T10:34:25Z","labels":[],"number":1057,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature set for H2 2024 - Q1 2025","type":"discussion","updatedAt":"2025-04-10T14:05:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/1057"},{"author":"PaulRBerg","body":"Potential vendors for this:\n\n- https://status.atlassian.com/\n- https://status.io/\n- https://manage.statuspage.io/login","createdAt":"2025-02-05T20:24:21Z","labels":[],"number":1422,"repository":"sablier-labs/interfaces","state":"closed","title":"Set up status page to notify users when the UI goes down","type":"discussion","updatedAt":"2025-04-10T13:19:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/1422"},{"author":"gavriliumircea","body":"I've completed my review of the TRM Labs documentation. However, there are still some aspects that remain unclear regarding how we should proceed with their API integration. During our last meeting, we agreed on two key points:\r\n\r\n1. We will use the Wallet Screening API.\r\n2. We plan to invoke the API endpoints solely before executing a transaction, aiming to optimise the number of calls.\r\n\r\nIn addition to these points, we need to establish criteria for deciding whether an address should be banned or blocked. Below is an example of the response from the endpoint.\r\n\r\n<details><summary>See example JSON</summary>\r\n<p>\r\n\r\n```json\r\n[\r\n  {\r\n    \"accountExternalId\": \"00aa9688-dec6-47fa-be77-b0b2760d57f9\",\r\n    \"address\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\r\n    \"addressIncomingVolumeUsd\": \"5000.804028252\",\r\n    \"addressOutgoingVolumeUsd\": \"5000.804028252\",\r\n    \"addressTotalVolumeUsd\": \"10001\",\r\n    \"addressRiskIndicators\": [\r\n      {\r\n        \"category\": \"Decentralized Exchange\",\r\n        \"categoryId\": \"6\",\r\n        \"categoryRiskScoreLevel\": 5,\r\n        \"categoryRiskScoreLevelLabel\": \"Medium\",\r\n        \"incomingVolumeUsd\": \"1111.11\",\r\n        \"outgoingVolumeUsd\": \"2222.22\",\r\n        \"riskType\": \"COUNTERPARTY\",\r\n        \"totalVolumeUsd\": \"3333.33\"\r\n      },\r\n      {\r\n        \"category\": \"Decentralized File Sharing Service\",\r\n        \"categoryId\": \"4\",\r\n        \"categoryRiskScoreLevel\": 1,\r\n        \"categoryRiskScoreLevelLabel\": \"Low\",\r\n        \"incomingVolumeUsd\": \"4444.44\",\r\n        \"outgoingVolumeUsd\": \"5555.55\",\r\n        \"riskType\": \"INDIRECT\",\r\n        \"totalVolumeUsd\": \"9999.99\"\r\n      },\r\n      {\r\n        \"category\": \"Sanctions\",\r\n        \"categoryId\": \"69\",\r\n        \"categoryRiskScoreLevel\": 10,\r\n        \"categoryRiskScoreLevelLabel\": \"High\",\r\n        \"incomingVolumeUsd\": \"6666.66\",\r\n        \"outgoingVolumeUsd\": \"7777.77\",\r\n        \"riskType\": \"OWNERSHIP\",\r\n        \"totalVolumeUsd\": \"14444.43\"\r\n      }\r\n    ],\r\n    \"addressSubmitted\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\r\n    \"chain\": \"ethereum\",\r\n    \"entities\": [\r\n      {\r\n        \"category\": \"Cold Wallet\",\r\n        \"categoryId\": \"71\",\r\n        \"entity\": \"Tether Treasury\",\r\n        \"riskScoreLevel\": 1,\r\n        \"riskScoreLevelLabel\": \"Low\",\r\n        \"confidenceScoreLabel\": \"High confidence\",\r\n        \"trmAppUrl\": \"https://app.trmlabs.com/entities/trm/ca389716-cf85-4e99-98eb-0e9b3fb1415c\",\r\n        \"trmUrn\": \"/entity/manual/ca389716-cf85-4e99-98eb-0e9b3fb1415c\"\r\n      }\r\n    ],\r\n    \"externalId\": \"00aa9688-dec6-47fa-be77-b0b2760d57f9\",\r\n    \"trmAppUrl\": \"https://app.trmlabs.com/address/0xdac17f958d2ee523a2206206994597c13d831ec7/eth\"\r\n  }\r\n]\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\nAs you can see we have properties that seem to be relevant: `entities` and `addressRiskIndicators`. Unfortunately in the docs these fields are not properly explained.\r\n \r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/48255669/fd271cca-afe7-49aa-b880-e8804dfa7972\"/>\r\n\r\nI believe the best approach is to determine the safety of an address based on the risk score levels assigned to each entity. However, it's unclear under what circumstances we would receive an array containing multiple entities, or what exactly constitutes an 'entity' in this context.\r\n\r\nFinally you can find bellow a table of the Risk Score Levels.\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/48255669/9d77de9b-b085-4207-82a1-bbb5be557744\"/>\r\n\r\n@PaulRBerg @razgraf I would like to hear your thoughts on this and to decide how we will integrate the TRM Api.","createdAt":"2024-02-27T15:29:56Z","labels":[],"number":907,"repository":"sablier-labs/interfaces","state":"closed","title":"[*] Walkthrough: TRM paid integration and our methodology","type":"discussion","updatedAt":"2025-04-10T13:17:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/907"},{"author":"razgraf","body":"## Context\r\n\r\nWe realized the need for a start time a while back, since \"salaries\" usually require more formal/strict dates. Thus solves the \"payment starts on the 1st of the month\" problem.\r\n\r\nIs there any way we can include similar logic for scheduled salary updates?\r\n\r\n## The \"Settle and Update\" bundle\r\n\r\nIn case of salaries changing, the sender has to do some wild tricks to calculate remaining balances. I'm thinking of adding a bespoke action to help in this particular case. A **rate change** on steroids. The UX goes like this:\r\n\r\n### Short flow\r\nSender picks stream, chooses date for the \"rate change\". Old stream ends, new stream starts.\r\n\r\n### Long flow (explainer)\r\n- [Prerequisites] [`startTime`](https://github.com/sablier-labs/flow/issues/351) and [`transferFrom`](https://github.com/sablier-labs/flow/issues/361) implemented in the protocol\r\n- Sender picks a Flow<sub>1</sub> stream they want to update\r\n- Sender picks when the Flow<sub>1</sub> stream ends (say last day of the month)\r\n- We calculate how much they'd need to pay the recipient up to that date, based on the RPS<sub>1</sub>\r\n- We bundle (through `batch`)\r\n   1. a rage-quit: sender `voids`, `refunds` from Flow<sub>1</sub> \r\n   2. a transfer: `Flow.transferFrom` to send the owed balance (remaining from Flow<sub>1</sub>) to the recipient address\r\n   3. a create flow stream: sender creates Flow<sub>2</sub> with the new RPS<sub>1</sub>, starting early next month\r\n   4. optional top-up/initial deposit step for Flow<sub>2</sub> \r\n\r\n### Note\r\n\r\nAn improvement to this proposal would be scheduled flow restarts (the restart function itself supporting a `startTime`). Realistically we're not going to probably be building a Gelato integration any time soon, so supporting this at the protocol level means the user can keep the same stream throughout the update. But, I realize this might be overkill or could make the logic too complex, which is why I'm proposing an approach we can deliver with the features already planned.\r\n\r\nWhat do you think @sablier-labs/engineers?\r\n","createdAt":"2025-02-10T13:23:59Z","labels":[],"number":1415,"repository":"sablier-labs/interfaces","state":"open","title":"Flow use-case for \"new salaries\"","type":"discussion","updatedAt":"2025-04-10T10:44:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/1415"},{"author":"razgraf","body":"I have this in my to-do list since forever but in our future optimization sprint for the apps, we should audit performance using https://github.com/aidenybai/react-scan. \r\n\r\nIt's an amazing dev tool for catching messy re-rendering.\r\n\r\n![](https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/demo.gif)","createdAt":"2025-02-24T11:36:45Z","labels":[],"number":1450,"repository":"sablier-labs/interfaces","state":"closed","title":"Audit the apps using react-scan","type":"discussion","updatedAt":"2025-04-10T09:16:21Z","url":"https://github.com/sablier-labs/interfaces/discussions/1450"},{"author":"razgraf","body":"Prior to #1539 we used `NEXT_PUBLIC_SABLIER_ENV` to store the current environment the app was running in. Together with the other improvements brought in that PR, we started using `VERCEL_ENV` as a source of truth for the current environment.\r\n\r\nTurns out it has some issues. Here's a more formal write-up of [this comment](https://github.com/sablier-labs/interfaces/pull/1539#issuecomment-2751646430):\r\n\r\n1. [`VERCEL_ENV`](https://vercel.com/docs/environment-variables/system-environment-variables#VERCEL_ENV) is supposed to only have 3 values\r\n\r\nWhile the docs mark that variable as only being able to have 3 values (production, development or preview), [logging it at build time](https://github.com/sablier-labs/interfaces/actions/runs/14063350810/job/39379629436) shows that it actually has custom values too.\r\n\r\n2. [`VERCEL_TARGET_ENV`](https://vercel.com/docs/environment-variables/system-environment-variables#VERCEL_TARGET_ENV) works, but not always \r\n\r\nThe docs instruct on using the `target` flavor of this environment variable. This advice isn't bad, but upon trying it we realized another problem: these variables are not available during runtime\r\n\r\n![Screenshot 2025-03-25 at 17 48 51 (1)](https://github.com/user-attachments/assets/4552f39e-4554-482d-855a-9898dccc4d35)\r\n\r\nAs you can see, logging them will result in `undefined` values regardless of prefix (`np` is the `NEXT_PUBLIC_` version of each) or name.\r\n\r\nFor now, we've decided to fall back to using `NEXT_PUBLIC_SABLIER_ENV` since that one we can control much easier.\r\n\r\nThe question remains though: why isn't `VERCEL_ENV` working as intended?\r\n\r\n","createdAt":"2025-03-25T16:12:59Z","labels":[],"number":1548,"repository":"sablier-labs/interfaces","state":"closed","title":"Why isn't `VERCEL_ENV` working?","type":"discussion","updatedAt":"2025-04-10T09:15:25Z","url":"https://github.com/sablier-labs/interfaces/discussions/1548"},{"author":"PaulRBerg","body":"I just stumbled upon this tool [`tsup`](https://github.com/egoist/tsup), which uses [`esbuild`](https://github.com/evanw/esbuild) under the hood, which claims to be 10-100x faster than baseline:\r\n\r\nhttps://github.com/evanw/esbuild/raw/main/images/benchmark-light.svg\r\n\r\n<img width=\"870\" alt=\"Screenshot 2023-06-06 at 2 02 11 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e6a4a1ef-46d5-480b-936d-a978166410ea\">\r\n","createdAt":"2023-06-06T12:02:31Z","labels":[],"number":327,"repository":"sablier-labs/interfaces","state":"closed","title":"Explore `tsup` for speeding up build performance","type":"discussion","updatedAt":"2025-04-09T19:50:38Z","url":"https://github.com/sablier-labs/interfaces/discussions/327"},{"author":"PaulRBerg","body":"Feature request tracker for GitHub OAuth in the airdrop custom claim page.\n\ncc @sablier-labs/business","createdAt":"2025-04-07T18:40:28Z","labels":[],"number":1569,"repository":"sablier-labs/interfaces","state":"open","title":"Connect GitHub in custom claim page","type":"discussion","updatedAt":"2025-04-09T18:09:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/1569"},{"author":"IaroslavMazur","body":"Similar to Aave's \"Withdraw & Switch\" feature, we could, also, enhance the UX of our users - and tap into the liquidity we're processing, at the same time.\r\n\r\n<a href=\"https://github.com/user-attachments/assets/44cabaa5-6e07-448c-bc93-ce27b9d2c259\" target=\"_blank\">\r\n  <img src=\"https://github.com/user-attachments/assets/44cabaa5-6e07-448c-bc93-ce27b9d2c259\" width=\"100\"/>\r\n</a>\r\n\r\n---\r\n### The idea\r\n\r\nOffer the Stream Recipients to (optionally) automatically swap their streamed tokens for some other tokens when withdrawing the former from the Stream. This should be especially popular among the Airstream Recipients.\r\n\r\n---\r\n### The pros\r\n\r\n1. **Better serving** the needs of those users who are going to sell the tokens they're withdrawing, anyways, because they\r\n    - won't have to do this **_manually_** following the token withdrawal,\r\n    - won't have to look for a **_trusted_** place to swap their tokens and\r\n    - will be able to do everything in **_a single tx_**, instead of 2 (the approval tx/signature + the swapping itself)!\r\n    \r\n2. **Monetizing** the feature:\r\n    - either just keeping the eventual \"positive spread\" (the favorable swap rate change in between the user's approval - in our UI - to exchange their tokens at a certain rate - and the actual rate we're getting when processing the request on-chain) or\r\n    - charging a small fee for the (significant) comfort and piece of mind we're offering our users\r\n       - I bet that most Airstream Recipient won't even think twice before agreeing to pay a ~0.50% fee for the above service;\r\n       - in contrast to a simple Stream Withdraw, the Stream Withdraw & Swap is an actual \"exit event\" for the user, when they should feel better about giving us a little commission;\r\n       - besides, giving away a % of the tokens/value we're helping you get should represent a smaller psychological pressure than giving away a % of the tokens you already own (e.g. paying a commission when selling a real estate vs paying a % for owning it)\r\n       \r\n---\r\n### The cons:\r\n\r\n- Couldn't we, possibly, start having legal issues, facilitating the exchange of tokens/value now?\r\n\r\nCC: @sablier-labs/engineers ","createdAt":"2024-08-07T11:19:59Z","labels":[],"number":1043,"repository":"sablier-labs/interfaces","state":"closed","title":"Withdraw & Swap for Sablier Stream Recipients","type":"discussion","updatedAt":"2025-04-09T17:48:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/1043"},{"author":"PaulRBerg","body":"As discussed in #1266 and https://github.com/sablier-labs/flow/discussions/352, the ability to top up multiple streams is essential for senders. But this feature is hidden in the stream selector in the dashboard, and it is not easy to find. A proof for this is the fact that Max, Shub, and I, have all missed it.\r\n\r\nI would like to suggest adding a new button called \"Top Up\" in the dashboard for senders, like this:\r\n\r\n<img width=\"400\" alt=\"SCR-20241219-ntkv\" src=\"https://github.com/user-attachments/assets/b9bf8e82-23c3-4caf-b98b-df78527e9a28\" />\r\n\r\nUpon clicking the button, the first stream in the dashboard gets selected, like so:\r\n\r\n<img width=\"350\" alt=\"SCR-20241219-nvdh\" src=\"https://github.com/user-attachments/assets/5cfbd618-40fd-4639-9e2e-9399c53dff6c\" />\r\n\r\nThe rationale is to proactively inform senders that this essential functionality exists.\r\n\r\ncc @sablier-labs/engineers for feedback.","createdAt":"2024-12-19T11:39:45Z","labels":[],"number":1270,"repository":"sablier-labs/interfaces","state":"open","title":"New \"Top Up\" button for topping up multiple streams","type":"discussion","updatedAt":"2025-04-09T14:29:15Z","url":"https://github.com/sablier-labs/interfaces/discussions/1270"},{"author":"PaulRBerg","body":"I know that we've (softly) decided to work with third-party providers for this, but I wanted to create this discussion just in case.\r\n\r\nIt looks like our competitors offer this feature:\r\n\r\n- [Hedgey](https://app.hedgey.finance/token-claims)\r\n- [Hedgey example](https://app.hedgey.finance/claim/792b0da8-876f-4e14-8ec7-214e6f8e809a)\r\n- [Magna](https://twitter.com/Bfaviero/status/1653487580804009984)\r\n\r\nWe could charge a fixed cost for deploying the white-label solution, and then a monthly cost for maintenance and support.","createdAt":"2023-08-23T14:51:22Z","labels":["type: feature"],"number":570,"repository":"sablier-labs/interfaces","state":"open","title":"White-label claim pages for token campaigns","type":"discussion","updatedAt":"2025-04-09T10:26:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/570"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nNot being able to hide, filter, and sort streams in the Vesting and the Payments dashboard is bad. It presents users with data they may not want to see, especially if they have created some streams by mistake.\r\n\r\nWe will use this GD to track user reports and requests for this feature.\r\n\r\n## Solution\r\n\r\nMake it posisble to hide, filter, and sort streams in the dashboard.","createdAt":"2025-03-05T19:28:54Z","labels":[],"number":1475,"repository":"sablier-labs/interfaces","state":"open","title":"Hiding, filtering, and sorting streams in the dashboard","type":"discussion","updatedAt":"2025-04-09T08:46:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/1475"},{"author":"razgraf","body":"### Context\r\n\r\nWhile testing @gavriliumircea discovered an interesting design choice for who pays which fees in the case of a Safe triggering a withdraw or claim. \r\n\r\n⚠️ > **When interacting with the app through a Safe, any payable call requires the **Safe itself have ETH inside** to pay the Sablier fee. The gas fee will still be covered by the EOA.**\r\n\r\nWe will probably explain this in the app (if a user is connected through a Safe and tries to go to withdraw/claim) to help people understand why their transactions will be blocked. I'm writing this here as well for @sablier-labs/engineers to be aware of when debugging with users.\r\n\r\n### Breakdown of fees by ChatGPT\r\n\r\n<img width=\"772\" alt=\"Screenshot 2025-02-02 at 14 41 18\" src=\"https://github.com/user-attachments/assets/3c9106e0-f619-4447-b3e8-36bbeec4d69e\" />\r\n\r\n### Transaction attempt\r\n\r\nThis is with a Safe that doesn't hold any ETH.\r\n\r\n\r\n<img width=\"1695\" alt=\"Screenshot 2025-02-02 at 14 46 41\" src=\"https://github.com/user-attachments/assets/9811417e-ba41-44e1-9ff4-16fa6dceeee1\" />\r\n\r\n","createdAt":"2025-02-02T12:47:48Z","labels":[],"number":1381,"repository":"sablier-labs/interfaces","state":"open","title":"Safe multisigs need ETH to pay the tax on claim/withdraw","type":"discussion","updatedAt":"2025-04-04T16:52:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/1381"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIn [Dynamic max batch sizes for the Vesting product](https://github.com/sablier-labs/interfaces/issues/1473), we mentioned the possibility of estimating a best guess for the real max batch size after a user's simulation fails because the tx consumes more than the block gas limit.\r\n\r\nOn Safe, we simulate txs via [`simulateAndRevert`](https://ethereum.stackexchange.com/q/168410), which returns a gas estimation in the revert data.\r\n\r\nThe problem is that the returned gas estimation is always below the actual block gas limit of the chain.\r\n\r\n## Potential Solution\r\n\r\nTwo-step solution: (i) obtain a gas estimation when the tx consumes more than the block gas limit and (ii) divide the estimation by the actual block gas limit.\r\n\r\n### Obtain the Estimation\r\n\r\nI'm not sure if this would work, but it may be worth trying.\r\n\r\nWhen we generate the `simulateAndRevert` tx, we don't set a hard-coded gas limit. Maybe if we set a value for the gas parameter that is above the block gas limit, `simulateAndRevert` would return a value that is greater than the block gas limit. TBD.\r\n\r\n> [!WARNING]\r\n> As explained in the Infura docs for [`eth_call`](https://docs.metamask.io/services/reference/ethereum/json-rpc-methods/eth_call/), the value of the gas parameter must be at most 10x the actual block gas limit of the chain. E.g. Sepolia has 36M now, so the hard-coded gas must be 360M at most.\r\n\r\n### Divisions\r\n\r\nIf we manage to obtain the estimation from `simulateAndRevert`, we can then divide it by the actual block gas limit of the chain. Let's call the result of this division the `ratio`. Then, we can divide the total number of streams in the user's CSV by the `ratio`, and obtain a pretty good approximation for what the real max batch size on that chain is.\r\n\r\n> [!NOTE]\r\n> As explained [here](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729864694) and [here](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2724872512), this solution would work only for **Constant** shapes, i.e. vesting shapes that have a constant gas consumption per stream. An example of a **Non-Constant** shape is Monthly Unlocks (streams in the same batch can have different numbers of months).\r\n\r\n## Feedback\r\n\r\nThis is a relatively low-priority task, so we can consider it for Q4. We should also let users complain about this.\r\n\r\ncc @sablier-labs/frontend","createdAt":"2025-04-01T14:56:15Z","labels":[],"number":1558,"repository":"sablier-labs/interfaces","state":"open","title":"Best guess for actual max batch size","type":"discussion","updatedAt":"2025-04-01T14:56:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/1558"},{"author":"PaulRBerg","body":"## Proposal\r\n\r\nCreate a lite app with the following characteristics:\r\n\r\n- Fully open-source\r\n- Sources data from the smart contracts instead of the subgraphs (to the maximum extent possible)\r\n- Makes requests via the user's own RPC and doesn't re-route through Sablier's RPCs\r\n- Deployable to IPFS\r\n\r\n### Limitations\r\n\r\nNot using the subgraph will introduce certain limitations, such as the inability to display a dashboard of incoming and outgoing streams. This is because [we don't have a reverse mapping between user addresses and streams IDs](https://github.com/sablier-labs/v2-core/issues/644).\r\n\r\nIt may be possible that by indexing events, we would be able to provide some sort of dashboard-like experience, but more research is required to confirm (i) if this is possible and (ii) if it is, what sort of UX we could offer (e.g. would users need to wait 10 minutes for their streams to appear?).\r\n\r\nAt any rate, the app will be simplistic:\r\n\r\n1. Create LL stream\r\n2. Cancel stream\r\n3. View basic stream profile\r\n4. Withdraw from stream\r\n\r\nAny non-create feature will require the user to know their stream ID in advance.\r\n\r\n### Starting Point\r\n\r\nAs noted by @razgraf, we already have a starting point with [v2-sandbox](https://github.com/sablier-labs/v2-sandbox), although that repository should remain separate from the lite app because it contains sample code snippets and subgraph guides. It's not optimized for dependency reduction and/ or decentralization.\r\n\r\n## Rationale\r\n\r\nSee the full discussion [here](https://github.com/sablier-labs/v2-interfaces/discussions/783#discussion-6007182).\r\n\r\n- Regulatory defense\r\n- Permissionless innovation\r\n- Alignment with the web3 ethos of censorship resistance\r\n\r\n## Prioritization\r\n\r\nGiven the rationale above and the fact that we left this idea on the back-burner for a long time, I suggest bumping the priority for this project.\r\n\r\nIs there any we could fit it in our roadmap for 2024, @sablier-labs/frontend?\r\n\r\nAlso, why haven't we suggested this as a hackathon project idea? 😔\r\n\r\n## Related\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/783\r\n- https://github.com/sablier-labs/v2-interfaces/issues/548\r\n- https://github.com/sablier-labs/v2-core/issues/644","createdAt":"2024-04-16T14:17:01Z","labels":[],"number":930,"repository":"sablier-labs/interfaces","state":"closed","title":"Lite app to decentralize the Sablier UI","type":"discussion","updatedAt":"2025-03-30T10:01:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/930"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWhen pitching Sablier to a new potential customer for the Airdrop product, I often get asked for some social proofing, i.e., show an example of an existing airdrop campaign processed via Sablier.\r\n\r\nObviously, the more well-known the airdrop, the better the social proof.\r\n\r\nThe problem is that the _Search_ tab displays the most recent airdrops .. which are typically no-names:\r\n\r\n<img width=\"500\" alt=\"SCR-20250307-oaqd\" src=\"https://github.com/user-attachments/assets/d7b75603-a17e-4a23-ae76-a525812b3b7d\" />\r\n\r\n## Solution\r\n\r\nCreate a new \"Curated\" tab (or \"Vetted\") that displays only airdrop campaign curated by us.\r\n\r\nAnd potentially make it the default for [additional social proofing effects](https://github.com/sablier-labs/interfaces/issues/1436).\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/everybody for feedback.","createdAt":"2025-03-07T21:56:21Z","labels":[],"number":1486,"repository":"sablier-labs/interfaces","state":"closed","title":"New \"Curated\" tab in Airdrops","type":"discussion","updatedAt":"2025-03-28T21:25:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/1486"},{"author":"PaulRBerg","body":"According to the [README](https://github.com/safe-global/safe-gateway-typescript-sdk), it is not meant for public consumption:\r\n\r\n<img width=\"450\" alt=\"SCR-20250324-mclf\" src=\"https://github.com/user-attachments/assets/f4730269-9a88-4238-a5b3-cf03cafd3bd8\" />\r\n\r\ncc @sablier-labs/frontend","createdAt":"2025-03-24T11:33:28Z","labels":[],"number":1533,"repository":"sablier-labs/interfaces","state":"open","title":"Why do we use `safe-gateway-typescript-sdk`?","type":"discussion","updatedAt":"2025-03-24T11:33:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/1533"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nSpitballing — what if we indexed other airdrop contracts and enabled a claim page for them in our UI in exchange for the standard $3 fee?\r\n\r\nThe UI wouldn't be as a good as with our own contracts because we would need to charge the user separately, but still.\r\n\r\n## Feedback\r\n\r\nRFC @sablier-labs/everybody","createdAt":"2025-03-17T21:26:33Z","labels":[],"number":1526,"repository":"sablier-labs/interfaces","state":"open","title":"Index other airdrop contracts and charge fees in the UI","type":"discussion","updatedAt":"2025-03-18T22:19:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/1526"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWhen users upload a CSV that goes beyond the max batch size, we are currently suggesting users to split the CSV into two smaller CSVs. And in the near future, [the UI will do the same](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729865961).\r\n\r\nIt's bad UX to have to manually split your CSV when it's something that can be done by our product.\r\n\r\n<img width=\"400\" alt=\"SCR-20250318-okjq\" src=\"https://github.com/user-attachments/assets/b94db65a-350e-495a-a47a-da17675d66a3\" />\r\n\r\n## Solution\r\n\r\n### Solution 1: Split the CSV for the user\r\n\r\nSplit the CSV for the user, and let them download the two smaller CSVs from the UI.\r\n\r\n### Solution 2: Multiple Create Transactions\r\n\r\nThis solution builds upon the 1st solution.\r\n\r\nThe idea is:\r\n\r\n- Split the CSV in the background\r\n- Ask the user to sign two transactions — for creating two batches\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/frontend","createdAt":"2025-03-18T14:35:21Z","labels":[],"number":1532,"repository":"sablier-labs/interfaces","state":"open","title":"Improving the UX for CSV files that go beyond the max batch size","type":"discussion","updatedAt":"2025-03-18T14:36:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/1532"},{"author":"PaulRBerg","body":"It seems to me that the sole purpose of the `v2-client-experimental` app on Vercel is to act as a staging environment for `v2-client`.\r\n\r\n<img width=\"500\" alt=\"SCR-20240112-ltog\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c4c0b4b6-992b-4279-a783-2e64eefd65cb\">\r\n\r\nIf that is so, why are we not using just `v2-client` and adding a new optional input `environment` in the deploy CI workflows, which would allow the caller to specify the environment to which the app should be deployed?\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/ebdd6ee73db89059caeedd9d3b00148c47d70254/.github/workflows/deploy-client.yml#L55\r\n\r\nThe default value of `environment` could be `preview`, and when we are ready to publish a new update, we could set it to `production`.\r\n\r\nIs there any other reason for using two apps instead of multiple environments? Cc @razgraf @gavriliumircea\r\n\r\nFrom [ChatGPT](https://chat.openai.com/share/63be11e7-b6d3-46ff-9bbf-b3f85bfcd067):\r\n\r\n> **Preview (preview)**: The preview environment is typically used for testing new features, bug fixes, or updates before they are pushed to production. When you deploy to the preview environment, Vercel provides a unique URL for sharing and testing these changes. This environment mirrors production closely but is not the final live version. It's useful for internal testing and review processes.","createdAt":"2024-01-12T11:09:01Z","labels":[],"number":824,"repository":"sablier-labs/interfaces","state":"closed","title":"Why are we not using multiple Vercel environments?","type":"discussion","updatedAt":"2025-03-18T13:10:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/824"},{"author":"razgraf","body":"As discussed [here](https://github.com/sablier-labs/company-discussions/discussions/70) start times deliberately configured in the past may promote some ambiguity. \r\n\r\nIf we start seeing users employ this tactic more often, should we consider adding a note in the UI when `start < created_at`? Something like \"This stream was created with a start time (X:Y:Z) preceding its creation time (X:Y:W). This may have been done to...\"","createdAt":"2024-09-16T08:42:11Z","labels":[],"number":1068,"repository":"sablier-labs/interfaces","state":"closed","title":"Consider a note for streams with start-time configured in the past","type":"discussion","updatedAt":"2025-03-18T11:04:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/1068"},{"author":"PaulRBerg","body":"Some time ago, @tukwan has deleted our source maps using a Webpack plugin: https://github.com/sablier-labs/interfaces/pull/1163\r\n\r\nis there any reason for not disabling them in Vercel, too? According to the [Vercel docs](https://nextjs.org/docs/14/app/building-your-application/optimizing/memory-usage#disable-source-maps), we can disable them using `productionBrowserSourceMaps: false`, and `experimental.serverSourceMaps: false`.\r\n\r\nHave you seen this, @sablier-labs/frontend?","createdAt":"2025-03-16T17:13:32Z","labels":[],"number":1513,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable source maps in Vercel build","type":"discussion","updatedAt":"2025-03-17T17:31:44Z","url":"https://github.com/sablier-labs/interfaces/discussions/1513"},{"author":"PaulRBerg","body":"The auto-generated `.eslintcache` files are not cleared by the `clean` scripts, e.g.\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/constants/package.json#L53\r\n\r\nWhy?\r\n\r\nEdit: same question for `.stylelintcache`.","createdAt":"2023-06-05T16:30:54Z","labels":[],"number":322,"repository":"sablier-labs/interfaces","state":"closed","title":"Why is `.eslintcache` not cleared by the `clean` scripts?","type":"discussion","updatedAt":"2025-03-16T21:50:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/322"},{"author":"PaulRBerg","body":"This step:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/ebdd6ee73db89059caeedd9d3b00148c47d70254/.github/workflows/ci-landing.yml#L60-L61\r\n\r\nTakes a long time:\r\n\r\n<img width=\"400\" alt=\"SCR-20240111-rmqt\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2c252ea3-9fa8-4520-981a-fe54e41bdcc7\">\r\n\r\nWe should figure out how to lower the build time in the cache. Maybe we could merge it with the app build step somehow, and cache it?","createdAt":"2024-01-11T18:09:05Z","labels":[],"number":823,"repository":"sablier-labs/interfaces","state":"closed","title":"Figure out a way to lower the packages build time in CI","type":"discussion","updatedAt":"2025-03-16T14:52:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/823"},{"author":"razgraf","body":"Things to do before we have our official launch in February for fees, lockup merged and the new airdrops.\r\n\r\n- [x] Update subgraphs with new deployment addresses\r\n- [x] Update services with new deployment addresses\r\n- [x] Update app with new deployment addresses\r\n- [x] Update docs to mention the new monolithic architecture, as well as new subgraph endpoints (if any) and aliases\r\n   - https://github.com/sablier-labs/docs/issues/203#issuecomment-2609803171\r\n- [x] Update templates\r\n- [x] Promote envio to production \r\n- [x] Snapshot interfaces repository in an archive/pre-fees branch","createdAt":"2025-01-23T13:29:21Z","labels":[],"number":1340,"repository":"sablier-labs/interfaces","state":"closed","title":"[Lockup Merged Q1-2025] Pre-launch checks","type":"discussion","updatedAt":"2025-03-14T16:36:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/1340"},{"author":"razgraf","body":"This is a thread about alternative indexing solutions, continuing the research started in #774.\r\n\r\nWe've integrated Envio. While the development effort was quite high, we're happy with it at the moment (and looking forward to their potential updates [v2] and new features). \r\n\r\nRegardless, there have been a ton of other solutions popping up in the space (similar to what happened with the RPC-provider explosion) so I figured we could use a thread to track them, as well as any R&D we may do.","createdAt":"2024-07-16T10:04:08Z","labels":[],"number":1018,"repository":"sablier-labs/interfaces","state":"open","title":"Alternative indexing solutions","type":"discussion","updatedAt":"2025-03-12T17:18:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/1018"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAs we continue expanding to more and more EVM chains, the maintenance cost increases in non-linear ways. For example, we now have to update multiple sections of the docs site whenever a new deployment is made:\r\n\r\nhttps://github.com/sablier-labs/docs/issues/272\r\n\r\n## Solution\r\n\r\nWhat if we centralized all of our deployments in a single, neat npm package, which contained the following information?\r\n\r\n- [x] Deployment addresses\r\n- [x] Subgraph endpoints\r\n\r\nThen, we could install the package in the Interfaces repo and the Docs repo, avoiding repetition and lowering the maintenance cost in the process. Additionally, this package might prove useful to our integrators, too.\r\n\r\nIn effect, this package would 'bridge the gap' between the Interfaces and the Docs repo in the sense that the addresses wouldn't be duplicated anymore.\r\n\r\nNotes:\r\n\r\n- I thought about including the fees and the governance addresses, but those are dynamic values that can change at any time.\r\n- Similarly, there's no need to include the [contract broadcaasts](https://github.com/sablier-labs/deployments) in the npm package, since these are sophisticated development files that may contain errors.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/engineers for feedback, especially @sablier-labs/frontend","createdAt":"2025-02-21T14:12:07Z","labels":[],"number":1448,"repository":"sablier-labs/interfaces","state":"closed","title":"Package for listing deployment addresses and subgraph endpoints?","type":"discussion","updatedAt":"2025-03-12T16:41:44Z","url":"https://github.com/sablier-labs/interfaces/discussions/1448"},{"author":"razgraf","body":"Kayen needed an \"Unlock cliff\" where the cliff amount is zero, but there's still a cliff (period of static value) happening. We usually count cliff as a period after an unlock happens, so this is an interesting request.\r\n\r\nOne can solve it by selecting a very low cliff amounts (e.g. 0.00001), very close to zero. But if we get more requests like this, we could check if we can enable an actual zero value for the cliff amount field.\r\n\r\n<img width=\"682\" alt=\"Screenshot 2025-03-07 at 19 04 25\" src=\"https://github.com/user-attachments/assets/106cec29-71d9-4fe0-a7a7-0d49c44c35e0\" />\r\n","createdAt":"2025-03-07T17:06:13Z","labels":[],"number":1484,"repository":"sablier-labs/interfaces","state":"open","title":"Unlock cliff but with cliff amount = 0","type":"discussion","updatedAt":"2025-03-07T17:06:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/1484"},{"author":"PaulRBerg","body":"We have recently [decided](https://github.com/sablier-labs/private-discussions/discussions/6) to build a LlamaPay-style open-ended streaming product for the EVM — called Sablier Flow.\r\n\r\nThat comes with some implications for the UI - will we have a separate URL for Flow, or will we embed it within the existing app?\r\n\r\nMy vote would go to the latter, but I will let you guys consider the pros and cons.\r\n\r\n@razgraf @gavriliumircea","createdAt":"2023-10-24T15:02:27Z","labels":[],"number":601,"repository":"sablier-labs/interfaces","state":"closed","title":"Multi-streaming model UI/UX","type":"discussion","updatedAt":"2025-03-06T20:33:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/601"},{"author":"PaulRBerg","body":"It'd be helpful to be able to hide the voided streams in the Flow dashboard.\n\nOr, more generally, to have a multi-select that allows the user to select the particular statuses they want to see (across both Lockup and Flow dashboards).","createdAt":"2025-02-06T15:13:15Z","labels":["type: feature"],"number":1418,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature for hiding voided streams in the Flow dashboard","type":"discussion","updatedAt":"2025-04-07T14:26:31Z","url":"https://github.com/sablier-labs/interfaces/discussions/1418"},{"author":"PaulRBerg","body":"We touched upon this issue in the Figma designs — how should the payment rate be displayed in the UI?\r\n\r\nThe Flow contract stores the payment rate on a per-second basis. However, displaying only that in the UI wouldn't be helpful. Users think in terms of less granular payment rates, e.g., daily, monthly, or annually.\r\n\r\nMonthly seems like the ideal solution, but unfortunately, months are not equal in length, so the rate would only be approximate. The UI could approximate 1 month to 30 days, but the actual amount streamed by the 1st day of each month will be slightly higher or slightly lower.\r\n\r\nThus, my suggestion is:\r\n\r\n- Default to annual compensation (and ignoring leap years)\r\n- Allow users to toggle between between annual, monthly, and daily\r\n- When displaying the monthly rate, add a warning that it's only an approximation\r\n\r\nCC @sablier-labs/engineers","createdAt":"2024-09-18T10:19:27Z","labels":[],"number":1072,"repository":"sablier-labs/interfaces","state":"closed","title":"How to display the Flow payment rate in the UI (daily, monthly, annually, etc.)?","type":"discussion","updatedAt":"2025-03-05T00:18:56Z","url":"https://github.com/sablier-labs/interfaces/discussions/1072"},{"author":"PaulRBerg","body":"For exempting senders and token addresses.\r\n\r\n[Vercel Edge Config](https://vercel.com/docs/storage/edge-config)\r\n\r\nRelated: https://github.com/sablier-labs/interfaces/issues/1367#issuecomment-2653661456","createdAt":"2025-02-13T20:03:11Z","labels":[],"number":1426,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to use Vercel Edge Config for fee exemptions","type":"discussion","updatedAt":"2025-03-04T00:33:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/1426"},{"author":"PaulRBerg","body":"It seems to take about ~7 minutes to run the lint step in the CI job:\r\n\r\n<img width=\"800\" alt=\"Screenshot 2023-08-16 at 6 26 24 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/3fc41037-eded-41cb-9007-677f0c4ff5fd\">\r\n","createdAt":"2023-08-16T15:27:50Z","labels":[],"number":561,"repository":"sablier-labs/interfaces","state":"closed","title":"Why does the lint step take so long in CI?","type":"discussion","updatedAt":"2025-03-03T20:57:03Z","url":"https://github.com/sablier-labs/interfaces/discussions/561"},{"author":"gavriliumircea","body":"This discussion provides a step-by-step guide on preparing and deploying a custom server for a specific airdrop campaign.\r\n\r\n### General principles\r\n\r\nTo support a specific airdrop campaign, we need to complete the following steps:\r\n\r\n1. Generate a Merkle Tree from the client-provided file.\r\n2. Serialize the campaign and store it on IPFS.\r\n3. Precompute and save the eligibility proofs for each qualifying address.\r\n4. Provide an eligibility endpoint for client applications and web pages to access.\r\n\r\nTo accomplish this, we decided to divide the functionality into two components:\r\n\r\n1. A [Rust-based script](https://github.com/sablier-labs/rust-merkle-processor): Responsible for generating the Merkle Tree and handling the serialization process.\r\n2. A [NestJS API](https://github.com/sablier-labs/custom-airdrops-template): Precomputes all proofs, stores them in a Redis instance, and provides the eligibility endpoint.\r\n\r\n**Why Redis as the Database?**\r\n\r\nWe chose Redis for the following reasons:\r\n\r\n1. High-speed read operations.\r\n2. No write/update operations after the initial data population.\r\n3. Recipient addresses can serve as keys.\r\n4. No need for complex queries (e.g., joins).\r\n5. A well-defined value format is guaranteed.\r\n\r\n**Note:** While reviewing the code, you will notice that, in addition to the JSON format uploaded to IPFS, we also use Protocol Buffers (protobuf). This choice was made because protobuf is more efficient for handling large-scale campaigns.\r\n\r\n### Rust script\r\n\r\nYou can find the source code for the Rust script [here](https://github.com/sablier-labs/rust-merkle-processor).\r\n\r\nWhile developing this script, we aimed to reuse as much of the Merkle API structure and data types as possible.\r\n\r\nThe script supports two execution modes:\r\n\r\n2. `file` mode: Uses a `.csv` file as the data source.\r\n1. `ipfs` mode: Uses an IPFS CID as the data source.\r\nTo switch between these modes, set the `EXECUTION_MODE` environment variable to the desired value.\r\n\r\n**Running the Script in file Mode**\r\n\r\nIf you choose to run the script in file mode, ensure that:\r\n\r\n1. A `data.csv` file (containing recipients and amounts for the campaign) is placed at the root of the project.\r\n2. You update the `DECIMALS` constant in src/main.rs to match the token’s decimal precision.\r\n\r\nBy running `cargo run` command the script will process the file, upload it to IPFS, print the CID in the console and generate a `campaign.bin` file.\r\n\r\n**Running the Script in ipfs Mode**\r\n\r\nIf you choose to run the script in file mode you need to ensure that the `CAMPAIGN_CID` env var has the proper value. By running `cargo run` command the script will process the data from ipfs and generate a `campaign.bin` file.\r\n\r\n**Note:** For both the execution mode ensure that the IPFS related information are configured properly.\r\n\r\n### Nest JS API\r\n\r\nYou can find the source code for the NestJS API [here](https://github.com/sablier-labs/custom-airdrops-template).\r\n\r\nThis API follows a module-oriented architecture typical of NestJS applications and has two main responsibilities:\r\n\r\n1. Exposing an eligibility endpoint for interfaces to query.\r\n2. Precomputing Proofs & Populating Redis\r\n\r\n**Precomputing all recipients' Merkle proofs and storing them in a Redis instance.**\r\n\r\nBefore starting this process, ensure the following:\r\n\r\n- The campaign.bin file (generated by the Rust script) is placed inside the src/files directory.\r\n- The `REDIS_URL` environment variable points to a valid Redis instance.\r\n- The `NODE_ENV` environment variable is set to development. This action is **disabled** on the production environment.\r\n\r\nOnce these conditions are met, you can start the local server by running:\r\n`yarn start:dev`\r\nAfter the server is running, trigger the process by sending a GET request to:\r\n`http://localhost:3000/process`\r\n\r\nThis will initiate the Merkle proof computation and populate the Redis instance accordingly.\r\n\r\n**Check eligibility**\r\n\r\nThis endpoint is available in both the development and the production environments. The `REDIS_URL` should point to the correct Redis Instance. After the server is running (locally or in a deployed environment), trigger the process by sending a GET request to:\r\n`{server_url}/eligibility?address={0x...}`\r\n\r\n### Modifying the Protobuf Structure & Corresponding Types\r\n\r\nWhile extending the application, follow the standard practices of the respective frameworks and programming languages (NestJS/Rust). However, if you need to modify the protobuf structure and its corresponding types, follow these steps:\r\n\r\n**Rust**\r\n\r\n1. Open src/campaign.proto and update the file with the desired structure.\r\n2. Run `cargo build`. This will regenerate the data types in `src/generated` based on the updated protobuf schema.\r\n\r\n**Nest JS** \r\n\r\n1. Open `src/proto/campaign.proto` and update the file with the desired structure.\r\n2. Run the following commands to regenerate the protobuf files:\r\n`npx pbjs --target static-module --wrap commonjs -o src/proto/campaign_pb.js src/proto/campaign.proto\r\nnpx pbts -o src/proto/campaign_pb.d.ts src/proto/campaign_pb.js`\r\nThis will update `src/proto/campaign_pb.js` and `src/proto/campaign_pb.d.ts`, ensuring the correct type definitions for the modified schema.\r\n\r\n### End-to-End Guide for Deploying a Custom Server\r\n\r\nWhen a client requests the deployment of a custom server, follow these steps:\r\n\r\n**1. Login to Railway**\r\n\r\n1. Go to [Railway](https://railway.app/) and log in with the appropriate credentials.\r\n2.  Select or create a new Railway Workspace \r\n\r\n**2. Redis setup**\r\n\r\n3. Click on \"Create New Project\" and select the option \"Empty Project\"\r\n4. Click the \"Create\" button (top-right corner), then select \"Database\" → \"Add Redis\".\r\n5. Select the newly created instance and select the data tab\r\n6. Select the newly created Redis instance and navigate to the \"Data\" tab\r\n7. Click \"Connect to Database Redis\" → \"Public Network\", then copy the Connection URL\r\n8. Use this connection string to set the `REDIS_URL` environment variable in the NestJS API\r\n\r\n**3. Deploy the NestJS API**\r\n\r\n9. Click \"Create\" (top-right corner), then select \"GitHub repo\".\r\n10. Choose [sablier-labs/custom-airdrops-template](https://github.com/sablier-labs/custom-airdrops-template) or the cloned version of the repository.\r\n11. After the instance is created, go to the \"Settings\" tab and disconnect the branch under the \"Branch connected to production\" section (since GitHub Actions will handle deployment).\r\n\r\n**4. Run the Rust Script**\r\n\r\n12. Depending on the available data, execute the Rust script in the appropriate execution mode **Note** If running in `file` mode, the generated CID should be provided to Sablier Interface to create the actual campaign.\r\n\r\n**5. Run the Rust Script**\r\n\r\n13. Copy the generated `campaign.bin` file from the Rust script and place it inside the `src/files` directory in the NestJS API.\r\n14. Run a local instance of the NestJS API and trigger the process by performing a GET request to: `http://localhost:3000/process`\r\n\r\n**6. Finalize Deployment**\r\n\r\n15. Update the GitHub Actions workflow of the NestJS API to use the Railway instance created in **Step 9**, ensuring that all environment variables are correctly configured.\r\n16. Trigger the deployment and verify that everything works as expected.\r\n\r\n### Load/Stress Testing the Deployed API\r\n\r\nIf you're interested in load/stress testing the deployed version of the API, I highly recommend using the [K6 library from Grafana](https://k6.io/)—a powerful and efficient tool for performance testing.\r\n\r\nYou can find a GitHub Gist with a stress test script for a deployed version of the [API](https://gist.github.com/gavriliumircea/6b4f47c3608fc0191ebc89ad36846474)\r\n\r\n**Test Results**\r\n\r\nFor a campaign with 1 million users, a test was conducted with 10,000 eligibility requests executed in 1 minute, yielding the following results:\r\n\r\n![image](https://github.com/user-attachments/assets/c9aa64ad-1ce4-499e-a6f7-69fa633e5ef5)\r\n","createdAt":"2025-02-19T14:08:15Z","labels":[],"number":1444,"repository":"sablier-labs/interfaces","state":"open","title":"Prepare and deploy custom server for airdrops campaigns","type":"discussion","updatedAt":"2025-02-20T09:37:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/1444"},{"author":"PaulRBerg","body":"Source the number of users from Dune rather than having it hard-coded on the landing page:\r\n\r\n<img width=\"397\" alt=\"Screenshot 2023-10-11 at 3 24 00 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/eb5db217-fc86-413b-ae1a-40ca47caa661\">\r\n\r\nThis would make maintainability easier because we wouldn't have to keep updating the figures.\r\n\r\nAlso, I imagine that if we do this, we could also pull other sorts of interesting data from Dune (and display them on the landing page):","createdAt":"2023-10-11T14:25:09Z","labels":[],"number":589,"repository":"sablier-labs/interfaces","state":"closed","title":"Source number of users from Dune","type":"discussion","updatedAt":"2025-02-18T16:01:37Z","url":"https://github.com/sablier-labs/interfaces/discussions/589"},{"author":"PaulRBerg","body":"Low-priority, but we've recently received an (indirect) request from Treehouse for building a UI to approve an operator for the NFT.\r\n\r\nI have started this GD to monitor feature requests for this.\r\n\r\nIn the meantime, we should suggest users to use [ABI Ninja](https://abi.ninja) for this.\r\n\r\ncc @sablier-labs/engineers\r\n\r\n<img width=\"450\" alt=\"SCR-20250217-loth\" src=\"https://github.com/user-attachments/assets/e46eb218-0c2f-4292-806d-1e2abc6eb7ee\" />\r\n","createdAt":"2025-02-17T10:57:28Z","labels":[],"number":1430,"repository":"sablier-labs/interfaces","state":"open","title":"UI for approving an NFT operator","type":"discussion","updatedAt":"2025-02-18T15:54:56Z","url":"https://github.com/sablier-labs/interfaces/discussions/1430"},{"author":"razgraf","body":"This thread is for integrators we know of who are using our indexers/subgraphs. In case we change anything to these (without backwards compatibility), like we did in our `v2` to no-`v2` migration in February 2025, we need to make sure we update them.\r\n\r\n\r\n_Note: keeping this in the interfaces repository for privacy reasons_","createdAt":"2025-02-12T15:22:05Z","labels":[],"number":1420,"repository":"sablier-labs/interfaces","state":"open","title":"Integrators relying on subgraphs","type":"discussion","updatedAt":"2025-02-12T15:51:42Z","url":"https://github.com/sablier-labs/interfaces/discussions/1420"},{"author":"PaulRBerg","body":"Starting a debate about whether we need a tutorial for Instant airdrops, cc @sablier-labs/everybody\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/719d2148-9c33-40e8-9afe-1f5e8fd46cb1\"/>\r\n","createdAt":"2025-02-03T14:07:08Z","labels":[],"number":1393,"repository":"sablier-labs/interfaces","state":"open","title":"Do we need a tutorial for Instant?","type":"discussion","updatedAt":"2025-02-03T14:11:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/1393"},{"author":"PaulRBerg","body":"Created this discussion for @sablier-labs/everybody to provide feedback for the Q1 2025 release of the Sablier UI.\r\n\r\nMore context on [Slack](https://sablier.slack.com/archives/C032HBFV4QJ/p1737729318133889).","createdAt":"2025-01-24T15:41:31Z","labels":[],"number":1343,"repository":"sablier-labs/interfaces","state":"closed","title":"Feedback for Q1 2025 release","type":"discussion","updatedAt":"2025-07-09T14:09:10Z","url":"https://github.com/sablier-labs/interfaces/discussions/1343"},{"author":"razgraf","body":"Stemming from @PaulRBerg's suggestion [here](https://github.com/sablier-labs/v2-interfaces/discussions/1343#discussioncomment-12009829), over a call, we explored the idea of moving the claim UI directly inside the Airdrop page.\r\n\r\nFor context, both senders and recipients view the same Airdrop profile page. While for senders, the large number of details prove very useful, recipients have a more narrow mission, which is mostly focused on the claiming/eligibility system. Since recipients are the majority beneficiary of this page, we could move the claiming experience as a whole, at the top of the page.\r\n\r\nThe structure would then be:\r\n- campaign name\r\n- eligibility and claim experience (form, explainer and buttons)\r\n- campaign details and metrics below","createdAt":"2025-01-31T16:25:54Z","labels":[],"number":1365,"repository":"sablier-labs/interfaces","state":"open","title":"Redesign the claim experience to be inlcuded directly in the airdrop profile","type":"discussion","updatedAt":"2025-02-03T12:10:39Z","url":"https://github.com/sablier-labs/interfaces/discussions/1365"},{"author":"PaulRBerg","body":"Tracking requests for using the Payments tab (Sablier Flow) for vesting instead of payroll.","createdAt":"2025-02-02T13:14:15Z","labels":[],"number":1383,"repository":"sablier-labs/interfaces","state":"open","title":"Vesting with top-ups","type":"discussion","updatedAt":"2025-02-02T13:17:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/1383"},{"author":"gavriliumircea","body":"This discussion aims to provide a comprehensive overview of our current infrastructure supporting all Airdrops features, including the security measures in place and the scaling mechanisms we have implemented. Since the launch of Airdrops, we have experienced significant usage, and this discussion will also address the challenges we are encountering and the strategies we are exploring to overcome them.\r\n\r\n### Functionalities overview\r\n\r\nFor the Airdrops processing and proof generation we use 2 separate systems:\r\n\r\n- Some [Rust written lambda functions](https://github.com/sablier-labs/merkle-api) hosted on Vercel.\r\n- [2 Node JS services](https://github.com/sablier-labs/services) hosted on Railway connected to a Postgres DB.\r\n\r\n1. **Airdrop create**: The provided .csv file is uploaded to a Rust Lambda function, which verifies the file, generates a Merkle Tree from the data, uploads the serialized tree to IPFS, and returns the root and IPFS CID if successful. At this stage, the campaign is not yet introduced into the database. Once the MerkleFactory contract emits a CreateLL, CreateLT, or CreateInstant event, it is picked up by the [processor service](https://github.com/sablier-labs/services/tree/staging/apps/processor), which actively listens for these events. When such an event is registered, the corresponding campaign is processed and introduced into the database.\r\n2. **Check eligibility**: This call is made directly to the [API service](https://github.com/sablier-labs/services/tree/staging/apps/api). If the campaign has already been processed, the API either computes or fetches the Merkle Proof from the database, depending on whether the proof was precomputed. Otherwise, the campaign is downloaded from IPFS, and the proof is computed on the fly.\r\n3.  **Eligible**: This call is made directly to the [API service](https://github.com/sablier-labs/services/tree/staging/apps/api). It returns all processed campaigns where the specified address is included in the recipient list.\r\n4. **Hidden**:This call is made directly to the [API service](https://github.com/sablier-labs/services/tree/staging/apps/api). It returns all processed campaigns that were marked as hidden.\r\n5. **Campaign details**:This call is made directly to the [API service](https://github.com/sablier-labs/services/tree/staging/apps/api). It returns all the information available about a specific processed campaign.\r\n6. **Update campaign details**: This call is made directly to the [API service](https://github.com/sablier-labs/services/tree/staging/apps/api). It allows the campaign admin to update information about the campaign like the geoblock list and the hidden option.\r\n\r\n### Challenges and security concerns\r\n\r\nSince our launch, we’ve been fortunate to accommodate many campaigns, which have led to a significant increase in both the number of daily visitors and the volume of requests processed. We discovered that thousands of users could simultaneously check their eligibility for a specific campaign, potentially resulting in thousands of active database connections at the same time. Additionally, several projects expressed interest in integrating our contracts and backend services into their custom claim pages. However, we found that these integrators often neglected the efficiency of their calls to our API endpoints.\r\n\r\nAlthough we obfuscated our server routes using Vercel API Routes and validated referrer headers, some integrators bypassed these safeguards by directly calling the Vercel routes and spoofing the referrer headers. Beyond integrators, we also detected bots attempting to check the eligibility of hundreds of thousands of addresses per minute. Finally, we encountered several DDoS attacks specifically targeting our API routes, with a focus on the eligibility endpoint.\r\n\r\n### Security systems\r\n\r\nAs mentioned above, we decided early on to obfuscate the API routes in the app, which we achieved using Vercel API Routes. Additionally, in our eligibility check system, we introduced Google reCAPTCHA verification, ensuring that a token is validated before any API request is performed. To mitigate excessive requests, we implemented a rate limiter that allows up to 50,000 unique IPs to make a maximum of 200 requests every 15 minutes ([details](https://github.com/vercel/next.js/tree/canary/examples/api-routes-rate-limit)).\r\n\r\nBoth the Node.js and Rust backend services utilize Bearer Tokens, ensuring that calls from unauthorized parties are blocked.\r\n\r\nTo further address DDoS and bot attacks, we began leveraging the [Vercel Firewall](https://vercel.com/docs/security/vercel-waf). We implemented rate-limiting rules that track both IP addresses and the JA4 Digest (helpful in cases where attackers frequently change their IP addresses) for our eligibility and hidden routes. These rules restrict users to a maximum of 20 requests per 60 seconds. You can review the complete firewall configuration and analytics [here](https://vercel.com/sablier/client/firewall).\r\n\r\n### Backend Scaling\r\n\r\nWe strive to provide the best user experience (UX) for very large campaigns, potentially accommodating campaigns with over 1 million recipients. Achieving this goal requires addressing several scaling challenges. First, given the high volume of requests—not only those from users checking their eligibility for specific campaigns but also automated requests such as those for the \"Claimable\" tab and hidden campaigns—we must support a significant number of simultaneous database connections. To tackle this, we started using [Prisma Accelerate](https://www.prisma.io/accelerate) with our PostgreSQL database, which allows us to manage up to ~100~ 1000 parallel database connections effectively. Unfortunately, achieving this with Prisma Accelerate introduced some limitations during write operations. These limitations caused issues with preprocessing recipient Merkle Proofs in the database and imposed a maximum size per query. To address these challenges, we decided to split the Node.js server into two separate services with distinct responsibilities:\r\n\r\n- `processor`: This service handles event listening and campaign processing. It does not use Prisma Accelerate to avoid any limitations during write operations and does not require multiple simultaneous database connections.\r\n- `api`: This service uses Prisma Accelerate and is responsible for all READ requests, such as eligibility checks, retrieving eligible data, hidden campaigns, and campaign details.\r\n\r\nWhile this solution is currently effective, we should consider other infrastructure options, such as Amazon Web Services (AWS), to accommodate new, large-scale campaigns. \r\n\r\nAs previously mentioned, the initial .csv processing is performed by a Rust serverless function hosted on Vercel. However, Vercel's serverless functions have a maximum request body size limit of 4.5 MB, which prevents users from uploading larger .csv files. To overcome this limitation, we need to change our hosting environment for the Rust services. AWS Lambda, for instance, allows a maximum payload size of 6 MB for synchronous invocations, which offers a slight improvement and also on AWS be can host a RUST traditional server that does not have any body size limitations . Despite this, even AWS Lambda may not fully meet our needs for very large campaigns. \r\n\r\n@sablier-labs/engineers please feel free to provide any feedback or ideas to improve our current system.\r\n","createdAt":"2025-01-22T21:46:10Z","labels":[],"number":1338,"repository":"sablier-labs/interfaces","state":"open","title":"Airdrops backend services present and future needs","type":"discussion","updatedAt":"2025-03-04T00:23:30Z","url":"https://github.com/sablier-labs/interfaces/discussions/1338"},{"author":"razgraf","body":"We've had users ask us for more metrics related to the Airstream campaigns. Given most of them are relatively easy to get (esp. using the backend) we could build a new `/airstream/:id/metrics` page (to limit the number of unwanted requests) with some more stats and reports:\r\n\r\n- Number of claims [weekly / total] - already tracked by the subgraphs\r\n- Amount claimed [weekly / total] - already tracked by the subgraphs\r\n- A daily graph of claims - already tracked by the subgraphs\r\n- List of recipients who already claimed + amount - tracked by the subgraphs, shown in-page or exported to JSON\r\n    - Withdrawn amounts - tracked by the protocol subgraphs, needs to be aggregated\r\n- List of recipients who did not claim - tracked by subtracting already claimed (subgraph) from registered recipients (backend), shown in-page or exported to JSON\r\n- Page views - can we extract this from somewhere? Maybe vercel.\r\n\r\n<img width=\"546\" alt=\"Screenshot 2024-07-19 at 12 56 07\" src=\"https://github.com/user-attachments/assets/77308a25-f1f1-4d11-ab11-bfb9011e3deb\">\r\n","createdAt":"2024-07-19T10:02:04Z","labels":["type: feature"],"number":1020,"repository":"sablier-labs/interfaces","state":"open","title":"Metrics page for airdrop campaigns","type":"discussion","updatedAt":"2025-01-20T14:55:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/1020"},{"author":"PaulRBerg","body":"I've recently suggested [nudging recipients toward connecting their wallet](https://github.com/sablier-labs/v2-interfaces/issues/1319) when the _Recipient_ tab is selected in the Dashboard.\r\n\r\nWhile writing that issue, I realized that in the Dashboard, we are not communicating the fact that a connected wallet is required to see stream data.\r\n\r\nWhat if we added a similar informational card somewhere (maybe where it says, \"No results found?\", with a graphical asset), similar to the one in the create stream page? We don't need to make it a yellow warning—a simple black text would be helpful.\r\n\r\n<img width=\"300\" alt=\"SCR-20250115-nsrn\" src=\"https://github.com/user-attachments/assets/11963fc0-11b3-433b-9341-e258c1561ac6\" />\r\n\r\nAnd let me spitball another idea — what if we made the _Search_ tab the default so that everyone will see something (latest Ethereum Mainnet streams) the first time they open Sablier?\r\n\r\ncc @sablier-labs/frontend and @maxdesalle for feedback\r\n\r\nP.S. we have recently received this feedback from a user (Ultra):\r\n\r\n<img width=\"250\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f607ef7a-9afa-49fd-ad75-ead96db1aae0\" />","createdAt":"2025-01-15T13:35:01Z","labels":[],"number":1320,"repository":"sablier-labs/interfaces","state":"closed","title":"Explain to users that a wallet connection is necessary to see data in the dashboard","type":"discussion","updatedAt":"2025-01-16T11:04:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/1320"},{"author":"smol-ninja","body":"## Lockup\r\n\r\nETH fee will be optional in Lockup. All the functions, including `create` and `batch`, will contain the `payable` modifier. This means that any transaction can attach ETH value to it, which will then be deposited into the Lockup contract. If a transaction is reverted, the fee will also be reverted by the EVM.\r\n\r\n> [!TIP]\r\n> These fees should not be determined based on the content of the function. For example, whether a `withdrawMultiple` transaction is called on 100 streams or 1 stream, the fee applied should remain the same. However, the fee decision will always remain at the discretion of the UI.\r\n\r\nHowever, there will be an exception with `withdrawMultiple`. The [new implementation](https://github.com/sablier-labs/v2-core/blob/staging/src/abstracts/SablierLockupBase.sol#L492-L520) does not revert the transaction if withdrawing from a stream fails. Therefore, any fee attached to `withdrawMultiple` will be taken even if all streams are invalid.\r\n\r\n## Flow\r\n\r\nSame as above but there are NO exception like `withdrawMultiple`.\r\n\r\n> [!IMPORTANT]  \r\n> Minimum fee CANNOT be enforced in Lockup and Flow contracts. Therefore, a user will be able to interact with smart contracts directly and avoid paying the fee.\r\n\r\n## Airdrops\r\n\r\nUnlike Lockup, airdrops campaigns will only have a fee attached to the `claim` function. The minimum fee can be enforced by the contract admin. At the time of the claim, if the ETH fee attached is less than the minimum fee enforced, the transaction will revert. Note that there will be no cap on how much fee can be attached to the `claim` function, the only requirement will be that the ETH fee should be greater than or equal to the fee set.\r\n\r\nAdmin can also specify custom fee for some campaign creators. If custom fee is enabled, then custom fee will be applied, if not, then default fee will be applied. The same rules, as above, apply on the custom fee.\r\n\r\ncc @sablier-labs/everybody.","createdAt":"2024-12-16T16:02:09Z","labels":[],"number":1257,"repository":"sablier-labs/interfaces","state":"open","title":"Summary of Protocol Fees in the upcoming releases","type":"discussion","updatedAt":"2025-01-13T12:28:09Z","url":"https://github.com/sablier-labs/interfaces/discussions/1257"},{"author":"smol-ninja","body":"Is there any design-specific reason why we don't fetch all streams across all chains in the \"All Streams\" section? Wouldn't it be great to see all the streams without manually switching the network in the header? I assume we fetch that information through the user wallet RPC and that's why it's like that. But maybe from a user perspective, if we can show all streams, that would be quite useful information.","createdAt":"2023-12-10T23:53:28Z","labels":["type: feature","backlog"],"number":694,"repository":"sablier-labs/interfaces","state":"open","title":"Aggregating cross-chain data into one unified view","type":"discussion","updatedAt":"2025-01-10T13:36:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/694"},{"author":"PaulRBerg","body":"Was there any particular reason for introducing a new term ('Claimable') instead of just sticking with 'Eligible', which is already used in the 'Check Eligibility' functionality of an airdrop campaign page?\r\n\r\n<img width=\"400\" alt=\"SCR-20241205-mcmr\" src=\"https://github.com/user-attachments/assets/5829d3c6-a8ef-4c8f-8de1-f3ca6f7a2c70\">\r\n\r\ncc @sablier-labs/frontend\r\n","createdAt":"2024-12-05T13:33:45Z","labels":[],"number":1227,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"Claimable\" tab to \"Eligible\"","type":"discussion","updatedAt":"2025-01-10T13:15:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/1227"},{"author":"maxdesalle","body":"Aside from the instant Airstreams that are about to arrive in the near future, we should add support for one-time payments in Sablier.\r\n\r\nLet's say Aztec wants to pay us to deploy on their network. Instead of doing so via a regular Ethereum transaction (them just sending the USDC to our wallet via an ERC-20 transaction), they could make the payment via Sablier.\r\n\r\nThere would be no value benefit to do so AFAIK in Sablier, except the fact that it allows users to manage all their payments, wether instant or vested, in one platform, as opposed to having to use two different platforms.\r\n\r\nThis way we could also route the revenues we generate through our protocol as well and increase our metrics.\r\n@sablier-labs/everybody ","createdAt":"2024-10-29T02:21:42Z","labels":[],"number":1153,"repository":"sablier-labs/interfaces","state":"open","title":"One-time payments","type":"discussion","updatedAt":"2024-12-23T20:24:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/1153"},{"author":"PaulRBerg","body":"I received this feature request for airstreams from a Sablier user on Telegram:\r\n\r\n> just an idea but what about having a input module that feed from a subgraph\r\n>\r\n> so the input instead of being a CSV would be building itself using some javascript like digitalocean is doing with serverless functions\r\n\r\nI'm not sure how feasible or useful it would be, but I thought to share the idea just in case.\r\n\r\ncc @sablier-labs/frontend ","createdAt":"2023-10-24T16:52:49Z","labels":[],"number":1292,"repository":"sablier-labs/interfaces","state":"open","title":"Let users feed the recipient list from a subgraph","type":"discussion","updatedAt":"2024-12-23T19:54:18Z","url":"https://github.com/sablier-labs/interfaces/discussions/1292"},{"author":"PaulRBerg","body":"## Rationale\n\nWe're in full-blown bear market right now, but the bull will eventually reveal its horn. And if that will be anything like 2021, we will be onboarding dozens of new token projects every day.\n\nMy proposal is to contemplate a front-end fee mechanism in advance so that when the right time comes, we can develop and activate it quickly. Even better would be to have a draft implementation on some staging branch, although this is subject to wrapping up other milestones first.\n\n## Proposal\n\nAt a high level, there are two ways to go about this:\n\n1. Charge a fixed fee in USDC\n2. Charge a percentage fee in whatever token is streamed (via the `broker` parameter)\n\nI imagine that the 2nd option would be easier to implement, but it might not appeal to our users' preferences. That is, users may prefer to pay in USDC despite streaming FOO tokens (easier for accounting). More brainstorming needed.\n\nIf they agree with this proposal, I will let @razgraf and @gavriliumircea follow up with the specific implementation details (i.e. which parts of the code base will be touched by the said fee mechanism).\n\nI would also appreciate feedback from @maxdesalle.","createdAt":"2023-09-21T18:34:38Z","labels":[],"number":585,"repository":"sablier-labs/interfaces","state":"closed","title":"Front-end fees to pre-empt the bull market","type":"discussion","updatedAt":"2024-12-23T19:07:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/585"},{"author":"PaulRBerg","body":"We've recently encountered a user who wanted to create an airdrop but was using the Vesting tab:\r\n\r\n<img width=\"400\" alt=\"SCR-20241223-nsbc\" src=\"https://github.com/user-attachments/assets/a8dd2fc9-b693-422d-8bdb-6f979f6c9408\" />\r\n\r\nGiven that airdrops drive so much usage to the app, we need to ensure that we're losing as few users as possible.\r\n\r\nThus, I suggest implementing a handler in the CSV uploader in Lockup and Flow that detects if the CSV file is meant for airdrops, and informs the user that they need to navigate to the _Airdrops_ tab.\r\n\r\ncc @sablier-labs/frontend do you agree?","createdAt":"2024-12-23T13:30:58Z","labels":[],"number":1290,"repository":"sablier-labs/interfaces","state":"closed","title":"Prompt user to switch to Airdrops tab when they are uploading an airdrop CSV","type":"discussion","updatedAt":"2024-12-23T13:36:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/1290"},{"author":"PaulRBerg","body":"## Original Proposal\r\n\r\nPasting my original proposal from [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11465823).\r\n\r\nThe idea is to move the \"Actions\" at the top of the screen in the Flow profile page:\r\n\r\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/bf2da7c0-a2ca-4196-9bd5-5a69bfe2937c\"/>\r\n\r\nThe rationale is that unlock in Lockup, the Actions modal is critical for Flow streams because users will keep returning to the same stream profile. But the Actions button is buried at the bottom of the profile.\r\n\r\nI suggest redesigning the layout in such a way that Actions appears at the top.\r\n\r\n## Responding to Feedback\r\n\r\nI'm responding to the feedback shared by @gavriliumircea and @razgraf [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11465823).\r\n\r\n1. Consistency for consistency's sake is a good default explanation, but I have suggested what I think it's a better explanation for this particular context, which overrides the default explanation. That is, due to the persistent nature of Flow streams, the action buttons matter much more than the informational sections under \"Attributes\".\r\n2. Consistency is irrelevant for Vesting users who do not use Payment streams, and vice versa.\r\n\r\nBut then, here's an idea — **what if we also moved the actions tab at the top in the Lockup stream profile**?\r\n\r\nThen, about this:\r\n\r\n> People will not miss that action panel, it's one scroll away and it's in plain sight\r\n\r\n- It's not one scroll away, at least not on my MacBook Air 13\", and not on mobile.\r\n- It's not in plain sight, at least not by the modern standards of attention spans. There's nothing flashy about those buttons.\r\n\r\n> data about the stream seems more important for setting context and may interest more people, since actions are geared towards recipients and senders\r\n\r\nThat's a fair point. But because the actions tab is shorter, the _Attributes_ would be seen regardless. Whereas now, the _Actions_ are buried.\r\n\r\nBut anyway, isn't our incentive to nudge users toward performing actions with streams? More actions → more txs → more revenues in 2025.\r\n\r\n<details><summary>See screen recording on MacBook Air</summary>\r\n<p>\r\n\r\nhttps://github.com/user-attachments/assets/14aacbc7-2caa-400b-9af4-d5f61c7012dd\r\n\r\n</p>\r\n</details> \r\n\r\n## More Feedback\r\n\r\ncc @sablier-labs/frontend for additional feedback\r\n\r\nkeywords:flow,layout,UI,UX,buttons,actions","createdAt":"2024-12-20T08:16:45Z","labels":[],"number":1275,"repository":"sablier-labs/interfaces","state":"open","title":"Reposition actions in the stream profile","type":"discussion","updatedAt":"2024-12-23T11:35:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/1275"},{"author":"PaulRBerg","body":"It might be helpful to enable [Release Health](https://docs.sentry.io/product/releases/health/) in Sentry in order to:\r\n\r\n> Monitor the health of releases by observing user adoption, usage of the application, percentage of crashes, and session data.\r\n\r\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/42756933-d96c-4e5a-9281-505b85682fa2\" />\r\n\r\ncc @sablier-labs/frontend ","createdAt":"2024-12-23T10:09:36Z","labels":[],"number":1287,"repository":"sablier-labs/interfaces","state":"open","title":"Enable Release Health in Sentry","type":"discussion","updatedAt":"2024-12-23T11:21:57Z","url":"https://github.com/sablier-labs/interfaces/discussions/1287"},{"author":"PaulRBerg","body":"This might make it easier for users to send error reports, and maybe we will have to ask for screenshots of errors less often:\r\n\r\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/efebd84f-66d9-4064-854d-2fac93030942\" />\r\n\r\n[Link here](https://sablier-labs.sentry.io/feedback/?project=4504854258450432&statsPeriod=14d#feedback-sidequest)\r\n\r\ncc @sablier-labs/frontend ","createdAt":"2024-12-23T10:13:51Z","labels":[],"number":1286,"repository":"sablier-labs/interfaces","state":"open","title":"Enable User Feedback widget in Sentry","type":"discussion","updatedAt":"2024-12-23T11:21:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/1286"},{"author":"gavriliumircea","body":"This discussion was created in order to centralize the teams feedback for the Flow app.","createdAt":"2024-11-25T15:54:32Z","labels":[],"number":1203,"repository":"sablier-labs/interfaces","state":"closed","title":"Flow Internal Feeback","type":"discussion","updatedAt":"2024-12-23T19:58:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/1203"},{"author":"tukwan","body":"Solana Interface Integration Research\r\n---\r\n# Wallets\r\n### **Popular Solana Wallets**\r\n\r\n1. **[Phantom](https://chromewebstore.google.com/detail/phantom/bfnaelmomeimhlpmgjnjophhpkkoljpa)** (The most popular one)\r\n2. **[Solflare](https://chromewebstore.google.com/detail/solflare-wallet/bhhhlbepdkbapadjdnnojkbgioiodbic)**\r\n\r\n3. **[Metamask with Solarflare Snap extension](https://snaps.metamask.io/snap/npm/solflare-wallet/solana-snap/)**\r\n\r\n> - \"The Solana Snap acts as an extension of your MetaMask wallet, enhancing it with Solana-specific functionalities. While MetaMask is tailored for Ethereum and its related networks, installing the Solana Snap allows you to hold SOL, manage Solana tokens and NFTs, and connect to Solana's vibrant ecosystem of apps.\"\r\n\r\n### **Sablier Wallet Connect**\r\n\r\nWe are currently using [rainbowkit](https://github.com/rainbow-me/rainbowkit), although it does not support Solana.\r\n\r\n- https://github.com/rainbow-me/rainbowkit/discussions/2024#discussioncomment-9648652\r\n- https://github.com/rainbow-me/rainbowkit/discussions/344?utm_source=chatgpt.com#discussioncomment-2718180\r\n- https://docs.phantom.app/library-integrations/rainbowkit\r\n> \"RainbowKit is an EVM wallet library that supports Phantom on **Ethereum** and **Polygon**.\"\r\n\r\n\r\n### Multichain Wallet Connect\r\n\r\n1. **[Reown](https://reown.com/)** (rebranded WalletConnect)\r\n    - Looks like free of charge.\r\n    - Doc: [Reown AppKit - Multichain](https://docs.reown.com/appkit/next/core/multichain)\r\n    - Demo: [Multichain Wagmi Solana Demo](https://appkit-lab.reown.com/library/multichain-wagmi-solana/)\r\n       - Source Code: [GitHub Link](https://github.com/reown-com/appkit/blob/main/apps/laboratory-new/src/pages/library/multichain-wagmi-solana.tsx)\r\n       \r\n> [!NOTE]\r\n>  [This demo](https://appkit-lab.reown.com/library/multichain-wagmi-solana/) appears to be the closest match for our needs. It’s worth POC using this solution.\r\n\r\n2. **[Dynamic](https://demo.dynamic.xyz/)**\r\n    - It's not free, [pricing](https://www.dynamic.xyz/pricing).\r\n    - Dynamic is used by [Magic Eden](https://magiceden.io/).\r\n\r\n3. **Custom wrapper**\r\n    - Building a custom dialog/modal around [rainbowkit](https://github.com/rainbow-me/rainbowkit) and [solana adapters](https://solana.com/developers/guides/wallets/add-solana-wallet-adapter-to-nextjs).\r\n\r\n# Mulitchain DApps\r\n\r\n### **Ribbon**\r\n- https://app.ribbon.finance\r\n- https://github.com/ribbon-finance/ribbon-frontend (v1)\r\n\r\n#### Insights:\r\n- CRA react app.\r\n- State contexts + [store with react-hooks-global-state](https://github.com/ribbon-finance/ribbon-frontend/blob/cdeea9b97051172f53743228ac01f028037a1586/lend/src/store/store.ts)\r\n- Wallets\r\n  - `@web3-react/walletconnect-v2`\r\n  - `@solana/wallet-adapters`\r\n- [Set up wallets](https://github.com/ribbon-finance/ribbon-frontend/blob/81cfbbfe3f6906525a73df5bc104ad5d9bce29c0/shared/src/hooks/useWeb3Wallet.tsx#L164)\r\n- [Contexts](https://github.com/ribbon-finance/ribbon-frontend/blob/3a1f9a42b8779710f09284afd5ab64c039722d3c/webapp/src/App.tsx#L50)\r\n- [isSolanaVault](https://github.com/search?q=repo%3Aribbon-finance%2Fribbon-frontend%20isSolanaVault&type=code) / [isSolanaChain](https://github.com/search?q=repo%3Aribbon-finance%2Fribbon-frontend+isSolanaChain&type=code)\r\n- [Having a seprate prop in context for solana](https://github.com/ribbon-finance/ribbon-frontend/blob/124c93a50d8181d253eb9392c33dd05357c95b41/shared/src/hooks/web3DataContext.tsx#L61)\r\n- [Custom modal](https://github.com/ribbon-finance/ribbon-frontend/blob/aa5b469a56c3ee3305e73d9a53602f8a73199407/webapp/src/components/Wallet/ConnectWalletBody.tsx#L155)\r\n---\r\n\r\n### **LayerSwap**\r\n\r\n- https://layerswap.io/app\r\n- https://github.com/layerswap/layerswapapp\r\n\r\n#### Insights:\r\n- NextJS pages app.\r\n- Contexts + `zustand`\r\n- Wallets\r\n  - `rainbowkit`\r\n  - `@solana/wallet-adapters`\r\n- [Wallet providers](https://github.com/layerswap/layerswapapp//blob/476c01165a72639233fcb83281e7aaab2df58ae6/components/WalletProviders/index.tsx#L12)\r\n- [Custom modal](https://github.com/layerswap/layerswapapp//blob/6fe752322d2fbe2697e1373d6358c00762962301/components/buttons/connectButton.tsx#L15)\r\n- [Wallets abstraction](https://github.com/layerswap/layerswapapp//blob/93f5f6858430ca2952885df1b9db2ced19fa36e1/hooks/useWallet.ts#L23)\r\n- [Balances abstraction](https://github.com/layerswap/layerswapapp//blob/556c6ece7b94116b6cf1cd738ae41246a500730f/hooks/useBalance.ts#L16)\r\n---\r\n\r\n### **Streamflow**\r\n- https://app.streamflow.finance/dashboard\r\n\r\nFrom our [competitors](https://www.notion.so/Sablier-VS-Competitors-1f391c08c6d14c3c843acdcef659e41a?pvs=4), I only found that Streamflow is a multichain DApp that connects to both Solana and Ethereum. I tested it, and it seems like they handle this by reloading the app and using **two separate paths**. You can't connect two wallets at the same time or see stats from both chains together.\r\n\r\n<details><summary>PHOTO</summary>\r\n<p>\r\n\r\n![streamflow](https://github.com/user-attachments/assets/8ca1251a-563d-49d1-beb7-d56e69f517ff)\r\n\r\n</p>\r\n</details> \r\n\r\n---\r\n\r\n### **Splits.org**\r\n\r\n- https://app.splits.org\r\n\r\nThis one doesn’t actually support Solana since it’s EVM-based, but it’s interesting to see because they have a multi-chain UI that doesn’t require reloading the app. You can load multiple wallets from different EVM chains at the same time.\r\n\r\n> [!NOTE]\r\n> Handle this approach would require more work for us to follow, especially since Solana isn’t EVM-compatible.\r\n\r\n\r\n**More links:**\r\n\r\n- https://splits.org/blog/multichain\r\n- https://splits.org/blog/engineering-multichain\r\n- https://goldsky.com (for subgraphs)\r\n\r\n\r\n<details><summary>PHOTO</summary>\r\n<p>\r\n\r\n![splits](https://github.com/user-attachments/assets/291491a4-c4ef-4a62-838a-915d627ffb73)\r\n\r\n</p>\r\n</details> \r\n\r\n---\r\n\r\n### **Other Mulitchain DApps**\r\n\r\n- https://magiceden.io\r\n- https://opensea.io\r\n- https://app.thorswap.finance\r\n- https://portalbridge.com\r\n\r\n> [!TIP]\r\n> In the Phantom wallet, it's good to turn off other networks. This makes it easier to see which DApps actually support Solana (instead of connecting to other networks through the Phantom wallet).\r\n\r\n<details><summary>PHOTO</summary>\r\n<p>\r\n\r\n![p](https://github.com/user-attachments/assets/a5d3dc39-22f1-4d1c-ace4-e873ab7f4bf2)\r\n\r\n</p>\r\n</details> \r\n\r\n> [!TIP]\r\n> There are other dApps that at first glance look like they're multi-chain (evm + solana), but they actually use third-party tools to eg bridge MetaMask to Solana wallets (eg https://jup.ag -> https://moongate.one)\r\n\r\n<details><summary>PHOTO</summary>\r\n<p>\r\n\r\n![ss](https://github.com/user-attachments/assets/3b79db59-4789-4ff1-96be-f14230e4561b)\r\n\r\n</p>\r\n</details> \r\n\r\n# Resources\r\n\r\n**Docs:**\r\n\r\n- [Core Concepts of Solana](https://solana.com/docs/core)\r\n- [Add Solana Wallet Adapter to Next.js](https://solana.com/developers/guides/wallets/add-solana-wallet-adapter-to-nextjs)\r\n- [Solana Guide: Connecting a Solana Program to a UI](https://solana.com/developers/guides/dapps/journal#connecting-a-solana-program-to-a-ui)\r\n- [Solana Web3.js](https://solana.com/docs/clients/javascript)\r\n- [A Complete Guide to Solana Development for Ethereum Developers](https://solana.com/developers/evm-to-svm/complete-guide)\r\n- [Solana Networks, devnet, testnet, mainnet](https://solana.stackexchange.com/questions/336/what-are-the-differences-between-devnet-testnet-and-mainnet)\r\n\r\n**Templates:**\r\n\r\n- [GitHub: Create Solana dApp](https://github.com/solana-developers/create-solana-dapp)\r\n- [GitHub: CRUD dApp](https://github.com/solana-developers/CRUD-dApp)\r\n- [GitHub: Next.js Solana Starter Kit](https://github.com/aeminium-labs/nextjs-solana-starter-kit)\r\n- [GitHub: Solana dApp Scaffold](https://github.com/solana-labs/dapp-scaffold) \r\n\r\n**Graphs:**\r\n- [Solana Substreams Doc](https://docs.substreams.dev/tutorials/solana)\r\n- [Solana Subgraphs Repo](https://github.com/messari/solana-subgraphs?tab=readme-ov-file)\r\n\r\n\r\n\r\n**Explorers:**\r\n\r\n- [Solana Explorer](https://explorer.solana.com/)\r\n- [Solana.fm](https://solana.fm/)\r\n\r\n**Faucet:**\r\n\r\n- [Solana Faucet](https://faucet.solana.com/)\r\n\r\n**YouTube:**\r\n\r\n- [Ethereum VS. Solana](https://youtu.be/Y9Ai3gl6Pd0)\r\n- [What is Solana?](https://www.youtube.com/watch?v=1jzROE6EhxM)\r\n\r\n\r\n**Reference:**\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/1016\r\n","createdAt":"2024-12-06T14:17:40Z","labels":[],"number":1230,"repository":"sablier-labs/interfaces","state":"open","title":"Solana R&D","type":"discussion","updatedAt":"2024-12-23T20:01:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/1230"},{"author":"maxdesalle","body":"Would be great if you had the ability to top up multiple streams at once at their individual daily/monthly/... rate, at once.","createdAt":"2024-12-18T19:14:57Z","labels":[],"number":1267,"repository":"sablier-labs/interfaces","state":"closed","title":"Top up multiple payment streams at once (like you can cancel/withdraw from multiple vesting streams)","type":"discussion","updatedAt":"2024-12-18T19:22:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/1267"},{"author":"smol-ninja","body":"A user has requested for a single click option to top up multiple streams. This can be achieved by `batch`. Starting this discussion to track similar requests.\r\n\r\n<img width=\"774\" alt=\"Screenshot 2024-12-19 at 00 16 59\" src=\"https://github.com/user-attachments/assets/e91369f2-614c-4d2b-9878-528c96f6e1e1\" />\r\n","createdAt":"2024-12-18T18:49:16Z","labels":[],"number":1266,"repository":"sablier-labs/interfaces","state":"closed","title":"One click to top up multiple streams","type":"discussion","updatedAt":"2024-12-18T19:01:58Z","url":"https://github.com/sablier-labs/interfaces/discussions/1266"},{"author":"razgraf","body":"<img width=\"720\" alt=\"Screenshot 2024-12-17 at 01 46 41\" src=\"https://github.com/user-attachments/assets/3331b6ce-54e0-44b2-bfc7-49110864ba2f\" />\r\n","createdAt":"2024-12-16T23:47:15Z","labels":[],"number":1258,"repository":"sablier-labs/interfaces","state":"open","title":"Showcase Cantina's badge in our landing page","type":"discussion","updatedAt":"2024-12-16T23:47:16Z","url":"https://github.com/sablier-labs/interfaces/discussions/1258"},{"author":"razgraf","body":"After #1081 we're now ready to put together a list of tasks we need to do right before the launch.\r\n\r\n## General\r\n\r\n- [x] Update Monthly template to include \"initial\" (at start / end of first month) as per https://github.com/sablier-labs/v2-interfaces/issues/1144\r\n- [x] Update unlockCliffDuration template to rename unlockDuration to cliffDuration\r\n- [x] Update unlockCliffRange template to rename unlockEnd to cliffEnd\r\n- [x] Document `Flow` in [sablier-labs/docs](https://github.com/sablier-labs/docs)\r\n- [x] Document CSV \"initial\" as well as the timezone toggle (#1152) in [sablier-labs/docs](https://github.com/sablier-labs/docs)\r\n- [ ] Check CI/CD after the lint-flag was added for #1114\r\n- [x] Add addresses to subgraphs, backend and app (make sure to manage cases, if any, where we don't deploy both Lockup and Flow on a chain)\r\n- [x] Re-enable CHAIN_ID in `contractor_flow` after cross-chain deployment\r\n- [x] Update docs links once the flow docs PR is merged\r\n- [x] Implement feedback in #1203\r\n\r\n\r\n## Manual Tests\r\n\r\n- Stream actions\r\n  1. Create and create-with-csv\r\n     1. Lockup: every shape\r\n     2. Flow\r\n  2. Actions\r\n     1. Lockup\r\n        1. Single: withdraw (with custom address as recipient), cancel, disable cancelability, transfer\r\n        2. Multiple: withdraw multiple, cancel multiple + with multiple releases/versions\r\n     2. Flow\r\n        1. Single: deposit, pause, restart, void, withdraw, refund, transfer, adjust\r\n        2. Multiple: deposit multiple, void multiple, pause multiple, withdraw multiple\r\n- Links and redirects\r\n   1. `stream` to `vesting/stream`\r\n   2. meta images\r\n   3. search (`/?t=search` to `/vesting/?t=search`)\r\n- Test app with Safe\r\n\r\n## Misc.\r\n\r\n- [ ] Status of https://github.com/sablier-labs/v2-interfaces/discussions/1096\r\n    \r\n","createdAt":"2024-11-09T17:18:52Z","labels":[],"number":1180,"repository":"sablier-labs/interfaces","state":"closed","title":"[Flow Q4-24] Pre-launch checks","type":"discussion","updatedAt":"2025-01-20T11:54:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/1180"},{"author":"razgraf","body":"Just so we don't have to update token icons all the time, we could use some sort of fallback system with coingecko or similar, through their token list (if it's actually updated).\r\n\r\nI've explained a potential idea for such an integration here: https://github.com/sablier-labs/v2-interfaces/discussions/839#discussioncomment-9903918\r\n\r\nThen again, this could also be an open-source system we do e.g. provide access to token icons at a cost ($/month) where you can be sure that by accessing `tokens.io/<CHAIN_ID>/<TOKEN_ADDRESS>` you get an image served.","createdAt":"2024-12-11T19:56:19Z","labels":[],"number":1245,"repository":"sablier-labs/interfaces","state":"open","title":"Token icon integration with Coingecko","type":"discussion","updatedAt":"2024-12-11T19:56:20Z","url":"https://github.com/sablier-labs/interfaces/discussions/1245"},{"author":"PaulRBerg","body":"I know this is difficult, but to be able to monetize airdrops, we need to ensure that situations like this (almost) never happen:\r\n\r\n<img width=\"300\" alt=\"SCR-20241209-odgn\" src=\"https://github.com/user-attachments/assets/f93b5e39-23aa-4280-8f7e-42b2a9e43d64\">\r\n\r\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/bb0355be-1cda-4ee6-96c5-68774d818ebe\"/>\r\n\r\nThis is from a chat with Anzen, who has recently set up an Airstream campaign.\r\n\r\ncc @sablier-labs/frontend what do we have to do to prevent downtimes like this from happening again?\r\n\r\nShould we integrate a third indexer?","createdAt":"2024-12-09T14:05:26Z","labels":[],"number":1235,"repository":"sablier-labs/interfaces","state":"open","title":"Scaling the backend to support high-growth scenarios","type":"discussion","updatedAt":"2024-12-09T14:22:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/1235"},{"author":"smol-ninja","body":"#### Since Sablier NFTs are not ordinary NFTs, instead of counting on other NFT platforms, what if Sablier builds its own liquidity protocol?\r\n\r\n## Problem\r\n- Existing liquidity market protocols such as Aave are not compatible with ERC721 tokens.\r\n- Platforms like NFTfi are not compatible with Sablier streams because of their disparity with the ordinary NFTs.\r\n- NFTfi also can not deliver efficient borrowing due to the fact that, like ERC20s, NFTs do not have instant liquidity AMMs. As a result, most loans originating on these platforms are p2p and slow. \r\n\r\nHowever, unlike ordinary NFTs, Sablier NFTs are backed by highly liquid tokens but unlike ERC20s, they have restricted transferability. \r\n\r\nIt's very traditional in the financial industry to get a loan against a guaranteed future income. Most Sablier users (present and future) would have similar requirements, i.e., to be able to borrow against the streams that mature in the future. No platform like Opensea or NFTfi could solve this problem efficiently. Even in the case of a non-cancelable stream, they would remain slow because of their P2P nature.\r\n\r\nThis creates a gap and opens up a new opportunity to create a new kind of liquidity protocol. \r\n\r\n## Solution\r\nA new liquidity platform that allows recipients to borrow against their Stream.\r\n\r\n- The borrowed token is the same as the underlying token of the stream.\r\n- The platform uses a mathematical equation to determine the Loan-to-Value (LTV) ratio based on the stream parameters such as maturity date, underlying token, and cancellability.\r\n- The protocol would be decentralized, of course.\r\n- Interest rates would be determined by the demand and supply (similar to Aave).\r\n- This would not be a P2P platform but a platform with unified liquidity. Lenders will pool in different tokens and loans will originate from that common pool. \r\n- Since, the collateral gets freed in the future, instead of allowing lenders to withdraw liquidity at any time, it would be more like a fixed yield protocol where lenders lock in their tokens for a fixed period for fixed interest rates. \r\n\r\nThis solves two problems for stream owners:\r\n1. Instant liquidity\r\n2. Predictable interest rates\r\n\r\n## Risk for lenders\r\nIn the case of a non-cancelable stream, there is absolutely 0 risk for lenders (other than smart contract risk). Since we will build this platform, we can decide to not allow cancelable streams to borrow.\r\n\r\n## Alternate revenue model\r\nThis could also become an alternate source of revenue for Sablier. There would be a commission from the interest and there could be arbitrage between guaranteed fixed yield to lenders and what it actually receives from borrowers.\r\n\r\n## Side note\r\nIt is inspired by the below discussions:\r\n- https://github.com/sablier-labs/company-discussions/discussions/2#discussioncomment-8306570\r\n- https://github.com/sablier-labs/lockup/discussions/684\r\n- https://github.com/sablier-labs/company-discussions/discussions/12\r\n\r\nThis is just an idea for temperature check around this. But I personally think this could be a big deal for Sablier in terms of growth and becoming the market leader in our category. I would love to know @sablier-labs/everybody's take on this.","createdAt":"2024-02-04T21:32:26Z","labels":[],"number":34,"repository":"sablier-labs/command-center","state":"open","title":"Liquidity market for Sablier streams","type":"discussion","updatedAt":"2025-08-14T09:24:44Z","url":"https://github.com/sablier-labs/command-center/discussions/34"},{"author":"razgraf","body":"## Context\r\n\r\nUsers like Polynomial, Primex and Molten distribute rewards using Sablier Airdrops. For Polynomial, it's a weekly campaign, where the sender defines a list of recipients and creates a week-long claim campaign. After the week ends, they re-compute the eligible addresses and create a new campaign.\r\n\r\n> [!NOTE]\r\n> Since it hasn't been requested nor does it have a lot of use-cases yet, it's not a very urgent thing, but a feature to consider long-term. If it proves to be technically and algorithmically viable.\r\n\r\n## Idea\r\n\r\nWhat if we were to allow users to update the merkle tree of recipients, in an append-only fashion?\r\n\r\n## Implementation (idea)\r\n\r\nThe sender would have access to an `append(newRoot, proof, ...other)` feature that would do the following:\r\n- It needs to prove that the `oldRoot` is now a `leaf` in the new tree at a given new `index`. Therefore, it performs [`MerkleProof.verify(newRoot, proof, oldRoot)`](https://docs.openzeppelin.com/contracts/3.x/api/cryptography#MerkleProof-verify-bytes32---bytes32-bytes32-) to make sure the old claims are still part of the tree\r\n- It replaces the root, total amount and recipient count (defined as ...other in the method above for simplicity) in the contract, as well as updates the ipfsHash\r\n\r\nThis relies on a few technicalities I'm not yet sure of but laying out here for research:\r\n- The tree has to still be valid after building the new one (where the old tree is now a branch)\r\n- This functionality is append only, meaning old allocations will remain intact\r\n- Indexes for new leafs will start from the last index used in the old merkle tree (so we can still do our `claim(index, recipient, amount, merkleProof)`)\r\n- Our systems can support multi-address claims. It will require our app and backend services to:\r\n   - allow for multiple claims from the same address\r\n   - enable a different IPFS file structure and enable re-indexing of a campaign once an `append` is performed\r\n- We also implement a `multiClaim` using Open Zeppelin's [`multiProofVerify`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/495a287e9ab38afe8ed165b767a8a901fc47c5fb/contracts/utils/cryptography/MerkleProof.sol#L178) for good UX\r\n\r\n## Thoughts\r\n\r\nThis system would allow projects that do recurring rewards to avoid segregating their assets in multiple campaigns, if those campaigns share similar characteristics and distribution models. \r\n\r\nIt would also allow projects that fail to include certain addresses in one of their distributions to fix that - although since it's an append only feature, it wouldn't help in case they need to take away or subtract from someone's unclaimed allocation.\r\n\r\nAnyway, feasible or not, at the very least a fun engineering exercise.\r\n\r\nCC: @sablier-labs/engineers ","createdAt":"2025-01-26T14:04:37Z","labels":[],"number":99,"repository":"sablier-labs/command-center","state":"open","title":"Continous reward campaigns (fmr. appending to the recipient list in airdrops)","type":"discussion","updatedAt":"2025-08-07T15:41:12Z","url":"https://github.com/sablier-labs/command-center/discussions/99"},{"author":"PaulRBerg","body":"User request from this [tweet](https://x.com/Barabazs_/status/1946232545923715151).\r\n\r\nThe pricing-based rule would be **additive** to the time-based rule - whichever of the following conditions gets hit faster, the asset is unlocked:\r\n\r\n1. Asset reaches pre-determined price, e.g. $10k for ETH\r\n2. Timelock period ends\r\n\r\n<img width=\"500\" alt=\"tweet-1946232545923715151\" src=\"https://github.com/user-attachments/assets/c8a78f94-aaa1-49cc-a3b7-0d09b75ea8e2\" />\r\n\r\n","createdAt":"2025-07-22T11:19:59Z","labels":[],"number":175,"repository":"sablier-labs/command-center","state":"closed","title":"Price-conditioned timelocks","type":"discussion","updatedAt":"2025-08-07T07:00:10Z","url":"https://github.com/sablier-labs/command-center/discussions/175"},{"author":"sneg55","body":"## Background and Opportunity\r\n\r\nAs we approach the implementation of the fee switch, there is an opportunity to capitalize on community engagement and expand our user base through a referral program. Referral programs have proven effective in driving organic growth by incentivizing existing users to onboard new customers.\r\n\r\nTo align with our strategic goals, we propose building a centralized referral system initially, with the potential to transition to an on-chain solution in the future. This phased approach ensures cost-effectiveness and ease of implementation while allowing us to test and optimize the program before scaling.\r\n\r\n## Proposal Details\r\n\r\n1.\tReferral Program Framework:\r\n•\tStructure: A centralized system where users can refer new customers and earn a share of the fees generated by their referrals.\r\n•\tIncentives: A percentage of transaction fees (exact percentage to be determined) will be distributed to the referrers based on the activity of their referrals.\r\n•\tEligibility: Open to all users with verified accounts to maintain program integrity.\r\n•\tDistribution: The user must click a claim button to withdraw earned rewards. \r\n\r\n2.\tInitial Implementation:\r\n\r\n•\tCentralized Approach: The system will be built and maintained in-house to minimize costs and enable quicker iterations.\r\n•\tEase of Use: Simple referral links or codes will be generated for users to share, making onboarding seamless for new customers.\r\n\r\n\r\n3.\tBest Practices and Inspiration:\r\n•\tGMX Implementation: GMX’s referral program is a leading example of a sustainable and user-friendly system. We will study and incorporate their best practices, such as tiered rewards and transparency in fee sharing.\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/f988a28c-cbfa-4638-b082-10be8d284550\"/>\r\n\r\n•\tSaas Services: While on-chain referral Saas solutions are available, feedback indicates they are cost-prohibitive. Our in-house approach offers a lean alternative with room to evolve into an on-chain model if the program proves successful.\r\n\r\n4.\tFuture Roadmap:\r\n•\tTesting and Iteration: Use the centralized system as a pilot to gather data on user behavior, referral effectiveness, and overall program impact.\r\n•\tOn-Chain Transition: Explore on-chain referral program providers or develop an in-house solution as our user base grows and on-chain technologies become more cost-efficient.\r\n\r\n## Expected Benefits\r\n\r\n•\tIncreased User Acquisition: Leverage the community’s network to bring in new customers.\r\n•\tEnhanced Fee Revenue: Drive higher transaction volumes through incentivized referrals.\r\n•\tCost Efficiency: Launch a lean system while avoiding the high costs of existing on-chain solutions.\r\n\r\n## Conclusion\r\n\r\nA centralized referral program aligns with our growth objectives and provides a scalable foundation to incentivize user acquisition. By adopting best practices from industry leaders like GMX and iterating on our own system, we can maximize the program’s impact while maintaining cost control. This initiative represents a valuable step toward building a stronger, more engaged community.\r\n\r\nNext Steps:\r\n1.\tDefine the program’s fee-sharing structure.\r\n2.\tDesign and develop the centralized referral platform.\r\n3.\tLaunch a pilot program and monitor performance metrics.\r\n\r\n\r\n\r\ncc @sablier-labs/everybody","createdAt":"2024-12-11T13:51:28Z","labels":[],"number":92,"repository":"sablier-labs/command-center","state":"open","title":"Implementing an automated referral program for fee sharing","type":"discussion","updatedAt":"2025-08-05T17:21:09Z","url":"https://github.com/sablier-labs/command-center/discussions/92"},{"author":"PaulRBerg","body":"Basically, do what [offx.tech](https://offx.tech/) does but for Sablier streams.\r\n\r\nThere is market demand for this - recently a Sablier user has been scammed while transferring ownership of an NFT.\r\n\r\n<img width=\"222\" alt=\"SCR-20240814-plhx\" src=\"https://github.com/user-attachments/assets/c449e40a-06d1-4743-9c0a-fe03b6085f2f\">\r\n\r\nA proper platform would facilitate a safe transaction via an escrow account.\r\n\r\nThis can be a highly lucrative source of revenues for Sablier.\r\n\r\ncc @sablier-labs/everybody.","createdAt":"2024-08-14T14:53:23Z","labels":[],"number":66,"repository":"sablier-labs/command-center","state":"closed","title":"OTC app for trading Sablier streams","type":"discussion","updatedAt":"2025-08-05T11:58:03Z","url":"https://github.com/sablier-labs/command-center/discussions/66"},{"author":"PaulRBerg","body":"The idea is to charge a $1 fee upon transferring NFTs.\r\n\r\nSimilarly to withdrawals and claims, this is a business transaction. The NFT is either listed for sale on OpenSea, or is sold to someone else directly.\r\n\r\nWDYT @sablier-labs/everybody?","createdAt":"2025-08-04T14:04:45Z","labels":[],"number":182,"repository":"sablier-labs/command-center","state":"closed","title":"Introduce an ETH fee upon transferring NFTs","type":"discussion","updatedAt":"2025-08-04T18:43:29Z","url":"https://github.com/sablier-labs/command-center/discussions/182"},{"author":"maxdesalle","body":"TL;DR: Launch an escrow product.\r\n\r\n---\r\n\r\n### Summary\r\nWe should launch an escrow product. No good solution exists right now on the market. The value of those transactions is generally very high, and they're easy to monetize. We have most of the needed infrastructure already built.\r\n\r\n### Why This Matters\r\n- High transaction values: escrow is used for large B2B and P2P deals (e.g. bets, NFT deals, freelancing, etc.).\r\n- We could use it ourselves for the security deposits customers need to place for airdrop campaigns.\r\n- Clear monetization: we can charge a flat fee, % of funds held, etc...\r\n- Market need: no seamless, composable onchain escrow exists today, especially one designed with our level of polish and reliability.\r\n\r\n### Initial Design\r\n- Simple smart contract vault\r\n- Sender, recipient and an optional arbitrator are signers\r\n- Funds released only with majority agreement (e.g. sender+recipient, or arbitrator+sender/recipient)\r\n- Initial focus on ERC-20s\r\n\r\nWe can (at first) simply reuse Safe's code, as this can be done by deploying a Safe for each escrow, and Safe is already battle-tested. We can leverage this in our marketing material as well.\r\n\r\n### Upcoming features\r\n- Support for ERC-721s\r\n- Release of tokens via a stream after majority agreement\r\n- Optional release of tokens via a stream\r\n- Oracle integration for it to act as an arbitrator\r\n\r\n---\r\n\r\n@sablier-labs/everybody ","createdAt":"2025-06-06T18:53:24Z","labels":[],"number":155,"repository":"sablier-labs/command-center","state":"open","title":"Sablier Escrow: Unlocking High-Value Onchain Transactions","type":"discussion","updatedAt":"2025-07-31T14:19:39Z","url":"https://github.com/sablier-labs/command-center/discussions/155"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAs per @sneg55's findings shared in the [ICP Segmentation](https://docs.google.com/spreadsheets/u/1/d/1dsNNaS_EKRcYQsDlSsTW_8VIUXfTqlxjUIBkR3EPmDc/edit?gid=0#gid=0) (note that ICP = Ideal Customer Profile), nearly all of our high-profile BD prospects want lots of custom features from our airdrop distribution product:\r\n\r\n<img width=\"500\" alt=\"SCR-20250730-pzbi\" src=\"https://github.com/user-attachments/assets/f8d527c3-625d-41b6-b47f-5399c17e00d0\" />\r\n\r\nThe problem is that many of these are custom features (e.g. custom designs), hence not scalable to product-status _if we implement them ourselves_ ... but maybe we don't have to implement them ourselves!\r\n\r\n## Solution\r\n\r\nIn a pre-LLM world, we should have just shrug off this situation as \"these are software services, not productizable\". But in a post-LLM world, we can do better.\r\n\r\nThe idea is : **what if we built a [Lovable](https://lovable.dev/)-like AI chat app dedicated to building airdrop claim pages, powered exclusively by Sablier's contracts (and programs on Solana)?**\r\n\r\n- The app would only write frontend code that interacts with the Sablier backend. No Solidity/Rust.\r\n- This would basically be a supercharged version of our [frontend sandbox](https://github.com/orgs/community/discussions/16925), but with an LLM frontend.\r\n- A nice benefit: we could add \"AI\" in our next investor deck 😅\r\n\r\n<img width=\"350\" src=\"https://github.com/user-attachments/assets/f40e4fc0-a762-4d8c-9507-2deff0a62b11\"/>\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/everybody for feedback","createdAt":"2025-07-30T15:26:36Z","labels":[],"number":179,"repository":"sablier-labs/command-center","state":"open","title":"Lovable-like AI chat app for building custom airdrop pages, powered by Sablier contracts and natively integrated with Sablier UI","type":"discussion","updatedAt":"2025-07-30T15:26:55Z","url":"https://github.com/sablier-labs/command-center/discussions/179"},{"author":"razgraf","body":"I couldn't find a proper (private) discussion regarding this so I'm creating one.\r\n\r\nStemming from https://github.com/sablier-labs/lockup/discussions/830, we're seeing a request for yield bearing streams. \r\n\r\n## Context \r\n\r\nAssets being streamed don't benefit from lending rewards, so they're counted as idle capital not generating revenue.\r\n\r\n## Designs\r\n\r\nOver time, we've explored various designs for how to do this\r\n\r\n1. ERC-4626 (wrap + deposit, withdraw + unwrap) where all yield goes to the recipient\r\n2. Implementing yield-splitting directly inside the contracts (harder because of the need to track individualized funds in a pool contract)\r\n3. Depositing everything ourselves in Aave and keeping the revenue\r\n\r\nThere might be a few more I'm forgetting about, so please feel free to post below.","createdAt":"2025-02-24T15:31:42Z","labels":[],"number":109,"repository":"sablier-labs/command-center","state":"open","title":"Yield-bearing streams","type":"discussion","updatedAt":"2025-07-29T13:13:10Z","url":"https://github.com/sablier-labs/command-center/discussions/109"},{"author":"maxdesalle","body":"There has been a significant increase in terms of market participants in the crypto payment card space in the past few months.\r\n\r\nSablier is an excellent fit for a payment card. People use it for payroll, you could even envision a credit system relying on future income, etc.\r\n\r\nHowever, it's a tough market, and it really depends on how far you're willing to go when it comes to profit.\r\n\r\nThere are two approaches to issuing a payment card.\r\n\r\n## White Label\r\n\r\nThe easiest, quickest, and cheapest approach from our end, is simply to make a deal with a company like [Gnosis Pay](https://gnosispay.com), and get a whitelabel solution done for us where we offer a Sablier card that relies on Gnosis Pay's infrastructure.\r\n\r\nThis has the advantage of being incredibly cheap, given most of the work has already been done for us, and it's very quick thanks to that same reason. The question becomes, how much profit would we generate in that case? Practically nothing.\r\n\r\nThe margins in these types of partnerships are usually around ~0.05% per transaction, at least in the EU. In the US the margins are slightly higher as there is less regulation, but it's still not enormous. So if someone spends $1K using our card, we get $0.50, which isn't much. The average Europoor consumer spends around ~$600-800 per month using their payment cards, resulting in about $0.30-0.40 per consumer, per month, on average, if we were to serve EU customers exclusively as an example. And you still have to pay taxes on that.\r\n\r\nIf you are able to get 1,000 EU users to use this card exclusively, that's merely ~$350/month in revenue. It's not worth it, or at least not worth it with just transaction fees. You could think of a subscription, but who is going to pay a subscription when they can just port their money over to Gnosis Pay or a competitor in one transaction, and pay zero fees?\r\n\r\n## An Independent Sablier Card\r\n\r\nBuilding your own stack has the advantage you make the user experience just as you like, price just as you like, etc. but it's long, and it's expensive to build. Building a card business from the ground up is a ton of regulations to comply with (will probably cost us hundreds of thousands of $ in lawyer fees), involves KYC processes, and people are always trying to game your system to defraud you through chargeback tricks, fake KYC, etc.\r\n\r\nWe can do it, but it's not going to be what I would define as \"fun\". The margins are higher, though. But it's a lot of work.\r\n\r\n## The Right Way to Think About a Sablier Card\r\n\r\nIf we issue a card, it won't be for profit, or at least at first. It's a retention mechanism. And importantly, it gets people to keep their money within Sablier. Money that, theoretically, we can monetize down the road by lending it, etc.\r\n\r\nIn other words, the right approach is probably to get a deal done with [Gnosis Pay](https://gnosispay.com) or a similar actor like [Stripe Issuing](https://stripe.com/issuing), go white label, and see if it has any interest from users. If we eventually get sufficient traction, we can go our own way and build our own solution from the ground up. But until then, it's purely a retention mechanism.\r\n\r\n---\r\n\r\n@sablier-labs/everybody ","createdAt":"2025-04-25T19:29:06Z","labels":[],"number":147,"repository":"sablier-labs/command-center","state":"open","title":"An Overview of Crypto Payment Card Models","type":"discussion","updatedAt":"2025-07-26T11:36:17Z","url":"https://github.com/sablier-labs/command-center/discussions/147"},{"author":"PaulRBerg","body":"Keywords: indexer, graph, the graph, envio, shipping speed, prioritization\r\n\r\n## Problem\r\n\r\nRelying on a single indexer makes a web3 UI fragile. If the indexer goes down, users can no longer see the latest status of the application, despite the blockchain itself working correctly.\r\n\r\nCase in point: on July 11, 2025, Safe experienced  [major downtime](https://x.com/safe/status/1943682189285314588).\r\n\r\n## Current Solution\r\n\r\nIn response to this problem, @razgraf and @gavriliumircea came up with a solution that involves running two different indexing vendors: Envio and The Graph.\r\n\r\n## Problems with Current Solution\r\n\r\n- **Very expensive in terms of engineering hours.** Maintaining both the Envio and The Graph mappings is a full-time job. We're paying ~five figures' worth of a software engineer's salary just to maintain the status quo every year.\r\n   - The Graph uses AssemblyScript, which makes code reuse impossible.\r\n- **The Graph has become utterly unreliable.** Our Lockup indexer is failing, and they have no idea why (we've been in limbo for over 4 days now!).\r\n    - There are a dozen other issues with The Graph, though. See my thread on X for a collection of complaints: [Hate to say it, but The Graph feels like an abandoned project](https://x.com/PaulRBerg/status/1943321496358666693).\r\n\r\n## New Solution\r\n\r\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/ee095aa8-fc78-4bed-8d96-89867cade1cc\"/>\r\n\r\nThe key insight is to zoom in on the original problem - **we merely need a fallback data API**. We don't need multiple vendors - the fallback API can be based on the same software.\r\n\r\n- [ ] Run a fallback Envio indexer for each protocol. This can be done in the following ways:\r\n    1. Create a duplicate indexer for each protocol in the Hosted Service. This will increase our Envio subscription cost, but it'd be totally worth it.\r\n    2. Self-host Envio.\r\n    3. Ask Envio to host our indexer on a bare-metal server (on top of Hosted). Envio quoted ~$1k/month.\r\n- [x] In each Envio indexer, use multiple RPC as fallback (I've already implemented this in [my refactor PR](https://github.com/sablier-labs/indexers/pull/92))\r\n- [ ] Phase out The Graph.\r\n    - Use Envio as the primary data provider in the UI.\r\n    - Move The Graph mappings to a fallback branch, and purge them from the main branch.\r\n    - Except for bugs, stop maintaining The Graph mappings.\r\n    - As soon as we implement a new feature/product, remove The Graph as a data API in the UI.\r\n- [ ] Eventually, some integrations like Snapshot will break, but that's fine. We will update them to use Envio, or reconsider if we truly need them (if they have users).\r\n\r\n### All Chains Supported\r\n\r\nEnvio HyperSync is not available on all chains where Sablier is deployed to, but this is not a problem.\r\n\r\nAs explained [here](https://github.com/sablier-labs/indexers/issues/140#issuecomment-3069946544), we can use a standard RPC server as a data provider. This will make the absolute indexing slow (from the beginning), but not the at-the-head indexing, i.e., once a user creates a stream, they will see it shortly in the UI.\r\n\r\nIn fact, as Dmitry told me in a private TG chat, vanilla RPC might be even more efficient for at-the-head indexing.\r\n\r\n## Mindset\r\n\r\n✅ Spend more time shipping new features instead of obscure AssemblyScript code\r\n✅ Accept a modicum of downtime from time-to-time\r\n✅ Be mindful of our runway\r\n\r\n## Feedback\r\n\r\n> [!NOTE]\r\n> At this point, I genuinely believe that even if we don't run any fallback Envio indexers, running Envio alone (as it currently stands) and getting rid of The Graph will lead to higher uptime in our UI. The Graph went down so many times it's become a joke at this point. Indexing speed is so slow. Customer support is so bad. Making new deployments is a pain. Let's get over it, treat it as a sunk cost, and focus on shipping more stuff.\r\n\r\ncc @sablier-labs/frontend, especially @razgraf and @gavriliumircea.\r\n\r\n### Related\r\n\r\n- [Envio-only approach to speed up development of our future EVM products](https://github.com/sablier-labs/indexers/discussions/149))","createdAt":"2025-07-14T15:22:01Z","labels":[],"number":171,"repository":"sablier-labs/command-center","state":"open","title":"Enviofication","type":"discussion","updatedAt":"2025-07-17T19:17:16Z","url":"https://github.com/sablier-labs/command-center/discussions/171"},{"author":"maxdesalle","body":"We've received several requests the past few months from users asking if they could create their new token directly on Sablier, or if we could refer them to someone that could do this for them. It makes sense. We already do the vesting and the airdrop for them, so we might as well offer them the ability to create the token directly via our interface as well.\r\n\r\nThere is notable friction in having to first deploy the token contracts manually, and subsequently having to list it on Sablier, and only then being able to start the vesting/airdrop program.\r\n\r\nThis also plays into my recurring meme of \"owning the entire stack\", and is something both Magna and hedgey have tried to do in some part through their \"token launch schools\".\r\n@sablier-labs/everybody ","createdAt":"2024-07-12T14:45:12Z","labels":[],"number":62,"repository":"sablier-labs/command-center","state":"open","title":"Add a Token Launcher Product as Part of Our Offering","type":"discussion","updatedAt":"2025-07-14T19:06:40Z","url":"https://github.com/sablier-labs/command-center/discussions/62"},{"author":"PaulRBerg","body":"To improve the UX of setting up onchain vesting plans, we should provide users with a neat UI for collecting wallet addresses from their investors and community.\r\n\r\nFeatures:\r\n\r\n- Dedicated URL for each campaign\r\n- Editable by either the campaign creator or the recipients (who receive the URL via private communication channels)\r\n- Verify wallet address with signatures\r\n- Export CSV\r\n- Audit logs\r\n- Web2 security features like SOC2 (maaaybe)\r\n\r\nNotes:\r\n\r\n- Implementing this may need to come along with implementing the [Aggregation dashboard for global view of streams](https://github.com/sablier-labs/v2-interfaces/discussions/558).\r\n- Hedgey has already built a [PoC for this](https://x.com/goforlindsey/status/1842346032308400367?s=46).\r\n\r\nCC @sablier-labs/business and @sablier-labs/frontend for feedback and suggestions. I imagine that implementing this feature would require a bit of web2 engineering as we would have to store the addresses somewhere in an SQL database.\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/discussions/1061","createdAt":"2024-10-07T13:22:45Z","labels":[],"number":141,"repository":"sablier-labs/command-center","state":"open","title":"Wallet address collection tool","type":"discussion","updatedAt":"2025-07-11T10:06:10Z","url":"https://github.com/sablier-labs/command-center/discussions/141"},{"author":"PaulRBerg","body":"I can't remember the exact reason we disabled the `bytecode_hash` back in the day, three years ago, but I think it had something to do with deterministic bytecode generation across machines.\r\n\r\nI'm not sure if that's still a problem today. It might not be. If it's not, we should consider enabling the `bytecode_hash` so that we can also verify the Sablier contracts on platforms like [Sourcify](https://sourcify.dev/)/.\r\n\r\nWDYT @sablier-labs/evm? Could you take a quick look at this, please?\r\n\r\nReferences:\r\n\r\n- https://docs.sourcify.dev/blog/talk-about-onchain-metadata-hash/\r\n- https://github.com/sablier-labs/lockup/blob/d85521f5615f6c19612ff250ee89c57b9afa6aa2/foundry.toml#L3\r\n- https://github.com/sablier-labs/lockup/pull/707","createdAt":"2025-06-12T12:24:02Z","labels":[],"number":160,"repository":"sablier-labs/command-center","state":"closed","title":"Turning on the \"bytecode_hash\" to enable verifications on Sourcify","type":"discussion","updatedAt":"2025-06-19T12:07:55Z","url":"https://github.com/sablier-labs/command-center/discussions/160"},{"author":"maxdesalle","body":"> Credits go to @sneg55 for highlighting the need for NFT vesting.\r\n\r\nSablier currently only focuses on ERC-20 tokens. Though we focus on *token* distribution, a mission that would logically include Non-Fungible Tokens (NFTs).\r\n\r\nThere has been repeated demand to be able to either vest, or at the very least timelock NFTs (vesting would require fractionalizing NFTs which is probably sub-ideal).\r\n\r\nRecently, [Infinex](https://infinex.xyz/), [Kain Warwick](https://x.com/kaiynne)'s ([Synthetix](https://synthetix.io/) founder) new exchange platform, organized a token sale where they sold \"Patron NFTs\", NFTs that can be used to vote in the governance mechanism of Infinex. They are vesting these NFTs to buyers, in the following way: if you bought 1, it's unlocked after 2 years. If you bought 2, the first one is unlocked after 1 year, the second one after 2 years. If you bought 3, the first after 8 months, second 16 months, third after 2 years (24 months). If you bought 4, the first after 6 months, etc. Not saying we should implement NFT vesting like this, but it does highlight that there is clear demand for timelocks/vesting for NFTs.\r\n\r\nOn top of that, Uniswap v3 returns an NFT representing the liquidity position when providing liquidity. Having the ability to timelock/vest liquidity positions is very useful and opens up a lot of mechanics.\r\n\r\nFrom talking to users, both @sneg55 and I know that there is clear demand for this. We could probably start with a simple timelock feature for NFTs.\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-09-30T15:00:39Z","labels":[],"number":75,"repository":"sablier-labs/command-center","state":"open","title":"Add support for vesting and timelocking NFTs","type":"discussion","updatedAt":"2025-06-16T19:05:00Z","url":"https://github.com/sablier-labs/command-center/discussions/75"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nI've recently demo-ed Sablier on a business call with Contango. I told them about our public withdrawal feature and why we have implemented it, and they said that they would like to be able to disable it for their streams.\r\n\r\nThe rationale was to eliminate the risk of 'accounting griefing' for their investors; i.e., someone intentionally claiming small amounts to clutter the transaction history for their investor accounts.\r\n\r\n## Solution\r\n\r\nAdd a new boolean in the stream struct that specifies if withdrawals are publicly available or not.\r\n\r\n## Feedback\r\n\r\nMy take on this is not to rush, and wait for more user requests before making any move.\r\n\r\n1. There's no incentive for perfroming these public withdrawals. The only actors somewhat incentivized to do it are malicious competitors/enemies, but there are better ways to cause harm than through accounting griefing.\r\n2. The size of the `Lockup` contract is a concern.\r\n\r\ncc @sablier-labs/solidity and @razgraf and @maxdesalle for feedback\r\n\r\n---\r\n\r\n**Keywords**: withdraw, withdrawals, permissioned, permissionless, public, private, public withdrawals, private withdrawals, lockup, flow","createdAt":"2025-01-20T13:05:59Z","labels":[],"number":158,"repository":"sablier-labs/command-center","state":"open","title":"Optional public withdrawals from streams","type":"discussion","updatedAt":"2025-07-09T18:48:02Z","url":"https://github.com/sablier-labs/command-center/discussions/158"},{"author":"maxdesalle","body":"We should launch a product to allow for easy distribution of cashback / revenue share rewards, this is apparently already huge on Solana (pump.fun just started doing this as well) and inevitably going to become a growth driver within the Ethereum ecosystem as well as gas fees become negligible.\r\n\r\nOur airdrop product isn't great for that, as you need to deploy a new contract for every distribution, they need to figure out a way on their end to automate this process so they don't have to do it manually every time, etc. etc. it's not a good experience. Cashbacks / revenue shares often also small amounts, so our monetization model for airdrops wouldn't work here.\r\n\r\nThis would need to be a separate product.\r\n\r\n---\r\n\r\n@sablier-labs/everybody ","createdAt":"2025-06-09T19:36:37Z","labels":[],"number":156,"repository":"sablier-labs/command-center","state":"open","title":"Sablier Cashbacks: Revenue Share Distribution Tool","type":"discussion","updatedAt":"2025-06-10T06:31:19Z","url":"https://github.com/sablier-labs/command-center/discussions/156"},{"author":"PaulRBerg","body":"Similar to the expiration feature in Airdrops. Requested by a user:\r\n\r\n<img width=\"400\" alt=\"SCR-20250601-pguo\" src=\"https://github.com/user-attachments/assets/ac4efe50-752a-44ad-99fe-636afb240883\" />\r\n\r\ncc @sablier-labs/engineers for feedback\r\n","createdAt":"2025-06-01T14:24:59Z","labels":[],"number":154,"repository":"sablier-labs/command-center","state":"closed","title":"Expiration time for Lockups","type":"discussion","updatedAt":"2025-06-04T11:40:40Z","url":"https://github.com/sablier-labs/command-center/discussions/154"},{"author":"razgraf","body":"While reading [this](https://x.com/ianlapham/status/1818735296172953926) it dawned on me that it would be pretty sick to have a card that sources tokens from your stream to pay for stuff. We don't really want to deal with issuing cards ourselves, so maybe pairing with Gnosis and just integrating the withdraw function and amount calculations would be the way to go.\r\n\r\nWe'd start with with USDC streams, uncancellable. Pasting from Slack.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2024-08-02 at 12 24 45\" src=\"https://github.com/user-attachments/assets/2b488588-9c32-4d3b-8f8a-8b22c9a0fc7b\">\r\n","createdAt":"2024-08-02T09:27:52Z","labels":[],"number":65,"repository":"sablier-labs/command-center","state":"open","title":"Spend from a Flow stream using a credit/debit card","type":"discussion","updatedAt":"2025-05-23T15:21:43Z","url":"https://github.com/sablier-labs/command-center/discussions/65"},{"author":"PaulRBerg","body":"This discussion has evolved into a general feature request tracker for KPI-based distributions. Toggle the button below to see the original proposal, which was about Avalanche.\r\n\r\n<details><summary>See original proposal</summary>\r\n<p>\r\n\r\n## Problem\r\n\r\n@sneg55 and @maxdesalle are in the process of closing a [deal](https://sablier.pipedrive.com/deal/65) with Ava Labs, who are interested in using Sablier for their [$40M grant program](https://www.coindesk.com/tech/2024/09/26/avalanche-unveils-40m-grant-program-ahead-of-avalanche9000-upgrade/). They have several requirements, one of which being to have the grants be automatically created every quarter based on some KPIs from their P-chain. They said that they can provide an API for the P-chain data.\r\n\r\n## Solution\r\n\r\nThe easiest solution would be to obtain custody of the $AVAX tokens and manually create the streams using CSV files. However, I doubt that they would be happy to do this, and it would also be risky from a compliance perspective (we would become literal custodians).\r\n\r\nThus, we have to build something like this:\r\n\r\n1. Write a smart contract called `StreamCreator`.\r\n2. Ava Labs ERC-20 approves the `StreamCreator` contract to spend up to $40M worth of $AVAX.\r\n3. The logic in `StreamCreator` should be similar to [`BatchLockup`](https://github.com/sablier-labs/v2-core/blob/53ef5006a436ba9586b677c92c96644467279cec/src/periphery/SablierBatchLockup.sol), but should instead source the funds from Ava Labs not from `msg.sender`.\r\n4. Write an offchain script that parses the P-chain data and converts it into ABI-encoded function calls that can be passed to `StreamCreator`.\r\n5. Batch-create the streams (perhaps using another offchain script).\r\n\r\nThis is a sophisticated feature because they have to trust us that the grants will be created correctly, so we should hand them an enterprise-level quote, and they should also subsidize the audit and the gas costs.\r\n\r\n## Feedback\r\n\r\nCC @sablier-labs/engineers. Particularly interested to hear @gavriliumircea's feedback as this solution involves some web2 engineering.\r\n\r\n</p>\r\n</details> ","createdAt":"2024-10-04T10:10:32Z","labels":[],"number":80,"repository":"sablier-labs/command-center","state":"open","title":"Automatic creation of airdrops/streams based on KPIs","type":"discussion","updatedAt":"2025-05-16T16:19:24Z","url":"https://github.com/sablier-labs/command-center/discussions/80"},{"author":"maxdesalle","body":"Have been thinking a lot about what the future of Sablier looks like the past few days; what the road looks like to building a $100 billion company.\r\n\r\nBut before exploring the main vertical that we have in front of us, in my opinion, we first need to get a picture of what crypto will look like within a year.\r\n\r\n## Crypto in a Year\r\n\r\nEthereum will have three major upgrades this year and early 2026. The first one, Pectra, is right around the corner, Fusaka should come by the end of the year, and Glamsterdam should arrive in early 2026. All three upgrades will offer **massive** improvements in user experience. Pectra enables account abstraction, implying the ability to swap a token in 1 transaction, batch transactions for EOAs, etc.\r\n\r\nAll three also massively scale blobs to make layer-2s as cheap as possible, while Fusaka and Glamsterdam will also [significantly improve the scalability of Ethereum itself](https://x.com/Cointelegraph/status/1915707657685500134), to the point that transaction fees probably won't be something we talk that much about anymore in crypto.\r\n\r\nIn the meantime, we're seeing massive improvements in user experience within crypto apps. [Infinex](https://infinex.xyz/), a non-custodial Binance competitor, allows you to create an account in one click using passkeys. It doesn't support logging in with a third-party wallet, doesn't have seed phrases or passwords, etc. [Parifi](https://app.parifi.org/), a Sablier customer that recently launched, allows you to log in with your email address.\r\n\r\nWith account abstraction, [we're also seeing the end of ETH as the gas token](https://x.com/Tyler_Did_It/status/1915500870164238701). Users can now pay for transaction fees in USDC, etc. \r\n\r\nFinally, we're also seeing the rise of onchain equities. Examples include the success of tokens like [PAXG](https://www.coingecko.com/en/coins/pax-gold) or [XAUT](https://www.coingecko.com/en/coins/tether-gold), that have allowed investors to invest in gold via crypto. Another example is the recent launch of an [onchain SAFE framework](https://x.com/MetaLeX_Labs/status/1915498118352609337) for company fundraising. You can also invest in the SP500, Coinbase, NVIDIA, Tesla, etc. [completely onchain](https://backed.fi/).\r\n\r\n## The End to End Onchain Equity Platform\r\n\r\nMost tokens will inevitably evolve into equity tokens, either representing real company shares or direct claims on protocol revenues. Until now, tokens were mostly governance-based, but without revenues, governance is irrelevant. The endgame is equity.\r\n\r\nSteve Jobs captured the essence of good product design:\r\n\r\n> *You’ve got to start with the customer experience and work backwards to the technology. You can't start with the technology and try to figure out where you’re going to sell it.* — Steve Jobs\r\n\r\nHistorically, crypto was limited by wallets, transaction fees, and bad UX. Within a year, these barriers will disappear. For the first time, we can build for the actual end-user experience, not just the best crypto could offer.\r\n\r\nIn a world of onchain equities, users will need compliant token launches (including an onchain SAFE if needed, for example), flexible token distribution (vesting, airdrops, ICOs like [Dutch auctions](https://en.wikipedia.org/wiki/Dutch_auction)), and ways to allocate tokens for grants and incentives.\r\n\r\nSablier is perfectly positioned to dominate this market. We already have a significant part of the needed infrastructure, we have the experience, and we have the traction needed to expand.\r\n\r\nThe end user experience for Sablier is very simple: user logs in with their email or passkey in Sablier, no wallets. What is even a wallet? In a few clicks, they launch their token on Sablier with a lot of possible customization. They are then directly offered the ability to vest, airdrop, etc. their token. If they want to, a fundraising marketplace is directly available on Sablier itself, allowing users to invest in tokens via ICOs etc. in a completely non-custodial way, via Sablier. They can also distribute their dividends through Sablier, of course.\r\n\r\nAnd obviously, the vesting, etc. happens **within** Sablier, meaning each Sablier \"account\" has an integrated wallet tied to the email address or passkey. Users still have the ability to vest to other wallets by enabling the \"advanced mode\" in the settings etc. but by default, everything happens within Sablier. This allows us to maximize retention. Everything happens *within* Sablier. We keep all the liquidity, and we keep all the monetization ability.\r\n\r\nIf users prefer, they can create their token elsewhere and use Sablier purely for distribution or fundraising.\r\n\r\n## The Alpha: Roadmap Implications\r\n\r\n1. **Our fee system is broken:** users to have to pay fees in ETH to claim or withdraw funds, while 1. if they pay fees themselves, they will probably pay them in USDC or something (**[and this is starting next month!!!](https://www.coindesk.com/tech/2025/04/02/ethereum-developers-lock-in-may-7-for-pectra-upgrade)**), and 2. most of them will probably not even end up paying fees themselves, it will be sponsored by the wallet they use, given this will act as a retention mechanism for wallets, and fees will be so cheap it won't matter anyway.\r\n\r\n2. **We need to launch a token launcher product:** either aquire [CreateMyToken](https://www.createmytoken.com/), or build something ourselves from the ground up. After our Series A, our focus should be on building a token sale solution within Sablier, further expanding our token distribution offering, and greatly expanding our monetization ability.\r\n\r\n3. **We should change the user experience in our app:** by default, users should log in with email / passkey (his is already possible today), and only optionally consider logging in via a third-party wallet like Metamask, Rainbow, etc. When senders enter recipient data, it should only be optional to enter an ETH address, by default it should be an email address, inviting the recipient to create a Sablier account using their email, tied to a passkey.\r\n\r\n---\r\n\r\n@sablier-labs/everybody ","createdAt":"2025-04-26T15:01:12Z","labels":[],"number":148,"repository":"sablier-labs/command-center","state":"open","title":"The Future of Sablier: Building Our Way to a $100 Billion Company","type":"discussion","updatedAt":"2025-05-08T16:33:48Z","url":"https://github.com/sablier-labs/command-center/discussions/148"},{"author":"maxdesalle","body":"On a call with the founder of [Myso](https://www.myso.finance/), an idea came to mind to allow for **more flexibility when it comes to NFT usage**.\r\n\r\nAs a reminder, it's in our best interest to have as much usage with regards to stream NFTs as possible. **The reason is simple:** the more activity we have, the more integrations we have, the larger our moat becomes, the harder it will be for a competitor to emerge.\r\n\r\nCurrently, and I speak from experience here as I have the chance of often interacting with users, **for vesting streams, most people choose to have them set as untransferable**. And that's obviously because the organizations creating those streams want to avoid recipients selling their streams on OpenSea, or other NFT marketplaces.\r\n\r\n**So we are left with two extremes:** either the stream creator completely blocks transferability and the recipient cannot do anything with the stream, or they completely allow transferability and the recipient can do anything they want.\r\n\r\n**What if there was a middle-ground?**\r\n\r\nOne could think of a system where **the stream creator could allow only certain protocols to interact with the NFT**. For example, they could allow [Myso](https://www.myso.finance/) to interact with the NFT to allow their recipients to get a loan using their vesting schedules as collateral, but obviously not allow OpenSea to interact with it.\r\n\r\nWe could build a system similar to how Snapshot built its \"strategy\" voting system, where we build the general framework, and third-parties who are interested (like [Myso](https://myso.finance), for example) integrate. That way, we offload the actual integration work to them, freeing engineering time on our end.\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-06-14T08:37:05Z","labels":[],"number":59,"repository":"sablier-labs/command-center","state":"open","title":"Allowlist system for NFT transferability","type":"discussion","updatedAt":"2025-05-08T11:02:26Z","url":"https://github.com/sablier-labs/command-center/discussions/59"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWe keep receiving requests for staking — [all the time](https://github.com/sablier-labs/company-discussions/discussions/90).\r\n\r\n## Solution\r\n\r\nTurn @smol-ninja's [`StakeSablierNFT`](https://github.com/sablier-labs/evm-examples/blob/a179fa5119778f26b19c367928dab95b0787f4d0/lockup/StakeSablierNFT.sol) into an end-to-end product with a smart contract staking system + an accompanying UI.\r\n\r\nIt should be possible to stake both Sablier NFTs and normal ERC-20 tokens.\r\n\r\nTo move fast, we can make the first iteration of this product be super duper simple and non-customizable. Then, if there continues to be demand for it, we can enable further customization.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/everybody for feedback","createdAt":"2025-03-19T12:24:54Z","labels":[],"number":116,"repository":"sablier-labs/command-center","state":"open","title":"End-to-end staking product for Sablier streams","type":"discussion","updatedAt":"2025-04-29T23:45:59Z","url":"https://github.com/sablier-labs/command-center/discussions/116"},{"author":"smol-ninja","body":"## Context\r\n\r\nSome chains decided to implement ERC20 functions into their native tokens. As a result of this, these tokens are not indistinguishable from ERC20 standard. Sablier protocol can behave unexpectedly if these tokens are involved.\r\n\r\n**Affected chains supported by Sablier**\r\n\r\n- [Tangle's TNT](https://explorer.tangle.tools/address/0x0000000000000000000000000000000000000802): implements `approve`, `transfer` and `balanceOf` functions.\r\n- [Polygon's POL](https://polygonscan.com/address/0x0000000000000000000000000000000000001010): implements `transfer` and `balanceOf` functions. It does not implement `approve`.\r\n\r\n**Affected chains not yet supported by Sablier**\r\n\r\n- [CELO](https://celoscan.io/token/0x471ece3750da237f93b8e339c536989b8978a438): implements `approve`, `transfer` and `balanceOf` functions.\r\n- [METIS](https://explorer.metis.io/address/0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000): implements `approve`, `transfer` and `balanceOf` functions.\r\n- [Moonbeam's GLMR](https://docs.moonbeam.network/builders/ethereum/precompiles/ux/erc20/): implements `approve`, `transfer` and `balanceOf` functions.\r\n\r\n## Problems and Mitigations\r\n\r\nBecause they act both as ERC20 and native tokens, they return the same value for `balanceOf` and `address(this).balance`. This would lead to the following consequences:\r\n\r\n### Lockup and Flow\r\n\r\nIf a user streams any of the affected tokens, anybody can call [`collectFee`](https://github.com/sablier-labs/lockup/blob/staging/src/abstracts/SablierLockupBase.sol#L350) and send the entire token balance to the admin, including the stream's balance.\r\n\r\n#### Solution:\r\n\r\n- Restrict `collectFee` to only be callable by the protocol admin.\r\n\r\nBoth Lockup and Flow accepts deposit through `approve` and `transferFrom`. Therefore, tokens affecting these two protocols are TNT, CELO and METIS. POL is not affected since it does not implement `approve` and cannot be used with.\r\n\r\n### Airdrop Campaigns\r\n\r\nCampaigns accept deposit through direct ERC20 transfers. Therefore, in case a campaign is created with any of the affected tokens, there are two issues that can be faced:\r\n\r\n1. The campaign creator can use `clawback` to withdraw the unclaimed funds including the fee accrued.\r\n2. Anybody can call `collectFee` and send the entire token balance to the admin, including the users' funds.\r\n\r\n#### Solution:\r\n\r\n- Restrict `collectFee` to only be callable by the protocol admin.\r\n- Disable native tokens at the UI level so that users cannot create campaigns with them. Though they can still use the contract directly to create campaigns but it will be difficult because of the Merkle tree requirement.\r\n- Do nothing with `clawback` since each campaign is localised so the loss to Sablier admin is minimal, even if the campaign creator withdraw fee accrued. Handling it in `clawback` would be an overkill as we will have to implement a new function to handle deposits, then track deposits and claims in a storage variable.\r\n\r\ncc @sablier-labs/engineers.\r\n\r\nNote: This was originally disclosed by [Eric](https://x.com/shw9453) during [Cantina finding](https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/11) and discussed [here](https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/comments#comment-d1f8ade0-ac9e-4cfd-817b-e9e3640a8c65).","createdAt":"2025-03-13T19:15:11Z","labels":[],"number":115,"repository":"sablier-labs/command-center","state":"closed","title":"Chains with ERC20 functions implemented in native tokens","type":"discussion","updatedAt":"2025-04-19T10:11:36Z","url":"https://github.com/sablier-labs/command-center/discussions/115"},{"author":"IaroslavMazur","body":"Looking at the Hedgey contracts, I've noticed that they require an optionally-filled `Donation` parameter to be passed when creating token-claiming Campaigns.\r\nWhile Sablier has got the at-Stream-creation fee in mind for the future, wdyt about offering our Streamers the opportunity to optionally donate a part of the tokens they're depositing into the newly-created Stream to Sablier?\r\n\r\n**Pros:**\r\n- the amount/percentage of the donated tokens doesn't have to be the same across all of the Streamers (as it will be when the admin fee is enabled in the future)\r\n- the donated tokens can be vested/streamed themselves (as Hedgey does), instead of being transferred to Sablier directly (potentially,\r\n- increasing the amount of tokens our clients would be comfortable allocating for us over a bigger timeframe)\r\n\r\n**Cons:**\r\n- a slightly increased cost of executing the txs that contain the optional donation","createdAt":"2023-11-04T17:53:30Z","labels":[],"number":8,"repository":"sablier-labs/command-center","state":"closed","title":"Let Sablier users optionally donate a part of the streamed tokens to Sablier?","type":"discussion","updatedAt":"2025-04-16T09:32:56Z","url":"https://github.com/sablier-labs/command-center/discussions/8"},{"author":"PaulRBerg","body":"## Problems\r\n\r\n### Problem 1: UI Self-Checkout\r\n\r\nSometime in Q2 or Q3, we will add support for self-checkout in the UI.\r\n\r\nHowever, to provide an automated self-checkout, we need to be able to call the following functions programmatically:\r\n\r\n- [`setCustomFeeUSD`](https://github.com/sablier-labs/airdrops/blob/cb91519b8328afbc9d3b474cbbd00c03ea2e474b/src/abstracts/SablierFactoryMerkleBase.sol#L74) (in the Merkle factories)\r\n- [`lowerMinFeeUSD`](https://github.com/sablier-labs/airdrops/blob/cb91519b8328afbc9d3b474cbbd00c03ea2e474b/src/abstracts/SablierMerkleBase.sol#L192) (in existing Merkle campaigns)\r\n\r\nOn chains where the admin is a multisig, we cannot call the functions programmatically (due to the requirement to sign the txs), and on chains where the admin is an EOA, it would be a bad idea to store the deployer's private key in an API endpoint.\r\n\r\n### Problem 2: Fee Management and Consolidation\r\n\r\n@smol-ninja has recently created a script for [automating the fee collection](https://github.com/sablier-labs/command-center/issues/118).\r\n\r\nThe script is nice, but collecting the fees is just one part of the equation. The other part is how they are _managed_ and _consolidated_ after they are collected. As of now, the fees can only be collected to the admin address, and since the admin is a multisig, we cannot automate the bridging or selling of fees to USDC.\r\n\r\n@maxdesalle pointed out this problem [here](https://github.com/sablier-labs/command-center/discussions/119).\r\n\r\n## Solutions\r\n\r\n### Pre-Requisite\r\n\r\nA pre-requisite for all solutions is to [Add a `to` parameter in the `collectFees` function](https://github.com/sablier-labs/airdrops/issues/139).\r\n\r\n### Solution 1: Role-Based Access Control (RBAC)\r\n\r\nOpenZeppelin provides a [Role-Based Access Control](https://docs.openzeppelin.com/contracts/5.x/access-control) mechanism for splitting a single admin into:\r\n\r\n1. A so-called 'default admin' that takes the role of the single admin.\r\n2. Granular roles that can perform highly specific tasks only.\r\n\r\n> [!NOTE]\r\n> The roles implemented via RBAC will be _additive_, i.e., the default admin will still be able to perform every action that the roles can.\r\n\r\n<details><summary>Toggle to see Solidity sample implementation</summary>\r\n<p>\r\n\r\n```solidity\r\npragma solidity >=0.8.29;\r\n\r\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract ContractWithRules is AccessControl {\r\n    bytes32 public constant FEE_COLLECTOR_ROLE = keccak256(\"FEE_COLLECTOR_ROLE\");\r\n    bytes32 public constant FEE_MANAGEMENT_ROLE = keccak256(\"FEE_MANAGEMENT_ROLE\");\r\n    \r\n    constructor(address initialAdmin) {\r\n        // Will be able to grant and revoke any roles\r\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\r\n    }\r\n\r\n    function collectFees(ISablierMerkleBase campaign) external onlyRole(FEE_COLLECTOR_ROLE) {\r\n        // ...\r\n    }\r\n    \r\n     function setCustomFeeUSD(address campaignCreator, uint256 customFeeUSD) external onlyRole(FEE_MANAGEMENT_ROLE) {\r\n        // ....\r\n      }\r\n\r\n    function lowerMinFeeUSD(uint256 newMinFeeUSD) external {\r\n        if (!factoryAdmin.hasRole(FEE_MANAGEMENT_ROLE, msg.sender)) {\r\n            revert CallerUnauthorized(msg.sender);\r\n        }\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n### Solution 2: Safe Modules\r\n\r\nInstead of implementing a bespoke RBAC in our own contract, we could potentially rely upon [Safe Modules](https://docs.safe.global/advanced/smart-account-modules).\r\n\r\nWe would still need to write custom code, something like a `SablierFeeManagementModule` contract. Then, we would need to submit a multisig tx to call `enableModule`.\r\n\r\n### Pros and Cons\r\n\r\n- Pro: the audit cost may be lower since the Safe Module implementation may have fewer lines of code than the OpenZeppelin integration.\r\n- Con: we would need to manually submit a multisig tx to call `enableModule` every time the protocol is deployed.\r\n- Con: the solution doesn't work on the chains where we don't use a Safe multisig as an admin. We could consider moving to a Safe everywhere, but unfortunately, Safe is not available on all chains that Sablier is deployed to.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/engineers\r\n\r\nI have a preference for the 1st solution because it would avoid the cons listed above. We could avoid the manual call to `enableModule` by adding constructor args for roles.\r\n\r\nIf you agree with the proposal, I suggest implementing this in the EVM Utils repo, and batching this task together with task https://github.com/sablier-labs/evm-utils/issues/10.","createdAt":"2025-04-01T13:06:47Z","labels":[],"number":135,"repository":"sablier-labs/command-center","state":"closed","title":"Better fee management with Role-Based Access Control in the EVM contracts","type":"discussion","updatedAt":"2025-04-19T12:46:53Z","url":"https://github.com/sablier-labs/command-center/discussions/135"},{"author":"PaulRBerg","body":"We get this feature request a lot. How can we enable support for staking streams?\r\n\r\n<img width=\"375\" alt=\"Screenshot 2023-08-31 at 12 21 32 PM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/db492372-c809-41db-9614-d51aee943c23\">\r\n","createdAt":"2023-08-31T18:54:11Z","labels":[],"number":90,"repository":"sablier-labs/command-center","state":"closed","title":"Open discussion about staking","type":"discussion","updatedAt":"2025-04-14T12:15:39Z","url":"https://github.com/sablier-labs/command-center/discussions/90"},{"author":"smol-ninja","body":"## Original Proposal\r\n\r\n_Posted by @smol-ninja_\r\n\r\nMicah asked for a system to notify recipients if senders make changes to the streams. Starting this discussion to track down similar user requests.\r\n\r\n<img width=\"400\" alt=\"Screenshot 2025-01-14 at 16 01 08\" src=\"https://github.com/user-attachments/assets/d5d7ef7c-8025-4456-88cd-34edb73959a3\" />\r\n\r\nSome ideas from Slack conversation:\r\n\r\n- https://push.org/\r\n- https://x.com/PaulRBerg/status/1879171437610873291\r\n- https://www.daylight.xyz/\r\n\r\n## Updated Proposal\r\n\r\n_Edited by @PaulRBerg_\r\n\r\nEmail alerts make sense for both senders and recipients.","createdAt":"2025-01-14T16:02:42Z","labels":[],"number":95,"repository":"sablier-labs/command-center","state":"open","title":"Email-based notification system for senders and recipients","type":"discussion","updatedAt":"2025-04-10T15:01:34Z","url":"https://github.com/sablier-labs/command-center/discussions/95"},{"author":"PaulRBerg","body":"> [!NOTE]\r\n> This discussion is outdated, please see [Final revenue model for H1 2025](https://github.com/sablier-labs/company-discussions/discussions/100).\r\n\r\n## Context\r\n\r\nIn this discussion, I will expand on our [Roadmap for 2025](https://www.notion.so/sablier/Roadmap-for-2025-f2e6a1da2cc54a1fa69f4eac26903b3b) by providing a detailed plan for how to implement broker fees in H1 2025.\r\n\r\nI will start with the easiest implementations and work my way up to the hardest, which is Lockup.\r\n\r\n## Flow\r\n\r\nTake a fixed fee like 0.25% from every withdrawal using protocol fees: https://github.com/sablier-labs/flow/issues/213\r\n\r\n## Airstreams\r\n\r\nOn Notion, I have initially said that we can add a broker fee in the claim function. However, I now realize that we may not want to get paid in whatever random shitcoins are getting airdropped.\r\n\r\nLet's just do what [Clique](https://sablier.slack.com/archives/C04UTSBU84Q/p1713384808363859) does and charge a small fee in the base asset (e.g., ETH or MATIC). Users need to have the base asset anyway to pay for gas fees, so they will treat the added fee as part of the gas fees. The dopamine hit of having just received an airdrop will well compensate for the psychological resistance against paying a fee.\r\n\r\nThe specific amount of ETH charged as a fee will vary with the dollar price of ETH, but to start with, let's go with ~0.005 ETH, which is ~$1.\r\n\r\nIn light of this, I have created a GitHub issue in Lockup: https://github.com/sablier-labs/v2-core/issues/1032\r\n\r\n## Lockup\r\n\r\nCharging Lockup users is trickier due to the emphasis on vesting.\r\n\r\nThe first question to answer is whom to charge — the sender or the recipient? In this [separate discussion](https://github.com/sablier-labs/company-discussions/discussions/71), I have explained in great detail why I think we should charge the **recipient**.\r\n\r\nThere are two ways to charge recipients:\r\n\r\n1. ~Broker fees at withdrawal time: https://github.com/sablier-labs/v2-core/issues/1033~\r\n2. Protocol fees at withdrawal time (why haven't we thought about this before?): https://github.com/sablier-labs/v2-core/issues/1034\r\n\r\nSee my [comment below](https://github.com/sablier-labs/company-discussions/discussions/72#discussioncomment-10548445). Only protocol fees make sense.\r\n\r\n~Currently, Lockup supports neither broker nor protocol fees at withdraw time. I suggest implementing them both, for maximum optionality. For instance, even we might prefer to use protocol fees instead of broker fees (as doing so would reduce gas consumption), having the broker fee as a payment option wouldn't hurt. It might incentivize integrations and make it easier to offer automated withdrawals as a service.~\r\n\r\n## Feedback\r\n\r\nRFC @sablier-labs/everybody","createdAt":"2024-09-04T12:15:45Z","labels":[],"number":72,"repository":"sablier-labs/command-center","state":"closed","title":"Fleshing out the revenue models for H1 2025","type":"discussion","updatedAt":"2025-04-10T14:53:21Z","url":"https://github.com/sablier-labs/command-center/discussions/72"},{"author":"razgraf","body":"## Context\r\n\r\nWe've received this feedback from Shell Protocol, a project that recently launched their token using Sablier (with their own version of Airstreams). The main idea behind it is: should we allow customization of the NFT design?\r\n\r\nIt makes sense that, when a project launches their token, they want to have a spotlight on their own brand, therefore wishing a custom NFT design for the token claims distributed in the shape of streams.\r\n\r\nOn the other hand, we want to have a bit of control over this design to (1) make sure it also showcases and matches the \"Sablier vibe\" (in the end we want to profit from the attention as well) and (2) make sure it looks good.\r\n\r\n<img width=\"400\" alt=\"Screenshot 2024-01-26 at 16 50 09\" src=\"https://github.com/sablier-labs/company-discussions/assets/15740806/dae24c5a-02b4-4adb-9d4f-6a3446738b81\">\r\n\r\n### Ideas\r\n\r\n1. Technically, we could implement a custom NFTDescriptor that fetches a \"part\" of the SVG from some external contract. We'd have a `sender => contract` mapping, where we could whitelist a set of senders for whom streams will have different design characteristics. We'd \"nest\" another NFTDescriptor inside the render function of the first one.\r\n2. Practically, this could translate into a template where, for example, we leave only the border, box and Sablier icon always inside the NFT, while the design bit in the center (e.g. our current hourglass or the fields) and possibly the color will all be rendered by the nested NFT.\r\n\r\n","createdAt":"2024-01-26T15:01:14Z","labels":[],"number":31,"repository":"sablier-labs/command-center","state":"closed","title":"Allowing customization of the NFT design","type":"discussion","updatedAt":"2025-04-10T13:16:13Z","url":"https://github.com/sablier-labs/command-center/discussions/31"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOne of the biggest bottlenecks to creating an airdrop campaign is obtaining the recipient addresses and making the data conform to the Sablier CSV format.\r\n\r\nThis is part of the reason why we have considered building a [wallet address collection tool](https://github.com/sablier-labs/interfaces/discussions/1108).\r\n\r\n## Solution\r\n\r\nTo get rid of this bottleneck and accelerate our growth, I suggest the following idea:\r\n\r\n**In the step 2 of the airdrop creation form, add a new feature for picking copying the audience of other popular airdrop campaigns, e.g., Uniswap, EigenLayer**. Then, the user would be asked to provide the entire total amount they want to airdrop, and the UI (presumably through an API endpoint) would calculate the proportional airdrop amount for each user and then generate the CSV file.\r\n\r\nI will let guru @razgraf handle the specific design details, but I imagine that an 'App Store-like experience with cards for each third-party airdrop would be cool.\r\n\r\n### Inspiration\r\n\r\nEtoro's [CopyTrader](https://www.etoro.com/copytrader/) product is relevant.\r\n\r\n> Invest like eToro’s top investors.\r\n> Replicate the investment moves of other traders in real time, automatically.\r\n\r\n## Feedback\r\n\r\n> [!NOTE]\r\n>\r\n> I'm pretty confident that this feature alone will generate us $1M in ARR in no time.\r\n\r\ncc @sablier-labs/everybody for feedback","createdAt":"2025-02-17T20:33:53Z","labels":[],"number":108,"repository":"sablier-labs/command-center","state":"open","title":"CopyAirdrop: copy the recipient lists of popular airdrop campaigns","type":"discussion","updatedAt":"2025-04-10T11:10:45Z","url":"https://github.com/sablier-labs/command-center/discussions/108"},{"author":"razgraf","body":"This discussion is somewhat related to https://github.com/sablier-labs/v2-interfaces/discussions/570 but it focuses on internal-cross-branding rather than an external claim environment (bespoke white-labeled page).\r\n\r\n## The topic\r\n\r\nSome users, including Pond (one of the early Airstream creators) have requested we add some customization to the Sablier interfaces. This ranges from adding their logos on our pages, to including custom links or steps (e.g. checkbox for their ToS at claim) as additional functionality.\r\n\r\n## The questions\r\n\r\n1. Should we do it? Is it in our interest?\r\n2. How should we do it, and how extensive?\r\n\r\n## The idea (as seen from the airstream creator's point of view)\r\n\r\nWhen you launch a vesting program or an airdrop/token-distribution to your community, it's \"all about you\". You want your project to be the one in the spotlight, so it's fair to want your logo and product be showcased up and front.\r\n\r\nHaving it there means users do less mental gymnastics to associate the claim interface with your product (as they can see the logo there). It means you can \"appropriate\" that utility software (Sablier) as part of your own stack and only focus on your brand when you plan on how/what to communicate to users. \r\n\r\nIn contrast to this last point, if you do chose to include this utility software in your marketing, you can use their image and clout as a vote of confidence (an endorsement) **especially** if you're one of the few displayed directly in their interface.\r\n\r\nLastly, if you need \"custom features\" (functional, more than just branding e.g., the ToS checkbox suggestions) you can rely on this utility vendor (Sablier) to implement them.\r\n\r\n### The solution\r\n\r\nLet's discuss possible solutions in this thread. Will follow-up with my own take down below. @sablier-labs/everybody \r\n\r\n","createdAt":"2024-02-12T10:12:17Z","labels":[],"number":37,"repository":"sablier-labs/command-center","state":"closed","title":"Customize UI for 3rd party branding in the context of Airstreams","type":"discussion","updatedAt":"2025-08-04T12:51:08Z","url":"https://github.com/sablier-labs/command-center/discussions/37"},{"author":"PaulRBerg","body":"Idea shared by Micah on Discord:\r\n\r\n<img width=\"300\" alt=\"SCR-20240227-nfyv\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/9a6ffb6e-001e-4cd8-a792-06e20206384b\">\r\n","createdAt":"2024-02-27T12:55:47Z","labels":[],"number":41,"repository":"sablier-labs/command-center","state":"closed","title":"Soulbound streams","type":"discussion","updatedAt":"2025-04-09T18:36:01Z","url":"https://github.com/sablier-labs/command-center/discussions/41"},{"author":"PaulRBerg","body":"## Pattern\r\n\r\nThere's a common thread among the strategies employed by our competitors:\r\n\r\n- Build a general-purpose protocol\r\n- Build a general-purpose app\r\n- Slowly but steadily differentiate the app to refer to specific use cases\r\n- Shitpost about their brand new \"product\", which is the same as the general-purpose app but with different labels\r\n\r\n### References\r\n\r\n- [Superfluid vesting](https://twitter.com/Superfluid_HQ/status/1628062303491969024)\r\n- [Superfluid subscriptions](https://twitter.com/Superfluid_HQ/status/1681330344794923014)\r\n- [Hedgey grants](https://twitter.com/goforlindsey/status/1691065892757725185)\r\n\r\n### Screenshots\r\n\r\n|    Superfluid    |     Hedgey    |\r\n| :----------: | :----------: |\r\n| <img width=\"400\" alt=\"SCR-20230815-phiz\" src=\"https://github.com/sablier-labs/private-discussions/assets/8782666/1dc32088-ac18-4e1f-9485-2d0cbbdc9f5b\"> | <img width=\"400\" alt=\"Hedgey\" src=\"https://github.com/sablier-labs/private-discussions/assets/8782666/9ecedb2e-466f-40c2-ae56-e2c6f873a134\">  |\r\n\r\n## Positioning\r\n\r\nThis conversation is implicitly about long-term positioning as a brand and company.\r\n\r\nToday, we are defining ourselves as a company that builds money-streaming tools. We will definitely continue pursuing that goal for a while, but eventually, we will need to ask ourselves the difficult question:\r\n\r\nIf Sablier V2 keeps being used chiefly for vesting (or only for vesting), should we update our branding to reflect this?\r\n\r\nWe don't need to answer this now — just food for thought for later. V3 will definitely influence our thinking on this topic (a lot).\r\n\r\n## Takeaways\r\n\r\nThis is what we could do in the short term:\r\n\r\n1. Build dedicated pages in the landing page website:\r\n    - sablier.com/vesting\r\n    - sablier.com/payroll\r\n    - sablier.com/airdrops\r\n    - etc.\r\n2. Turn those pages into articles for additional SEO\r\n\r\nAll pages have the same layout structure, just with different labels. The purposes would be:\r\n\r\n- SEO\r\n- Shilling it to particular users who are only interested in one use case. Easier to speak the user's \"tongue\" rather than present it in terms of streams, which are more abstract\r\n\r\nHowever, building dedicated Next.js functionality in the Sablier UI at [app.sablier.com](https://app.sablier.com) that differs only in the labels would be overkill. I would much rather channel that development effort into making more integrations.","createdAt":"2023-08-15T17:03:32Z","labels":[],"number":3,"repository":"sablier-labs/command-center","state":"closed","title":"Positioning and dedicated landing page for each use case","type":"discussion","updatedAt":"2025-04-09T18:04:05Z","url":"https://github.com/sablier-labs/command-center/discussions/3"},{"author":"PaulRBerg","body":"Related: https://github.com/sablier-labs/v2-core/discussions/708\r\n\r\nI discussed this with @andreivladbrg and @razgraf on a call earlier this month, and we concluded that keeping \"streaming\" is fine. The arguments were:\r\n\r\n- People use Sablier for more things than just streaming (e.g. payroll)\r\n- The use of the \"streaming\" terminology differentiates Sablier from the crowd (e.g. \"tweet\" vs \"post\")\r\n- We haven't received any user complaint about \"streaming\" being confusing in this way\r\n- Changing the functions will lead to a breaking change, which will make integrations more difficult\r\n\r\nHowever, I confess that I am personally still on the fence about that decision. I suspect that once we get to release V3 and [OpenEnded](https://github.com/sablier-labs/company-discussions/discussions/6), more people will use that product series for payroll purposes, which will make the Lockup series primarily used for vesting purposes.\r\n\r\nThere's value in terminological clarity - it's a form of good UX. I suspect that this is what led Twitter to switch from \"tweet\" to \"post\" - some users might dislike the change, but there's no question about the fact that \"post\" is clearer than \"tweet\" (for non-native English speakers, new Twitter users, etc.)\r\n\r\nSimilarly, \"vesting\" would be a clearer term in the context of the Lockup contracts. We gotta admit that the following shapes don't have anything to do with money streaming:\r\n\r\n- Unlock in Steps\r\n- Unlock Monthly\r\n- Timelock\r\n- Tranched\r\n\r\nI know that, technically, we can assign a new meaning to the term \"stream\". And that's what we're doing now, but we're fighting an uphill battle. Users and LLMs will be confused.\r\n\r\nMy suggestions:\r\n\r\n- Closely monitor user feedback for any signs of confusion\r\n- Ask users if \"vesting\" would be a clearer term\r\n- Consider changing the terminology for non-EVM releases, e.g. Solana, Fuel, where the refactor cost argument doesn't apply","createdAt":"2024-01-30T11:35:05Z","labels":[],"number":32,"repository":"sablier-labs/command-center","state":"closed","title":"Refactor the \"streaming\" terminology to \"vesting\" in the Lockup series","type":"discussion","updatedAt":"2025-04-09T18:01:12Z","url":"https://github.com/sablier-labs/command-center/discussions/32"},{"author":"PaulRBerg","body":"## Final Revenue Model\r\n\r\nAfter lots and lots of discussions, we have landed on the following model:\r\n\r\n- Charge recipients upon withdrawing from Vesting and Flow streams\r\n- Charge users upon claiming Airdrops (either instant or vested)\r\n\r\nI suggest starting with the following pricing:\r\n\r\n- $3 for airdrop claims\r\n- $1 for streams\r\n\r\nBoth figures are charged in ETH (or POL on Polygon).\r\n\r\n### Recipient-First with Optional Sender Backing\r\n\r\nThere have been several requests for senders who want to foot the bill for recipients.\r\n\r\nThis is a billing model that can be implemented in multiple different ways. I will open a separate discussion about this.\r\n\r\nHowever, to begin with, we can do this:\r\n\r\n1. Tell senders on private channels like Telegram about the ability to sponsor the fees\r\n2. On a monthly basis, calculate how many claims there have been\r\n3. Send them an invoice with the usage\r\n4. If they refuse to pay, turn on the fees\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/business\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/company-discussions/discussions/72\r\n- https://github.com/sablier-labs/company-discussions/discussions/71","createdAt":"2025-01-27T15:07:09Z","labels":[],"number":100,"repository":"sablier-labs/command-center","state":"open","title":"Final revenue model for H1 2025","type":"discussion","updatedAt":"2025-04-09T17:59:54Z","url":"https://github.com/sablier-labs/command-center/discussions/100"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAll of our products will forever remain cute demos until we implement privacy. In the long haul, this is a must-have feature.\r\n\r\n## My Ideas\r\n\r\nIn no particular order:\r\n\r\n1. Implement LockupLinear on [AZTEC](https://aztec.network/) (great for BD and cross-marketing)\r\n2. Integration with [zkBOB](https://www.zkbob.com/) (see Telegram chat for more context)\r\n3. [Interactive shielding](https://ethresear.ch/t/the-application-of-zk-snarks-in-solidity-privacy-transformation-computational-optimization-and-mev-resistance/17017?u=paulrberg)\r\n4. Alternative implementation of V3 with built-in privacy\r\n5. Application layer on top of V3 with privacy (using SNARKs á la zkBOB, or whatever) \r\n\r\n## RFC\r\n\r\nCc @sablier-labs/everybody please share more ideas if you have.\r\n\r\nObviously, privacy is a sensitive feature from a regulatory point of view, so we need to thread carefully.\r\n\r\nRelated discussion: [Build and deploy on Aztec](https://github.com/sablier-labs/command-center/discussions/68)","createdAt":"2023-12-29T14:57:40Z","labels":[],"number":21,"repository":"sablier-labs/command-center","state":"open","title":"Ideas for how to implement privacy","type":"discussion","updatedAt":"2025-04-09T12:15:52Z","url":"https://github.com/sablier-labs/command-center/discussions/21"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWe want to implement an automated self-checkout flow in the UI so that our users can pay for Sablier without there being any requirement for a manual Safe multisig tx.\r\n\r\nThe Role-Based Access Control (RBAC) mechanism I suggested [here](https://github.com/sablier-labs/command-center/discussions/135) will address the problem, but in an offline conversation with @razgraf, he pointed out that having to submit an onchain tx might still lead to delays in the UI. We will have to wait for confirmation that the fee exemption was successfully validated on the blockchain.\r\n\r\n> [!NOTE]\r\n> As of now, the problem is only applicable to the Airdrops contracts, but we plan on adding a minimum fee in Lockup and Flow, too, so the problem will apply to all of our EVM products.\r\n\r\n## Solution\r\n\r\nThere are two components to the solution: (i) a Solidity component and (ii) a web2 backend part.\r\n\r\n### Solidity\r\n\r\nBuild upon the RBAC and define this new role:\r\n\r\n```solidity\r\nbytes32 public constant FEE_WAIVER_ROLE = keccak256(\"FEE_WAIVER_ROLE\");\r\n```\r\n\r\nThen, in all `withdraw` and `claim` functions, add a new `stamp` parameter of type `bytes` (exact name TBD later), which would work like this:\r\n\r\n- Using `ecrecover`, extract the original signer address\r\n- If the signer address has the `FEE_WAIVER_ROLE`, skip the minimum fee checks\r\n\r\nThis would make it possible to skip the need to call `setCustomFeeUSD` and `lowerMinFeeUSD`\r\n\r\n### Web2 Backend\r\n\r\nThe private key of the address that has the `FEE_WAIVER_ROLE` would be kept in some sort of web2 API, e.g., a Vercel Function.\r\n\r\nThe API would expose a method for generating 'stamp' signatures that waive the fee for particular recipients associated with the sender who is a paying customer of Sablier.\r\n\r\nThe Sablier frontend would call this API whenever a withdrawal is made or an airdrop is claimed — it has to be done this way because otherwise the stamp could be 'leaked' among recipients \r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/engineers\r\n\r\n### My Thoughts\r\n\r\nIt's an interesting idea, but I see several cons:\r\n\r\n1. Compared to exempting the fees onchain, this solution would require an additional API call whenever a withdrawal is made or an airdrop is claimed. This is quite a bit of overhead that may go against our preference toward minimizing the number of API requests made in the UI.\r\n2. Greater web2 attack surface — only authorized users should be allowed to call the API endpoint. We can use this bearer tokens for this, but the point remains that there's a greater attack surface in our tech stack.\r\n3. Increased gas cost for withdrawals and claims\r\n\r\nThus, I suggest sticking with using the vanilla RBAC system for now, and keeping this idea in the back of our minds if the need for an onchain tx turns out to be problematic in the self-checkout flow.","createdAt":"2025-04-01T13:27:50Z","labels":[],"number":136,"repository":"sablier-labs/command-center","state":"open","title":"Stamper signatures for waiving the fees in the withdraw and claim functions","type":"discussion","updatedAt":"2025-04-01T13:27:51Z","url":"https://github.com/sablier-labs/command-center/discussions/136"},{"author":"maxdesalle","body":"Right now, [the plan](https://github.com/sablier-labs/command-center/issues/118) is to collect fees every month into our deployer wallets, many of which are multisigs.\r\n\r\nThis is a discussion to explore the potential approaches to automate bridging those fees from all chains to one chain (like Ethereum or Arbitrum) where we hold our treasury.","createdAt":"2025-03-28T22:01:16Z","labels":[],"number":119,"repository":"sablier-labs/command-center","state":"closed","title":"Automating bridging fees after they're collected","type":"discussion","updatedAt":"2025-04-01T13:08:07Z","url":"https://github.com/sablier-labs/command-center/discussions/119"},{"author":"PaulRBerg","body":"This is a must-have in order to win more US investors as users.\r\n\r\nLexicon:\r\n\r\n- RIA = [Registered Investment Advisor](https://www.investopedia.com/terms/r/ria.asp)\r\n  - A registered investment advisor (RIA) is a financial professional firm that advises clients on securities investments and may manage their financial portfolios. RIAs are registered with either the SEC or state securities administrators.\r\n- QC = [Qualified Custodian](https://www.investopedia.com/selecting-a-qualified-crypto-custodian-8400929)\r\n  - A qualified custodian not only guards assets but also complies with the relevant laws, regulations, and best practices. These standards, set by organizations like the U.S. SEC and the U.S. CFTC, should ensure your custodian has robust security protocols in place to protect digital assets.\r\n \r\nI had a call with BitGo yesterday, which went well. [Thanks to AZTEC rooting for us](https://sablier.slack.com/archives/C04357LFXTQ/p1727966314011739), BitGo is open to making an integration with Sablier. The details of the integration are TBD, but **because the withdraw function is public now, it means that BitGo addresses can be used as recipient addresses** without BitGo lifting a finger. It'd be better if they displayed little information such as the streamed amount, but anyway.\r\n\r\nThe takeaways:\r\n\r\n1. Reach out to as many custodians as possible to explain to them how simple it would be to delegate the vesting part to Sablier.\r\n2. Write an article that explains how to use a BitGo address as a Sablier recipient.\r\n\r\ncc @sablier-labs/business.","createdAt":"2024-10-04T13:42:39Z","labels":[],"number":81,"repository":"sablier-labs/command-center","state":"closed","title":"Integrations with custodians to comply with RIA and QC regulations","type":"discussion","updatedAt":"2025-03-31T13:03:53Z","url":"https://github.com/sablier-labs/command-center/discussions/81"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nWe've already started implementing [Airdrops with Variable Claim Amounts](https://github.com/sablier-labs/airdrops/issues/43) (AVCAs), and they will be available in Airdrops via a new contract called `MerkleVCA`.\r\n\r\nThe currently envisioned design is simple — when users forfeit tokens before the end of the vesting period, the tokens are allocated back to the admin.\r\n\r\n**But what if instead of returning the forfeited tokens to the admin, we redistributed them to all other users who waited until the end?**\r\n\r\nThe benefits of this approach are manifold:\r\n\r\n- First and foremost, it **gamifies** Sablier.\r\n- It provides a product that, to my knowledge, doesn't currently exist on the market. We would be the first.\r\n- It provides a good excuse for collecting email addresses — in order to keep users notified of the vesting schedule and the latest size of the redistribution pool.\r\n- It makes it possible to include the holy word `APY` on our website — providing an estimate of how many more tokens you would earn if you waited until the end of the campaign.\r\n\r\n## Design\r\n\r\nUPDATE: I am now in favor of @smol-ninja's APY-per-token proposal explained in a comment [below](https://github.com/sablier-labs/company-discussions/discussions/98#discussioncomment-11951429).\r\n\r\nThere are several ways in which the escrow pool can be designed, but to keep things simple and not fry your brains while reading this proposal, I suggest a simple design to begin with:\r\n\r\nThe additional rewards will be distributed only to those users who wait until the end of the vesting period. This way, we provide clear incentives, maintain predictable economics, and minimize gas costs.\r\n\r\nAdmins can still set an expiration time, after which claiming is no longer allowed, and all tokens can be clawed-back (including the escrow pool)\r\n\r\n### Example\r\n\r\n- Alice, Bob, Charlie, and David are each eligible for 100 $FOO today or 200 $FOO if they wait 60 days\r\n- Alice claims early after 30 days; she forfeits 50 $FOO in the escrow pool\r\n- Bob claims early after 45 days; he forfeits 25 $FOO in the escrow pool\r\n- Charlie and David claim after 60 days\r\n    - They each earn their base 200 $FOO tokens\r\n    - Plus an additional 37.5 $FOO reward\r\n    - The reward is calculated thus: $EscrowPoolSum/PatientUserCount$\r\n\r\n### Continuous Redistribution\r\n\r\nI've consulted ChatGPT O1 Pro about whether a continuous, linear redistribution of the escrow pool would be feasible (before the end time) — and it doesn't look feasible:\r\n\r\n<details><summary>Toggle to see ChatGPT response</summary>\r\n<p>\r\n\r\n[Link here](https://chatgpt.com/share/67936c56-39b8-800e-ab45-263cb4a11a1a)\r\n\r\nIt's theoretically possible, but it quickly becomes unwieldy. If you try to distribute the escrow pool “continuously” in parallel with the main vesting schedule, you’d effectively be adding a second vesting layer on top of the first—one that continuously tracks and recalculates shares for every user who remains patient. Each claim would require updating not only that user’s share but also everyone else’s share, which is expensive on-chain.\r\n\r\nBy contrast, doing a single redistribution at the end is straightforward: you just see who hasn’t claimed yet, divide up the escrow, and distribute. Any partial or “dynamic” redistribution during the vesting period would explode in complexity because you’d have to handle multiple partial claims, each time adjusting future entitlements for all participants.\r\n\r\nSo practically, the best approach is to award the extra tokens once at the end of the vesting period (the simpler, single-event approach). That avoids gas-heavy bookkeeping and preserves the gamification (patient users get a final bonus).\r\n\r\n</p>\r\n</details>\r\n\r\n## Feedback\r\n\r\nThis idea was first suggested by Doug Leonard, one of our angel investors, during a board meeting held on Wednesday, Jan 22\r\n\r\nThis is an exciting feature/ product idea and I think we will all be in agreement about implementing it!!\r\n\r\ncc @sablier-labs/everybody for feedback\r\n\r\n## Related\r\n\r\n- https://github.com/sablier-labs/company-discussions/discussions/85\r\n- https://github.com/sablier-labs/airdrops/issues/43","createdAt":"2025-01-24T10:38:55Z","labels":[],"number":98,"repository":"sablier-labs/command-center","state":"closed","title":"A new flavor of AVCAs with redistribution of forfeited tokens","type":"discussion","updatedAt":"2025-03-23T11:54:24Z","url":"https://github.com/sablier-labs/command-center/discussions/98"},{"author":"maxdesalle","body":"We should absolutely 100% charge a default withdrawal fee (denominated in the gas token) at the protocol fee in Lockup and Flow, like we do for airdrops.\r\n\r\nRight now, we're providing work that has costed hundreds of thousands of $ in engineering and audit costs, for free, to competitors like TokenOps. We're literally feeding the enemy, one spoon at a time, for free.\r\n\r\n@sablier-labs/everybody \r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/b4457839-3da0-4a7c-9f36-df9c0405f6eb\"/>","createdAt":"2025-02-06T17:16:06Z","labels":[],"number":105,"repository":"sablier-labs/command-center","state":"closed","title":"Charging fees in the gas token at the protocol level in Lockup and Flow","type":"discussion","updatedAt":"2025-03-17T20:43:35Z","url":"https://github.com/sablier-labs/command-center/discussions/105"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe've recently encountered some resistance from a chain called Sonic regarding our deployment fee; they went with LlamaPay because they deployed for free:\r\n\r\n<img width=\"300\" alt=\"SCR-20241212-knrj\" src=\"https://github.com/user-attachments/assets/be81b992-ed56-499b-ade9-f78d1efefedf\" />\r\n\r\nThe ecosystem also seems to be moving in the direction of free, self-serve protocol deployments on custom EVM chains. For instance:\r\n\r\n- [Curve Offers Express Deployment of its DEX on supported Rollups](https://news.curve.fi/curve-lite-launch/)\r\n- [Conduit](https://www.conduit.xyz/) is working on a 'protocol store' where users can deploy protocols with one click\r\n\r\nThis means that charging for deployment fees isn't a sustainable business model.\r\n\r\n## Options\r\n\r\n### Option 1: Minimum Hosting Fee\r\n\r\nWe merge the one-time deployment fee ($30k) and the annual hosting fee ($2k) into a minimum hosting fee of $10k.\r\n\r\nThe pro is that we are guaranteed to make money, but the con is that it adds friction. We we have to explain the business model to prospects, send contracts for signing on DocuSign, monitor usage and issue recurring invoices, etc.\r\n\r\n### Option 2: Shoot and Spray\r\n\r\nWe lift all contractual relationships and deploy to as many EVM chains as possible. The ETH fees would be activated everywhere. We treat the chains that generate little fees as a sunk cost.\r\n\r\nThe main advantage of this approach is that it lowers friction, but it comes at a greater maintenance cost.\r\n\r\nMaybe we should have a policy for 'dead chains' that are delisted from the UI if there is little activity?\r\n\r\n## Feedback\r\n\r\nI'm slightly more in favor of option 2 since that's where the industry is heading anyway.\r\n\r\ncc @sablier-labs/business","createdAt":"2024-12-12T09:50:27Z","labels":[],"number":93,"repository":"sablier-labs/command-center","state":"closed","title":"Should we continue charging chain deployment fees after the ETH fees are implemented?","type":"discussion","updatedAt":"2025-03-17T20:43:05Z","url":"https://github.com/sablier-labs/command-center/discussions/93"},{"author":"razgraf","body":"This thread will act as a table of contents for utilities -general purpose or related to merkle campaigns. These are spread across multiple repositories or gists, so every time we code one that could be helpful to future customers, we can drop the link here.","createdAt":"2025-02-26T10:52:41Z","labels":[],"number":110,"repository":"sablier-labs/command-center","state":"closed","title":"Technical utilities for Sablier","type":"discussion","updatedAt":"2025-03-17T18:39:46Z","url":"https://github.com/sablier-labs/command-center/discussions/110"},{"author":"PaulRBerg","body":"## Terminology\r\n\r\nThroughout the years, we have occasionally received a feature request for vested airdrops that get auto-canceled when the recipient makes a claim. @razgraf has referred to this behavior as [cancel on first withdraw](https://github.com/sablier-labs/v2-periphery/discussions/157#discussioncomment-6604765).\r\n\r\nI would like to propose a new name and a new proposal for this feature, which, I think, will better capture the nature of what users actually want.\r\n\r\nThe new name is **Airdrops with variable claim amounts**[^1]\r\n\r\n## Proposal\r\n\r\nIntroduce a new contract `SablierMerkle` contract (the exact name can be determined later) that implements the desired behavior, like so:\r\n\r\n- The airdrop funds are never deposited in any `Lockup` contract. They always remain in `SablierMerkle`.\r\n- Linear, by-the-second vesting (for simplicity, we can further customize this if the first version becomes popular).\r\n- When a recipient claims, the unvested portion is assigned back to the campaign creator.\r\n- At the end of the campaign, the creator can claw back all remaining funds. Unlike the other contracts, clawbacks here would not be an optional feature.\r\n\r\n### Notes\r\n\r\n- **Naming**: this Merkle contract would no longer be in the 'periphery' since it would directly hold user funds. [Maybe it's time to ditch the core vs periphery category](https://github.com/sablier-labs/v2-core/discussions/1068)?\r\n- **Hooks**: In previous versions of the protocol, this feature could have been implemented via the `onSablierLockupWithdraw` hook. However, since Lockup v1.2.0, we no longer call the hook on the sender when the recipient withdraws. Thus, this is no longer a viable solution.\r\n\r\n## Feedback\r\n\r\nRFC @sablier-labs/everybody\r\n\r\n[^1]: I first thought of _dynamic_, but I then realized that it would be better for there to be no potential confusion with `LockupDynamic`.","createdAt":"2024-10-22T12:58:28Z","labels":[],"number":85,"repository":"sablier-labs/command-center","state":"closed","title":"Airdrops with variable claim amounts (AVCAs)","type":"discussion","updatedAt":"2025-03-14T13:31:38Z","url":"https://github.com/sablier-labs/command-center/discussions/85"},{"author":"IaroslavMazur","body":"## Overview & Rationale\r\n\r\nI suggest integrating _external_ referral links into our dApp, similar to how **MetaMask** has embedded their referral link for **Ledger** into the _Buy Now_ button (it shows up when one tries to connect a hardware wallet to **MetaMask**):\r\n\r\n<img src=\"https://github.com/user-attachments/assets/08dc289d-c221-4c24-9673-6b4873a07ddf\" width=\"300\" height=\"280\">\r\n\r\n## Enhancing User Experience\r\n\r\nThe idea is to offer advertising that enhances the overall QOL of our users by providing value at the right moment, thereby improving both UX and overall satisfaction.\r\n\r\nWe should strive to make the affiliate integrations feel organic & non-intrusive, while, also, communicating valuable/helpful information to our users.\r\n\r\n## Exploring Affiliate Partnerships\r\n\r\n**Ledger** is just an example - if you like this idea, we should look for more projects that offer affiliate rewards - and the products of which our users could benefit from.\r\n\r\nAfter we've got a list of trusted affiliate providers, we can brainstorm which areas of our dApp could incorporate the referral links, while maintaining a seamless, user-focused interface.\r\n\r\n---\r\n\r\nLooking forward to hearing your thoughts!","createdAt":"2025-03-13T01:12:04Z","labels":[],"number":112,"repository":"sablier-labs/command-center","state":"open","title":"Monetisation via timely, value-adding & non-intrusive external affiliate integrations","type":"discussion","updatedAt":"2025-03-13T14:19:42Z","url":"https://github.com/sablier-labs/command-center/discussions/112"},{"author":"sneg55","body":"## Background / Problem Statement:\r\n\r\nCertain clients distributing airdrops via Sablier require that users view and acknowledge specific legal documents prior to claiming. To meet this requirement, the claim flow must be gated by a legal acknowledgment step.\r\n\r\n## Core Requirements:\r\n\r\n1. Document Viewing Capability:\r\n   - Users must be able to open and review the legal document directly within the UI.\r\n   - Document can be rendered inline (modal/popup) or **accessible via link that opens in a new tab. (this probably the easiest solution)**\r\n\r\n2. User Acknowledgment via Checkbox:\r\n   - A checkbox labeled with a statement such as:\r\n     - \"I have read and agree to the legal terms and conditions.\"\r\n   - Checkbox must be unchecked by default.\r\n\r\n3. Claim Button Enablement Logic:\r\n   - The Claim button should remain disabled until:\r\n     - The legal document has been viewed (if required by client), AND\r\n     - The acknowledgment checkbox is checked.\r\n\r\n4. User Confirmation Flow:\r\n   - When the checkbox is checked and the button is clicked:\r\n     - Proceed with the claim flow as normal.\r\n     - Optionally, store/log timestamp or proof of acknowledgment for compliance records (if needed).\r\n\r\n## UX/UI Considerations:\r\n\r\n- Placement of checkbox and legal document link should be visibly adjacent to the claim action.\r\n- If a modal is used for viewing the legal document:\r\n  - Modal must have a close button and proper scroll behavior for long content.\r\n  - Optionally, enforce scroll-to-end before enabling the checkbox (optional per client preference).\r\n","createdAt":"2025-03-12T13:25:10Z","labels":[],"number":111,"repository":"sablier-labs/command-center","state":"open","title":"Legal Checkbox Requirement for Airdrop Claims","type":"discussion","updatedAt":"2025-03-12T17:59:18Z","url":"https://github.com/sablier-labs/command-center/discussions/111"},{"author":"maxdesalle","body":"A page to collect all the feedback, criticism and insults regarding the new recipient-centric revenue model we're introducing.\r\n\r\n@sablier-labs/business\r\n\r\nRelated: https://github.com/sablier-labs/company-discussions/discussions/100","createdAt":"2025-01-29T18:11:31Z","labels":[],"number":103,"repository":"sablier-labs/command-center","state":"open","title":"Negative reactions to the recipient-centric revenue model","type":"discussion","updatedAt":"2025-03-06T20:33:01Z","url":"https://github.com/sablier-labs/command-center/discussions/103"},{"author":"PaulRBerg","body":"A super complicated (but interesting) feature request. I have created this discussion to monitor demand.\r\n\r\nThe idea is to enable cross-chain airdrops whereby the user can claim the airdrop on one of the available chains, and as soon as it is claimed, the airdrop is disabled on the other chains.\r\n\r\ne.g. Airdrop $DROP is available on Ethereum Mainnet, Arbitrum, and Optimism. As soon as Alice claims $DROP on Arbitrum, Ethereum and Optimism are no longer claimable.\r\n\r\n<img width=\"500\" alt=\"SCR-20250110-nues\" src=\"https://github.com/user-attachments/assets/4e50bcac-4c9d-4594-865c-d943ba1bf81e\" />\r\n\r\ncc @sablier-labs/everybody","createdAt":"2025-01-10T13:39:02Z","labels":[],"number":94,"repository":"sablier-labs/command-center","state":"open","title":"Integrate relayer service to enable cross-chain airdrops","type":"discussion","updatedAt":"2025-04-09T18:24:01Z","url":"https://github.com/sablier-labs/command-center/discussions/94"},{"author":"PaulRBerg","body":"## Prospect\r\n\r\nDuring the all-hands meeting in Istanbul, we discussed the prospect of depositing user funds into lending protocols such as Compound and Aave. In this post, I will review the benefits, the downsides, and the implementation options.\r\n\r\nSome back-of-the-napkin estimations of the counterfactual interest we could have earned from Sablier V1.1:\r\n\r\n- Based on the [Etherscan analytics](https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48?a=0xCD18eAa163733Da39c232722cBC4E8940b1D8888#tokenAnalytics), in 2023 we had an average of 3 million USDC TVL\r\n- Assume an average 5% APY over 2023\r\n- Potential revenues: $0.05 * 3m = 150k$\r\n\r\n$150k is not too shabby for just one contract over one year. Assuming a bull market, the advent of [EOES](https://github.com/sablier-labs/company-discussions/discussions/6), and a little bit of luck, I could easily see this figure soar into seven figures.\r\n\r\n## Cons\r\n\r\n1. Additional smart contract risk. Composing two protocols like this would increase the risk of using Sablier.\r\n   - It is worth noting that both Aave and Compound have been hacked.\r\n3. We may lose some users as a result. We would have to add a warning in the UI in the stream creation receipt, smth along the lines of \"Note that your funds may be deposited in a third-party lending protocol\". Alternatively, we could put this caveat in our ToS instead of the stream creation UI (as lending user funds is pretty standard in fintech), but this wouldn't be a deterrent. Users could still infer what's going on with their deposits.\r\n  - It is also possible that some users may prefer to return to V1 or to other competitors that don't \r\n\r\n## Implementation\r\n\r\nI see two implementation approaches:\r\n\r\n1. Bespoke logic in V2 Core\r\n2. Bespoke logic in V2 Periphery and the Subgraphs, accompanied by ERC-20 recovery mechanism[^1] in V2 Core\r\n\r\nWe should disregard the 1st approach right off the bat because it would raise the gas costs for all the users of the protocol and increase the risk of using V2 Core (when this is not necessary).\r\n\r\nHere's what I have in mind:\r\n\r\n1. We implement a new periphery contract analogous to [`Batch`](https://github.com/sablier-labs/v2-periphery/blob/2a426ab99e65590edb25ad8fdf13a314b2b3e94b/src/SablierV2Batch.sol) (or we rename it to something more general-purpose like `Router`)\r\n2. This periphery contract will contain a function that does three things: (i) takes a USDC deposit from users, (ii) wraps it into Aave or Compound tokens, and (iii) creates the stream via the normal flow in V2 Core.\r\n3. In V2 Core, we rely on an ERC-20 recovery mechanism to allow the admin to claim the increasing lending yields.\r\n4. In the Subgraph, we mark the streams created via this periphery contract as special (e.g., we set a `lent` flag to `true`).\r\n5. In the UI, we check if the stream is `lent`. If so, we look up the underlying asset associated with the yield token and display the former instead. For example, we display USDC instead of aUSDC.\r\n\r\nNotes:\r\n\r\n1. This design assumes a dynamically adjusting asset like Aave Tokens or Compound V3 Tokens, i.e., tokens that increase their balance in real time.\r\n2. This will initially be implemented only for certain assets, e.g., USDC and WETH, but we can extend the list over time (since nothing will need to change at the contract level).\r\n\r\n### Withdrawals\r\n\r\nThe only wrinkle in the design above is what to do at withdrawal time. There are a couple of options:\r\n\r\n1. Withdraw the yield token to the user, e.g., aUSDC.\r\n2. Modify V2 Core to handle the claiming from Aave, Compound, and so forth. This should be easy as long as there is a 1-to-1 correspondence between the two assets. Ideally, this would be implemented via a modular plugin system.\r\n3. Withdraw to a relayer that implements the claim logic: take aUSDC from Sablier, give it to Aave, get UDSC from Aave, and give USDC to the user.\r\n\r\n## My Thoughts\r\n\r\nI'm in favor of this proposal; we should consider implementing it in V2.2.\r\n\r\nLending user funds would enable us to generate sustainable revenues while not creating a deterrent[^2][^3]  for business growth. My gut feeling is that most users wouldn't care about their assets being lent - after all, Sablier is providing them with a valuable on-chain service. The recent [600k USDC with a 3-year duration](https://app.sablier.com/stream/LL-1-273/) proves that Sablier saves time and money for on-chain organizations.\r\n\r\nWhat do you think? Cc @sablier-labs/everybody\r\n\r\nFun historical fact: check out my [ERC-2212](https://github.com/ethereum/EIPs/issues/2212) proposal.\r\n\r\n[^1]: https://github.com/sablier-labs/company-discussions/discussions/11\r\n[^2]: https://github.com/sablier-labs/v2-core/discussions/278\r\n[^3]: https://github.com/sablier-labs/company-discussions/discussions/2","createdAt":"2023-12-03T16:47:31Z","labels":[],"number":12,"repository":"sablier-labs/command-center","state":"open","title":"Alternative source of revenues: lending user deposits","type":"discussion","updatedAt":"2025-02-17T20:04:23Z","url":"https://github.com/sablier-labs/command-center/discussions/12"},{"author":"PaulRBerg","body":"## Problems\r\n\r\nI realized that using an immutable fee (which does not rebalance itself using a Chainlink price feed) in the Merkle contracts can lead to two issues:\r\n\r\n> [!IMPORTANT]\r\n>\r\n> I find the first problem especially important because it will bite us in the ass at the worst possible time — when the markets are up and demand for our products grows. Thus, it's a risk that we need to address ASAP.\r\n\r\n### Problem 1: Bull Market Worries\r\n\r\n**In a bull market with a lot of volatility, the immutable fee can lead to prospects avoiding Sablier due to fear of being overcharged.**\r\n\r\nFor example:\r\n\r\n- Chiliz uses CHZ for their EVM chain, a token currently priced at ~$0.056\r\n- Chiliz sets up airdrop with a claim window duration of 3 months\r\n- At the end of month 1, CHZ quadruples in value to $0.224\r\n- Airdrop claimants in month 2 pay 4x more than than the claimants in month 1\r\n\r\nNote that this problem applies to both instant and vested airdrops — it's about the price volatility during the claim window, not during the vesting window (which is separate).\r\n\r\n### Problem 2: Bear Market Blues\r\n\r\nWhen prices go down, we may end up charging significantly less than $1, which would hurt our bottom line.\r\n\r\n## Solutions\r\n\r\nAt the high-level, the solution is:\r\n\r\n1. On the chains where Chainlink is available, integrate it.\r\n2. On the other chains, implement one of the following sub-solutions.\r\n\r\n### Sub-Solution 1: Immutable Fee + Transparent Communication\r\n\r\n1. Keep using a hard-coded default value\r\n2. Acknowledge that the problems exist, and clearly communicate them in our docs + on BD calls.\r\n\r\n### Sub-Solution 2: Disable the Immutable Fee\r\n\r\n1. Disable the onchain fee (having a boolean flag for this in the `MerkleInstant` contract).\r\n2. Redeploy the protocol when Chainlink becomes available\r\n\r\n### Sub-Solution 3: Editable Fee (by Sablier)\r\n\r\nMake it possible to edit the fee.\r\n\r\nWe can still do this in the same contract. There would be an admin address and a boolean in the constructor that specifies whether the admin can edit the fee.\r\n\r\nThis would increase the complexity of the contract, and might trigger some users reading the contract on other chains.\r\n\r\n## Feedback\r\n\r\nI'm torn between the sub-solutions.\r\n\r\ncc @sablier-labs/engineers for feedback","createdAt":"2025-02-07T17:53:56Z","labels":[],"number":106,"repository":"sablier-labs/command-center","state":"closed","title":"Problems with an immutable fee in the Merkle contracts","type":"discussion","updatedAt":"2025-02-11T12:45:15Z","url":"https://github.com/sablier-labs/command-center/discussions/106"},{"author":"smol-ninja","body":"### Problem\r\n\r\nAccording to the [final revenue model](https://github.com/sablier-labs/company-discussions/discussions/100), it has been decided to fix the claim fee at $3, denominated in USD and rather than ETH (or native tokens).\r\n\r\nThis makes the current fee logic in the Airdrops contract unnecessary for the following reasons:\r\n\r\n1. At the contract level, the default fee and the custom fee can only be set in ETH, which is the minimum fee required for recipients to claim. \r\n\r\n2. Since these fees are denominated in ETH, Due to the volatility of ETH price, setting a default fee at the contract level would lead to discrepancies.\r\n    1. If the ETH's price increases, the fee charged to recipients would exceed $3.\r\n    2. If the ETH's price decreases, the Sablier UI can still enforce a $3 fee.\r\n    3. The above two statements imply that the claim fee would be `>= $3`.\r\n\r\n### Solution 1\r\n\r\nDo not set the default fee at the contract level. While this solves the issue, it also means the contract cannot enforce a fee.\r\n\r\n### Solution 2\r\n\r\nIntegrate the Chainlink Oracle in the contract. Since the UI already depends on an oracle to calculate the fee in ETH during claims, the contracts can also use Chainlink data to remain consistent with the UI.\r\n\r\n### Solution 3\r\nRemove the fee logic from the contract entirely, and only keep the `payable` modifier, similar to the implementation in Lockup and Flow.\r\n\r\n### My take\r\n\r\nI am in favour of Solution 2. This will enable us to implement claim fee at the contract level. However, we can start with Solution 3 and over time as the revenue grows, we can switch to Solution 2.\r\n\r\nFor the upcoming release, we should stick to Solution 1. \r\n\r\ncc @sablier-labs/engineers \r\n\r\nPS: @andreivladbrg also realised this problem independently. ","createdAt":"2025-01-29T12:49:23Z","labels":[],"number":102,"repository":"sablier-labs/command-center","state":"closed","title":"Redundancy in the Claim Fee Model of the Contract","type":"discussion","updatedAt":"2025-02-10T20:42:22Z","url":"https://github.com/sablier-labs/command-center/discussions/102"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n_An issue first brought up by @smol-ninja in [this discussion](https://github.com/sablier-labs/company-discussions/discussions/102)._\r\n\r\nWe are not using an oracle for rebalancing the ETH-denominated [`defaultFee`](https://github.com/sablier-labs/airdrops/blob/1c19bd51449a62baadda656b91cd4c04479f1384/src/SablierMerkleFactory.sol#L48) that gets set in the constructor of our `Merkle` contracts when they are deployed by `MerkleFactory`.\r\n\r\nThis leads to two problems:\r\n\r\n1. **Inaccurate fee quotes** — we might say it costs $1, but it might be $0.8 or $1.2.\r\n2. **Maintenance overhead** — having to manually set the `defaultFee` values at the time of deploying new contracts, when making a new chain deployment, there's a lot of volatility, etc.\r\n\r\n> [!NOTE]\r\n>\r\n> I created an entire separate discussion about the 1st problem: [Problems with an immutable fee in the Merkle contracts](https://github.com/sablier-labs/airdrops/discussions/62).\r\n\r\n## Solution\r\n\r\n- On the chains where Chainlink is available, integrate it in each `Merkle` contract\r\n    - The oracle address is immutable, but not in the Factory — it would be editable by the protocol admin\r\n    - The price is dynamically queried at claim time, and the target fee (e.g. $3) is calculated\r\n    - The $3 target fee should be immutable in the Factory\r\n- On the other chains, go with one of the solutions mentioned [here](https://github.com/sablier-labs/company-discussions/discussions/106)\r\n\r\n### Factory vs Merkle\r\n\r\nWhy not make the integration in the Factory?\r\n\r\nBecause as explained [here](https://github.com/sablier-labs/airdrops/discussions/62), the fee should no longer be immutable.\r\n\r\n## Feedback\r\n\r\ncc @sablier-labs/engineers","createdAt":"2025-02-09T18:05:11Z","labels":[],"number":107,"repository":"sablier-labs/command-center","state":"closed","title":"Integrating Chainlink in the Merkle contracts","type":"discussion","updatedAt":"2025-02-10T21:03:17Z","url":"https://github.com/sablier-labs/command-center/discussions/107"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nSenders will want to subsidize the claim fees for their recipients. We have already received several requests for this — even before officially enabling the fees.\r\n\r\nThere are multiple ways to implement this feature, some more difficult than others, and I'd like to go through them in this discussion.\r\n\r\n## Possible Solutions\r\n\r\nPAYG = pay-as-you-go\r\n\r\n### 1. Retroactive PAYG\r\n\r\nPros: easy to implement\r\nCons: requires trust, manual invoicing process\r\n\r\n1. Keep the service free for all recipients associated with a particular sender\r\n2. At the end of each month, calculate how many stream withdrawals and airdrop claims were made that month (cc @maxdesalle)\r\n3. Issue an invoice and send it to the sender\r\n4. If the sender defaults on making the payment, the fee exemptions will be lifted for as long as the invoices remain unpaid\r\n\r\nOptional but nice-to-have:\r\n\r\n- Saved credit card or pre-made ERC-20 approval (for automatic charging)\r\n- Spending cap, after which the service is no longer free\r\n\r\n### 2. Proactive PAYG\r\n\r\nPro: trustless\r\nCon: difficult to implement, manual invoicing process\r\n\r\n1. Ask for an upfront payment from senders based on their estimated volume, e.g., $5000\r\n2. Redo steps 1-3 from the previous solution\r\n3. Based on the results, either refund or issue an updated invoice\r\n\r\n### 3. All-you-can-eat Fixed Subscription\r\n\r\nPro: predictable cash flow\r\nCon: difficult to implement, misses revenues from heavy users\r\n\r\n- Monthly/annual subscription via either a credit card or USDC w/ an ERC-20 approval\r\n    - This requires setting up a billing profile on Stripe or smth like it\r\n2. Integrate the billing system in the UI so that the UI checks if the recipient is associated with a sender who is a paid user\r\n3. Could be integrated as a feature of Sablier Pro (which would contain other premium features)\r\n\r\n### 4. Fixed Subscription with Retroactive PAYG (Hybrid)\r\n\r\nPro: predictable cash flow, upside capture from heavy users\r\nCons: difficult to implement\r\n\r\n- Base tier with fixed monthly/annual fee covering up to X txs\r\n- Additional tiers: Higher limits with better per-claim rates\r\n- PAYG fees for exceeding tier limit\r\n\r\n## Feedback\r\n\r\nMy thoughts:\r\n\r\n- Let's start with solution no. 1 since it's the easiest one to implement.\r\n- With time, we can consider switching to solution no. 4, the hybrid\r\n- I dislike solution no. 2 — it will increase the mental transaction costs for both parties (Sablier and its customer)\r\n- And I also dislike solution no. 3 — we should bill proportionally to usage\r\n\r\ncc @sablier-labs/business\r\n\r\nRelated: [Final revenue model for Q1 2025](https://github.com/sablier-labs/company-discussions/discussions/100)","createdAt":"2025-01-28T17:24:24Z","labels":[],"number":101,"repository":"sablier-labs/command-center","state":"open","title":"Billing models for senders subsidizing fees for recipients","type":"discussion","updatedAt":"2025-02-07T17:14:51Z","url":"https://github.com/sablier-labs/command-center/discussions/101"},{"author":"razgraf","body":"Opening this as a thread for requests to build Sablier on Solana. Feel free to add similar requests or ponder on the pros/cons and potential timeline if interested.","createdAt":"2024-03-27T14:27:13Z","labels":[],"number":45,"repository":"sablier-labs/command-center","state":"closed","title":"Build and deploy Sablier on Solana","type":"discussion","updatedAt":"2025-02-05T14:57:29Z","url":"https://github.com/sablier-labs/command-center/discussions/45"},{"author":"smol-ninja","body":"## Context\r\n\r\nThe broker fees was introduced for third-party integrations, particularly for front-end applications. One of our key integrators, TokenOps, has not incorporated the broker fee into their UI. To our knowledge, no one is actively using this feature. And, there are no plans to implement broker fees within the Sablier UI, now that we are moving towards charging in native tokens.\r\n\r\nAs a result, I think, this feature appears to be either redundant or used by a fraction of low value integrators, if at all.\r\n\r\nSince we are working with smart contracts, we should adhere more strictly to the [YAGNI principle](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it) and remove unused or unnecessary features, such as this one.\r\n\r\n## Recommendation\r\n\r\nRemove the broker fee functionality from Lockup as well as Flow.\r\n\r\n## ~Alternative Solution for Integrators~ (Incorrect)\r\n\r\n~Because all functions are marked with the `payable` modifier, integrators can still include `msg.value` to charge users a fee for their services.~\r\n\r\nRFC @sablier-labs/engineers.","createdAt":"2025-01-21T18:15:51Z","labels":[],"number":97,"repository":"sablier-labs/command-center","state":"closed","title":"Remove Broker fee from the protocols","type":"discussion","updatedAt":"2025-01-28T13:44:54Z","url":"https://github.com/sablier-labs/command-center/discussions/97"},{"author":"PaulRBerg","body":"Potential sources of future sources of revenues:\r\n\r\n**Promising**\r\n\r\n- [Front-end fees](https://github.com/sablier-labs/v2-interfaces/discussions/585)\r\n  - Broker fees for creating streams\r\n  - Claim fees for airstreams\r\n- Protocol fees on withdraw (in both Flow and Lockup)\r\n- SaaS features\r\n  - Basic legal and compliance features\r\n  - Enterprise customer support\r\n  \r\n**Maybe**\r\n\r\n- [Token launcher](https://github.com/sablier-labs/company-discussions/discussions/62)\r\n- [OTC trading app for streams](https://github.com/sablier-labs/company-discussions/discussions/66)\r\n- [NFT liquidity market](https://github.com/sablier-labs/company-discussions/discussions/34)\r\n- [Lending stablecoins](https://github.com/sablier-labs/company-discussions/discussions/12)\r\n- Automating withdrawals on behalf of recipients\r\n- Deployments to custom chains (e.g., LightLink)\r\n- [Blast-like rewards](https://github.com/sablier-labs/v2-core/discussions/802) (I include [Aave rewards](https://github.com/sablier-labs/company-discussions/discussions/11#discussion-5919558) in this category)\r\n- White-label solutions (though this would give off dev shop vibes)\r\n","createdAt":"2024-04-09T16:01:22Z","labels":[],"number":48,"repository":"sablier-labs/command-center","state":"closed","title":"Long list of monetization ideas","type":"discussion","updatedAt":"2025-01-28T14:32:52Z","url":"https://github.com/sablier-labs/command-center/discussions/48"},{"author":"PaulRBerg","body":"## Context\r\n\r\nSome realizations about having a [use-case-centric](https://github.com/sablier-labs/v2-interfaces/discussions/880) product.\r\n\r\n- Whom we charge is the starting point for deciding what revenue models to employ (I didn't realize this when I wrote [Roadmap for 2025](https://www.notion.so/sablier/Roadmap-for-2025-f2e6a1da2cc54a1fa69f4eac26903b3b)).\r\n- Charging either the sender and the recipient (in separate parts of the product) doesn't make sense. We need a consistent approach in all revenue models.\r\n\r\n## Spillover Effect\r\n\r\nBecause we have [decided](https://github.com/sablier-labs/company-discussions/discussions/67) to charge the recipient in flow and introduce a claim fee in Airstreams, we should also charge recipients in Lockup.\r\n\r\nLet's explore what would happen if we did the opposite, i.e., charge senders.\r\n\r\n1. It would create peculiar incentives. **Senders would notice that some parts of the product are free for them.** Why should they bother with creating Lockup streams when they can create an Airstream campaign and let the recipients foot the bill?\r\n2. Depending on the billing model:\r\n    - With annual subscriptions, the UI/UX would be particularly confusing. Flow and Airstreams would be free for senders, but the Vesting tab would not. It'd be odd and inconsistent, right?\r\n    - With pay-per-usage, we would run into the problems of (i) overcharged senders who cancel streams and (ii) [front-running risk](https://github.com/cantinasec/review-sablier/issues/15). Admittedly, these issues apply regardless of whether non-Lockup features are free for senders or not, but if we used them as a rationale for charging recipients in Flow, why shouldn't do the same in Lockup, too?\r\n\r\nIf we required senders to pay for Flow and Airstreams, then it would no longer make sense to charge recipients. And there you go — the spillover effect of whom is charged.\r\n\r\n## Recipient-Centricity\r\n\r\nThe rationale above has led me to the following conclusions:\r\n\r\n- At the protocol level, we should only charge recipients.\r\n- At the UI level as it currently stands, we should again only charge recipients.\r\n- There are, however, some features for which it makes sense to only charge senders. To achieve this while not running afoul of the spillover effect, I suggest creating a new Sablier Pro product.\r\n\r\n## Sablier Pro\r\n\r\n- Gated by either a monthly or annual subscription model.\r\n- [Subsidizing gas fees](https://github.com/sablier-labs/company-discussions/discussions/43)\r\n- Focused on vesting and airdrops. A 'pro' product for payroll is much more difficult to build as it's heavy compliance work.\r\n- Special features, e.g., [address labeling](https://github.com/sablier-labs/v2-interfaces/discussions/986).\r\n- Airstreams with >50k recipients; basically, force senders to foot the bill whilst keeping the service free for recipients.\r\n- Basic legal and compliance support.\r\n- Enterprise support (basically, be more stingy with whom we provide support to on Telegram).\r\n\r\nSide notes:\r\n\r\n- Recipients associated with Sablier Pro users will need to be excluded from paying fees.\r\n- It will be impossible to exclude the same users from protocol fees in Flow, but this is not an issue because Sablier Pro wouldn't cater to payroll users anyway.\r\n\r\n## Related\r\n\r\n- [Notion: Roadmap for 2025](https://www.notion.so/sablier/Roadmap-for-2025-f2e6a1da2cc54a1fa69f4eac26903b3b)\r\n- https://github.com/sablier-labs/company-discussions/discussions/72\r\n- https://github.com/sablier-labs/company-discussions/discussions/48\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/1057\r\n\r\n## Comments\r\n\r\nRFC @sablier-labs/everybody.","createdAt":"2024-09-04T12:12:52Z","labels":[],"number":71,"repository":"sablier-labs/command-center","state":"closed","title":"The spillover effect of whom is charged — whether the sender or the recipient","type":"discussion","updatedAt":"2025-01-27T15:20:56Z","url":"https://github.com/sablier-labs/command-center/discussions/71"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThere have been users who have requested segregated 'segregated' vesting, i.e., using a bespoke vesting contract for their tokens in which no other tokens are deposited.\r\n\r\nI've heard two different rationales:\r\n\r\n1. **Compliance**: mentioned by Swerve, a lost user whom I talked to in 2024. They said that they needed segregation in order to comply with [RIA and QC regulations](https://github.com/sablier-labs/company-discussions/discussions/81) in the US.\r\n2. **Security**: a point raised by the Term Finance team. The logic is that segregated contracts don't create honeypots.\r\n\r\n## Solution\r\n\r\nThe ideal UX would look something like this:\r\n\r\n1. Fork `Lockup` into a contract that supports only one token (potentially by sharing the logic in a new abstract contract)\r\n2. Add a boolean flag in the stream creation form: \"Do you want segregated vesting?\" (potentially hidden underneath an _Advanced_ section so that the 99% of users who don't need this feature are not required to understand what this means)\r\n3. If the user wants segregation, deploy the bespoke contract.\r\n4. In the UI, provide a unified view for the monolith streams and the bespoke contract streams (so, make these bespoke streams behave as if they were part of the same product)\r\n\r\n## Feedback\r\n\r\nI suggest waiting for more user requests before making any move.\r\n\r\n- It's unclear if segregation is required to comply with QC regulations. To me, it seems like a matter of 'substance over form', and yet another case of archaic legislation not being easily applicable to blockchain and smart contracts.\r\n- The security benefits of segregation are debatable. Should a bug be found in Sablier, a savvy attacker could still find all contracts with the same bytecode and exploit them. \r\n- The implementation is non-trivial (both frontend and backend).\r\n\r\ncc @sablier-labs/everybody","createdAt":"2025-01-20T13:20:32Z","labels":[],"number":96,"repository":"sablier-labs/command-center","state":"closed","title":"Segregated vesting contracts","type":"discussion","updatedAt":"2025-01-21T16:21:53Z","url":"https://github.com/sablier-labs/command-center/discussions/96"},{"author":"razgraf","body":"I'm opening this independent discussion because of a user who requested it. They're looking for a possibility of cancellation upon first withdrawal. Their recipients would forfeit future rewards as soon as they claim the first portion of the stream.\r\n\r\n\r\nThe idea was first discussed [here](https://github.com/sablier-labs/v2-periphery/discussions/157#discussioncomment-6604765) in sablier-labs/v2-periphery#157.\r\n\r\n> Context: https://twitter.com/razgraf/status/1686082342819913728\r\n>\r\n> From slack:\r\n>  Imagine projects creating Airstreams with exponential progressions (linear works too, but expo is way nicer). ~We then use the `onStreamWithdrawn` callback/hook to cancel the stream after the first claim.~ The more you stick with the project and use those tokens solely for voting power, the more you get in the end. The earlier rent-seekers exit, the less people you have dumping in the markets.\r\n\r\nWhile the proposed implementation is definitely not possible ([no sender hook](https://github.com/sablier-labs/v2-periphery/discussions/157#discussioncomment-6607927) on withdraw) we should consider alternatives.","createdAt":"2023-12-12T22:09:56Z","labels":[],"number":74,"repository":"sablier-labs/command-center","state":"closed","title":"Cancel on first withdraw (as an Airstream strategy)","type":"discussion","updatedAt":"2025-01-20T11:56:09Z","url":"https://github.com/sablier-labs/command-center/discussions/74"},{"author":"PaulRBerg","body":"## Feature\r\n\r\nMake it possible to (i) split the stream across multiple users and (ii) allow the admin to update the allocation.\r\n\r\n## Context\r\n\r\nWe've gotten the following feature requests multiple times, most recently from Evan Van Ness:\r\n\r\n<img width=\"400\" alt=\"evan-splits-1\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/3a640142-36c8-4293-940b-6dc08182403b\">\r\n\r\nThis is useful for grants, e.g., the Ethereum Foundation uses this.\r\n\r\n## Competition\r\n\r\n[0xSplits](https://splits.org/) is a project that is known for offering this feature.","createdAt":"2024-02-14T16:18:19Z","labels":[],"number":39,"repository":"sablier-labs/command-center","state":"open","title":"Splitter functionality","type":"discussion","updatedAt":"2024-12-24T09:24:30Z","url":"https://github.com/sablier-labs/command-center/discussions/39"},{"author":"razgraf","body":"This discussions complements [[#230](https://github.com/sablier-labs/v2-periphery/discussions/230)](https://github.com/sablier-labs/airdrops/discussions/30). I wanted to post screenshots from users requesting this feature. I figured a private discussion would be better in terms of preserving their privacy (and plans for airdrops).","createdAt":"2024-08-29T13:49:46Z","labels":[],"number":70,"repository":"sablier-labs/command-center","state":"open","title":"User requests for Merkle Lockup with Lockup Dynamic","type":"discussion","updatedAt":"2024-12-23T19:46:43Z","url":"https://github.com/sablier-labs/command-center/discussions/70"},{"author":"PaulRBerg","body":"## Context\r\n\r\nIf you don't know what Total Obtainable Value (TOV) is, check out my [Twitter post](https://x.com/PaulRBerg/status/1715436588438520204).\r\n\r\n\r\n## Idea\r\n\r\n@sneg55 shared this idea on Slack — to build an internal analytics tool for TOV.\r\n\r\nI think it's a great idea. All too often when discussing with BD prospects, we get asked what our TVL/ metrics are. In response, we share a link to DeFiLlama, explaining that the vesting toggle has to be enabled. Many users end up ignoring the toggle or raising their eyebrows in suspicion about our original claim (for good reason, IMO).\r\n\r\nHere's an excerpt from a recent chat with CoinMarketCap:\r\n\r\n<img width=\"400\" alt=\"SCR-20241025-ruol\" src=\"https://github.com/user-attachments/assets/4261998f-b315-486e-bada-c1334da3cac1\">\r\n\r\nThe TOV analytics tool would provide a transparent overview of the value secured by Sablier.\r\n\r\n## Prioritization\r\n\r\nOur roadmap for the rest of the year and Q1 2025 is already full, so this is not something we can squeeze in in the near future — certainly not until Q2 2025.\r\n\r\nBut I think it's an important tool that could help differentiate us from our competitors and provide some real, quantifiable data on Sablier's usage.\r\n\r\n## Feedback\r\n\r\nRFC @sablier-labs/everybody — when do you think we should implement this?","createdAt":"2024-10-25T19:35:53Z","labels":[],"number":87,"repository":"sablier-labs/command-center","state":"open","title":"Internal analytics tool for TOV","type":"discussion","updatedAt":"2024-12-10T17:17:38Z","url":"https://github.com/sablier-labs/command-center/discussions/87"},{"author":"PaulRBerg","body":"[We're merging the three Lockup contracts into one](https://github.com/sablier-labs/v2-core/discussions/1064). How about we name it `SablierVesting` instead?\r\n\r\nHere's the corroboration to my [rationale](https://chatgpt.com/share/672f616e-a4a4-800e-840f-0c89bd018f67):\r\n\r\n<img width=\"350\" alt=\"SCR-20241109-nntw\" src=\"https://github.com/user-attachments/assets/46b3aa24-210a-4dad-9956-7c745f0cd56a\">\r\n\r\nOne disadvantage is the backward-compatibility issues — references to `Lockup`, the historical IDs of the streams etc.\r\n\r\ncc @sablier-labs/engineers for feedback\r\n\r\nRelevant for https://github.com/sablier-labs/v2-core/pull/1069.\r\n","createdAt":"2024-11-09T13:20:08Z","labels":[],"number":91,"repository":"sablier-labs/command-center","state":"closed","title":"Rename \"SablierLockup\" to \"SablierVesting\"","type":"discussion","updatedAt":"2024-11-15T10:39:51Z","url":"https://github.com/sablier-labs/command-center/discussions/91"},{"author":"PaulRBerg","body":"## Context\r\n\r\nI've beaten this point to death in the discussion about [use-case centric navigation](https://github.com/sablier-labs/v2-interfaces/discussions/880):\r\n\r\n**There's significant overlap between vested airdrops and one-time airdrops.**\r\n\r\nPossible scenarios:\r\n\r\n- A user might be interested in one-time airdrops and stumble upon Sablier (because we have good marketing, SEO, word of mouth, etc.).\r\n- A user might want to vest their airdrop with Sablier but then change their mind. Brand recognition makes them want to stick with Sablier.\r\n\r\n## Proposal\r\n\r\nAccommodate our product in light of what the market wants and either:\r\n\r\n1. Retrofit the existing `MerkleLockup` implementations for one-time drops by setting the cliff time to 1 second (UI-only change).\r\n  - The catch is that there would be two claims: one for creating the 1-second stream, and another for withdrawing from the stream. Bad UX.\r\n2. Write a bespoke Merkle implementation for one-time drops.\r\n3. Build a UI on top of [GasLite Drop](https://drop.gaslite.org/). \r\n\r\n## RFC\r\n\r\ncc @sablier-labs/everybody","createdAt":"2024-05-03T13:53:56Z","labels":[],"number":55,"repository":"sablier-labs/command-center","state":"closed","title":"One-time airdrops","type":"discussion","updatedAt":"2024-11-13T17:11:08Z","url":"https://github.com/sablier-labs/command-center/discussions/55"},{"author":"razgraf","body":"We don't yet have a design for Flow NFTs since we [decided](https://github.com/sablier-labs/flow/issues/284) to use the plain logo as a placeholder. Now that we're closer to the launch, we need to discuss what to do with the NFT visual component.\r\n\r\nShould we do it now or should we wait?\r\n\r\n---\r\n\r\nPaul has expressed his view regarding de-prioritizing this until we see consistent traction for the NFT.\r\n\r\nI am o the opinion that the NFT design should be fairly quick to deliver (max 1 week of back and forth) since we can build upon the design and logic we already have from Lockup (+ ERC721 is already supported in Flow). It would look good, make for a nice series of marketing posts, as a feature to promote, and be useful in other materials such as the [OG image previews](https://app.sablier.com/api/meta/stream/by-id?id=LL-1-273).\r\n\r\nHowever, if we decide to postpone, what else can we display on the right side of the Flow OG image that makes sense? \r\n\r\nWould be interested to hear from Paul and @sablier-labs/everybody so we can move this into or out of our deliverables for December.","createdAt":"2024-11-05T07:27:22Z","labels":[],"number":89,"repository":"sablier-labs/command-center","state":"open","title":"Design for Flow NFTs","type":"discussion","updatedAt":"2024-11-05T19:12:43Z","url":"https://github.com/sablier-labs/command-center/discussions/89"},{"author":"PaulRBerg","body":"CoinMarketCap tracks vesting schedules via this page: [Token Unlock And Vesting Schedules](https://coinmarketcap.com/token-unlocks/).\r\n\r\nProjects interested in getting their vesting plan highlighted are required to fill out [this spreadsheet](https://docs.google.com/spreadsheets/d/1ON2o9fZtdj6aa_uaT7ALtGx1VxFnIDUi8-uS-fWji0o/edit?gid=609936952#gid=609936952).\r\n\r\nThe idea is, what if we created an API or a simple UI tool that generated a dummy Annex M spreadsheet filled out with Sablier user data? The only missing data would be the \"name\" column — the rest can be inferred from onchain data.\r\n\r\nThe benefits would be:\r\n\r\n1. Simply the submission process for Sablier users who would like to get listed on CoinMarketCap.\r\n2. Ultimately, encourage folks to use Sablier (by virtue of there being more Sablier integrations). This might create a positive feedback loop where CoinMarketCap itself ends up recommending Sablier.\r\n\r\nFor more context, see the screenshots below, as well as the rest of the conversation in the Telegram group.\r\n\r\nThis is low-priority given the other things on our roadmap, but it's a cool feature that could differentiate us from the competition.\r\n\r\nAlso, kudos to @sneg55 for obtaining this deal.\r\n\r\n<img width=\"350\" alt=\"SCR-20241023-oycs\" src=\"https://github.com/user-attachments/assets/8dce2301-cd18-4b3f-9094-945d1a2db457\">\r\n<img width=\"350\" alt=\"SCR-20241023-oydp\" src=\"https://github.com/user-attachments/assets/cfccb6dd-9367-4309-88c9-c51121559f0e\">\r\n<img width=\"350\" alt=\"SCR-20241023-oyfp\" src=\"https://github.com/user-attachments/assets/86d04f86-a7af-4c87-8c63-f721aac68ad7\">\r\n","createdAt":"2024-10-23T14:20:06Z","labels":[],"number":86,"repository":"sablier-labs/command-center","state":"open","title":"Automatically generating a spreadsheet for vesting tracking on CoinMarketCap","type":"discussion","updatedAt":"2024-10-23T16:01:07Z","url":"https://github.com/sablier-labs/command-center/discussions/86"},{"author":"maxdesalle","body":"**TL;DR:** the original plan for v3 was incredibly ambitious (= attempting to go to Mars), but a simple rollup would already be an amazing feat and very useful (= going to the Moon).\r\n\r\n## A Simple Rollup Is Fundamentally Different From V3\r\n\r\nWe decided to abandon the work on v3 for two simple reasons: technical complexity and lack of interest from potential integrators we interviewed regarding a connected graph of streams.\r\n\r\nThose arguments don't rule out the idea of a simple rollup, one without (at first, maybe eventually we will be able to figure this problem out!) a connected graph of streams, reducing the technical complexity very significantly. And we know integrators have already a clear interest in regular streams, reality proved that.\r\n\r\n**Conclusion:** [a simple rollup has most of the upsides of v3 without any of the downsides](https://github.com/user-attachments/assets/d2857db0-5b69-4267-a92c-0ca37521d68f).\r\n\r\n## Why the Multi-VM Strategy Is the Wrong Path\r\n\r\nThere are four major downsides to the multi-VM strategy:\r\n\r\n1. **It's very unscalable**, as it requires us to have one or multiple dedicated smart contract engineer(s) for every VM we are trying to build on. On the product side, it also requires extensive work to work with these custom VMs who use different wallet frameworks, transaction flows, etc.\r\n\r\n2. **It makes our user interface very complex**, as we now have to support different chains, with different VMs, different wallets, different transaction flows, etc. @razgraf and @gavriliumircea are true magicians, but even with their incredible work, the end user experience would probably still take a hit.\r\n\r\n3. **It's very inflexible:** we have absolutely no control over the stack we are building on, and have to abide by the design decisions of the engineering teams building those VMs. If they make bad decisions, we have to pay the costs. We have zero control.\r\n\r\n4. **It's like trying to build an app for every operating system**, having to maintain different codebases in different programming languages, and having to comply with every app store, when you could build an app (chain) that magically works with every operating system and app store.\r\n\r\n**Conclusion:** [multi-vm is a recipe for headaches](https://github.com/user-attachments/assets/44726dc4-f75b-4c3a-b7d9-f315695d4371).\r\n\r\n## Why a Simple Rollup Is Absolutely Amazing and Will Save the World\r\n\r\nBuilding a \"simple\" rollup has a ton of advantages:\r\n\r\n1. **Very scalable:** we build one chain, work with people like [Lito Coen](https://x.com/litocoen) to abstract the chain and facilitate the ease of access on general-purpose chains. Our entire team can focus on building one product (the chain), as opposed to having to build and maintain many different codebases and deployments.\r\n\r\n2. **Very flexible:** we can adapt the chain to our specific needs, continue the original research of v3 if we want to, and have full control over the end user experience given we control the whole stack.\r\n\r\n3. **We own the whole stack:** this is a regular meme of mine, controlling the stack is very powerful and is what inevitably any successful company tries to do. Google went from a search engine to a browser to an operating system to phones and computers. Facebook and Amazon both unsuccessfully tried to launch a smartphone. Facebook is now trying to capture AR/VR, the next hardware market.\r\n\r\n5. **Native and easy pricing:** as opposed to having to explain to users we charge x% on every stream created, or that we charge a $1 on every airstream claim, we can simply tell them the only fees are the gas fees on the network, like on a regular chain, and that our product itself is entirely free to use. On our end, we make money with the sequencer fees, which the stream creators would pay anyway if they were using another rollup. It's **THE** best pricing.\r\n\r\n**Conclusion:** [a simple rollup >>>>>>> multi-vm](https://github.com/user-attachments/assets/186a1c80-27f3-426a-9b05-2356ab57762f).\r\n\r\n## Design Mindset for a Simple Rollup\r\n\r\n**🚨 DON'T SKIP THIS PART, IT'S THE MOST IMPORTANT ONE 🚨**\r\n\r\n**First, a very important mindset we should adopt:** end users using our interface shouldn't know they are using a separate rollup. For them, it should feel like they are using a regular dApp.\r\n\r\nThey should feel confused when reading our documentation when learning that it's actually a chain in the backend. We have the advantage of having investors like [Lito Coen](https://x.com/litocoen), we should use these connections at our advantage.\r\n\r\nI initially trashed the multi-vm product experience, but we will still require supporting different wallet frameworks and custom VMs in our user interface, to handle deposits to the chain (when a user creates a stream), and withdrawals from the chain (when a recipient withdraws from a stream).\r\n\r\nOnce those deposits are made, we could just do confirmations via our interface (without even interacting with the wallets) sort of like how dYdX works, we could maybe even support in the long run sign-in via email or phone number and create a wallet in the backend for users, everything is in our control after all.\r\n\r\n**The point here is that we shouldn't, in my opinion, play the card of a regular general-purpose rollup which is to do a ton of business development to try to build an ecosystem etc. there are already 50 different rollups doing that. We should play the card of dYdX, which is to build a chain/rollup to make the end user experience even better and have full control over it.**\r\n\r\nThe Sablier rollup wouldn't be a general-purpose one in terms of optics, and that's perfectly fine. If others want to build on the chain, we will gladly help them and support them, but our main focus, like today, is our core product.\r\n\r\n**Conclusion:** [a simple rollup enables an incredible experience](https://github.com/user-attachments/assets/53a90052-341b-493a-83d0-0c16b42350f7).\r\n\r\n## Conclusion\r\n\r\nIt's actually based to [be against the multi-vm strategy](https://github.com/user-attachments/assets/89ba5348-4818-4877-af91-219cc3398e9b).\r\n\r\n---\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-07-17T09:36:48Z","labels":[],"number":63,"repository":"sablier-labs/command-center","state":"closed","title":"The Moon Is Just Fine: The Case for a Simple Sablier Rollup","type":"discussion","updatedAt":"2024-10-10T17:23:43Z","url":"https://github.com/sablier-labs/command-center/discussions/63"},{"author":"PaulRBerg","body":"_This discussion originated in the [SabVM](https://github.com/sablier-labs/sabvm) repository, but it was moved here for privacy reasons._\r\n\r\n## Context\r\n\r\n[UCG](https://github.com/sablier-labs/sabvm/discussions/57) is a PITA.\r\n\r\n## TOGA\r\n\r\nTOGA = Transparent OnGoing Auction. This is how Superfluid ensures solvency in their SuperTokens.\r\n\r\nThey require so-called 'Patricians' to stake some amount of the underlying token, e.g. USDC, in exchange for having the right to be the first to liquidate insolvent Superfluid users.\r\n\r\nI refuse to build a system that takes fees from end users, so we won't do that. But what if we require SabVM nodes to stake a small amount for each streamable Token?\r\n\r\nThe new VM design would be something like this:\r\n\r\n- Balances can go negative\r\n- SabVM nodes stake streamable tokens that act as backstops in case of any insolvency events\r\n- Negative balances are replenished from the nodes' stakes\r\n    - Big question: what happens if the deficit is larger than the stakes? IDK\r\n- Nodes continue to monitor streams and perform subgraph updates as always\r\n\r\nMaybe we could incentivize nodes with $SAB inflation rewards in exchange for putting this collateral at risk? As in, stakers receive more $SAB than the rest of the network.\r\n\r\n## Feedback\r\n\r\nRFC @sablier-labs/sabvm\r\n\r\n## References\r\n\r\n- https://ethereum.stackexchange.com/q/84226/24693\r\n- https://docs.superfluid.finance/docs/protocol/advanced-topics/solvency/liquidations-and-toga\r\n- https://toga.superfluid.finance/\r\n- https://console.superfluid.finance/","createdAt":"2024-05-14T19:59:21Z","labels":["sabvm"],"number":76,"repository":"sablier-labs/command-center","state":"closed","title":"SabVM: TOGA as a last resort with $SAB inflation rewards","type":"discussion","updatedAt":"2025-04-09T18:25:06Z","url":"https://github.com/sablier-labs/command-center/discussions/76"},{"author":"IaroslavMazur","body":"_This discussion originated in the [SabVM](https://github.com/sablier-labs/sabvm) repository, but it was moved here for privacy reasons._\r\n\r\nWith the creation of a new VM - and, especially, a new \"MNTs VM\" - we're facing a multilemma in terms of the token we should/want to accept as payment for the gas on which SabVM will run.\r\n\r\nThe options are as follows (in the increasing level of their boldness):\r\n- Wrapped Ether\r\n- SabVM custom coin (possible ticker options: `SAB`, `SABL`) (subjective side note: ⌛ as the coin icon would look sick af)\r\n- Any of the Native Tokens, left at the tx signer's discretion at the moment of tx creation.\r\n\r\nWrapped Ether would, likely, be the easiest to sell to the masses.\r\n\r\n`SAB` would be the most profitable for Sablier, but would \r\n- cause a more complicated on-ramp experience for the potential users (due to the necessity of buying `SAB` somewhere else before bridging it to and using it at SabVM) and\r\n- expose the users to the price fluctuations of `SAB`.\r\n\r\n\"Any of the Native Tokens\" would be most flexible and user-friendly in the long run, but would be the most difficult to implement in the background (e.g. we'd need to be able to determine the \"correct\" price of the Native Token chosen by the user, in order to ultimately bring it - via a swap - to the same inner-token baseline that we price the gas operations in).\r\n\r\n@sablier-labs/everybody, curious about your opinions","createdAt":"2023-11-26T18:21:12Z","labels":["sabvm"],"number":78,"repository":"sablier-labs/command-center","state":"closed","title":"SabVM: What token to use for gas payments?","type":"discussion","updatedAt":"2025-04-09T18:25:09Z","url":"https://github.com/sablier-labs/command-center/discussions/78"},{"author":"IaroslavMazur","body":"_This discussion originated in the [SabVM](https://github.com/sablier-labs/sabvm) repository, but it was moved here for privacy reasons._\r\n\r\nThis is a discussion spinning off sablier-labs/sabvm#79 \r\n\r\nFor context, here's what @PaulRBerg and I had to say regarding the matter:\r\n\r\n@IaroslavMazur:\r\n>I think that we should filter the bad actors out before they get to mint their useless/spammy Native Tokens.\r\n\r\n>Another argument for this, aside from keeping the UCG under control, is that it'd be unreasonable for our users to expect us to pay the price (mostly, in terms of maintaining the infrastructure) of supporting any the Native Token anyone might want to create on SabVM.\r\n\r\n>e.g. what if a bad actor creates 1 million junk Native Tokens which will never be used?\r\nIf we allow their creation, we'll still have to:\r\n\r\n>\"remember\" them (keep in mind that we store the IDs of the Native Tokens as a Vec<U256> in the background),\r\nsacrificing the efficiency of the whole system anytime the respective Vec is being accessed (e.g. it's way less efficient to check whether an token id is a part of the collection when there are a million items inside, than when there are just a couple hundred/thousand).\r\nAnother attack vector (potentially, building on top of the one right above) is to:\r\n\r\n>create a Native Token and\r\ninstead of not transferring it, at all, or transfering it to some dummy addresses, transfer it, instead to the most active addresses, \"polluting\" their Balances (stored as a HashMap<U256, U256>), such that the interogation of any other, legit token balance of that account becomes less efficient.\r\n\r\n> keep in mind that once we've accepted a Native Token, there's no going back, as even if we remove its id from the list of supported Token Ids, it's not like we could reasonably remove it from the system completely, as there would still be account balances of that Token in the Balances/HashMap<U256, U256> fields of all the Token holders.\r\n\r\n>At this point, I, unfortunately, don't have a concrete proposal for how to achieve the benefits of decentralizing the Native Tokens minting, w/o also suffering the cons of doing that. Ideally, we would set up some sort of a criteria which would, at least, scare away the bad actors.\r\n\r\n>As an extreme (?) example: we could charge, say, $100-1,000 for each Native Token minted on SabVM. This should be way more than enough to justify the cost of supporting the Token in the background for, like, several years into the future.\r\n\r\n>Maybe, we could even introduce a yearly subscription for supporting the Native Tokens💡\r\n\r\n@PaulRBerg:\r\n>If a user creates a junk NT that will never be used, that's OK. This is 100% equivalent to creating junk ERC20 on Ethereum, and it's related to the good old problem of state size growth. Check out the research done by the Ethereum folks on [state expiry](https://ethereum.org/en/roadmap/statelessness/), as well as this [post](https://forum.fuel.network/t/does-fuel-have-any-plans-for-state-rent/3030) I made in the Fuel forum.\r\n>Again, for the avoidance of doubt: state size growth is NOT the same problem as UCG (which is about the streaming graph).\r\n>If we charge for MNTs, nobody will use them. However, we could consider charging [state rent](https://solana.com/docs/intro/rent) at some point, but this is a monster topic and it deserves its own separate discussion.\r\n> It is impossible to ascertain who is and who isn't a bad actor. Governments have set up three-letter agencies to cope with this problem.\r\n\r\n@IaroslavMazur:\r\n>Unless we charge some exorbitant fees, people/projects willing to tap into our infrastructure of transferrable and streamable MNTs will be more than happy to pay the reasonable price. As it happens with any tool/service that is \"worth the price you pay\".\r\n\r\n>The main motivation here is to fight off a good chunk of the bad actors/spammers, and the idea is based on the [Hashcash](https://en.wikipedia.org/wiki/Hashcash#:~:text=Hashcash%20is%20a%20cryptographic%20hash,proof%20can%20be%20verified%20efficiently.) system which Bitcoin has originally been inspired by.\r\n\r\n>Similar to how the PoW/PoS systems don't make assumptions about who's good and who's bad, but, instead, force everyone to behave (by wasting their resources if they don't), we could come up with a system that makes creating NTs economically unreasonable (i.e. a loss).\r\n\r\n>Charging an amount of SAB that is high enough to get rid of the low-level, dishonest actors, but low enough to remain appealing to the legit ones is one idea for such a system.\r\n\r\n@PaulRBerg :\r\n> No, they can't cause a lot of trouble just by creating NTs (as per the explanation given in the previous comment, that increasing state size is a cost we have to bear as a blockchain).\r\n> Charging a \"reasonable price\" in a blockchain environment is easier said than done because state rent is non-trivial.\r\n> I will concede that I was a bit blunt when I said that nobody will use NTs if we start charging for them. That's an open question\r\n\r\n@IaroslavMazur:\r\nThe attack vectors I've described above don't increase just the state size, but, also, the time that's required to process new txs. Therefore, this is a potential contributor to the UCG.\r\n\r\nJust to make sure my point is clear (apparently, I haven't properly ended my idea previously), I meant to say \"we could come up with a system that makes creating **ill-intentioned/spam** NTs economically unreasonable (i.e. a loss) **for the creator**.\"\r\n\r\nCharging something for creating NTs is one way of doing this: as any spam is only reasonable/profitable if it can be distributed extremely cheap/for free (the thing we'd eliminate).\r\n\r\n@PaulRBerg:\r\n>A one-time fee? isn't that simply setting a high gas cost for the MINT opcode?\r\n>State rent? This is very, very, very difficult and should be outside the scope of Genesis\r\n\r\n@IaroslavMazur:\r\nA one-time fee, in `SAB`, could be a solution - at least, temporary (until the state rent becomes feasible). And no, it's not the same as a high gas cost for `MINT`, because:\r\n1. the `SAB` fee could be changed dynamically, w/o requiring a hard fork (as changing the gas cost of the `MINT` opcode would)\r\n2. the `SAB` fee would be sent to the Sablier Treasury address - and not the block validator\r\n3. the `SAB` fee would positively impact the `SAB` price\r\n\r\n@sablier-labs/sabvm ","createdAt":"2024-05-07T15:09:01Z","labels":[],"number":77,"repository":"sablier-labs/command-center","state":"closed","title":"Should anyone be allowed to create NTs (post-Genesis)?","type":"discussion","updatedAt":"2024-10-04T10:22:42Z","url":"https://github.com/sablier-labs/command-center/discussions/77"},{"author":"sneg55","body":"Ava Labs has initiated a usage-based grants program with a budget of $40 million. They are open to paying a custom implementation fee (not based on a percentage of the stream) for the following crucial features for their program:\r\n\r\n- They want to distribute tokens based on p-chain usage while the distributed token resides on the c-chain.\r\n- They are willing to provide an API for p-chain data.\r\n- They need some form of KYC/KYB implemented. \r\n- They mentioned that they want to avoid manual tasks at maximum. \r\n- Target ETA for implementation ~2.5-3months. \r\n\r\nYou can find more information at https://www.coindesk.com/tech/2024/09/26/avalanche-unveils-40m-grant-program-ahead-of-avalanche9000-upgrade/.\r\n","createdAt":"2024-10-03T19:16:24Z","labels":[],"number":79,"repository":"sablier-labs/command-center","state":"closed","title":"Ava Labs custom integration for $40m grant program","type":"discussion","updatedAt":"2024-10-04T10:12:56Z","url":"https://github.com/sablier-labs/command-center/discussions/79"},{"author":"PaulRBerg","body":"A recurring grievance within the PondCoin community is the expensive gas fees associated with claiming airstreams. This is due to their airstreams having been created on Ethereum Mainnet, but even so, there's a grain of valid product feedback behind their requests.\r\n\r\nIt would play to our advantage to subsidize the gas fee for claiming airstreams:\r\n\r\n- Increasing the number of users\r\n- UX improvement for all users but especially for empty accounts (0 ETH)\r\n  - Note that the recipient account can remain empty even post-claiming, since [withdrawals are public](https://github.com/sablier-labs/v2-core/issues/731) in V2.2\r\n\r\nObviously, there are some caveats:\r\n\r\n- This would work only on L2s with non-volatile gas fee markets AND with private arrangements with a cap on the dollar value of the subsidy\r\n  - EIP-4844 FTW\r\n- The subsidy could be either supported by us (on extremely cheap chains) or paid by airstream creators upfront","createdAt":"2024-03-13T15:55:51Z","labels":[],"number":43,"repository":"sablier-labs/command-center","state":"open","title":"Subsidizing the gas fee for claiming airstreams","type":"discussion","updatedAt":"2024-09-10T13:34:20Z","url":"https://github.com/sablier-labs/command-center/discussions/43"},{"author":"gavriliumircea","body":"While discussing the subgraph architecture for the new Flow contracts, @razgraf and I encountered a potential issue with the terminology we are using. Up until now, the term **stream** has been used to refer to the base entity in the Lockup contracts. However, for Flow, it appears we plan to continue using the term **stream**, even though a lockup stream is fundamentally different from a Flow stream. In my opinion, this could lead to confusion regarding the definition of stream. Therefore, I propose that we use the term **flow** instead of **stream** for our new product.\r\n\r\nOne important point to mention is that, for backward compatibility, the lockup entity at the subgraph level must retain the name 'stream,' so a distinction like 'LockupStream' and 'FlowStream' is not feasible.\r\n\r\n@sablier-labs/everybody I am curios what is your take on this. ","createdAt":"2024-08-29T13:01:25Z","labels":[],"number":69,"repository":"sablier-labs/command-center","state":"closed","title":"Using the \"stream\" terminology in the context of Sablier Flow","type":"discussion","updatedAt":"2024-09-06T12:33:04Z","url":"https://github.com/sablier-labs/command-center/discussions/69"},{"author":"PaulRBerg","body":"TBD how we can improve this, just sharing this user's feedback.\r\n\r\n<img width=\"400\" alt=\"SCR-20240729-ovlx\" src=\"https://github.com/user-attachments/assets/ee7ba9ab-04b9-4650-acde-27fc6638bfdb\">\r\n\r\n<img width=\"400\" alt=\"SCR-20240729-ovmk\" src=\"https://github.com/user-attachments/assets/8bd3065b-6c08-4ac9-8afb-de879d5d775b\">\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/02233145-9ee8-411d-901f-c9a8afda7eff\"/>\r\n","createdAt":"2024-07-29T13:53:51Z","labels":[],"number":64,"repository":"sablier-labs/command-center","state":"closed","title":"Make Sablier more accounting-friendly","type":"discussion","updatedAt":"2024-09-06T12:05:16Z","url":"https://github.com/sablier-labs/command-center/discussions/64"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe have received this feature request from [Wonderland](https://defi.sucks/), with whom we've recently spoken on Telegram. I have attached a ZIP file with the entire conversation.\r\n\r\n## Idea\r\n\r\nThe idea is fairly strange. As I understand it, what they want is to have two distribution curves instead of one:\r\n\r\n- Streaming curve, meaning what **cannot be recovered** by the sender if he cancels the stream\r\n- Unlock curve, meaning what **can be withdrawn** by the recipient\r\n\r\nThey couldn't use Sablier because, in all of our releases, the streaming and the unlock curve are one and the same thing. I told them they may have to write custom code because (AFAIK) no protocol supports this mechanism.\r\n\r\n## Example\r\n\r\nIn this example, if the sender were to cancel after 6 months, the recipient would _eventually_ be able to withdraw the amount vested during those 6 months. But the ability to withdraw would be enabled only after 1 year.\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/130ab16b-e14c-4670-8cbc-b3b8c2ca2080\"/>\r\n\r\n## Cost/Benefit Analysis\r\n\r\nThis is a fringe use case. It is the first time in my life that I ever hear about it, not just in the context of web3, but in all contexts.\r\n\r\nIt is so fringe that I don't even find it worth contemplating how onerous the development cost would be.\r\n\r\nI suggest monitoring user demand and following up here only if we bump into another user who wants a similar distribution model.\r\n\r\n---\r\n\r\n[Wonderland Chat (Dec 2023).zip](https://github.com/sablier-labs/company-discussions/files/13801239/Wonderland.Chat.Dec.2023.zip)","createdAt":"2023-12-31T13:30:03Z","labels":[],"number":22,"repository":"sablier-labs/command-center","state":"closed","title":"Strange vesting design: separation of the streaming curve from the unlock curve","type":"discussion","updatedAt":"2024-09-05T15:40:47Z","url":"https://github.com/sablier-labs/command-center/discussions/22"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe've received this interesting feature request from Micah Zoltu:\r\n\r\n<img width=\"400\" alt=\"micah-1\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/96e705d8-1453-4df5-86c3-b53529a83858\">\r\n<img width=\"400\" alt=\"micah-2\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/3db44412-e710-4f7e-9853-89d95aea8c3c\">\r\n\r\n## Takeaways\r\n\r\n- I agree with Micah that this is a critically important UI functionality - we have to integrate with an app like Request OR build this app ourselves\r\n- We should consider getting Micah as an advisor, giving him shares in Sablier Labs (cc @razgraf)\r\n  - My only worry is that he may pester us into disabling upgradeability for the rollup early-on\r\n\r\n## Related\r\n\r\n- https://github.com/sablier-labs/sabvm/discussions/59\r\n- https://twitter.com/PaulRBerg/status/1728009864759119961","createdAt":"2024-01-02T13:08:09Z","labels":[],"number":26,"repository":"sablier-labs/command-center","state":"closed","title":"UI that bundles pay-per-time-unit and pay-per-content-unit invoicing","type":"discussion","updatedAt":"2024-09-05T14:53:47Z","url":"https://github.com/sablier-labs/command-center/discussions/26"},{"author":"smol-ninja","body":"## Context\r\n\r\nRusty has raised concerns about the complexity and intuitiveness of our current naming conventions, particularly those prefixed with `SablierV2`. For example, he questioned the difference between `SablierV2Lockup`, `SablierV2LockupDynamic`, `SablierV2LockupLinear`, `SablierV2LockupTranched`, `SablierV2MerkleLL`, `SablierV2MerkleLT` and `SablierV2MerkleLockup`_?\r\n\r\nHe shared three main issues:\r\n1. The need for shorter names for contracts to use in the report.\r\n2. The contract names are less intuitive to understand their objective.\r\n3. Renaming `stream` to `lockup` though it might reflect a Status quo bias and can grow over time.\r\n\r\n### My views\r\n\r\nWhile I think point 3 can grow over time given his previous audit experience and familiarity with the `stream` keyword, I agree with him that the contract names could be confusing and less intuitive for external contributors. Prefixing names with `SablierV2` makes them longer and using `Lockup` in multiple names makes them less intuitive. \r\n\r\n### Relevant discussions from the past\r\n- https://github.com/sablier-labs/v2-periphery/discussions/255\r\n- https://github.com/sablier-labs/v2-periphery/discussions/222 (not a duplicate of above)\r\n- https://github.com/sablier-labs/v2-core/discussions/232\r\n\r\n### Screenshots\r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-04-28 at 11 19 21\" src=\"https://github.com/sablier-labs/v2-periphery/assets/6676622/d3fe3bc1-d0f8-4b41-a066-6f091d7b03f3\">\r\n<img width=\"600\" alt=\"Screenshot 2024-04-28 at 11 18 39\" src=\"https://github.com/sablier-labs/v2-periphery/assets/6676622/c682b138-c6c9-46ca-9c48-fe21e7fae81b\">\r\n<img width=\"600\" alt=\"Screenshot 2024-04-28 at 11 18 27\" src=\"https://github.com/sablier-labs/v2-periphery/assets/6676622/ac824ad2-d7cc-48d8-b200-1e65c38d3836\">","createdAt":"2024-04-28T10:48:22Z","labels":[],"number":51,"repository":"sablier-labs/command-center","state":"closed","title":"Rusty's feedback on the naming convention of contracts","type":"discussion","updatedAt":"2024-09-04T20:13:34Z","url":"https://github.com/sablier-labs/command-center/discussions/51"},{"author":"IaroslavMazur","body":"Besides \"compacting\" the EVM `storage` variables (say, when declaring a struct in Solidity) simply by their byte size (i.e. declaring them in such a way/order that as few 32-byte `storage` slots as possible are used), it also makes sense (for some extra gas savings) to have the variables that are more likely to be used together in the same `storage` slot.\r\n\r\nIn this case, less gas will have to be paid for the `SLOAD`s of the respective `storage` variables, because there will, actually, be fewer `SLOAD`s performed.\r\n\r\nSo, when laying out the `storage` memory inside an EVM Smart Contract, a good strategy would be to:\r\n1. compact the `storage` variables, based on their size and, then,\r\n2. maximize the relative \"encapsulation\"/intra-relation of such compacted \"groups\" (e.g. if you have 2 `storage` slots occupied by an `address` and a `bool` each, make sure that, say, the `address` variable of the 1st slot is more likely to be accessed with the `bool` variable of the same slot - and not the `bool` variable from the other one)","createdAt":"2024-03-16T10:16:42Z","labels":[],"number":44,"repository":"sablier-labs/command-center","state":"closed","title":"Strategy for laying out `storage` variables inside Smart Contracts","type":"discussion","updatedAt":"2024-09-04T17:23:01Z","url":"https://github.com/sablier-labs/command-center/discussions/44"},{"author":"PaulRBerg","body":"Do you have any thoughts on releasing the [Native Tokens fork of REVM](https://github.com/sablier-labs/sabvm/pull/14) separately from Sablier Mainnet?\r\n\r\nAs I see it, there would be two benefits:\r\n\r\n1. We would get a lot of feedback on feasibility and benchmarking from experienced node developers\r\n2. We would get some recognition from rollup teams","createdAt":"2023-09-29T09:01:16Z","labels":[],"number":5,"repository":"sablier-labs/command-center","state":"closed","title":"Releasing the Native Tokens EVM fork as a standalone project","type":"discussion","updatedAt":"2024-09-04T17:21:43Z","url":"https://github.com/sablier-labs/command-center/discussions/5"},{"author":"maxdesalle","body":"With the latest release of [Shell Protocol](https://shellprotocol.io/) leveraging Sablier, we have seen a significant and rapid uptake in the use of [our stream NFTs on marketplaces like OpenSea](https://opensea.io/collection/sablier-v2-lockup-linear-nft-5). As of today, merely three days after their launch, there is already ~50K USD in volume with ~300 NFTs listed on OpenSea, and the pricing seems quite efficient when you look at how close the NFTs are priced from one another. Worth noting that we aren't even in a bull market yet.\r\n\r\nBecause of that, it's fair to say, in my opinion, that we have evidence of early product/market-fit with this feature. Now, it's time to capitalize on that and go on the offense. The reason why this is so important is because the stream NFTs are the only way for us to build an actual strong moat with our protocol. If we are able to build up sufficient buy and sell liquidity on marketplaces like OpenSea for our NFTs, it will drive even more integrations (the ultimate moat) and become an argument for recipients to actually push the stream creators to use Sablier instead of a competitor (because of the higher liquidity it will be much easier for them to sell the stream if they want to). We should really make stream NFTs an asset that is fun and financially interesting to speculate on.\r\n\r\nHere are two ideas I think we should implement in the short run:\r\n\r\n- **Add a button in the interface for recipients** that have an incoming transferable uncancelable stream pushing them to sell it on OpenSea or another marketplace, we need to push people to list their NFT on there so there is sufficient liquidity on the sell side.\r\n- **Start using our personal capital, and the company's capital**, to buy uncancelable streams on OpenSea. This may be a little more controversial, but we should absolutely do this when it's for streams where the token is USDC, ETH, etc. meaning tokens that have proven value. We profit financially (we should obviously not buy streams where it doesn't make sense in terms of profitability), and we seed the buy liquidity in the market.\r\n- **Create a Dune dashboard to track** all of this activity (that's something I can do)\r\n- **Create educational content** (blog posts, a YouTube video, etc.) about buying/selling stream NFTs on a marketplace like OpenSea (again something I can do)\r\n\r\nI cannot stress enough the importance here, as this is our path to building a moat. This is the way we ultimately destroy the competition. This is the way we ultimately build up a strong ecosystem. Let the people speculate! ","createdAt":"2024-01-26T12:53:21Z","labels":[],"number":30,"repository":"sablier-labs/command-center","state":"closed","title":"Leveraging Our NFT Product/Market-Fit","type":"discussion","updatedAt":"2024-09-04T17:19:49Z","url":"https://github.com/sablier-labs/command-center/discussions/30"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nAllow stream recipients to split and merge their NFTs.\r\n\r\n- **Splitting** would turn a single NFT into two NFTs, each with different amounts but identical end times\r\n- **Merging** would turn two NFTs into a single NFT, which has a total amount equal to the sum of the two original NFTs' amounts. Note that all parameters other than the amounts must be the same (sender, recipient, start and end times, etc.)\r\n\r\n### Hedgey\r\n\r\nHedgey supports this:\r\n\r\n- [Docs](https://hedgey.gitbook.io/hedgey-community-docs/hedgey/investor-lockups/special-features)\r\n- [`_combinePlans`](https://github.com/hedgey-finance/Locked_VestingTokenPlans/blob/91b4c17f0b98f99c2d38f117816cc17a040a17b2/contracts/LockupPlans/TokenLockupPlans.sol#L299)\r\n- [`_segmentPlan`](https://github.com/hedgey-finance/Locked_VestingTokenPlans/blob/91b4c17f0b98f99c2d38f117816cc17a040a17b2/contracts/LockupPlans/TokenLockupPlans.sol#L241)\r\n\r\n## Prioritization\r\n\r\nI am not sure how useful this feature would be. Fabio Mancini (from TokenOps) mentioned that they have met a user who has requested this, but I need to double-check with him.\r\n\r\nAt any rate, it sounds like a fringe use case. I suggest monitoring user demand and following up here only if we bump into another user who requests this.","createdAt":"2023-12-31T14:11:36Z","labels":[],"number":24,"repository":"sablier-labs/command-center","state":"closed","title":"Splitting and merging NFTs","type":"discussion","updatedAt":"2024-09-04T17:13:32Z","url":"https://github.com/sablier-labs/command-center/discussions/24"},{"author":"PaulRBerg","body":"## Prospect\r\n\r\nDuring the all-hands meeting in Istanbul, we discussed the prospect of charging fees on NFT transfers. In this post, I will discuss the benefits, the implementation options, and my thoughts about whether we should implement this.\r\n\r\nThe potential benefits are clear - it's [price discrimination](https://www.investopedia.com/terms/p/price_discrimination.asp). The protocol would remain free for most users, but it would bear a cost for highly active users (who transfer their NFTs).\r\n\r\n## Implementation\r\n\r\nI see two approaches:\r\n\r\n1. Charge on every transfer\r\n2. Add an allowlist and charge on every transfer to the said allowlist\r\n\r\nI don't know which is the best practice (or whether there is such a thing for NFT trading fees). I've asked around on X: [Are there any best practices for NFT trading fees](https://twitter.com/PaulRBerg/status/1731754869654987108).\r\n\r\nBut anyway, both implementations would involve a change in the [`_beforeTokenTransfer`](https://github.com/sablier-labs/v2-core/blob/0f6c1417796ec71dcbd856a84b372affd7d5c749/src/abstracts/SablierV2Lockup.sol#L379) hook. In the second case, an additional mapping would have to be introduced for the allowlist, along with some functionality to allow the admin to update the allowlist.\r\n\r\n## My Thoughts\r\n\r\nI'm not in favor of this proposal.\r\n\r\n1. There are several other monetization ideas that are more promising, such as [lending user deposits](https://github.com/sablier-labs/private-discussions/discussions/12).\r\n1. TOM (Total Obtainable Market) is tiny because (i) not all streams will get transferred and (ii) there are cases where it is impossible to charge fees, e.g., when the stream is [depleted](https://github.com/sablier-labs/v2-core/discussions/543).\r\n1. Charging NFT trading fees seems like something that should be done at the UI level (in a bespoke app for NFT trading).","createdAt":"2023-12-04T19:22:12Z","labels":[],"number":13,"repository":"sablier-labs/command-center","state":"closed","title":"Alternative source of revenues: NFT transfer fees","type":"discussion","updatedAt":"2024-09-04T17:09:21Z","url":"https://github.com/sablier-labs/command-center/discussions/13"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThere are situations in which it would be beneficial for us to be able to withdraw any surplus of ERC-20 tokens:\r\n\r\n1. Accumulated yield tokens, e.g., Aave Tokens or Compound V3 Tokens\r\n2. Accumulated governance rewards provided by third-party DAOs (e.g., there is [~$87k worth of $AAVE](https://sablier.slack.com/archives/CT3NXMFQC/p1699449701904749) in Sablier V1.1)\r\n3. Accidental ERC-20 transfers made directly to our contracts (there have been a couple of these in V1).\r\n\r\n## Solution\r\n\r\n1. Add three new storage values in all `Lockup` contracts:\r\n  - `depositedAmountsSum`: increased when a new stream is started\r\n  - `refundedAmountsSum`: increased when a stream is canceled\r\n  - `withdrawnAmountsSum`: increased when a withdrawal is made\r\n  - `protocolRevenues`: increased when a protocol fee is charged\r\n2. Add a new function, `recover` that allows the contract admin to withdraw any surplus of ERC-20 tokens.\r\n3. The surplus is calculated like this:\r\n\r\n```solidity\r\nuint128 surplusAmount = ERC20.balanceOf(Sablier) - depositedAmountsSum - protocolRevenues + refundedAmountsSum + withdrawnAmountsSum\r\n```\r\n\r\n### Inspiration\r\n\r\n- Our [`invariant_contractBalance`](https://github.com/sablier-labs/v2-core/blob/0f6c1417796ec71dcbd856a84b372affd7d5c749/test/invariant/Lockup.t.sol#L41) invariant test\r\n- My [`ERC20Recover`](https://github.com/PaulRBerg/prb-contracts/blob/a82833ddff11797b7c8ff997aa3aade25e11af44/src/token/erc20/ERC20Recover.sol) contract\r\n\r\n## Cons\r\n\r\n1. There would be some modest increases in gas costs (5k gas per storage write to a non-zero slot).\r\n2. Potential legal implications, especially with regard to accidental ERC-20 transfers. We would have to double-check our [policies](https://github.com/sablier-labs/policies) with our lawyers.\r\n\r\n## My Thoughts\r\n\r\nI'm in favor of this proposal since it's a pre-requisite for https://github.com/sablier-labs/private-discussions/discussions/12, another proposal for which I am also in favor (big time!).\r\n\r\n## Side note\r\n\r\n@IaroslavMazur was prescient in his first audit of Sablier V2 (performed in June 2023). He suggested implementing an ERC-20 recovery mechanism back then.","createdAt":"2023-12-03T16:44:31Z","labels":[],"number":11,"repository":"sablier-labs/command-center","state":"closed","title":"ERC-20 recovery mechanism","type":"discussion","updatedAt":"2024-09-04T17:08:07Z","url":"https://github.com/sablier-labs/command-center/discussions/11"},{"author":"maxdesalle","body":"**TL;DR:** our upcoming protocol, Flow, will be very integration-dependent. The lack of a protocol fee switch removes any incentive on our end to push for those integrations. We should introduce one.\r\n\r\n## Flow Is Very Reliant on Integrations\r\n\r\nThe immediate core use cases for Flow are probably the following three: payroll, subscriptions and rent. For vesting, our existing Lockup protocol makes more sense.\r\n\r\nUse cases like payroll, like subscriptions, like rent, are very demanding on the compliance side. Employers want to be able to pay their employees easily while having no issues with their country's financial authorities, companies with a subscription service want to be fully compliant as well, etc.\r\n\r\nThis is not our business. Sablier is a tech company first and foremost. We build technology, not legal/compliance services. Flow will be heavily reliant on external integrations because of that. We will be dependent on the likes of [Toku](https://www.toku.com/), [TokenOps](https://tokenops.xyz/), etc. to integrate our protocol and offer the necessary tax/compliance tooling that users will require.\r\n\r\nMy hypothesis is that ultimately, the immense majority of Flow's usage will come from external integrations, as opposed to our own interface, simply because we cannot offer these compliance/tax services at scale.\r\n\r\n**Conclusion:** [we desperately need integrations.](https://github.com/user-attachments/assets/e1bbff54-71bb-42c2-9334-55da7cabe509)\r\n\r\n## Introducing a Fee Switch\r\n\r\nParadoxically, the inability for us to charge fees at the protocol level means we have no incentive to push for those integrations. Any integrator not redirecting users to our UI, so an integrator offering a deep integration, is effectively a competitor, as we have no monetization potential regarding their usage.\r\n\r\nArguments stating that integrations will result in increased TVL growth or NFT usage and hence help us even if the protocol is free to use, aren't valid. TVL is meaningless if we cannot monetize it, while NFT usage has been severally lacking in our Lockup protocol, and there is no indication it will fare better here.\r\n\r\nThe argument that we can always introduce a new version of the protocol later on with a fee switch if needed isn't valid either, as there is nothing preventing integrators from continuing to use the deprecated free version of the protocol.\r\n\r\nIt's in our best interest to introduce a fee switch, even if we only activate it in a few years, simply because that will give us the actual incentives to drive adoption for Flow. There is otherwise nothing to win in it for us.\r\n\r\n**Conclusion:** [we need a fee switch.](https://github.com/user-attachments/assets/8d764d5f-bd5e-4d8c-9916-7f55e4d4541d)\r\n\r\n## Conclusion\r\n\r\nIntroducing a fee switch for Flow (would also help for Lockup, but that's another discussion) [will solve all of the world's problems.](https://github.com/user-attachments/assets/b9d5145b-3110-43ac-8ac7-a964835918d9)\r\n\r\n---\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-08-20T19:22:32Z","labels":[],"number":67,"repository":"sablier-labs/command-center","state":"closed","title":"Introducing a Flow Protocol Fee Switch","type":"discussion","updatedAt":"2024-09-04T17:00:14Z","url":"https://github.com/sablier-labs/command-center/discussions/67"},{"author":"PaulRBerg","body":"## Context\r\n\r\nYou can see more info on [Canny](https://sablier.canny.io/feature-requests/p/oraclized-streaming-rules).\r\n\r\nThere are two ways to implement this:\r\n\r\n## Closed-Ended (Cancel & Recreate)\r\n\r\nThis would work with V2 and a proxy setup.\r\n\r\n1. Create a stream by depositing 100 $TKN\r\n2. Once every two weeks, check the USD price of $TKN\r\n3. Adjust the remaining amount of $TKN (increase it or decrease it)\r\n4. Call `cancelAndCreate` to cancel the previous stream and create another one\r\n5. Rinse and repeat until the end time of the stream\r\n\r\n## Open-Ended\r\n\r\nThis would work with V3:\r\n\r\n1. Start a stream that pays 1 $TKN every day\r\n2. Once every two weeks, check the USD price of $TKN\r\n3. Adjust the payment rate per second based on the new price\r\n4. Keep topping up to keep the stream alive","createdAt":"2023-11-06T20:48:15Z","labels":[],"number":46,"repository":"sablier-labs/command-center","state":"closed","title":"Oraclized rebalancing rules","type":"discussion","updatedAt":"2024-09-04T16:59:50Z","url":"https://github.com/sablier-labs/command-center/discussions/46"},{"author":"PaulRBerg","body":"## Use Cases\r\n\r\nOngoing R&D. This discussion is meant to be updated over time and your feedback is welcome, @sablier-labs/sabvm and @maxdesalle.\r\n\r\nOrdered from most to least promising.\r\n\r\n| Use Case | Description |\r\n|:-------|:-------|\r\n| Work Token | Stake the token to produce blocks and earn gas fees according to your relative ownership |\r\n| ~Ultra Sound Money~ | ~EIP-1559-style burning of gas fees (as suggested by [Pranav Garimidi](https://www.notion.so/sablier/Pranav-Garimidi-a16z-CSX-6b0dcfc735d540ffb57c2db65eda35d1))~ |\r\n| NA Minting Fee | Charge a fee for creating NAs, as suggested by Iaro [here](https://github.com/sablier-labs/sabvm/discussions/104) |\r\n| Liquidity Mining | Incentivize farmers to LP into our dapps, e.g., streaming DEXes |\r\n| Ecosystem | Community grants, RetroPGF, etc. |\r\n| Governance | No description needed; see the docs on [$ARB](https://docs.arbitrum.foundation/concepts/arb-token) |\r\n| Backstop | Cover losses in case a bug leads to significant user losses |\r\n| Graph Decomposition | Reward users with token rewards when they split/ prune the graph (isn't this gameable, though)? |\r\n\r\n## Notes\r\n\r\n- As discussed [here](https://github.com/sablier-labs/sabvm/discussions/51), we won't use $SAB for paying gas fees. We will instead use ETH.\r\n- The \"work token\" model is based on [Fuel's design](https://fuel-labs.ghost.io/token-model-layer-2-block-production/), in which the gas fees are split according to each validator's relative ownership\r\n- https://github.com/sablier-labs/sabvm/discussions/79","createdAt":"2024-04-30T14:22:12Z","labels":[],"number":53,"repository":"sablier-labs/command-center","state":"closed","title":"Potential use cases for $SAB","type":"discussion","updatedAt":"2024-09-04T16:57:41Z","url":"https://github.com/sablier-labs/command-center/discussions/53"},{"author":"PaulRBerg","body":"Opening this as a thread for sharing requests to build Sablier on Aztec. Feel free to add similar requests or discuss the pros/cons.\r\n\r\nNote: in an ideal work, an Aztec deployment would be developed by a third-party entity (in order to minimize regulatory risk). If we do it ourselves, we should seek legal counsel.","createdAt":"2024-08-25T10:33:33Z","labels":[],"number":68,"repository":"sablier-labs/command-center","state":"open","title":"Build and deploy on Aztec","type":"discussion","updatedAt":"2024-08-30T15:11:40Z","url":"https://github.com/sablier-labs/command-center/discussions/68"},{"author":"PaulRBerg","body":"## Context\r\n\r\nIn traditional vesting contracts, acceleration means vesting someone's stock options ahead of the original schedule. Acceleration can occur when a company is sold, when an employment relationship ends, or as a result of certain performance milestones being reached.\r\n\r\nI have encountered this concept while reviewing our investment documentation, but, as fate would have it, we have also received a feature request for this in the meantime:\r\n\r\nFor more context on accelerated vesting in general, see my [conversation with ChatGPT](https://chat.openai.com/share/8bb8212f-a998-48c6-844a-51eba157e3f1).\r\n\r\n<img width=\"377\" alt=\"SCR-20231228-lvcm\" src=\"https://github.com/sablier-labs/private-discussions/assets/8782666/431140cf-167e-4ce9-8f4d-d38ebd58b47b\">\r\n\r\n## Implementation\r\n\r\n- Add a new boolean flag called `wasAccelerated` in the [`Stream`](https://github.com/sablier-labs/v2-core/blob/c1cca898090f76b869a42853cb7d5b4b29d8a679/src/types/DataTypes.sol#L166) structs\r\n- Add a new method `accelerate` in the [`Lockup`](https://github.com/sablier-labs/v2-core/blob/c1cca898090f76b869a42853cb7d5b4b29d8a679/src/abstracts/SablierV2Lockup.sol) abstract\r\n  - The method would be callable by the sender only\r\n  - What the method will do is set the `wasAccelerated` flag to `true`\r\n- Inherit `accelerate` in both [`LockupLinear`](https://github.com/sablier-labs/v2-core/blob/c1cca898090f76b869a42853cb7d5b4b29d8a679/src/SablierV2LockupLinear.sol) and [`LockupDynamic`](https://github.com/sablier-labs/v2-core/blob/c1cca898090f76b869a42853cb7d5b4b29d8a679/src/SablierV2LockupDynamic.sol) (because this method updates the structs in contract storage) \r\n- Update the [`_calculateStreamedAmount`](https://github.com/sablier-labs/v2-core/blob/c1cca898090f76b869a42853cb7d5b4b29d8a679/src/SablierV2LockupLinear.sol#L295C14-L295C38) function to return all remaining assets if `wasAccelerated` is true\r\n- The status of the stream will automatically be updated to `SETTLED`, and that's good. There is no need to add a new status (i.e. `ACCELERATED`). That would add complexity without bringing any net value.\r\n- There will be no `decelerate` method or any way to undo the acceleration once it has occurred\r\n\r\n## Partial Acceleration\r\n\r\nIn the real world, companies have the liberty to vest the stock options only partially. I can imagine this feature being useful for Sablier streams, too, but implementing partial acceleration is much more complicated than full acceleration. We would have to allow the user to specify a custom `acceleratedTime` Unix timestamp instead of just setting a boolean.\r\n\r\nI suggest we start small and simple with full acceleration only, and if and when users explicitly ask us for this feature, we can contemplate a partial acceleration implementation.\r\n\r\n## Decision-Making\r\n\r\nAssuming that the implementation won't be more complex than the spec above, I suggest including this feature in V2.2.\r\n\r\nAnyone disagree, @sablier-labs/everybody?","createdAt":"2023-12-28T11:36:05Z","labels":[],"number":18,"repository":"sablier-labs/command-center","state":"closed","title":"New feature proposal: acceleration for Lockup streams","type":"discussion","updatedAt":"2024-07-30T14:22:55Z","url":"https://github.com/sablier-labs/command-center/discussions/18"},{"author":"IaroslavMazur","body":"In certain scenarious (e.g. when a Stream is being created for a recipient whose first interactions with the respective chain are going to be through this Stream), the Stream creator may find it useful to be able to make the recipient's onboarding smoother by optionally supplying them with a small amount of assets required for paying for gas on that chain.\r\n\r\nRecently, it has become common, for example, for bridges to offer a similar service (conceptually), from what I've observed.\r\nHere are some examples:\r\n<img src=\"https://github.com/sablier-labs/company-discussions/assets/22785348/9cb83263-1c81-44e3-b4dc-bd24543402be\" width=\"100\" height=\"100\"/>\r\n<img src=\"https://github.com/sablier-labs/company-discussions/assets/22785348/4b972304-0d4e-4ca6-a8b6-6802b1c50f38\" width=\"100\" height=\"100\"/>\r\n\r\nThis could, of course, be performed by the Stream creator by transferring the gas assets manually. However, implementing this automation would let them do this in the same tx with the Stream creation (vs 2 separate txs).\r\n\r\nThis functionality would be especially useful when multiple such recipients (first-time on this chain or in crypto, in general) are being onboarded in batch (via `SablierV2Batch`).\r\n\r\n@sablier-labs/everybody ","createdAt":"2024-02-24T14:18:33Z","labels":[],"number":61,"repository":"sablier-labs/command-center","state":"open","title":"Let Stream creators \"sponsor\" the recipients with gas assets","type":"discussion","updatedAt":"2024-07-26T13:21:54Z","url":"https://github.com/sablier-labs/command-center/discussions/61"},{"author":"PaulRBerg","body":"## Context\r\n\r\nI'm opening this discussion to propose the implementation of a new `Lockup` contract called `LockupTranched`, which would allow users to create lockup streams with sharply delineated chunks. In other words, a bespoke implementation of the Unlock in Steps curve currently powered by LockupDynamic:\r\n\r\n<img width=\"200\" alt=\"SCR-20231228-olrk\" src=\"https://github.com/sablier-labs/private-discussions/assets/8782666/5cc4ecca-1dd2-4b89-8bdb-12e7a675b58c\">\r\n\r\nAs argued in https://github.com/sablier-labs/private-discussions/discussions/4, the exponential curves of LockupDynamic have not been popular among Sablier V2 users.\r\n\r\n### Name\r\n\r\n\"Tranches\" is a term often used in finance to describe slices or portions of a pooled set of financial instruments.\r\n\r\n## Analysis\r\n\r\n### Pros\r\n\r\n- **Gas efficiency**. Gas costs are increasingly more important.\r\n  - Airstreams are especially relevant since many users have to pay the gas for creating and withdrawing from streams.\r\n  - See this [discussion](https://github.com/sablier-labs/v2-core/discussions/767).\r\n- **Developer experience**. Not having to handle PRBMath exponents and zero-amount segments will lead to a superior user experience when creating streams.\r\n\r\n### Cons\r\n\r\nDevelopment efforts aside, the only con is that deploying another contract would increase the deployment cost. But this downside can be partially addressed by using a gas optimizer like [GasHawk](https://github.com/sablier-labs/v2-core/discussions/760).\r\n\r\n## Implementation\r\n\r\n- Inherit from the [`Lockup`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/abstracts/SablierV2Lockup.sol) abstract\r\n- Implement the new requisite types in the `DataTypes` libraries\r\n- Write an implementation of `_calculateStreamedAmount` that does not raise the amounts to an exponent\r\n    - Basically, return the sum of all tranches for which `current_time >= tranch_milestone`\r\n- Allow users to specify durations or ranges (just like in `LockupLinear` or `LockupDynamic`)\r\n\r\n### New Data Types\r\n\r\n```solidity\r\nlibrary LockupTranched {\r\n    struct Tranche {\r\n        uint128 amount;\r\n        uint40 milestone;\r\n    }\r\n    struct Stream {\r\n        // ...\r\n        Tranche[] tranches;\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\n### Create Functions\r\n\r\nAn issue arises about the name of the create functions in `LockupTranched`. See this separate discussion: https://github.com/sablier-labs/private-discussions/discussions/20\r\n\r\n## RFC\r\n\r\nQuestions for you, @sablier-labs/everybody:\r\n\r\n1. Do you agree that it would be worth it to implement this contract?\r\n2. If yes, can you think of a better name?[^1]\r\n\r\nRelated: https://github.com/sablier-labs/private-discussions/discussions/4\r\n\r\n[^1]: `LockupPeriodic` would not be a good fit because the tranches can occur irregularly, e.g., the 1st tranche after 1 month, the 2nd tranche after 3 months, and the 3rd tranche after 1 year.","createdAt":"2023-12-28T14:44:48Z","labels":[],"number":19,"repository":"sablier-labs/command-center","state":"closed","title":"LockupTranched: a new Lockup contract with sharply delineated chunks","type":"discussion","updatedAt":"2024-07-22T13:26:47Z","url":"https://github.com/sablier-labs/command-center/discussions/19"},{"author":"smol-ninja","body":"## Context\r\n\r\nCodehawk's recent M-03 finding indicates that [the caller can skip hook callbacks by sending less gas](https://www.codehawks.com/finding/clxeyyh1d0006q1bfeuk72wjl), making hooks less reliable. Fjord also noticed it and raised their concern.\r\n\r\n<img width=\"551\" alt=\"Screenshot 2024-06-17 at 08 54 05\" src=\"https://github.com/sablier-labs/company-discussions/assets/6676622/936d2fd4-a477-45d6-9b73-ab4f90bc95ca\">\r\n\r\nThis has also been raised by Cantina but we ignored it with an argument that it does not affect the Sablier protocol directly. But since it affects **all** integrators, it questions the reliability of hooks.\r\n\r\n## Problem\r\n\r\nFunctions like `withdraw`, `renounce`, and `cancel` can be executed without calling the hook if less gas is sent. This impacts external protocols relying on hooks to update states, affecting all integrators.\r\n\r\n## Preliminary ideas\r\n\r\nHere are some potential solutions, though none are universal:\r\n\r\n1. **Set a minimum gas limit** for hook calls, reverting if below the threshold. This minimum gas can be set by the sender or fixed in the `try..catch` block. Needs a new storage slot and increases minimum transaction cost.\r\n\r\n2. **Remove `try..catch` entirely**: and let the execution fail if the hook can't be called. This introduces the risk of DoS if a party has a malicious implementation.\r\n\r\n3. **Validate Return Data**: After the hook call is made, use a `require` statement to validate the return data. If the returned data is not as expected, the execution reverts. This guarantees that the hook call was fully executed. In case of less gas, the tx would revert because the hook wont return anything. In case of malicious party, the tx would revert because they need not necessary return the correct data.\r\n\r\n4. **Selective Hook Calls**: Remove `try..catch`, restrict calls to hooks based on function. This can limit incentive for exploitation. Senders have no incentive to exploit `cancel` and `renounce` whereas recipients have no incentive to exploit `withdraw`. \r\n    - `renounce` calls only to `ISablierV2Sender`\r\n    -  `withdraw` calls only to `ISablierV2Recipient`\r\n    - `cancel` calls only to `ISablierV2Sender`\r\n\r\nRFC cc @sablier-labs/engineers.\r\n\r\n**Note**: This issue affects all deployed versions as well as v2.2.","createdAt":"2024-06-17T08:01:45Z","labels":[],"number":60,"repository":"sablier-labs/command-center","state":"closed","title":"Questioning the reliability of hook calls","type":"discussion","updatedAt":"2024-06-27T08:52:50Z","url":"https://github.com/sablier-labs/command-center/discussions/60"},{"author":"PaulRBerg","body":"Moonshot thinking: what if we enabled negative balances in SabVM with the explicit goal of creating a credit network?\r\n\r\nIn most likelihood, if we pursue this path, it should be done as a separate rollup (not the same rollup as the debit-based one).\r\n\r\n<img width=\"450\" alt=\"on-credit\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/b171c98b-da7f-4d8e-a0a5-b4b68f7950cc\">\r\n","createdAt":"2024-05-31T10:30:05Z","labels":[],"number":58,"repository":"sablier-labs/command-center","state":"closed","title":"Allowing negative balances on SabVM to create a credit network","type":"discussion","updatedAt":"2024-06-14T14:03:38Z","url":"https://github.com/sablier-labs/command-center/discussions/58"},{"author":"PaulRBerg","body":"We've discussed this topic at various points in the past, but we've never reached a conclusive decision.\r\n\r\nOn the one hand, building an EOES (EVM open-ended streaming) product would run counter to V3, since the former would solve the exact same problems solved by the latter.\r\n\r\nOn the other hand, we would deceive ourselves if we didn't admit that EOES is a highly-requested feature. For instance, Micah Zoltu has been unequivocal about wanting the stream to be open-ended - just look at the data on [Canny](https://sablier.canny.io/admin/feedback/feature-requests/p/allow-for-open-ended-duration-streams). Additionally, here's a question I just received from a long-time Sablier user:\r\n\r\n<img width=\"397\" alt=\"Screenshot 2023-10-12 at 11 52 41 AM\" src=\"https://github.com/sablier-labs/private-discussions/assets/8782666/55bffb27-a0eb-49ab-b29b-0618dc5b49d2\">\r\n\r\nBuilding an EOES product might not be such a bad idea after all:\r\n\r\n1. We would grow our body of knowledge about what users want, what problems they have, and so forth.\r\n2. It will take a while until V3 is ready for production, an EOES product would enable us to grow our market share in the meantime (directly going after LlamaPay, basically).\r\n3. Offering multiple streaming products would be in line with our recent mission statement (see image below).\r\n\r\nThat said, I'm still on the fence. WDYT @razgraf, @maxdesalle, @andreivladbrg, @IaroslavMazur?\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/private-discussions/assets/8782666/b5cf977b-35c3-444a-b361-6d71fca8e5f3\"/>","createdAt":"2023-10-12T11:07:19Z","labels":[],"number":6,"repository":"sablier-labs/command-center","state":"closed","title":"Should we build LlamaPay-style open-ended streaming on the EVM?","type":"discussion","updatedAt":"2024-05-24T09:58:03Z","url":"https://github.com/sablier-labs/command-center/discussions/6"},{"author":"PaulRBerg","body":"The goal is to see if there's any inspiration we can have from their upcoming release.\r\n\r\nCode here:\r\n\r\nhttps://github.com/LlamaPay/llamapay-v2\r\n\r\nFeedback shared by Peteris privately:\r\n\r\n<img width=\"727\" alt=\"SCR-20240507-ljfh\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/b7db3cb5-aa8f-444c-9193-9cca959a0c5f\">\r\n","createdAt":"2024-05-07T11:39:20Z","labels":[],"number":83,"repository":"sablier-labs/command-center","state":"closed","title":"Study LlamaPay V2 for Flow","type":"discussion","updatedAt":"2025-04-09T18:21:10Z","url":"https://github.com/sablier-labs/command-center/discussions/83"},{"author":"PaulRBerg","body":"Feedback shared by Peteris privately:\r\n\r\n<img width=\"450\" alt=\"SCR-20240507-lcgm\" src=\"https://github.com/sablier-labs/v2-open-ended/assets/8782666/74af3ec8-50dc-4dc9-a6dd-7c08faa72403\">\r\n\r\nSee:\r\n\r\nhttps://www.comp.xyz/t/proposal-aera-for-compound-service-provider-payments/5226","createdAt":"2024-05-07T11:22:38Z","labels":[],"number":84,"repository":"sablier-labs/command-center","state":"closed","title":"Investigate why LlamaPay didn't work for Aera/ Compound","type":"discussion","updatedAt":"2025-04-09T18:39:52Z","url":"https://github.com/sablier-labs/command-center/discussions/84"},{"author":"PaulRBerg","body":"Redoing the [poll](https://github.com/sablier-labs/company-discussions/discussions/52) because there was a tie between Project Sab, Moniac, and Mesh.\r\n\r\nPlease visit the [original discussion](https://github.com/sablier-labs/company-discussions/discussions/7) for the latest criticism on the available options.","createdAt":"2024-05-03T12:11:13Z","labels":[],"number":54,"repository":"sablier-labs/command-center","state":"closed","title":"2nd poll for deciding the name for the Sablier rollup","type":"discussion","updatedAt":"2024-05-14T13:14:34Z","url":"https://github.com/sablier-labs/command-center/discussions/54"},{"author":"PaulRBerg","body":"See context in previous polls:\r\n\r\n- https://github.com/sablier-labs/company-discussions/discussions/54\r\n- https://github.com/sablier-labs/company-discussions/discussions/52","createdAt":"2024-05-06T17:39:30Z","labels":[],"number":56,"repository":"sablier-labs/command-center","state":"closed","title":"3rd poll for deciding the name for the Sablier rollup","type":"discussion","updatedAt":"2024-05-14T13:14:39Z","url":"https://github.com/sablier-labs/command-center/discussions/56"},{"author":"PaulRBerg","body":"As suggested by @IaroslavMazur [here](https://github.com/sablier-labs/private-discussions/discussions/6#discussioncomment-7305811), it might be worth it to draw a line in the sand between the EVM product stack and the rollup(s).\r\n\r\nSo far, we have kept referring to the rollup as \"V3\". But this might be a poor naming choice because:\r\n\r\n1. The rollup will have to be upgradeable during its early stages, for beta testing purposes. What would we call the upgrades? V4, V5, etc.?\r\n2. It's not a sexy name for a rollup. It should be something memorable.\r\n3. Version releasing conflicts with the EVM products. What would we name the next EVM smart contract protocol that comes after V2? V4?\r\n\r\nSo, I think we should give the rollup a bespoke name, and add the version suffix to that name. That is, \"Sablier Foo V1\", \"Sablier Foo V2\", etc. (in marketing materials, we can skip the version name).\r\n\r\nNaming ideas:\r\n\r\n- Sablier Moniac (in tribute to the [MONIAC](https://en.wikipedia.org/wiki/MONIAC) analog computer)\r\n- Sablier Bravo\r\n- Sablier Connect\r\n- Sablier Flow\r\n- Sablier Mainnet\r\n- Sablier Momento\r\n- Sablier Network\r\n- Sablier Nova\r\n- Sablier One\r\n- Sablier Pulse\r\n- Sablier Up\r\n- Sablier X\r\n- Sabnet\r\n- Sabup\r\n\r\nRFC @sablier-labs/everybody","createdAt":"2023-10-18T15:57:42Z","labels":[],"number":7,"repository":"sablier-labs/command-center","state":"closed","title":"Giving a bespoke name to the rollup (instead of Sablier V3)","type":"discussion","updatedAt":"2024-09-04T16:57:52Z","url":"https://github.com/sablier-labs/command-center/discussions/7"},{"author":"PaulRBerg","body":"I've sifted through all the naming ideas provided [here](https://github.com/sablier-labs/company-discussions/discussions/7), and I cherry-picked the names that have withstood criticism.\r\n\r\n@sablier-labs/everybody - please cast your vote!\r\n\r\nNOTE: you can consider all options as prefixed by Sablier. I won't modify the poll to not destroy the current results.","createdAt":"2024-04-30T19:19:37Z","labels":[],"number":52,"repository":"sablier-labs/command-center","state":"closed","title":"Poll for deciding the name for the Sablier rollup","type":"discussion","updatedAt":"2024-05-06T17:37:28Z","url":"https://github.com/sablier-labs/command-center/discussions/52"},{"author":"smol-ninja","body":"I was going through the [Seaport repo](https://github.com/ProjectOpenSea/seaport/blob/main/docs/Deployment.md) and found that they have [deployed Seaport](https://etherscan.io/address/0x0000000000000068F116a894984e2DB1123eB395) on the same address across all chains. This has been made possible using `CREATE2` by passing the same salt, same init code and same caller across all the deployments. They even [deployed a contract](https://etherscan.io/address/0x0000000000ffe8b47b3e2130213b802212439497#code) for it.\r\n\r\nAn advantage for deploying on the same addresses across all chains is the user/developer experience. They won't have to go through docs to find addresses on every chain separately.\r\n\r\n---------------\r\n\r\nSeaport also made use of a pre-computed `salt` to deploy it on a [nice vanity address](https://etherscan.io/address/0x0000000000000068F116a894984e2DB1123eB395): `0x0000000000000068F116a894984e2DB1123eB395` containing 14 leading 0s.\r\n\r\nA small advantage of it is that it saves some gas when used in `calldata` (less non-zero bytes). For example, if our core addresses have that many 0s, a batch transaction on periphery would be cheaper.\r\n\r\n-----------\r\n\r\n- Any thoughts on deploying Sablier 2.2 on the same address on all chains?\r\n- Any thoughts on deploying it on a vanity address with many leading 0s or some other letters/digits?","createdAt":"2024-04-14T22:28:03Z","labels":[],"number":49,"repository":"sablier-labs/command-center","state":"closed","title":"Deploying Sablier 2.2 on same address across all chains","type":"discussion","updatedAt":"2024-04-29T17:50:54Z","url":"https://github.com/sablier-labs/command-center/discussions/49"},{"author":"razgraf","body":"We've received some requests from people wanting to do instant/one-time drops (as in no vesting schedule, instant claims). \r\n\r\nIn their words, they were even willing to use Airstreams with 1 second (even if it involves 2 transactions, claim + withdraw) just because of the brand and their nice experience with Sablier tooling in other instances.\r\n\r\nSo the questions goes: should we enable instant drops in the Merkle contracts? \r\n\r\nExample: if the stream duration is set to 1s, we simply trigger `transfer` on `claim` instead of creating the entire stream. Of course that would require us to have some special events and synthetic streams which to make them show up in the interface.","createdAt":"2024-04-16T15:12:06Z","labels":[],"number":50,"repository":"sablier-labs/command-center","state":"closed","title":"Should we enable instant drops","type":"discussion","updatedAt":"2024-09-02T10:54:28Z","url":"https://github.com/sablier-labs/command-center/discussions/50"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThe PondCoin airstream has made it obvious that gas costs are a significant concern to our users:\r\n\r\n<img width=\"500\" alt=\"gas-1\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/5497345c-e445-43db-b571-8ad037e9f100\">\r\n\r\n<img width=\"500\" alt=\"SCR-20240205-mopj\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/36b15983-332b-4802-82b0-4c6b2f5b6467\">\r\n\r\nOne potential solution is to suggest to airstream campaign creators to use L2 networks. But what if ..\r\n\r\n## Idea\r\n\r\nWe've previously talked about using [GasGawk](https://gashawk.io) to minimize our deployment costs.\r\n\r\nBut what if we also used it for (i) optimizing the gas costs for end users and (ii) making money (i.e., taking a cut from the user's gas fee, as a courtesy for lowering their baseline cost)?\r\n\r\nRelated: https://github.com/sablier-labs/v2-core/discussions/760\r\n\r\n## RFC\r\nCc @sablier-labs/everybody","createdAt":"2024-02-05T12:08:16Z","labels":[],"number":36,"repository":"sablier-labs/command-center","state":"closed","title":"Alternative source of revenues: taking a cut via GasHawk","type":"discussion","updatedAt":"2024-04-09T15:59:45Z","url":"https://github.com/sablier-labs/command-center/discussions/36"},{"author":"PaulRBerg","body":"## Context\r\n\r\nOn December 20, 2023, I hopped on a call with a developer from [Holograph](https://holograph.xyz) called Angelo. We spoke for an hour about their airdrop requirements. Angelo's goal was to fully understand how Sablier works and discuss whether we can address their needs.\r\n\r\nOne particular problem has consumed the majority of our time.\r\n\r\n## Problem\r\n\r\n- The airstream campaign is effectively shut down if we set the fees to non-zero for an airstream token\r\n- This is bad; Holograph said that the development cost inflicted by this fee change would be huge\r\n- They would rather have allowed us to have the fee than block the campaign\r\n- A campaign blocked mid-through would require them to generate a new Merkle tree, update the claim page, etc; a lot of faff\r\n- Let me explain that they understood that we have zero intentions to activate the fees; but still, this is a theoretical risk that they need to take into account\r\n- Side note: I suggested to sign a legal contract to pledge that we won't activate the fees\r\n\r\n### Context\r\n\r\nWe ended up implementing the `MerkleStreamer` contract like this at Cantina's recommendation:\r\n\r\n[Protocol fees can be increased after airstream is set up, stealing from users #5](https://cantina.xyz/code/6d6a47ff-5279-4502-8705-d837b159a31e/findings/e2ed29f3-34f2-4dc7-8849-38aa7f0c3b91?).\r\n\r\nInitially, the `claim` and the `callback` functions were not blocked by a non-zero fee.\r\n\r\n## Potential Solutions\r\n\r\nNote that all solutions involve us removing the fee checks in `MerkleStreamerLL` (i.e. the 1st solution is a base for the 2nd and the 3rd solutions).\r\n\r\n### 1. Keep the protocol fees in the Core but remove the checks in the Periphery\r\n\r\n- Keep the standard protocol fees intact\r\n- Do not block airstreams when the fee is non-zero\r\n\r\n### 2. Token denylist\r\n\r\n1st Solution, and then some:\r\n\r\n- Add a token denylist in `ISablierV2Lockup` (it cannot be in `Comptroller` because the admin of the `Lockup` contract can swap out the comptroller)\r\n- Once a token is put on the denylist, it can never be charged a fee\r\n\r\n### 3. Remove protocol fees\r\n\r\n1st Solution, and then some:\r\n\r\n- Nuke out the protocol fee system from the `Lockup` contracts\r\n\r\n## My Thoughts\r\n\r\nWe debated this issue in Istanbul (me, @razgraf, @andreivladbrg, and @gavriliumircea). Like then, I am now of the view that we should remove protocol fees.\r\n\r\nI will post an update in the discussion about fees (https://github.com/sablier-labs/company-discussions/discussions/2) to share my most up-to-date rationale.\r\n\r\nRFC @sablier-labs/engineers.","createdAt":"2024-01-08T15:30:40Z","labels":[],"number":28,"repository":"sablier-labs/command-center","state":"closed","title":"Airstream fees problem","type":"discussion","updatedAt":"2024-03-13T15:31:36Z","url":"https://github.com/sablier-labs/command-center/discussions/28"},{"author":"PaulRBerg","body":"The space of lockup streaming is getting increasingly more competitive.\r\n\r\n[Hedgey](http://hedgey.finance/) made an [asshole move](https://forum.arbitrum.foundation/t/use-sablier-for-the-arbitrum-foundations-grants-program/15830/3) by replying to our Arbitrum proposal.\r\n\r\nLack of diplomacy is one thing, but the other thing is the business implications of what they said. They put Sablier in a bad light by saying we have a \"fee switch\". And that is technically correct. We do have a fee switch, Hedgey doesn't, and this is a fact that can act as a psychological deterrent against Sablier when comparing streaming protocols.\r\n\r\nThe question is: where do we go from here? Do we keep the protocol fees in V2.x?\r\n\r\nThe card we are playing is that Sablier is the premium protocol for lockup streaming (and it really is), so the potential for charging fees is acceptable. But will this be enough? What do we do if more projects give away their entire protocol for free? How do we even explain to non-technical users that Sablier is the premium protocol?","createdAt":"2023-08-14T10:52:15Z","labels":[],"number":2,"repository":"sablier-labs/command-center","state":"closed","title":"Should we remove protocol fees in V2.x?","type":"discussion","updatedAt":"2024-03-08T10:25:19Z","url":"https://github.com/sablier-labs/command-center/discussions/2"},{"author":"smol-ninja","body":"<sup>Originally discussed privately in Slack between @andreivladbrg and @smol-ninja. Note that for funds in core contracts, yields are completely managed by the Sablier admin.</sup>\r\n\r\nWhile creating Airstream campaigns, the user deploys a `MerkleLockup` contract with him as its admin. These contracts are fully owned by the user and Sablier admin has no role in any of its functions. \r\n\r\nWithout changing admin functionalities, there are a few options on how we can deal with Blast yield:\r\n\r\nOption 1\r\n------\r\n- By default, when the user deploys the `MerkleLockup` contract, we set the ERC-20 asset yield to `Claimable`. \r\n- Claim functions can only be called by the user. He will pass the recipient's address at the time of claiming.\r\n\r\n### Cons\r\nAs mentioned by Andrei, due to legal reasons, some users may not want to earn yield. \r\n\r\nOption 2\r\n-------\r\n- By default, when the user deploys the `MerkleLockup` contract, we set the ERC-20 asset yield to `Void`.\r\n- User can choose to re-configure yield mode whenever he desires.\r\n- Claim functions can only be called by the user. He will pass the recipient's address at the time of claiming.\r\n\r\n### Cons\r\nA lack of knowledge about Yield mode can lead to users missing yields on their contract balance.\r\n\r\nOption 3\r\n------\r\n- During the `MerkleLockup` deployment, we can ask the user whether he wants the yield to be claimable or not.\r\n- If claimable, claim functions can only be called by the user. He will pass the recipient's address while claiming yield.\r\n- User can choose to re-configure yield mode whenever he desires\r\n\r\n### Cons\r\nA new input field in the UI.\r\n\r\n**As @razgraf pointed out instead of allowing users to claim yield, how about we redirect that yield to the treasury wallet?** There are a few options to implement this:\r\n\r\nOption 4\r\n------\r\n- When the user deploys the `MerkleLockup` contract, we set the ERC-20 asset yield to `claimable`. \r\n- We hardcode the treasury address into the claim function and make them publicly callable.\r\n- Anybody can call the claim function but the yield will always be transferred to the treasury address.\r\n- Changing Yield mode will be disabled.\r\n\r\n### Cons\r\n- If we lose access to the treasury address, the contract will need to be redeployed.\r\n- Campaign creators may not be comfortable losing yield. Blast markets itself as an EVM where users can earn native yield while using dApps. So implementing this option could make us misaligned with the Blast native yield narrative.\r\n\r\nOption 5\r\n------\r\n- We define additional admin rights into the `MerkleLockup` contract where claim-related functions can only be called by the Sablier admin.\r\n\r\n### Cons\r\n- Additional admin rights in the MerkleLockup contract\r\n- Same argument as Option 4 about Blast narrative.\r\n\r\n@sablier-labs/everybody whats your thoughts on this?","createdAt":"2024-02-28T14:23:22Z","labels":[],"number":42,"repository":"sablier-labs/command-center","state":"closed","title":"How to deal with Blast yield from Airstream campaigns?","type":"discussion","updatedAt":"2024-03-01T14:35:26Z","url":"https://github.com/sablier-labs/command-center/discussions/42"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThe following feature request would be addressed by allowing the sender to transfer the stream NFT:\r\n\r\n<img width=\"400\" alt=\"SCR-20240201-nidp\" src=\"https://github.com/sablier-labs/company-discussions/assets/8782666/3c8b7de0-7aaf-4836-9e6a-88bded230227\">\r\n\r\nIt is worth noting that our competitors (Streamflow, Hedgey) offer this feature already.\r\n\r\n## Pros\r\n\r\n- Allow sender to blacklist users retroactively\r\n- Greater flexibility, e.g., senders could lend a hand to inexperienced recipients who wish to transfer their streams\r\n\r\n## Cons\r\n\r\n- Complicating the stream creation form\r\n- Tarnishing the permissionless of the protocol\r\n\r\n## RFC\r\n\r\nCc @sablier-labs/everybody.","createdAt":"2024-02-01T13:03:07Z","labels":[],"number":33,"repository":"sablier-labs/command-center","state":"closed","title":"Allowing the sender to transfer the NFT","type":"discussion","updatedAt":"2024-02-02T21:58:19Z","url":"https://github.com/sablier-labs/command-center/discussions/33"},{"author":"PaulRBerg","body":"## Dilemma\r\n\r\nBased on the feedback received from Holograph, it's become clear that we will need to add support for custom shapes in MerkleStreamer (a.k.a. airstreams).\r\n\r\nBut there's a problem. We know they want just monthly unlocks - they are not interested in any of the continuous curves enabled by the LockupDynamic exponents. A continuous curve is bad for them because they want to implement a [cancel on first withdraw](https://github.com/sablier-labs/v2-periphery/discussions/231) functionality - they would monitor user interactions and batch-cancel streams once every so often. But if assets are unlocked continuously, users will continue to accrue assets until Holograph reacts by canceling the stream.\r\n\r\nThus, the dilemma: should we implement [`LockupTranched`](https://github.com/sablier-labs/company-discussions/discussions/19) or LockupDynamic in MerkleStreamer?\r\n\r\n## My Vote\r\n\r\nMy vote goes to `LockupTranched`.\r\n\r\n- Significantly more gas efficient (important for large airdrops on Mainnet)\r\n- Better developer experience (relevant because we envisage the MerkleStreamer to be used programmatically)\r\n- Implementing this contract is easy (the detour won't be long)\r\n\r\nCan you all please vote, @sablier-labs/everybody?\r\n\r\n## Related\r\n\r\nA list of all related discussions:\r\n\r\n- https://github.com/sablier-labs/v2-periphery/discussions/230\r\n- https://github.com/sablier-labs/v2-periphery/discussions/231\r\n- https://github.com/sablier-labs/company-discussions/discussions/4\r\n- https://github.com/sablier-labs/company-discussions/discussions/19\r\n- https://github.com/sablier-labs/v2-interfaces/issues/706","createdAt":"2023-12-31T13:55:50Z","labels":[],"number":23,"repository":"sablier-labs/command-center","state":"closed","title":"What Lockup contract should we support for airstreams?","type":"discussion","updatedAt":"2024-09-04T17:26:18Z","url":"https://github.com/sablier-labs/command-center/discussions/23"},{"author":"PaulRBerg","body":"We're currently using [LPGL v3](https://www.gnu.org/licenses/lgpl-3.0.en.html), but I'm not sure that this is the best approach.\r\n\r\nShould we use [BUSL-1.1](https://spdx.org/licenses/BUSL-1.1.html) to prevent competitors from forking us?","createdAt":"2022-06-14T12:26:20Z","labels":[],"number":1,"repository":"sablier-labs/command-center","state":"closed","title":"What software license should we use?","type":"discussion","updatedAt":"2024-01-30T12:20:26Z","url":"https://github.com/sablier-labs/command-center/discussions/1"},{"author":"PaulRBerg","body":"We should explore the prospect of refactoring the following repos into a single monorepo:\r\n\r\n- https://github.com/sablier-labs/v2-core\r\n- https://github.com/sablier-labs/v2-deployments\r\n- https://github.com/sablier-labs/v2-docs\r\n- https://github.com/sablier-labs/v2-open-ended\r\n- https://github.com/sablier-labs/v2-periphery\r\n\r\nThe pros:\r\n\r\n- Easier maintenance\r\n- Simplified dependency management (e.g., the latest version of V2 Core would be easier to test in V2 Periphery)\r\n\r\nThe cons:\r\n\r\n- More complex builds\r\n- Maintaining the monorepo infra itself can be a chore","createdAt":"2023-12-28T11:07:06Z","labels":[],"number":17,"repository":"sablier-labs/command-center","state":"closed","title":"Turn the Solidity repos into a monorepo","type":"discussion","updatedAt":"2024-01-30T11:22:52Z","url":"https://github.com/sablier-labs/command-center/discussions/17"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWe are currently referring to the Sablier chain as \"Sablier V3\", but, as discussed [here](https://github.com/sablier-labs/company-discussions/discussions/7), that is a bad name and we gotta find a replacement.\r\n\r\nThat discussion led me to realize that the versioning problem runs deeper, i.e., it affects our products slated to be released in 2024-2025:\r\n\r\n- Rollup\r\n- EVM Lockup V2.x, e.g., [V2.2](https://github.com/orgs/sablier-labs/projects/15)\r\n- EVM OpenEnded, see [this](https://github.com/sablier-labs/v2-open-ended)\r\n- Non-EVM implementation (e.g., Fuel, Solana)\r\n\r\nThere are many questions on my mind:\r\n\r\nWhich one of the above should V3 be? And how should the OpenEnded implementation be versioned? Should it be part of V2.2 or V2.3? Why not V3? What should go in the [ASCII](https://github.com/sablier-labs/v2-core/issues/761)? And if we build LockupLinear on Fuel or Solana, should we still include \"V2\" in the name of that contract?\r\n\r\n## Solution\r\n\r\nThe easy bits:\r\n\r\n- The chain. We will just give it a bespoke name, isolating it from the rest of our products.\r\n- The npm package versions. As discussed [here](https://github.com/sablier-labs/v2-core/discussions/476), the only scalable approach is to start afresh every time a new package is deployed (i.e., start at `1.0.0` for `SablierV2LockupLinear`).\r\n    - Note that in the versioning system we are _currently_ using, there is a dichotomy between protocol releases and npm package versions. As pointed out by @andreivladbrg [here](https://github.com/sablier-labs/v2-core/discussions/762#discussioncomment-7919637), this can be confusing.\r\n\r\nThe hard bit: the smart contract names. There are three potential solutions:\r\n\r\n### 1. Package Tethering\r\n\r\nExamples: `SablierLockupLinear` and `SablierLockupDynamic`\r\n\r\n- There's only one version - the package version, e.g., V2 Core is [currently](https://www.npmjs.com/package/@sablier/v2-core) versioned as `1.1.2`\r\n- Remove all other versions from the contract names\r\n- Use the package version in the ASCII\r\n- In our external marketing, we stop referring to the protocol as \"Sablier V2\". Instead, we say \"Sablier's LockupLinear\", and so on.\r\n- All contracts deployed to all chains (including non-EVM ones) are called the same\r\n\r\n### 2. Product Tethering\r\n\r\nExamples: `SablierLockupLinearV2`, `SablierLockupDynamicV2`, `SablierLockupTranchedV1`, and `SablierOpenEndedV1`\r\n\r\n- Make the version a suffix\r\n- Tether the version to each product: LockupLinear, LockupDynamic, OpenEnded, etc.\r\n- Once the Lockup product range crosses a new threshold of complexity (e.g., voting and staking features), we swap V2 for V3\r\n- Assuming there is feature parity, an implementation of `LockupLinear` on Fuel would continue to have the version in its name\r\n- Sablier V1 becomes LockupLinearV1 (retroactively in our documentation)\r\n- The package versions continue to be developed in parallel\r\n\r\n### 3. Chain Tethering\r\n\r\nExamples: EVM: `SablierLockupLinearV2.2`, EVM: `SablierLockupLinearV3`, and Fuel: `SablierLockupLinearV1`.\r\n\r\n- A twist on the previous approach\r\n- The only difference is that a non-EVM implementation would not contain the same version as its EVM counterpart\r\n\r\n## My Thoughts\r\n\r\nMy vote goes to the first approach because it's by far the simplest and the most elegant. By adhering to a single versioning system, we:\r\n\r\n- Never mind the problem of how to distinguish between minor and major releases, i.e., when should a new implementation of EVM LockupLinear be called V3? Are voting and staking sufficiently big features that deserve a major version bump?\r\n- Solve the problem of cross-chain versioning. A Fuel/ Solana implementation of LockupLinear would be versioned afresh from `1.0.0`.\r\n- Get rid of the potential confusion between the protocol release and the package version\r\n\r\nThe only cost is on the copyright/ marketing front, where we would have to explain that what used to be called \"V2\" is now \"LockupLinear v1.x\". However, this is a reasonable price to pay in exchange for the above benefits. It is worth noting that, if we become a unicorn, the overwhelming majority of our future users are not using Sablier now. In the grand scheme of things, it won't matter what our historical product releases used to be called.\r\n\r\n## Feedback\r\n\r\nCould you please vote and share your feedback, if any, @sablier-labs/everybody?\r\n\r\n## Related\r\n\r\n- https://github.com/sablier-labs/company-discussions/discussions/7\r\n- https://github.com/sablier-labs/v2-core/discussions/476\r\n- https://github.com/sablier-labs/v2-core/issues/761\r\n- https://github.com/sablier-labs/v2-core/discussions/762","createdAt":"2023-12-31T17:50:37Z","labels":[],"number":25,"repository":"sablier-labs/command-center","state":"closed","title":"How should contracts be versioned in the future?","type":"discussion","updatedAt":"2024-01-30T11:16:42Z","url":"https://github.com/sablier-labs/command-center/discussions/25"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe implementation of the [`LockupTranched`](https://github.com/sablier-labs/private-discussions/discussions/19) contracts bring with it a problem:\r\n\r\nHow should we name the create functions?\r\n\r\nWe have a dilemma:\r\n\r\n1. Give them the same name as in `LockupLinear`, i.e., `createWithDurations` and `createWithRange`\r\n2. Give them different names\r\n\r\n## First Approach\r\n\r\nUsing the same names as in `LockupLinear` would run counter to the [principle of maximum separation](https://twitter.com/PaulRBerg/status/1677610313993146368).\r\n\r\nThat is, in the big picture of Sablier V2, it would be confusing to have `LockupLinear` and `LockupTranched` use the `createWithDurations` and `createWithRange` terminology while `LockupDynamic` continues to use `createWithDeltas` and `createWithMilestones`.\r\n\r\nIf we go with this approach, I suggest renaming the create functions in `LockupDynamic`, too, so that we have a uniform API.\r\n\r\n## Second Approach\r\n\r\nThe problem with different names is that, well, I can't think of any good new names.\r\n\r\nMaybe `createWithTrancheDurations` and `createWithTrancheMilestones`?\r\n\r\nUsing just `createWithTranches` does not work because we would have to give up on the durations variant, but that's bad for obvious reasons.\r\n\r\n## RFC\r\n\r\nI'm torn because I still stand by the logic laid out [here](https://github.com/sablier-labs/v2-core/discussions/327#discussioncomment-4981590).\r\n\r\nRFC from you, @sablier-labs/directors (especially @andreivladbrg and @razgraf).","createdAt":"2023-12-28T15:05:02Z","labels":[],"number":20,"repository":"sablier-labs/command-center","state":"closed","title":"How to name the create functions in \"LockupTranches\"?","type":"discussion","updatedAt":"2024-01-22T12:01:42Z","url":"https://github.com/sablier-labs/command-center/discussions/20"},{"author":"maxdesalle","body":"This question arose in a Slack debate between @PaulRBerg and I regarding whether or not we should help and support TokenOps, an integrator of our protocol.\r\n\r\n## The Amazon strategy\r\nI stand by the fact that we should make UI integrations as accessible as possible and try to get as many competitors (because TokenOps is a competitor, I explain below why) to use our protocol, however, we should also aggressively pursue those market shares ourselves. These two views aren't mutually exclusive.\r\n\r\nPlay the Amazon strategy: let others use your platform (sell products on Amazon), and if it works, create your own better and cheaper version of it and profit (which is basically the entire Amazon Basics product line). The only time we should actively help a platform integrating our protocol and not compete with them is if and only if their niche is so different from ours that we won't be able to create a competing offering.\r\n\r\nFor a more recent example, this is **EXACTLY** what OpenAI just did with their [developer conference announcements](https://openai.com/blog/new-models-and-developer-products-announced-at-devday). They let the past two years a ton of startups build on their API (= our protocol), saw what worked and what didn't, and then now released competing offerings in their own interface (upload images, read from PDFs, create custom GPTs, etc.). The difference being that OpenAI is in full control of its own API, it's a walled garden. We can't say the same about our protocol, it's in complete open access and we have no control over it. That's precisely why we should be even more aggressive when it comes to competition.\r\n\r\n## It's interfaces all the way down\r\nGiven we have no moat at the protocol level, we are really only competing at the interface level with others. There is a reason why Uniswap released Uniswap Wallet. Everyone is competing at the interface level. hedgey proves that users don't care about the underlying protocol (until they are hacked), they only care about the marketing and the user experience. TokenOps is a competitor. This is especially the case given we will likely eventually charge fees at the interface level, but it's much less likely that we will do so at the protocol level (explained below).\r\n\r\n## There is nothing to win in supporting TokenOps\r\n@PaulRBerg made the following comment to which I respond below:\r\n> Fabio showed me Hedgey's deck\r\n> Half of it were lies, but the other half were good business tactics\r\n> They are actively reaching out to teams in anticipation of them launching a token\r\n> They are basically \"holding their hands\" along the way\r\n> And NGL it's a good strategy that we will not have the bandwidth to execute on if we pursue V3\r\n> But TokenOps can do it!\r\n\r\nAnd how do we profit from that? We have zero equity in TokenOps, and given our protocol doesn't have a moat, if we introduce fees at the protocol it's inevitable that we will be outcompeted by another protocol (eventually), no matter how big of an engineering feat Sablier V2 is. There will then be nothing preventing TokenOps from migrating to that competitor, on the contrary, they will be incenvitized to given the lower fees. We are basically leaving a ton of money on the table by giving them free market shares, just for the sake of leaving a ton of money on the table.\r\n\r\n## TokenOps is easy to compete with (and we should have the bandwidth)\r\nIf we don't have the bandwidth, then we should hire people to do that. +80% of our team is engineering-focused right now, it's normal that we don't have the bandwidth. We shouldn't give free market shares to TokenOps, especially given how easy competing with them is. I mean, just look at their website, this is their \"security\" section, it's laughable, they took the most standard security practices and made it look extremely advanced with technical wording. They couldn't even spell \"MongoDB\" right.\r\n\r\n![CleanShot 2023-11-14 at 12 57 22@2x](https://github.com/sablier-labs/private-discussions/assets/70470326/36d59565-efd3-4023-84ce-f5770803dd55)","createdAt":"2023-11-14T18:27:11Z","labels":[],"number":9,"repository":"sablier-labs/command-center","state":"closed","title":"Should we help integrators, or actively compete with them?","type":"discussion","updatedAt":"2024-01-23T17:53:59Z","url":"https://github.com/sablier-labs/command-center/discussions/9"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOn top of adding opcodes like `CREATESTREAM` etc., the SabVM will also modify some of the existing EVM opcodes (mainly the `CALL` opcodes) to enable MNAs.\r\n\r\n## Solution\r\n\r\nTo provide a good developer experience for existing Solidity devs, we need a transpiler capable of two things:\r\n\r\n1. Parse traditional EVM bytecode and make it compatible with the SabVM, e.g., make all `CALL` opcodes pass the asset id for ETH\r\n2. Parse traditional Solidity contracts and generate new code compatible with the SabVM, e.g., replace all occurrences of `usdc.transfer(to,1ether)` with `to.call{value: 1 ether}`.\r\n\r\nObviously, the transpiler would be a Rust-based CLI, and it would be tightly integrated with Foundry.\r\n\r\n## References\r\n\r\n- https://github.com/sablier-labs/sabvm\r\n- https://github.com/sablier-labs/v3-core\r\n- https://github.com/sablier-labs/sabvm/discussions/19\r\n- https://github.com/sablier-labs/sabvm/discussions/50","createdAt":"2023-12-07T10:05:36Z","labels":[],"number":14,"repository":"sablier-labs/command-center","state":"closed","title":"SabVM: Transpiler for V3 smart contracts","type":"discussion","updatedAt":"2025-04-09T18:24:36Z","url":"https://github.com/sablier-labs/command-center/discussions/14"},{"author":"PaulRBerg","body":"## Context and problem\r\n\r\nI am proud of Lockup Dynamic. It's a pretty cool experiment in incentive design, and the \"universal streaming engine\" meme is fairly accurate.\r\n\r\nHowever, it is worth pausing for a moment to reflect on the demand for Lockup Dynamic's functionality. Based on the comms that I had, the answer is a little. Lockup Linear is still da wei.\r\n\r\nThere are two exceptions:\r\n\r\n1. Unlock in steps. The following companies/ devs have been fairly explicit that, for them, the unlock in steps is the most appealing feature of Lockup Dynamic:\r\n    - Pulley\r\n    - Utopia\r\n    - [Viraz Malhotra](https://github.com/sablier-labs/v2-core/discussions/690)\r\n2. Instant unlocks followed by linear streams. We have received [a few requests](https://github.com/sablier-labs/v2-interfaces/issues/581) for this.\r\n\r\nDid I miss anything? Please feel free to add your reflections below.\r\n\r\n## Proposal\r\n\r\nOptimize for what users want and build a new flavor of Lockup (say, `LockupPeriodic` or `LockupSteps`) with the following properties:\r\n\r\n- Clear-cut periods and amounts; at the end of each period, the amount gets unlocked\r\n- No exponents\r\n\r\nThe benefits would be:\r\n\r\n1. Fits in perfectly with the traditional monthly vesting schemes (think real-world assets ported on-chain; they would still be bound to legal contracts). \r\n2. Better UX by removing exponents from the parameters users must provide + also letting users specify single periods rather than segments with N-1 and 1-second deltas.\r\n3. Gas efficiency.\r\n\r\nFWIW: Snapchat [implemented](https://help.pulley.com/en/articles/5048902-what-vesting-schedule-should-i-use-for-employees) a back-weighted vesting program. `LockupPeriodic` would have been a more straightforward solution for this use case than `LockupDynamic`.\r\n\r\n## Implications\r\n\r\nSuch a contract would not be a streaming solution anymore. We would need to consider rebranding as a \"payment provider\" or an \"infra provider\".\r\n\r\n## Mental Transaction Costs\r\n\r\nMy guess for why there is little interest in the non-discrete curves of Lockup Dynamic is that it adds mental transaction costs. Nick Szabo has an [excellent article](https://nakamotoinstitute.org/micropayments-and-mental-transaction-costs/) on this topic.","createdAt":"2023-09-23T14:50:49Z","labels":[],"number":4,"repository":"sablier-labs/command-center","state":"closed","title":"The reality of Lockup Dynamic and what users actually want","type":"discussion","updatedAt":"2023-10-11T10:26:59Z","url":"https://github.com/sablier-labs/command-center/discussions/4"},{"author":"PaulRBerg","body":"I'm deep in the weeds researching GDPR these days, and it's become clear to me that we will have to implement a full-blow cookie consent mechanism in the user interfaces.\r\n\r\nIn the v1 apps we will resort to easiest solution we can find. The consent will be binary and will say something along the lines of \"do you accept the cookies, yes or not\". There will be no complex settings page where the user can later edit their cookie preferences.\r\n\r\nHowever, in v2, we should plan ahead and consider a fuller implementation. My suggestion is to simply mimic what [Zerion](https://zerion.io) does (screenshots below). In short:\r\n\r\n- Cookie consent popup and modal that shows up the first time the device opens the app\r\n- Settings page where the user can later toggle the consent for each category\r\n\r\nThe three consent categories would be be:\r\n\r\n1. Minimal Analytics\r\n2. App Usage Analytics\r\n3. Support Chat (speaking of which, we should consider switching to Intercom)\r\n\r\nAny thoughts?\r\n\r\n<img width=\"1023\" alt=\"zerion-cookie-consent\" src=\"https://user-images.githubusercontent.com/8782666/194858750-94fe7917-769f-4150-8f6e-b0af76fb9d99.png\">\r\n\r\n<img width=\"389\" alt=\"zerion-popup\" src=\"https://user-images.githubusercontent.com/8782666/194858756-210b5257-782f-4684-af6b-dce25192cd3c.png\">\r\n\r\n<img width=\"701\" alt=\"zerion-settings\" src=\"https://user-images.githubusercontent.com/8782666/194858768-02cd2eba-6e28-493b-9b8c-b092f2c8e7f5.png\">","createdAt":"2022-10-10T11:45:23Z","labels":[],"number":29,"repository":"sablier-labs/command-center","state":"closed","title":"Strategy for GDPR in the user interfaces","type":"discussion","updatedAt":"2024-01-12T12:12:55Z","url":"https://github.com/sablier-labs/command-center/discussions/29"},{"author":"PaulRBerg","body":"In the [Flow Internal Feedback](https://github.com/sablier-labs/v2-interfaces/discussions/1203), there have been several points raised about the 'Expected streams' functionality.\r\n\r\nHere's my suggestion — rename it to 'Pending txs' — in order to align our app with the terminology used throughout the industry standards (Uniswap, 1inch, etc.).\r\n\r\nP.S. we will likely need to implement use-case-centric terminology within the modal, i.e., \"pending stream creation\", \"pending airdrop\", etc.\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-12-05T13:26:15Z","labels":[],"number":1226,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor \"Expected streams\" to \"Pending txs\"","type":"discussion","updatedAt":"2024-12-19T16:25:38Z","url":"https://github.com/sablier-labs/interfaces/discussions/1226"},{"author":"razgraf","body":"In the near future we'll start working on our Multi-VM strategy, a.k.a. supporting Solana, Starknet etc. in our product series. \r\n\r\nIn terms of both product design and code architecture we're looking for inspiration and ideas for how to execute this as clean as possible. Our goals:\r\n\r\n- provide as close as a 1:1 experience between these chains as possible, design-wise\r\n- have a way to restrict access to only certain features in cases when we do an incremental release (e.g. we deploy only LL on Solana, but no Airstreams or LD at first)\r\n- abstract the chain logic to avoid spaghetti code and too many if-chainA-then-else-if-chainB conditions (we anticipated this in part with our `framework` in the `contracts` package)\r\n- ensure maximum coverage between VMs and adapt for missing features (e.g. Solana doesn't have allowances)\r\n\r\n---\r\n\r\nTo educate ourselves before we start developing towards the goals above, a list of multi-vm products already on the market would be a great start. Would love to also see some open-source apps which support multi-vm to study any potential patterns (in code) or things we can improve when we design this into our own codebase.","createdAt":"2024-07-15T13:43:10Z","labels":[],"number":1016,"repository":"sablier-labs/interfaces","state":"open","title":"Multi-VM product inspiration and strategy","type":"discussion","updatedAt":"2024-12-06T14:23:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/1016"},{"author":"tukwan","body":"### Proposal: Move `landing-labs` App to a separate repo\r\n\r\nThe `landing-labs` app isn’t actively developed and, as I understand, was primarily created to serve a specific purpose (eg. for banks). Keeping it in the monorepo introduces unnecessary overhead for an app that isn’t currently in use.\r\n\r\n\r\nI propose moving `landing-labs` to a separate repo, leaving the monorepo focused on actively developed apps only.\r\n\r\n#### **Benefits:**\r\n- **Streamlined Maintenance:** Removes unused apps, focusing the monorepo on active projects and simplifying management.  \r\n- **Faster Pipelines:** Reduces CI/CD (+local) complexity and time spent on unnecessary checks and repo configurations.  \r\n- **Improved Developer Experience:** Reduces cognitive load, such as file search confusion (`landing-labs` vs. `landing`), navigating code, handling configs changes and custom packages updates, managing types / lint checks, dealing with extra dependencies, and clarifying app ownership.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nLet me know your thoughts!\r\n","createdAt":"2024-11-28T07:36:50Z","labels":[],"number":1205,"repository":"sablier-labs/interfaces","state":"closed","title":"Move \"landing-labs\" App to a separate repo","type":"discussion","updatedAt":"2024-12-06T10:06:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/1205"},{"author":"PaulRBerg","body":"## Context\r\n\r\nI'm opening this issue to collate my thoughts and suggest a list of desired features for the front-end SDK.\r\n\r\nAs mentioned in https://github.com/sablier-labs/v2-interfaces/discussions/382, we've started getting good validation for our [broker fee model](https://github.com/sablier-labs/v2-core/discussions/145).\r\n\r\nBrokers are third-party UIs that integrate the Sablier V2 protocol, but as we all know well, building a UI for V2 is no easy feat. We've invested a significant amount of sweat into developing V2 Interfaces. These efforts deserve to be packaged in a publicly accessible front-end SDK to streamline the integration process for Sablier V2.\r\n\r\n## Goal\r\n\r\nGenerally, what we want is for brokers to be able to install a `@sablier/v2-sdk` package that provides the necessary tooling for bootstrapping a Sablier-powered UI. The use cases are broker integrations, hackathon projects, etc.\r\n\r\n## Features\r\n\r\nThis is what I think should be included in the SDK:\r\n\r\n- [ ] Contract types (re-exporting the output generated by `abitype`)\r\n- [ ] Subgraphs and GraphQL models\r\n- [ ] Streaming-related TypeScript types\r\n- [ ] Themes, as we want our branding to be present on as many websites as possible (\"Powered by Sablier\")\r\n- [ ] Calculation functions, e.g., for fees (these are not implemented now, but they could go in the `utils` packages)\r\n- [ ] Proxy management (the core logic would go in [PRBProxy](https://github.com/PaulRBerg/prb-proxy), but there may be some Sablier-specific features)\r\n- [ ] Storybooks\r\n- [ ] Some simple xState machines (maybe?)\r\n\r\nHowever, this is probably an incomplete list. Feel free to edit my comment to add your ideas directly, @razgraf, @gavriliumircea.\r\n\r\n## Related\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/49\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/3\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/327\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/382\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/386","createdAt":"2023-06-24T11:27:44Z","labels":["backlog"],"number":454,"repository":"sablier-labs/interfaces","state":"open","title":"Front-end SDK","type":"discussion","updatedAt":"2024-12-05T19:03:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/454"},{"author":"razgraf","body":"<img width=\"1433\" alt=\"Screenshot 2024-09-29 at 11 47 48\" src=\"https://github.com/user-attachments/assets/44496834-6645-4005-a0a9-28af56cee21f\">\r\n\r\nRecently got to play with the [Ethereum Follow Protocol](https://x.com/efp) and saw they reward you with a POAP after you finish signing up. Would be nice to do the same for Flow users once we launch (+ advertise it).","createdAt":"2024-09-29T08:50:06Z","labels":[],"number":1096,"repository":"sablier-labs/interfaces","state":"open","title":"POAP for creating or withdrawing from a stream for Flow's launch","type":"discussion","updatedAt":"2024-11-29T01:24:12Z","url":"https://github.com/sablier-labs/interfaces/discussions/1096"},{"author":"razgraf","body":"![image](https://github.com/user-attachments/assets/a7c770da-f6dc-41fa-8df2-b810e0175475)","createdAt":"2024-11-22T08:36:26Z","labels":[],"number":1201,"repository":"sablier-labs/interfaces","state":"closed","title":"Claim call-out / notification in the Airstream profile","type":"discussion","updatedAt":"2024-12-02T12:14:13Z","url":"https://github.com/sablier-labs/interfaces/discussions/1201"},{"author":"PaulRBerg","body":"Similar to Safe's trademark policy:\r\n\r\nhttps://safe.global/trademark\r\n\r\nNote: this will stay on hold until we receive the content from our lawyers.\r\n\r\nIt remains TBD if this will be a PDF or an HTML page.","createdAt":"2024-11-15T07:36:12Z","labels":["type: feature","effort: medium","work: clear"],"number":1193,"repository":"sablier-labs/interfaces","state":"closed","title":"Trademark policy","type":"discussion","updatedAt":"2024-11-20T11:17:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/1193"},{"author":"razgraf","body":"A user requested a Farcaster frame that enables claiming an airstream. Would be pretty cool to build. \r\n\r\nNot high priority at the moment since it's the first request we get. Maybe if we start onboarding more Farcaster-first projects, then we have a bigger incentive to deliver this.\r\n\r\n<img width=\"565\" alt=\"Screenshot 2024-11-13 at 19 06 56\" src=\"https://github.com/user-attachments/assets/4335a47e-e525-4c43-8773-784ed3a43cc0\">\r\n\r\n\r\n[Reference](https://warpcast.com/usersteen.eth/0x0ed5897b) from the customer who requested this.","createdAt":"2024-11-13T17:08:37Z","labels":[],"number":1187,"repository":"sablier-labs/interfaces","state":"open","title":"Farcaster frames for Airstreams","type":"discussion","updatedAt":"2024-11-18T11:51:11Z","url":"https://github.com/sablier-labs/interfaces/discussions/1187"},{"author":"PaulRBerg","body":"As evidenced by the following questions on Crisp, the \"claim\" terminology is pretty confusing:\r\n\r\n<img width=\"250\" alt=\"claim-confusion-1\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/13bf3779-4ec8-4dc9-a6c7-ca98c4fa800c\">\r\n<img width=\"400\" alt=\"claim-confusion-2\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/64e60089-a731-4cd3-acd1-0d2d7c7fd652\">\r\n<img width=\"600\" alt=\"claim-confusion-3\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/f17c0910-4dc0-4c3d-83cf-c5f5fd5139d2\">\r\n\r\nWe should find an alternative wording. What about?\r\n\r\n- Collect\r\n- Collect stream\r\n- Mint NFT\r\n- Mint stream NFT\r\n- Start\r\n- Start stream\r\n- Start vesting\r\n\r\nRFC from @razgraf, @gavriliumircea, and @maxdesalle.","createdAt":"2024-02-04T21:25:14Z","labels":[],"number":853,"repository":"sablier-labs/interfaces","state":"closed","title":"Finding alternative for the \"claim\" terminology in the Airstreams UI","type":"discussion","updatedAt":"2024-11-17T15:38:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/853"},{"author":"razgraf","body":"<img width=\"717\" alt=\"Screenshot 2024-11-15 at 13 40 24\" src=\"https://github.com/user-attachments/assets/9be2a1a7-01ee-437c-b209-9ad69a38f3a9\">\r\n","createdAt":"2024-11-15T11:40:30Z","labels":[],"number":1196,"repository":"sablier-labs/interfaces","state":"open","title":"Granular allowance vs. infinite allowance","type":"discussion","updatedAt":"2024-11-15T11:40:31Z","url":"https://github.com/sablier-labs/interfaces/discussions/1196"},{"author":"IaroslavMazur","body":"Sharing some feedback on the design of the main page of our website, received when discussing Sablier with a fellow designer at Devcon.\r\n\r\nIn general, she was impressed by it. 2 things she was confused about, however, were (see the screenshot below for details):\r\n1. the fact that the gliding squares are empty (she said it feels like something is missing there - e.g., the logos of our partners or smth)\r\n\r\n1. how much space the \"Spheres-n-Squares\" section is taking, as a whole (wrt the amount of information it communicates)\r\n\r\ncc @razgraf @gavriliumircea\r\n\r\n![image](https://github.com/user-attachments/assets/5539ef94-7cf4-4ed4-9536-a40c9608691c)","createdAt":"2024-11-15T08:16:03Z","labels":[],"number":1192,"repository":"sablier-labs/interfaces","state":"open","title":"Main page feedback from a designer at Devcon","type":"discussion","updatedAt":"2024-11-15T10:50:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/1192"},{"author":"razgraf","body":"While discussing with @tukwan we figured we could test how the next app-router works and get a better view of the migration costs by experimenting with the landing page. It doesn't have any server routes or complex logic, so it's a great way to learn. \r\n\r\nAdded benefit as mentioned by Nick would be load speed, therefore better SEO scores.\r\n\r\nIf it works smooth, we could consider it for the app as well to fix #198, #526 (once and for all).","createdAt":"2024-11-14T10:27:24Z","labels":[],"number":1188,"repository":"sablier-labs/interfaces","state":"open","title":"Experiment with app router on landing website","type":"discussion","updatedAt":"2024-11-14T10:27:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/1188"},{"author":"PaulRBerg","body":"Recently, an Airstreams user has been confused by the lack of any timezone-related information in the date format in the CSV:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0f489344-fe46-4554-97bf-37debe54b3ed\"/>\r\n\r\n[This is not the first time](https://github.com/sablier-labs/v2-interfaces/issues/933) this has happened. There's an open issue about implementing an UTC helper as a tooltip.\r\n\r\nHowever, I'm not convinced that that is the best solution. Why not request users to specify the timezone in the template?\r\n\r\nThat would make the timezone **explicit** and should drastically lower the number of user support inquiries related to timezones. Additionally, it would prevent errors where users think that the template uses UTC or some other timezone rather than their local timezone.\r\n\r\nAny thoughts @sablier-labs/frontend?","createdAt":"2024-06-29T08:34:48Z","labels":[],"number":995,"repository":"sablier-labs/interfaces","state":"closed","title":"The problem of timezones in the date format in the CSV","type":"discussion","updatedAt":"2024-11-12T17:05:15Z","url":"https://github.com/sablier-labs/interfaces/discussions/995"},{"author":"razgraf","body":"We have some Cypress tests for the main client app that have now become obsolete as we've updated a ton of things in the UI. We should decide if we want to\r\n1. update the tests and get them to work again\r\n2. drop the tests ones that aren't very important ","createdAt":"2024-08-30T12:04:34Z","labels":[],"number":1056,"repository":"sablier-labs/interfaces","state":"open","title":"Think about our Cypress strategy","type":"discussion","updatedAt":"2024-11-11T09:29:03Z","url":"https://github.com/sablier-labs/interfaces/discussions/1056"},{"author":"razgraf","body":"## Context\r\n\r\nA while ago @gavriliumircea gave Wallet Connect's [AppKit](https://docs.reown.com/appkit/next/core/installation) a shot. It turns out it's lacking a set of features we need, which makes it less of a hot-swap.\r\n\r\nWe've let the team know about our requirements, and should keep an eye on future releases.\r\n\r\n![Screenshot 2024-10-22 at 11 48 42](https://github.com/user-attachments/assets/c75c077d-6af2-495f-9e01-75af287eb82c)\r\n\r\n## Reasons\r\n\r\nThere are a couple of reasons to switch:\r\n1. Potentially better integration with Wallet Connect (and hopefully getting rid of the `chainId: undefined` problem)\r\n   - #883\r\n2. One of the Wallet Connect team members mentioned RainbowKit might become stale in the future (although it's still being updated as we speak)\r\n   <img width=\"721\" alt=\"Screenshot 2024-10-22 at 11 58 46\" src=\"https://github.com/user-attachments/assets/fe2c1782-abb5-474e-8c58-2b9b6ed61d40\">\r\n\r\n\r\n## Problems\r\n\r\n### Default Chain\r\n\r\nWe offer an offline chain-picking capability. \r\n\r\nIts main use was for the Safe integration (Safe x Wallet Connect to be exact, not the native one) as the multisig required you to pre-pick a chain identifier on the target app that was the same as the one of the multisig you were preparing to connect with. Opened a Safe on Sepolia? The Wallet Connect link has to be pre-configured to point at Sepolia. Context in:\r\n\r\n- #552\r\n\r\nWhile AppKit has a [`defaultNetwork`](https://docs.reown.com/appkit/react/core/options#defaultnetwork) setting, it can only be configured once. The `createAppKit` instantiator is a top-level singleton, as opposed to the setup we use right now with `rainbow.getDefaultWallets` and `wagmi.createConfig` inside a re-callable `configure` method.\r\n\r\n### Temporary Solution\r\n\r\nAs stated by their team, there may be a way to achieve the default network switch, but it's not native, nor long-term viable.\r\n\r\n<img width=\"714\" alt=\"Screenshot 2024-10-22 at 11 50 33\" src=\"https://github.com/user-attachments/assets/bbe17fba-d23f-46cd-838e-14226b5584ce\">\r\n\r\n## Custom Terms\r\n\r\nWhile AppKit can showcase a privacy policy and terms through [2 dedicated parameters](https://docs.reown.com/appkit/react/core/options#termsconditionsurl), it cannot show custom content. Right now, we have a piece of _legalese_ at the bottom of RainbowKit which we need to preserve.\r\n\r\n<img width=\"661\" alt=\"Screenshot 2024-10-22 at 11 54 18\" src=\"https://github.com/user-attachments/assets/400681fe-df09-4f2e-9c14-533d2d29d7ea\">\r\n\r\n","createdAt":"2024-10-22T09:03:51Z","labels":[],"number":1135,"repository":"sablier-labs/interfaces","state":"open","title":"Difficulties integrating Wallet Connect's AppKit","type":"discussion","updatedAt":"2024-11-04T12:42:25Z","url":"https://github.com/sablier-labs/interfaces/discussions/1135"},{"author":"PaulRBerg","body":"The social media preview that gets generated for streams is awesome. However, it's only a visual item - the description is the same as that for sablier.com\r\n\r\nCould we generate it dynamically?\r\n\r\n@sablier-labs/frontend\r\n\r\n<img width=\"400\" alt=\"SCR-20240802-lflf\" src=\"https://github.com/user-attachments/assets/e27ffa64-8c42-4633-96f0-0ed10f531623\">\r\n","createdAt":"2024-08-02T09:28:55Z","labels":[],"number":1031,"repository":"sablier-labs/interfaces","state":"open","title":"Generate social media description dynamically","type":"discussion","updatedAt":"2024-11-02T17:50:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/1031"},{"author":"PaulRBerg","body":"In line with the [use-case centric navigation](https://github.com/sablier-labs/v2-interfaces/discussions/880) and our ongoing development on Sablier Flow, I would like to also suggest a use-case centric social media preview card.\r\n\r\nTake, for instance, this recent user $XP. They have [announced](https://x.com/xpdotfun/status/1849515750417105381) their vesting plan on social media, and the preview card looks like this:\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/f16abaa7-be36-4cc4-84ee-4dfec7d53df4\"/>\r\n\r\nNotice the dissonance between what they say in the tweet and what's immediately visible in the preview:\r\n\r\n- They say: \"locked and vested for 18 months\"\r\n- We say: \"Lockup Stream\"\r\n\r\nWe should say something more use-case specific, such as \"Vesting XP 1M\". And the same for Flow streams and airdrop campaigns.\r\n\r\ncc @sablier-labs/frontend and @maxdesalle","createdAt":"2024-11-02T14:33:11Z","labels":[],"number":1160,"repository":"sablier-labs/interfaces","state":"closed","title":"Use-case centric social media previews","type":"discussion","updatedAt":"2024-11-02T17:43:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/1160"},{"author":"PaulRBerg","body":"I am opening this discussion to collate use cases enabled by Account Abstraction. Many of these overlap with the use cases enabled by the [proxy architecture](https://github.com/sablier-labs/v2-periphery/discussions/11).\r\n\r\n- Wrap and create stream\r\n- Withdraw and deposit to Aave\r\n- [Withdraw and swap](https://github.com/sablier-labs/v2-interfaces/discussions/1043)\r\n- Better UX for [ERC-4626 vault tokens](https://github.com/sablier-labs/v2-interfaces/discussions/569)\r\n- Other kinds of [onchain actions](https://github.com/sablier-labs/v2-interfaces/discussions/1040); related: [onthis.xyz](https://onthis.xyz/)\r\n\r\n@razgraf feel free to edit the post directly to include your ideas.\r\n\r\ncc @sablier-labs/engineers","createdAt":"2024-10-30T13:25:09Z","labels":[],"number":1154,"repository":"sablier-labs/interfaces","state":"open","title":"Use cases enabled by Account Abstraction","type":"discussion","updatedAt":"2024-10-30T13:25:11Z","url":"https://github.com/sablier-labs/interfaces/discussions/1154"},{"author":"PaulRBerg","body":"Similar to https://github.com/sablier-labs/v2-interfaces/issues/1107, would it be possible to ignore extraneous columns in CSV imports?\r\n\r\nSome users may want to name/ label their rows with, e.g., the employee name.\r\n\r\nHere's a dummy spreadsheet created by a Sablier user, which contained an extra _Name_ column:\r\n\r\n![Screenshot 2024-10-20 at 9 45 28 AM](https://github.com/user-attachments/assets/2ed85864-ead8-4079-bfe8-8e9e77a00906)\r\n\r\nRFC @sablier-labs/frontend","createdAt":"2024-10-20T18:01:25Z","labels":[],"number":1131,"repository":"sablier-labs/interfaces","state":"closed","title":"Ignore extraneous columns in CSV imports","type":"discussion","updatedAt":"2024-10-21T10:30:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/1131"},{"author":"PaulRBerg","body":"Google has correctly inferred that `app.sablier.com` is the canonical URL for `beta.sablier.com` and `staging.sablier.com`.\r\n\r\n<img width=\"400\" alt=\"SCR-20240923-mqdy\" src=\"https://github.com/user-attachments/assets/193917d7-77a4-49b1-9e22-f6fa0723a131\">\r\n\r\nHowever, it would be better for us (the user) to explicitly define them as non-canonical by adding a `robots.txt` file with the following contents:\r\n\r\n```txt\r\nUser-agent: *\r\nDisallow: /\r\n```\r\n\r\nOr, alternatively, this HTML tag:\r\n\r\n```html\r\n<meta name=\"robots\" content=\"noindex, nofollow\">\r\n```\r\n\r\nOr maybe we don't even need these URLs? Maybe we could simply use Vercel URLs, i.e., `sablier-beta.vercel.app`?\r\n\r\ncc @sablier-labs/frontend\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/1078, https://github.com/sablier-labs/v2-interfaces/issues/1073","createdAt":"2024-09-23T13:14:59Z","labels":[],"number":1079,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the beta and staging subdomains non-canonical","type":"discussion","updatedAt":"2024-10-17T11:48:41Z","url":"https://github.com/sablier-labs/interfaces/discussions/1079"},{"author":"PaulRBerg","body":"Open-ended discussion, but I wonder if the following support inquiries couldn't have been prevented if we had displayed more specific errors when parsing the CSV files?\r\n\r\n@sablier-labs/frontend, is there any way to:\r\n\r\n1. Detect that the numbers are formatted as strings instead of numbers in the CSV, and indicate to the user that they should use a number format?\r\n2. Detect that the date format is incorrect, i.e. not `YYYY-MM-DD`, and let the user know about this?\r\n\r\n<img width=\"300\" alt=\"CSV - Double Quotes\" src=\"https://github.com/user-attachments/assets/08977663-c93c-4488-83de-937bfd04c567\">\r\n\r\n<img width=\"300\" alt=\"CSV - Date Format\" src=\"https://github.com/user-attachments/assets/c5d9b939-98ea-47d2-b019-2e8bef3e2e07\">","createdAt":"2024-10-08T12:48:18Z","labels":[],"number":1109,"repository":"sablier-labs/interfaces","state":"closed","title":"More specific errors when parsing CSV to improve UX and reduce inbound support inquiries","type":"discussion","updatedAt":"2024-10-09T10:41:44Z","url":"https://github.com/sablier-labs/interfaces/discussions/1109"},{"author":"razgraf","body":"To improve UX in our v2 app we chose NextJS with its full support for server-client communication. As outlined in the [official docs](https://nextjs.org/docs/basic-features/data-fetching/overview) there are quite a few strategies for data fetching between the server-generated files and their client counterparts.\r\n\r\n![Screenshot 2023-03-05 at 15 02 01](https://user-images.githubusercontent.com/15740806/222961949-1c52aea7-2073-4013-8eb7-56c90e589065.png)\r\n\r\n### Server side rendering (run time)\r\n\r\nThis is the most basic form and it makes use of the `getServerSideProps` utility.\r\n\r\n**How it works**\r\n\r\nThe server will perform some queries before rendering a static page and sending it to the client-side consumer. The client will then use that pre-fetched data and pre-rendered page and improve on it. From the [docs](https://nextjs.org/learn/foundations/how-nextjs-works/rendering):\r\n\r\n> On the client, the HTML is used to show a fast non-interactive page, while React uses the JSON data and JavaScript instructions to make components interactive (for example, attaching event handlers to a button). This process is called hydration.\r\n\r\n\r\n**Caveats**\r\n\r\nThe `getServerSideProps` utility will run in the following [scenarios](https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props#when-does-getserversideprops-run):\r\n\r\n> - When you request this page directly, getServerSideProps runs at request time, and this page will be pre-rendered with the returned props\r\n> - When you request this page on client-side page transitions through [next/link](https://nextjs.org/docs/api-reference/next/link) or [next/router](https://nextjs.org/docs/api-reference/next/router), Next.js sends an API request to the server, which runs getServerSideProps\r\n\r\nWith the way the V2 app works, we'd like to request the server-side query **only** when the users visits the stream-profile page during a new session. If already in a client-session, it should rely on client-fetched data (e.g. own or searched streams) or perform a direct client-side request. This means we need to make sure `getServerSideProps` only runs on the first server call.\r\n\r\n### Static generation (build time)\r\n\r\nThis makes use of `getStaticPaths` and `getStaticProps`.\r\n\r\nThis strategy will pre-render pages at build time: meaning you have to anticipate most of the pages that should be pre-rendered. Unfortunately, for Sablier V2 we need (1) up-to-date data and (2) we expect thousands of streams getting created across multiple chains. This doesn't make SSG or ISR very attractive at the moment.\r\n\r\n📒 Read: [Next.js: Server-side Rendering vs. Static Generation](https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation#e-commerce-next.js-app-example)\r\n\r\n### Incremental re-generation (mix)\r\n\r\n📒 Read: [Netlify: Incremental Static Regeneration: Its Benefits and Its Flaws](https://www.netlify.com/blog/2021/03/08/incremental-static-regeneration-its-benefits-and-its-flaws/)\r\n\r\n> When you have a user come to your page, you want them to see the most up-to-date version, immediately. With ISR the first visitor to a page will not see that. They will always see a fallback first. And then later, if the data gets stale, the first visitor to see that cached page will see the out-of-date data first before it revalidates. Once again, this inconsistent experience can be pretty difficult to debug if your users experience negative side-effects as a result of old/unbuilt pages.\r\n","createdAt":"2023-03-05T13:06:51Z","labels":[],"number":198,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: SSR strategies","type":"discussion","updatedAt":"2024-10-09T10:31:59Z","url":"https://github.com/sablier-labs/interfaces/discussions/198"},{"author":"PaulRBerg","body":"This is a private message that has informed us that Astaria will use Sablier to distribute their $STAR token:\r\n\r\n<img width=\"900\" src=\"https://github.com/user-attachments/assets/3e28b809-9d32-469b-bdd4-94d9db9a4c7a\"/>\r\n\r\nAs expected, there's some friction with collecting user addresses. I wonder if there's any way to improve the UX?\r\n\r\nMaybe integrate with Dynamic and source Ethereum addresses from their API? As in, make the recipient field in the create stream form accept email addresses, and resolve them to an Ethereum address.\r\n\r\nP.S. I'm not sure whether this is technically possible with Dynamic specifically, but the idea is interesting and worth exploring.\r\n\r\ncc @sablier-labs/frontend and @maxdesalle for feedback","createdAt":"2024-09-09T14:15:58Z","labels":[],"number":1061,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrating with an email-to-address platform like Dynamic","type":"discussion","updatedAt":"2024-10-07T13:24:25Z","url":"https://github.com/sablier-labs/interfaces/discussions/1061"},{"author":"PaulRBerg","body":"I don't have a solution, but I do want to point out a problem I recently encountered while searching airstream campaigns on different chains.\r\n\r\nIt took me a whole minute to see the chain name highlighted in red:\r\n\r\n<img width=\"400\" alt=\"SCR-20240618-sqrl\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4140c7d9-fae0-45a3-b677-268d8d157d4b\">\r\n\r\nI was switching the chain using the chain picker in the top-right corner, thinking that that's what will refresh the list.\r\n\r\nI suggest making it bigger or somehow making it clearer that the user is seeing the airstreams on a particular chain.\r\n\r\nOr better yet - what if we displayed all airstreams by default, across all chains?\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-06-18T18:34:10Z","labels":[],"number":976,"repository":"sablier-labs/interfaces","state":"closed","title":"Improving the UX when searching cross-chain airstreams","type":"discussion","updatedAt":"2024-10-03T11:27:15Z","url":"https://github.com/sablier-labs/interfaces/discussions/976"},{"author":"razgraf","body":"As our design system gets coded into existence, we find ourselves lacking a place to showcase different components and their behaviors.  \r\n\r\n**Temporary solution**\r\nFor now I'm using the Dashboard page of the app to visually test the implementation for various elements (inputs, tables, buttons, modals, icons, progress bars etc.). \r\n\r\n\r\n**Goal**\r\nWe should integrate [Storybook](https://storybook.js.org/docs/react/get-started/introduction) into our repository. This could provide:\r\n- A great opportunity to decouple components and provide them as reusable elements as much as possible\r\n- A great place to showcase components already implemented for all team members\r\n- Examples of usage\r\n- A way to show all flavors and behaviors of a specific component (e.g. buttons with/without icons, solid color/gradient/outline etc.)\r\n\r\n\r\n<img width=\"1715\" alt=\"Screenshot 2022-09-24 at 18 43 43\" src=\"https://user-images.githubusercontent.com/15740806/192106825-1f1f5ef1-4591-491f-b2ed-03827cf1cb9e.png\">\r\n","createdAt":"2022-09-24T15:44:23Z","labels":["backlog"],"number":3,"repository":"sablier-labs/interfaces","state":"open","title":"Feature request: Storybook for UI design system","type":"discussion","updatedAt":"2024-09-28T14:37:33Z","url":"https://github.com/sablier-labs/interfaces/discussions/3"},{"author":"razgraf","body":"This is an unordered, ad-hoc thread for things we'll want to take care of once we finish implementing the initial Flow sprint. It will include lists of features (pushed towards the tail end of our sprints), refactors of shared or could-be-shared components etc.\r\n\r\nCC: @gavriliumircea please feel free to edit the posts in this thread and add items","createdAt":"2024-09-24T14:01:42Z","labels":[],"number":1081,"repository":"sablier-labs/interfaces","state":"closed","title":"Preparations for the Flow/Lockup refactor","type":"discussion","updatedAt":"2024-11-09T17:09:51Z","url":"https://github.com/sablier-labs/interfaces/discussions/1081"},{"author":"smol-ninja","body":"Since the [Flow dashboard design](https://www.figma.com/design/hn1BBR5KXrMjNA8VyOt2AF/V2%3A-UI%2C-Labs?node-id=4087-35725&t=6jFMvSfMVTXxhPfF-4) has not covered all the possible states that a stream can have, the following table tries to create an exhaustive list of what states could be possible in practice.\r\n\r\n| S.No |          | Unused | Withdrawable/Available | Debt | Comment         |\r\n| ---- | -------- | ------ | ---------------------- | ---- | --------------- |\r\n| 1    | On-going | Yes    | Yes                    | No   |                 |\r\n| 2    | On-going | No     | Yes                    | Yes  |                 |\r\n| 3    | On-going | No     | No                     | Yes  |                 |\r\n| 4    | Paused   | Yes    | Yes                    | No   | Can have reason |\r\n| 5    | Paused   | Yes    | No                     | No   | Can have reason |\r\n| 6    | Paused   | No     | Yes                    | Yes  | Can have reason |\r\n| 7    | Paused   | No     | No                     | Yes  | Can have reason |\r\n| 8    | Paused   | No     | No                     | No   | Can have reason |\r\n| 9    | Voided   | Yes    | Yes                    | No   |                 |\r\n| 10   | Voided   | Yes    | No                     | No   |                 |\r\n| 11   | Voided   | No     | No                     | No   |                 |","createdAt":"2024-08-24T10:05:58Z","labels":[],"number":1054,"repository":"sablier-labs/interfaces","state":"closed","title":"Different states of a Flow stream","type":"discussion","updatedAt":"2024-09-20T09:19:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/1054"},{"author":"PaulRBerg","body":"I suggest removing this information from the \"Manage List\" sidebar when selecting multiple streams:\r\n\r\n<img width=\"400\" alt=\"SCR-20240911-oujc\" src=\"https://github.com/user-attachments/assets/4ddf8484-2f75-4d9f-80a3-57ab21ead497\">\r\n\r\nThis is a technical bit of knowledge. Users don't care about smart contract releases + they can't infer how the releases are mapped onto ID aliases.\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-09-11T13:59:09Z","labels":[],"number":1064,"repository":"sablier-labs/interfaces","state":"closed","title":"Users don't care about Sablier releases when selecting multiple streams","type":"discussion","updatedAt":"2024-09-16T16:35:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/1064"},{"author":"PaulRBerg","body":"One of the most frequently requested feature requests is the ability to earn a yield on the tokens being streamed in Sablier. Ideally, the yield would be retained [for the sender](https://github.com/sablier-labs/v2-core/issues/643), but allowing the recipient to get the yield would be a good first step.\r\n\r\nTo enable this feature, we have to use [ERC-4626](https://ethereum.org/en/developers/docs/standards/tokens/erc-4626/) vault tokens ([rebase tokens cannot be integrated into pooled contracts like Sablier](https://twitter.com/PaulRBerg/status/1686457342106157060)).\r\n\r\nNow comes the problem: the recipient doesn't want some fancy [vault token](https://erc4626.info/vaults/) in their wallet. They want USDC. How do we make it easy for the recipient to obtain USDC?\r\n\r\nI think there are two ways:\r\n\r\n1. A bespoke unwrap functionality that opens a modal after the user withdraws tokens from a vault stream. This functionality could also be added to \"Account settings\".\r\n2. Write a bespoke contract that handles the unwrapping part, and have the user approve this bespoke contract as an NFT operator that can call `withdraw` on their behalf. We've discussed a similar idea in https://github.com/sablier-labs/v2-periphery/discussions/12.\r\n\r\nI don't know which approach is better. Both have several pros and cons.\r\n\r\nSeparately, I remain unconvinced that investing a great deal of effort into making Lockup streaming work better for payroll is a good idea in light of the reality that a continuous stream (LlamaPay-style, or V3) is a better fit.","createdAt":"2023-08-23T11:38:37Z","labels":[],"number":569,"repository":"sablier-labs/interfaces","state":"closed","title":"How to improve the user experience of being streamed ERC-4626 tokens?","type":"discussion","updatedAt":"2024-10-30T13:17:58Z","url":"https://github.com/sablier-labs/interfaces/discussions/569"},{"author":"andreivladbrg","body":"@smol-ninja and I are encountering some issues with the `amount` parameter in `withdraw` as the stream gets delayed, we’re talking about small units of time - but since the withdraw function is public, this could become problematic when called very frequently. \r\n\r\nThe solution to this is to overwrite the `amount` passed with the smallest amount that respects `amount % rps == 0`.\r\n\r\nFor example, the recipient wishes to withdraw 10 tokens but receives `9.9932323232` tokens due to how rational math works and because `rps` isn’t a divisor for the amount.\r\nThis applies to only _ACTIVE_ streams, and not to paused/voided (which don't suffer of this problem).\r\n\r\nI am writing this to make the app development aware of the situation, and in case this would be problematic.","createdAt":"2024-09-16T11:48:18Z","labels":[],"number":1069,"repository":"sablier-labs/interfaces","state":"closed","title":"About future amount passed in `Flow.withdraw` function","type":"discussion","updatedAt":"2024-09-17T13:03:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/1069"},{"author":"PaulRBerg","body":"## User Feedback\r\n\r\nWe have recently received this feedback, which I find quite apt:\r\n\r\n<img width=\"350\" alt=\"craig-feedback-1\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b397ab99-912b-4362-b009-cc21fc1fa5a9\">\r\n<img width=\"350\" alt=\"craig-feedback-2\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5b6366e6-2e5c-4959-ad10-97144200e596\">:\r\n\r\n## My Comments\r\n\r\nAs I've argued at length [here](https://github.com/sablier-labs/v2-core/discussions/708), there's value in memetic clarity. By using the terms \"streams\" and \"airstreams\", we're fighting an uphill battle. Users and LLMs will be confused.\r\n\r\nTBH, I have never been satisfied by the introduction of the \"Streams/ Airstreams\" dichotomy in the navigation bar. The category structure seems to be off because Airstreams are built on top of Streams.\r\n\r\n## Proposal\r\n\r\n- Re-organize our navigation bar by:\r\n    - Removing \"Streams\" and \"Airstreams\"\r\n    - Introducing new categories: \"Vesting\", \"Drops\", and \"Payroll\"\r\n    - In the future, introduce a \"Marketplace\" category (ref [here]())\r\n- At the beginning, \"Payroll\" would be completely equivalent to the \"Vesting\" UI, except maybe for the cliffed shapes, which can be disregarded here.\r\n- In the future, when we roll out the OpenEnded smart contract system, the Payroll view would be enhanced by the open-ended functionality\r\n- Maintain backward-compatibility via redirects, e.g., from `app.sablier.com/airstreams` to `app.sablier.com/drops`\r\n\r\n### Notes\r\n\r\n- It is worth noting that our competitors are already implementing something like what I'm suggesting here (ref [here](https://github.com/sablier-labs/company-discussions/discussions/3))\r\n- We can still refer to \"Drops\" as \"Airstreams\" in the copyright.\r\n\r\n## Consequences and Analysis\r\n\r\nAccepting this proposal would address multiple problems in one fell swoop:\r\n\r\n- Terminological clarity (\"vesting\" instead of \"streams\") - users think in terms of concrete use cases, not abstract engineering categories\r\n    - We can talk about money streaming on Wikipedia and in our whitepapers and other academic-ish work\r\n- Prepare the UI for the inevitability of the [OpenEnded](https://github.com/sablier-labs/v2-open-ended) product\r\n- Improve our SEO\r\n\r\nThe only downside I can think is a potential \"pigeonhole\" effect. There might be users who are using Sablier for non-vesting, non-airdrop, and non-payroll use cases. By using concrete use cases instead of abstract categories, these users may worry that Sablier is no longer a good fit for them. However, this user base should be a small contingent - otherwise, we would have heard about them.\r\n\r\n## RFC\r\n\r\nCc @sablier-labs/everybody.\r\n\r\nThe key question to answer is: **do we really care more about memetic pageantry than user growth** (as a result of good SEO, easy memetic comprehensibility, etc.)?\r\n\r\nI should hope that we do not.\r\n\r\nNote that this discussion touches upon the issues debated in all the following discussions:\r\n\r\n- https://github.com/sablier-labs/company-discussions/discussions/32\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/601\r\n- https://github.com/sablier-labs/company-discussions/discussions/34\r\n- https://github.com/sablier-labs/v2-core/discussions/708\r\n- https://github.com/sablier-labs/company-discussions/discussions/3","createdAt":"2024-02-09T13:44:12Z","labels":["type: feature"],"number":880,"repository":"sablier-labs/interfaces","state":"closed","title":"Use-case centric navigation UI/UX","type":"discussion","updatedAt":"2024-09-10T13:23:43Z","url":"https://github.com/sablier-labs/interfaces/discussions/880"},{"author":"PaulRBerg","body":"*This suggestion was originally made by @IaroslavMazur on July 19, 2023 on [Canny](https://github.com/sablier-labs/v2-interfaces/issues/780). I have moved it here given that it's an internal request.*\r\n\r\nHow about instead of dedicating space for the “change date format“ functionality (via a button), the date format would change when the date text is clicked directly (such that the text appears clickable, of course)?\r\n\r\n1. Aside from reducing the visual burden that the user needs to bear, this would also make the functionality reside where it’s most suited (in the mind of the user, that is: it feels logical to click on a text - and have it change its format).\r\n2. I’ve seen this technique (that I’m suggesting) used in many other UIs Attached to the post, there's an image containing the current version of the date text.\r\n\r\ncc @sablier-labs/frontend\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/826893a3-534f-4bc4-a471-660aa6fcfc65\"/>","createdAt":"2024-09-10T13:03:26Z","labels":[],"number":1063,"repository":"sablier-labs/interfaces","state":"open","title":"New way of changing date format in created streams","type":"discussion","updatedAt":"2024-09-10T13:03:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/1063"},{"author":"maxdesalle","body":"It would be interesting to experiment with \"onchain actions\" available directly on the stream page for the recipient, which could open doors to monetization opportunities for us.\r\n\r\n**Example:** a button that directly deposits the streamed funds from the Sablier contracts to Aave.","createdAt":"2024-08-05T13:35:02Z","labels":[],"number":1040,"repository":"sablier-labs/interfaces","state":"open","title":"Onchain Actions on Stream Page","type":"discussion","updatedAt":"2024-09-06T10:07:38Z","url":"https://github.com/sablier-labs/interfaces/discussions/1040"},{"author":"maxdesalle","body":"Had a call with someone from IoTeX, and they asked for the ability to have some sort of mechanism to group streams together, using tags, folders, whatever. Their use case is that they are planning to use Sablier for vesting, grants and payroll at the same time, and having the ability to group/tag these streams by type would be very helpful.\r\n\r\n@sablier-labs/frontend ","createdAt":"2024-09-02T19:39:58Z","labels":[],"number":1060,"repository":"sablier-labs/interfaces","state":"closed","title":"Stream folders/tags","type":"discussion","updatedAt":"2024-09-03T09:37:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/1060"},{"author":"PaulRBerg","body":"Here:\r\n\r\n<img width=\"300\" alt=\"SCR-20240802-rzet\" src=\"https://github.com/user-attachments/assets/fb807af6-f13b-430d-8f0a-ffe5712dfecd\">\r\n\r\nIt's not like the users will know what to do with the IDs.\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-08-02T17:52:33Z","labels":[],"number":1038,"repository":"sablier-labs/interfaces","state":"closed","title":"Is it really that useful to mention the IDs in the group stream confirmation modal?","type":"discussion","updatedAt":"2024-09-02T18:03:37Z","url":"https://github.com/sablier-labs/interfaces/discussions/1038"},{"author":"PaulRBerg","body":"The idea is to display a hint/ popup when the CSV files contain 10 recipients or fewer.\r\n\r\nThe main benefit would be cleansing the airstreams dashboard from campaigns with a low number of recipients, such as these:\r\n\r\n<img width=\"400\" alt=\"SCR-20240402-kney\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/69f1e8f0-8001-4bb4-a610-362620bffc14\">\r\n\r\nCc @razgraf @gavriliumircea.\r\n","createdAt":"2024-04-02T11:23:28Z","labels":[],"number":919,"repository":"sablier-labs/interfaces","state":"closed","title":"Nudge users towards stream when the recipient count is less than <10","type":"discussion","updatedAt":"2024-08-26T17:30:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/919"},{"author":"smol-ninja","body":"I recently discovered [Sparkfi](https://app.spark.fi/)'s sandbox mode, which lets users explore the app without needing a wallet or faucet tokens.\r\n\r\nThe main goal of supporting test networks is to allow users to experiment with the app using test tokens. However, acquiring test tokens to cover transaction fees on these networks has become increasingly challenging.\r\n\r\nSandbox mode offers a solution to this issue. Sparkfi uses Tenderly Sandbox for this purpose. As @razgraf pointed out, the challenge in implementing Sandbox mode for our app lies in our dependency on subgraphs for caching and formatted data. Unfortunately, as of today, Tenderly doesn't offer an indexer tool for their Sandbox.\r\n\r\nThat said, this could be a nice feature for our lite app. I'm starting this discussion to track and revisit this idea in the future.\r\n\r\n| 1 | 2 |\r\n| - | - |\r\n| <img width=\"285\" alt=\"Screenshot 2024-08-06 at 14 08 38\" src=\"https://github.com/user-attachments/assets/a2fd7ef0-ab91-49f7-a1fa-34873eaa3c12\"> | <img width=\"235\" alt=\"Screenshot 2024-08-06 at 14 08 42\" src=\"https://github.com/user-attachments/assets/557471ab-3676-42cc-8907-7a8056dbc809\"> |","createdAt":"2024-08-06T08:41:23Z","labels":[],"number":1041,"repository":"sablier-labs/interfaces","state":"open","title":"Sandbox Mode for Sablier App Preview","type":"discussion","updatedAt":"2024-08-06T08:41:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/1041"},{"author":"PaulRBerg","body":"It would be helpful if the default templates (specifically, `airstream-template` and `linear-duration-template`) contained additional sheets that showed the CSV format with ranges instead of durations.\r\n\r\nWhile it's possible that having multiple sheets would make the CSV file not loadable in the Sablier UI, I still think it would be good to do this - it would make users consciously aware of the existence of the range option for timing.\r\n\r\nOr maybe, alternatively, we could add a link to our [documentation site](https://docs.sablier.com/apps/guides/csv-support) somewhere in the spreadsheet?\r\n\r\nRFC @sablier-labs/frontend.\r\n\r\n<img width=\"400\" alt=\"SCR-20240802-lcqd\" src=\"https://github.com/user-attachments/assets/b284e48d-50bd-454c-8277-bd9e02ac83f9\">","createdAt":"2024-08-02T09:26:39Z","labels":[],"number":1030,"repository":"sablier-labs/interfaces","state":"closed","title":"Add multiple sheets in the default templates to educate users about the different timing options","type":"discussion","updatedAt":"2024-08-04T11:17:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/1030"},{"author":"PaulRBerg","body":"This label possibly creates confusion:\r\n\r\n<img width=\"350\" alt=\"SCR-20240802-mbnt\" src=\"https://github.com/user-attachments/assets/1f70024b-f6ff-4e76-8d03-cc2a3a07de53\">\r\n\r\nIt should be added only when the number of streams >= 2\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-08-02T10:31:33Z","labels":[],"number":1034,"repository":"sablier-labs/interfaces","state":"closed","title":"Hide \"Group of 1\" for single streams","type":"discussion","updatedAt":"2024-08-02T14:52:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/1034"},{"author":"PaulRBerg","body":"Requested by a potential Airstream user (SmartShift):\r\n\r\n| 1 | 2 | \r\n| - | - |\r\n| <img width=\"873\" alt=\"Screenshot 2024-07-23 at 14 38 45\" src=\"https://github.com/user-attachments/assets/f3b6ef80-eaa5-4934-aa74-7f6c0ced7dbe\"> | <img width=\"891\" alt=\"Screenshot 2024-07-23 at 14 38 38\" src=\"https://github.com/user-attachments/assets/a5b1e7a8-7b03-405a-af95-ea792c7eebd0\"> | ","createdAt":"2024-07-23T14:24:38Z","labels":[],"number":1025,"repository":"sablier-labs/interfaces","state":"open","title":"VPN protection in Airstreams geoblocking","type":"discussion","updatedAt":"2024-07-23T14:24:38Z","url":"https://github.com/sablier-labs/interfaces/discussions/1025"},{"author":"PaulRBerg","body":"As reported by this chap via email, CC @sablier-labs/frontend:\r\n\r\n<img width=\"300\" alt=\"SCR-20240715-marv\" src=\"https://github.com/user-attachments/assets/8da672a3-c542-44be-a4b6-5db60fe0521c\"> \r\n\r\n<img width=\"300\" alt=\"SCR-20240715-maqu\" src=\"https://github.com/user-attachments/assets/a28b2869-8493-4df4-9123-8d1966bc1b34\">\r\n","createdAt":"2024-07-15T10:29:10Z","labels":[],"number":1013,"repository":"sablier-labs/interfaces","state":"closed","title":"Should we do anything about the Referrer-Policy Header and the Content-Security-Policy?","type":"discussion","updatedAt":"2024-07-15T17:57:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/1013"},{"author":"razgraf","body":"The monthly shape is structured to have its first unlock one month after the start date. \r\nA user has asked for the initial unlock to happen right when the stream starts.\r\n\r\nTwo questions to consider addressing here:\r\n1. Is the shape explicit enough or should we add a note saying \"the first unlock will happen after the first month ends\"\r\n2. Should we develop an \"Initial Monthly\" shape (or adapt the current one somehow)\r\n\r\nMore feedback needed, but opening this to track similar conversations.\r\n\r\nWorth noting that we do provide some aid inside the checkout area (although they have to click on the dropdown to visualize their stream's details). Clicking on the chart feature would also help here (although not in the CSV mode).\r\n\r\n<img width=\"1321\" alt=\"Screenshot 2024-06-30 at 12 58 00\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/e14a62a9-8c3c-4cc0-b090-5a1eb69c1f31\">\r\n\r\n---\r\n\r\n\r\n<img width=\"541\" alt=\"Screenshot 2024-06-30 at 12 52 13\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/78e09622-f75f-4049-a120-aeb3567a9fbe\">\r\n","createdAt":"2024-06-30T10:06:50Z","labels":[],"number":998,"repository":"sablier-labs/interfaces","state":"closed","title":"Considerations for the first unlock for the monthly shape","type":"discussion","updatedAt":"2024-07-15T12:50:16Z","url":"https://github.com/sablier-labs/interfaces/discussions/998"},{"author":"PaulRBerg","body":"A user has asked if the time is mandatory, indicating that they don't really care about the value of this field:\r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/786328ae-c5dd-4ef8-8c9f-ead1de8de44b\" width=\"300\"/>\r\n\r\nWhat if we made the field optional and made it default to 12am at midnight (or 12pm at noon)?\r\n\r\n\r\nWe could still keep the time in the default templates, but enable this as an advanced feature for power users.\r\n\r\nAny feedback @sablier-labs/frontend?","createdAt":"2024-06-29T08:41:13Z","labels":[],"number":996,"repository":"sablier-labs/interfaces","state":"open","title":"Make time not mandatory in date format in CSV","type":"discussion","updatedAt":"2024-07-01T15:22:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/996"},{"author":"PaulRBerg","body":"The CSV format currently uses DD/MM/YYYY.\r\n\r\n<img width=\"500\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/31638d6d-811f-436f-847c-b04f73ecd8ff\"/>\r\n\r\nThis format is objectively less clear than YYYY-MM-DD, given that two digits are dynamic and can reflect either months or days, whereas years are static. It's easier and more 'hierarchical' to have something static at the beginning.\r\n\r\nCC @sablier-labs/frontend.\r\n\r\nhttps://chatgpt.com/share/e5026fcb-9b5b-4718-bc76-50df1c83f6e2","createdAt":"2024-06-29T08:23:25Z","labels":[],"number":993,"repository":"sablier-labs/interfaces","state":"closed","title":"Change date format to YYYY-MM-DD","type":"discussion","updatedAt":"2024-07-01T09:44:11Z","url":"https://github.com/sablier-labs/interfaces/discussions/993"},{"author":"PaulRBerg","body":"There are obvious business reasons for keeping the UI closed-source (as argued by @maxdesalle [here](https://github.com/sablier-labs/private-discussions/discussions/9)), and I'm not going to contest those in this thread. All I want to do is shed some light on the positive aspects of open-sourcing the UIs so that we can perform an analysis later on.\r\n\r\nBenefits:\r\n\r\n1. **Regulatory defense**. An open-source front-end makes for a stronger case in favor of the view that Sablier Labs need not be regulated for AML purposes.\r\n2. **Permissionless innovation**. Alternative EVMs and rollups would deploy and host the Sablier UI on our behalf, which would mean less maintenance work from our end. For example, see Scroll's [deployment of the Safe UI](https://safe.scroll.xyz/), or the story of the bajillion Uniswap forks (which have cemented Uniswap's brand as the top DEX in web3).\r\n3. **Ethos alignment**. The crypto community would appreciate the move. See how well the response has been [when we burned the admin key](https://twitter.com/Sablier/status/1355262405195026432).\r\n\r\nIt is also worth exploring the possibility of open-sourcing only the V1 UI.","createdAt":"2023-12-28T12:18:08Z","labels":["type: feature","backlog"],"number":783,"repository":"sablier-labs/interfaces","state":"closed","title":"Rationale for open-sourcing the user interfaces","type":"discussion","updatedAt":"2024-06-28T15:16:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/783"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nThe UI currently supports the following shapes:\r\n\r\n- Monthly Unlocks\r\n- Unlock in Steps\r\n\r\nCombined, they enable a wide array of use cases. However, some use cases remain unsupported, namely, anything that involves a custom range with non-periodic segments. Here's an example:\r\n\r\n- 50 $TKN on Feb 10\r\n- 121 $TKN on March 28\r\n- 9 $TKN on May 12\r\n\r\nSuch a curve would be enabled by [`LockupTranched`](https://github.com/sablier-labs/company-discussions/discussions/19).\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/discussions/577#discussioncomment-7754991\r\n\r\n## Context\r\n\r\nSee the user request from a potential user:\r\n\r\n<img width=\"400\" alt=\"SCR-20240122-nljb\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e66a2775-df0b-4b53-974b-c76c4807e1ed\">\r\n","createdAt":"2024-01-22T13:23:10Z","labels":[],"number":833,"repository":"sablier-labs/interfaces","state":"closed","title":"New curve for non-periodic shapes","type":"discussion","updatedAt":"2024-06-28T15:14:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/833"},{"author":"PaulRBerg","body":"## Feature Request\r\n\r\nCerebrumDAO made this feature request:\r\n\r\n<img width=\"400\" alt=\"SCR-20240409-qjaq\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/8d46a6ba-b036-4ccf-9d46-995fd3eef26a\">\r\n\r\nThey are basically asking for the immediately unlocked assets in Unlock-Linear to be ERC-20 transferred directly to the recipient without the Sablier protocol taking temporary ownership.\r\n\r\nObviously, this would break all sorts of assumptions in the UI, the subgraph, etc. However, I want to consider two potential implementations.\r\n\r\n## Potential Implementations\r\n\r\n1. Ask the users to perform the ERC-20 transfer - with the downside of making the indexing in the Sablier subgraph difficult. The immediate transfer wouldn't show up in the UI.\r\n    -  I think this would require a bespoke web2 API that knows how to handle the ERC-20 transfers and the streams together. This would be a major refactor, so it's not worth it.\r\n2. Rewrite our Lockup contracts to auto-transfer any already streamed tokens to the recipient.\r\n    - I like this idea a lot and I will open a separate discussion for it.","createdAt":"2024-04-09T17:55:38Z","labels":["resolution required"],"number":923,"repository":"sablier-labs/interfaces","state":"closed","title":"Standard ERC-20 transfer for Unlock curves","type":"discussion","updatedAt":"2024-06-28T15:12:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/923"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nMonitoring users and manually deciding which tokens should get listed is a chore for many of us:\r\n\r\n- https://github.com/sablier-labs/community-token-list/issues/22\r\n- https://github.com/sablier-labs/community-token-list/issues/23\r\n\r\nWe still want to do this to show these users that we care about them. But we should come up with a creative solution to at least simplify the monitoring process.\r\n\r\n## Potential Solution\r\n\r\nAsk users in the UI if they want their token logo listed.\r\n\r\n- Does user create a group of at least 10 streams OR an airstream campaign?\r\n- If **no**, then stop\r\n- If **yes**, then continue\r\n- Is token logo listed?\r\n- If **yes**, then stop\r\n- If **no**, then continue\r\n- Ask user if they would like their token logo listed by asking them to make a [submission on GitHub](https://github.com/sablier-labs/community-token-list/issues/new/choose)\r\n\r\n### Alternatively\r\n\r\nA bespoke \"Upload Token Logo\" form in the UI would be nice, too. But I suppose that that's more difficult to implement.\r\n\r\n## RFC\r\n\r\nCc @razgraf, @gavriliumircea.","createdAt":"2024-02-01T11:58:49Z","labels":[],"number":839,"repository":"sablier-labs/interfaces","state":"closed","title":"Asking users if they want their token logo listed","type":"discussion","updatedAt":"2024-06-28T13:59:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/839"},{"author":"PaulRBerg","body":"It's a shame that we're hiding two essential features:\r\n\r\n1. Emission\r\n2. NFT\r\n\r\nAt the bottom of the \"Details\" modal. The user is 3 or 4 actions away from being aware of them.\r\n\r\nWhat if we redesigned the stream profile to contain all the information hidden underneath \"Details\"? The height would increase, but there would be fewer hoops to jump through.\r\n\r\nSide note - do we have any Vercel analytics on how many users click on \"Details\"? I fear that not many users do it (relatively speaking).","createdAt":"2023-11-08T20:49:12Z","labels":[],"number":645,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to redesign the stream profile by not hiding the \"Details\"","type":"discussion","updatedAt":"2024-06-28T11:56:51Z","url":"https://github.com/sablier-labs/interfaces/discussions/645"},{"author":"razgraf","body":"In the current sprint @gavriliumircea and I are researching a web2-ish backend solution for power features and cost optimizations. Some arguments for it, envisioned features and issues it may fix:\r\n\r\n### Issue: Cost\r\n\r\nIn our current setup for Airstreams, the cost can be broken down between the following vendors:\r\n- Vercel (app and rust `merkle-api` server)\r\n- Infura/RPCs\r\n- Pinata (uploading and downloading IPFS files)\r\n- Misc.\r\n\r\nWhile we're ok with costs such as Vercel and Infura, as these are core infrastructure and a bit harder to replace/optimize for, the Pinata cost associated with IPFS actions can explode over night. We've had this experience with the Pond and 5ire launches.\r\n\r\nSearching for a more centralized alternative, while compromising on decentralization would probably improve our costs and querying speed.\r\n\r\n### Feature: Eligibility Check\r\n\r\nInstead of checking eligibility using the more heavy-duty `merkle-api` (that racks up costs by re-downloading the IPFS files), we'd use this new centralized backend to check for eligibility and generate proofs.\r\n\r\n### Feature: Airstream Recipient Tab\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/858\r\n\r\n### Feature: Labels for Addresses / Address Book\r\n\r\n- https://sablier.canny.io/feature-requests/p/custom-address-labels\r\n\r\n### Feature: Flags and Off-chain Data Storage\r\n\r\n> [!NOTE]\r\n> While storing data off-chain is easy to do with a centralized backend and DB, I'm personally more fond of the idea of an open token-list type of system (as explained in discussion [37](https://github.com/sablier-labs/company-discussions/discussions/37)) as it would be available to everyone to write in and for integrators to read from.\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/900\r\n- https://github.com/sablier-labs/company-discussions/discussions/37\r\n\r\n---\r\n\r\nAs a side note, we'll be starting small with a few features (e.g. eligibility checks and recipient tab), but want to anticipate scaling the system for any potential features.","createdAt":"2024-03-14T09:32:27Z","labels":[],"number":912,"repository":"sablier-labs/interfaces","state":"closed","title":"[R&D] Centralized backend for power features and cost optimizations","type":"discussion","updatedAt":"2024-06-28T11:40:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/912"},{"author":"razgraf","body":"There's an error that keeps popping up due to Wallet Connect (#883) and any products extending their systems (in the case below, Ledger's app).\r\n\r\n![SCR-20240222-mipm](https://github.com/sablier-labs/v2-interfaces/assets/15740806/fc779fce-121d-4993-b565-4e10b60ffffd)\r\n\r\nIt is important to note that:\r\n1. I don't think we can fix the problem this stems from ourselves (there's some chance we did something good by upgrading to wagmi-v2 in #818 to use the latest WC-packages)\r\n2. The error (AFAIK) is never fully shown to users in the UI (just a snipped of it) so Victor probably took a snapshot of the logs from the browser's console (which is very helpful, hope more users do that).\r\n\r\nFor the 2nd note, we could try to catch that error happening in the machines (`onProcess/onValidate`) and show something like \"The wallet connection hasn't been setup correctly. Please try a browser wallet e.g. Metamask/Rabby\". This would at least suggest something actionable for the user to do if the error shows up again.\r\n\r\nThoughts?","createdAt":"2024-02-23T11:18:12Z","labels":[],"number":902,"repository":"sablier-labs/interfaces","state":"closed","title":"Should we handle the \"undefined chain\" error more gracefully?","type":"discussion","updatedAt":"2024-06-28T11:28:21Z","url":"https://github.com/sablier-labs/interfaces/discussions/902"},{"author":"PaulRBerg","body":"## Context\r\n\r\nOne of the lessons learned in the aftermath of the [PondCoin drop](https://twitter.com/Pond0x/status/1752896947248062955) is that airstream users will inevitably end up asking us questions about eligibility criteria.\r\n\r\nBut we're not affiliated with the campaign creators, so this is a waste of time in our customer support channels (bear in mind that we're now paying $1k/ month to [Serveth](ipns://serveth.support/)).\r\n\r\n## Proposal\r\n\r\nIn the airstream page, link to a document that explains eligibility criteria, e.g., this [Google Doc](https://docs.google.com/document/d/1GiWeOvyxs3JS66EFiPjgjRaCtcmW0W3FYuS2nYPmNXw/edit?usp=sharing) for 5ire. The link could be placed either on the standard page or in the Claim sidebar (I don't mind either way, though I think the standard page would work better cuz it's less cluttered)\r\n\r\nTo begin with, we can have this be a \"static\" feature, i.e., the eligibility documentation is hard-coded in the UI code for specific campaigns, and there's no bespoke functionality for uploading documents (we request them manually from the campaign creators).\r\n\r\n## RFC\r\n\r\nCc @razgraf, @gavriliumircea, @maxdesalle.","createdAt":"2024-02-08T11:00:59Z","labels":["type: feature"],"number":871,"repository":"sablier-labs/interfaces","state":"closed","title":"Link to eligibility criteria documentation","type":"discussion","updatedAt":"2024-06-28T10:53:16Z","url":"https://github.com/sablier-labs/interfaces/discussions/871"},{"author":"PaulRBerg","body":"I'm not sure how useful this feature would be, but we have received an explicit feature request for it now.\r\n\r\nThe idea is to allow a non-linear cliff amount. I suppose that the issue is that under the hood, we would have to use `LockupDynamic` for this instead of `LockupLinear`?\r\n\r\n<img width=\"400\" alt=\"SCR-20240511-lkim\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/eb47f0f7-dd64-48e0-b80c-fa56624f296e\">\r\n","createdAt":"2024-05-11T11:43:41Z","labels":[],"number":952,"repository":"sablier-labs/interfaces","state":"closed","title":"Custom cliff amounts in Cliff Stream","type":"discussion","updatedAt":"2024-06-28T15:05:22Z","url":"https://github.com/sablier-labs/interfaces/discussions/952"},{"author":"PaulRBerg","body":"An observation scattered throughout these GitHub repos is that the LockupDynamic exponentials have not been popular among Sablier V2 users. The market has [pushed](https://github.com/sablier-labs/private-discussions/discussions/4) us toward discrete curves such as monthly unlocks.\r\n\r\nOne reason is that people prefer not to use complicated payout models. It's easier to reason about weekly or monthly unlocks rather than exponential curves.\r\n\r\nHowever, another potential reason is that we did not do sufficient user education on this topic. It is possible that, in a world in which there's more material on what can be done with LockupDynamic (especially visual material like [this](https://twitter.com/PaulRBerg/status/1678739116127600641)), there would be more demand for custom LockupDynamic curves.\r\n\r\nBut, of course, that's a long-term project. In the meantime, we could attempt to \"bridge the gap\" by offering **pre-fabricated custom LockupDynamic curves** based on successful vesting models already put in practice by specific companies. For example, we could look at what Safe or CowSwap did, or we could offer a \"Snapchat\" back-weighted vesting schedule, which works like this:\r\n\r\n- 10% in the first year\r\n- 20% in the second year\r\n- 30% in the 3rd year\r\n- 40% in the 4th year\r\n\r\nReferences:\r\n\r\n- https://help.pulley.com/en/articles/5048902-what-vesting-schedule-should-i-use-for-employees\r\n- https://chat.openai.com/share/8706568c-9f7f-476f-9fff-3b72b651bfe0\r\n- https://www.quora.com/What-are-vesting-schedules-and-what-are-they-used-for\r\n- https://twitter.com/jasonlk/status/758430734377889792","createdAt":"2023-12-29T09:32:03Z","labels":[],"number":787,"repository":"sablier-labs/interfaces","state":"closed","title":"Prefab custom LockupDynamic curves","type":"discussion","updatedAt":"2024-06-28T10:25:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/787"},{"author":"PaulRBerg","body":"Seeing this message on Telegram makes me think that we are not engaging with users who wish to have more than 50k recipients in their airstream campaign:\r\n\r\n<img width=\"450\" alt=\"SCR-20240507-lgkm\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/dd3d3c7a-195c-4d19-9ec4-083947e690be\">\r\n\r\nI propose adding a ~CLA~ CTA:\r\n\r\n> More than 50k recipients? Contact us HERE\r\n\r\nAnd HERE would be a Google form or something, or @maxdesalle's Telegram handle.\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-05-07T11:31:46Z","labels":[],"number":949,"repository":"sablier-labs/interfaces","state":"closed","title":"Call to action for more than 50k recipients","type":"discussion","updatedAt":"2024-06-27T14:51:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/949"},{"author":"PaulRBerg","body":"One of the most frequently questions we've gotten lately on Crisp is \"how can I claim?\", to which we have to reply with the airstream campaign URL(s). This process is time-consuming and annoying for all parties (us, users, and our customer support staff).\r\n\r\nIt would be super convenient if:\r\n\r\n- We added a \"Received\" tab in the Airstreams UI, which would filter the airstream campaigns the user is eligible for\r\n- We made that tab the default because airdrop recipients outnumber campaign creators by a factor of 10000x\r\n\r\nI don't know if there's any way to do this via the subgraph, or whether this would require a custom backend, but it sounds like a super helpful feature.\r\n\r\nCc @razgraf, @gavriliumircea.\r\n\r\n","createdAt":"2024-02-06T08:44:36Z","labels":[],"number":858,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a new tab in the Airstreams UI called \"Received\" and make it the default","type":"discussion","updatedAt":"2024-05-27T19:36:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/858"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\n- The fewer buttons users have to click to create their streams, the better\r\n- The app should be optimized for real-world users (dozens of streams), not demos (single stream on testnet)\r\n- Make it crystal-clear that groups of streams can be created in one go\r\n- Nudging users to create multiple streams plays to our advantage: more streams and more TVL\r\n- (Potentially) Lower the maintenance overhead and the number of lines of code in V2 Interfaces\r\n\r\n## Previous Discussion\r\n\r\n@razgraf said this on Slack:\r\n\r\n> single-ul simplifica mult interfata pentru un end-user EOA (non-safe) sau un multi-sig in cautare de un demo rapid, inainte de a merge in feature-ul de group.\r\n\r\nI'm afraid I have to disagree that there is \"a lot\" of simplification with the single-stream view. A little? Maybe. But the benefits laid out in the \"Rationale\" section above are greater. We can also brainstorm on how to make the default view easier to operate. For instance, we could hide the text \"Grouping of 1\" when there's only one stream.\r\n\r\nFurthermore, we shouldn't optimize for demos. We should optimize for real-world users that creates dozens of streams.\r\n\r\nRazvan also said this:\r\n\r\n>  E mai usor sa pleci de la bifurcarea de \"vreau 1 stream\" vs. \"vreau mai multe\" la inceput decat sa iti schimbi parerea pe parcurs.\r\n\r\nYou assume all users will see the Single<>Group tab in the top-right corner. Some won't, so they will ask us if groups are supported.\r\n\r\n## Context\r\n\r\nWe received this question on Crisp:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-12-07 at 11 20 02 AM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b9dc7f06-bdf0-463d-b734-d89891b6bf57\">\r\n\r\nWe shouldn't have received this question. It should be obvious from the UI that groups of streams can be created.","createdAt":"2023-12-07T09:38:00Z","labels":[],"number":678,"repository":"sablier-labs/interfaces","state":"closed","title":"Merge single and groups","type":"discussion","updatedAt":"2024-05-20T10:51:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/678"},{"author":"PaulRBerg","body":"Given our focus on DAOs, organizations, and batch streaming, it is likely that many of our users (senders) will use the app during the day.\r\n\r\nIt would be nice to provide these users with a light theme.","createdAt":"2023-06-02T11:18:05Z","labels":["type: feature","backlog"],"number":282,"repository":"sablier-labs/interfaces","state":"open","title":"Feature request: light theme","type":"discussion","updatedAt":"2024-05-18T13:58:48Z","url":"https://github.com/sablier-labs/interfaces/discussions/282"},{"author":"PaulRBerg","body":"## Scenario\r\n\r\nIn V1, we [integrated](https://twitter.com/Sablier/status/1550135246846185478) Ronin, which got us some attention from Ronin's community, plus a little bit of TVL ([$14k](https://explorer.roninchain.com/address/ronin:de9dcc27aa1552d591fc9b9c21881fee43bd8118) at the time of posting this). I have now opened this discussion to compare the pros and cons of integrating Ronin into the V2 app.\r\n\r\n## Comparison\r\n\r\n### Pros\r\n\r\n1. Business partnership with a significant market player\r\n2. Good marketing on Twitter\r\n\r\n### Cons\r\n\r\n1. Distraction from other much more important tasks:\r\n    - Growing and promoting V2 itself\r\n    - Airstreams\r\n    - V3\r\n2. Large risk of investing effort into something that may not yield much ROI; given Ronin's TVL in Sablier V1, how many users of `SablierV2LockupPro` do we realistically expect to have on Ronin?\r\n3. Non-negligible development cost; supporting Ronin is different from supporting a typical EVM chain because they don't have ready-to-use integrations in popular web3 frameworks, their chain is permissioned, etc.\r\n    - We have to deploy PRBProxy on their chain, too\r\n    - Plus Multicall3 (as discussed [here](https://github.com/sablierhq/v2-periphery/discussions/13#discussioncomment-5219760))\r\n4. Huge time waster maintenance-wise (Ronin's JSON-RPC servers are often down)\r\n\r\n## My Take\r\n\r\nIn light of the comparison above (especially the first point, which is critical), it appears that supporting Ronin in the V2 UIs is not a worthwhile investment. Ronin's needs may be sufficiently met with Sablier V1, and there are numerous other avenues for Twitter marketing. I'd much rather have @razgraf and @gavriliumircea brainstorm on the product front for V3 than work on an integration that'd get us $14k extra EVM TVL.\r\n\r\nMore generally speaking, we've grown to a point where we must allocate our time carefully. There are many potential areas for improvement that could benefit Sablier, but we must identify those that will yield the most sustainable growth in the long term.","createdAt":"2023-03-06T22:06:39Z","labels":[],"number":200,"repository":"sablier-labs/interfaces","state":"open","title":"To Ronin or not to Ronin","type":"discussion","updatedAt":"2024-05-13T11:42:57Z","url":"https://github.com/sablier-labs/interfaces/discussions/200"},{"author":"PaulRBerg","body":"Adding support for testnets like this is overkill in the production app because 99.99% of all Sablier users don't want to see these networks.\r\n\r\nWhat if we created a new staging environment in Vercel for use cases like this, i.e. add support for testnets?\r\n\r\n<img width=\"400\" alt=\"SCR-20240503-mzou\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/be18c857-312b-4adf-877e-70a01ac2a519\">\r\n","createdAt":"2024-05-03T13:39:55Z","labels":[],"number":946,"repository":"sablier-labs/interfaces","state":"closed","title":"New staging environment on Vercel for testnet deployments","type":"discussion","updatedAt":"2024-05-06T15:31:59Z","url":"https://github.com/sablier-labs/interfaces/discussions/946"},{"author":"PaulRBerg","body":"UTC is a standard, and so it should lead less to more deterministic outcomes.\r\n\r\nRelated: https://github.com/sablier-labs/docs/issues/141\r\n\r\ncc @sablier-labs/frontend ","createdAt":"2024-04-18T12:28:25Z","labels":[],"number":932,"repository":"sablier-labs/interfaces","state":"closed","title":"Use UTC instead of local time in CSV upload","type":"discussion","updatedAt":"2024-04-18T12:31:33Z","url":"https://github.com/sablier-labs/interfaces/discussions/932"},{"author":"razgraf","body":"The idea is to create a lite version of the client app that:\r\n1. is fully open-source\r\n2. relies only on on-chain data (as much as possible)\r\n3. uses the user's RPC and doesn't re-route through Sablier's channels\r\n4. deployed on IPFS\r\n\r\nNote: we already have a starting point with the v2-sandbox, although that repository should remain separate from the lite app as it will contain: sample code/snippets, subgraph usage, not optimized for decentralization or dependency reduction","createdAt":"2024-04-16T13:27:56Z","labels":[],"number":928,"repository":"sablier-labs/interfaces","state":"closed","title":"Create a \"lite\" fully decentralized version of the app","type":"discussion","updatedAt":"2024-04-16T14:17:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/928"},{"author":"PaulRBerg","body":"It's great that we [added caveats](https://github.com/sablier-labs/v2-interfaces/issues/575#issuecomment-1790664110) about the slow indexing times, but I've gotten fed up with The Graph. If we were to apply web2 UI/UX standards, having to wait a couple of minutes to merely _view_ the payment that you have just set up is reminiscent of the dial-up Internet era.\r\n\r\nI don't know what the solution is. But there must be one. Maybe [Envio](https://github.com/sablier-labs/v2-interfaces/issues/621)? Or [Ponder](https://ponder.sh/)? [Alchemy Subgraphs](https://docs.satsuma.xyz/)?\r\n\r\n<img width=\"400\" alt=\"SCR-20231222-slms\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/92dbc99d-9768-4cae-829a-fb80ac8bb472\">\r\n","createdAt":"2023-12-22T19:20:24Z","labels":[],"number":774,"repository":"sablier-labs/interfaces","state":"closed","title":"How can we solve the data indexing problem?","type":"discussion","updatedAt":"2024-04-16T13:29:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/774"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOne of the nice advantages of the proxy architecture was the ability to interact with streams created across multiple releases of Sablier. But, since we got rid of the proxy in V2.1, we are now left with the problem of enabling a good UX when canceling and withdrawing from multiple streams. Several users have shown interest in this functionality, e.g., [Perpetual Protocol](https://github.com/sablier-labs/v2-core/discussions/773#discussioncomment-7972431).\r\n\r\nThe current UX is not great. We block any transaction that touches streams belonging to different streaming models and/ or releases:\r\n\r\n<img width=\"400\" alt=\"SCR-20231229-qhym\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a1d3606a-b244-4909-b864-fbe91f737960\">\r\n\r\n## Solution\r\n\r\n### Backend\r\n\r\nUnfortunately, there's nothing that we can do at the smart contract level. Unlike Fuel, Ethereum does not allow end users to call multiple contracts at the same time. This is precisely the reason why I have created PRBProxy.\r\n\r\n### Frontend\r\n\r\nI see only one way out - use Safe's TransactionBuilder and make it possible to selectively choose what streams should be canceled and withdrawn.\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/668\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/480#discussioncomment-7974188\r\n\r\nI see two possible implementation approaches:\r\n\r\n1. Batch calls to `cancel`/ `withdraw` - easy\r\n2. Batch calls to `cancelMultiple`/ `withdrawMultiple` - more complicated algorithmically in the frontend (the stream clusters would need to be resolved according to their model and version) but more efficient gas-wise\r\n\r\nThe first approach seems like the appropriate next step.\r\n\r\n---\r\n\r\nP.S. Did I mention that Fuel solves this? See their [Scripts](https://docs.fuel.network/docs/sway/sway-program-types/scripts/) and [Predicates](https://docs.fuel.network/docs/sway/sway-program-types/predicates/)","createdAt":"2023-12-30T10:28:34Z","labels":[],"number":792,"repository":"sablier-labs/interfaces","state":"closed","title":"The problem of cross-contract interactions with multiple streams","type":"discussion","updatedAt":"2024-03-06T19:29:03Z","url":"https://github.com/sablier-labs/interfaces/discussions/792"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOur PR marketing campaign with NFTFi was a [success](https://twitter.com/NFTfi/status/1696523033442443552).\r\n\r\nNFTFI followed up with this question:\r\n\r\n> Sablier team, we got fantastic feedback from various fronts. Are there other non-cancellable streams that we could collab on?\r\n\r\nThe problem is that we don't know who our users are (pseudo-anonymity FTW). Manually scraping the web for identities that sit behind specific Ethereum addresses would involve quite a bit of drudgery. And using a platform like TRM Labs would be out of line.\r\n\r\n## Solution\r\n\r\nAdd a \"Lend\" button in the \"Actions\" tab of the stream profile page. When the button is clicked, a tiny modal appears that shows the user what NFT lending platforms are available (NFTFI and DeFrag at the moment):\r\n\r\n<img width=\"350\" alt=\"Screenshot 2023-08-30 at 7 19 59 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ced7e24f-3f6c-4b28-9b30-658605c8e3ec\">\r\n","createdAt":"2023-08-30T16:21:03Z","labels":[],"number":571,"repository":"sablier-labs/interfaces","state":"closed","title":"NFT lending button","type":"discussion","updatedAt":"2024-03-06T19:28:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/571"},{"author":"razgraf","body":"One thing worth considering re. Airstreams and claiming tokens through our interface is ToS of each campaign.\r\n\r\nSome campaign owners would probably want to geoblock claiming from the US. The fact that we provide a claiming interface for every airstream campaign means users can circumvent their official UI to claim tokens from us.\r\n\r\nOf course the same can be said about claiming from Etherescan.\r\n\r\nA solution for this could be using the recent middleware utility implemented for the UK disclaimer. We'd \"blacklist\" the required countries on a per-use-case basis.\r\n\r\nAnother solution would be simply disabling claims from our UI (again, on a per-campaign case), leaving it up to the customer to build their external UI that conforms with whatever legal requirements they have.\r\n\r\nLater edit: we already have one potential customer asking for this.\r\n\r\nSeparate point: another user mentioned custom ToS approvals before claiming. While this could also make sense, I'm afraid that too much \"manual management\" of these things in the canonical app would turn against us. TBD.","createdAt":"2023-12-12T23:05:52Z","labels":[],"number":705,"repository":"sablier-labs/interfaces","state":"closed","title":"Geoblocking for Airstreams (e.g. US)","type":"discussion","updatedAt":"2024-02-22T13:50:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/705"},{"author":"PaulRBerg","body":"Could you please explain briefly why this message appears when creating a new PR, @razgraf, @gavriliumircea?\r\n\r\n<img width=\"442\" alt=\"SCR-20240111-rmas\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e17d3bc4-69a5-4d76-9c70-e16ffd6101dc\">\r\n\r\nI googled it but wasn't able to figure out what we have done in our repo (or Vercel account) to enable this behavior.","createdAt":"2024-01-11T18:06:51Z","labels":[],"number":822,"repository":"sablier-labs/interfaces","state":"closed","title":"What is Vercel's \"Canceled by Ignored Build Step\"?","type":"discussion","updatedAt":"2024-02-14T11:26:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/822"},{"author":"PaulRBerg","body":"Very low priority, but the idea is to add a link to Fren Reviews in the UI:\r\n\r\nhttps://twitter.com/FrenReviews/status/1754423308890808427\r\n\r\nAnd:\r\n\r\n<img width=\"400\" alt=\"SCR-20240212-rdbt\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1cd4232d-10ba-41e7-ad10-dbcb04a39c1b\">\r\n","createdAt":"2024-02-12T17:41:01Z","labels":[],"number":889,"repository":"sablier-labs/interfaces","state":"closed","title":"Collab with Fren Reviews","type":"discussion","updatedAt":"2024-02-13T10:34:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/889"},{"author":"PaulRBerg","body":"I'm on the fence about this. I will let you decide @razgraf @gavriliumircea:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4dfed2f8-435e-4847-87fe-d4ff29d66482\"/>\r\n\r\n<img width=\"400\" alt=\"SCR-20240208-mfxg\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/49a3d879-e8b3-445f-b54f-6bb32e4a9757\">\r\n\r\n<img width=\"400\" alt=\"SCR-20240208-miad\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/665710cf-36ac-4763-bb1c-19eea2016a5d\">\r\n","createdAt":"2024-02-08T11:48:46Z","labels":[],"number":875,"repository":"sablier-labs/interfaces","state":"closed","title":"Graying out the \"Transfer\" button in the \"Actions\" panel","type":"discussion","updatedAt":"2024-02-12T15:11:03Z","url":"https://github.com/sablier-labs/interfaces/discussions/875"},{"author":"PaulRBerg","body":"#87 added a new app in the monorepo and by doing that it duplicated the `public` directory between the client and the labs landing page.\r\n\r\nSee how I did this in v1-interfaces:\r\n\r\nhttps://github.com/sablierhq/v1-interfaces/tree/3930d5b05f41e8509bf83fd2263145c2cebbed99/template\r\n\r\nThe idea is to use a template generator like [Handlebars](https://handlebarsjs.com/) or [Mustache](https://mustache.github.io/) and write a script that generates the `public` directories for each app.\r\n\r\nThis seems like a common scenario. There might be an open-source project that does.","createdAt":"2022-11-02T13:16:32Z","labels":[],"number":99,"repository":"sablier-labs/interfaces","state":"closed","title":"Deduplicate \"public\" directory with a template generator","type":"discussion","updatedAt":"2024-02-12T14:33:30Z","url":"https://github.com/sablier-labs/interfaces/discussions/99"},{"author":"PaulRBerg","body":"## Context\r\n\r\nThe [PondCoin drop](https://twitter.com/Pond0x/status/1752896947248062955) has made it clear that we need to ramp up our customer support staff if we wish to continue offering Airstreams as a product.\r\n\r\nOr maybe there's another way ..?\r\n\r\n## Proposal\r\n\r\n1. Detect high-usage airstream campaigns\r\n2. Ask the creators when they expect to fund the campaign and announce the drop\r\n3. Disable the Crisp chat box during the 48 hours following the drop announcement (only for these particular campaigns)\r\n4. Ask the campaign creator to explain to their users the basics about how Sablier works\r\n5. (Later) Put this in our Terms of Services\r\n\r\n## RFC\r\n\r\nCc @razgraf, @gavriliumircea, @maxdesalle.","createdAt":"2024-02-08T11:04:02Z","labels":[],"number":872,"repository":"sablier-labs/interfaces","state":"closed","title":"Selectively disabling the chat box during periods of explosive growth with airstreams","type":"discussion","updatedAt":"2024-02-10T17:22:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/872"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nSince we've introduced airstreams, it is natural to worry that users have to claim before the end date (for normal streams).\r\n\r\nIt would be helpful to add an info box in the withdraw side bar (or edit the existing info box) to clarify that withdrawals can be made any time, even long after the end date.\r\n\r\n<img width=\"400\" alt=\"SCR-20240201-qczt\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5912b65a-2c27-495a-a87b-14c7fdd3490d\">\r\n\r\n## Customer Support\r\n\r\nWe have received several questions like this:\r\n\r\n<img width=\"400\" alt=\"sablier-confusion-foo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9c4861af-ca7f-4de5-9ca3-16dc1ad98114\">\r\n","createdAt":"2024-02-01T16:33:36Z","labels":[],"number":842,"repository":"sablier-labs/interfaces","state":"closed","title":"Explain that it is possible to withdraw after the end date","type":"discussion","updatedAt":"2024-02-09T12:45:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/842"},{"author":"PaulRBerg","body":"1. This looks like a bug? No stream is expected to \"show up\" after a withdrawal is made.\r\n2. After withdrawals, the user may not be so interested in checking the Sablier UI again.\r\n\r\n<img width=\"200\" alt=\"SCR-20240206-uflj\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0d423a93-e2a9-433e-a747-e0ca5776ecdd\">\r\n\r\nCc @razgraf @gavriliumircea\r\n","createdAt":"2024-02-06T21:29:49Z","labels":[],"number":866,"repository":"sablier-labs/interfaces","state":"closed","title":"Slow indexing delay caveat appears in withdraw form","type":"discussion","updatedAt":"2024-02-08T15:07:39Z","url":"https://github.com/sablier-labs/interfaces/discussions/866"},{"author":"smol-ninja","body":"## Context\r\nWhen withdrawing from a stream, if `msg.sender` is the recipient, `to` could be any address ([source code](https://github.com/sablier-labs/v2-core/blob/84758a40077bf3ccb1c8f7bb8d00278e672fbfef/src/interfaces/ISablierV2Lockup.sol#L240C1-L259C78)).\r\n\r\n## Problem\r\nIn the UI, if the recipient tries to withdraw to a different address, the tooltip displays the requirement for `to` address to be able to interact with the Sablier protocol and that is not true. It would simply transfer tokens to the `to` address.\r\n\r\n\r\n<img width=\"613\" alt=\"Screenshot 2024-02-01 at 23 27 51\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/ec7f733d-8541-41e1-8ba9-2fe9059199b0\">\r\n\r\n<img width=\"613\" alt=\"Screenshot 2024-02-01 at 23 27 51\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/e7a100fa-fb7b-4350-af8b-6dfa1aa515f4\">\r\n\r\n## Solution\r\nWe should not display this tooltip message if `msg.sender` is the stream recipient.","createdAt":"2024-02-01T18:12:32Z","labels":[],"number":844,"repository":"sablier-labs/interfaces","state":"closed","title":"Inaccurate tooltip message when withdrawing to a different address","type":"discussion","updatedAt":"2024-02-06T09:40:48Z","url":"https://github.com/sablier-labs/interfaces/discussions/844"},{"author":"PaulRBerg","body":"Why does the streaming model appear in the table underneath the \"Value\" column and some other data like the token's name (not the symbol)?\r\n\r\nOr maybe we can scrape that header? I understand there are some design reasons.","createdAt":"2023-12-09T21:33:54Z","labels":[],"number":693,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to replace \"Lockup Linear\" with \"Token Name\" in the table","type":"discussion","updatedAt":"2024-01-19T10:40:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/693"},{"author":"IaroslavMazur","body":"In continuation of [this discussion](https://github.com/sablier-labs/company-discussions/discussions/8#discussion-5812089), let me formally suggest the implementation of the optional stream creators' donations in the form of the \"broker fees\", as detailed by @razgraf [here](https://github.com/sablier-labs/company-discussions/discussions/8#discussioncomment-7632227).","createdAt":"2024-01-09T17:08:09Z","labels":["topic: fees"],"number":819,"repository":"sablier-labs/interfaces","state":"open","title":"Let Sablier users optionally donate a part of the streamed tokens to Sablier?","type":"discussion","updatedAt":"2024-01-15T15:57:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/819"},{"author":"smol-ninja","body":"I had my first Sablier stream set up today as a recipient. Lovely UI and great UX! As a first time user, I have a couple of feedbacks. \r\n\r\nIdentifying streams can be challenging in case of multiple streams\r\n------------\r\n**Description**\r\n\r\nOn the `All Streams` screen, it could be challenging for a user to identify the nature of the streams. Its not a problem when you have a small number of streams but imagine someone having 20-30 streams a year (not sure if we have seen that yet).\r\n\r\n**Possible solution**\r\n\r\nThere could be an option to `label/tag` them manually and then display them under the _Status_ column on each stream. Ex. _vesting_, _airdrop_, _payment_ etc. Users may have various reasons to label them. One such could be to use this information during taxes. \r\n\r\nMissing Close btn in _choose date and time_ frame.\r\n------------\r\nEven though clicking on _Clear_ btn closes it, it also clears the selected datetime value.\r\n<img width=\"400\" alt=\"Screenshot 2023-12-06 at 11 55 58\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/9159d447-32b9-4aa4-b1c5-dff4428c7f28\">\r\n\r\nBlurry token icon in case of USDC\r\n------------\r\nI checked other streams [(clear image)](https://app.sablier.com/stream/LL-42161-200/). Seems like the icon image for USDC is of low quality [(blurred image)](https://app.sablier.com/stream/LL-42161-208/)\r\n<img width=\"150\" alt=\"Screenshot 2023-12-06 at 12 30 30\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/f34ec30a-00e8-4a6a-a2ba-8a245a42ea92\">\r\n\r\nStream Circle: confused about the _Elapsed time_ circle\r\n------------\r\nThere are three stream circles, the colored ones are very clear to me but the third one _Elapsed time_ circle, I think I don't see it. Take a random example below. I could only see two circles, how do I see the third one?\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-12-06 at 12 39 21\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/a0f2f0ea-0d68-4e0c-8b22-fc861c8fac85\">\r\n\r\nOther suggestions\r\n------------\r\n1. **Stream screen**: In the _Attributes_ section, the Expected Payout value gets truncated if it has more than 4 digits. Showing the full value as a tooltip when I hover over it could be helpful.\r\n\r\n2. **Stream screen**: Not sure if _Created on_ is more useful information than _Started On_, my thought is that showing _Started on_ instead of _Created on_ in the _Attributes_ section could be beneficial. As a new user, the duration value of _\"The stream will end\"_ might become confusing as he can only see _Created on_ and _End date_ on the page while duration takes into account the _Start date_.\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-12-06 at 12 09 38\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/0a1d2875-f4d1-4180-acdd-0d2d0f1cf620\">\r\n\r\nI will keep adding more to this discussion if I come up with new suggestions/bugs/ thoughts.\r\n","createdAt":"2023-12-06T12:50:55Z","labels":[],"number":676,"repository":"sablier-labs/interfaces","state":"closed","title":"Shub's feedback as a new Sablier user ⏳","type":"discussion","updatedAt":"2024-01-15T13:22:56Z","url":"https://github.com/sablier-labs/interfaces/discussions/676"},{"author":"PaulRBerg","body":"## Git Branching Strategies\r\n\r\nAs we scale up the number of people working on this repository, we have to start considering our branching and merging strategy. Collaborating with other people on a git repository is a completely different experience to working alone. In a team, branching and merging code can become messy fast.\r\n\r\nAs per this [article](https://www.flagship.io/git-branching-strategies/) (which I have read in full and is a good read on the topic), there are basically four well-known git branching strategies:\r\n\r\n1. GitFlow\r\n2. GItHub Flow\r\n3. GitLab Flow\r\n4. Trunk-based Development\r\n\r\n## Comparing the Strategies\r\n\r\nWe can discard the third strategy (GitLab) from the get-go, because we're hosting our repo on GitHub and the target audience seems to be iOS app development.\r\n\r\n### GitFlow\r\n\r\n- Maintain a bunch of long-running branches in parallel\r\n    - Master\r\n    - Develop\r\n    - Long-lived feature branches\r\n    - Release branches\r\n - Merge whenever the features or the releases are finished\r\n - No pressure on committing quickly\r\n\r\n### GitHub Flow\r\n\r\n- Simpler alternative to GitFlow\r\n- Apart from lack of release branches, identical with GitFlow\r\n\r\n### Trunk-based Development\r\n\r\nFurther reading about TBD on https://trunkbaseddevelopment.com.\r\n\r\n- No multiple long-running branches in parallel. Just one.\r\n- No release branches or long-lived feature branches.\r\n- Commit frequently (at least once in 24 hours) and ideally on `main` directly, when a PR wouldn't be useful for historical purposes.\r\n- Keep feature branches small and make PRs for them frequently (at least once in 3 days)\r\n\r\n## My Proposal\r\n\r\nThere is no need to have hard-and-fast rules. However, we should welcome heuristics, as they are better than no strategy at all. This is the heuristic that I propose regarding our branching strategy.\r\n\r\n- When we know that nobody else is working on something else at the same time, each one of us uses whatever grinds his gears\r\n- When we know that at least one other person is working on something else at the same time, we use TBD\r\n\r\nMy money is on TBD for collaboration because it's the one that best minimizes git conflicts and it's a key enabler of Continuous Integration.\r\n\r\nFWIW, this is also what the article recommends doing in our circumstance. That is, when the team is small and the collaboration \"maturity\" (I.e. how knowledgeable and experienced the contributors are with git) is high, TBD is the only recommended strategy:\r\n\r\n<img width=\"747\" alt=\"Screen Shot 2022-10-17 at 11 24 13 PM\" src=\"https://user-images.githubusercontent.com/8782666/196276144-e312195f-e1f2-42d6-92e8-2f0b4afa0977.png\">\r\n\r\n### Clarifications\r\n\r\n1. TBD itself doesn't say anything about frequency of PR reviews. Of course, ideally the reviews would be made quickly, but there is no pressure on doing that, since another branch can be created from the previous PR's branch.\r\n2. TBD also doesn't say anything about whether a PR review is needed at all. Given where we stand right now (i.e. a period of very active development), we can gloss over PR reviews e.g. when implementing new pages and components.\r\n\r\n## Note on Experimentation\r\n\r\nTo me, TBD looks by far the most promising (also see arguments left in https://github.com/sablierhq/v2-interfaces/discussions/30). Of course, this is only a guess, and I need help from you in order to test my hypothesis.\r\n\r\nThe catch is that unlike software libraries that can be tested alone, it is not possible to test a branching/merging strategy without getting outside of our comfort zone and experimenting with it for a while as a team (I suggest a month at a minimum).","createdAt":"2022-10-17T20:37:41Z","labels":[],"number":55,"repository":"sablier-labs/interfaces","state":"closed","title":"A comparison of git branching strategies","type":"discussion","updatedAt":"2024-01-09T15:54:18Z","url":"https://github.com/sablier-labs/interfaces/discussions/55"},{"author":"PaulRBerg","body":"Requested by 5ire:\r\n\r\n<img width=\"400\" alt=\"SCR-20231229-nufn\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2989a167-e207-4024-95ec-3cf73bb776d6\">\r\n\r\nNot sure how we could implement this. This setting should not be part of the on-chain state.\r\n\r\nCould we include it in the IPFS data, @razgraf, @gavriliumircea?\r\n\r\nIf not, I think the only way to implement this would be to have a persistent web2 API that records the user's preference.","createdAt":"2023-12-29T13:37:56Z","labels":["type: feature","backlog"],"number":788,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: allow airstream creators to hide their campaign in the UI","type":"discussion","updatedAt":"2024-01-09T15:38:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/788"},{"author":"PaulRBerg","body":"Nearly no function comments in V2 Interfaces adhere to [JSDoc](https://jsdoc.app/), which makes VSCode not able to display the documentation at a glance, e.g. `isNilOrEmptyString`:\r\n\r\n<img width=\"332\" alt=\"Screenshot 2023-06-04 at 8 03 03 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/3d4b6085-31c9-4899-98fb-7964c0380dd4\">\r\n\r\nBy contrast, this is how it looks for `isNil`, which is documented by Lodash using JSDoc:\r\n\r\n<img width=\"329\" alt=\"Screenshot 2023-06-04 at 8 03 08 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/464ac804-ddb2-4d10-ad6d-61c54b358aea\">\r\n\r\n\r\n","createdAt":"2023-06-04T18:04:19Z","labels":["backlog"],"number":307,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor all comments to adhere to JSDoc for better integration in VSCode","type":"discussion","updatedAt":"2024-01-09T15:35:17Z","url":"https://github.com/sablier-labs/interfaces/discussions/307"},{"author":"PaulRBerg","body":"I don't see why the deposited amount is appended to the \"Shape\" entry on the \"Details\" page:\r\n\r\n<img width=\"500\" alt=\"SCR-20231222-odlo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/17b6f4e5-c51f-4d2c-82f2-9936c32dcdc0\">\r\n\r\nI suggest we do one of the two following things:\r\n\r\n1. Replace \"Shape\" by \"Deposited Amount\"\r\n2. Keep \"Shape\" and add \"Deposited Amount\"\r\n\r\ncc @razgraf @gavriliumircea","createdAt":"2023-12-22T14:11:37Z","labels":["resolution required"],"number":770,"repository":"sablier-labs/interfaces","state":"closed","title":"The \"Shape\" entry in the \"Details\" page","type":"discussion","updatedAt":"2024-01-08T12:01:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/770"},{"author":"PaulRBerg","body":"Lito Coen thought that the token has to be listed:\r\n\r\n<img width=\"511\" alt=\"SCR-20231221-kplh\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/69efcba0-43fc-42dd-bbfa-cc069b0bcf81\">\r\n\r\nIt might be just that it was late in Australia, and he was tired. But still. Looking at the token picker, the only indication that custom addresses can be pasted is the grayed-out \"or address\" label.\r\n\r\nI'm opening this discussion with the purpose of brainstorming a UI/UX improvement that communicates the address-pasting functionality somehow more clearly.","createdAt":"2023-12-21T09:44:32Z","labels":[],"number":765,"repository":"sablier-labs/interfaces","state":"closed","title":"Make it clearer that users can paste custom addresses","type":"discussion","updatedAt":"2024-01-07T13:29:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/765"},{"author":"PaulRBerg","body":"We've just received this question from a potential airstreams user:\r\n\r\n<img width=\"300\" alt=\"SCR-20240102-mefz\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c0dcec69-287e-4f83-840a-f81631a23cd0\">\r\n\r\nWhat happened here is that Victor did not see the \"Check eligibility\" button in the top-right corner.\r\n\r\nThis has made me realize that we are putting an undue amount of emphasis on the streaming shape - look how prominent the \"Linear streams\" curve is in the current UI:\r\n\r\n<img width=\"300\" alt=\"SCR-20240102-mdyo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9096ba4f-7f2b-4451-8844-6b06cc2af5f0\">\r\n\r\nWhat is infinitely more important for recipients (>99% of all airstream users) is to be able to check their eligibility. Therefore, I suggest redesigning the UI to put more emphasis on eligibility checks.\r\n\r\nWDYT, @maxdesalle, @razgraf?","createdAt":"2024-01-02T11:40:36Z","labels":[],"number":797,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to redesign the \"Check eligibility\" button to look more prominent","type":"discussion","updatedAt":"2024-01-07T13:22:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/797"},{"author":"PaulRBerg","body":"As per https://github.com/sablier-labs/v2-interfaces/issues/629, we want to allow users to create normal streams in bulk via CSV file upload. To do this, we must find an appropriate CSV file format.\r\n\r\nHere's what I suggest should be available as columns:\r\n\r\n| Property | Required | Default Value |\r\n|--------|--------| ------------------|\r\n| Recipient | Yes | N/A |\r\n| Amount | Yes | N/A |\r\n| Duration | Yes | N/A |\r\n| Cliff | No | 0 |\r\n| Cancelable | No | True |\r\n\r\nTo keep things simple, we can begin by supporting only Linear and Linear-Cliff streams via `createWithDurations` and `createWithDeltas`. Similarly, we need not bother with a Token column - the token can be specified via a dropdown because it is very likely that all streams would be paid in one token only.","createdAt":"2023-12-03T13:08:55Z","labels":[],"number":674,"repository":"sablier-labs/interfaces","state":"closed","title":"CSV format for creating normal streams","type":"discussion","updatedAt":"2024-01-07T13:18:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/674"},{"author":"PaulRBerg","body":"Low priority, opening this discussion to point out that the \"transferable\" flag is not supported by the URL builder.\r\n\r\nWe should first make a decision about whether the transferable flag should not be hidden underneath \"Advanced\" anymore (ref https://github.com/sablier-labs/v2-interfaces/discussions/659#discussioncomment-7930419).","createdAt":"2023-12-30T12:16:10Z","labels":[],"number":795,"repository":"sablier-labs/interfaces","state":"closed","title":"Transferable flag is not supported in the URL builder","type":"discussion","updatedAt":"2024-01-07T13:14:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/795"},{"author":"gavriliumircea","body":"The V2.1 contracts introduced a new flag for the create stream functions called transferrable. We decided that we will add it inside the create single/group but we need to choose what the default value of this flag should be. My initial thought is that it should be on true given that all the v2.0 streams are transferrable and some users are used to that already. In both cases I think we should have an info box displayed when you hoover over the field(similar to cancelable field) to make the user understand the advantages/disadvantages of having a stream transferable or not. Would love to hear your take on this matter @PaulRBerg , @razgraf ","createdAt":"2023-11-23T15:02:29Z","labels":[],"number":659,"repository":"sablier-labs/interfaces","state":"closed","title":"The default value for transferable field in the Create Forms","type":"discussion","updatedAt":"2024-01-07T13:06:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/659"},{"author":"PaulRBerg","body":"I can't think of any use case for going so granular with the minutes (besides airdrop farmers, which we need not care about):\r\n\r\nIncrements of 5 should be enough.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-14 at 2 42 58 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4180df8e-aeda-4bea-b179-705eb578c056\">","createdAt":"2023-12-14T12:43:12Z","labels":[],"number":712,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow minutes to be selected only in increments of 5","type":"discussion","updatedAt":"2024-01-07T12:55:36Z","url":"https://github.com/sablier-labs/interfaces/discussions/712"},{"author":"PaulRBerg","body":"The UI uses two terms to refer to the same concept:\r\n\r\n1. Shape\r\n2. Streaming model\r\n\r\nIt's easier to use only one term. But even besides that, \"streaming model\" should be used only as a distinctor between Lockup Linear and Lockup Dynamic, not between the payment types/ shapes that can be created with each.\r\n\r\nE.g. this should be called \"Shape\":\r\n\r\n<img width=\"400\" alt=\"SCR-20231209-npmm\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e2e1cc24-9bd1-434a-8bac-654036880c2d\">","createdAt":"2023-12-09T13:23:06Z","labels":[],"number":689,"repository":"sablier-labs/interfaces","state":"closed","title":"Shape != streaming model","type":"discussion","updatedAt":"2024-01-07T12:52:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/689"},{"author":"PaulRBerg","body":"We basically need the same thing that Superfluid has:\r\n\r\nhttps://app.superfluid.finance/accounting\r\n\r\nThey checkpoint the streaming in chunks (monthly, weekly, etc.)\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-08-17 at 5 26 57 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1d1100aa-7b7b-4a81-b20d-a2f97e3bc750\">\r\n","createdAt":"2023-08-17T14:27:08Z","labels":[],"number":564,"repository":"sablier-labs/interfaces","state":"closed","title":"CSV exports for accounting","type":"discussion","updatedAt":"2024-01-07T12:49:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/564"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-interfaces/discussions/573:\r\n\r\n> For Safe users (we can identify them in the app, that's not a problem) isn't there a way to take advantage of the transaction builder and simply chain [approve, deploy-proxy] or [approve, deploy-proxy, create-stream] with a custom Safe Proxy Target?\r\n\r\nReference: https://help.safe.global/en/articles/40841-transaction-builder","createdAt":"2023-11-30T12:05:29Z","labels":[],"number":668,"repository":"sablier-labs/interfaces","state":"closed","title":"Research \"TransactionBuilder\" to improve UX for Safe users","type":"discussion","updatedAt":"2024-01-05T13:08:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/668"},{"author":"PaulRBerg","body":"A page or a section in a page with all of our integrations. Inspiration: [Superfluid](https://app.superfluid.finance/ecosystem):\r\n\r\nIdeally, the page would be accessible from [app.sablier.com](https://app.sablier.com), too.\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-08-30 at 8 18 27 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/863b3c5c-ba95-40bb-b011-8505577d4af3\">\r\n","createdAt":"2023-08-30T17:19:46Z","labels":[],"number":572,"repository":"sablier-labs/interfaces","state":"closed","title":"Sablier ecosystem page","type":"discussion","updatedAt":"2024-01-05T12:11:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/572"},{"author":"PaulRBerg","body":"[PRBProxy](https://github.com/PaulRBerg/prb-proxy) is meant to be a universal proxy that will be (hopefully) used by increasingly more DeFi projects. As a result, the likelihood of the proxy ending up holding a non-zero amount of ERC-20 assets is high.\r\n\r\nThat, coupled with the risk that our very own [`ProxyTarget`](https://github.com/sablier-labs/v2-periphery/blob/c174b310a2215f598076ca0d1204ba773c4ff015/src/SablierV2ProxyTarget.sol) might contain errors and leave assets in the proxy instead of forwarding them to the proxy owner, opens up the possibility for a situation whereby the proxy owner has unclaimed assets in the proxy.\r\n\r\nTo address this potential issue, our UI could provide a \"module\" for (i) viewing the current balance of the proxy and (ii) calling a target to make ERC-20 withdrawals from it. This module would be similar to the WETH-wrap and unwrap functionality offered by e.g. OpenSea.\r\n\r\nNote: this is low-priority. I've opened this discussion just so we are aware of this possibility.","createdAt":"2023-06-02T12:23:25Z","labels":[],"number":284,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: module for withdrawing assets from the proxy","type":"discussion","updatedAt":"2024-01-05T11:50:43Z","url":"https://github.com/sablier-labs/interfaces/discussions/284"},{"author":"PaulRBerg","body":"Relaying the question I asked @gavriliumircea [here](https://github.com/sablier-labs/v2-core/discussions/442#discussioncomment-5937501):\r\n\r\nAs shown by [this fuzzing function](https://github.com/sablierhq/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/utils/Fuzzers.sol#L99-L116), the deposit amount calculations get complicated quite quickly once fees are thrown into the equations.\r\n\r\nAre the broker and the protocol fee hard-coded to zero in the front-end calculations? If not, it would be helpful to do so to remind ourselves of the role that the fees play in determining the deposit amounts.","createdAt":"2023-06-09T13:34:40Z","labels":["topic: fees"],"number":583,"repository":"sablier-labs/interfaces","state":"closed","title":"Refining the deposit amount calculations","type":"discussion","updatedAt":"2024-01-05T11:50:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/583"},{"author":"PaulRBerg","body":"As per the announcement [here](https://github.com/ethers-io/ethers.js/blob/main/CHANGELOG.md?utm_source=substack&utm_medium=email#ethersv610-2023-03-07-0210), Ethers v6.1 replaces BigNumber with ES2022 BigInts.\r\n\r\nThis does seem like a major refactor, but I think that the benefits of switching to BigInt are worth it.","createdAt":"2023-03-11T11:21:02Z","labels":[],"number":209,"repository":"sablier-labs/interfaces","state":"closed","title":"Move to ethers v6 and ES2020 BigInt","type":"discussion","updatedAt":"2024-01-05T11:44:37Z","url":"https://github.com/sablier-labs/interfaces/discussions/209"},{"author":"PaulRBerg","body":"While exploring [Nexstra](https://nextra.site/docs/docs-theme/start), I noticed that the first installation option they recommended was `pnpm`. My spidey-sense got activated, and I took it for a spin in my [Foundry template](https://github.com/PaulRBerg/foundry-template/commit/ab28c67f39fd4b91a6f27bc22271106c52249732). The result?\r\n\r\n[`pnpm`](https://pnpm.io/) is freaking AWESOME!\r\n\r\n- [x] Faster than Yarn (yes, faster even than Yarn Berry)\r\n- [x] Delightful terminal logging (cleaner)\r\n- [x] Less clunky than Yarn Berry! (we'd be able to purge the `.yarn` and the `.yarnrc.yml` file, as well as the [`!.yarn/`](https://github.com/sablierhq/v2-interfaces/blob/main/.gitignore#L146-L153) exceptions in `.gitignore`)\r\n\r\nThis is all while not compromising the user experience of upgrading dependencies. [`pnpm update --interactive`](https://github.com/pnpm/pnpm/issues/1012#issuecomment-575941037) is equivalent to Yarn's [`upgrade-interactive`](https://yarnpkg.com/cli/upgrade-interactive) plugin.","createdAt":"2023-03-10T11:54:37Z","labels":["backlog"],"number":206,"repository":"sablier-labs/interfaces","state":"closed","title":"Switch to pnpm","type":"discussion","updatedAt":"2024-01-05T11:35:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/206"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n[Hyrum's Law](https://www.hyrumslaw.com/) and the Popperian principle of fallibility leads us to predict that:\r\n\r\n1. Users will use all sorts of tools for generating the SVGs\r\n2. They will generate it in many different ways\r\n3. They will make a great many errors\r\n\r\nWhile it is impossible to prevent all errors that could be made, we should, at a minimum, be aware of what _could_ go wrong. Below, you can find a table with some errors I have bumped into already.\r\n\r\nIt looks like the most frequent issue is that a percentage sign is appended. Are we handling this in the UI?\r\n\r\n## Table\r\n\r\n| Name | Issue |\r\n|--------|--------|\r\n| Google Sheets | Adds a trailing percentage symbol |\r\n| Numbers (macOS) | Adds a trailing percentage symbol |\r\n| [TableConvert](https://tableconvert.com/csv-generator) | Adds a trailing percentage symbol |\r\n| [Table Tool](https://apps.apple.com/us/app/table-tool/id1122008420?mt=12) | Adds double quotes around all values |","createdAt":"2023-12-22T19:48:24Z","labels":[],"number":775,"repository":"sablier-labs/interfaces","state":"open","title":"Caveats to consider with CSV processing","type":"discussion","updatedAt":"2024-01-07T13:07:38Z","url":"https://github.com/sablier-labs/interfaces/discussions/775"},{"author":"PaulRBerg","body":"During my recent development on [PR 249](https://github.com/sablierhq/v1-interfaces/pull/249) in the v1-interfaces repository, I was reminded how difficult it is to maintain a single React code base that can connect to two different browser extensions:\r\n\r\n1. MetaMask\r\n2. Ronin Wallet\r\n\r\nThere's a lot of overhead in terms of special handlers, like [`isRoninAddress`][is-ronin-address] and [`safeRoninAddress`][safe-ronin-address] and the [`useDisplayAddress`][use-display-address] hook, which have to be orchestrated to work on top of the existing Ethereum workflows.\r\n\r\nThus, my suggestion for v2 would to split the app deployments (and hence modularize the code base to account for this) by **browser extension**.\r\n\r\nThat is, there would be some entry point in the app that checks what is the intended browser wallet the app is supposed to work with, and loads some React context associated with that extension.\r\n\r\nIn a way, this is what projects like Curve do, with their per-chain deployments, e.g. [arbitrum.curve.fi](https://arbitrum.curve.fi).\r\n\r\n[is-ronin-address]: https://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/packages/utils/src/types.js#L46-L54\r\n[safe-ronin-address]: https://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/packages/utils/src/types.js#L66-L80\r\n[use-display-address]: https://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/packages/hooks/src/useDisplayAddress.js","createdAt":"2022-11-01T09:58:50Z","labels":[],"number":91,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to split the app deployments by browser extension","type":"discussion","updatedAt":"2023-12-22T14:00:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/91"},{"author":"PaulRBerg","body":"[Link to campaign](http://localhost:4001/airstream/0x52aaeb1ad8c7a7c039b45f8c75e92904cab811ac-11155111/)\r\n\r\n- Add \"Transferability\"\r\n- Change \"Can be canceled\" with \"Each airstream can be canceled\" or smth like that (ref https://github.com/sablier-labs/v2-interfaces/issues/718)\r\n- Change \"Expected Amount\" to \"Total Amount\" or \"Aggregate Amount\" (ref https://github.com/sablier-labs/v2-subgraphs/discussions/19)\r\n- Change \"Expected Recipients\" to \"Total Recipients\" (ref https://github.com/sablier-labs/v2-subgraphs/discussions/19)\r\n- Swap the current balance and the manager in the airstreams dashboard (issue here: https://github.com/sablier-labs/v2-interfaces/issues/721)\r\n- The contract address cannot be copied, so it is not super helpful\r\n- The name of the campaign is too technical (we should consider letting users specify a [name](https://github.com/sablier-labs/v2-periphery/issues) at deployment)\r\n\r\n<img width=\"852\" alt=\"Screenshot 2023-12-14 at 5 53 45 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5207e5e7-bf5f-486e-8046-4a743927d9bc\">","createdAt":"2023-12-14T17:34:31Z","labels":[],"number":722,"repository":"sablier-labs/interfaces","state":"closed","title":"Feedback on airstream campaign profile","type":"discussion","updatedAt":"2023-12-22T13:54:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/722"},{"author":"PaulRBerg","body":"As discussed [privately](https://sablier.slack.com/archives/C04DCMXKTAT/p1702592811337179) on Slack, we are in a bit of a terminological wrinkle with the term \"airstream\". It can mean two things:\r\n\r\n1. A campaign of airdropped streams\r\n2. A single stream claimed as part of an airdrop campaign\r\n\r\nDue to the pressure to launch shortly (December 19), we will stick with option 1 for now. But I wanted to open this discussion for us to remember the semantic issue.\r\n\r\nI don't have any particular preference. Both are ok. What's more important is semantic consistency, i.e., we should go with either one or the other - not with both at the same time.","createdAt":"2023-12-18T13:03:55Z","labels":[],"number":745,"repository":"sablier-labs/interfaces","state":"closed","title":"What does \"airstream\" mean?","type":"discussion","updatedAt":"2024-12-23T17:20:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/745"},{"author":"smol-ninja","body":"While funding the campaign, there is a btn displaying **Necessary: 1,000**\r\n\r\nMy understanding is that it displays the amount required to fund the campaign (a.k.a. necessary for airdrop, 24.95M here) but the value that it displays is the funder's token balance (1,000 here).\r\n\r\nTwo suggestions:\r\n1. Either we display **Necessary** amount that is required to fund: `Necessary: 24.95M` here; OR\r\n2. We replace the Necessary keyword with **Maximum** and that would mean the maximum user can fund based on his wallet balance: `Max: 1000` here.\r\n3. We show both: `Necessary: 24.95M` as well as provide a maximum btn that fills the input with the maximum user can fund.\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-12-17 at 13 31 21\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/8b7ab818-0246-437e-bada-70a9fd0ced50\">\r\n","createdAt":"2023-12-17T13:41:12Z","labels":[],"number":750,"repository":"sablier-labs/interfaces","state":"closed","title":"Necessary button could be confusing for depositors","type":"discussion","updatedAt":"2023-12-18T23:06:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/750"},{"author":"smol-ninja","body":"Sender\r\n-------\r\nConsider multiple Airstreams that have the same claim window but started at different point in time. Seeing remaining claim period for each Airstream might be more useful info for Senders than knowing the total claim time.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-17 at 13 15 24\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/c903b4ea-492f-4403-8b87-38e6c9453deb\">\r\n\r\nRecipients\r\n----------\r\nEven though we display \"Claims end time\" under **Other details**, knowing how much time is left to claim could be more useful info for recipients. \r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-17 at 13 15 19\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/981259b9-0a61-4147-979b-de5fce4a6ed8\">\r\n","createdAt":"2023-12-17T13:23:11Z","labels":[],"number":748,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion: \"Claim ends in\" instead of \"Claim window\"?","type":"discussion","updatedAt":"2023-12-18T22:52:49Z","url":"https://github.com/sablier-labs/interfaces/discussions/748"},{"author":"PaulRBerg","body":"Protocols like [Exactly](https://twitter.com/PaulRBerg/status/1681577440907231235) are looking to roll their airdrop campaign using Sablier.\r\n\r\nGiven the large influx of users that airdrops will bring us, we should consider adding a disclaimer in the withdraw sidebar that clarifies that we are not affiliated with airdrop creators, and that we do not endorse the airdropped token.\r\n\r\nThe benefits of doing so are:\r\n\r\n1. Legal cover\r\n2. Avoid getting support inquiries related to the airdrop\r\n\r\nIn V1, we received several messages that were actually meant for the vesting token creators.\r\n\r\nCc @razgraf, @gavriliumircea.","createdAt":"2023-07-23T17:25:37Z","labels":[],"number":524,"repository":"sablier-labs/interfaces","state":"closed","title":"Clarifying that Sablier is not affiliated with airdrop creators","type":"discussion","updatedAt":"2023-12-18T13:01:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/524"},{"author":"PaulRBerg","body":"Paraswap wanted to use Sablier for vesting $ARB and $PSP, but the UI (via Safe) didn't work and we lost them as a user.\r\n\r\nThe first hurdle was Safe's requirement to have all signers online at the same time. We solved that activating the (annoying) [\"Always use on-chain signatures\" setting](https://twitter.com/PaulRBerg/status/1722995605444665710).\r\n\r\nThe second hurdle .. is a bit unclear. Let me paste what the Paraswap guy told me on Telegram:\r\n\r\n> disclaimer: I'm not used to the safe app nor Sablier so the fact that I couldn't use it could be on me\r\n>\r\n> **On Arbitrum**\r\n>\r\n> I created this through Sablier dapp on Arbitrum.\r\n4 tx to create streams for $ARB token on Arbitrum.  1794.93 $ARB sent (1039.17 instant + 755.76 over 84 days):\r\n> - [Safe tx 1](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0x50ccd8b88a7748fe4c85cc047d548f3a7777dc6a3b032e8935467a6bb12259fd&safe=arb1:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> - [Safe tx 2](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0x463b01da6ccb5940a117275e4623cbfd5881993482ff5f1863035fdf726f37e2&safe=arb1:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> - [Safe tx 3](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0xd66d468efe63017abaa134276ef65fa2377d9134a3385adc7a16e554d5fc37e1&safe=arb1:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> [Safe tx 4](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0xf6c94751457556949c53b1501f5f30139f2cd2186d1c7d0815b833c209f61492&safe=arb1:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n>\r\n> I actually got error message AND validation message at the same time each time I created a stream (see picture below). I assume it's because the Sablier app is waiting for the execution (I will send picture)\r\n>\r\n> **On Optimism**\r\n>\r\n> 4 tx to create streams for $PSP token on Optimism.  65327.32 $ARB sent ; 37821.08 instant + 27506.24 over 84 days):\r\n> - [Optimism tx 1](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0xccb343848b09d5027a2e25904f802b17535d473bcdf88a05f919b03b2c2992b5&safe=oeth:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> - [Optimism tx 2](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0x57975ba0f3a2f9405d79fd3d7cf1379ec354516ca9123e5ebd78a99940bd16ac&safe=oeth:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> - [Optimism tx 3](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0xa35f4064f2651c2716760cf3cba5ee7b7f0a6dbd695670a09c6ef31afdb699f4&safe=oeth:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> - [Optimism tx 4](https://app.safe.global/transactions/tx?id=multisig_0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5_0x8736fefb056da2f6fa9d085edeb8aa9b48af2686ffb2798a1fd77dc8337737c6&safe=oeth:0xd6ABD29a331eDB915D0eE8597Df50D453F98c7c5)\r\n> \r\n> I think I also had the error and validation at the same time.\r\n>\r\n> Then:\r\n>  Optimism\r\n> 4 tx executed. Nothing changed on the Safe Balance. No stream created on the Sablier app.\r\n>\r\n> Arbitrum\r\n4 tx executed. Nothing change on the Safe Balance. The 4 tx don't appear in the Safe history. BUT, this appeared: an off-chain signature to sign.\r\n> \r\n> ...hat's pretty much about it\r\n>\r\n> Optimism 4 tx signed, nothing\r\n>\r\n> Arbitrum, 4 tx signed, nothing happened, then off chain sign, nothing happened either.\r\n>\r\n> I didn't mentioned but allowance were previously granted with 1 tx / network (enough to spend the 4 tx / network)\r\n\r\nI confess that I did not know what to make out of this. Maybe you guys know @razgraf @gavriliumircea?\r\n\r\nAttaching the images he shared with me:\r\n\r\n<img width=\"400\" alt=\"Paraswap Image 1\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/3a56ad75-5402-4baa-9c17-c3e426fdad7e\">\r\n\r\n<img width=\"400\" alt=\"Paraswap Image 2\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b23cbae8-5944-4838-9ebf-7ad1e08c05a2\">","createdAt":"2023-11-29T18:41:30Z","labels":[],"number":667,"repository":"sablier-labs/interfaces","state":"closed","title":"Paraswap: a lost user on Safe","type":"discussion","updatedAt":"2023-12-15T13:18:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/667"},{"author":"PaulRBerg","body":"Here:\r\n\r\n<img width=\"650\" alt=\"SCR-20231214-rmmg\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4d74ee36-489c-4623-aaf7-419ebd3976a3\">\r\n","createdAt":"2023-12-14T18:07:08Z","labels":[],"number":724,"repository":"sablier-labs/interfaces","state":"closed","title":"Shouldn't deposits be part of the airstream campaign history?","type":"discussion","updatedAt":"2023-12-15T10:15:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/724"},{"author":"razgraf","body":"As our ecosystem grows, it becomes harder to create a cross-network, cross-deployment unique identifier. Our streams may suffer from the same issue.\r\n\r\n### Constraints\r\nStreams will live and be identified by\r\n- the chain they were created on (e.g. 1 \"eth\", 137 \"matic\" or 42161 \"arbitrum\")\r\n- the type of contract they were created by (e.g. \"linear\" or \"pro\" ... or later \"pro 2\", \"pro 3\")\r\n- the contract they were created by (e.g. \"0xabc12\" or \"0xde456\" - e.g. there may be multiple deployments of \"linear\" we accept)\r\n- the unique streamId/tokenId given by the contract from the step above\r\n\r\nHow do we create a stream identifier to be used by our application, while maintaining good UX as well as practicality.\r\n\r\n## Option 1: A global chain specific identifier - the `globalId`\r\n\r\nA simple, unique, numeric identifier would be perfect from a visual standpoint. It would follow on the footsteps of our v1 app. It would also make it easy for the user to share their stream id with others (or with us for debugging).\r\n\r\n```js\r\nhttps://app.sablier.finance/stream/137-100\r\n```\r\n\r\nWe can extract the `chainId` and the `globalId` from this URL and showcase the stream inside the app.\r\n\r\n- Simple, easy to remember\r\n- Doesn't clutter the UI\r\n- We need a short ID anyway to make it easy for the user to identify the stream\r\n\r\n### Biggest Downsides\r\n\r\n#### Subgraph redundancy\r\n\r\nIn case our subgraph stops working, we may want to redirect the user to `light.sablier.finance` (name is a WIP), our web3-only portal. This way, they would still be able to interact with the stream.\r\nThe problem? `100` (as in the example above) was an id fully generated by the subgraph, it doesn't exist in the contracts. If this one doesn't work, we have no way of resolving the stream using it.\r\n\r\nNote: If we want our app to be truly multi-chain, we can't really get rid of the chainId, although doing it would simplify the URL even more.\r\n\r\n## Option 2: A complex, fully independent identifier - the `globalPath`\r\n\r\nA longer path provides worse UX for the user but better long term support.\r\n\r\n```js\r\nhttps://app.sablier.finance/stream/0xabcd...41c-137-100 // contract address shortened for brevity\r\n```\r\n\r\nWe can extract the `contract`, `chainId` and the `streamId` from this URL and showcase the stream inside the app.\r\n\r\n- Includes all the important information to resolve the stream even without the subgraph\r\n- The app link can be instantly replaced with the light app and the stream would resolve (even with contracts we don't support - good for testing)\r\n- It's 100% unique, even on contract address collision (same on multiple networks)\r\n\r\n### Biggest Downside\r\n\r\n#### Visual aspect\r\n\r\nIt is ugly and hard to remember. \r\nSome parts of our app still require a simple, easy to remember ID users can share amongst themselves (see Stream Profile for example). Therefore, we may have to use both, the `globalPath` for the URL and the `globalId` for visuals.\r\n\r\n","createdAt":"2022-12-28T15:01:48Z","labels":[],"number":143,"repository":"sablier-labs/interfaces","state":"closed","title":"Unique stream identifiers","type":"discussion","updatedAt":"2025-04-10T14:50:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/143"},{"author":"IaroslavMazur","body":"![image](https://github.com/sablier-labs/v2-interfaces/assets/22785348/09f978a2-06bb-4f69-9139-8a454dfdc953)\r\n\r\n@razgraf, @maxdesalle \r\n\r\nHere are several suggestions for enhancing the message shown to the users in the **Pricing** section, introduced in #666 :\r\n\r\n- It feels like \"it will remain\" was intended to be the beginning of a new sentence.\r\n\r\n- \"There are no active fees\" sounds a) redundant (given that the first sentence communicates the same idea) and, by extension, b) fishy (like, when politicians repeat the same idea over and over, making it \"true\" in the process😅). Therefore, I suggest removing this sentence altogether. 🙅","createdAt":"2023-12-09T19:57:19Z","labels":[],"number":691,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestions for the message of the Pricing section","type":"discussion","updatedAt":"2023-12-14T14:21:41Z","url":"https://github.com/sablier-labs/interfaces/discussions/691"},{"author":"PaulRBerg","body":"I wonder why the \"Simulation\" button is not working here:\r\n\r\n<img width=\"500\" alt=\"SCR-20231209-nkto\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/bac6f879-ec1f-4733-98e5-8b94b86ed99f\">\r\n\r\nI assume we simply did not have the time to build this, but wanted to show it as a planned feature? If yes, do we have Vercel analytics enabled so that we know how many users click on this button?\r\n\r\nUsers like [Azam](https://github.com/sablier-labs/v2-interfaces/issues/675#issuecomment-1848253634) would have found this functionality useful. He wouldn't have contacted if he could see the payout simulation.","createdAt":"2023-12-09T13:14:31Z","labels":[],"number":688,"repository":"sablier-labs/interfaces","state":"closed","title":"Is the \"Simulation\" feature in the Create Stream form a planned feature?","type":"discussion","updatedAt":"2023-12-09T21:28:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/688"},{"author":"IaroslavMazur","body":"In the Stream Details section, the icons for the Sender and Recipient of the Stream are currently the same:\r\n\r\n![image](https://github.com/sablier-labs/private-discussions/assets/22785348/ed42dbca-d3d6-4da2-94c3-ca3327071221)\r\n\r\n-----\r\n\r\nHow about using some different, suggestive icons to distinguish between the two?\r\n\r\nHere are several ideas regarding the matter from ChatGPT:\r\n\r\n**Sender:**\r\n- An arrow pointing away: Use an icon depicting an arrow pointing outward to symbolize money leaving an account.\r\n- Wallet with an outgoing arrow: Combine a wallet icon with an arrow pointing outward to represent money being sent.\r\n\r\n**Recipient:**\r\n- An arrow pointing towards a wallet: Use an icon with an arrow pointing towards a wallet to indicate money being received.\r\n- Hand holding a wallet: Illustrate a hand holding a wallet to symbolize receiving money.\r\n\r\n@razgraf, @gavriliumircea, @PaulRBerg, wdyt?","createdAt":"2023-12-07T23:18:42Z","labels":[],"number":680,"repository":"sablier-labs/interfaces","state":"closed","title":"Use different icons for Sender and Recipient in Stream Details","type":"discussion","updatedAt":"2023-12-09T20:43:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/680"},{"author":"IaroslavMazur","body":"How about adding the information about the \"streaming rate\" of the Stream somewhere (ideally, close to the \"Expected Payout\") on the Stream page in the Sablier UI?\r\n\r\nI was looking at [Stream #LL-1-273](https://app.sablier.com/stream/LL-1-273/), and one of the first questions I've got interested in regarding the Stream is how much the recipient is getting, say, per hour or day. However, I couldn't find this information directly available anywhere.\r\n\r\nWhile this can, of course, be calculated manually, I believe adding the \"streaming rate\" to the information presented about the Stream will enhance the UX, and make the Stream feel \"closer\"/more \"natural\" to the user (just like it's easier to grasp that someone is over-eating if they tell you directly that they're consuming 3.5kg worth of food a day vs 105kg per month).\r\n\r\nP.S. The example above isn't a sign that I'm hungry - it's just the first thing that came to my mind after the obvious \"how much you're making per year/month/day\" 😅 \r\n\r\n@sablier-labs/everybody, thoughts?","createdAt":"2023-12-07T23:31:00Z","labels":[],"number":681,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"streaming rate\" to the Stream presentation page?","type":"discussion","updatedAt":"2023-12-09T20:27:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/681"},{"author":"PaulRBerg","body":"Just going to aggregate these here until we find a good place to publish them on the landing page somewhere.\r\n\r\n## Maple\r\n\r\n[Source](https://medium.com/p/4c6508e8e2e4/edit)\r\n\r\n> Sablier has become our go-to solution for streamlining token vesting for our team since May 2021. We're thoroughly impressed by how it effortlessly automates complex token vesting processes, saving us time and ensuring accuracy.\r\n> \r\n> Their responsive customer service and seamless integration with Safe make the experience even more delightful. - Charlotte Dodds, Head of Marketing at Maple","createdAt":"2023-08-16T17:11:12Z","labels":[],"number":562,"repository":"sablier-labs/interfaces","state":"closed","title":"Testimonials in the landing page","type":"discussion","updatedAt":"2024-01-09T15:49:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/562"},{"author":"PaulRBerg","body":"Timelocks have become a hot use case since the Curve fiasco. Here's a message that was recently circulated in a private BNB ecosystem chat:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/f2cb52b3-5aae-4da8-9432-4527dd5bfd18\"/>\r\n\r\nI imagine that we could serve these users in the UI by providing a bespoke Lockup Dynamic curve that unlocks right at the end. The curve would have only two segments:\r\n\r\n1. One that ends at `endTime - 1 second` with a zero amount\r\n2. One that ends at `endTime` with the full amount\r\n\r\n","createdAt":"2023-08-21T18:47:23Z","labels":[],"number":568,"repository":"sablier-labs/interfaces","state":"closed","title":"Lockup Dynamic curve for timelocks","type":"discussion","updatedAt":"2023-11-30T19:17:46Z","url":"https://github.com/sablier-labs/interfaces/discussions/568"},{"author":"gavriliumircea","body":"Recently we received a message on crisp from a user that could now click on Create Stream button in this particular situation.\r\n![image](https://github.com/sablier-labs/v2-interfaces/assets/48255669/727f8664-0fa5-4f98-b898-abb757cd1704)\r\nAs it can be seen in the screenshot above the user didn't fill the Start Date filled because he misinterpreted the place holder think that is an actual value. If this situation occurs multiple time we might need to take into consideration a possible change in the UI. What do are your thoughts on this matter? @razgraf ","createdAt":"2023-10-26T12:07:44Z","labels":[],"number":610,"repository":"sablier-labs/interfaces","state":"closed","title":"Discuss UI/UX for placeholders inside create stream form","type":"discussion","updatedAt":"2023-11-30T19:14:18Z","url":"https://github.com/sablier-labs/interfaces/discussions/610"},{"author":"PaulRBerg","body":"Once every so often, we receive questions like this:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/aae5b17c-5b73-45c2-8e20-cbf59a4fa05b\"/>\r\n\r\nIt would be helpful to reference the [community-token-list](https://github.com/sablier-labs/community-token-list/issues/new?assignees=&labels=token+request&projects=&template=token-request.md&title=Add+%7BTOKEN_SYMBOL%7D%3A+%7BTOKEN_NAME%7D) repo somewhere in our token picker so that users don't resort to asking us questions.","createdAt":"2023-11-01T14:45:10Z","labels":[],"number":622,"repository":"sablier-labs/interfaces","state":"closed","title":"Refer users to the token community lists to submit new token logos","type":"discussion","updatedAt":"2023-11-30T19:08:21Z","url":"https://github.com/sablier-labs/interfaces/discussions/622"},{"author":"PaulRBerg","body":"From Discord:\r\n\r\n<img width=\"400\" alt=\"SCR-20231106-pkqu\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/20ad8fb0-1157-4ad2-8138-7f75832e3038\">","createdAt":"2023-11-06T17:43:42Z","labels":[],"number":631,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a note in the gallery page that custom curves can be created programmatically","type":"discussion","updatedAt":"2023-11-30T18:48:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/631"},{"author":"PaulRBerg","body":"Here:\r\n\r\n<img width=\"350\" alt=\"SCR-20231108-rywf\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/148a3db4-de6e-4651-ba6c-457efdf85a25\">\r\n\r\nThe reason I am suggesting this is two-fold:\r\n\r\n1. The \"withdraw\" button is already visible in color form underneath the streaming circle\r\n2. A user has just asked us on Crisp if the NFT can be transferred - it should be obvious from the UI that they can do this\r\n\r\n<img width=\"350\" alt=\"SCR-20231108-rved\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/d6ca12a3-e9f1-4a7a-ba9a-bc13b0bddbd6\">\r\n","createdAt":"2023-11-08T20:43:41Z","labels":[],"number":644,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to replace \"Withdraw\" button with \"Transfer NFT\" in \"Actions\" side panel","type":"discussion","updatedAt":"2023-11-30T18:45:54Z","url":"https://github.com/sablier-labs/interfaces/discussions/644"},{"author":"PaulRBerg","body":"See how LlamaPay displays them:\r\n\r\n<img width=\"1470\" alt=\"Screenshot 2023-08-17 at 9 52 19 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/25317b3d-6aae-4301-bb7c-981cf76307cf\">\r\n","createdAt":"2023-08-17T18:52:25Z","labels":[],"number":565,"repository":"sablier-labs/interfaces","state":"closed","title":"Subgraph delay notifications","type":"discussion","updatedAt":"2023-11-30T18:34:13Z","url":"https://github.com/sablier-labs/interfaces/discussions/565"},{"author":"PaulRBerg","body":"We keep getting user support requests like this:\r\n\r\n<img width=\"500\" alt=\"SCR-20231120-swbe\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/76400a85-a31b-4463-bcc0-26a3a4536c2e\">\r\n","createdAt":"2023-11-20T19:48:18Z","labels":[],"number":654,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a button to V1 app","type":"discussion","updatedAt":"2023-11-30T18:06:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/654"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIt has become apparent that the UX of using Sablier V2 from Safe is pretty bad. The journey of a user who has never interacted with Sablier involves _four_ transactions:\r\n\r\n1. Deploy PRBProxy\r\n2. Approve Permit2\r\n3. Sign Permit2\r\n4. Create stream\r\n\r\nThe UX is even worse for DAOs, who may have to vote on each particular transaction (see [this](https://sablier.slack.com/archives/CT3NXSNMS/p1691677673729299)).\r\n\r\nThe goal is to lower the number of transactions to _three_, although _two_ would be ideal.\r\n\r\n## Solution\r\n\r\nThis is a hairy problem for which the solution is complex. Here's how I suggest tackling it:\r\n\r\n1. Get rid of Permit2 and switch to [standard ERC-20 approvals](https://github.com/sablier-labs/v2-periphery/pull/161). More specifically, implement a toggle and default to standard ERC-20 approvals.\r\n2. Detect if the user is a Safe multisig and, if yes, do not deploy a PRBProxy and use the newly introduced [`SablierV2Batch`](https://github.com/sablier-labs/v2-periphery/pull/177) instead.\r\n\r\n## Notes\r\n\r\n1. Not using PRBProxy will lose all of the benefits discussed in https://github.com/sablier-labs/v2-periphery/discussions/11. However, it should be possible to install our proxy target as a Safe module and use it in important scenarios like bug fixes and migration between releases.\r\n2. See the Safe docs on [plugins](https://docs.safe.global/safe-core-protocol/plugins), as well as [Zodiac](https://github.com/gnosis/zodiac).","createdAt":"2023-08-31T16:54:24Z","labels":[],"number":573,"repository":"sablier-labs/interfaces","state":"closed","title":"Improving the user experience for Safe users","type":"discussion","updatedAt":"2023-11-30T12:05:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/573"},{"author":"PaulRBerg","body":"I know we've discussed this point already, @razgraf, but I wanted to create this discussion to share my thoughts about the current UX when using Sablier for the first time.\r\n\r\nThe UI is currently telling the user that they need to create a special account:\r\n\r\n<img width=\"350\" alt=\"Screenshot 2023-06-12 at 2 23 39 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1a1ed3d4-cf34-4706-adc4-200eb03d657d\">\r\n\r\n---\r\n\r\nI understand the rationale - being upfront and clear about the fact that a proxy will sit between the end user and Sablier. However, this separate step is not strictly needed thanks to PRBProxy's `deployAndExecute` methods:\r\n\r\nhttps://github.com/PaulRBerg/prb-proxy/blob/6fbb6df62d25e07fc702a4485595aa34d8297237/src/PRBProxyRegistry.sol#L77-L87\r\n\r\nWhat we could do:\r\n\r\n1. Create a new target in V2 Periphery that performs two actions in one go: (i) install proxy and (ii) call create functions; alternatively, add new functions in the existing proxy target\r\n2. Detect that the user doesn't have a proxy _silently_, in the background\r\n3. If the user has a proxy -> call proxy target as usual\r\n4. If the user doesn't have a proxy -> call `deployAndExecute` and use the newly-created target mentioned at point 1\r\n\r\nWe should be attentive to what users will say about this account set-up flow (during product demos).\r\n\r\nCc @maxdesalle.","createdAt":"2023-06-12T11:28:49Z","labels":["backlog"],"number":380,"repository":"sablier-labs/interfaces","state":"closed","title":"Abstract away \"Create account\" step","type":"discussion","updatedAt":"2023-11-24T12:16:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/380"},{"author":"PaulRBerg","body":"Shouldn't the following bugs have been caught in CI?\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/632\r\n- https://github.com/sablier-labs/v2-interfaces/issues/633\r\n- https://github.com/sablier-labs/v2-interfaces/issues/634\r\n- https://github.com/sablier-labs/v2-interfaces/issues/635","createdAt":"2023-11-06T21:17:49Z","labels":[],"number":636,"repository":"sablier-labs/interfaces","state":"closed","title":"Do we not have a CI check for TS compilation?","type":"discussion","updatedAt":"2023-11-06T21:50:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/636"},{"author":"PaulRBerg","body":"\"Group of streams\" is ok, but I think that the following terminology would be more idiosyncratic:\r\n\r\n- Batch instead of Group in the \"Single|Group\" toggle in the Gallery\r\n- Use \"B\" instead of \"G\" in the batch ids\r\n- Refer to the action of creating a batch of streams as \"creating streams in bulk\"\r\n\r\nThis terminology would be more in line with smart contracts and finance as a while. Excerpt from my [conversation with ChatGPT](https://chat.openai.com/share/717c0de6-1610-4922-8d00-93bb6e6a7980):\r\n\r\n> The term \"batch\" is often used in various contexts, especially in computing and business, to refer to a collection of tasks or items that are processed as a group. On the other hand, \"group\" is a more general term and can refer to a collection of anything, but it's not as commonly used in the context of payments as \"batch\" is.","createdAt":"2023-11-03T11:02:28Z","labels":[],"number":628,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to refactor \"groups\" to \"batches\"","type":"discussion","updatedAt":"2023-11-04T18:33:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/628"},{"author":"PaulRBerg","body":"Few users will understand why there are two addresses in the top-right wallet card:\r\n\r\n<img width=\"183\" alt=\"Screenshot 2023-10-06 at 11 44 00 AM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/726bd763-69f8-4716-87a4-e545b5fd17b4\">\r\n\r\nAnd even among those in the tiny minority who will understand, they will likely not care about it.\r\n\r\nSince we are also [planning](https://github.com/sablier-labs/v2-periphery/issues/168) on disabling the proxy for Safe users, I suggest removing the proxy address from the top-right wallet card.\r\n\r\nP.S. the PRBProxy address may be especially confusing for Safe users, who might assume that that is their Safe address.","createdAt":"2023-10-06T08:49:00Z","labels":[],"number":587,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove proxy address from top-right wallet card","type":"discussion","updatedAt":"2023-10-31T18:16:20Z","url":"https://github.com/sablier-labs/interfaces/discussions/587"},{"author":"PaulRBerg","body":"It's a no-brainer - it speeds up all root-level scripts and the build pipeline, and it's also tightly integrated with Vercel (they've acquired Turborepo):\r\n\r\nhttps://turbo.build/repo","createdAt":"2023-06-11T17:22:24Z","labels":["backlog"],"number":395,"repository":"sablier-labs/interfaces","state":"open","title":"Feature request: integrate Turborepo","type":"discussion","updatedAt":"2023-10-30T15:18:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/395"},{"author":"PaulRBerg","body":"Low-priority, but Greg Le Jeune suggested an interesting idea to me earlier today:\r\n\r\n> was wondering, did you consider revenue sharing agreement in the protocol fees?\r\n> à la Lido: https://lido.fi/referral\r\n> imo it would be dope, like we’re introducing the concept of execution helpers with sx-evm for snapshot and are trying to focus on doing rev shares with a few projects\r\n\r\nI told him about our broker fees, which should cover their needs. But there's another twist to this idea - what if people could generate referral URLs for the Sablier UI, and be paid a commission each time someone creates a stream using that URL? For example:\r\n\r\nhttps://app.sablier.com/create/single/?broker=0x0000000000000000000000000000000000000000&fee=30\r\n\r\nFor simplicity, we could use basis points (units of 0.01%) instead of 18 decimals. In the example above 30 = 0.3%\r\n\r\nI suspect that this will not be that difficult to implement given that we already have an [URL scheme](https://docs.sablier.com/apps/url-schemes).\r\n\r\nCc @razgraf @gavriliumircea","createdAt":"2023-10-25T17:23:41Z","labels":["type: feature","topic: fees"],"number":605,"repository":"sablier-labs/interfaces","state":"open","title":"Referral program with URLs","type":"discussion","updatedAt":"2023-10-25T17:24:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/605"},{"author":"PaulRBerg","body":"Rabby is a web3 wallet that apparently has a best-in-class multi-chain UX.\r\n\r\nSee the responses to my tweet:\r\n\r\nhttps://twitter.com/PaulRBerg/status/1717107042731667791","createdAt":"2023-10-25T12:25:42Z","labels":[],"number":604,"repository":"sablier-labs/interfaces","state":"closed","title":"Consider adding support for Rabby","type":"discussion","updatedAt":"2023-10-25T16:04:57Z","url":"https://github.com/sablier-labs/interfaces/discussions/604"},{"author":"PaulRBerg","body":"I've recently shared the [$IMX stream](https://app.sablier.com/stream/LL-1-68/) in a Telegram chat, and the preview card looked like this:\r\n\r\n<img width=\"379\" alt=\"Screenshot 2023-10-24 at 4 03 17 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/64c0ae8f-6b55-463a-b535-0b94e7f203e7\">\r\n\r\nThe description is the standard description of the website. Can we customize it so that it refers to this particular stream?\r\n\r\nFor example, this is the automatically generated description of the [NFT](https://opensea.io/assets/ethereum/0xb10daee1fcf62243ae27776d7a92d39dc8740f95/68):\r\n\r\n> This NFT represents a payment stream in a Sablier V2 Lockup Linear contract. The owner of this NFT can withdraw the streamed assets, which are denominated in IMX.\r\n>\r\n> Stream ID: 68\r\n> Lockup Linear Address: 0xb10daee1fcf62243ae27776d7a92d39dc8740f95\r\n> IMX Address: 0xf57e7e7c23978c3caec3c3548e3d615c346e79ff\r\n> ⚠️ WARNING: Transferring the NFT makes the new owner the recipient of the stream. The funds are not automatically withdrawn for the previous recipient.","createdAt":"2023-10-24T15:08:08Z","labels":[],"number":602,"repository":"sablier-labs/interfaces","state":"closed","title":"Bespoke OpenGraph descriptions in the preview card","type":"discussion","updatedAt":"2023-10-24T22:24:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/602"},{"author":"gavriliumircea","body":"In response to #581 we are adding in our interface 2 new types of dynamic streams. \r\n![image](https://github.com/sablier-labs/v2-interfaces/assets/48255669/e8b4c416-e24a-4254-9ec7-1f8d8eaae106)\r\nI would love to hear your thoughts about the naming of this categories @PaulRBerg , @razgraf , @maxdesalle  ","createdAt":"2023-10-23T13:10:02Z","labels":[],"number":600,"repository":"sablier-labs/interfaces","state":"closed","title":"Find proper names for Linear Instant Unlock and Cliff Instant Unlock streams","type":"discussion","updatedAt":"2023-11-21T21:50:10Z","url":"https://github.com/sablier-labs/interfaces/discussions/600"},{"author":"PaulRBerg","body":"To the best of my legal ability, the recently proposed [UK regulations](https://twitter.com/kingscounselxyz/status/1700956101317955913) do not affect us because the Sablier protocol does not offer any sort of investment or trading facility for cryptos. However, it is worth keeping an eye on what the FCA has to say.\r\n\r\nBoth 1inch and Uniswap have added this warning to their interfaces (note: only visible to UK IPs):\r\n\r\n<img width=\"300\" alt=\"SCR-20231020-okns\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/615fdf16-8492-471c-90b1-c02d620fd04c\">\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-10-20 at 4 15 43 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2e8cd414-1b1d-4b05-820e-8f9b031f0931\">\r\n\r\n<img width=\"300\" alt=\"SCR-20231020-oinf\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0ef57768-50a3-41be-a9ce-bc1fe2a96d19\">","createdAt":"2023-10-20T15:22:23Z","labels":[],"number":598,"repository":"sablier-labs/interfaces","state":"closed","title":"UK legal disclaimer","type":"discussion","updatedAt":"2023-10-23T11:58:31Z","url":"https://github.com/sablier-labs/interfaces/discussions/598"},{"author":"PaulRBerg","body":"MetaMask has recently announced [MetaMask Snaps](https://twitter.com/MetaMask/status/1701586632741208477). This allows MetaMask to be customized with third-party plugins that implement arbitrary features and data.\r\n\r\nI suggest implementing a Sablier Snap that integrates the Sablier balances in MetaMask. There are two ways the balances can be integrated:\r\n\r\n1. Implicit: the streamed token balances are added to the typical ERC-20 balance (it remains to be seen if MetaMask even allows this).\r\n2. Explicit: separate balance counter for the Sablier streamed balance.\r\n\r\nIn either case, displaying a continuously updating balance (like in our UI) would be cool.\r\n\r\nSide note: I've hinted at this idea [here](https://github.com/sablier-labs/v2-core/discussions/39#discussioncomment-3211648).","createdAt":"2023-09-15T08:43:08Z","labels":[],"number":578,"repository":"sablier-labs/interfaces","state":"closed","title":"MetaMask Snap to add the Sablier balances to the total token balacnes","type":"discussion","updatedAt":"2024-01-09T15:49:22Z","url":"https://github.com/sablier-labs/interfaces/discussions/578"},{"author":"PaulRBerg","body":"Currently, the UI uses the user's ERC-20 balance as the approval amount.\r\n\r\nMy idea is to send a max uint256 approval for Permit2 so that users don't have to ERC-20 approve and Permit2 each time.","createdAt":"2023-09-21T08:20:23Z","labels":[],"number":584,"repository":"sablier-labs/interfaces","state":"closed","title":"Send a max uint256 approval for Permit2","type":"discussion","updatedAt":"2023-09-25T07:34:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/584"},{"author":"PaulRBerg","body":"## User Requests\r\n\r\nWe have received this request from two distinct users recently:\r\n\r\n- Wagyu (SteakHut)\r\n- [Wladimir Weinbender](https://twitter.com/Walodja1987/status/1681213879857168387)\r\n\r\n<img width=\"504\" alt=\"Screenshot 2023-09-15 at 3 14 28 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1f6832cd-0d7f-4cd7-a7f0-86c031299f6b\">\r\n\r\n## Implementation\r\n\r\nA new item is added in the [create stream gallery](https://app.sablier.com/gallery/) under the \"Lockup Dynamic\" section.\r\n\r\nThis item allows the user to specify a pre-defined amount that gets unlocked immediately.","createdAt":"2023-09-15T12:16:11Z","labels":[],"number":580,"repository":"sablier-labs/interfaces","state":"closed","title":"New Lockup Dynamic curve that unlocks a portion of the deposit immediately","type":"discussion","updatedAt":"2023-09-15T12:52:42Z","url":"https://github.com/sablier-labs/interfaces/discussions/580"},{"author":"PaulRBerg","body":"There's no link between the UI and our [community-token-list](https://github.com/sablier-labs/community-token-list) repo.\r\n\r\nI'm opening this discussion to explore the possibility of adding a call-to-action in the token dropdown, which would contain a hyperlink to the token community list repository.\r\n\r\nThe advantage would be that we would no longer get manual listing requests from users:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1d09ff83-5804-41d4-a2ff-3b7921c56195\"/>","createdAt":"2023-09-01T11:45:07Z","labels":[],"number":574,"repository":"sablier-labs/interfaces","state":"closed","title":"Call to action to token community lists","type":"discussion","updatedAt":"2023-11-30T19:16:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/574"},{"author":"PaulRBerg","body":"## Context\r\n\r\nIn https://github.com/sablier-labs/v2-interfaces/discussions/380, @razgraf articulated an explanation in favor of an explicit, separate \"Create account\" step for deploying proxies before being able to use Sablier:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/discussions/380#discussioncomment-6153185\r\n\r\nOne of Razvan's assumptions was that entirely abstracting away the proxy is not possible (post-deployment), but after testing the client app for a few weeks, I now think that that is achievable.\r\n\r\n## References\r\n\r\nLet's first hash out a list of all parts of the UI where the proxy is currently made explicit:\r\n\r\n- In the wallet button, the proxy appears underneath the EOA\r\n- In the wallet modal\r\n- In the stream profile, it says \"Your Proxy\"\r\n- In the search view, it says \"Sender (Proxy)\", and it asks the user to provide the proxy address\r\n- In the \"Details\" overlay, the proxy address is referenced as the stream sender (\"streaming to\")\r\n\r\nLMK if I've missed any!\r\n\r\n### Notes:\r\n\r\n- Re \"Create account\" modal: I will leave this aside since we've talked about it at length separately.\r\n- Re \"Manage proxy\" modal: this will need to remain implemented to account for the edge case when the proxy is deployed but the plugin is not installed. However, the wording can be slimmed down.\r\n\r\n## Problem\r\n\r\nMaking the proxy explicit and referencing it everywhere is problematic:\r\n\r\n1. First and foremost: it adds cognitive load onto non-technical users. Rather than focusing on educating these users on the nature of lockup streaming (which is a difficult thing to do, anyway!), we are also giving them homework on proxies. And this is a tall ask - I know Solidity developers who grapple with the forwarding proxy design.\r\n2. Stuffing the app with proxy references makes it more difficult to use and understand:\r\n     - When searching streams, how are users supposed to find the proxy address of a particular EOA? Go to Etherscan and call `getProxy`? People know about EOAs, not proxies.\r\n     - When recipients open the app, they see an alien address streaming tokens to them instead of the typical address they thought their payer had\r\n3.  The term \"proxy\" refers to different technical designs in Ethereum, and people dunk on most of them [^1]\r\n    - Unfortunately for us, the \"upgradeable proxy\" is the most popular type of proxy, which means that some Sablier users (many?) may be misled into considering Sablier an upgradeable protocol\r\n\r\n## Solution\r\n\r\n1. In the subgraph, normalize the streams so that proxy-originating streams are added to the EOA's list of streams\r\n    - Add an ancillary property for tracking the proxy that created the stream, which is null when the sender creates streams directly\r\n    - Optionally, add a boolean `rawSender`\r\n2. In general: display only EOAs regardless of whether the raw sender (in V2 Core) is the EOA's proxy\r\n3. In the search view: allow search by EOA only.\r\n4. For every sender action, check the raw sender;\r\n    - If `sender == proxy`: call V2 Periphery via proxy\r\n    - If `sender != proxy`: call V2 Core directly\r\n5. Keep mentioning the proxy in the wallet modal (but not the wallet button), as well as in various informational tooltips.\r\n\r\n## Concluding Remarks\r\n\r\nThere will be challenges in any case, but abstracting away the proxy may come with fewer downsides compared to making it glaringly explicit.\r\n\r\nBesides the refactoring cost, the only challenge introduced by my suggested solution would be one of *reverse synchronization* with the crypto ecosystem. People may look on Etherscan, see the raw sender (i.e., the proxy), open the Sablier UI, and try to search by that proxy address assuming that it is a direct user.\r\n\r\nHowever: (i) these are read-only users, and (ii) these are external users, and (iii) reverse lookups should be rare.\r\n\r\n[^1]: https://twitter.com/optimizoor/status/1671648226439741442","createdAt":"2023-06-25T20:57:07Z","labels":[],"number":470,"repository":"sablier-labs/interfaces","state":"closed","title":"Abstracting away the proxy is possible","type":"discussion","updatedAt":"2023-08-21T12:49:55Z","url":"https://github.com/sablier-labs/interfaces/discussions/470"},{"author":"PaulRBerg","body":"## Feature\r\n\r\nMultiple roads lead to this conclusion: that it would be a valuable feature for the stream creation form to be able to parse URL parameters, e.g.\r\n\r\n```text\r\nhttps://app.sablier.com/create/single/?shape=linear&amount=1000&startTime= 1691498438...\r\n```\r\n\r\nThe amount parameter would be filled in the amount input, and so on and so forth.\r\n\r\n## Use Cases\r\n\r\n1. Integration with invoicing software such as Request Network, [Smart Invoice](https://smartinvoice.xyz/)\r\n2. Creating payment requests, e.g. for DAO proposals, or just standard employee-to-company communication","createdAt":"2023-08-08T12:46:51Z","labels":[],"number":545,"repository":"sablier-labs/interfaces","state":"closed","title":"URL parsing for stream creation","type":"discussion","updatedAt":"2023-08-16T09:27:48Z","url":"https://github.com/sablier-labs/interfaces/discussions/545"},{"author":"razgraf","body":"For the various DNS work we did (vercel, redirects, token list setups) here are some good resources and flows we came up with.","createdAt":"2023-07-31T08:59:08Z","labels":[],"number":535,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: Research on DNS setup","type":"discussion","updatedAt":"2024-01-05T12:13:26Z","url":"https://github.com/sablier-labs/interfaces/discussions/535"},{"author":"razgraf","body":"This discussion will aggregate best practices and common issues/fixes related to Github Actions.","createdAt":"2023-07-30T18:46:02Z","labels":[],"number":534,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: Github Actions","type":"discussion","updatedAt":"2023-07-30T18:50:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/534"},{"author":"razgraf","body":"For linear streams `amount progress === time progress`. Cliff/Dynamic streams don't benefit from this logic similarity. This causes some big differences between what the two circles will be tracking. We should clearly define these progress circles and make these definitions work for every type of stream.\r\n\r\n![Stream Profile - Cliff + Finished](https://user-images.githubusercontent.com/15740806/210232647-057c5d60-c3bb-4049-8481-bea46fb25c63.png)\r\n\r\n## Options\r\n\r\n### 1. Time-dimension + Amount-dimension\r\n\r\n#### Linear stream (time === amount) \r\n- The blue progress bar will follow the streamed time\r\n- The orange progress bar will follow the withdrawn amount\r\n\r\n#### Cliff stream \r\n- The blue progress bar will follow the streamed time\r\n- The orange progress bar will follow the withdrawn amount\r\n- Extra: a special ui element will mark the end of the cliff (on the blue bar)\r\n\r\n#### Dynamic stream \r\n- The blue progress bar will follow the streamed time\r\n- The orange progress bar will follow the withdrawn amount\r\n- Extra: a special ui element could mark the end of each segment (on the time scale) \r\n- Downside❓: there are cases where the withdrawn amount percentage of completion will be higher than the streamed time (orange > blue)\r\n\r\n### 2. Amount dimension\r\n\r\n#### Linear stream (amount === time)\r\n- The blue progress bar will follow the streamed amount\r\n- The orange progress bar will follow the withdrawn amount\r\n\r\n#### Cliff stream\r\n- The blue progress bar will follow the streamed amount\r\n- The orange progress bar will follow the withdrawn amount\r\n- Extra: a special ui element could mark the end of the cliff (on the orange bar) \r\n\r\n#### Dynamic stream\r\n- The blue progress bar will follow the streamed amount\r\n   - Will evolve in a non-linear fashion, harder to predict\r\n- The orange progress bar will follow the withdrawn amount\r\n\r\n### 3. Time dimension\r\n\r\nThe withdrawn (orange) bar wouldn't make sense. There is no such thing as \"withdrawn time\".\r\n\r\n----\r\n\r\nTherefore, my suggestion would be to make the blue line (outer) follow the streamed time, while the orange (inner one) would follow the withdrawn amount. This would ensure there is at least one line that always grows linearly, with custom behaviors (cliff or dynamic segments) tracked through some extra UI elements. \r\n\r\nExample of special ui elements for Dynamic stream segments:\r\n\r\n![Playground Stream Circle](https://user-images.githubusercontent.com/15740806/210238104-2b4161b9-d995-452e-8345-8b1e881bb648.png)","createdAt":"2022-12-15T19:39:41Z","labels":[],"number":140,"repository":"sablier-labs/interfaces","state":"closed","title":"Should the stream circle track amount or time?","type":"discussion","updatedAt":"2023-07-06T13:35:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/140"},{"author":"PaulRBerg","body":"This is how the \"Manage proxy\" modal currently looks like when the user doesn't have a proxy (i.e. virtually all users opening Sablier V2 for the first time):\r\n\r\n<img width=\"350\" alt=\"Screenshot 2023-06-20 at 8 58 48 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0b145114-a66a-4388-aed4-22dc73ecefe8\">\r\n\r\nThis is a bit \"scary\":\r\n\r\n- The warning icon is used\r\n- The term \"missing\" is used (in a financial context, missing ain't a good thing)\r\n\r\nSuggestions:\r\n\r\n- Use a neutral color (e.g. green, blue, or get rid of colors somehow)\r\n- Use a friendlier icon\r\n- Rewrite the copyright to avoid the word \"missing\"\r\n- Position this modal as a _stepping stone_ toward entering the Sablier universe, not as a chore","createdAt":"2023-06-20T18:03:48Z","labels":[],"number":425,"repository":"sablier-labs/interfaces","state":"closed","title":"Scary-ish warning when setting up proxy","type":"discussion","updatedAt":"2023-07-06T09:50:12Z","url":"https://github.com/sablier-labs/interfaces/discussions/425"},{"author":"PaulRBerg","body":"## Task\r\n\r\nThe idea is to delete the local ABIs and source them from the (not-yet-published) contracts packages:\r\n\r\n- [ ] `@sablier/v2-core`\r\n- [ ] `@sablier/v2-periphery`\r\n- [ ] `@prb/proxy`\r\n\r\nObviously, this task is contingent upon wrapping up the contracts and shipping the packages to the npm registry (with a \"beta\" tag), but we expect to do that shortly - we've knocked out all findings in the audit report.\r\n\r\n## Dependent Issues Upstream\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/372\r\n- https://github.com/sablier-labs/v2-periphery/issues/84\r\n- https://github.com/sablier-labs/v2-periphery/issues/79\r\n- https://github.com/PaulRBerg/prb-proxy/issues/126","createdAt":"2023-06-25T09:45:46Z","labels":["backlog"],"number":485,"repository":"sablier-labs/interfaces","state":"closed","title":"[Feature request] Install contracts packages","type":"discussion","updatedAt":"2023-11-30T19:21:16Z","url":"https://github.com/sablier-labs/interfaces/discussions/485"},{"author":"PaulRBerg","body":"I gather that this is a complex feature to implement, requiring oracles and so forth, but it may prove to be a useful feature for end-users.\r\n\r\nNote: this discussion will be turned into an item on Canny.","createdAt":"2023-06-24T14:34:50Z","labels":[],"number":457,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: display the dollar value of streams","type":"discussion","updatedAt":"2023-07-05T10:59:47Z","url":"https://github.com/sablier-labs/interfaces/discussions/457"},{"author":"PaulRBerg","body":"It would be cool if the app responded to keystrokes, e.g., clicking on ESC would close the sidebars.","createdAt":"2023-06-21T14:04:32Z","labels":[],"number":435,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: close side bars via the ESC key","type":"discussion","updatedAt":"2023-07-05T10:55:37Z","url":"https://github.com/sablier-labs/interfaces/discussions/435"},{"author":"PaulRBerg","body":"## Front-end Packages\r\n\r\nAt the moment, all current packages in the monorepo are named like this: `@sablier/*`. There is no mention of \"V2\", and this is fine as long as all packages remain private.\r\n\r\nHowever, in https://github.com/sablier-labs/v2-interfaces/discussions/454 we are discussing the implementation of a public SDK, which would have to be named smth like `@sablier/v2-sdk` to communicate the fact that the SDK is in relation to the Sablier V2 release, and not V1 (or any other future release).\r\n\r\nThus, we have a problem:\r\n\r\n- Some packages will be public: the SDK and any other monorepo packages installed by it\r\n- The public packages will have to reference \"V2\"\r\n- Other packages will remain private, e.g. `locales`\r\n- The private packages need not reference \"V2\"\r\n\r\n## Suggested Solution\r\n\r\nAs I see it, there are three solutions:\r\n\r\n1. Keep all package names the same as they are today\r\n2. Rename only the public packages to `@sablier/v2-*`\r\n3. Rename all packages to `@sablier/v2-*`\r\n\r\nIn the context of the public SDK, the 1st solution is kinda bad because all sorts of `@sablier/*` dependencies (which have no reference to V2) will pop up in the end user's dependency tree. How do we manage this when V3 comes about?\r\n\r\nThe 2nd solution will lead to inconsistency and will also involve some maintenance overhead, i.e., we will have to remember to rename packages to `@sablier/v2-*` when they switch from private to public.\r\n\r\nThus, the 3rd solution emerges as the one with the fewest downsides.\r\n\r\n## Contracts Packages\r\n\r\nFor context, this is how the V2 Core and V2 Periphery packages are named:\r\n\r\n- `@sablier/v2-core`\r\n- `@sablier/v2-periphery`\r\n\r\nAnd these packages are meant to be installed in any Node.js environment, including front-ends.","createdAt":"2023-06-24T11:40:32Z","labels":["backlog"],"number":455,"repository":"sablier-labs/interfaces","state":"closed","title":"Consider prefixing all packages like `@sablier/v2-*`","type":"discussion","updatedAt":"2023-07-02T17:45:25Z","url":"https://github.com/sablier-labs/interfaces/discussions/455"},{"author":"gavriliumircea","body":"### Caveats with dayjs\r\n\r\n#### Year ~= 365 days\r\nInitially we tried to approximate a year with 365 days. This triggered a bug because we didn't consider the leap years. Make sure to perform these computations through the `dayjs.add` or `dayjs.diff` utilities.\r\n\r\nNote: we are using `dayjs` as a library to make the transitions from milliseconds to actual dates. The library takes into account leap years and generates inconsistencies between their math and ours. As an example, with our formula 4 years = 365*4, while with `dayjs` 4 years could mean = 365*4 + 1. The solution we found was to adapt our calculation in a way that takes into account leap years - by simply relying more on the `dayjs` logic.\r\n\r\n#### DST\r\n\r\nSnippet directly explaining the issue.\r\n\r\n```ts\r\n  /**\r\n     * There used to be an error with durations that take into account DST. Switching to UTC time fixes it.\r\n     * E.g. user selects 30 days, the diff here approximates 30 days and 1 hour.\r\n     *\r\n     * https://day.js.org/docs/en/manipulate/utc-offset\r\n     * https://day.js.org/docs/en/parse/utc\r\n     */\r\n  const now = dayjs.utc();\r\n```","createdAt":"2023-06-25T11:11:07Z","labels":[],"number":467,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: Approximation for year, DST (Caveats with `dayjs`)","type":"discussion","updatedAt":"2023-07-02T13:08:23Z","url":"https://github.com/sablier-labs/interfaces/discussions/467"},{"author":"PaulRBerg","body":"After sleeping on this issue, I now think that the limiting factor is @razgraf and @gavriliumircea's bandwidth to support a slightly adjusted contract architecture.\r\n\r\nSuppose we introduce a way to disable flash loans in each streaming contract (linear and dynamic). The low-level details of how this is implemented in Solidity need not interest us in this discussion.\r\n\r\nUnder this new design, there would be:\r\n\r\n- One deployment of `SablierV2LockupLinear` for stablecoins and another deployment for non-stablecoins (e.g. vesting assets)\r\n- Ditto for `SablierV2LockupDynamic`\r\n\r\nThe question is: would it take a long time to re-engineer the subgraph and the UI to support multiple deployments per streaming contract? I can't tell from my end.\r\n\r\nNote that the contract names would remain the same. The only difference between the deployments would be their capacity to handle flash loans.\r\n\r\nYour answer to this question will help us decide on the Solidity implementation (whether we nuke flash loans out of orbit or add a flag to disable them).","createdAt":"2023-04-05T07:35:04Z","labels":["backlog"],"number":233,"repository":"sablier-labs/interfaces","state":"closed","title":"Should we include flash loans in the V2.0 deployment?","type":"discussion","updatedAt":"2023-12-22T13:53:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/233"},{"author":"PaulRBerg","body":"It would be nice to make the \"Create stream\" button more prominent, e.g. by making it orange, so that we increase the likelihood of users completing the create-stream process:\r\n\r\n<img width=\"500\" alt=\"SCR-20230626-jzeq\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b3a8cf5d-f62c-4dda-be9c-8335c3746392\">\r\n\r\nScenario:\r\n\r\n1. Alice opens Sablier for the first time\r\n2. Alice signs tx for granting ERC-20 approval to Permit2\r\n3. Alice switches context (e.g. opens Twitter)\r\n4. Alice goes back to the create stream form","createdAt":"2023-06-26T07:59:33Z","labels":[],"number":471,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to make \"Create stream\"  button more prominent","type":"discussion","updatedAt":"2023-06-28T17:39:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/471"},{"author":"PaulRBerg","body":"## Example Scenario\r\n\r\n1. Alice creates a stream\r\n2. Time passes, and the stream becomes `SETTLED`\r\n3. Alice opens the stream's page\r\n4. Alice clicks on \"Cancel Stream\"\r\n5. Alice sees this yellow ensurance:\r\n\r\n<img width=\"608\" alt=\"Screenshot 2023-06-24 at 5 42 30 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9b234cf4-f7aa-458c-8b97-133e6392891f\">\r\n\r\n## Suggestion\r\n\r\nWhy give the option to Alice to perform steps 4 and 5 (and give us homework in the future in terms of maintaining the ensurance design, content, etc.) from above when the feature can be hidden away by employing one of the following approaches:\r\n\r\n1. Hide the buttons\r\n2. Gray out the button\r\n3. Open the stream history\r\n\r\nIIRC, we're already using the 3rd approach when clicking the cancel button on a canceled stream profile.\r\n\r\n## Scenarios Applicable\r\n\r\n1. Settled + Cancel button (example above)\r\n2. Pending + Withdraw button; pending button cannot be withdrawn from anymore\r\n3. Depleted + Withdraw button; depleted streams cannot be withdrawn from anymore\r\n\r\n## Contract Checklists\r\n\r\nSee the checklists used by our Solidity tests:\r\n\r\n- [`cancel`](https://github.com/sablier-labs/v2-core/blob/eeee4decd7045555d72e1f1046950dbd2c310b68/test/integration/basic/lockup/cancel/cancel.tree)\r\n- [`withdraw`](https://github.com/sablier-labs/v2-core/blob/eeee4decd7045555d72e1f1046950dbd2c310b68/test/integration/basic/lockup/withdraw/withdraw.tree)\r\n\r\n## Related\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/issues/461","createdAt":"2023-06-24T15:44:09Z","labels":[],"number":462,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to hide no-op features rather than explain them with informational cards","type":"discussion","updatedAt":"2023-06-28T11:17:18Z","url":"https://github.com/sablier-labs/interfaces/discussions/462"},{"author":"PaulRBerg","body":"There seems to be enough space in the duration picker to use the long-form of the year (2024) instead of the short-hand version `'24`:\r\n\r\n<img width=\"336\" alt=\"Screenshot 2023-06-20 at 8 39 02 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4f68b645-7e8f-4a3f-96a1-1eba595db65d\">\r\n\r\nThe apostrophe is tiny, and it's not strictly obvious if that is the year or the time or some other stream property - some users may have to squint at the screen.\r\n\r\nAdditionally, this short-hand apostrophe may not be intuitive to some users, especially non-Latin speakers.\r\n\r\nSide note:\r\n\r\n- When I say \"not strictly obvious\", I refer to the general case of the potential future average user of Sablier. That notation is, of course, obvious to me.\r\n- I have noticed that the same short form is used in other places, e.g., the input placeholders. The long-form version may be helpful there, too.","createdAt":"2023-06-20T17:46:55Z","labels":[],"number":423,"repository":"sablier-labs/interfaces","state":"closed","title":"Use the full year in the estimated date at the bottom of the duration picker","type":"discussion","updatedAt":"2023-06-27T10:47:35Z","url":"https://github.com/sablier-labs/interfaces/discussions/423"},{"author":"PaulRBerg","body":"| Current | Suggestion | Explanation |\r\n|:-------|:-------|:-------|\r\n| Active | Streaming | Payments in general can be \"Active\" but its \"Streaming\" what is unique about Sablier  |\r\n| Characteristics | Overview | The former sounds like an oxymoron in the Details view; the latter is also simpler to read |\r\n| Details | Attributes | This is for the right-hand view in the stream profile |\r\n| Milestones | Steps | The \"Unlock in steps\" uses two terms when it could use just one, i.e., the latter |\r\n| Network | Chain | Some chains share the same network id, but the chain ids always differ [^2] |\r\n| Special | (Lockup)? Dynamic | KISS, no need to introduce new names for the same concept[^3] |\r\n| Type | Model | The latter is more specific, and it's the term used by the NFT descriptor[^4] |\r\n| Uniform | (Lockup)? Linear | KISS, no need to introduce new names for the same concept[^3] |\r\n\r\n[^1]: https://github.com/sablier-labs/v2-core/issues/578\r\n[^2]: https://medium.com/@pedrouid/chainid-vs-networkid-how-do-they-differ-on-ethereum-eec2ed41635b\r\n[^3]: https://github.com/sablier-labs/v2-interfaces/discussions/428\r\n[^4]: https://github.com/sablier-labs/v2-core/blob/eeee4decd7045555d72e1f1046950dbd2c310b68/src/SablierV2NFTDescriptor.sol","createdAt":"2023-06-24T15:45:45Z","labels":[],"number":463,"repository":"sablier-labs/interfaces","state":"closed","title":"Structural copyright feedback","type":"discussion","updatedAt":"2023-08-23T11:15:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/463"},{"author":"PaulRBerg","body":"## Description\r\n\r\nI imagine that this is more difficult to do, but it would be great to say this:\r\n\r\n> Successfully created a linear stream\r\n\r\nInstead of this:\r\n\r\n> Successfully created a stream (linear stream)\r\n\r\nIn the stream creation modals.\r\n\r\nSide note: as discussed in https://github.com/sablier-labs/v2-interfaces/discussions/274, I would prefer to use the long-form \"Lockup Linear\" and \"Lockup Dynamic\" instead of just \"linear\" and \"dynamic\". Capitalizing the streaming models would also give them a sense of identity - it would meme-ify them.\r\n\r\n## Screenshots\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-20 at 9 23 51 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c0986ac2-ba4e-4cd6-80fe-5bd04898c34a\">","createdAt":"2023-06-20T18:23:26Z","labels":[],"number":427,"repository":"sablier-labs/interfaces","state":"closed","title":"Say \"linear stream\" instead of \"stream (linear stream)\"","type":"discussion","updatedAt":"2023-06-27T09:25:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/427"},{"author":"PaulRBerg","body":"## Description\r\n\r\nScenario:\r\n\r\n- I click on \"Start/end dates\" in the stream creation form\r\n- I select a start and an end date (spending quite a bit of time deciding about them)\r\n- I click on \"Duration\" (either accidentally or to see if a duration would suit better for my needs)\r\n- I lose my previously selected dates\r\n\r\nSeparate point - WDYT about renaming \"start/end date\" to \"fixed\" or \"fixed dates\"?\r\n\r\n## Screenshot\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-20 at 8 57 38 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/52dd989a-f7e5-409b-97d1-0ddfbb941542\">","createdAt":"2023-06-20T17:57:46Z","labels":[],"number":424,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: do not clear dates when switching between durations and fixed dates","type":"discussion","updatedAt":"2023-06-28T11:22:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/424"},{"author":"PaulRBerg","body":"In the dashboard, it would be nice to be able to:\r\n\r\n- Sort by Timeline (i.e., start time): hark back to my historical streams and share them with my accountants\r\n- Sort by Value:  see whom I've paid the most\r\n- Sort by Progress: see all depleted streams first and notify recipients","createdAt":"2023-06-24T15:29:32Z","labels":[],"number":460,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: sorting in dashboard table","type":"discussion","updatedAt":"2023-07-06T13:10:13Z","url":"https://github.com/sablier-labs/interfaces/discussions/460"},{"author":"PaulRBerg","body":"As discussed in #143, we're currently using the following URL paths to identify streams:\r\n\r\n```text\r\n/stream/linear-ChainId-StreamId\r\n```\r\n\r\nNow, this URL seems overly simplistic in the broader context of Sablier V2's product positioning. The quintessential attribute of V2.0 streams isn't that they are \"linear\" or \"dynamic\"; it's that they are lockup streams.\r\n\r\nThis doesn't pose a problem in the short term, since lockup is our only streaming model. But as soon as we ship another model, the URLs will confuse and mislead everybody - especially if that future streaming model can also be differentiable along the lines of \"linear\" and \"dynamic\".\r\n\r\nMy suggestion is thus to refactor the identifiers to include the \"lockup-\" prefix before \"linear\", like this:\r\n\r\n```text\r\n/stream/lockup-linear-ChainId-StreamId\r\n```\r\n\r\nDoing so would not just prevent the aforementioned long-term issue; there would be more benefits:\r\n\r\n1. We would promote the term \"lockup\" for referring to the capital-upfront type of streams, which would play to our advantage because we are basically the inventors of this product category.\r\n2. The stream URLs and the NFT metadata would be kept in sync (I am planning on including \"LockupLinear\" and \"LockupDynamic\" in each NFT's metadata).\r\n3. Similarly, the stream URLs and the contract names would be kept in sync (helping users cross-reference streams on Etherscan).","createdAt":"2023-05-26T13:31:43Z","labels":[],"number":274,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to refactor the ids to contain a \"lockup-\" prefix","type":"discussion","updatedAt":"2023-06-26T18:23:55Z","url":"https://github.com/sablier-labs/interfaces/discussions/274"},{"author":"PaulRBerg","body":"Here:\r\n\r\n<img width=\"113\" alt=\"Screenshot 2023-06-20 at 9 25 52 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5d99dc27-19c9-478f-bd35-9f70f2293727\">\r\n\r\nSuggested alternatives:\r\n\r\n- Lockup Linear (consistent with https://github.com/sablier-labs/v2-interfaces/discussions/274 and https://github.com/sablier-labs/v2-interfaces/discussions/427)\r\n- Linear model\r\n\r\nOr anything else other than \"rate\" so that the total amount is not confused with the payment rate per second.","createdAt":"2023-06-20T18:27:45Z","labels":[],"number":428,"repository":"sablier-labs/interfaces","state":"closed","title":"Total streaming amount \"Linear rate\" in the Dashboard can be misunderstood to mean payment rate per second","type":"discussion","updatedAt":"2023-06-26T18:13:15Z","url":"https://github.com/sablier-labs/interfaces/discussions/428"},{"author":"PaulRBerg","body":"The streaming models are currently referred to like this:\r\n\r\n- \"linear\"\r\n- \"dynamic\"\r\n\r\nI suggest refactoring them to the following:\r\n\r\n- \"Lockup Linear\"\r\n- \"Lockup Dynamic\"\r\n\r\nThe rationale is two-fold:\r\n\r\n1. \"Lockup\" is an important descriptor for Sablier V2, and it should be mentioned (we discussed this point at length in https://github.com/sablier-labs/v2-interfaces/discussions/274).\r\n2. Capitalizing the terms would hint at the fact that these terms are not just ordinary mathematical words - that they are critical memes for Sablier V2. The capitalized form would give them a special meaning and would draw (a little) attention to them.","createdAt":"2023-06-24T11:55:35Z","labels":[],"number":456,"repository":"sablier-labs/interfaces","state":"closed","title":"Put an emphasis on the streaming models","type":"discussion","updatedAt":"2023-06-26T18:06:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/456"},{"author":"PaulRBerg","body":"The FAQ on the landing page looks awesome, and I appreciate the effort put into building it. However, there are a couple of problems with it:\r\n\r\n1. Introduces a choice about which FAQ (landing page, or the [docs version](https://sablier-v2-docs.vercel.app/faq) to reference when someone asks us a generic question (e.g., on Discord).\r\n2. This FAQ is hidden at the bottom of a page (\"Organizations\") that it is hidden past another page (the main landing page). Unless we have millions of visitors to our website, very few people will end up reading this; people have decreasingly shorter attention spans in the modern world.\r\n3. If we wanted to share a link to this FAQ directly, it doesn't seem possible to auto-scroll to this section using the current implementation (I tried adding the `#Frequently-asked-questions` suffix in the URL).\r\n4. We will need to keep it in sync with the docs version. This increases the maintenance and coordination costs.\r\n\r\nGiven the above, I suggest we remove this section from the landing page and keep our FAQ exclusively on the docs website.\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-06-20 at 2 01 43 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/fbcbad86-39d2-413e-bf4c-49680e03a921\">","createdAt":"2023-06-20T11:01:35Z","labels":[],"number":416,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to remove the FAQ from the landing page","type":"discussion","updatedAt":"2023-06-26T17:57:40Z","url":"https://github.com/sablier-labs/interfaces/discussions/416"},{"author":"PaulRBerg","body":"## Suggestion\r\n\r\nThere's enough space in the \"Details\" overlay to split the \"Parties\" entry into two entries:\r\n\r\n- \"Sender\"\r\n- \"Recipient\"\r\n\r\nMuch clearer and declarative this way, IMHO. Also worth noting that \"Parties\" is a technical term, which is typically used in legal contracts, and that non-native English speakers may also interpret it as the plural of \"party\" (as in, celebration).\r\n\r\n## Screenshot\r\n\r\n<img width=\"300\" alt=\"SCR-20230624-pwhv\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2db1416a-2e34-48a0-80e2-35c83ae5ebfc\">\r\n","createdAt":"2023-06-24T15:09:33Z","labels":[],"number":459,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to refactor the \"Parties\" into \"Sender\" and \"Recipient\" for clarity","type":"discussion","updatedAt":"2023-06-26T16:49:07Z","url":"https://github.com/sablier-labs/interfaces/discussions/459"},{"author":"PaulRBerg","body":"Or, more generally: be able to filter by stream status.","createdAt":"2023-06-24T14:35:48Z","labels":[],"number":458,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature request: hide canceled streams","type":"discussion","updatedAt":"2023-06-26T16:44:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/458"},{"author":"PaulRBerg","body":"The transaction confirmation modal for groups of streams looks like this:\r\n\r\n<img width=\"250\" alt=\"Screenshot 2023-06-21 at 9 30 28 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/d306219f-f469-44d9-9701-cb65e83c7ff1\">\r\n\r\nIt is beautiful but also packed with a lot of information -  line 3 is particularly difficult to read, and draws attention away from what (I think is) the essential information: the stream ids.\r\n\r\nMy suggestion is to simplify this modal so that it only lists out the created stream ids, and maybe the combined total amount. The granular per-stream information can be viewed in the dashboard and each respective stream profile.","createdAt":"2023-06-21T18:34:16Z","labels":[],"number":440,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to simplify the transaction confirmation model for groups of streams","type":"discussion","updatedAt":"2023-06-26T16:25:48Z","url":"https://github.com/sablier-labs/interfaces/discussions/440"},{"author":"PaulRBerg","body":"The UI asks the user to allow the Permit2 contract to spend the ERC-20 token:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-21 at 5 48 39 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/183306ee-e916-4c65-a92c-95b38c61132e\">\r\n\r\nHowever, the end user may not know anything about Permit2. For all we know, Sablier may be their first interaction with web3. Thus, a more sensible wording would be something like this:\r\n\r\n> Approve the Sablier app to handle your TKN assets (via Permit2)\r\n\r\nOr:\r\n\r\n> Allow the Sablier app to create the stream by approving the Permit2 contract to spend your TKN assets\r\n\r\nOr:\r\n\r\n> Sablier creates streams via a contract called Permit2, which you need to approve before being able to create the stream\r\n\r\nThe point is to clarify that Sablier will take care of the approval, not some third-party contract system the user may not be familiar with.","createdAt":"2023-06-21T14:51:58Z","labels":[],"number":437,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to focus on Sablier in the approval prompt","type":"discussion","updatedAt":"2023-06-26T14:09:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/437"},{"author":"PaulRBerg","body":"These are the default durations currently suggested by the client app:\r\n\r\n<img width=\"595\" alt=\"Screenshot 2023-06-20 at 8 34 35 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/afd38056-59ee-419b-845f-642f0c5cdbf5\">\r\n\r\nHowever, because we are placing an emphasis on organizations with Sablier V2, it would be helpful to suggest longer durations. Suggestions:\r\n\r\n- Add \"2 years\"\r\n- Add \"6 months\" (i.e. 180 days)\r\n- Replace \"15 days\" with \"7 days\" (a week-long anchor seems more realistic)\r\n- Remove \"12 hours\"","createdAt":"2023-06-20T17:38:42Z","labels":[],"number":422,"repository":"sablier-labs/interfaces","state":"closed","title":"Longer default durations","type":"discussion","updatedAt":"2023-06-26T13:27:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/422"},{"author":"PaulRBerg","body":"The \"Audited and secure\" section is currently part of the `/organizations` page of the landing app:\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-06-20 at 3 45 43 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/60fcdd28-8c5a-4d2e-8c97-44b8a45024f4\">\r\n\r\nHowever, this section is relevant for anyone interested in using Sablier, not just organizations.\r\n\r\nImagine the following scenario: a YouTuber sets out to create a video about Sablier[^1]. The YouTuber may open our landing page and scroll through it to explain what Sablier is about - but they may not click on the \"Organizations\" tab/ buttons for purposes of keeping the presentational video simple.\r\n\r\nIt would be helpful to display the audits on the main landing page because we've paid a lot of money for them, and they are relevant information for the general public.\r\n\r\n[^1]: https://www.youtube.com/watch?v=BSbMBp76sSk","createdAt":"2023-06-20T12:52:18Z","labels":[],"number":418,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to move the \"Audited and secure\" page to the main landing page","type":"discussion","updatedAt":"2023-06-26T13:07:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/418"},{"author":"PaulRBerg","body":"Since integrations (both front-end and back-end) will play a critical role in growing Sablier V2, it would be helpful to add a \"Docs\" button in the navbar in the landing page, which currently has these four buttons:\r\n\r\n<img width=\"538\" alt=\"Screenshot 2023-06-20 at 1 34 16 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/bad812dd-0161-49b5-8d4e-e799fad62b36\">\r\n\r\nTwo ideas:\r\n\r\n1. Just add \"Docs\" before \"Links\"\r\n2. Replace \"App\" by \"Docs\", and place \"Docs\" before \"Links\" ","createdAt":"2023-06-20T10:36:33Z","labels":[],"number":415,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to add a link to the docs in the navbar","type":"discussion","updatedAt":"2023-06-26T13:05:19Z","url":"https://github.com/sablier-labs/interfaces/discussions/415"},{"author":"PaulRBerg","body":"If our launch goes well, we will be flooded with feature requests from users. And if that is so, it would be helpful to aggregate those requests somewhere.\r\n\r\nI've seen lots of tech startups use [Canny](https://canny.io/) for this - which lets users upvote feature requests (great for prioritization).\r\n\r\nWDYT @razgraf @maxdesalle?\r\n\r\nIf you like this idea, we might want to make this button (on the landing page) have a hyperlink to Canny:\r\n\r\n<img width=\"229\" alt=\"Screenshot 2023-06-20 at 12 25 46 AM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/cb803e30-51f5-4fb4-b1ee-7bce4c85f345\">","createdAt":"2023-06-19T21:32:28Z","labels":[],"number":413,"repository":"sablier-labs/interfaces","state":"closed","title":"Idea to set up a Canny page to collect feature requests from users","type":"discussion","updatedAt":"2023-06-26T12:49:43Z","url":"https://github.com/sablier-labs/interfaces/discussions/413"},{"author":"PaulRBerg","body":"Two places where my suggestions applies:\r\n\r\n1. The landing page (first section under \"Why Sablier\")\r\n2. The stream gallery page in the client app\r\n\r\nThe rationale is thus:\r\n\r\n- The exponential curve is more emblematic of Sablier V2 than the traditional monthly-unlocks payment model\r\n- It feels a bit odd (at least to me) to feature a fundamentally non-streaming design so prominently on our marketing materials; I suggest we position it as a curve _indirectly_ enabled by the universality of the Lockup Dynamic streaming model, not as a flagship curve\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-06-20 at 1 31 18 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/57a74744-fa1a-4d79-a4df-1b2f3aec60dc\">\r\n","createdAt":"2023-06-20T10:31:07Z","labels":[],"number":414,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to feature the exponential curve(s) before the traditional monthly-unlocks","type":"discussion","updatedAt":"2023-06-26T16:19:01Z","url":"https://github.com/sablier-labs/interfaces/discussions/414"},{"author":"gavriliumircea","body":"I researched a bit what Vercel offers as a Web Analytics solution and is seems like a good fit.\r\nIt offers page vies\r\n![Screenshot 2023-06-22 at 13 26 44](https://github.com/sablier-labs/v2-interfaces/assets/48255669/c5729e57-584b-47cb-a8bd-2a79409bc0bd)\r\n![Screenshot 2023-06-22 at 13 27 26](https://github.com/sablier-labs/v2-interfaces/assets/48255669/32fa1412-a400-4125-bf5b-e7bdf93b6c58)\r\nIt doesn't use cookies and the users identity cannot be determined\r\n![Screenshot 2023-06-22 at 13 28 50](https://github.com/sablier-labs/v2-interfaces/assets/48255669/e134c681-27cf-4f5e-97fa-c25cb4f3d52d)\r\n![Screenshot 2023-06-22 at 13 22 33](https://github.com/sablier-labs/v2-interfaces/assets/48255669/48a3c6fc-503a-4779-a6a2-03c0e236ccb3)\r\nAnd the pricing seems fair to me\r\n![Screenshot 2023-06-22 at 13 24 54](https://github.com/sablier-labs/v2-interfaces/assets/48255669/873bfbce-8e61-4226-80f0-ba8467e97b22)\r\n","createdAt":"2023-06-22T10:39:09Z","labels":[],"number":447,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: Vercel Web Analytics","type":"discussion","updatedAt":"2023-06-26T12:37:21Z","url":"https://github.com/sablier-labs/interfaces/discussions/447"},{"author":"PaulRBerg","body":"There's a teaser for Airstreams in the top-right corner:\r\n\r\n<img width=\"461\" alt=\"SCR-20230621-trnt\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/6e227fd7-88c8-4659-88c8-3bccd5237012\">\r\n\r\nWhile I appreciate the business benefits of teasing not-yet-released features, this may be a premature move.\r\n\r\n- Sablier V2 is a *behemoth* - if we can manage people to understand what Lockup Linear is, I'm happy. If we can manage people to understand Lockup Dynamic, I'm thrilled. But Airstreams aren't even built - I don't fully understand them myself.\r\n- Sablier has not launched anything in >3 years; there will be an influx of new information when we launch, and we should take our time and explain our new products in stages.\r\n- There's also the proxy model that senders will need to get accustomed to; there's really a lot to learn when using the Sablier V2 UI.\r\n- Realistically speaking, Airstreams are ~6 months away. I wouldn't want to give such a cool meme away (to our competitors).\r\n- Product-wise, \"Airstreams\" occupy quite a bit of real estate (in the proximity of some important buttons, like the wallet and the create stream toggle) . It draws attention away from the present-day features of the product, which we would prefer to be used now.\r\n\r\nI would thus suggest the removal of the \"Airstreams\" teaser until we (ourselves) have a better idea of what it will look like, and we get closer to launching it.","createdAt":"2023-06-21T19:59:29Z","labels":[],"number":443,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to remove the \"Airstreams\" teaser","type":"discussion","updatedAt":"2023-06-22T10:14:51Z","url":"https://github.com/sablier-labs/interfaces/discussions/443"},{"author":"PaulRBerg","body":"At present, the following card is shown in the profile page of both Lockup Linear and Lockup Dynamic streams:\r\n\r\n<img width=\"240\" alt=\"Screenshot 2023-06-21 at 5 16 38 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/11f93860-cc9d-493f-bbef-53b6e42f92b9\">\r\n\r\nI understand why you've gone with the term \"Period\" - it's because of the potentially non-linear payout of Lockup Dynamic streams.\r\n\r\nHowever, for Lockup Linear streams, the amount of time passed corresponds to the amount of tokens streamed, so we could say \"Streamed Amount\".","createdAt":"2023-06-21T14:19:30Z","labels":[],"number":436,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to display \"Streamed amount\" in the case of linear streams","type":"discussion","updatedAt":"2023-06-22T09:20:43Z","url":"https://github.com/sablier-labs/interfaces/discussions/436"},{"author":"PaulRBerg","body":"I've seen a few cases in the code where the truthiness of the `children` object is checked like this:\r\n\r\n```typescript\r\nchildren ? doSmth : doSmth\r\n```\r\n\r\nInstead of using `_`. Example:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/409f20f139cc3e99c28e4420a3c6e0d7d51d6507/apps/product/src/pages/Organization/FAQ/index.tsx#L204\r\n\r\nIs this intentional? Or just a tiny inconsistency?\r\n\r\nI'm asking more so that I learn if `children` has any unusual behavior in terms of truthiness.","createdAt":"2023-06-19T17:20:09Z","labels":[],"number":410,"repository":"sablier-labs/interfaces","state":"closed","title":"Are these uses of `children ?` truthiness intentional","type":"discussion","updatedAt":"2023-06-21T00:51:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/410"},{"author":"PaulRBerg","body":"In the root `package.json`, the following packages have their versions frozen (there's no caret `^`):\r\n\r\n- `@trivago/prettier-plugin-sort-imports`\r\n- `cz-conventional-changelog`\r\n- `eslint`\r\n- `husky`\r\n- `prettier`\r\n\r\nWhy?\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/7581cd7a452278f05377c6862305fd4393b42762/package.json#L14-L24","createdAt":"2022-10-15T12:07:48Z","labels":[],"number":36,"repository":"sablier-labs/interfaces","state":"open","title":"Why are these dev dependencies' versions frozen?","type":"discussion","updatedAt":"2023-06-18T16:17:32Z","url":"https://github.com/sablier-labs/interfaces/discussions/36"},{"author":"PaulRBerg","body":"I saw these:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/models/src/Stream/Functionality.ts#L557-L564\r\n\r\nWhy are they not localized in `locales`?","createdAt":"2023-06-04T17:58:18Z","labels":[],"number":306,"repository":"sablier-labs/interfaces","state":"closed","title":"Shouldn't the texts in `models` be localized in `locales`?","type":"discussion","updatedAt":"2023-06-18T16:12:43Z","url":"https://github.com/sablier-labs/interfaces/discussions/306"},{"author":"PaulRBerg","body":"Not sure if this is useful at all but I saw it mentioned in Week in Ethereum; it looks like there is some overlap between this template and our stack so I thought it might be worth skimming through the README to see if there are any best practices/ helpful code snippets to learn.\r\n\r\nhttps://github.com/m1guelpf/armchair","createdAt":"2023-06-03T09:31:35Z","labels":[],"number":286,"repository":"sablier-labs/interfaces","state":"closed","title":"Inspiring from the Armchair template","type":"discussion","updatedAt":"2023-06-18T14:27:33Z","url":"https://github.com/sablier-labs/interfaces/discussions/286"},{"author":"PaulRBerg","body":"I couldn't find them consumed anywhere:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/subgraphs/src/index.ts#L5","createdAt":"2023-06-04T17:56:04Z","labels":[],"number":304,"repository":"sablier-labs/interfaces","state":"closed","title":"Why are the generated GraphQL types exported in `subgraphs`?","type":"discussion","updatedAt":"2023-06-18T14:03:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/304"},{"author":"PaulRBerg","body":"I just started looking at the `tsconfig.json` and it's hard for me to contrast and compare the differences between them, because the keys are not ordered alphabetically in all files.\r\n\r\nLuckily there is a Prettier plugin that can do this for us, [`pretiter-plugin-sort-json`](https://www.npmjs.com/package/prettier-plugin-sort-json).\r\n\r\nWould you be happy to start using it in this repo, @razgraf? Can make a PR if yes.","createdAt":"2022-10-16T20:03:17Z","labels":["backlog"],"number":52,"repository":"sablier-labs/interfaces","state":"closed","title":"Thoughts on using the \"prettier-plugin-sort-json\" plugin?","type":"discussion","updatedAt":"2023-06-18T14:29:22Z","url":"https://github.com/sablier-labs/interfaces/discussions/52"},{"author":"PaulRBerg","body":"I just noticed that Uniswap does this and I think it's awesome!\r\n\r\n<img width=\"165\" alt=\"uniswap-gas-price\" src=\"https://user-images.githubusercontent.com/8782666/195065789-3203e6fd-f24e-4f4b-899b-29e472ff447d.png\">\r\n","createdAt":"2022-10-11T10:23:08Z","labels":["type: feature","backlog"],"number":27,"repository":"sablier-labs/interfaces","state":"open","title":"Feature idea: gas price and block number","type":"discussion","updatedAt":"2023-06-26T18:10:37Z","url":"https://github.com/sablier-labs/interfaces/discussions/27"},{"author":"PaulRBerg","body":"_Responding to @razgraf's comment [here](https://github.com/sablier-labs/v2-interfaces/pull/324#issuecomment-1579370018)_.\r\n\r\n> Consider that switching to a `dist` model may make the developer experience much worse\r\n\r\nThis is why I opened https://github.com/sablier-labs/v2-interfaces/issues/331.\r\n\r\n> if source-mapping doesn't work\r\n\r\nIf there are no type issues in the source code, TypeScript should always succeed in generating the source maps[^1].\r\n\r\nOf course, there may be a bug in the TypeScript compiler itself, but this is a moot point. It's always the case that there may be an error upstream (e.g. there may be errors in VSCode's Go to Definition feature).\r\n\r\n> cmd-clicking on a definition would send you to the exported \"js\"(ts?) file instead of the core implementation file\r\n\r\nThanks to [`declarationMap`](https://www.typescriptlang.org/tsconfig#declarationMap), it would actually send you to the source TypeScript code.\r\n\r\n> the plug-n-play approach we benefit from at this moment\r\n\r\nYes, I want to maintain this UX/DX while turning V2 Interfaces into a monorepo.\r\n\r\n[^1]: https://chat.openai.com/share/d940b1a2-c8bb-48ed-ae69-40a2273a98b7","createdAt":"2023-06-07T10:32:40Z","labels":[],"number":335,"repository":"sablier-labs/interfaces","state":"closed","title":"IDE user experience with `dist` directories","type":"discussion","updatedAt":"2023-06-17T14:24:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/335"},{"author":"PaulRBerg","body":"The goal is to differentiate the `next/dynamic` lazy-loading logic from our `LockupDynamic` streaming logic.\r\n\r\nThe current `next/dynamic` imports are named like this:\r\n\r\n```typescript\r\nimport dynamic from \"next/dynamic\";\r\n```","createdAt":"2023-06-09T22:22:01Z","labels":[],"number":364,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to name all `next/dynamic` imports as `nextDynamic` or `nextPage` or `dynamicPage`","type":"discussion","updatedAt":"2023-06-17T12:47:52Z","url":"https://github.com/sablier-labs/interfaces/discussions/364"},{"author":"PaulRBerg","body":"Would it help if we used [eslint-plugin-cypress](https://github.com/cypress-io/eslint-plugin-cypress), @gavriliumircea?","createdAt":"2023-06-12T11:58:23Z","labels":[],"number":381,"repository":"sablier-labs/interfaces","state":"closed","title":"Why are we not using \"eslint-plugin-cypress?","type":"discussion","updatedAt":"2023-06-17T12:39:13Z","url":"https://github.com/sablier-labs/interfaces/discussions/381"},{"author":"PaulRBerg","body":"@maxdesalle has recently discovered an issue in the create stream form, namely, that the UI was allowing zero deposit amounts.\r\n\r\nIn V2 Core, we have applied my [testing tree approach](https://twitter.com/PaulRBerg/status/1624763320539525121), which has the nice benefit of doubling as a non-Solidity checklist for what inputs are not allowed (in this case, in the create functions).\r\n\r\n- [`createWithRange`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-linear/create-with-range/createWithRange.tree)\r\n- [`createWithDurations`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-linear/create-with-durations/createWithDurations.tree)\r\n- [`createWithDeltas`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-dynamic/create-with-deltas/createWithDeltas.tree)\r\n- [`createWithMilestones`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-dynamic/create-with-milestones/createWithMilestones.tree)\r\n\r\nCc @razgraf, @gavriliumircea, you might find these helpful for sanity-checking the create stream forms (as well as the other testing trees for the other stream actions, e.g. [withdraw](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup/withdraw/withdraw.t.sol)).","createdAt":"2023-06-09T13:29:33Z","labels":[],"number":357,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: Transaction checklists","type":"discussion","updatedAt":"2023-06-26T12:40:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/357"},{"author":"PaulRBerg","body":"See:\r\n\r\n- https://github.com/JamieMason/syncpack\r\n- https://www.reddit.com/r/typescript/comments/141hq48/utility_for_making_sure_that_im_using_the_right","createdAt":"2023-06-06T13:37:29Z","labels":[],"number":328,"repository":"sablier-labs/interfaces","state":"closed","title":"Ensure compatibility between package versions with `syncpack`","type":"discussion","updatedAt":"2023-06-17T12:31:03Z","url":"https://github.com/sablier-labs/interfaces/discussions/328"},{"author":"PaulRBerg","body":"See https://github.com/jeffijoe/typesync.\r\n\r\nThis seems to be a good candidate for a new CI check.\r\n\r\nLocally, it can be run like this:\r\n\r\n```sh\r\n$ yarn dlx typesync\r\n```","createdAt":"2023-06-05T15:22:12Z","labels":[],"number":317,"repository":"sablier-labs/interfaces","state":"closed","title":"Use `typesync` to detect missing types and declarations","type":"discussion","updatedAt":"2023-06-17T12:27:00Z","url":"https://github.com/sablier-labs/interfaces/discussions/317"},{"author":"PaulRBerg","body":"See https://github.com/depcheck/depcheck.\r\n\r\nJust like #317, this seems to be a good candidate for a new CI check which would be run once per week or so.\r\n\r\nLocally, it can be run like this:\r\n\r\n```sh\r\n$ yarn dlx depcheck\r\n```","createdAt":"2023-06-05T16:20:24Z","labels":[],"number":321,"repository":"sablier-labs/interfaces","state":"closed","title":"Use `depcheck` to detect missing types and declarations","type":"discussion","updatedAt":"2023-06-17T12:26:41Z","url":"https://github.com/sablier-labs/interfaces/discussions/321"},{"author":"PaulRBerg","body":"A [recent issue](https://github.com/sablier-labs/v2-interfaces/issues/294) about the Lodash mixins has made me realize an implicit design choice in the `types` package that I do not find helpful. Namely, both module declarations (for external libraries) and custom types (defined in our repo alone) are bundled under the same umbrella \"types\".\r\n\r\nThe issue is three-fold:\r\n\r\n1. Those two entities are rather different (in a qualitative way), since the custom types can be instantiated as objects, whereas the library extensions cannot.\r\n2. It is easy to miss the link between the modules defined in `packages/types` and the actual place where the extensions are defined. I mean, how is a developer (a non-author) supposed to figure this out? Search for the function names and try to infer which module goes with which definition? Module declarations should live as closely as possible to the place where the logic is defined.\r\n3. This design makes it difficult (or even impossible) to switch to a per-package compilation pipeline (ref https://github.com/sablier-labs/v2-interfaces/issues/290).\r\n","createdAt":"2023-06-03T14:23:54Z","labels":[],"number":296,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to move the module declarations next to where they are defined","type":"discussion","updatedAt":"2023-06-17T12:14:56Z","url":"https://github.com/sablier-labs/interfaces/discussions/296"},{"author":"PaulRBerg","body":"In https://github.com/sablier-labs/v2-interfaces/pull/342, I suggested the introduction of a new package `@sablier/extension`, which would store extensions of external libraries like Lodash to provide type safety and encapsulation. However, I also said that introducing this package might be overkill given that there's only Lodash to be mindful of.\r\n\r\nBut then @razgraf's [made](https://github.com/sablier-labs/v2-interfaces/pull/342#discussion_r1224377806) this good point:\r\n\r\n> Note for when packages will be used as independent libraries\r\n>\r\n> In absence of this initializer (no end app), the developer should keep in mind that any configurations for BigNumber will have to be mentioned separately.\r\n\r\nThis makes an even stronger case for the `@sablier/extensions` package, as we could put `BigNumber` in there, and we could also include `dayjs` given that we have to extend [certain plugins](https://github.com/sablier-labs/v2-interfaces/blob/main/packages/utils/src/libraries/lodash.ts). The API would turn into this:\r\n\r\n```typescript\r\nimport { BigNumber } from \"@sablier/extensions\";\r\n```\r\n\r\nAs discussed in #326, I grant that importing from `bignumber.js` is clearer — no question about that. But I think we should prioritize type safety, since having to remember things in a large code base like V2 Interfaces is error-prone. This is why I opened PR #342 in the first place - to encapsulate the Lodash mixins (and their types) so that the developer doesn't have to think about them.\r\n\r\nAlternatively, we could just put the `BigNumber` extension in `@sablier/utils`. I don't mind either way as long as we encapsulate the initialization step.\r\n\r\n_Side note_: this proposal is actually independent of #290, i.e., it would improve the baseline developer experience with or without a monorepo. We might be able to remove the [`initialize`](https://github.com/sablier-labs/v2-interfaces/blob/4928294682d278d16a6b9cfc1c80a9abf86b0ade/apps/client/cypress/support/e2e.ts#L19) call in the Cypress tests, for instance.","createdAt":"2023-06-09T14:46:57Z","labels":[],"number":358,"repository":"sablier-labs/interfaces","state":"closed","title":"Create a bespoke package for external library extensions","type":"discussion","updatedAt":"2023-06-17T12:08:30Z","url":"https://github.com/sablier-labs/interfaces/discussions/358"},{"author":"PaulRBerg","body":"Many directories under `packages/constants` are of the form `NAME/index.ts`.\r\n\r\nUnless I'm missing something, these files would be more readable and easier to search (e.g. in VSCode's `CMD+P`) if we renamed them to `name.ts`.\r\n\r\nE.g. this:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/constants/src/blacklist/index.ts\r\n\r\nWould become this:\r\n\r\n```text\r\nblacklist.ts\r\n```\r\n","createdAt":"2023-06-03T20:58:30Z","labels":[],"number":300,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to simplify nesting structure in `packages/constants`","type":"discussion","updatedAt":"2023-06-17T12:54:10Z","url":"https://github.com/sablier-labs/interfaces/discussions/300"},{"author":"PaulRBerg","body":"The name of the `product` app is misleading:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/tree/95b4f8515b12de89283e8abfa380721285ae02b2/apps/product\r\n\r\nWhat `product` currently stands for is the landing page of the Sablier V2 front-end product; however, the actual software product is the `client` app:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/tree/95b4f8515b12de89283e8abfa380721285ae02b2/apps/client\r\n\r\nThis name may have been chosen to prevent another (indirect) collision with the `labs` app, as per the description written here:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/95b4f8515b12de89283e8abfa380721285ae02b2/apps/labs/package.json#L3\r\n\r\nHowever, a naming collision between the product's landing page and Sablier Labs' landing page is unavoidable - both are landing pages. To prevent an unnecessary clutter of terminology, and avoid muddying the name of the landing page that the vast majority of people who hear about Sablier will see, I suggest we do the following:\r\n\r\n- Refactor `product` to `landing`\r\n- Update the description in the `package.json` of the `labs` app to say \"Sablier Labs' presentation page\"","createdAt":"2023-05-14T11:37:59Z","labels":[],"number":257,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor `product` to `landing`","type":"discussion","updatedAt":"2023-06-26T12:50:41Z","url":"https://github.com/sablier-labs/interfaces/discussions/257"},{"author":"gavriliumircea","body":"As we found out in #193 cypress seems to be lacking certain loaders that we are using through the rest of the project. This means that for now it is imposibile to import different packages like @sablier/subgraphs for code reusability. Both me and @razgraf tried a series of fixes but none of them seems to be working. For now we decided to leave it as it but if the need for different packages increases in time we should further try to find a solution for this issue. \r\n\r\nA series of links that were used/tried can be found here:\r\n\r\n- https://docs.cypress.io/api/plugins/preprocessors-api\r\n- https://github.com/cypress-io/cypress/tree/master/npm/webpack-preprocessor#modifying-default-options\r\n- https://www.ie.com.au/insights/how-to-set-up-cypress-code-coverage-with-typescript-and-ts-loader\r\n- https://github.com/cypress-io/cypress/issues/22465\r\n- https://stackoverflow.com/questions/71793416/cypress-headless-no-loaders-are-configured-to-process-png-files\r\n- https://glebbahmutov.com/blog/use-typescript-with-cypress/","createdAt":"2023-03-14T19:52:19Z","labels":[],"number":211,"repository":"sablier-labs/interfaces","state":"closed","title":"Cypress lack of svg loaders","type":"discussion","updatedAt":"2023-06-17T12:53:56Z","url":"https://github.com/sablier-labs/interfaces/discussions/211"},{"author":"razgraf","body":"Although `useQuery` v4 is quite nice, it does have two shortcomings we had to overcome.\r\n\r\n### Lack of an `onNetworkFetch` callback\r\n\r\nTheir `onSucces` callback will fire every time data is being queries. Regardless of the query being a fetch against the **network** or against the **cache**, this callback will be triggered in an attempt to signal a successful retrieval. \r\n\r\nOur current system relies on a two-part architecture, between querying with Tanstack Query and storing results in a Zustand state manager. This makes is so we rely heavily on a signal from the query that data is ready to be processed and added to the store.\r\n\r\nWe bypassed this continuous call to action by comparing results that have been already stored and avoiding a state override if not necessary.\r\n\r\n\r\n### No `onSuccess` after hydration\r\n\r\nThe `onSuccess` callback doesn't fire when data has been passed (by the server) to the cache through hydration. This makes is so we don't have a clear signal for \"hey, there's data in the cache, do something with it\" if we want to use onSuccess.\r\n\r\nWe bypass this by using the `{data, error}` variables returned by the hook, instead of using the callbacks.","createdAt":"2023-02-25T00:28:41Z","labels":[],"number":186,"repository":"sablier-labs/interfaces","state":"closed","title":"Shortcomings of `useQuery`","type":"discussion","updatedAt":"2023-06-17T12:53:09Z","url":"https://github.com/sablier-labs/interfaces/discussions/186"},{"author":"razgraf","body":"Following the discussion [here](https://github.com/sablierhq/v2-interfaces/pull/21#issuecomment-1272570505).\r\n\r\nWe're currently using a naming convention for the extended setup of eslint and stylelint, specifically\r\n- `.eslintrc.base.yml` and\r\n- `.stylelint.base.js`\r\n\r\nReasons:\r\n1. The monorepo can include different languages or frameworks. Thus, we wanna make sure the linter configurations are extended on a per-package basis, not as a global setup\r\n2. By having root level pure `.eslintrc.yml` or `stylelintrc.yml` files, IDEs or lint parsers may consider those rules to be applied *on the entire repository* and attempt to apply them on files where this was not intended\r\n3. Path resolutions is a nightmare when working with global files\r\n4. Using the `base` particle makes it easy to notice that the root configuration is both shared and not final","createdAt":"2022-10-09T16:32:38Z","labels":[],"number":25,"repository":"sablier-labs/interfaces","state":"closed","title":"Walkthrough: Setup using the `base` particle for naming extended config files","type":"discussion","updatedAt":"2023-06-17T10:39:30Z","url":"https://github.com/sablier-labs/interfaces/discussions/25"},{"author":"PaulRBerg","body":"## Context\r\n\r\nI started reviewing V2 Interface last week, and one of the first things I took stock of was that all packages were being compiled all the time:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/issues/290\r\n\r\nI had a hunch that that was not a good approach, so I started researching the problem, collating my sources here:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/discussions/332\r\n\r\nNow, after a week-long inquiry, I'm pretty confident that V2 Interfaces is not a monorepo (by the conventional understanding of this term), though it should be one, and this is an important structural problem that we should address head-on.\r\n\r\n## Desiderata\r\n\r\n| Desideratum                                                                                                     | Achieved |\r\n| :-------------------------------------------------------------------------------------------------------------- | :------: |\r\n| Absolute paths `~/*` instead of relative paths                                                                  |    ✅    |\r\n| Hot reloading in `apps/*` works out-of-the-box                                                            |    ✅    |\r\n| IDE navigation (e.g., \"Go to definition\") works without building the packages                             |    ✅    |\r\n| Topological builds                                                                                              |    ✅    |\r\n| We want it to be a monorepo because there's a lot of code, and a single repo structure is difficult to maintain |    ❌    |\r\n| Distinctiveness between packages and apps (ref #330 and #345); for good order and hassle-free maintenance       |    ❌    |\r\n| Error-proneness minimization, especially with regard to type errors                                             |    ❌    |\r\n| Non-redundant configuration files (unlike all `package.json` and `tsconfig.json` under `packages` now)          |    ❌    |\r\n| Publishability for each package                                                                                 |    ❌    |\r\n| Sensitivity to dependency requirements                                                                          |    ❌    |\r\n| Separation of concerns, i.e., well-defined relationships between packages                                       |    ❌    |\r\n\r\n## Three Acts\r\n\r\nI am splitting the unachieved desiderata into three acts.\r\n\r\n### Monorepo Structure\r\n\r\nMost of the unachieved desiderata items fall under this act.\r\n\r\nMy attempt with discussion is not to keep V2 Interfaces to a high standard. I'm simply trying to bring V2 Interfaces to a _baseline_ of what monorepos typically mean in software engineering. It is not a matter of making the packages publishable (although, as you shall see below, we should do this); the current structure is intrinsically incorrect.\r\n\r\nPer all the reasons I have given [here](https://github.com/sablier-labs/v2-interfaces/issues/290#issuecomment-1575012548) and [here](https://github.com/sablier-labs/v2-interfaces/issues/290#issuecomment-1576555172), V2 Interfaces is currently just a repo with a complicated directory structure. Yarn Workspaces is a glorified path aliasing system (TypeScript's [`paths`](https://www.typescriptlang.org/tsconfig/paths.html) would have sufficed) and all `package.json` and `tsconfig.json`  files under `packages` can be discarded and, with a minimal refactor, the apps would continue to work.\r\n\r\nAdditionally, if you go look at the research materials shared in https://github.com/sablier-labs/v2-interfaces/discussions/332, you will see that no publicly shared monorepo template resembles V2 Interfaces, i.e., nobody compiles everything with the `**/*.ts` glob placed in the root TSConfig file.\r\n\r\nThe closes match is [this design](https://turbo.build/blog/you-might-not-need-typescript-project-references) by Turborepo, but even this is quite different from V2 Interfaces. They don't put the `**/*.ts` glob at the root, and they use a trick with the `types` field in `package.json`, which is not present in V2 Interfaces.\r\n\r\n### Type Errors\r\n\r\nA critical benefit of a well-separated package structure is sensitivity to type errors.\r\n\r\nMany type errors have reared their head only after switching to a monorepo, e.g., https://github.com/sablier-labs/v2-interfaces/issues/311. However, there have been many other errors for which I did not open GitHub issues, per the agreement with @gavriliumircea that issues should be exclusively about the `main` branch.\r\n\r\nThese errors flew under the radar because the packages were not compiled individually, and important compiler settings like `declaration` and `declarationMap` were not enabled.\r\n\r\n### Front-end SDK\r\n\r\nI initially considered this desideratum a comparatively minor point, but now I believe package publishability in V2 Interfaces is critical to growing Sablier V2.\r\n\r\nAs @maxdesalle's early integration efforts have shown us, our [broker fee model](https://github.com/sablier-labs/v2-core/discussions/145) is getting good validation.\r\n\r\nTo enable a seamless integration experience for third-party brokers, it would be wise to provide them with an open-source front-end SDK, which would be composed of the packages in V2 Interfaces (for obvious reasons, e.g., to avoid code duplication). Off the top of my head, this is what I think we should equip integrators with:\r\n\r\n- Contract types (re-exporting the output generated by `abitype`)\r\n- Subgraphs and GraphQL models\r\n- Streaming-related TypeScript types\r\n- Calculation functions, e.g., for fees (these would go in the `utils` packages)\r\n- Themes, as we want our logo to be present on as many websites as possible (\"Powered by Sablier\")\r\n- Proxy management functions (though the core logic should go in [PRBProxy](https://github.com/PaulRBerg/prb-proxy), there may be some Sablier-specific features)\r\n- Storybooks (ref https://github.com/sablier-labs/v2-interfaces/discussions/3)\r\n- Some simple xState machines (maybe?)\r\n\r\nWe should refine this idea in a separate discussion later on. The point, for now, is that the ability to publish some parts of the monorepo to the npm registry is important for Sablier as a business.\r\n \r\n## Conclusion\r\n\r\nThe challenge in turning V2 Interfaces into a TypeScript monorepo lies in implementing all currently-unachieved desiderata while not degrading the current developer experience (e.g., hot reloading).\r\n\r\nAnd it turns out it is possible to do that - see my PR in #383.","createdAt":"2023-06-12T14:28:09Z","labels":[],"number":382,"repository":"sablier-labs/interfaces","state":"open","title":"[*] Walkthrough: Monorepofication","type":"discussion","updatedAt":"2023-06-16T21:12:04Z","url":"https://github.com/sablier-labs/interfaces/discussions/382"},{"author":"PaulRBerg","body":"## Context\r\n\r\nBuilding TypeScript monorepo with Next.js apps is _hard_. There are a few dozen moving pieces, and all have to be exquisitely configured for the monorepo as a whole to work.\r\n\r\n## Articles\r\n\r\nSome of the best practices recommended in these articles contradict each other.\r\n\r\n- [How to set up a TypeScript monorepo and make Go to definition work](https://medium.com/@NiGhTTraX/how-to-set-up-a-typescript-monorepo-with-lerna-c6acda7d4559)\r\n- [Making TypeScript monorepos play nice with other tools](https://medium.com/@NiGhTTraX/making-typescript-monorepos-play-nice-with-other-tools-a8d197fdc680)\r\n- Turborepo's [TypeScript in a monorepo](https://turbo.build/repo/docs/handbook/linting/typescript)\r\n- Vercel's [Monorepo with Turborepo](https://vercel.com/templates/next.js/monorepo-turborepo)\r\n- [The Ultimate Guide to TypeScript Monorepos](https://dev.to/mxro/the-ultimate-guide-to-typescript-monorepos-5ap7) (note: this doesn't mention Next.js)\r\n- [How to setup TypeScript path aliases in Lerna monorepo?](https://webman.pro/blog/how-to-setup-typescript-path-aliases-in-lerna-monorepo/)\r\n- [You might not need TypeScript project references](https://turbo.build/blog/you-might-not-need-typescript-project-references)\r\n\r\n## Examples\r\n\r\n- https://github.com/goldstack/nextjs-bootstrap-boilerplate\r\n- https://github.com/vercel/examples/tree/main/solutions/monorepo\r\n- https://github.com/belgattitude/nextjs-monorepo-example\r\n- https://github.com/NiGhTTraX/ts-monorepo\r\n- https://github.com/goldstack/typescript-monorepo-boilerplate","createdAt":"2023-06-06T16:53:02Z","labels":[],"number":332,"repository":"sablier-labs/interfaces","state":"closed","title":"[Research] TypeScript x Next monorepo","type":"discussion","updatedAt":"2023-06-16T21:11:53Z","url":"https://github.com/sablier-labs/interfaces/discussions/332"},{"author":"PaulRBerg","body":"## Context\r\n\r\n[cSpell](https://cspell.org/) is an extension for VSCode that checks your English spelling.\r\n \r\n@razgraf said in this [comment](https://github.com/sablierhq/v2-interfaces/pull/80#issuecomment-1288955788) that:\r\n\r\n> it's quite annoying when used on top of the code itself\r\n\r\nAnd that:\r\n\r\n> some words in the world of programming are simply not .. real words\r\n\r\nEventually concluding that he will apply it only to comments.\r\n\r\n## Feedback\r\n\r\nIn my view, applying it only to comments isn't enough. Sure, it's still nice to have properly written comments so that we all understand the explanation in there clearly, but the biggest benefits in using cSpell are for the source code itself. For instance, it helps with checking that the calldata passed to a smart contract doesn't contain any typo and doesn't result in a reverted tx. This is particularly useful when constructing EIP-712 messages, which are notoriously difficult to debug.\r\n\r\nThe solution to keep using cSpell for code is to start using a dictionary and whitelist words. Here's my set-up:\r\n\r\n```json\r\n\"cSpell.dictionaries\": [\"personal\"],\r\n\"cSpell.dictionaryDefinitions\": [\r\n  {\r\n    \"name\": \"personal\",\r\n    \"path\": \"/Users/paulrberg/workspace/dictionary/dict.txt\"\r\n  }\r\n],\r\n```\r\n\r\nI maintain the local `dictionary` directory as a [git repository](https://github.com/paulrberg/vscode-dictionary/).","createdAt":"2022-10-24T16:28:18Z","labels":[],"number":84,"repository":"sablier-labs/interfaces","state":"closed","title":"cSpell setup","type":"discussion","updatedAt":"2024-01-12T12:13:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/84"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-interfaces/pull/361, we should consider merging the `declarations` package with the `types` package under a new `@types/sablier` package that would encompass them both.\r\n\r\nI've tried doing just that [here](https://github.com/sablier-labs/v2-interfaces/pull/361#issuecomment-1588835567), but I started getting type errors like this:\r\n\r\n> Cannot import type declaration files. Consider importing 'sablier' instead of '@types/sablier'\r\n\r\nThe problem is that TypeScript doesn't allow direct imports from `@types/sablier`, so the only way to merge the two packages would be to turn all types definitions in the current `types` package into module declarations, e.g.\r\n\r\n```typescript\r\ndeclare module \"sablier\" {\r\n    interface ISomething { ... }\r\n}\r\n```\r\n\r\nOptionally, we could also introduce a \"Sablier\" [namespace](https://www.typescriptlang.org/docs/handbook/namespaces.html):\r\n\r\n```typescript\r\nnamespace Sablier {\r\n  export interface ISomething { ... }\r\n}\r\n```\r\n\r\nI'm open to this approach since it would allow us to delete all direct imports (and thus move `@types/sablier` to `devDependencies`). It's a large refactor, though.","createdAt":"2023-06-13T08:53:23Z","labels":[],"number":386,"repository":"sablier-labs/interfaces","state":"open","title":"Merge the declarations and the types under `@types/sablier`","type":"discussion","updatedAt":"2023-06-16T20:54:11Z","url":"https://github.com/sablier-labs/interfaces/discussions/386"},{"author":"razgraf","body":"[Ethers](https://docs.ethers.io/v5/) has been chosen as the base web3 library in our repo.\r\n\r\nNext, we'll use [wagmi](https://wagmi.sh/) as a react-oriented wrapper over ethers. It provides us with some useful provider management, as well as cool hooks for resolving ENS, network switching and more. \r\n\r\nLast, to provide the user with a client-facing wallet manager (connecting to Metamask, Wallet Connect, Coinbase etc.) we'll end with [RainbowKit](rainbowkit.com/).\r\n\r\nOther systems have been evaluated before making this choices: web3.js, web3-react, useDapp, web3Modal\r\n\r\n---\r\n\r\n**Notes on configuration**\r\n\r\nThe entire `account` entity will be abstracted away from the library and into a standalone context stored in our very own Web3 provider. \r\n\r\n**Example:**\r\n    \r\n ```jsx\r\n<WagmiConfig client={client}>\r\n   <RainbowKitProvider chains={config.chains} theme={darkTheme()}>\r\n      <Web3Provider>{children}</Web3Provider>\r\n   </RainbowKitProvider>\r\n</WagmiConfig> \r\n```\r\n\r\n\r\n**Advantages:**\r\n\r\n1. Provides an extra step for fine-tuning account variables (isConnected, ens etc.)\r\n2. Creates a buffer zone to ensure the client has mounted, as long as the SSR incompatibility of wagmi will be present (see [https://github.com/wagmi-dev/wagmi/issues/542](https://github.com/wagmi-dev/wagmi/issues/542) | [https://github.com/wagmi-dev/wagmi/pull/689](https://github.com/wagmi-dev/wagmi/pull/689))\r\n3. If we ever decide to move away from this library, the account entity has to keep its interface intact. This way we’re not forever “married” to the current solution.\r\n4. If we ever decide to also support non-evm chains (e.g. Solana) we can use the same abstraction\r\n5. We can provide our own caching for singleton queries (e.g. ENS-by-address)\r\n\r\n---\r\n\r\n**Usage:**\r\n\r\nThe app will be wrapped by this new `client/src/contexts/Web3` provider which maps wagmi hooks and wagmi context state to our interface. New local methods such as `hooks/useAccount` or `hooks/useChain` will expose this implementation as well as all the aggregated data (same source of truth for chainId, account address, provider/signer etc.).","createdAt":"2022-10-02T19:21:11Z","labels":[],"number":9,"repository":"sablier-labs/interfaces","state":"closed","title":"Walkthrough: Web3 system","type":"discussion","updatedAt":"2023-06-16T20:51:11Z","url":"https://github.com/sablier-labs/interfaces/discussions/9"},{"author":"PaulRBerg","body":"There's a loose naming conflict between the [`components` package](https://github.com/sablier-labs/v2-interfaces/tree/b3cce4eeadd96ca724af3c0d4e5dd2e942c3e86c/packages/components) and the `components` directory in `apps/*`, e.g.:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/tree/b3cce4eeadd96ca724af3c0d4e5dd2e942c3e86c/apps/client/src/components\r\n\r\nRenaming the `components` package to `ui` (or smth else) would clarify that these paths are distinct, and it would make it less likely to accidentally import stuff from the `components` package instead of the `components` directory in the `apps/*` directories (this can happen if the component names are the same, now or in the future). The problem is accentuated by the fact that `~/components` is used as a path alias:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/b3cce4eeadd96ca724af3c0d4e5dd2e942c3e86c/tsconfig.base.json#L25\r\n\r\nSeveral TypeScript monorepo templates recommend the use of `ui` as a name for the shared library of React components:\r\n\r\n- https://github.com/vercel/turbo/tree/6c55f3ddc263cd30e6f776611147d487323271b0/examples/basic/packages/ui\r\n- https://github.com/belgattitude/nextjs-monorepo-example/tree/bdbe2d3bc932e78a19fe22f311174da6bd849c64/packages/ui-lib","createdAt":"2023-06-12T09:29:20Z","labels":[],"number":375,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to rename the `components` package to `ui`","type":"discussion","updatedAt":"2023-06-16T18:53:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/375"},{"author":"PaulRBerg","body":"The directories in `models` should be in lowercase, just like all other directories in the code base:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/tree/8d895f546840450acac78cb3377f9530ff9e2580/packages/models/src\r\n\r\nUnless I'm missing something?\r\n\r\nSimilarly, the names of the files nested in the directories could also be in lowercase, to uphold the implicit assumption that only React components starts with an uppercase letter.","createdAt":"2023-06-04T17:57:20Z","labels":[],"number":305,"repository":"sablier-labs/interfaces","state":"closed","title":"Inconsistent directory names in `models`","type":"discussion","updatedAt":"2023-06-16T18:49:33Z","url":"https://github.com/sablier-labs/interfaces/discussions/305"},{"author":"PaulRBerg","body":"Should we move this:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/83be84960cc58f7a06d62e162f30ed93acf25c48/packages/utils/src/types/index.ts#L1-L4\r\n\r\nHere:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/83be84960cc58f7a06d62e162f30ed93acf25c48/packages/types/src/utils.ts","createdAt":"2023-06-08T14:23:28Z","labels":[],"number":340,"repository":"sablier-labs/interfaces","state":"closed","title":"Should we move `ITrack` to `@sablier/types`?","type":"discussion","updatedAt":"2023-06-16T18:42:45Z","url":"https://github.com/sablier-labs/interfaces/discussions/340"},{"author":"PaulRBerg","body":"I have accidentally disabled `strict` mode in TSConfig, and started getting lots of type errors on `main`:\r\n\r\nhttps://app.warp.dev/block/U1YKtQHJQiWU2NpYYmqcbI\r\n\r\nShouldn't it be the other way around? I.e. disabling `strict` doesn't yield type errors, but enabling it in a project that doesn't use it, does yield new type errors?\r\n\r\nRef: https://github.com/sablier-labs/v2-interfaces/issues/372\r\n\r\nMy convo with ChatGPT4, who also got confused: https://chat.openai.com/share/fffb3879-eeb6-4ad4-a798-e8163978356e","createdAt":"2023-06-11T21:06:15Z","labels":[],"number":373,"repository":"sablier-labs/interfaces","state":"open","title":"Why does disabling `strict` mode yields type errors?","type":"discussion","updatedAt":"2023-06-17T12:51:58Z","url":"https://github.com/sablier-labs/interfaces/discussions/373"},{"author":"PaulRBerg","body":"The major benefit of renaming the `@sablier/types` package to `@types/v2-interface` (or `@types/sablier`) would be that TypeScript would be able to load all types from `node_modules` - since all packages that start with `@types/` are looked up by default (see [`typeRoots`](https://www.typescriptlang.org/tsconfig/typeRoots.html)).\r\n\r\nThe other benefit of doing this would be the ability to move `@sablier/types` from `dependencies` to `devDependencies`:\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/325","createdAt":"2023-06-08T22:10:02Z","labels":[],"number":348,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename `@sablier/types` to`@types/v2-interfaces` or `@types/sablier`","type":"discussion","updatedAt":"2023-06-13T08:56:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/348"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/v2-interfaces/blob/4f2b52bde2be74a22793a57896116cb9c1a36ad4/apps/client/pages/api/meta.tsx#L23-L57","createdAt":"2023-06-09T21:30:31Z","labels":[],"number":363,"repository":"sablier-labs/interfaces","state":"closed","title":"Are these Lodash-like utils re-implemented here because of SSR?","type":"discussion","updatedAt":"2023-06-13T07:50:59Z","url":"https://github.com/sablier-labs/interfaces/discussions/363"},{"author":"PaulRBerg","body":"Preface: I don't have a strong opinion, not at all, especially given that I spend little time looking at and writing CSS properties. But I do want to cast my support for alphabetical sorting, and keep this discussion open so that our future colleagues can chime in later.\r\n\r\nI have read the [Client Interfaces Setup](https://www.notion.so/sablier/Client-Interfaces-Setup-75fd8bab192e4669bb10a3ab082759d9) Notion doc and the [Happy Potter and the Order of CSS](https://dev.to/thekashey/happy-potter-and-the-order-of-css-5ec?signin=true) article you linked in there, and I must confess that I remain unimpressed by group sorting.\r\n\r\n1. The author himself said that ordering does not matter, which runs counter to many of the points that he made in the article, such as the fact that cognitive load is important (a point that I very much agree with).\r\n2. The article is a mess. Half of it seems to be a cut-and-paste job from other tweets and docs. There is hardly any cohesive structure to follow, and the arguments made contradict one another.\r\n3. To state my rationale for alphabetical sorting. It's basically the same as the [top reply](https://dev.to/petedermott/comment/9jkf) to the Happy Potter article:\r\n\r\n> It has to be alpha for me.\r\n>\r\n> There is zero a learning curve for any new developers who come into the team who may not be 100% au fait with CSS, you don't have to worry about 1 rule overwriting another, plus it's the easiest thing in the world to remember.\r\n>\r\n> With groups you'll have to remember what prop goes with what group, the order the groups go in, yea you could get a tool to do it but why complicate what is already probably a pretty complicated build process to spit out some HTML?\r\n\r\nAlpha is foolproof and it involves zero cognitive load. I think that this is a huge advantage, bigger than any benefit of group sorting (which I agree they exist). There's no special rules you need to remember.","createdAt":"2022-10-15T11:27:33Z","labels":[],"number":34,"repository":"sablier-labs/interfaces","state":"closed","title":"Casting my support to move to alphabetical sorting of CSS properties","type":"discussion","updatedAt":"2023-06-09T17:30:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/34"},{"author":"gavriliumircea","body":"Cypress related issues - #288 , #319 \r\nDependencies - #289, #297, #315, #333 \r\nMonorepo kind of issues - #290,  #311 , #313 , #314 , #325 ,#330, #331 \r\nSEO - #292 \r\nVSCodeSetting - #329 , #312 ","createdAt":"2023-06-07T12:44:48Z","labels":[],"number":337,"repository":"sablier-labs/interfaces","state":"closed","title":"Overview of the June refactoring sprint","type":"discussion","updatedAt":"2023-06-09T09:36:02Z","url":"https://github.com/sablier-labs/interfaces/discussions/337"},{"author":"PaulRBerg","body":"It would be useful to host some assets at permanent URL locations, e.g. hosting the icon at `sablier.com/icon.png` to reference it on the web.\r\n\r\nI'm not sufficiently familiar with Next.js and SSR to figure out how this could be done from the repository itself. Do you know how to do this, @razgraf @gavriliumircea?\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/292","createdAt":"2023-06-07T11:20:56Z","labels":[],"number":336,"repository":"sablier-labs/interfaces","state":"closed","title":"How to host images at `sablier.com/FOO.png`?","type":"discussion","updatedAt":"2023-06-08T14:13:29Z","url":"https://github.com/sablier-labs/interfaces/discussions/336"},{"author":"PaulRBerg","body":"I'm trying to understand the rationale for using this setting:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/tsconfig.base.json#L48\r\n\r\nBased on the [docs](https://www.typescriptlang.org/tsconfig#types), this prevents `@types` from being automatically resolved by the compiler _unless_ they are explicitly imported.\r\n\r\nI can see why that would be beneficial in a public scenario (e.g. a library like Ethers), where bundle size and cleanliness are important. But why should we go out of our way in our private monorepo to exclude certain types from being automatically loaded in the global scope? It seems like giving us homework for no benefit?\r\n\r\nThis setting `types` also overrides the default behavior of [`typeRoots`](https://www.typescriptlang.org/tsconfig#typeRoots), which may or may not be a good thing depending on the context (for instance, doing so is bad for the fix for #290 that I'm currently working on).\r\n\r\nFor more context, see my [conversation with ChatGPT](https://chat.openai.com/share/404d57d9-e62f-42e7-adaf-83788800c9e2).","createdAt":"2023-06-05T09:09:46Z","labels":[],"number":310,"repository":"sablier-labs/interfaces","state":"closed","title":"What is the rationale for defining explicit `types` in the base TSConfig?","type":"discussion","updatedAt":"2023-06-15T18:23:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/310"},{"author":"PaulRBerg","body":"Peer dependencies are used for [(softly) enforcing version parity](https://stackoverflow.com/a/34645112/3873510) on dependencies shared by both a library and a library consumer.\r\n\r\nI don't see what purpose they serve in V2 Interfaces, which\r\n\r\n1. Is private. No external party is meant to consume it.\r\n2. Uses fixed versions (`workspace:*`) for all of its internal packages. No package has more than one version (and it makes sense for things to remain like this).\r\n3. It compiles everything in the global scope (as of now, see https://github.com/sablier-labs/v2-interfaces/issues/290).\r\n\r\nIt seems to me that all of the following should actually be `dependencies`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/constants/package.json#L34-L45\r\n\r\nEven if there was a need for `peerDependencies`, they should not have the universal `*` semver range.","createdAt":"2023-06-04T10:45:11Z","labels":[],"number":301,"repository":"sablier-labs/interfaces","state":"closed","title":"What are `peerDependencies` with a semver of `*` good for in a private monorepo?","type":"discussion","updatedAt":"2023-06-15T18:23:21Z","url":"https://github.com/sablier-labs/interfaces/discussions/301"},{"author":"PaulRBerg","body":"I made this diagram that highlights the allowed transitions between stream statuses, and I thought to share it here because I think will be helpful for front-end development:\r\n\r\n![image](https://github.com/sablier-labs/v2-interfaces/assets/8782666/8230943a-3572-4f28-a078-8ed3c2ab798d)\r\n\r\n\r\n","createdAt":"2023-05-31T15:34:21Z","labels":[],"number":280,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: Stream status","type":"discussion","updatedAt":"2023-06-01T14:34:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/280"},{"author":"PaulRBerg","body":"Correct me if I'm wrong, but my understanding is that the `labs/` prefix is currently being used to refer to branches that contain experimental, work-in-progress branches.\r\n\r\nIf that is so, I find the use of this term misleading because it overlaps with the name of our company and, at the time of posting this discussion, there is also an app called `labs` in the repository's file system:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/tree/95b4f8515b12de89283e8abfa380721285ae02b2/apps/labs\r\n\r\nTo make an economy of terms, I suggest we replace this prefix with one of the following options:\r\n\r\n- `experiment/`\r\n- `skunkworks/` (see [this](https://www.techtarget.com/searchcio/definition/skunkworks))\r\n- `skunk/`\r\n- `wip`\r\n\r\nBut I don't have any strong preference - I'd be happy to go with any other term as long there is no name collision anymore.","createdAt":"2023-05-12T13:52:19Z","labels":[],"number":255,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to use a different prefix for experimentation branches","type":"discussion","updatedAt":"2023-05-12T15:35:59Z","url":"https://github.com/sablier-labs/interfaces/discussions/255"},{"author":"gavriliumircea","body":"Following my discussion with @razgraf regarding how we should integrate the cypress end to end test into v2 interfaces we decided to try the following things:\r\n\r\n1. due to the time necessary for a single complete test run (approx. 1 h) we want to have the test executed **on demand** and/or **on push** to the main only (similar to the deploy step). _We do not want to have this workflow as a blocker  nor do we want it to be executed similar to the linter, on every PR-commit._\r\n2. we will investigate the possibility to run tests in parallel through cypress and github actions (this functionality might come with extra cost and may require using an external service such as Cypress Cloud)\r\n3. we will investigate the use of vercel preview deployments for branch-specific testing environments (such that we can run the test suite against any branch, in preparation for a big merge)\r\n\r\nThe discussion also touched upon our branching strategy for **after** the v2 initial release. At that time, new features will not be tested against the main branch. The proposed structure is:\r\n\r\n1. main branch - used for production deployments. It should always reflect the current production state. This branch will be updated only with hot fixes and major/minor releases\r\n2. staging branch - used for development and manual testing in between releases. Here we will deploy the big features developed for the next release. At release time we will merge staging branch into main branch","createdAt":"2023-03-15T14:27:51Z","labels":[],"number":212,"repository":"sablier-labs/interfaces","state":"open","title":"Walkthrough: branching strategies + cypress ci strategies","type":"discussion","updatedAt":"2023-06-17T11:29:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/212"},{"author":"PaulRBerg","body":"Do we want to start using a component testing library?\r\n\r\nIf yes, I think we should start looking for options soon, since after the app is entirely built, no one will really be in the mood to go back to testing.\r\n\r\nHere's a [thread](https://twitter.com/DennisonBertram/status/1489252408425287687) on Twitter that discuses the topic.","createdAt":"2022-10-20T15:21:52Z","labels":[],"number":68,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to implement a frontend testing library (e.g. Cypress)","type":"discussion","updatedAt":"2024-01-12T12:16:34Z","url":"https://github.com/sablier-labs/interfaces/discussions/68"},{"author":"razgraf","body":"React 18 [introduces](https://beta.reactjs.org/apis/react/useId) a cool hook called `useId`. This hook's entire purpose is to make sure it delivers a unique identifier to be used within the DOM. This works perfectly for our inputs, especially due to accessibility concerns in group stream forms, where the same type of field will be used over and over again. We should make use of it in our code-base in the near future.\r\n\r\n\r\n```jsx\r\nimport { useId } from 'react';\r\n\r\nfunction Field() {\r\n  const fieldId = useId();\r\n  ...\r\n}\r\n ```","createdAt":"2022-11-29T00:08:17Z","labels":[],"number":118,"repository":"sablier-labs/interfaces","state":"closed","title":"Enforce unique identifiers with React 18's `useId` hook","type":"discussion","updatedAt":"2023-05-26T13:38:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/118"},{"author":"razgraf","body":"We're starting to feel the need for a state management library. The point of this utility is split between: \r\n\r\n1. Being able to **store global data** where models don't quite fit the simplicity of the Context API\r\n2. Being able to **persist** said data client-side\r\n\r\nThe second aspect goes hand in hand with sharing persisted data between the client and the server to improve loading times and overall UX.\r\n\r\n## Choices\r\n\r\nThere is an [unreal](https://github.com/olegrjumin/awesome-react-state-management) number of choices for state management in react. I researched only the most promising ones.\r\n\r\n### 1. Redux\r\nThe obvious old-school choice is React-Redux. While it benefits from a ton of tooling and libraries (such as React Saga, React Persist, the Thunk architecture) it's also very heavy to set up and use. Doesn't make a lot of sense for a small to medium sized application.\r\n\r\n### 2. [Jotai](https://jotai.org/) / [Recoil](https://recoiljs.org/docs/basic-tutorial/atoms)\r\nJotai is built upon the same architecture as Recoil. As these are pretty similar (people argue Jotai is more lightweight) I'm not going to cover Recoil.\r\n\r\n### 3. [Zustand](https://github.com/pmndrs/zustand)\r\nThis seems to be the most popular approach by npm trends.\r\n\r\nGood [comparison](https://docs.pmnd.rs/zustand/getting-started/comparison) article from Zustand.\r\n\r\n🧠 [Uniswap](https://github.dev/Uniswap/interface) is a good example of a project using both Zustand and Jotai.\r\n\r\n### 4. [Valtio](https://github.com/pmndrs/valtio)\r\nResearch pending.\r\n\r\n### 5. [React Query](https://tanstack.com/query/v4/docs/overview) (state manager for server state)\r\n\r\nFor server requests one should use React Query. Used alongside Fetch API, it provides tools such as caching and query optimizations right from the start. More on this specifically in #31.\r\n\r\n\r\nResources: [video](https://www.youtube.com/watch?v=5-1LM2NySR0) - this was extremely helpful 🧠, [article](https://tkdodo.eu/blog/practical-react-query)\r\n\r\n---\r\n\r\nNeedless to say, using Context API and implementing our own data stores using localStorage and cookies is redundant at this point as we'd just reinvent the wheel. This however does not mean we'll get rid of Context API, but make sure to use it where it can shine.\r\n","createdAt":"2022-10-13T15:28:11Z","labels":[],"number":29,"repository":"sablier-labs/interfaces","state":"open","title":"[*] Walkthrough: State management solutions (Zustand)","type":"discussion","updatedAt":"2023-06-17T10:56:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/29"},{"author":"razgraf","body":"### Context\r\n\r\nAn active user (\"ri\" from \"[Alchemist](https://alchemist.farm/)\") has brought in an interesting feature request for us. Some snippets from discord:\r\n\r\n> _Need an aggregated view to see all payments streamed to a particular contributor._\r\n\r\n> _Want a public dashboard for Alchemist vested payments that anyone in our community could access and study._\r\n\r\n> _Ability to claim all vested $MIST streams at once. Most of our contributors will end up with dozens of vested $MIST streams over the course of the year. Need a cost effective way to claim all streams at once._\r\n\r\n> _Need better dashboard for viewing an aggregate of one’s streams._\r\n\r\n### Summary\r\n\r\nThis can be summarized as the need for a custom stream aggregator that can:\r\n1. Help one visualize a group of streams related (e.g. by sender address) or unrelated (batched manually)\r\n2. Offer batch actions on a group of related/unrelated streams (e.g. withdraw from 3/5 streams from last month at once).\r\n\r\n\r\n### Considerations\r\n\r\nWe already have a group feature (and a filter feature) engineered for streams that either have a common denominator (some sender address) or have been created in the same batch. I believe we should alter this feature and make it more similar to Zapper's \"Address Book\" where one can aggregate multiple addresses and have an overview over all of them. \r\n\r\nFor us, this would require a \"group by streamId\" feature, with URL resolution such that those groups can be easily shared between people or browsers (as well as some local storage caching for ease of use).","createdAt":"2022-12-06T12:46:29Z","labels":["type: feature","priority: 2"],"number":126,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-architect the group/batching feature for dashboard streams","type":"discussion","updatedAt":"2023-05-26T13:39:19Z","url":"https://github.com/sablier-labs/interfaces/discussions/126"},{"author":"razgraf","body":"The next big milestone for the app is integrating real data. This will require the following elements to be fully defined:\r\n1. Networking flow\r\n2. Data storage\r\n3. Data updaters\r\n\r\n## 1. Networking flow and 2. Data storage\r\n\r\nFetching data will be achieved using `react-query` and more specifically `react-apollo`. We rely on the subgraph to provide us with the necessary intel. We identify the following high-level queries:\r\n\r\n### Public queries\r\nQueries that aren't linked to a connected user. These may as well be triggered during the disconnected state of the app using our own infrastructure (public provider, etc.) over all the data available.\r\n\r\n#### a. streams[] \r\nFetch streams through a public provider. These will be **filtered** \r\n - by chain (user can pick which chain to search on)\r\n - by IDs\r\n - by sender / recipient\r\n\r\n#### b. searches[]\r\nThis will help store the lists of streams (_or other type of results ?_) coming from a specific search.\r\n\r\n> ‼️ The filtering step will be preceded by a search step. We also need a way to store these potential search results.\r\n\r\n\r\n```ts\r\ninterface Search{\r\n  filter: {\r\n   chain: string;\r\n   ids: string[];\r\n   sender: string;\r\n   recipient: string;\r\n }\r\n streams: []\r\n groups: [] // We might drop this feature ?\r\n}\r\n```\r\n> 📔  This preempts a stored **current filter / search**.\r\n\r\n#### c. stream → streams[].push()\r\nFetch stream through a public provider. This will be identified through the route (URL configuration):\r\n- by chain, contract and tokenId\r\n\r\n#### d. history\r\nEach stream will also have a history - a list of actions taken in the context of that stream (create, transfers, withdrawals etc.). This will be a \"lazy query\" enabled only upon access of the stream profile's history modal.\r\n\r\n### Private queries (self)\r\nQueries that are linked to the connected user. Some of these replicate the public queries.\r\n\r\n#### a. streams[]\r\nFetch streams created by the user on the chosen chain. Mirrors the **public** behavior.\r\n\r\n#### b. searches[]\r\nFetch filtered/searched streams. Mirrors the **public** behavior.\r\n\r\n#### c. stream → streams[].push()\r\nFetch a specific stream. Mirrors the **public** behavior. Does enable some extra permissions if the current user is either a sender or a recipient.\r\n\r\n#### d. history\r\nLazy fetch a stream's history. Mirrors the **public** behavior.\r\n\r\n\r\nAs we can see, the public behavior is pretty much the same as the private one. Therefore, we should engineer this one first.\r\n\r\n### Specific queries\r\nAlthough mixed in the description above, we can separate the following queries from the way their results get stored:\r\n - get filtered streams (by id, by sender, by recipient, by chain)\r\n - get stream by id (and chain)\r\n - get stream history\r\n\r\n----\r\n\r\n## 3. Data updates\r\n\r\nDue to the nature of the application we need to figure out how to update pieces of the data that are time-bound. Every **second** we should find a way to update the stream info (amounts, progress etc.), including status (ongoing, done). There are multiple ways to achieve this:\r\n\r\n1. Using apollo (similar to V1, create derived bundles that update every second)\r\n2. Using model getters (retrieve data that has been updated - will not mirror updates until the getter is called again)\r\n3. Using store updates and a global watcher (a watcher will start polling and update the store every second with new data).\r\n\r\nIf there is a polling mechanism, make sure to allow for snapshots of the data (when the user is supposed to make a decision, the data should remain stuck).\r\n","createdAt":"2023-01-03T13:47:25Z","labels":[],"number":147,"repository":"sablier-labs/interfaces","state":"closed","title":"Networking, data updaters and models","type":"discussion","updatedAt":"2023-05-26T13:39:36Z","url":"https://github.com/sablier-labs/interfaces/discussions/147"},{"author":"gavriliumircea","body":"This discussion has the purpose of deciding if/how we should implement the \"Choose duration\" modal.\r\n![image](https://user-images.githubusercontent.com/48255669/203605897-574b6fbf-1b36-4185-995f-bc29c3f7568a.png)\r\nI looked around what the best UX for selecting a duration would be:\r\n\r\n- Use Date Picker and Time Pickers\r\n- Implement a duration picker as show in the design above\r\n\r\nThe second solution is almost exclusively used for time trackers and mobile apps.  I can't really say that I found enough arguments to make an easy decision. The most important things are the use case and the complexity that the user will face. From the use case point of view I can see a strong correlation between our modal and a time tracker. Also from a specific user perspective I think it is easier to know how much a specific action should last than what is the precise date and date when that action should end. I tend to think the second one is the best in our case but I am eager to hear as many opinions as possible in order to make a decision.\r\nAlso if we do decide to use the duration picker I would advise to give the user as much liberty as possible by creating some functions to correctly convert any values(For example 18 months 25 hours => 1 year 6 months 1 day 1 hour)","createdAt":"2022-11-23T18:28:57Z","labels":[],"number":113,"repository":"sablier-labs/interfaces","state":"closed","title":"UX for duration picker","type":"discussion","updatedAt":"2023-05-26T13:39:48Z","url":"https://github.com/sablier-labs/interfaces/discussions/113"},{"author":"razgraf","body":"I've seen some [hot takes](https://www.youtube.com/watch?v=w0nWe3eqjAc) (see first argument) around the usage of pre-commit hooks, with emphasis on those hooks that format code.\r\n\r\nShould we completely remove the prettier pre-commit hook? I've recently found myself using `-n` a lot (to avoid the hook, as @paulrberg anticipated) because I bulk-commit and usually run a `g:all-fix` before -- which guarantees the correct format of the code. The commit message hook is still important so that one we should keep.\r\n\r\nAs we're now working closely with CI, any errors should be caught by it anyway. This does mean that one has to remember to always check the result of CI and not pursue merging before it finishes.","createdAt":"2022-11-27T11:30:38Z","labels":[],"number":115,"repository":"sablier-labs/interfaces","state":"closed","title":"Should we remove code formatting pre-commit hooks?","type":"discussion","updatedAt":"2023-05-26T13:40:08Z","url":"https://github.com/sablier-labs/interfaces/discussions/115"},{"author":"gavriliumircea","body":"The modal system requires caution in regards to the internal state of a particular implementation. In particular, it demands attention when the re-initialization of the state is required.\r\n\r\nExample: the value for a controlled input (search bar) has to be cleared when closing the modal, such that on the next open we don't use stale data\r\n\r\nUp until now, two possible solutions to this problem have surfaced:\r\n\r\n1. Create an `useEffect` flow with the `isOpen` flag as sole dependency - we'll manually refresh the state when the modal closes/opens\r\n2. Every Modal implementation should have at least one child that will store the state - because children are conditionally rendered, state is always re-initialized when the child gets rendered\r\n\r\nAt the moment I am using the first proposed solution.\r\nWhat do you think the general approach should be?\r\n","createdAt":"2022-11-22T11:13:07Z","labels":[],"number":111,"repository":"sablier-labs/interfaces","state":"closed","title":"How to refresh the internal modal state","type":"discussion","updatedAt":"2023-05-26T13:40:16Z","url":"https://github.com/sablier-labs/interfaces/discussions/111"},{"author":"razgraf","body":"# General tips to optimize rendering ( ... and avoid unnecessary re-rendering)\r\n\r\nA state-heavy react application will always suffer from the re-rendering syndrome. I'm creating this discussion so we can share some of our general findings on the topic and alleviate the pain as best as we can.\r\n\r\n\r\n### Tools\r\n- In order to analyze how well these ideas work, one can use the \"React Dev Tools\" browser extension. The profiling feature will help identify which components update after a state change. The component highlight feature will, in real time actually show those updates taking effect (with highlights around components).\r\n\r\n## Table of contents\r\n\r\n1. [React Context](https://github.com/sablierhq/v2-interfaces/discussions/107#discussioncomment-4179369)\r\n2. [State management (Zustand)](https://github.com/sablierhq/v2-interfaces/discussions/107#discussioncomment-4179374)\r\n3. [Memoization](https://github.com/sablierhq/v2-interfaces/discussions/107#discussioncomment-4179378)\r\n4. [Consuming hooks](https://github.com/sablierhq/v2-interfaces/discussions/107#discussioncomment-4179382)\r\n\r\n\r\n","createdAt":"2022-11-18T17:50:38Z","labels":[],"number":107,"repository":"sablier-labs/interfaces","state":"open","title":"[*] Walkthrough: General tips to optimize rendering","type":"discussion","updatedAt":"2023-06-16T21:10:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/107"},{"author":"PaulRBerg","body":"See:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/a29023ee77a00c025f288b98a58fc655ca2d613c/apps/client/package.json#L62\r\n\r\nIt's not used anywhere. Also doesn't seem to be a peer dependency.","createdAt":"2022-11-02T10:35:53Z","labels":[],"number":93,"repository":"sablier-labs/interfaces","state":"closed","title":"Why is \"@xstate/cli\" listed as a dev dependency?","type":"discussion","updatedAt":"2023-05-26T13:38:24Z","url":"https://github.com/sablier-labs/interfaces/discussions/93"},{"author":"PaulRBerg","body":"## Context and Limitations of TypeScript\r\n\r\nAs part of the research during the implementation of PR https://github.com/sablierhq/v2-interfaces/pull/64, I had come to better understand how `baseUrl` and `paths` work in TypeScript:\r\n\r\n- They are very tightly coupled to one another, because the `paths` are always *relative* to the provided `baseUrl`, which is in turn related to where the `tsconfig.json` in which it is declared is located.\r\n- All rules (including array) in a TypeScript config are [overwritten](https://stackoverflow.com/a/71717979/3873510), and there is currently no way to go around this (see this [open issue](https://github.com/microsoft/TypeScript/issues/20110) in the official TypeScript repo where people discuss all sorts of potential solutions, such as letting the config be provided as a TS file)\r\n\r\nThe conclusion from the above is that while you can in principle define the `paths` both at the root and at the child package level, only the child package's `paths` will be taken into account because merging is not possible.\r\n\r\n## Problem Statement\r\n\r\nIn [Client Interface Setup](https://www.notion.so/sablier/Client-Interfaces-Setup-75fd8bab192e4669bb10a3ab082759d9), @razgraf captured the problem well with the following statement:\r\n\r\n> path aliases ... will not be resolved if used inside one of the shared packages (e.g. in `components` I cannot use a `~/atoms` alias).\r\n\r\nHe then offered this explanation (which is based on the assumption the `paths` are defined in each package, separately):\r\n\r\n> It’s most likely because the client app (the “leaf”) will attempt to resolve that alias starting from its own root, not the sub-project\r\n\r\nWhich is correct but does not capture all nuances. I wrote this section to add more color to the problem statement.\r\n\r\nIt is, in fact, possible to add the following path in any child tsconfig:\r\n\r\n```json\r\n\"paths\": [\r\n  \"~/*\": [\"./src/*\"]\r\n]\r\n```\r\n\r\nWithout causing the `yarn tsc` command to fail if you run it within the package's context. However, if you do this, then you will not be able to build the client app. And the explanation for that is ...\r\n\r\n**When you're building the client app, you're using only one TypeScript config to compile the code, and that is the client's `tsconfig.json`**. The TypeScript configs from all other packages will be ignored, and hence their `paths` will also be ignored.\r\n\r\n## Solutions\r\n\r\nI came up with two solutions, but it's really only the second solution that I recommend using. The first would be a footgun the size of the Statue of Liberty. I shared it only for informational purposes, to mention that it exists.\r\n\r\n### 1. Using \"~/*\" Globally\r\n\r\nStart from this [`tsconfig.base.json`][1] and re-define the tilde paths like this:\r\n\r\n```json\r\n\"paths\": {\r\n  \"~/*\": [\r\n    \"./apps/client/src/*\",\r\n    \"./packages/assets/src/*\",\r\n    \"./packages/components/src/*\",\r\n    \"./packages/constants/src/*\",\r\n    \"./packages/contexts/src/*\",\r\n    \"./packages/hooks/src/*\",\r\n    \"./packages/machines/src/*\",\r\n    \"./packages/models/src/*\",\r\n    \"./packages/themes/src/*\",\r\n    \"./packages/types/src/*\",\r\n    \"./packages/utils/src/*\",\r\n  ]\r\n}\r\n```\r\n\r\nDefining the paths like this (and NOT overwriting them in the child configs) would make it possible to e.g. use `~/atoms` in the `components` package. However, it would not scale well, and here's why.\r\n\r\n**It will force developers to not re-use the same directory names across packages.**\r\n\r\nThat is, you can't define `foo` under `apps/client/src` at the same with defining `foo` under `packages/components/src`, because the paths are globally declared and so TypeScript would find the former `foo` and stop the search there.\r\n\r\n### 2. Global Per-Package Tildes\r\n\r\nWe start from the same [`tsconfig.base.json`][1] and re-define the tilde paths like this:\r\n\r\n```json\r\n\"paths\": {\r\n  \"~/client/*\": [\"./apps/client/src/*\"],\r\n  \"~/assets/*\": [\"./packages/assets/src/*\"],\r\n  \"~/components/*\": [\"./packages/components/src/*\"],\r\n  \"~/constants/*\": [\"./packages/constants/src/*\"],\r\n  \"~/contexts/*\": [\"./packages/contexts/src/*\"],\r\n  \"~/hooks/*\": [\"./packages/hooks/src/*\"],\r\n  \"~/machines/*\": [\"./packages/machines/src/*\"],\r\n  \"~/models/*\": [\"./packages/models/src/*\"],\r\n  \"~/themes/*\": [\"./packages/themes/src/*\"],\r\n  \"~/types/*\": [\"./packages/types/src/*\"],\r\n  \"~/utils/*\": [\"./packages/utils/src/*\"]\r\n}\r\n```\r\n\r\nAnd then you would be able to make imports like this:\r\n\r\n```typescript\r\nimport \"~/components/atoms\";\r\n```\r\n\r\nNot as great as \"~/atoms\" but as per the explanation given in this discussion, that is simply not possible with the current TypeScript compiler.\r\n\r\nThe only cost of employing this solution would be the refactor needed in the client app, i.e. to turn all `~/` references into `~/client/` references. But that's a small price to pay to gain a bigger advantage, which is the ability to use `~` in all packages, albeit with an additional package prefix (`~/components/`, `~/contexts/`, etc.).\r\n\r\n@razgraf if you like this I can prepare a PR for it.\r\n\r\n[1]: https://github.com/sablierhq/v2-interfaces/blob/807868283b59f7fbb3e8476afe81a81e0fc7eac0/tsconfig.base.json","createdAt":"2022-10-20T13:03:10Z","labels":[],"number":66,"repository":"sablier-labs/interfaces","state":"closed","title":"Global per-package tilde path like \"~/client/\" instead of \"~/\" so we can use tildes everywhere","type":"discussion","updatedAt":"2023-05-26T13:38:15Z","url":"https://github.com/sablier-labs/interfaces/discussions/66"},{"author":"PaulRBerg","body":"We have a `.gitignore` file at the root and one in `apps/client`, and they overlap significantly. Do we need both?\r\n\r\n- https://github.com/sablierhq/v2-interfaces/blob/7e9252621d86e2c6887f66223604811def6c8b41/.gitignore\r\n- https://github.com/sablierhq/v2-interfaces/blob/7e9252621d86e2c6887f66223604811def6c8b41/apps/client/.gitignore\r\n\r\nMy guess is that the client `.gitignore` is a leftover from the time when you bootstrapped the app with `create-next-app`.","createdAt":"2022-10-19T08:45:44Z","labels":[],"number":61,"repository":"sablier-labs/interfaces","state":"closed","title":"Do we need the \".gitignore\" file in \"apps/client\"?","type":"discussion","updatedAt":"2023-05-26T13:38:05Z","url":"https://github.com/sablier-labs/interfaces/discussions/61"},{"author":"PaulRBerg","body":"I just stumbled upon this feature of Yarn here:\r\n\r\nhttps://github.com/belgattitude/nextjs-monorepo-example/blob/499c9e46e049283dd8997296cf64cbbbe0df54ec/constraints.pro\r\n\r\nAnd I think that they are awesome! You can enforce such rules as dependencies that are used in the repo to always have to be made explicit (i.e. defined in `package.json`).","createdAt":"2022-10-16T19:36:24Z","labels":["backlog"],"number":48,"repository":"sablier-labs/interfaces","state":"open","title":"Yarn constraints","type":"discussion","updatedAt":"2022-10-24T12:27:42Z","url":"https://github.com/sablier-labs/interfaces/discussions/48"},{"author":"PaulRBerg","body":"See:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/5de7401b230e863dbee963588c82b703790024ef/.eslintrc.base.yml#L30\r\n\r\nAnd the docs for [`no-empty-pattern`](https://eslint.org/docs/latest/rules/no-empty-pattern).","createdAt":"2022-10-22T18:40:47Z","labels":[],"number":79,"repository":"sablier-labs/interfaces","state":"closed","title":"Why is the \"no-empty-patter\" ESLint rule disabled?","type":"discussion","updatedAt":"2023-05-26T13:37:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/79"},{"author":"PaulRBerg","body":"We should double-check that the root `.eslintignore` file is actually picked up ESLint. My guess is that is is not - I don't think ESLint looks up the directory tree for ignore files the same way it does for extended configs.\r\n\r\nIf the file is indeed not currently picked up by ESLint, we should manually provide the path to the ignore file via the `--ignore-path` flag (in each package `lint-check` and `lint-fix` scripts).","createdAt":"2022-10-20T15:39:34Z","labels":[],"number":69,"repository":"sablier-labs/interfaces","state":"closed","title":"Is the root ignore file actually used by ESLint?","type":"discussion","updatedAt":"2023-05-26T13:36:56Z","url":"https://github.com/sablier-labs/interfaces/discussions/69"},{"author":"razgraf","body":"Implementing `useState` or `useReducer` inside a context providers ([React's Context API](https://reactjs.org/docs/context.html)) seems to be pretty inefficient. This is mostly due to state hooks updating the entire component tree that's wrapped by the context post-update, as opposed to just the parts actually consuming those values.\r\n\r\nI'm starting to see usage of the [publish-subscribe](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) pattern as an optimization for this. The TL;DR; is manually subscribing components to higher context data, such that any changes aren't automatically reflected in the entire component tree - they're triggering changes only in those places \"subscribed\" to receive updates.\r\n\r\nExample of the implementation: [video](https://www.youtube.com/watch?v=ZKlXqrcBx88)\r\n\r\nNotes:\r\n- This might be a good solution for an efficient form state manager (https://github.com/sablierhq/v2-interfaces/discussions/29#discussioncomment-3882405)","createdAt":"2022-10-20T12:40:06Z","labels":[],"number":65,"repository":"sablier-labs/interfaces","state":"closed","title":"Explore the pub-sub pattern for React Contexts","type":"discussion","updatedAt":"2023-05-26T13:36:48Z","url":"https://github.com/sablier-labs/interfaces/discussions/65"},{"author":"PaulRBerg","body":"As per this [asnwer][1] on StackOverlfow, it is possible to selectively import functions from lodash by using the [`lodash-es`][2] package:\r\n\r\n```ts\r\nimport { isNilOrEmptyString } from \"lodash-es\";\r\n```\r\n\r\nMy understanding is that this would cut down on bundle size, because `lodash` is a CommonJS module, which means it is not tree-shakeable. To quote from StackOverflow again:\r\n\r\n> CommonJS modules are not tree shakable so you should definitely use [lodash-es][2], which is the Lodash library exported as ES Modules, rather than [lodash](https://www.npmjs.com/package/lodash) (CommonJS).\r\n\r\n[1]: https://stackoverflow.com/a/50656694/3873510\r\n[2]: https://www.npmjs.com/package/lodash-es","createdAt":"2022-10-15T20:52:00Z","labels":["backlog"],"number":44,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to switch to \"lodash-es\" and import specific methods to cut down on bundle size","type":"discussion","updatedAt":"2023-05-26T13:36:39Z","url":"https://github.com/sablier-labs/interfaces/discussions/44"},{"author":"PaulRBerg","body":"Related: #45, #56, and #59.\r\n\r\nI spent some time today trying to understand what exactly is `next/web-core-vitals` and it looks like it's made up of only two ESLint rules!\r\n\r\nhttps://github.com/vercel/next.js/discussions/41524\r\n\r\nSpecifically:\r\n\r\n1. `@next/next/no-html-link-for-pages`\r\n2. `@next/next/no-sync-scripts`\r\n\r\nGiven that in all the packages where we are using this, we are disabling the first rule, wouldn't it be simpler if we:\r\n\r\n- Loaded just `next` instead of `next/core-web-vitals`\r\n- Deleted the line that disables the `@next/next/no-html-link-for-pages` rule from each package ESLint config (see PR #59)\r\n- Enable the `@next/next/no-sync-scripts` rule in the base ESLint config\r\n- Enable `@next/next/no-html-link-for-pages` in the client app ESLint config\r\n\r\nThis is a nit and a minor issue in the grand scheme of things. Still, it would conduce to a slightly reduced maintenance cost, due to not having to remember to disable the `@next/next/no-html-link-for-pages` rule in the future. So I thought it would be worth discussing.","createdAt":"2022-10-18T16:55:24Z","labels":[],"number":60,"repository":"sablier-labs/interfaces","state":"closed","title":"Do we really need \"next/web-core-vitals\"?","type":"discussion","updatedAt":"2023-05-26T13:36:09Z","url":"https://github.com/sablier-labs/interfaces/discussions/60"},{"author":"PaulRBerg","body":"I'm a big fan of providing the full, explicit flag names in `package.json` scripts. This is due to the fact it reduces the cognitive load on developers. There is no need to remember what a letter stands for.\r\n\r\nWould you agree to write `--parallel --topological --verbose` instead of `-ptv` in the root `package.json` scripts?\r\n\r\n<img width=\"920\" alt=\"Screen Shot 2022-10-15 at 3 36 45 PM\" src=\"https://user-images.githubusercontent.com/8782666/195986904-84966ce5-ecf0-41f2-8796-b7bbad72274c.png\">\r\n\r\nAnd also in the client app `package.json`, to switch from `-p` to `--port`:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/3e775e714db0eddb220e068e2560bf63f088a7c4/apps/client/package.json#L76\r\n","createdAt":"2022-10-15T12:41:43Z","labels":[],"number":37,"repository":"sablier-labs/interfaces","state":"closed","title":"Thoughts on providing the explicit flag names in the yarn scripts?","type":"discussion","updatedAt":"2023-05-26T13:36:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/37"},{"author":"PaulRBerg","body":"Reference:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/3e775e714db0eddb220e068e2560bf63f088a7c4/apps/client/package.json#L78","createdAt":"2022-10-16T11:09:26Z","labels":[],"number":45,"repository":"sablier-labs/interfaces","state":"closed","title":"Why do we run \"next lint\" instead of \"eslint .\" in client app?","type":"discussion","updatedAt":"2023-05-26T13:35:58Z","url":"https://github.com/sablier-labs/interfaces/discussions/45"},{"author":"PaulRBerg","body":"The `noEmit` setting is enabled in the `client` app and the `types` package, but it is disabled in all other packages.\r\n\r\nI presume that that this is intentional, but I just want to double-check that?","createdAt":"2022-10-16T19:56:30Z","labels":[],"number":51,"repository":"sablier-labs/interfaces","state":"closed","title":"Inconsistent use of the \"noEmit\" setting in TypesScript","type":"discussion","updatedAt":"2023-05-26T13:35:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/51"},{"author":"PaulRBerg","body":"I see that some packages have `next/core-web-vitals` enabled:\r\n\r\n- `components`\r\n- `contexts`\r\n- `hooks`\r\n- `themes`\r\n\r\nWhile in all other packages, it hasn't been included.\r\n\r\nAm I correct to assume that the rationale was that the `next/core-web-vitals` rule should be enabled when there are React components or CSS code in the package, and not enabled (by not including it) when there are no React components and no CSS code?","createdAt":"2022-10-18T14:44:33Z","labels":[],"number":56,"repository":"sablier-labs/interfaces","state":"closed","title":"What is the logic by which we have enabled the \"next/core-web-vitals\" ESLint config?","type":"discussion","updatedAt":"2023-05-26T13:35:42Z","url":"https://github.com/sablier-labs/interfaces/discussions/56"},{"author":"PaulRBerg","body":"The `tsconfig.json` file in the client app is the only place where `*.js* files are included:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/3e775e714db0eddb220e068e2560bf63f088a7c4/apps/client/tsconfig.json#L41\r\n\r\nWhy?","createdAt":"2022-10-16T20:43:02Z","labels":[],"number":53,"repository":"sablier-labs/interfaces","state":"closed","title":"Why does the client app include \"*.js\" files?","type":"discussion","updatedAt":"2023-05-26T13:35:28Z","url":"https://github.com/sablier-labs/interfaces/discussions/53"},{"author":"PaulRBerg","body":"There are lots of benefits in adhering to [trunk-based development](https://trunkbaseddevelopment.com/). I am well aware that we haven't explicitly agreed to use this development approach, so I opened this discussion to reach a \"formal\" agreement.\r\n\r\nIf you agree, we should delete all branches except one (I suggest we stick with `main`), and make short-lived PRs for adding features, and then delete them.\r\n\r\nAs we get closer to the end, we can think about our staging strategy, and how to joggle between a `main` and `staging` branch. But for now following TBD means working on one branch only.\r\n\r\nNote: I know that the `setup` branches are there for presentational purposes. I will review them shortly, and share my thoughts in https://github.com/sablierhq/v2-interfaces/discussions/1, but after I do that we should be good to delete them.\r\n\r\n<img width=\"300\" alt=\"Screen Shot 2022-10-14 at 11 37 48 AM\" src=\"https://user-images.githubusercontent.com/8782666/195803700-3cbcb780-b58d-484d-849c-7f912cabf9e7.png\">\r\n","createdAt":"2022-10-14T08:45:36Z","labels":[],"number":30,"repository":"sablier-labs/interfaces","state":"closed","title":"Should repo follow trunk-based development?","type":"discussion","updatedAt":"2024-09-09T13:51:31Z","url":"https://github.com/sablier-labs/interfaces/discussions/30"},{"author":"PaulRBerg","body":"The advantage of using [lint-staged](https://github.com/okonet/lint-staged) is that you're running the `pre-commit` hook only over the staged files in git, not over the entire repository files. Among other things, this would save time.\r\n\r\nIf you agree that this would be useful, you can just copy-and-paste my implementation from my Hardhat-template, since it should be compatible with the existing configuration of this repository:\r\n\r\n- https://github.com/paulrberg/hardhat-template/blob/7bccd13bd7a91a7e65724bbb62551a8130139c80/.lintstagedrc\r\n- https://github.com/paulrberg/hardhat-template/blob/7bccd13bd7a91a7e65724bbb62551a8130139c80/.husky/pre-commit","createdAt":"2022-10-09T15:25:31Z","labels":[],"number":24,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to use lint-staged in the husky pre-commit hook","type":"discussion","updatedAt":"2023-05-26T13:34:50Z","url":"https://github.com/sablier-labs/interfaces/discussions/24"},{"author":"PaulRBerg","body":"From the [Client Interface Setup](https://www.notion.so/sablier/Client-Interfaces-Setup-75fd8bab192e4669bb10a3ab082759d9):\r\n\r\n> Because our packages are not meant to be used standalone (always include in an app) we’ll make use of `peerDependencies` which make sure that the final project includes our deps.\r\n\r\nMy understanding is that you need to use peer dependencies only when you publish a package. But, to my knowledge, we are not expecting to publish the Sablier app as a public package any time soon. So, is the `peerDependencies` field useful for anything at all?\r\n\r\nHere's an excerpt from the [Yarn docs][1]:\r\n\r\n> Peer dependencies are a special type of dependency that would only ever come up if you were publishing your own package\r\n\r\n[1]: https://classic.yarnpkg.com/lang/en/docs/dependency-types/#:~:text=Peer%20dependencies%20are%20a%20special,the%20person%20installing%20your%20package.","createdAt":"2022-10-15T11:56:54Z","labels":[],"number":35,"repository":"sablier-labs/interfaces","state":"closed","title":"Are \"peerDepedencies\" necessary?","type":"discussion","updatedAt":"2023-05-26T13:34:14Z","url":"https://github.com/sablier-labs/interfaces/discussions/35"},{"author":"razgraf","body":"To start our frontend journey I've taken the liberty to create the base monorepo structure. I invite you all to comment on it or suggest tools and configurations that can improve it. Once we have a setup we can all agree on, I will start thinking about milestones and commence work on the core UI components.\r\n\r\n## How to review?\r\nYou can start by exploring the `setup/structure` branch. This one include a no-logic, pure-setup monorepo structure. Please have a look at this [👨‍💻Client Interfaces Setup](https://www.notion.so/sablier/Client-Interfaces-Setup-75fd8bab192e4669bb10a3ab082759d9) page where many of the opinionated choices or implementation caveats have been addressed.\r\n\r\n\r\n📦 This setup integrates all the necessary tools for a healthy development environment. To name a few:\r\n- linters and formatters: eslint, stylelint, prettier, commitizen and commitlint\r\n- automation: husky\r\n- workspace: yarn v3\r\n- frameowrks: typescript, nextjs\r\n\r\n🗂 It also includes a proposed folder structure, with more examples to be revealed once we start adding logic.\r\n🧠 It also includes some pro(s) and con(s) or why/why-not(s) for common topics such as color names, css rules ordering etc. \r\n\r\n\r\nNext, you can head over to `setup/starters` where the first Theme has been added to the project. It includes examples of how we'll access common styling such as colors, sizes or media queries. This is where the general part of the setup ends.\r\n\r\nFinally, you can have a look at the `setup/tooling` branch. Here I've already started adding some common components and methods ready to be used across the entire project. This is still in live development. I will keep adding things like `Modals`, `Buttons`, common `contexts` or even a web3 library implementation to this branch over the following days/weeks.\r\n\r\n## What next?\r\nThe final branch, `setup/tooling` is meant to offer examples of the components and logic I've implemented in the past and always end up using (in some form) in client apps. It's also a place to experiment with things such as a web3 library implementation.\r\n\r\nThat being said, I'd suggest starting the efforts for the actual `@sablier-v2/*` code from the `setup/starters` branch. This one is both the cleanest and the least cluttered one, such that we don't have to add stuff yet that we may need for later. These type of auxiliaries can be left in the `tooling` branch and brought back later into the main development flow.\r\n\r\nGood luck and please leave your feedback below!\r\n\r\n### Later edit\r\nIn the meantime, I've started actually working on the layouts inside the `develop` branch.","createdAt":"2022-08-22T21:53:53Z","labels":[],"number":1,"repository":"sablier-labs/interfaces","state":"closed","title":"Exploring the initial setup","type":"discussion","updatedAt":"2023-05-26T13:34:06Z","url":"https://github.com/sablier-labs/interfaces/discussions/1"},{"author":"razgraf","body":"We should consider replacing any pure network requests (e.g. the query for token lists) with [react-query](https://tanstack.com/query/v4). It looks like a [pretty practical tool ](https://tkdodo.eu/blog/practical-react-query) for state management for state originated from a server (not to be confused with client state).\r\n\r\nAlthough it introduces a new dependency to the app (the library itself) it has a ton of query utilities such as parallelism, cache and cache invalidation etc. which makes it suited for some of our use-cases.\r\n\r\n\r\n### Tips\r\n\r\n## SSR\r\nReact query is a client side utility. This means we first want to make sure the query client is declared only client side. Secondly, it provides a [Hydration](https://tanstack.com/query/v4/docs/guides/ssr#using-hydration) utility which helps you sync data requested by the server with the client state. This will work great for requests that are made from the server side, but can be allowed to refresh at the client level.\r\n\r\n","createdAt":"2022-10-14T17:21:11Z","labels":[],"number":31,"repository":"sablier-labs/interfaces","state":"closed","title":"Use react-query for network requests","type":"discussion","updatedAt":"2023-05-26T13:33:57Z","url":"https://github.com/sablier-labs/interfaces/discussions/31"},{"author":"PaulRBerg","body":"## Context\r\n\r\nAt the time of posting this discussion, our prettier configuration in this repo has the [`semi`](https://github.com/sablierhq/v2-interfaces/blob/381d6828cbac15cf67ffc2e111a8b6c1998ab88a/.prettierrc#L10) setting set to `false`.\r\n\r\n## Discussion\r\n\r\nI find the fact that you can skip on providing semicolons extremely confusing, given that the overwhelming majority of programming languages require you to specify where a statement should end. JavaScript is an oddball.\r\n\r\nAs discussed [here][1], [here][2], and [here][3], the advantages of using semicolons are:\r\n \r\n- Avoid discrepancies when an accidental whitespace causes a statement to be a non-statement, and vice-versa\r\n- Makes it less likely that a JavaScript minifier / compressor will malfunction\r\n- Greater consistency across the board with our other repos (less cognitive load when context switching)\r\n\r\n[1]: https://stackoverflow.com/questions/537632/should-i-use-semicolons-in-javascript?noredirect=1&lq=1\r\n[2]: https://stackoverflow.com/q/444080/3873510\r\n[3]: https://stackoverflow.com/q/4002234/3873510\r\n\r\n## How to Make the Switch\r\n\r\nIf you agree, refactoring the code base to use double quotes is as simple as setting the `semi` setting to `true` in the [Prettier configuration file](https://github.com/sablierhq/v2-interfaces/blob/381d6828cbac15cf67ffc2e111a8b6c1998ab88a/.prettierrc#L11), and then run the global Prettier script `g:prettier-fix`.","createdAt":"2022-10-05T10:49:33Z","labels":[],"number":17,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to switch to writing semicolons","type":"discussion","updatedAt":"2023-05-26T13:33:47Z","url":"https://github.com/sablier-labs/interfaces/discussions/17"},{"author":"PaulRBerg","body":"In one of the comments left in https://github.com/sablierhq/v2-interfaces/pull/14, @razgraf said this:\r\n\r\n> Another comment on repository guidelines: can we keep the name of the PR (not necessarily the branch itself) under the same format as the conventional commits.\r\n>\r\n> \"Make all config files use YAML\" would become \"chore: yaml format for config file\"\r\n\r\nI'm against this, due to a number of reasons:\r\n\r\n1. First and foremost, a PR need not implement only one type of change (unlike a commit, which often does). A PR can be a combination of a `feat`, a `refactor` and a `chore`.\r\n2. PR names are for informational purposes only. They are never expected to be used in any automation process (unlike git commits, which could be used for automating npm package releases).\r\n3. Non-technical people read repos and PRs, too. This will be relevant especially when we eventually make this repo public.\r\n4. There are GitHub labels that can be used for categorizing.\r\n\r\nHowever, I don't have a strong opinion. If and when applicable (e.g. the PR is small and has few commits all of the same type) it should be fine to use conventional commits in the PR name, if the author of the PR so wishes. As I said, it's for informational purposes only.\r\n\r\n**Update**: on second thoughts, I don't think this is so much a matter of debate (i.e. if this should be a \"repository guideline\", or not). The first argument given above makes it pretty clear that in several cases it is simply not appropriate to use conventional commit prefixes in PR names, because the PRs might encompass different types of changes.","createdAt":"2022-10-07T13:06:49Z","labels":[],"number":19,"repository":"sablier-labs/interfaces","state":"closed","title":"Should we use conventional commits in PR names?","type":"discussion","updatedAt":"2023-05-26T13:33:39Z","url":"https://github.com/sablier-labs/interfaces/discussions/19"},{"author":"PaulRBerg","body":"What is the rationale for using a [`printWidth`](https://github.com/sablierhq/v2-interfaces/blob/381d6828cbac15cf67ffc2e111a8b6c1998ab88a/.prettierrc#L9) of only 80?\r\n\r\nSeems to be a rather small length.\r\n\r\nAs per this [discussion](https://stackoverflow.com/questions/578059/studies-on-optimal-code-width) on StackOverflow, it should be fine to bump this value to 120 or more. Modern laptops have enough screen space to accommodate lengths greater than 80.","createdAt":"2022-10-05T10:42:48Z","labels":[],"number":16,"repository":"sablier-labs/interfaces","state":"closed","title":"What is the rationale for using a print width of 80?","type":"discussion","updatedAt":"2023-05-26T13:33:33Z","url":"https://github.com/sablier-labs/interfaces/discussions/16"},{"author":"PaulRBerg","body":"## Context\r\n\r\nAt the time of posting this discussion, our prettier configuration in this repo uses [single quotes](https://github.com/sablierhq/v2-interfaces/blob/381d6828cbac15cf67ffc2e111a8b6c1998ab88a/.prettierrc#L11).\r\n\r\nThis is in contrast to all of our Solidity repos (because Solidity accepts only double quotes for string values), and all V1 repos.\r\n\r\n## Benefits of Switching to Double Quotes\r\n\r\n- Would lead to consistent use *within* the v2-interfaces repo, since currently there's a mix of single and double-quoted strings (because JSON only accepts double quotes).\r\n- Would lead to consistent use *across* Sablier repositories, given that statically typed languages like Solidity and Rust accept only double quotes for strings.\r\n- A consistent use of double quotes would reduce the cognitive load due to context switching. No matter what repo or programming language a Sablier employee is working with, they don't have to think about whether to use single or double quotes.\r\n- With double quotes, you don't have to escape apostrophes (which are common in English)\r\n- In English, it is customary to use double quotes for quoting excerpts from books, articles, etc.\r\n- Broadly speaking, in computer science single quotes are used to refer to single characters and ASCII codes.\r\n\r\n### StackOverflow Discussion\r\n\r\nThe same topic is also discussed on [StackOverflow](https://stackoverflow.com/a/18041188/3873510), where most users are in favor of using double quotes.\r\n\r\n## How to Make the Switch\r\n\r\nIf you agree, refactoring the code base to use double quotes is as simple as setting the `singleQuote` setting to `false` in the [Prettier configuration file](https://github.com/sablierhq/v2-interfaces/blob/381d6828cbac15cf67ffc2e111a8b6c1998ab88a/.prettierrc#L11), and then run the global Prettier script `g:prettier-fix`.","createdAt":"2022-10-05T10:39:53Z","labels":[],"number":15,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to switch to double quotes","type":"discussion","updatedAt":"2023-05-26T13:33:27Z","url":"https://github.com/sablier-labs/interfaces/discussions/15"}],"issues":[{"author":"PaulRBerg","body":"Upstream: https://github.com/PaulRberg/github-labels\n\nMaybe put this logic into the devkit?\n\nhttps://github.com/sablier-labs/devkit","createdAt":"2025-07-09T12:24:53Z","labels":[],"number":1,"repository":"sablier-labs/github-labels","state":"open","title":"Figure out a way to reduce code between this repo and upstream","type":"issue","updatedAt":"2025-07-09T12:24:53Z","url":"https://github.com/sablier-labs/github-labels/issues/1"},{"author":"PaulRBerg","body":"- [x] Claude settings file\n- [x] Claude bot on GitHub, so that it can be assigned to issues.","createdAt":"2025-07-19T14:22:08Z","labels":["effort: medium","priority: 2","type: feature","work: complicated"],"number":18,"repository":"sablier-labs/sdk","state":"closed","title":"Set up Claude Code","type":"issue","updatedAt":"2025-08-11T15:50:04Z","url":"https://github.com/sablier-labs/sdk/issues/18"},{"author":"PaulRBerg","body":"Or maybe there is a way to do this with a type? TBD\n\nhttps://github.com/sablier-labs/sdk/pull/15#discussion_r2217326945","createdAt":"2025-07-19T14:01:52Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":17,"repository":"sablier-labs/sdk","state":"open","title":"Add test to check that the block explorer URL doesn't end with a `/`","type":"issue","updatedAt":"2025-07-19T14:01:52Z","url":"https://github.com/sablier-labs/sdk/issues/17"},{"author":"PaulRBerg","body":"","createdAt":"2025-07-19T14:00:20Z","labels":["effort: low","priority: 3","type: perf","work: clear"],"number":16,"repository":"sablier-labs/sdk","state":"closed","title":"Upgrade to Viem v2.32 and remove Chiliz and Morph custom definitions","type":"issue","updatedAt":"2025-08-11T16:20:01Z","url":"https://github.com/sablier-labs/sdk/issues/16"},{"author":"PaulRBerg","body":"Make it possible to import stuff like this:\n\n```\nimport { sepolia } from \"sablier/chains\";\n```\n\nInstead of:\n\n```\nimport { sepolia } from \"sablier/dist/chains\";\n```","createdAt":"2025-07-13T12:52:03Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":14,"repository":"sablier-labs/sdk","state":"open","title":"Get rid of \"dist\" from import paths","type":"issue","updatedAt":"2025-07-13T12:52:03Z","url":"https://github.com/sablier-labs/sdk/issues/14"},{"author":"PaulRBerg","body":"I've previously created this: https://github.com/sablier-labs/deployments-ui","createdAt":"2025-06-13T13:28:36Z","labels":["effort: medium","priority: 3","type: feature","work: complicated"],"number":13,"repository":"sablier-labs/sdk","state":"open","title":"Vibe code a UI to visualize the data in this repo","type":"issue","updatedAt":"2025-06-17T11:51:52Z","url":"https://github.com/sablier-labs/sdk/issues/13"},{"author":"PaulRBerg","body":"Similar to the one used for [Indexers](https://github.com/sablier-labs/indexers):\n\n![Image](https://github.com/user-attachments/assets/ed0a0e39-27bd-476b-b757-8e1f25c2c4c9)","createdAt":"2025-06-11T15:56:46Z","labels":["effort: low","priority: 3","type: style","work: clear"],"number":11,"repository":"sablier-labs/sdk","state":"closed","title":"Nice banner for OpenGraph preview","type":"issue","updatedAt":"2025-06-17T09:50:58Z","url":"https://github.com/sablier-labs/sdk/issues/11"},{"author":"PaulRBerg","body":"Use the Alchemy and Infura API to check that all chains they support are available as methods here:\n\nhttps://github.com/sablier-labs/deployments/blob/176846a43e916aca7c5d3f5bdc3cbbfc2ab95feb/src/chains/rpc.ts","createdAt":"2025-06-09T17:57:13Z","labels":["effort: medium","priority: 3","type: test","work: clear"],"number":1,"repository":"sablier-labs/sdk","state":"open","title":"Write a test to check that all chains supported by Infura and Alchemy are available in the `rpc` object","type":"issue","updatedAt":"2025-06-10T17:43:21Z","url":"https://github.com/sablier-labs/sdk/issues/1"},{"author":"PaulRBerg","body":"In my [TypeScript package PR](https://github.com/sablier-labs/deployments/pull/31), I ended up removing the README files in which we had documented the compiler settings used for each chain deployment.\n\nWe should bring them back.","createdAt":"2025-06-03T18:23:43Z","labels":["effort: medium","priority: 3","type: feature","work: complicated"],"number":2,"repository":"sablier-labs/sdk","state":"open","title":"Bring back compiler settings used for deploying contracts","type":"issue","updatedAt":"2025-06-10T17:57:16Z","url":"https://github.com/sablier-labs/sdk/issues/2"},{"author":"PaulRBerg","body":"From here:\n\nhttps://github.com/sablier-labs/deployments/tree/tsc-package/src/indexers\n\nTo here:\n\nhttps://github.com/sablier-labs/indexers","createdAt":"2025-06-03T14:49:33Z","labels":["priority: 2","type: feature","work: clear"],"number":3,"repository":"sablier-labs/sdk","state":"closed","title":"Move indexers information to the indexers repository","type":"issue","updatedAt":"2025-06-10T18:00:21Z","url":"https://github.com/sablier-labs/sdk/issues/3"},{"author":"PaulRBerg","body":"","createdAt":"2025-05-25T12:34:16Z","labels":["effort: medium","priority: 3","type: test","work: complicated"],"number":4,"repository":"sablier-labs/sdk","state":"open","title":"Test for ensuring each chain has at least one deployment for all protocols","type":"issue","updatedAt":"2025-06-10T17:57:25Z","url":"https://github.com/sablier-labs/sdk/issues/4"},{"author":"PaulRBerg","body":"","createdAt":"2025-05-25T12:33:34Z","labels":["priority: 3","type: test","work: complicated"],"number":5,"repository":"sablier-labs/sdk","state":"open","title":"Test for missing \"receipts\" and \"entries\" in deployment files","type":"issue","updatedAt":"2025-06-10T17:57:29Z","url":"https://github.com/sablier-labs/sdk/issues/5"},{"author":"PaulRBerg","body":"Some releases were made using artifacts from different npm packages\n\ne.g. in Lockup v1.1","createdAt":"2025-05-01T10:18:43Z","labels":["effort: high","priority: 2","type: feature","work: clear"],"number":6,"repository":"sablier-labs/sdk","state":"open","title":"Figure out a way to map releases to old npm package versions","type":"issue","updatedAt":"2025-06-10T17:57:34Z","url":"https://github.com/sablier-labs/sdk/issues/6"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-29T17:09:52Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":7,"repository":"sablier-labs/sdk","state":"open","title":"Add \"infura\" and \"alchemy\" getters in the \"Chain\" type","type":"issue","updatedAt":"2025-06-10T17:57:38Z","url":"https://github.com/sablier-labs/sdk/issues/7"},{"author":"PaulRBerg","body":"Either some helpers or new fields in types","createdAt":"2025-04-28T17:29:06Z","labels":["effort: medium","priority: 3","type: feature","work: clear"],"number":10,"repository":"sablier-labs/sdk","state":"closed","title":"Figure out a way to improve the UX for separating mainnet and testnet deployments","type":"issue","updatedAt":"2025-06-10T17:58:51Z","url":"https://github.com/sablier-labs/sdk/issues/10"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-27T19:10:13Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":8,"repository":"sablier-labs/sdk","state":"open","title":"Add Legacy addresses","type":"issue","updatedAt":"2025-06-10T17:57:42Z","url":"https://github.com/sablier-labs/sdk/issues/8"},{"author":"PaulRBerg","body":"It's a resource-heavy test so it should be only run in CI once per week","createdAt":"2025-04-27T11:52:57Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":9,"repository":"sablier-labs/sdk","state":"open","title":"Write tests for checking that all contracts have code > 0","type":"issue","updatedAt":"2025-06-10T17:57:47Z","url":"https://github.com/sablier-labs/sdk/issues/9"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/interfaces/discussions/1532\n\nTagging @sablier-labs/frontend and @sablier-labs/evm","createdAt":"2025-03-18T14:36:35Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":1,"repository":"sablier-labs/scripts","state":"open","title":"Script for splitting CSV into two smaller CSVs","type":"issue","updatedAt":"2025-03-18T14:36:35Z","url":"https://github.com/sablier-labs/scripts/issues/1"},{"author":"PaulRBerg","body":"The Metamorphic Discussion I intend to post in the Interfaces repo will pave the way toward quickly building things of this sort\n\ncc @sablier-labs/frontend (FYI)\n\nContext: https://sablier.slack.com/archives/CSSNL10Q3/p1750355804821209?thread_ts=1750332367.651049&cid=CSSNL10Q3\n\n","createdAt":"2025-06-19T17:59:03Z","labels":["effort: epic","type: feature","priority: 1","work: complicated"],"number":17,"repository":"sablier-labs/sandbox","state":"open","title":"Custom airdrop claim page","type":"issue","updatedAt":"2025-07-11T20:16:39Z","url":"https://github.com/sablier-labs/sandbox/issues/17"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/indexers/pull/92","createdAt":"2025-06-13T15:26:27Z","labels":["priority: 1","type: refactor","effort: medium","work: clear"],"number":16,"repository":"sablier-labs/sandbox","state":"open","title":"Update indexers setup in light of the major refactor","type":"issue","updatedAt":"2025-06-13T15:26:27Z","url":"https://github.com/sablier-labs/sandbox/issues/16"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/interfaces/issues/1556","createdAt":"2025-05-29T06:29:58Z","labels":["effort: low","priority: 1","type: style","work: clear"],"number":15,"repository":"sablier-labs/sandbox","state":"open","title":"Replace Prettier and ESlint setup with Biome","type":"issue","updatedAt":"2025-05-29T06:29:58Z","url":"https://github.com/sablier-labs/sandbox/issues/15"},{"author":"razgraf","body":"We should code a small example on how to generate a merkle proof for airstream claims yourself. It should include:\n- a hardcoded campaign id\n- an in-page query that gets the campaign details from a subgraph (name, etc. and list of claims)\n- a script that downloads that campaign's file from IPFS (this should encourage people to pre-download the file instead of requesting it over and over again from IPFS)\n- a form to input a recipient's address and generate a proof (no backend, using JS - maybe OZ's library)\n\nThe purpose of this sandbox demo is to aid users in creating their own claim flow, by forking this code and adding their own campaign details.","createdAt":"2025-01-06T08:13:34Z","labels":[],"number":14,"repository":"sablier-labs/sandbox","state":"open","title":"Build small example for merkle proof generation","type":"issue","updatedAt":"2025-01-06T08:14:06Z","url":"https://github.com/sablier-labs/sandbox/issues/14"},{"author":"PaulRBerg","body":"A user requested this, see [Slack](https://sablier.slack.com/archives/C032HBFV4QJ/p1732891664737699).","createdAt":"2024-11-29T17:17:01Z","labels":["priority: 1"],"number":13,"repository":"sablier-labs/sandbox","state":"closed","title":"Add support for Flow contracts","type":"issue","updatedAt":"2024-12-02T10:22:29Z","url":"https://github.com/sablier-labs/sandbox/issues/13"},{"author":"razgraf","body":"What the title said.","createdAt":"2024-03-12T16:18:34Z","labels":[],"number":11,"repository":"sablier-labs/sandbox","state":"closed","title":"Ensure Sandbox is up to date with the latest canon version of Sablier","type":"issue","updatedAt":"2024-11-13T14:13:51Z","url":"https://github.com/sablier-labs/sandbox/issues/11"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/759\r\n- https://github.com/sablier-labs/sablier-v2-integration-template/pull/3","createdAt":"2023-12-31T11:47:22Z","labels":[],"number":9,"repository":"sablier-labs/sandbox","state":"closed","title":"Use Bun for dependency management","type":"issue","updatedAt":"2023-12-31T12:06:35Z","url":"https://github.com/sablier-labs/sandbox/issues/9"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/pull/658\r\n- https://github.com/sablier-labs/v2-subgraphs/pull/17","createdAt":"2023-12-14T17:17:34Z","labels":[],"number":7,"repository":"sablier-labs/sandbox","state":"closed","title":"Update for V2.1","type":"issue","updatedAt":"2023-12-30T18:32:54Z","url":"https://github.com/sablier-labs/sandbox/issues/7"},{"author":"PaulRBerg","body":"Goerli is getting deprecated:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0c76cc53-99be-4bba-9103-a45b8705550d\"/>\r\n","createdAt":"2023-11-09T19:10:14Z","labels":[],"number":5,"repository":"sablier-labs/sandbox","state":"closed","title":"Change Goerli to Sepolia","type":"issue","updatedAt":"2023-12-30T18:23:38Z","url":"https://github.com/sablier-labs/sandbox/issues/5"},{"author":"PaulRBerg","body":"Requested by Dennison from Tally. See [Notion](https://www.notion.so/sablier/Write-a-frontend-example-for-how-to-create-streams-in-bulk-f08fb2347df2486c8f01c3c1e93a4b50) for more details.\r\n\r\n- Has to use Ethers\r\n- Use the simple [`Batch`](https://github.com/sablier-labs/v2-periphery/blob/0004fd2e61e032df3d895045ec414ecb212ddcc8/src/SablierV2Batch.sol) contract\r\n- Use the simple ERC-20 allowance system (not `Permit2`)","createdAt":"2023-11-03T17:30:35Z","labels":[],"number":4,"repository":"sablier-labs/sandbox","state":"closed","title":"Example for creating streams in bulk","type":"issue","updatedAt":"2023-11-09T14:49:35Z","url":"https://github.com/sablier-labs/sandbox/issues/4"},{"author":"PaulRBerg","body":"We might need a Viem-based sandbox for ETHLondon","createdAt":"2023-10-15T13:42:43Z","labels":[],"number":3,"repository":"sablier-labs/sandbox","state":"closed","title":"Viem sandbox","type":"issue","updatedAt":"2023-10-22T18:34:52Z","url":"https://github.com/sablier-labs/sandbox/issues/3"},{"author":"PaulRBerg","body":"The goal is to incentivize people to build integrations.","createdAt":"2023-08-31T13:04:00Z","labels":[],"number":2,"repository":"sablier-labs/sandbox","state":"closed","title":"Explicitly mention broker fees in the README and the code","type":"issue","updatedAt":"2023-08-31T13:29:58Z","url":"https://github.com/sablier-labs/sandbox/issues/2"},{"author":"PaulRBerg","body":"","createdAt":"2023-08-23T07:22:41Z","labels":[],"number":1,"repository":"sablier-labs/sandbox","state":"closed","title":"Add support for Lockup Dynamic in Ethers V6 example","type":"issue","updatedAt":"2023-08-31T13:03:33Z","url":"https://github.com/sablier-labs/sandbox/issues/1"},{"author":"PaulRBerg","body":"So that we can send it directly to DocuSign and let the customer fill out their details.\n\n","createdAt":"2025-06-11T13:17:22Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":7,"repository":"sablier-labs/business-contracts","state":"closed","title":"Create a version of the deployment agreement with fields instead of yellow-highlighted fields for the customer","type":"issue","updatedAt":"2025-06-12T00:49:36Z","url":"https://github.com/sablier-labs/business-contracts/issues/7"},{"author":"PaulRBerg","body":"Similar to the Letterhead:\n\n<img width=\"578\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2d79bb78-c9fa-4022-86a9-104f09c39237\" />","createdAt":"2025-03-13T17:33:12Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":6,"repository":"sablier-labs/business-contracts","state":"open","title":"Add the Sablier logo in the Deployment Agreement","type":"issue","updatedAt":"2025-03-13T17:33:12Z","url":"https://github.com/sablier-labs/business-contracts/issues/6"},{"author":"PaulRBerg","body":"We only support The Graph and Envio at the moment.\n\nThis is a requirement that should be explicitly mentioned in the Deployment Agreements.\n\nRef https://docs.sablier.com/guides/custom-deployments\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d9b5e0ef-2ff6-4eeb-9a87-1b2273228f82\" />","createdAt":"2025-02-12T14:12:34Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":4,"repository":"sablier-labs/business-contracts","state":"closed","title":"Explicitly mention supported indexers for chain deployments","type":"issue","updatedAt":"2025-03-13T17:02:05Z","url":"https://github.com/sablier-labs/business-contracts/issues/4"},{"author":"PaulRBerg","body":"I'm not sure if this is possible with Microsoft Word files, but it would be cool if it were possible to provide a template for the Deployment Agreement, which could then by inherited by the Exclusivity and the Standard versions.\n\nThe trouble with the current approach (duplicating contents across these two files) is that it increases maintenance cost. Whenever a small edit is made in one contract, it has to be synchronized in the other.\n\nMaybe there is some sort of open-source format that is more git-friendly and that can generate MSWord files programmatically?","createdAt":"2025-01-10T14:28:32Z","labels":["effort: medium","priority: 2","type: perf","work: complex"],"number":3,"repository":"sablier-labs/business-contracts","state":"open","title":"Template file for Deployment Agreement","type":"issue","updatedAt":"2025-03-13T16:31:19Z","url":"https://github.com/sablier-labs/business-contracts/issues/3"},{"author":"PaulRBerg","body":"Requested by a prospect via Telegram.\r\n\r\n<img width=\"400\" alt=\"SCR-20241213-ohav\" src=\"https://github.com/user-attachments/assets/6bb9d968-99c9-4f08-9562-24646b604b4e\" />\r\n\r\n<img width=\"400\" alt=\"SCR-20241213-ohve\" src=\"https://github.com/user-attachments/assets/40d272c4-7b52-4997-8e92-32faf9199d9c\" />\r\n","createdAt":"2024-12-13T14:16:28Z","labels":["effort: high","priority: 2","type: feature","work: clear"],"number":2,"repository":"sablier-labs/business-contracts","state":"open","title":"Clause about uptime guarantees (SLA)","type":"issue","updatedAt":"2024-12-13T14:16:29Z","url":"https://github.com/sablier-labs/business-contracts/issues/2"},{"author":"PaulRBerg","body":"To lower the maintenance costs, it would be a good idea to remove the commit hashes from the Deployment Agreements.\r\n\r\nWe can say something like \"The Developer will use the latest commits available on the `release` branches of the following repos\", and proceed with listing all relevant repositories (Lockup, Airdrops, Flow).","createdAt":"2024-12-10T18:19:04Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":1,"repository":"sablier-labs/business-contracts","state":"closed","title":"Remove commit hashes from Deployment Agreement","type":"issue","updatedAt":"2024-12-11T13:57:04Z","url":"https://github.com/sablier-labs/business-contracts/issues/1"},{"author":"smol-ninja","body":"Refer to https://github.com/protofire/solhint/issues/663 for context.","createdAt":"2025-06-23T19:41:50Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":10,"repository":"sablier-labs/benchmarks","state":"open","title":"Prefix immutable string variables with `IMM`","type":"issue","updatedAt":"2025-06-23T19:41:50Z","url":"https://github.com/sablier-labs/benchmarks/issues/10"},{"author":"PaulRBerg","body":"## Task\n\n- [ ] Install the `@sablier/deployments` \n- [ ] Write a codegen script that generates a `deployments.txt` file, which is run upon initializing the benchmarks repo, but git-ignored\n- [ ] Use the [Foundry cheatcodes](https://book.getfoundry.sh/cheatcodes/) (e.g. `readFile` or `readLine`) to load the data from `deployments.txt`\n- [ ] To improve the UX, we can use [ffi](https://book.getfoundry.sh/cheatcodes/ffi) to run the codegen script if the `deployments.txt` file is not found when running the benchmarks/tests.\n\n### References\n\ncc @sablier-labs/evm\n\n- https://www.npmjs.com/package/@sablier/deployments\n- https://github.com/sablier-labs/deployments/issues/21","createdAt":"2025-05-23T12:18:37Z","labels":["effort: medium","priority: 2","type: refactor","work: clear"],"number":9,"repository":"sablier-labs/benchmarks","state":"open","title":"Load mainnet addresses from deployments package","type":"issue","updatedAt":"2025-05-30T13:44:38Z","url":"https://github.com/sablier-labs/benchmarks/issues/9"},{"author":"smol-ninja","body":"Post upcoming release, install [`evm-utils`](https://github.com/sablier-labs/evm-utils) package into this repo and import the following functions:\n\n1. [`setUpForkMainnet`](https://github.com/sablier-labs/evm-utils/blob/main/src/tests/BaseTest.sol#L168)\n2. [`Logger`](https://github.com/sablier-labs/evm-utils/blob/main/src/tests/BaseTest.sol#L148-L158)\n\nCurrently, its not possible due to conflicted declarations between evm-utils repo and the `main` branch of Sablier contracts.","createdAt":"2025-04-24T13:01:55Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":8,"repository":"sablier-labs/benchmarks","state":"open","title":"Install `evm-utils` package post launch","type":"issue","updatedAt":"2025-04-24T13:02:19Z","url":"https://github.com/sablier-labs/benchmarks/issues/8"},{"author":"PaulRBerg","body":"This: https://github.com/sablier-labs/docs/issues/270\n\nShould have been implemented here","createdAt":"2025-04-23T15:26:59Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":7,"repository":"sablier-labs/benchmarks","state":"closed","title":"New Markdown column for configurations","type":"issue","updatedAt":"2025-04-25T16:16:28Z","url":"https://github.com/sablier-labs/benchmarks/issues/7"},{"author":"PaulRBerg","body":"I am trying to run the Lockup benchmarks, but they don't work:\n\n```\n[FAIL: custom error 0x25f428c0: 0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000006217c47ffa5eb3f3c92247fffe22ad998242c5000000000000000000000000006217c47ffa5eb3f3c92247fffe22ad998242c5] testComputeGas_Implementations() (gas: 117897)\n```\n\nThis is the `SablierLockupBase_WithdrawalAddressNotRecipient(uint256,address,address)` custom error.","createdAt":"2025-04-23T13:24:52Z","labels":["priority: 0","type: bug","work: complicated"],"number":5,"repository":"sablier-labs/benchmarks","state":"closed","title":"Lockup benchmarks don't work due to incorrect stream IDs","type":"issue","updatedAt":"2025-04-25T16:16:28Z","url":"https://github.com/sablier-labs/benchmarks/issues/5"},{"author":"PaulRBerg","body":"Bring this logic from the docs repo here:\n\nhttps://github.com/sablier-labs/docs/blob/8b0e82c82bea3f17a203062d2acddc73964d1514/formatter.js","createdAt":"2025-04-23T12:26:17Z","labels":["effort: low","priority: 2","type: style","work: clear"],"number":4,"repository":"sablier-labs/benchmarks","state":"closed","title":"Comma-separated numbers in Markdown output","type":"issue","updatedAt":"2025-04-25T16:16:27Z","url":"https://github.com/sablier-labs/benchmarks/issues/4"},{"author":"PaulRBerg","body":"I just spent 15 minutes debugging an annoying `EvmError` that was due to my mainnet RPC URL pointing to a non-Ethereum Mainnet chain.\n\n[This is really Foundry's fault](https://github.com/foundry-rs/foundry/issues/4141), but until they add better reporting, we can explicitly load the chain ID and check if the ID matches the expected value (1).","createdAt":"2025-04-23T11:44:02Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":3,"repository":"sablier-labs/benchmarks","state":"closed","title":"Throw bespoke error when mainnet fork isn't Ethereum Mainnet","type":"issue","updatedAt":"2025-04-25T16:16:27Z","url":"https://github.com/sablier-labs/benchmarks/issues/3"},{"author":"PaulRBerg","body":"For deterministic results, the caret `^` should be removed:\n\nhttps://github.com/sablier-labs/benchmarks/blob/325a3a55d03cb9eae6f3f4de748f4ee73e3872a6/package.json#L16-L18","createdAt":"2025-04-23T11:20:57Z","labels":["effort: low","priority: 1","type: build","work: clear"],"number":2,"repository":"sablier-labs/benchmarks","state":"closed","title":"Use exact sem versions for Sablier dependencies","type":"issue","updatedAt":"2025-04-25T16:16:26Z","url":"https://github.com/sablier-labs/benchmarks/issues/2"},{"author":"smol-ninja","body":"The task is to add benchmark code from https://github.com/sablier-labs/examples/tree/shapes-benchmark so that this repo can have have all the benchmarks related code.","createdAt":"2025-02-05T13:27:07Z","labels":["effort: medium","priority: 2","type: feature","work: complicated"],"number":1,"repository":"sablier-labs/benchmarks","state":"open","title":"Add benchmark code from `shapes-benchmark` branch of `examples`","type":"issue","updatedAt":"2025-04-08T11:02:31Z","url":"https://github.com/sablier-labs/benchmarks/issues/1"},{"author":"PaulRBerg","body":"Here: https://github.com/sablier-labs/devkit/blob/main/shell/setup.sh\n\nThe default run shouldn’t include these deps, as Anchor takes a long time to install. We should introduce flags to make their installation optional.\n\nIssue originally opened by @andreivladbrg: https://github.com/sablier-labs/team-setup/issues/8\n\n\n\n","createdAt":"2025-07-31T10:09:08Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":10,"repository":"sablier-labs/devkit","state":"open","title":"Add Solana and Anchor CLI to the setup script","type":"issue","updatedAt":"2025-07-31T10:09:08Z","url":"https://github.com/sablier-labs/devkit/issues/10"},{"author":"PaulRBerg","body":"`useImportType`:\n\n- https://biomejs.dev/linter/rules/use-import-type/\n- https://github.com/biomejs/biome/discussions/6026#discussioncomment-13850264","createdAt":"2025-07-28T15:54:31Z","labels":["effort: low","priority: 2","type: style","work: complicated"],"number":8,"repository":"sablier-labs/devkit","state":"open","title":"Standardize import types in Biome config","type":"issue","updatedAt":"2025-07-28T15:54:31Z","url":"https://github.com/sablier-labs/devkit/issues/8"},{"author":"PaulRBerg","body":"https://github.com/biomejs/biome/discussions/6902#discussioncomment-13776818","createdAt":"2025-07-18T11:43:41Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":7,"repository":"sablier-labs/devkit","state":"open","title":"Language-specific configuration for overrides","type":"issue","updatedAt":"2025-07-18T11:43:41Z","url":"https://github.com/sablier-labs/devkit/issues/7"},{"author":"smol-ninja","body":"See the below references:\n\n1. https://github.com/sablier-labs/devkit/pull/5#issuecomment-3057031780\n2. https://github.com/sablier-labs/devkit/pull/5\n3. https://github.com/casey/just/issues/2755#issuecomment-2998993871\n4. https://github.com/sablier-labs/lockup/actions/runs/16180050896/job/45674365822?pr=1268","createdAt":"2025-07-10T11:27:43Z","labels":[],"number":6,"repository":"sablier-labs/devkit","state":"closed","title":"Replace `check-tools` recipe with `require` statements","type":"issue","updatedAt":"2025-07-10T20:31:49Z","url":"https://github.com/sablier-labs/devkit/issues/6"},{"author":"PaulRBerg","body":"https://github.com/casey/just/issues/2755#issuecomment-2998993871\n\nAdd them like so:\n\n```just\n# ---------------------------------------------------------------------------- #\n#                                 DEPENDENCIES                                 #\n# ---------------------------------------------------------------------------- #\n\n# Bulloak: https://github.com/foundry-rs/bulloak\nna := require(\"bulloak\")\n# Foundry: https://getfoundry.sh\nforge := require(\"forge\")\n# Ni: https://github.com/antfu-collective/ni\nna := require(\"na\")\nnlx := require(\"nlx\")\n```","createdAt":"2025-06-26T19:38:42Z","labels":["effort: low","priority: 2","type: feature","work: complicated"],"number":4,"repository":"sablier-labs/devkit","state":"closed","title":"Declare $PATH dependencies for Just files","type":"issue","updatedAt":"2025-07-09T07:44:24Z","url":"https://github.com/sablier-labs/devkit/issues/4"},{"author":"PaulRBerg","body":"","createdAt":"2025-06-12T14:24:02Z","labels":["effort: low","priority: 3","type: build","work: clear"],"number":3,"repository":"sablier-labs/devkit","state":"open","title":"Ship to npm registry","type":"issue","updatedAt":"2025-06-12T14:24:02Z","url":"https://github.com/sablier-labs/devkit/issues/3"},{"author":"PaulRBerg","body":"https://github.com/foundry-rs/foundry/issues/10594","createdAt":"2025-05-22T16:48:12Z","labels":["type: feature","work: clear"],"number":2,"repository":"sablier-labs/devkit","state":"open","title":"Add Foundry config when it becomes possible","type":"issue","updatedAt":"2025-05-22T16:48:12Z","url":"https://github.com/sablier-labs/devkit/issues/2"},{"author":"PaulRBerg","body":"https://github.com/protofire/solhint/issues/359","createdAt":"2025-05-22T16:43:34Z","labels":["type: feature","work: clear"],"number":1,"repository":"sablier-labs/devkit","state":"open","title":"Add Solhint config when it becomes possible","type":"issue","updatedAt":"2025-05-22T16:48:18Z","url":"https://github.com/sablier-labs/devkit/issues/1"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/deployments/pull/31#issuecomment-2960186415","createdAt":"2025-06-13T13:48:39Z","labels":[],"number":45,"repository":"sablier-labs/deployments","state":"open","title":"Archive this repository after the SDK is done","type":"issue","updatedAt":"2025-06-13T13:48:56Z","url":"https://github.com/sablier-labs/deployments/issues/45"},{"author":"PaulRBerg","body":"FYI @smol-ninja @andreivladbrg\n\nThis:\n\nhttps://github.com/sablier-labs/deployments/tree/d0c5aa15ee1d0ec4e34d31b6a0e622e8eebcaa20/lockup/v1.1.1/periphery\n\nShould have been under v1.1.2 because we merged the periphery under the v2-core version release system.\n\nRefs:\n\n- https://github.com/sablier-labs/lockup/releases/tag/v1.1.2\n- https://github.com/sablier-labs/v2-periphery/releases/tag/v1.1.1\n","createdAt":"2025-04-25T17:21:57Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":27,"repository":"sablier-labs/deployments","state":"closed","title":"Lockup v1.1.2 periphery deployments are incorrectly indexed as v1.1.1","type":"issue","updatedAt":"2025-06-10T17:55:28Z","url":"https://github.com/sablier-labs/deployments/issues/27"},{"author":"PaulRBerg","body":"It appears that the 2nd address is used by the UI, so we should remove the 1st entry.\n\n- `0x0B8C44E7AbAe0B1bc60eBcb71ee5AaCa87125620`\n- `0x0C72b957347B51285854f015e4D20641655B939A`","createdAt":"2025-04-21T12:07:22Z","labels":["effort: low","priority: 3","type: bug","work: clear"],"number":25,"repository":"sablier-labs/deployments","state":"closed","title":"Duplicate \"entries\" in Airdrops v1.3.0 deployment for SablierMerkleFactory on Abstract chain","type":"issue","updatedAt":"2025-06-10T17:54:35Z","url":"https://github.com/sablier-labs/deployments/issues/25"},{"author":"PaulRBerg","body":"- Skale: never used, never willing to pay for the deployment\n- Berachain Artio: deprecated testnet","createdAt":"2025-04-21T09:39:34Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":24,"repository":"sablier-labs/deployments","state":"closed","title":"Remove Skale testnet and Berachain Artio","type":"issue","updatedAt":"2025-06-10T17:52:46Z","url":"https://github.com/sablier-labs/deployments/issues/24"},{"author":"PaulRBerg","body":"## Context\n\nSee the full rationale behind this proposal here: [Package for listing deployment addresses and subgraph endpoints?](https://github.com/sablier-labs/interfaces/discussions/1448)\n\n## Spec\n\n- Turn this repo into a TypeScript package\n- Provide bespoke types `SablierChain`, `SablierContract`, and `SablierRelease`\n- Export the addresses and indexer URLs\n- Use this package in the consuming repos listed below\n- Set up a GitHub Actions workflow for automatically shipping updates to npm\n- In the same CI workflow, have a GitHub bot automatically create GitHub issues in the consuming repos, prompting the maintainers of those repos to bump the package\n\n### TypeScript Types\n\n<details><summary>Toggle to see my proposed design</summary>\n<p>\n\n```typescript\ntype SablierChain = {\n  explorerURL: string;\n  id: number;\n  name: string;\n  nativeCurrency: {\n    \"name\": string;\n    \"symbol\": string;\n    \"decimals\": number;\n  }\n}\n\n// Also used for libraries\ntype SablierContract = {\n  address: string;\n  name: string;\n  chain: SablierChain;\n}\n\ntype Indexers =\n  | { envio: string; thegraph: string | null }\n  | { envio: string | null; thegraph: string };\n\ntype SablierRelease = {\n  contracts: SablierContract[];\n  product: \"airdrops\" | \"flow\" | \"lockup\";\n  indexers: Indexers;\n  version: string;\n};\n\ntype SablierContracts = SablierContract[]\n\ntype SablierReleases = SablierRelease[]\n```\n\n</p>\n</details> \n\n## Consuming Repos\n\n- https://github.com/sablier-labs/docs\n- https://github.com/sablier-labs/interfaces\n- https://github.com/sablier-labs/multichain-deployer (or whatever we will use for our operational multichain scripts)\n- https://github.com/sablier-labs/subgraphs\n\n## TBD\n\n- [ ] Whether we ship to npm or not — to begin with, we can simply install the package from GitHub directly\n- [ ] Whether we import the addresses from the artifacts directory — to begin with, we can just hard code them","createdAt":"2025-03-11T16:40:09Z","labels":["effort: epic","priority: 1","work: complicated","type: feature"],"number":21,"repository":"sablier-labs/deployments","state":"closed","title":"Tentative spec for TypeScript package","type":"issue","updatedAt":"2025-06-10T17:46:00Z","url":"https://github.com/sablier-labs/deployments/issues/21"},{"author":"PaulRBerg","body":"As discussed in [Rename to \"evm-deployments\"? Or use this for Solana?](https://github.com/sablier-labs/deployments/discussions/18).\n\ncc @sablier-labs/solana","createdAt":"2025-03-10T16:37:02Z","labels":["effort: low","work: clear","type: feature"],"number":20,"repository":"sablier-labs/deployments","state":"closed","title":"List Solana deployments once we have them","type":"issue","updatedAt":"2025-06-10T17:46:23Z","url":"https://github.com/sablier-labs/deployments/issues/20"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://github.com/sablier-labs/v2-deployments/tree/main/core/v1.2.0#salts\r\n\r\nJust like we did in the docs.\r\n\r\n","createdAt":"2024-11-20T15:36:19Z","labels":["effort: low","priority: 2","type: docs"],"number":13,"repository":"sablier-labs/deployments","state":"closed","title":"Separate chain table by mainnets and testnets","type":"issue","updatedAt":"2024-12-12T13:12:00Z","url":"https://github.com/sablier-labs/deployments/issues/13"},{"author":"PaulRBerg","body":"In line with package tethering:\r\n\r\nhttps://github.com/sablier-labs/v2-core/issues/808","createdAt":"2024-09-16T08:29:07Z","labels":[],"number":11,"repository":"sablier-labs/deployments","state":"closed","title":"Remove \"V2\" from the repository name","type":"issue","updatedAt":"2024-12-12T13:28:57Z","url":"https://github.com/sablier-labs/deployments/issues/11"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-core/pull/979","createdAt":"2024-08-07T10:55:50Z","labels":[],"number":10,"repository":"sablier-labs/deployments","state":"closed","title":"Think of a way to merge the `core` and `periphery` dirs","type":"issue","updatedAt":"2025-06-10T17:59:24Z","url":"https://github.com/sablier-labs/deployments/issues/10"},{"author":"PaulRBerg","body":"- [x] Rename `zk_sync` to `zk-sync`\r\n- [x] Rename `zkSyncMainnet` to `zk-sync-mainnet`\r\n- [x] Rename `zkSyncTestnet` to `zk-sync-testnet`","createdAt":"2024-07-05T14:23:20Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":8,"repository":"sablier-labs/deployments","state":"closed","title":"Inconsistent directory names","type":"issue","updatedAt":"2024-07-05T14:52:28Z","url":"https://github.com/sablier-labs/deployments/issues/8"},{"author":"PaulRBerg","body":"See https://base.org","createdAt":"2023-07-20T17:35:04Z","labels":[],"number":5,"repository":"sablier-labs/deployments","state":"closed","title":"Deploy to Base","type":"issue","updatedAt":"2023-07-25T17:19:00Z","url":"https://github.com/sablier-labs/deployments/issues/5"},{"author":"PaulRBerg","body":"","createdAt":"2023-07-13T13:47:22Z","labels":[],"number":4,"repository":"sablier-labs/deployments","state":"closed","title":"Add v2-core@1.0.1 deployment for NFT descriptor","type":"issue","updatedAt":"2023-07-13T15:04:55Z","url":"https://github.com/sablier-labs/deployments/issues/4"},{"author":"PaulRBerg","body":"I will ship the `1.0.1` package later today. @andreivladbrg, could you please add a new `v1.0.1` directory in this repository, which duplicates all the files in `v1.0.0`, but which adds a paragraph at the top of the README that says something along the lines of \"The bytecodes for v1.0.1 are the same as those for v1.0.0. We shipped a new version to patch some faulty Foundry remappings.\"","createdAt":"2023-07-11T14:14:11Z","labels":[],"number":3,"repository":"sablier-labs/deployments","state":"closed","title":"Add \"v1.0.1\" for V2 Periphery","type":"issue","updatedAt":"2023-07-13T13:48:02Z","url":"https://github.com/sablier-labs/deployments/issues/3"},{"author":"PaulRBerg","body":"See how Uniswap has worded it:\r\n\r\nhttps://github.com/Uniswap/v3-periphery/blob/main/deploys.md","createdAt":"2023-07-06T17:20:37Z","labels":[],"number":1,"repository":"sablier-labs/deployments","state":"closed","title":"Mention source of deployment in each version README","type":"issue","updatedAt":"2023-07-08T12:15:57Z","url":"https://github.com/sablier-labs/deployments/issues/1"},{"author":"PaulRBerg","body":"The `xdc` chain logo file name uses uppercase `XDC` instead of lowercase `xdc`. This causes a bug in the UI since the UI attempts to load the file at `xdc.png` instead of `XDC.png`\n\nSee: [How do I commit case-sensitive only filename changes in Git?](https://stackoverflow.com/questions/17683458/how-do-i-commit-case-sensitive-only-filename-changes-in-git)","createdAt":"2025-07-06T14:35:01Z","labels":["work: clear","effort: low","type: bug","priority: 2"],"number":10,"repository":"sablier-labs/sablier-labs.github.io","state":"closed","title":"Lowercase \"xdc\" file name for chain logo","type":"issue","updatedAt":"2025-07-06T14:37:05Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/10"},{"author":"PaulRBerg","body":"Using the SDK chain slugs would provide a standardized nomenclature, which will make it possible to remove these custom definitions from the Interfaces repo:\n\nhttps://github.com/sablier-labs/interfaces/blob/8be76d486989f080635521cd9c8895d2b3737608/apps/client/src/api/utils.ts#L38-L67\n\nFor backward-compatibility, the existing chain names should be kept.\n\nExample: `bera.png` should become `berachain.png`.","createdAt":"2025-07-06T14:26:53Z","labels":["work: clear","type: refactor","effort: low","priority: 3"],"number":9,"repository":"sablier-labs/sablier-labs.github.io","state":"closed","title":"Use SDK chain slugs","type":"issue","updatedAt":"2025-07-06T14:36:51Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/9"},{"author":"PaulRBerg","body":"See context here: https://github.com/sablier-labs/sablier-labs.github.io/pull/6#discussion_r1936042298","createdAt":"2025-01-31T11:42:14Z","labels":["work: clear","type: docs","effort: low"],"number":7,"repository":"sablier-labs/sablier-labs.github.io","state":"open","title":"Add guidance comment on first row in airdrop template","type":"issue","updatedAt":"2025-02-10T16:01:38Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/7"},{"author":"operagxsasha","body":"Branding Notice\nFor branding assets to be used in marketing materials head over to the [sablier-labs/branding](https://github.com/sablier-labs/sablier-labs.github.io/blob/main/github.com/sablier-labs/branding) repository.","createdAt":"2025-01-10T09:44:21Z","labels":["work: clear","effort: low","type: bug","priority: 2"],"number":4,"repository":"sablier-labs/sablier-labs.github.io","state":"closed","title":"Branding repo link is not working","type":"issue","updatedAt":"2025-01-10T10:45:24Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/4"},{"author":"PaulRBerg","body":"Why not rename the `stepper-*` templates to `unlockSteps` so that the template names match the shape name displayed in the UI?\r\n\r\ncc @sablier-labs/frontend","createdAt":"2024-09-13T14:13:33Z","labels":["work: clear","type: refactor","effort: low","priority: 2"],"number":3,"repository":"sablier-labs/sablier-labs.github.io","state":"closed","title":"Discrepancy between the template name (Stepper) and shape name (Unlock in Steps)","type":"issue","updatedAt":"2025-01-30T17:57:01Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/3"},{"author":"PaulRBerg","body":"- [x] Privacy policy\r\n- [x] Risk Notice\r\n- [x] Terms of service","createdAt":"2024-04-04T15:42:07Z","labels":["work: clear","type: refactor","priority: 1","effort: medium"],"number":2,"repository":"sablier-labs/sablier-labs.github.io","state":"closed","title":"Update legal policies","type":"issue","updatedAt":"2024-04-06T16:22:05Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/2"},{"author":"PaulRBerg","body":"Here: https://files.sablier.com/","createdAt":"2023-10-11T21:07:39Z","labels":["good first issue"],"number":1,"repository":"sablier-labs/sablier-labs.github.io","state":"closed","title":"Index all files on the home page","type":"issue","updatedAt":"2024-02-16T14:47:42Z","url":"https://github.com/sablier-labs/sablier-labs.github.io/issues/1"},{"author":"PaulRBerg","body":"It looks like the problem is `node-gyp` ..\r\n\r\nhttps://app.circleci.com/pipelines/github/sablier-labs/v1-protocol/4/workflows/8cfeaefe-1294-4199-93c0-49f7492a8daf/jobs/4/parallel-runs/0/steps/0-103","createdAt":"2023-07-06T16:05:51Z","labels":["effort: high","priority: 1","work: complicated","type: ci"],"number":45,"repository":"sablier-labs/legacy-contracts","state":"open","title":"Fix CI","type":"issue","updatedAt":"2024-01-01T16:39:06Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/45"},{"author":"PaulRBerg","body":"","createdAt":"2023-07-06T15:42:38Z","labels":["effort: low","type: docs","work: clear","priority: 0"],"number":44,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Announce V2 in the README","type":"issue","updatedAt":"2024-01-01T16:41:21Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/44"},{"author":"VinenzoSoftware","body":"....","createdAt":"2022-01-10T22:00:27Z","labels":[],"number":41,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"....","type":"issue","updatedAt":"2022-01-11T11:53:26Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/41"},{"author":"marczeller","body":"To the best of my knowledge, the Sablier UI has an hardcoded Gaslimit on the web3 call of `createSalary()` of 500000 gas units.\r\n\r\nAt least in my tests that lead to `outOfGas` for aDAI streams as the gas used is higher.\r\n\r\nlink to failed tx :\r\n\r\nhttps://etherscan.io/tx/0x122b9a40225c31ab814f93a6d86f9a7c25652e11c56ee19951c5a2cac3f20862\r\n\r\nhttps://etherscan.io/tx/0xffb6b3e183ae14fa29aea148ba0521e07df1d91287798042942597ed5bea0950\r\n\r\nhttps://etherscan.io/tx/0x1d64a95d09da92d8c940806fbcca1f843a7a9f6cf215dc05ad7ca9808c2a253b\r\n\r\nLink to successful tx after increasing the GasLimit : \r\n\r\nhttps://etherscan.io/tx/0x9ab7e2dbbc75c168621f5e5b9e9685a716531f9d56e9eec6bb7e07e8377470a6\r\n\r\nHotfix suggested: increase the GasLimit hardcode to 1.1M gas Units.","createdAt":"2020-02-04T12:20:00Z","labels":[],"number":32,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Hardcoded Gaslimit on createSalary() and aDAI","type":"issue","updatedAt":"2020-02-04T16:23:36Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/32"},{"author":"kadenzipfel","body":"I've gone through the various Sablier contracts in search of possible gas optimizations. The following are possible improvements that can be made to the contracts to save gas.\r\n\r\n**Disclaimer:** I'm by no means an expert on gas optimization, and some or all of my suggestions could be wrong. I just thought it would be fun to contribute to a project that I enjoy using.\r\n\r\n### `createSalary()` - Payroll.sol line 252-273 \r\nA temporary variable `salaryId` is created to represent the global variable `nextSalaryId`. Instead of loading `nextSalaryId` from storage on lines 265 and 269, we can simply use the temporary variable `salaryId`.\r\n\r\n### `hundredPercent` & `onePercent` - Sablier.sol lines 25 & 30\r\nAlthough it may be useful to represent these values as constant global variables, it's quite expensive to pull them out of storage each time they're used. In place of these variables, you will save gas by just referencing the values. \r\n\r\n### `takeEarnings()` - Sablier.sol line 172-187\r\n`earnings[tokenAddress]` is used three times throughout this function. You can save gas by using a temporary variable. This may also be applicable to `withdrawFromCompoundingStreamInternal()` as well as `cancelCompoundingStreamInternal()`.\r\n\r\n### `interestOf()` - Sablier.sol line 351-432\r\nGlobal variable `fee` is used three times. Can be represented with a temporary variable.\r\n\r\n### `createStream()` - Sablier.sol line 473-521\r\nTemporary variable `streamId` is used to represent global variable `nextStreamId`, yet the global variable continues to be used when the temporary variable will suffice.\r\n\r\n ### `getStream()` - Sablier.sol line 197-220\r\nA temporary variable can represent `streams[streamId]`. Same can be done for `getCompoundingStream()` with both `streams[streamId]` and `compoundingStreamVars[streamId]`.\r\n\r\n### `withdrawFromStreamInternal()` - Sablier.sol line 664-678\r\nTemporary variable `stream` is created to represent `streams[streamId]`, which can be used throughout the function. Same thing for `withdrawFromCompoundingStreamInternal()`, `cancelStreamInternal()` and `cancelCompoundingStreamInternal()`.\r\n\r\n### Constant variables - Exponential.sol lines 13-15\r\nIt's costly and unnecessary (as far as I can tell) to assign these values to global variables.\r\n\r\nIf wanted, I will gladly make a pull request to make all these changes, just let me know. ","createdAt":"2020-01-17T22:15:39Z","labels":[],"number":31,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Gas Optimizations","type":"issue","updatedAt":"2023-04-11T10:09:06Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/31"},{"author":"vs77bb","body":"## What\r\nProposal to create a bounty for this [tweet](https://twitter.com/SablierHQ/status/1214239578632196097). A part of the Take Back The Web hackathon with a $750 reward, in DAI. Potential for future collaborations for those interested.\r\n\r\n## Description\r\n\r\nThe user flow should be the following:\r\n\r\n1. Create a new web3 wallet\r\n2. Throw your wealth in there\r\n3. Use all money to create a stream with a long duration\r\n4. Burn the private key\r\n\r\nThe bounty consists of building a dapp where users can do all the steps above in the same web interface.\r\n\r\n## Applications\r\nAn interesting use case that comes to mind is leaving inheritance. This is normally complicated process and many parents would rather not shower their kids with riches, but they would neither fancy burning the money.\r\n\r\nAnother one is rate-limiting how much you can spend from your own money by streaming it to yourself Irreversibly.\r\n\r\n## Useful Links\r\n\r\n+ [sablierhq/sablier](https://github.com/sablierhq/sablier)\r\n+ [Sablier Discord server](https://discord.gg/bsS8T47)\r\n+ [Sablier Documentation](https://docs.sablier.finance)\r\n+ [Sablier FAQ](https://faq.sablier.finance)","createdAt":"2020-01-09T14:16:58Z","labels":[],"number":30,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Irreversible Token Streaming","type":"issue","updatedAt":"2023-04-11T10:17:59Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/30"},{"author":"vs77bb","body":"## What?\r\nProposal to create a bounty for this [tweet](https://twitter.com/VitalikButerin/status/1212717363994476544). A part of the [Take Back The Web](https://hackathons.gitcoin.co/take-back-the-web) with a $1K reward, in DAI. Potential for future collaborations for those interested. \r\n\r\n## Description\r\nSablier currently works like this:\r\n\r\n1. Alice locks up some amount of tokens\r\n2. After a pre-defined start time, the smart contract starts \"streaming\" money to Bob\r\n3. Bob is allocated a lil' bit of money every second - he has the right to withdraw, that is\r\n4. Alice can cancel the stream at any time\r\n\r\nWhat if there was an additional action that streamed (or printed) ERC-20 tokens to the creator of the stream, once every second? Doing this would turn the financial contract into an investment vehicle; an interesting continuation to Vitalik's [DAICO](https://ethresear.ch/t/explanation-of-daicos/465) idea.\r\n\r\nThe bounty consists of writing a proxy smart contract (or a modified version of `Sablier.sol`) that adds this additional ERC-20 dynamic.\r\n\r\n## Useful Links\r\n\r\n+ [sablierhq/sablier](https://github.com/sablierhq/sablier)\r\n+ [Sablier Discord server](https://discord.gg/bsS8T47)\r\n+ [Sablier Documentation](https://docs.sablier.finance)\r\n+ [Sablier FAQ](https://faq.sablier.finance)\r\n\r\n## Requirements\r\n- Submissions must be made by 1/23/19 UTC 11:59\r\n- Please provide a video demo of your solution as a part of your submission\r\n- Valid submissions will be judged at discretion of @PaulRBerg, founder of Sablier. ","createdAt":"2020-01-08T23:44:39Z","labels":[],"number":29,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Streamed atomic swaps","type":"issue","updatedAt":"2023-04-11T10:18:20Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/29"},{"author":"RuneOrion","body":"I received an error that I have 0 DAI in my wallet. I think on Rinkeby there are several versions of DAI. Which is the one used for beta.sablier.app?\r\n\r\nCare to send some Rinkeby DAI to 0x67a2aea564249eed1e676ea94305ededd94ff454 on Rinkeby for testing?","createdAt":"2019-10-04T04:30:33Z","labels":[],"number":21,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"What is the contract address of DAI for Rinkeby?","type":"issue","updatedAt":"2020-01-14T20:10:49Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/21"},{"author":"cgewecke","body":"Hi @PaulRBerg, \r\n\r\nHave run into difficulty installing the repo correctly. I cloned a fork and ran `yarn install` (and saw it composing the workspaces).  Then ran a lerna utility called [lerna-update-wizard](https://www.npmjs.com/package/lerna-update-wizard) to upgrade solidity-coverage to 0.7.0-beta.0. (How do you normally update your deps?)\r\n\r\nAs a baseline check, from the project root I ran\r\n```\r\nCI=true PKG=@sablier/payroll yarn test\r\n```\r\nAnd got...\r\n```\r\n | Error: Cannot find module '@sablier/dev-utils'\r\n |     at Function.Module._resolveFilename (packages/payroll/internal/modules/cjs/loader.js:582:15)\r\n |     at Function.Module._load (packages/payroll/internal/modules/cjs/loader.js:508:25)\r\n |     at Module.require (packages/payroll/internal/modules/cjs/loader.js:637:17)\r\n |     at require (packages/payroll/internal/modules/cjs/helpers.js:22:18)\r\n |     at Object.<anonymous> (/Users/cgewecke/code/sc-packages/payroll/forks/sablier/packages/payroll/test/payroll/Payroll.behavior.js:1:26)\r\n```\r\n\r\nDo you know what I did wrong here? \r\n\r\nUsing yarn version v1.15.2","createdAt":"2019-09-10T09:00:40Z","labels":[],"number":7,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Request for help with installation","type":"issue","updatedAt":"2019-09-10T09:55:20Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/7"},{"author":"Solexplorer","body":"Not an issue but could be fun to do it, I will take care of it if you want","createdAt":"2019-06-05T14:45:16Z","labels":[],"number":1,"repository":"sablier-labs/legacy-contracts","state":"closed","title":"Rewrite in vyper ?","type":"issue","updatedAt":"2019-09-01T13:50:27Z","url":"https://github.com/sablier-labs/legacy-contracts/issues/1"},{"author":"smol-ninja","body":"Add flow audit report and refactor repo to include both lockup and flow audit reports","createdAt":"2024-10-18T21:42:53Z","labels":[],"number":10,"repository":"sablier-labs/audits","state":"closed","title":"Add Flow audit report","type":"issue","updatedAt":"2024-10-23T13:03:46Z","url":"https://github.com/sablier-labs/audits/issues/10"},{"author":"PaulRBerg","body":"Mention [Code Praise](https://sablier.notion.site/Code-Praise-ffcfba15e3684768b6e0797a4f08b5f8?pvs=74) in the README.","createdAt":"2024-08-07T12:20:22Z","labels":[],"number":8,"repository":"sablier-labs/audits","state":"closed","title":"Mention code praise","type":"issue","updatedAt":"2024-08-08T10:47:26Z","url":"https://github.com/sablier-labs/audits/issues/8"},{"author":"MerlinEgalite","body":"Links in tables in the `README.md` file are broken. For instance [here](https://github.com/sablier-labs/audits?tab=readme-ov-file#v2-core) in the Report section.","createdAt":"2024-08-07T12:18:13Z","labels":["bug"],"number":7,"repository":"sablier-labs/audits","state":"closed","title":"Broken links in `README.md`","type":"issue","updatedAt":"2024-08-07T12:23:27Z","url":"https://github.com/sablier-labs/audits/issues/7"},{"author":"smol-ninja","body":"Add audit reports from Cantina and Codehawk for v2.2.\r\n\r\n### Reports:\r\n1. https://cantina.xyz/portfolio/ca88c1af-812c-4a3b-9104-8abc09aa575c\r\n2. https://www.codehawks.com/report/clvb9njmy00012dqjyaavpl44","createdAt":"2024-06-13T20:04:50Z","labels":[],"number":5,"repository":"sablier-labs/audits","state":"closed","title":"Add audit reports for v2.2","type":"issue","updatedAt":"2024-07-03T17:44:09Z","url":"https://github.com/sablier-labs/audits/issues/5"},{"author":"PaulRBerg","body":"- Cantina (w/ Zach Obront)\r\n- Turing Consulting","createdAt":"2023-12-06T10:55:28Z","labels":[],"number":4,"repository":"sablier-labs/audits","state":"closed","title":"Add V2.1 audits","type":"issue","updatedAt":"2023-12-06T12:02:19Z","url":"https://github.com/sablier-labs/audits/issues/4"},{"author":"IaroslavMazur","body":"The highlighted links in the screenshot below point to the same PDF, while their anchor texts are different:\r\n![image](https://github.com/sablier-labs/audits/assets/22785348/dbbee058-abf1-4699-a2d4-bd0ce9a2a50c)","createdAt":"2023-07-25T18:27:54Z","labels":[],"number":3,"repository":"sablier-labs/audits","state":"closed","title":"Cantina audit link to anchor text mismatch","type":"issue","updatedAt":"2023-07-25T19:11:59Z","url":"https://github.com/sablier-labs/audits/issues/3"},{"author":"IaroslavMazur","body":"All of the links pointing to the audits of [Sablier V2-core](https://github.com/sablier-labs/audits#v2-core) and [Sablier V1](https://github.com/sablier-labs/audits#v2-core) are broken and need to be replaced with the working ones.","createdAt":"2023-07-23T16:16:18Z","labels":[],"number":1,"repository":"sablier-labs/audits","state":"closed","title":"Broken Audit URLs","type":"issue","updatedAt":"2023-07-24T10:26:23Z","url":"https://github.com/sablier-labs/audits/issues/1"},{"author":"PaulRBerg","body":"- Envio supports all chains.\n- A GraphQL indexer is much easier to use compared to Dune's Trino SQL syntax. We would significantly lower our maintenance cost.\n- No need to push the queries anywhere. They can be run locally.\n- Less cognitive load for the team as Max can remain the only SQL guru.\n- Easier to prototype and iterate since we’re familiar with the syntax from the Indexers.\n\nThe only downside is that we would have to build our own data visualizer app, but that can be vibe-coded with AI.\n\n@maxdesalle I am assigning this task to you. Obviously, some Dune queries cannot be deprecated because people depend on them. You should know which ones should be kept, and which ones not.\n\nRelated: https://github.com/sablier-labs/onchain-analytics/pull/32","createdAt":"2025-07-19T15:06:30Z","labels":["effort: epic","priority: 1","type: refactor","work: complicated"],"number":33,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Deprecate (most of) Dune queries, moving to Envio","type":"issue","updatedAt":"2025-08-11T16:23:22Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/33"},{"author":"PaulRBerg","body":"e.g. here:\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/2fce8cd48c16f563778cfefd05d39ec751b693e1/queries/airdrops%3A_daily_claim_count___4719780.sql#L10C5-L10C47\n\nA dedicated VSCode extension would provide IntelliSense hints if the query ID is incorrect (and name in the comments doesn't match).","createdAt":"2025-07-16T12:49:24Z","labels":["effort: medium","priority: 2","type: feature","work: complicated"],"number":31,"repository":"sablier-labs/onchain-analytics","state":"open","title":"VSCode extension to check referenced Dune queries","type":"issue","updatedAt":"2025-07-16T12:49:24Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/31"},{"author":"PaulRBerg","body":"Several breaking changes:\n\nhttps://github.com/python-poetry/poetry/releases/tag/2.0.0","createdAt":"2025-04-14T13:33:38Z","labels":["effort: medium","priority: 2","type: build","work: complex"],"number":30,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Upgrade to Poetry v2","type":"issue","updatedAt":"2025-04-14T13:33:38Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/30"},{"author":"PaulRBerg","body":"- https://github.com/duneanalytics/dune-client/issues/153#issuecomment-2801594717\n- https://github.com/bh2smith/dune-update/","createdAt":"2025-04-14T12:53:55Z","labels":["priority: 2","type: ci","work: complex"],"number":29,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Take a look at Dune GitHub Action","type":"issue","updatedAt":"2025-04-14T12:59:16Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/29"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-13T16:58:39Z","labels":["effort: medium","priority: 3","type: chore","work: clear"],"number":28,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Add Husky to run formatters on every commit","type":"issue","updatedAt":"2025-04-13T16:58:39Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/28"},{"author":"PaulRBerg","body":"One of the many reasons why we need SQLFluff and why ignoring entire files is not a good idea\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/lockup%3A_daily_withdrawal_count___4719563.sql#L24","createdAt":"2025-04-13T16:19:45Z","labels":["effort: low","priority: 1","type: bug","work: clear"],"number":27,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Invalid SQL syntax in \"Lockup: Daily Withdrawal Count\"","type":"issue","updatedAt":"2025-04-13T17:33:06Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/27"},{"author":"PaulRBerg","body":"## Problem\n\n### Problem 1: SQLFluff is not run on files containing Dune parameters\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/.sqlfluffignore#L1-L5\n\n### Problem 2: Non-Standard Variable Names\n\nTemplating variables should never contain white spaces in the name. So a variable like `Start Date` should be named something like `start_date`. It's an anti-pattern that Dune allows this variable name in the first place.\n\ncc @maxdesalle \n\n## Solution\n\nUse the [Jinja templater](https://docs.sqlfluff.com/en/latest/configuration/templating/jinja.html#jinja-templater) feature of SQLFluff like so:\n\n```toml\n[sqlfluff]\ntemplater = jinja\n\n# Dummy values\n[sqlfluff:templater:jinja:context]\naddresses=\"0x0000000000000000000000000000000000000001,0x0000000000000000000000000000000000000002\"\nend_date=\"2025-01-01 00:00:00\"\nstart_date=\"2025-01-01 00:00:00\"\n```\n\n### Example\n\nTurn this:\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/airdrops%3A_claim_count___4719750.sql#L10-L13\n\nInto this:\n\n```sql\nWHERE\n    contract_address IN ({{ addresses }})\n    AND block_time > CAST('{{ start_date }}' AS TIMESTAMP)\n    AND block_time < CAST('{{ end_date }}' AS TIMESTAMP)\n```","createdAt":"2025-04-13T16:16:05Z","labels":["effort: medium","priority: 3","type: style","work: complicated"],"number":26,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Make Dune parameters compatible with SQLFluff","type":"issue","updatedAt":"2025-04-13T17:33:06Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/26"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-12T18:46:59Z","labels":["effort: low","priority: 3","type: style","work: clear"],"number":24,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Formatter rule for alphabetical imports in Python","type":"issue","updatedAt":"2025-07-16T12:37:29Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/24"},{"author":"PaulRBerg","body":"## Problem\n\nKeeping query names in sync between Dune UI and this repo takes maintenance work.\n\n## Solution\n\nUse this repo as the single source of truth for the Dune query names like so:\n\n- Write a (shell) script to parse the names written as `#` comments in the [`queries.yml`](https://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries.yml) file\n- Finally, use the [Update Query](https://docs.dune.com/api-reference/queries/endpoint/update) provided by the Dune API to update the queries.\n\n> [!NOTE]\n> There will still be cases when someone from the team will update a query name using the Dune API, but that's alright. We can update it later in the repo to keep it in sync.","createdAt":"2025-04-12T16:40:39Z","labels":["effort: high","priority: 2","type: feature","work: complicated"],"number":23,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Using this repo as the single source of truth for query names","type":"issue","updatedAt":"2025-04-13T17:33:06Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/23"},{"author":"PaulRBerg","body":"e.g. here\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/lockup%3A_global_stream_creation___4672879.sql#L6-L32","createdAt":"2025-04-12T16:23:16Z","labels":["effort: low","priority: 2","type: style","work: complicated"],"number":22,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Linting rule for alphabetical ordering in SQL","type":"issue","updatedAt":"2025-04-12T16:23:16Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/22"},{"author":"PaulRBerg","body":"@maxdesalle this looks like a bug to me, can you please confirm?\n\nThe following queries should all use the [Global Stream Creation Data](https://dune.com/queries/4672879) (with id `4672879`) INSTEAD OF [Stream Creation Data 2](https://dune.com/queries/4672652) (with id `4672652`), right?\n\n- https://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/lockup%3A_cumulative_stablecoin___4606967.sql#L8\n- https://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/lockup%3A_median_stablecoin_deposit___4607097.sql#L8\n- https://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/lockup%3A_monthly_cumulative_sta___4650009.sql#L13\n\nAnd so forth for the other places where ","createdAt":"2025-04-12T16:16:41Z","labels":["effort: low","priority: 2","type: bug","work: clear"],"number":21,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Use the global stream creation data query in all dependent subqueries","type":"issue","updatedAt":"2025-04-13T17:33:06Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/21"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/onchain-analytics/discussions/19\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** April 12, 2025</sup>\n@maxdesalle\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/.sqlfluffignore\n</div>","createdAt":"2025-04-12T15:09:27Z","labels":["effort: low","priority: 3","type: chore","work: clear"],"number":20,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Ignore certain parts of SQL files instead of putting them in `.sqlignore`","type":"issue","updatedAt":"2025-04-13T16:37:14Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/20"},{"author":"PaulRBerg","body":"We don't have any v1.3 release, only Lockup v2.0\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/99693f1e27e9beeef29e86ad4684c5b6bab25524/queries/lockup%3A_stream_creation_data_2___4672652.sql#L6","createdAt":"2025-04-12T14:45:31Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":18,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Refactor Lockup v1.3 to Lockup v2.0","type":"issue","updatedAt":"2025-04-13T17:33:05Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/18"},{"author":"PaulRBerg","body":"New queries for [this private dashboard](https://dune.com/sablier/quarterly-updates):\n\n- [x] **Unified: Quarterly Transactions**: total number of transactions processed by the Sablier contracts in each of the past 4 quarters\n- [x] **Unified: Quarterly Revenues**: total amount of revenues generated in the each of the past 4 quarters\n\nThere's no need for an All Time version now (for either of these two queries).","createdAt":"2025-04-12T14:25:41Z","labels":["effort: high","priority: 0","type: feature","work: complicated"],"number":17,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Queries for the Quarterly Updates dashboard","type":"issue","updatedAt":"2025-04-14T17:32:24Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/17"},{"author":"PaulRBerg","body":"Step-by-step instructions on what has to be done when a query is renamed on Dune.","createdAt":"2025-04-12T14:12:14Z","labels":["effort: low","priority: 1","type: docs","work: clear"],"number":16,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Add instructions for how to rename a query","type":"issue","updatedAt":"2025-04-12T14:12:14Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/16"},{"author":"PaulRBerg","body":"It looks like Dune supports Abstract and Mode chains now:\n\nhttps://docs.dune.com/data-catalog/overview\n\nSide note - can you think of any way of automating Dune listings now that we have access to the Dune API, @maxdesalle?","createdAt":"2025-04-12T14:01:38Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":15,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Add support for Abstract and Mode on Dune","type":"issue","updatedAt":"2025-04-12T18:36:54Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/15"},{"author":"PaulRBerg","body":"Fix this:\n\n<img width=\"447\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dcf2f928-e0bb-4b37-98a5-55ab54a8c139\" />","createdAt":"2025-04-11T19:41:36Z","labels":["effort: medium","priority: 0"],"number":14,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Query for calculating unique user counts between quarters","type":"issue","updatedAt":"2025-04-13T16:39:10Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/14"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-01T14:24:06Z","labels":["effort: medium","priority: 3","type: refactor","work: clear"],"number":13,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Rename queries","type":"issue","updatedAt":"2025-04-01T14:24:06Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/13"},{"author":"PaulRBerg","body":"See https://x.com/PaulRBerg/status/1881665370354020611","createdAt":"2025-03-29T12:22:25Z","labels":["effort: epic","priority: 1","type: feature","work: clear"],"number":12,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Query for tracking airdrop claim txs","type":"issue","updatedAt":"2025-07-18T08:46:27Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/12"},{"author":"PaulRBerg","body":"<img width=\"748\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/fd845673-35f1-4f3f-a14e-d861b134ec3b\" />","createdAt":"2025-03-05T19:38:56Z","labels":["effort: low","priority: 3","type: chore","work: clear"],"number":11,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Open PR upstream to use Python formatter/linter","type":"issue","updatedAt":"2025-03-05T19:38:56Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/11"},{"author":"PaulRBerg","body":"Two queries for calculating how many recipients are Safe and how many are non-Safe. Note that 'recipient' means either stream recipient or airdrop recipient.\n\n- [ ] Cumulative\n- [ ] Monthly Active (Last 12 Months)\n\nContext on [Slack](https://sablier.slack.com/archives/CSSNL10Q3/p1739796771082029).","createdAt":"2025-02-17T12:53:26Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":10,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Dune queries for calculating how many Safe users there are among recipients","type":"issue","updatedAt":"2025-07-18T08:46:53Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/10"},{"author":"PaulRBerg","body":"For Lockup, Flow, and Legacy.","createdAt":"2025-01-29T16:44:37Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":8,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Rename \"Stream Creation Data\" to just \"Data\"","type":"issue","updatedAt":"2025-04-13T16:36:54Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/8"},{"author":"PaulRBerg","body":"","createdAt":"2025-01-29T16:42:23Z","labels":["effort: medium","priority: 3","type: chore","work: clear"],"number":7,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Add PyLance for linting","type":"issue","updatedAt":"2025-01-29T16:42:23Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/7"},{"author":"PaulRBerg","body":"`version` is a reserved keyword in SQL, so we should rename it to something else (e.g. `sablier_version` or `release_version`) instead.\n\ne.g. here:\n\nhttps://github.com/sablier-labs/onchain-analytics/blob/eb62be70faa3a157e104ccb50bc1542f6ceb4d1e/queries/flow%3A_stream_creation_data___4596391.sql#L19","createdAt":"2025-01-29T15:40:08Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":6,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Rename \"version\" to something else","type":"issue","updatedAt":"2025-02-13T16:23:14Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/6"},{"author":"PaulRBerg","body":"A nitpick, but we're now using the term 'token' instead of 'asset' to refer to ERC-20s.\n\nThe best time to make the refactor is now since the queries are not live yet.","createdAt":"2025-01-29T15:39:04Z","labels":["effort: medium","priority: 2","type: refactor","work: clear"],"number":5,"repository":"sablier-labs/onchain-analytics","state":"open","title":"Rename \"asset\" to \"token\" in Dune queries","type":"issue","updatedAt":"2025-07-18T08:46:43Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/5"},{"author":"PaulRBerg","body":"","createdAt":"2025-01-29T12:42:20Z","labels":["effort: high","priority: 1","type: build","work: complicated"],"number":4,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Use Poetry for dependency management","type":"issue","updatedAt":"2025-02-05T16:31:44Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/4"},{"author":"PaulRBerg","body":"The task is to create a query for calculating how many stream withdrawals and airdrop claims were made by the recipients associated with a particular sender.\n\nThe sender address should be passed as a parameter so that we can re-run this query for all of our customers.\n\nSee:\n\n- [Final revenue model for Q1 2025](https://github.com/sablier-labs/company-discussions/discussions/100)\n- [Billing models for senders subsidizing fees for recipients](https://github.com/sablier-labs/company-discussions/discussions/101)\n","createdAt":"2025-01-28T17:30:12Z","labels":["effort: medium","priority: 0","type: feature","work: clear"],"number":3,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Query for calculating how many stream withdrawals and airdrop claims were made by the recipients associated with one or more senders","type":"issue","updatedAt":"2025-02-13T18:34:36Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/3"},{"author":"PaulRBerg","body":"Include GitHub URL to self as a comment in each query.\n\nSo that in the Dune UI, the user can quickly open the relevant query.\n\nSpecifically, we can replace these comments:\n\n```sql\n-- part of a query repo\n```\n\nWith something like:\n\n```sql\n-- GitHub URL: URL_VALUE_HERE\n```","createdAt":"2025-01-27T17:03:04Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":2,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Include GitHub URL to self as a comment in each query","type":"issue","updatedAt":"2025-01-29T16:43:34Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/2"},{"author":"PaulRBerg","body":"","createdAt":"2025-01-27T17:01:24Z","labels":["effort: low","priority: 1","type: chore","work: clear"],"number":1,"repository":"sablier-labs/onchain-analytics","state":"closed","title":"Use formatters for Python, SQL, Markdown, and TOML","type":"issue","updatedAt":"2025-01-31T15:45:53Z","url":"https://github.com/sablier-labs/onchain-analytics/issues/1"},{"author":"smol-ninja","body":"Its obvious by now.","createdAt":"2025-07-17T11:49:36Z","labels":["effort: high","priority: 2","type: test","work: clear"],"number":56,"repository":"sablier-labs/evm-utils","state":"open","title":"Add fork tests for Comptroller","type":"issue","updatedAt":"2025-07-17T11:49:36Z","url":"https://github.com/sablier-labs/evm-utils/issues/56"},{"author":"smol-ninja","body":"### References\n\n- https://docs.openzeppelin.com/contracts/5.x/api/proxy\n- https://rareskills.io/post/proxy-contract","createdAt":"2025-07-10T13:31:24Z","labels":["effort: high","priority: 0","type: feature","work: complicated"],"number":46,"repository":"sablier-labs/evm-utils","state":"closed","title":"Make Comptroller upgradeable using proxy pattern","type":"issue","updatedAt":"2025-07-25T12:30:22Z","url":"https://github.com/sablier-labs/evm-utils/issues/46"},{"author":"smol-ninja","body":"We might need to change code of salt generation in \n\nhttps://github.com/sablier-labs/evm-utils/blob/cc3a85c5cc0382bbe6c1ff460a989bea18fdfcc6/src/tests/BaseScript.sol#L78-L82","createdAt":"2025-07-10T13:25:47Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":45,"repository":"sablier-labs/evm-utils","state":"open","title":"Use fixed salt to deploy Comptroller on same address across chains","type":"issue","updatedAt":"2025-07-10T13:25:47Z","url":"https://github.com/sablier-labs/evm-utils/issues/45"},{"author":"PaulRBerg","body":"","createdAt":"2025-07-03T15:35:19Z","labels":["effort: medium","priority: 0","type: refactor","work: clear"],"number":42,"repository":"sablier-labs/evm-utils","state":"closed","title":"Rename \"IComptrollerManager\" to \"IComptrollerable\"","type":"issue","updatedAt":"2025-07-08T13:16:06Z","url":"https://github.com/sablier-labs/evm-utils/issues/42"},{"author":"PaulRBerg","body":"Refactor the setter functions so that we don't have separate `setFlow*`, `setLockup*`, etc.\n\nWe have only one `set*` function that takes a `Protocol` enum as an input.","createdAt":"2025-07-03T15:29:40Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":41,"repository":"sablier-labs/evm-utils","state":"closed","title":"DRY setters in Comptroller","type":"issue","updatedAt":"2025-07-10T13:41:11Z","url":"https://github.com/sablier-labs/evm-utils/issues/41"},{"author":"andreivladbrg","body":"As mentioned here: https://github.com/sablier-labs/flow/pull/451#discussion_r2149404837\n\nWe should split the logic from [here](https://github.com/sablier-labs/evm-utils/blob/main/src/tests/BaseTest.sol) into multiple contracts, in case we only need, for example, just the constants or some utils like `setMsgSender`.","createdAt":"2025-06-16T11:51:59Z","labels":["effort: medium","priority: 3","type: test","work: clear"],"number":36,"repository":"sablier-labs/evm-utils","state":"closed","title":"Think of a way to split the logic from `BaseTest`","type":"issue","updatedAt":"2025-07-08T11:49:30Z","url":"https://github.com/sablier-labs/evm-utils/issues/36"},{"author":"PaulRBerg","body":"So that we can get rid of this type in the Interface repo:\n\nhttps://github.com/sablier-labs/interfaces/blob/ec46fe77b1d9aa1e3af9c4efd454319450c43eef/packages/types/src/chain.ts#L15\n\nSee my [`ERC20GodMode`](https://github.com/PaulRBerg/prb-contracts/blob/16cdabc0064203568a887d5ec7554685f4b50e1f/src/token/erc20/ERC20GodMode.sol) contract.","createdAt":"2025-04-29T17:06:48Z","labels":["effort: low","priority: 3","type: feature","work: clear"],"number":26,"repository":"sablier-labs/evm-utils","state":"closed","title":"Deploy a testnet token to use for faucets at a deterministic address across chains","type":"issue","updatedAt":"2025-05-05T10:20:05Z","url":"https://github.com/sablier-labs/evm-utils/issues/26"},{"author":"smol-ninja","body":"","createdAt":"2025-04-28T09:14:58Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":25,"repository":"sablier-labs/evm-utils","state":"closed","title":"Bump forge-std to v1.9.7","type":"issue","updatedAt":"2025-05-02T12:09:33Z","url":"https://github.com/sablier-labs/evm-utils/issues/25"},{"author":"PaulRBerg","body":"The goal is to prevent hard-to-debug errors like this: https://github.com/sablier-labs/benchmarks/issues/3\n\nThe task is to provide a fork test utility that performs the following operations:\n\n```solidity\nfunction setUpMainnet() public virtual override {\n    // Fork Ethereum Mainnet at the latest block number.\n    vm.createSelectFork({ urlOrAlias: \"mainnet\" });\n\n    uint256 chainId = block.chainid;\n    if (chainId != 1) {\n        revert(\"Fork tests are only available on Ethereum Mainnet. Update your RPC URL in .env\");\n    }\n}\n```\n\nAnd then use it in all consuming repos.","createdAt":"2025-04-23T12:02:48Z","labels":["effort: low","priority: 1","type: test","work: clear"],"number":23,"repository":"sablier-labs/evm-utils","state":"closed","title":"Provide a utility for loading mainnet RPC and check if the chain ID corresponds","type":"issue","updatedAt":"2025-04-24T12:35:47Z","url":"https://github.com/sablier-labs/evm-utils/issues/23"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/430, since foundry can handle autoremappings, delete `remappings.txt` file.","createdAt":"2025-04-09T23:53:39Z","labels":["effort: low","priority: 2","type: build","work: clear"],"number":19,"repository":"sablier-labs/evm-utils","state":"closed","title":"Delete remappings.txt","type":"issue","updatedAt":"2025-04-11T19:49:45Z","url":"https://github.com/sablier-labs/evm-utils/issues/19"},{"author":"PaulRBerg","body":"Define the chain IDs Sablier on which Sablier is available so that we don't have to define them in multiple places, e.g. Airdrops:\n\nhttps://github.com/sablier-labs/airdrops/blob/41f2e742744caabd64c388a32aa6eaf26bbe4654/script/Base.sol#L11-L17\n\nPro tip - look into [`StdChains`](https://github.com/foundry-rs/forge-std/blob/6853b9ec7df5dc0c213b05ae67785ad4f4baa0ea/src/StdChains.sol).","createdAt":"2025-03-23T22:04:56Z","labels":["effort: medium","priority: 3","type: test","work: clear"],"number":16,"repository":"sablier-labs/evm-utils","state":"closed","title":"Define chain IDs to avoid duplication across EVM repos","type":"issue","updatedAt":"2025-06-22T19:30:42Z","url":"https://github.com/sablier-labs/evm-utils/issues/16"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/airdrops/discussions/110, reclassify the functions as the following:\n\nUSER-FACING / CONTRACT-INTERNAL + READ-ONLY / STATE-CHANGING + FUNCTIONS","createdAt":"2025-03-23T14:54:19Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":15,"repository":"sablier-labs/evm-utils","state":"closed","title":"Reclassify functions under new categories","type":"issue","updatedAt":"2025-04-23T14:53:31Z","url":"https://github.com/sablier-labs/evm-utils/issues/15"},{"author":"PaulRBerg","body":"I've never really liked the 'prank' terminology adopted by Foundry for setting arbitrary values for `msg.sender` when testing in Solidity.\n\nLet's rename it to [`setMsgSender`](https://github.com/sablier-labs/evm-utils/blob/bfb5b583bec459f604c96e7b73707149396e181b/src/tests/BaseTest.sol#L183-L187) so that:\n\n1. It's clear that our functionality no longer conforms to Foundry's behavior\n2. It's clearer and more intuitive in general","createdAt":"2025-03-21T20:51:01Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":13,"repository":"sablier-labs/evm-utils","state":"closed","title":"Rename \"resetPrank\" to \"setMsgSender\"","type":"issue","updatedAt":"2025-03-24T13:27:14Z","url":"https://github.com/sablier-labs/evm-utils/issues/13"},{"author":"PaulRBerg","body":"When running all tests or just all fork tests, it should be possible to avoid dumping this ugly calldata, which makes it quite difficult to see what particular function failed.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/7d0c4acf-05f0-49b7-970e-a9bf236871e4\" />","createdAt":"2025-03-20T22:01:04Z","labels":["effort: medium","priority: 3","type: test","work: complicated"],"number":17,"repository":"sablier-labs/evm-utils","state":"open","title":"More pretty logs when running fork tests","type":"issue","updatedAt":"2025-03-27T12:08:28Z","url":"https://github.com/sablier-labs/evm-utils/issues/17"},{"author":"PaulRBerg","body":"The following functionality is duplicated across the `Lockup` and the `Flow` repositories:\n\n- [ ] `aggregateAmount`\n- [x] `collectFees`\n- [ ] `nextStreamId`\n- [ ] `recover`\n- [ ] `setGasTokenAddress`\n- [ ] `updateMetadata`\n\nWhy not put it into a new shared abstract in this repo, @sablier-labs/evm?\n\nAnd then, the interfaces for `ILockupNFTDescriptor` and `IFlowNFTDescriptor` could be merged into a single interface, again part of this repository.\n\nNote: there's no need to rush this refactor into the current release if there's no time for it.","createdAt":"2025-03-14T18:40:39Z","labels":["effort: high","priority: 2","type: refactor","work: complicated"],"number":10,"repository":"sablier-labs/evm-utils","state":"open","title":"Reuse shared logic between Lockup and Flow through a new \"SablierBase\" interface/abstract","type":"issue","updatedAt":"2025-06-20T11:37:51Z","url":"https://github.com/sablier-labs/evm-utils/issues/10"},{"author":"smol-ninja","body":"Since `evm-utils` contains abstract contracts, by adding `virtual` modifier to functions and variables would allow the parent contracts to override them whenever required.","createdAt":"2025-02-12T12:33:44Z","labels":["effort: low","priority: 0","type: feature","work: clear"],"number":7,"repository":"sablier-labs/evm-utils","state":"closed","title":"Add `virtual` modifier to functions","type":"issue","updatedAt":"2025-02-20T11:33:47Z","url":"https://github.com/sablier-labs/evm-utils/issues/7"},{"author":"andreivladbrg","body":"Currently there are no tests for the [BaseScript](https://github.com/sablier-labs/evm-utils/blob/main/script/Base.s.sol) contract","createdAt":"2025-02-04T17:19:46Z","labels":["effort: medium","priority: 1","type: test"],"number":6,"repository":"sablier-labs/evm-utils","state":"closed","title":"Add BaseScript tests","type":"issue","updatedAt":"2025-02-20T11:33:47Z","url":"https://github.com/sablier-labs/evm-utils/issues/6"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/sol-utils/discussions/4, remove `SablierFees` from this repo.","createdAt":"2025-01-31T15:35:43Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":5,"repository":"sablier-labs/evm-utils","state":"closed","title":"Remove `SablierFees` from this repo","type":"issue","updatedAt":"2025-01-31T15:36:09Z","url":"https://github.com/sablier-labs/evm-utils/issues/5"},{"author":"andreivladbrg","body":"Explain why we have added this repo","createdAt":"2024-12-21T18:56:52Z","labels":[],"number":2,"repository":"sablier-labs/evm-utils","state":"closed","title":"Add a README file","type":"issue","updatedAt":"2025-01-15T13:21:50Z","url":"https://github.com/sablier-labs/evm-utils/issues/2"},{"author":"andreivladbrg","body":"","createdAt":"2024-12-21T18:56:17Z","labels":[],"number":1,"repository":"sablier-labs/evm-utils","state":"closed","title":"Fix the ci workflow","type":"issue","updatedAt":"2025-01-15T13:23:10Z","url":"https://github.com/sablier-labs/evm-utils/issues/1"},{"author":"smol-ninja","body":"As can be seen in:\n\n1. https://github.com/sablier-labs/airdrops/actions/runs/14774431107\n2. https://github.com/sablier-labs/airdrops/actions/runs/14774620558.\n\nAny tip @PaulRBerg how to debug it?","createdAt":"2025-05-01T14:57:53Z","labels":["effort: medium","priority: 0","type: bug","work: complex"],"number":40,"repository":"sablier-labs/gha-utils","state":"closed","title":"CI is skipping tests even when source code changes","type":"issue","updatedAt":"2025-05-03T07:13:47Z","url":"https://github.com/sablier-labs/gha-utils/issues/40"},{"author":"PaulRBerg","body":"## Problem\n\nThe use of the GitHub SHA commit here:\n\nhttps://github.com/sablier-labs/reusable-workflows/blob/8c5c81f46333de48280d17453512c384b5983680/.github/workflows/forge-build.yml#L44\n\nRenders the cache step ineffective across workflow runs because the cache will be regenerated on every new git commit.\n\n> [!NOTE]\n> The cache works within the same workflow run, but it doesn't work across different runs with different SHA commits (which is bad).\n\n## Solution\n\n> [!TIP]\n> `restore-keys` is not the most well-documented feature. See my answer [here](https://stackoverflow.com/a/79575296/3873510) for a simple explanation.\n\n- [ ] Add restore keys ordered from most specific to least specific\n- [ ] Use the hash of the Bun lock file, of the `foundry.toml` config file, and of all `*.sol` files","createdAt":"2025-04-15T15:43:37Z","labels":["effort: medium","priority: 0","type: feature","work: complicated"],"number":37,"repository":"sablier-labs/gha-utils","state":"closed","title":"Improve cache for Solidity build and Node.js modules","type":"issue","updatedAt":"2025-04-16T13:28:48Z","url":"https://github.com/sablier-labs/gha-utils/issues/37"},{"author":"PaulRBerg","body":"https://github.com/foundry-rs/foundry-toolchain?tab=readme-ov-file#rpc-caching","createdAt":"2025-04-15T15:38:09Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":36,"repository":"sablier-labs/gha-utils","state":"closed","title":"Explore new caching logic provided by Foundry Toolchain","type":"issue","updatedAt":"2025-04-16T14:00:46Z","url":"https://github.com/sablier-labs/gha-utils/issues/36"},{"author":"PaulRBerg","body":"The `forge-lint` workflow actually runs `bun run lint`, not `forge fmt --check`:\n\nhttps://github.com/sablier-labs/reusable-workflows/blob/8c5c81f46333de48280d17453512c384b5983680/.github/workflows/forge-lint.yml#L23-L24\n\nA better name would be something like `evm-lint`.","createdAt":"2025-04-15T15:31:38Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":35,"repository":"sablier-labs/gha-utils","state":"closed","title":"Rename \"forge-lint\" to \"evm-lint\"","type":"issue","updatedAt":"2025-04-16T13:39:21Z","url":"https://github.com/sablier-labs/gha-utils/issues/35"},{"author":"PaulRBerg","body":"The `test-optimized` profile is not meant to be used for building — it's only meant for running tests:\n\nhttps://github.com/sablier-labs/reusable-workflows/blob/8c5c81f46333de48280d17453512c384b5983680/.github/workflows/forge-build.yml#L15-L18","createdAt":"2025-04-15T14:46:57Z","labels":["effort: low","priority: 2","type: bug","work: clear"],"number":34,"repository":"sablier-labs/gha-utils","state":"closed","title":"Don't build \"test-optimized\" profile","type":"issue","updatedAt":"2025-04-15T16:17:06Z","url":"https://github.com/sablier-labs/gha-utils/issues/34"},{"author":"PaulRBerg","body":"This logic is not used anymore:\n\nhttps://github.com/sablier-labs/reusable-workflows/blob/8e479618e5f94b34e3a10543b452364df81666b3/.github/workflows/forge-build.yml#L72-L81\n\nIt's wasteful to keep in every CI run. We can bring it back later if we need it.","createdAt":"2025-04-08T11:46:21Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":29,"repository":"sablier-labs/gha-utils","state":"closed","title":"Remove artifact storing logic","type":"issue","updatedAt":"2025-04-08T18:21:31Z","url":"https://github.com/sablier-labs/gha-utils/issues/29"},{"author":"andreivladbrg","body":"We should change this:\n\nhttps://github.com/sablier-labs/reusable-workflows/blob/6d360902e343c22630ed8dfeae7a91fb1b4c13a8/.github/workflows/forge-build.yml#L63C9-L64C1\n\nAccordingly to the new path:\n\nhttps://github.com/sablier-labs/lockup/tree/staging/scripts/bash","createdAt":"2025-04-08T11:11:57Z","labels":[],"number":26,"repository":"sablier-labs/gha-utils","state":"closed","title":"Update the prepare artifacts script path","type":"issue","updatedAt":"2025-04-08T11:46:34Z","url":"https://github.com/sablier-labs/gha-utils/issues/26"},{"author":"PaulRBerg","body":"## Problem\n\nBun installs the dependencies in `~/.bun/install/cache`, from where they are [hardlinked](https://askubuntu.com/q/108771/775870) into `node_modules` (note: hardlinks != symlinks).\n\nSo we should cache the former, not the latter path.\n\nThis is what they also recommend doing in the `actions/cache` GitHub Action docs:\n\nhttps://github.com/actions/cache/blob/5a3ec84eff668545956fd18022155c47e93e2684/examples.md#bun\n\n## Solution\n\nTBD.\n\nWe need to do something in the [`forge-build`](https://github.com/sablier-labs/reusable-workflows/blob/bc4243dafe1ccf05b903e95baab30446fe84b7c4/.github/workflows/forge-build.yml#L50-L55) workflow.\n\nSee https://github.com/sablier-labs/interfaces/blob/015bd7f56840d2862252b8ff5cc74447dbbdd590/.github/actions/cache/action.yml","createdAt":"2025-04-03T16:55:43Z","labels":["priority: 1","type: bug","work: complicated"],"number":23,"repository":"sablier-labs/gha-utils","state":"closed","title":"Incorrect caching paths for Bun dependencies","type":"issue","updatedAt":"2025-04-04T19:14:06Z","url":"https://github.com/sablier-labs/gha-utils/issues/23"},{"author":"PaulRBerg","body":"## Problem\n\nWhen a PR changes neither the Foundry settings nor the Solidity code, running the build and testing CI workflows is superfluous. Here's a recent [example](https://github.com/sablier-labs/lockup/pull/1188):\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/92a86a7f-5287-4a61-aa15-b3772b1b2f77\" />\n\nThis is problematic because:\n\n1. It wastes away RPC calls.\n2. Contributors may not go through the hassle of adding an RPC key in their GitHub Actions secrets, so the CI run may be redundant anyway.\n\n## Solution\n\n- [ ] Modify all Solidity-related workflows so that they take a new boolean flag that specifies whether the code diff should be checked. By default, the diff should be checked.\n- [x] The diff should look for changes in the Foundry settings (e.g. `foundry.json`) and any folders containing Solidity code.\n     - If there had been changes, the workflow should be run.\n     - Otherwise, the workflow should be skipped.\n\nP.S. AI may be super helpful for this task.","createdAt":"2025-02-24T16:50:05Z","labels":["effort: high","priority: 2","type: perf","work: clear"],"number":18,"repository":"sablier-labs/gha-utils","state":"closed","title":"Run Solidity tests only when Foundry or Solidity things changed","type":"issue","updatedAt":"2025-04-16T13:28:48Z","url":"https://github.com/sablier-labs/gha-utils/issues/18"},{"author":"PaulRBerg","body":"I noticed these annotations in a recent CI run:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1f11faeb-248f-425c-82be-16358dc6a77e\" />\n\nSee https://github.com/actions/runner-images/issues/10636","createdAt":"2024-12-23T11:39:40Z","labels":["effort: low","priority: 2","type: build"],"number":16,"repository":"sablier-labs/gha-utils","state":"closed","title":"Upgrade to Ubuntu 24","type":"issue","updatedAt":"2024-12-24T07:00:18Z","url":"https://github.com/sablier-labs/gha-utils/issues/16"},{"author":"andreivladbrg","body":"In the [PR](https://github.com/sablier-labs/v2-core/pull/973) on `v2-core`, I’ve decided to rename the RPC URLs to `<CHAIN>_RPC_URL`.\r\n\r\nThe reason is that this approach makes it easier to order them alphabetically.\r\n\r\n","createdAt":"2024-07-17T15:50:26Z","labels":[],"number":9,"repository":"sablier-labs/gha-utils","state":"closed","title":"Rename `RPC_URL_MAINNET` to `MAINNET_RPC_URL`","type":"issue","updatedAt":"2024-07-18T13:25:54Z","url":"https://github.com/sablier-labs/gha-utils/issues/9"},{"author":"andreivladbrg","body":"It would be useful to add a list in the `README` of all repos using these workflows. This would help to know which ones need updates in case of changes made here.","createdAt":"2024-07-16T13:27:15Z","labels":["effort: low","priority: 2","type: docs"],"number":8,"repository":"sablier-labs/gha-utils","state":"closed","title":"Add a list of all the repos that are using these workflows","type":"issue","updatedAt":"2024-12-03T18:48:02Z","url":"https://github.com/sablier-labs/gha-utils/issues/8"},{"author":"andreivladbrg","body":"It would be useful if we can choose the profile we build the contracts in the [forge build workflow](https://github.com/sablier-labs/reusable-workflows/blob/main/.github/workflows/forge-build.yml)\r\n\r\nSimilar to what we do in forge test workflow:\r\n\r\nhttps://github.com/sablier-labs/reusable-workflows/blob/b9b305caf7f92f15a8cd2066f472c5a4ef1b6344/.github/workflows/forge-test.yml#L64","createdAt":"2024-04-09T21:36:55Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":7,"repository":"sablier-labs/gha-utils","state":"closed","title":"Add profile input in build workflow ","type":"issue","updatedAt":"2025-04-08T11:28:05Z","url":"https://github.com/sablier-labs/gha-utils/issues/7"},{"author":"smol-ninja","body":"Related to https://github.com/sablier-labs/v2-core/issues/812\r\n\r\nTo get rid of node warnings in the CI summary, update the following actions to use v4:\r\n- actions/cache/restore\r\n- actions/cache/save\r\n- actions/upload-artifact\r\n- codecov/codecov-action\r\n\r\n\r\n<img width=\"1286\" alt=\"Screenshot 2024-03-02 at 11 02 34\" src=\"https://github.com/sablier-labs/reusable-workflows/assets/6676622/ae972df1-741d-4aba-ac3a-bf35812912b7\">\r\n","createdAt":"2024-03-02T11:04:14Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":2,"repository":"sablier-labs/gha-utils","state":"closed","title":"Upgrade github actions to use v4","type":"issue","updatedAt":"2024-04-09T15:08:06Z","url":"https://github.com/sablier-labs/gha-utils/issues/2"},{"author":"PaulRBerg","body":"It might be useful for our V3 Rust projects to have a reusable workflow for running CI checks.\n\nExamples:\n\n- https://github.com/PaulRBerg/rust-template/blob/main/.github/workflows/ci.yml\n- https://github.com/sablier-labs/merkle-api/blob/main/.github/workflows/ci.yml","createdAt":"2024-01-11T16:59:07Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":1,"repository":"sablier-labs/gha-utils","state":"closed","title":"Rust CI workflow","type":"issue","updatedAt":"2025-04-07T10:18:17Z","url":"https://github.com/sablier-labs/gha-utils/issues/1"},{"author":"PaulRBerg","body":"We do not emit the creator of a Flow stream in the `CreateFlowStream` event, but we should do so.\n\nIf a stream is created through a safe, the `creator` is mistakenly set to `tx.origin`, which is a Safe signer, not the creator. The actual creator is the Safe multisig.","createdAt":"2025-07-18T08:30:30Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":455,"repository":"sablier-labs/flow","state":"closed","title":"Emit \"msg.sender\" in \"CreateFlowStream\"","type":"issue","updatedAt":"2025-07-19T15:07:38Z","url":"https://github.com/sablier-labs/flow/issues/455"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/lockup/issues/1257","createdAt":"2025-05-23T13:25:35Z","labels":["effort: low","work: clear","type: chore","priority: 3"],"number":447,"repository":"sablier-labs/flow","state":"open","title":"Remove Husky from \"prepare\"","type":"issue","updatedAt":"2025-05-23T13:25:35Z","url":"https://github.com/sablier-labs/flow/issues/447"},{"author":"gabrielstoica","body":"Hi!\n\nSince Sablier Flow might be integrated into other protocols as well, returning the `refundedAmount` from the `refundMax` method would be a helpful addition. This would remove the need for an extra `refundableAmountOf` call to determine the amount being refunded to the stream sender.\n\nConsider a scenario where a `SablierFlowManager` [contract](https://github.com/sablier-labs/evm-examples/blob/main/flow/FlowStreamManager.sol) is responsible for creating new streams. To enable guarded management operations (e.g., pausing or canceling), the manager contract acts as the sender (see a related discussion [here](https://github.com/sablier-labs/lockup/discussions/977)). Consequently, when a refund occurs, all funds are sent to the manager contract, which is then responsible for forwarding them to the original stream sender.\n\nCurrently, an additional `refundableAmountOf` call is required before invoking `refundMax` to know the actual amount that will be refunded by the manager contract.\n\nThis would also align with the behavior of `withdrawMax`.","createdAt":"2025-05-06T11:30:50Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":444,"repository":"sablier-labs/flow","state":"closed","title":"Return refunded amount on `refundMax` call","type":"issue","updatedAt":"2025-05-08T10:37:20Z","url":"https://github.com/sablier-labs/flow/issues/444"},{"author":"smol-ninja","body":"Similar to https://github.com/sablier-labs/lockup/issues/1224.","createdAt":"2025-04-30T20:55:36Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":442,"repository":"sablier-labs/flow","state":"closed","title":"Refactor \"FlowBase\" into \"FlowState\"","type":"issue","updatedAt":"2025-05-20T18:14:37Z","url":"https://github.com/sablier-labs/flow/issues/442"},{"author":"smol-ninja","body":"","createdAt":"2025-04-28T09:16:06Z","labels":["effort: low","priority: 2","work: clear","type: chore"],"number":441,"repository":"sablier-labs/flow","state":"closed","title":"Bump forge-std to v1.9.7","type":"issue","updatedAt":"2025-05-02T16:08:32Z","url":"https://github.com/sablier-labs/flow/issues/441"},{"author":"smol-ninja","body":"Similar to https://github.com/sablier-labs/airdrops/issues/141","createdAt":"2025-04-11T19:39:11Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":436,"repository":"sablier-labs/flow","state":"closed","title":"Role-Based Access Control","type":"issue","updatedAt":"2025-04-19T12:46:04Z","url":"https://github.com/sablier-labs/flow/issues/436"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/430, since foundry can handle autoremappings, delete `remappings.txt` file.","createdAt":"2025-04-09T23:52:53Z","labels":["effort: low","type: build","priority: 2","work: clear"],"number":433,"repository":"sablier-labs/flow","state":"closed","title":"Delete remappings.txt","type":"issue","updatedAt":"2025-04-10T21:29:58Z","url":"https://github.com/sablier-labs/flow/issues/433"},{"author":"PaulRBerg","body":"## Problem\n\nAs explained by Max [here](https://github.com/sablier-labs/command-center/discussions/119), there's a need for automating the fee management _after_ the fees are collected.\n\nAs of now, automating this process is difficult because the fees can only be collected to the admin contract, which is a multisig on some chains. On these chains, we will need to manually submit a multisig tx for bridging or selling the fees for USDC.\n\n## Solution\n\nAdd a new `to` parameter in the `collectFees` function, which would behave similarly to the `to` parameter in the stream withdraw functions:\n\n- If the `msg.sender` is the admin, allow `to` to be any address.\n- Otherwise, `to` must be the admin. If `to` is not the admin, the function should revert.","createdAt":"2025-04-01T12:51:15Z","labels":["priority: 1","effort: low","type: feature","work: clear"],"number":427,"repository":"sablier-labs/flow","state":"closed","title":"Add a \"to\" parameter in the \"collectFees\" function","type":"issue","updatedAt":"2025-04-11T15:33:19Z","url":"https://github.com/sablier-labs/flow/issues/427"},{"author":"smol-ninja","body":"[ISablierFlowBase.sol#L25](https://github.com/sablier-labs/flow/blob/staging/src/interfaces/ISablierFlowBase.sol#L25): `CollectFees` event should not index `feeAmount`. \n\nChange\n\n```solidity\n event CollectFees(address indexed admin, uint256 indexed feeAmount);\n```\n\nto\n\n```solidity\n event CollectFees(address indexed admin, uint256 feeAmount);\n```","createdAt":"2025-03-31T11:38:01Z","labels":["effort: low","type: perf","priority: 2","work: clear"],"number":424,"repository":"sablier-labs/flow","state":"closed","title":"Remove `indexed` from `feeAmount` parameter in `CollectFees` event","type":"issue","updatedAt":"2025-04-11T15:33:23Z","url":"https://github.com/sablier-labs/flow/issues/424"},{"author":"smol-ninja","body":"- [x] Remove [DIAGRAMS.md](https://github.com/sablier-labs/flow/blob/staging/DIAGRAMS.md)\n- [x] Remove [TECHNICAL-DOC.md](https://github.com/sablier-labs/flow/blob/staging/TECHNICAL-DOC.md)\n- [x] Move related content to the docs\n- [x] Move the [Invariants section](https://github.com/sablier-labs/flow/blob/staging/TECHNICAL-DOC.md#invariants) into a new `README.md` within [`tests/invariant`](https://github.com/sablier-labs/flow/tree/staging/tests/invariant) directory.","createdAt":"2025-03-28T00:46:59Z","labels":["effort: medium","priority: 2","type: docs","work: clear"],"number":421,"repository":"sablier-labs/flow","state":"closed","title":"Remove DIAGRAMS and TECHNICAL-DOC","type":"issue","updatedAt":"2025-04-12T17:29:11Z","url":"https://github.com/sablier-labs/flow/issues/421"},{"author":"smol-ninja","body":"","createdAt":"2025-03-27T12:53:01Z","labels":["effort: low","type: docs","work: clear","priority: 3"],"number":420,"repository":"sablier-labs/flow","state":"closed","title":"Update technical doc to match the invariants","type":"issue","updatedAt":"2025-04-12T17:29:29Z","url":"https://github.com/sablier-labs/flow/issues/420"},{"author":"PaulRBerg","body":"Similar to the invariant we have for Lockup:\n\nhttps://github.com/sablier-labs/lockup/blob/557dc2c4f19fdd2ad9593de20624086f6e08e3d1/tests/invariant/Invariant.t.sol#L291","createdAt":"2025-03-26T21:41:49Z","labels":["effort: low","work: clear","priority: 3","type: test"],"number":419,"repository":"sablier-labs/flow","state":"closed","title":"Implement invariant for status transitions","type":"issue","updatedAt":"2025-04-22T12:28:27Z","url":"https://github.com/sablier-labs/flow/issues/419"},{"author":"PaulRBerg","body":"The `isPaused` isn't helpful. It's outright confusing. This is the current implementation:\n\nhttps://github.com/sablier-labs/flow/blob/3e76d3665fed248f85a0a3afa2afcb96d550760e/src/abstracts/SablierFlowBase.sol#L166-L168\n\nThis ~getter~thingy basically provides an alternative definition for what 'paused' means in SablierFlow.\n\n'Paused' doesn't mean just one of the two enum statuses `PAUSED_SOLVENT` or `PAUSED_SOLVENT` — it also means the state of the RPS being zero.\n\nThat means that `isPaused` can return zero even when the stream's status is `VOIDED`.\n\nThere's really no need for this thingy. It's a very thin abstraction that does more harm than good by existing. It also complicates our invariants a lot.","createdAt":"2025-03-26T21:09:13Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":417,"repository":"sablier-labs/flow","state":"closed","title":"Remove \"isPaused\" thingy","type":"issue","updatedAt":"2025-04-22T12:25:33Z","url":"https://github.com/sablier-labs/flow/issues/417"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/airdrops/issues/131\n\nDeclare the immutables at the bottom of the `Constants` file, like so:\n\n```solidity\nabstract contract Constants {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n    \n    // Constants here\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     IMMUTABLES\n    //////////////////////////////////////////////////////////////////////////*/\n\n    // Immutables here\n}\n```","createdAt":"2025-03-26T16:45:33Z","labels":["effort: low","work: clear","priority: 3","type: test"],"number":415,"repository":"sablier-labs/flow","state":"closed","title":"Separate constants from immutables","type":"issue","updatedAt":"2025-05-01T18:49:42Z","url":"https://github.com/sablier-labs/flow/issues/415"},{"author":"PaulRBerg","body":"The new name is better because it more clearly differentiates this variable from the ERC-20 balance, which can be greater than the `aggregateAmount`, hence leading to a surplus that can be recovered by the admin.\n\nThe current name `aggregateBalance` may be misunderstood as meaning the ERC20 `balanceOf` + something else.","createdAt":"2025-03-26T13:45:09Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":414,"repository":"sablier-labs/flow","state":"closed","title":"Rename `aggregateBalance` to `aggregateAmount`","type":"issue","updatedAt":"2025-03-27T17:18:43Z","url":"https://github.com/sablier-labs/flow/issues/414"},{"author":"PaulRBerg","body":"In line with the plural terminology of `tests`.","createdAt":"2025-03-23T21:58:28Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":409,"repository":"sablier-labs/flow","state":"closed","title":"Rename \"script\" directory to \"scripts\"","type":"issue","updatedAt":"2025-03-31T12:27:34Z","url":"https://github.com/sablier-labs/flow/issues/409"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/airdrops/discussions/110, reclassify the functions as the following:\n\nUSER-FACING / CONTRACT-INTERNAL + READ-ONLY / STATE-CHANGING + FUNCTIONS","createdAt":"2025-03-23T14:54:05Z","labels":["effort: low","type: docs","work: clear","priority: 3"],"number":408,"repository":"sablier-labs/flow","state":"closed","title":"Reclassify functions under new categories","type":"issue","updatedAt":"2025-05-02T16:08:25Z","url":"https://github.com/sablier-labs/flow/issues/408"},{"author":"PaulRBerg","body":"Implement the `minimumFeeInWei` logic currently implemented in the Airdrops repo.","createdAt":"2025-03-17T20:42:14Z","labels":["priority: 1","effort: epic","type: feature","work: complicated"],"number":407,"repository":"sablier-labs/flow","state":"closed","title":"Implement minimum fee in wei","type":"issue","updatedAt":"2025-06-16T12:23:54Z","url":"https://github.com/sablier-labs/flow/issues/407"},{"author":"PaulRBerg","body":"Context here: https://github.com/sablier-labs/company-discussions/discussions/115#discussioncomment-12502839\n\n### Tasks\n- [ ] Declare `nativeToken` storage variable.\n- [x] Define `setNativeToken` only admin function\n- [x] Add it to the NatSpec of the `collectFees` function","createdAt":"2025-03-14T18:33:58Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":406,"repository":"sablier-labs/flow","state":"closed","title":"Implement `setNativeToken` setter","type":"issue","updatedAt":"2025-03-26T13:53:29Z","url":"https://github.com/sablier-labs/flow/issues/406"},{"author":"andreivladbrg","body":"### Non-informational fixes:\n\n- Use `safeTransferFrom` in `SablierFlow.transferFrom`, and consider another name to avoid collision with `ERC721.transferFrom`\n- For tokens like `POL` and `CELO`, we won't support them at the UI level\n\n### Informational fixes:\n\n- Add \"emit {MetadataUpdate}\" in all functions\n- At `ISablierFlow#L114` say \"If the total debt exceeds the stream balance, it returns 0.\"\n- `ISablierFlow.withdraw` \"/// - `to` must be the recipient if `msg.sender` is not the stream's recipient or an approved third party.\"\n- `ISablierFlow.createAndDeposit#startTime` Natspec similar to `ISablierFlow.create#startTime`\n- `Errors.SablierFlow_InvalidTokenDecimals` to: \"Thrown when trying to create a stream with a token with decimals greater than 18.\"\n- `Helpers.scale/descale`: \"`decimals` should be less than or equal to 18\"\n- Add more documentation about \"double-entry\" tokens, and update Assumptions, that these tokens are not supported.\n\n---\n\n*(For further explanations, go through each finding)*\n\n**Findings:**\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/2\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/5\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/9\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/12\n","createdAt":"2025-03-13T15:35:38Z","labels":["priority: 0","type: refactor","effort: medium","type: docs","work: clear"],"number":404,"repository":"sablier-labs/flow","state":"closed","title":"Q1 2025 audit issues","type":"issue","updatedAt":"2025-03-24T19:56:03Z","url":"https://github.com/sablier-labs/flow/issues/404"},{"author":"andreivladbrg","body":"Just realized that here we don't have a workflow for multibuild like in lockup/airdrops \n\nhttps://github.com/sablier-labs/lockup/blob/main/.github/workflows/multibuild.yml","createdAt":"2025-03-13T15:06:13Z","labels":["effort: low","work: clear","priority: 3","type: ci"],"number":402,"repository":"sablier-labs/flow","state":"closed","title":"Add `multibuild` workflow","type":"issue","updatedAt":"2025-03-13T17:14:46Z","url":"https://github.com/sablier-labs/flow/issues/402"},{"author":"smol-ninja","body":"Now that we have a separate [benchmarks repo](https://github.com/sablier-labs/benchmarks/tree/main/results) that generate and store the gas table from the mainnet deployments. We can remove unneeded [benchmark](https://github.com/sablier-labs/flow/tree/main/benchmark) code from this repo.","createdAt":"2025-02-05T13:31:54Z","labels":["effort: medium","work: clear","type: chore","priority: 3"],"number":386,"repository":"sablier-labs/flow","state":"closed","title":"Remove `benchmarks` code","type":"issue","updatedAt":"2025-02-19T23:12:56Z","url":"https://github.com/sablier-labs/flow/issues/386"},{"author":"smol-ninja","body":"`Assertions` is not using relative path to import source contracts. As a a result, the imports cannot be resolved when importing Flow using the npm package.\n\nhttps://github.com/sablier-labs/flow/blob/main/tests/utils/Assertions.sol#L6","createdAt":"2025-02-04T18:03:31Z","labels":["priority: 1","effort: low","type: build","work: clear"],"number":382,"repository":"sablier-labs/flow","state":"closed","title":"Imports source contracts using relative path in `Assertions`","type":"issue","updatedAt":"2025-02-06T17:39:34Z","url":"https://github.com/sablier-labs/flow/issues/382"},{"author":"andreivladbrg","body":"As discussed here https://github.com/sablier-labs/lockup/issues/1125, the repo is created: https://github.com/sablier-labs/evm-utils/\n\nWe will need to remove the respective logic from here.","createdAt":"2025-01-30T00:06:23Z","labels":["type: refactor","effort: medium","priority: 2","work: clear"],"number":380,"repository":"sablier-labs/flow","state":"closed","title":"Update contracts to use EVM utils repo","type":"issue","updatedAt":"2025-02-13T17:38:08Z","url":"https://github.com/sablier-labs/flow/issues/380"},{"author":"andreivladbrg","body":"Similar to lockup: https://github.com/sablier-labs/lockup/issues/1160 I think we should remove the precompiles here as well.\nIk we don't face the same issue with the libraries, but the rationale from that discussion can applied here (they are not really used in practice).","createdAt":"2025-01-28T22:14:51Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":378,"repository":"sablier-labs/flow","state":"closed","title":"Remove precompiles","type":"issue","updatedAt":"2025-02-06T17:39:25Z","url":"https://github.com/sablier-labs/flow/issues/378"},{"author":"smol-ninja","body":"Add missing fork tests in the CI, similar to https://github.com/sablier-labs/v2-core/blob/main/.github/workflows/ci-fork.yml.","createdAt":"2025-01-24T11:55:42Z","labels":["priority: 1","effort: low","work: clear","type: ci"],"number":376,"repository":"sablier-labs/flow","state":"closed","title":"Add fork tests in the GitHub workflow","type":"issue","updatedAt":"2025-02-07T12:54:11Z","url":"https://github.com/sablier-labs/flow/issues/376"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/company-discussions/discussions/97","createdAt":"2025-01-22T10:32:10Z","labels":["type: refactor","effort: medium","priority: 2","work: clear"],"number":375,"repository":"sablier-labs/flow","state":"closed","title":"Remove Broker functionality","type":"issue","updatedAt":"2025-02-10T22:15:06Z","url":"https://github.com/sablier-labs/flow/issues/375"},{"author":"andreivladbrg","body":"Add the new release in the `CHANGELOG.md`\n\n","createdAt":"2025-01-16T17:30:30Z","labels":["priority: 0","effort: low","type: docs","work: clear"],"number":372,"repository":"sablier-labs/flow","state":"closed","title":"Update CHANGELOG file with v1.1.0","type":"issue","updatedAt":"2025-01-21T15:46:35Z","url":"https://github.com/sablier-labs/flow/issues/372"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/multichain-deployer/issues/5","createdAt":"2025-01-16T13:58:56Z","labels":["priority: 1","type: refactor","effort: medium","work: clear"],"number":370,"repository":"sablier-labs/flow","state":"closed","title":"Remove the DeploymentLogger once it is implemented in multichain script","type":"issue","updatedAt":"2025-01-20T13:51:59Z","url":"https://github.com/sablier-labs/flow/issues/370"},{"author":"andreivladbrg","body":"Similar to this, we should make this change here as well\n\nhttps://github.com/sablier-labs/v2-core/issues/1142","createdAt":"2025-01-13T13:17:05Z","labels":["effort: low","work: clear","priority: 3","type: test"],"number":369,"repository":"sablier-labs/flow","state":"closed","title":"Add a struct for the stream IDs","type":"issue","updatedAt":"2025-01-14T11:35:42Z","url":"https://github.com/sablier-labs/flow/issues/369"},{"author":"andreivladbrg","body":"<div type='discussions-op-text'>\n\n<sup> Originally discussed in https://github.com/sablier-labs/flow/discussions/365 </sup>\n\nRemove the fees in the stream's token, historically referred to as 'protocol fees'.","createdAt":"2025-01-09T21:12:58Z","labels":["type: refactor","effort: medium","priority: 2","work: clear"],"number":366,"repository":"sablier-labs/flow","state":"closed","title":"Remove the fees in the stream's token (the protocol fees)","type":"issue","updatedAt":"2025-02-11T16:00:46Z","url":"https://github.com/sablier-labs/flow/issues/366"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/flow/discussions/360</sup>\n\nInclude a token transfer function (an `ERC20.transferFrom` wrapper) in the contract.\n\n```solidity\nfunction transferFrom(IERC20 token, address to, uint256 value) external payable {\n  token.transferFrom(msg.sender, to, value);\n}\n```","createdAt":"2025-01-06T12:47:52Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":361,"repository":"sablier-labs/flow","state":"closed","title":"Add an `ERC20.transferFrom` wrapper","type":"issue","updatedAt":"2025-02-12T15:01:07Z","url":"https://github.com/sablier-labs/flow/issues/361"},{"author":"smol-ninja","body":"@razgraf [proposed an idea](https://sablier.slack.com/archives/CT3NXSNMS/p1736153965028929) to include a token transfer function (an `ERC20.transfer` wrapper) in the contract. The UI can then use `batch` for transfer + create-stream actions.\n\nThe goal is to enable new use cases such as \"payroll setup + initial bonus\" where sender wants to transfer some tokens directly to the recipient while creating the stream.\n\nRFC @sablier-labs/solidity.","createdAt":"2025-01-06T09:32:52Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":359,"repository":"sablier-labs/flow","state":"closed","title":"Add an ERC20.transfer wrapper","type":"issue","updatedAt":"2025-01-06T10:25:24Z","url":"https://github.com/sablier-labs/flow/issues/359"},{"author":"PaulRBerg","body":"To keep Flow in sync with the terminology in Lockup:\n\nhttps://github.com/sablier-labs/flow/blob/356d652382ca37acc46397155b3b98a62e61ad40/src/FlowNFTDescriptor.sol#L27","createdAt":"2024-12-23T14:20:09Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":357,"repository":"sablier-labs/flow","state":"closed","title":"Say just \"stream\" instead of \"payment stream\" in NFT descriptor","type":"issue","updatedAt":"2025-02-18T16:10:05Z","url":"https://github.com/sablier-labs/flow/issues/357"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/v2-core/issues/1124.","createdAt":"2024-12-21T08:19:50Z","labels":["priority: 1","type: refactor","effort: low","type: feature","work: clear"],"number":354,"repository":"sablier-labs/flow","state":"closed","title":"Important adjustments to the batch function","type":"issue","updatedAt":"2025-01-06T12:57:18Z","url":"https://github.com/sablier-labs/flow/issues/354"},{"author":"smol-ninja","body":"From [Akshat's tweet](https://x.com/iakshatmittal/status/1870114989924606450?s=46&t=VYM6cpSayUkPRiVfjoKB-Q):\n\nIt would be a good idea to include index in BatchError in order to trace down the failing call.\n\nRegarding return value, I am not sure how could that be useful. Let me know your thoughts on this.\n\ncc @sablier-labs/solidity ","createdAt":"2024-12-20T18:52:29Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":353,"repository":"sablier-labs/flow","state":"closed","title":"Revert BatchError with index","type":"issue","updatedAt":"2024-12-21T08:21:27Z","url":"https://github.com/sablier-labs/flow/issues/353"},{"author":"PaulRBerg","body":"Add a new function `createWithTimestamp` or `createWithStartTime` (name TBD) that enables users to create a stream with a snapshot time either in the past or the future.\n\nNote that as discussed in https://github.com/sablier-labs/flow/discussions/364, this feature requires getting rid of the $\\text{snapshot time} \\le \\text{block time}$ invariant.\n\nAs indicated by Derek below, this feature would be a super useful feature:\n\n<img src=\"https://github.com/user-attachments/assets/f45371fe-6d1f-4d3e-ae91-bc2d4ff5390b\"/>\n","createdAt":"2024-12-18T13:11:24Z","labels":["effort: high","priority: 1","type: feature","work: clear"],"number":351,"repository":"sablier-labs/flow","state":"closed","title":"Create stream with the snapshot time in the past or the future","type":"issue","updatedAt":"2025-02-21T15:36:49Z","url":"https://github.com/sablier-labs/flow/issues/351"},{"author":"PaulRBerg","body":"Vercel recommends **against** using a reverse proxy because it can lead to doubly cached data and it can make anti-DDoS protection more difficult.\n\n- [Can I use a proxy on top of my Vercel Deployment?](https://vercel.com/guides/can-i-use-a-proxy-on-top-of-my-vercel-deployment)\n- [Should I use Cloudflare in front of Vercel?](https://vercel.com/guides/cloudflare-with-vercel)","createdAt":"2025-08-12T13:12:52Z","labels":["work: complicated","effort: medium","priority: 1","scope: devops"],"number":185,"repository":"sablier-labs/command-center","state":"open","title":"Migrate domain from Cloudflare to Vercel","type":"issue","updatedAt":"2025-08-12T13:12:52Z","url":"https://github.com/sablier-labs/command-center/issues/185"},{"author":"PaulRBerg","body":"Heard many good things about it\n\nhttps://www.coderabbit.ai","createdAt":"2025-08-11T15:58:18Z","labels":["priority: 2","work: complicated","effort: medium","scope: devops"],"number":184,"repository":"sablier-labs/command-center","state":"open","title":"Try CodeRabbit AI reviews","type":"issue","updatedAt":"2025-08-11T15:58:18Z","url":"https://github.com/sablier-labs/command-center/issues/184"},{"author":"smol-ninja","body":"Modify EVM CIs such that it can re-run a failed job in case of Fork tests. This will be important as many a times, the fork CIs fail due to some RPC errors and then are required to rerun manually.","createdAt":"2025-08-06T15:09:47Z","labels":["scope: evm","work: complicated","effort: medium","priority: 1"],"number":183,"repository":"sablier-labs/command-center","state":"open","title":"Re-run a failed fork test CI automatically","type":"issue","updatedAt":"2025-08-06T15:10:07Z","url":"https://github.com/sablier-labs/command-center/issues/183"},{"author":"PaulRBerg","body":"## Problem\n\nWhen asking LLMs for business advice, it's helpful to provide all active GitHub issues and discussions as context.\n\nThe issue is that we don't have any way to quickly index all issues/discussions in a single Markdown file.\n\n## Solution\n\n[Repomix](https://repomix.com/) all GitHub issues/discussions so that we can pick LLMs' brains on Sablier's business trajectory.\n\n> [!NOTE]\n> We don't necessarily have to use Repomix. I just used it as a verb because it was fitting here.","createdAt":"2025-08-04T13:34:53Z","labels":["work: complicated","scope: data","effort: medium","priority: 1"],"number":181,"repository":"sablier-labs/command-center","state":"closed","title":"Repomix all GitHub issues and discussions","type":"issue","updatedAt":"2025-08-14T17:49:59Z","url":"https://github.com/sablier-labs/command-center/issues/181"},{"author":"smol-ninja","body":"[forge-std](https://github.com/foundry-rs/forge-std/releases) just got a new release. Following new changes are relevant to us:\n\n1. EIP-712 cheatcodes for thorough testing `claimViaSig` in airdrops (see [this issue](https://github.com/sablier-labs/airdrops/issues/167) as well)\n2. That's it.","createdAt":"2025-07-31T12:57:01Z","labels":["effort: low","priority: 2","scope: evm","work: clear"],"number":180,"repository":"sablier-labs/command-center","state":"closed","title":"Bump forge-std to v1.10.0","type":"issue","updatedAt":"2025-08-15T23:29:29Z","url":"https://github.com/sablier-labs/command-center/issues/180"},{"author":"PaulRBerg","body":"https://graphite.dev/","createdAt":"2025-07-25T10:02:08Z","labels":["priority: 3","work: complicated","effort: medium","scope: devops"],"number":178,"repository":"sablier-labs/command-center","state":"open","title":"Check out Graphite MCP","type":"issue","updatedAt":"2025-07-25T10:02:08Z","url":"https://github.com/sablier-labs/command-center/issues/178"},{"author":"PaulRBerg","body":"- [ ] HTTP-based MCP server that fetches info from the docs and the SDK\n- [ ] Tools for querying information about streams\n- [ ] Redis for caching responses\n\nSee:\n\n- https://chatgpt.com/share/689e11a0-f1e0-800e-99e7-e452ee96005a\n- github.com/solana-foundation/solana-mcp-official\n- https://github.com/vercel/mcp-adapter","createdAt":"2025-07-25T10:00:20Z","labels":["effort: high","priority: 2","work: complicated","scope: devops"],"number":177,"repository":"sablier-labs/command-center","state":"open","title":"Sablier MCP server","type":"issue","updatedAt":"2025-08-15T12:08:12Z","url":"https://github.com/sablier-labs/command-center/issues/177"},{"author":"PaulRBerg","body":"So that we centralize all BUSL grants in a single subname. At the moment, the records are in `lockup-license-grants.sablier.eth`.\n\nNote: we will still keep the records in the existing subname. The task is strictly to add the records in the new subdomain, as well as update the URLs in the grant, e.g. instead of `v2-core`, mention the `lockup` repository.","createdAt":"2025-07-23T08:45:18Z","labels":["priority: 3","effort: low","scope: evm","work: clear"],"number":176,"repository":"sablier-labs/command-center","state":"closed","title":"Add BUSL license grant records to ENS subname `license-grants.sablier.eth`","type":"issue","updatedAt":"2025-07-23T21:22:04Z","url":"https://github.com/sablier-labs/command-center/issues/176"},{"author":"PaulRBerg","body":"Product built by one of our investors: https://radar.x23.ai\n\n<img width=\"692\" height=\"231\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/be829bb5-1d79-4bbd-9f2e-e3d5e5c36910\" />\n\n[arbitrum_arbitrum_2025_navigating_growth_governance_and_ecosystem.pdf](https://github.com/user-attachments/files/21349784/arbitrum_arbitrum_2025_navigating_growth_governance_and_ecosystem.pdf)\n","createdAt":"2025-07-21T14:05:53Z","labels":["priority: 3","scope: other"],"number":174,"repository":"sablier-labs/command-center","state":"open","title":"Check out Radar x23","type":"issue","updatedAt":"2025-07-21T14:54:49Z","url":"https://github.com/sablier-labs/command-center/issues/174"},{"author":"PaulRBerg","body":"- https://github.com/sablier-labs/airdrops\n- https://github.com/sablier-labs/evm-utils\n- https://github.com/sablier-labs/lockup\n- https://github.com/sablier-labs/flow\n- https://github.com/sablier-labs/staking","createdAt":"2025-07-16T13:47:26Z","labels":["effort: high","priority: 2","scope: evm","work: complicated"],"number":173,"repository":"sablier-labs/command-center","state":"open","title":"Move to a monorepo structure for the EVM repos","type":"issue","updatedAt":"2025-07-16T13:47:26Z","url":"https://github.com/sablier-labs/command-center/issues/173"},{"author":"PaulRBerg","body":"Protect Main Branch, etc.\n\nRulesets can be downloaded as JSON files.","createdAt":"2025-07-15T05:29:22Z","labels":["priority: 3","effort: low","work: clear","scope: devops"],"number":172,"repository":"sablier-labs/command-center","state":"open","title":"Repository with basic GitHub rulesets","type":"issue","updatedAt":"2025-07-15T05:29:22Z","url":"https://github.com/sablier-labs/command-center/issues/172"},{"author":"smol-ninja","body":"[Routeme](https://routeme.sh/) follows the following standard for constructing the RPC endpoints:\n\n```\nhttps://alpha.router.0xarc.io/rpc/${CHAIN_ID}/${ROUTEME_API_KEY}\n```\n\nSince they support all networks, we should replace all RPC endpoints in `foundry.toml` file with Routeme. \n\n### Affected repos\n1. https://github.com/sablier-labs/lockup\n2. https://github.com/sablier-labs/airdrops/\n3. https://github.com/sablier-labs/flow/\n4. https://github.com/sablier-labs/staking/\n5. https://github.com/sablier-labs/evm-utils","createdAt":"2025-07-14T14:14:25Z","labels":["effort: low","scope: evm","priority: 1","work: clear"],"number":170,"repository":"sablier-labs/command-center","state":"open","title":"Use Routeme RPC endpoints in `foundry.toml`","type":"issue","updatedAt":"2025-07-14T18:45:58Z","url":"https://github.com/sablier-labs/command-center/issues/170"},{"author":"PaulRBerg","body":"Envio could be used for this.","createdAt":"2025-07-09T11:05:57Z","labels":["priority: 3","effort: low","scope: data","work: clear"],"number":169,"repository":"sablier-labs/command-center","state":"open","title":"Set a Slack channel with notifications on deposits greater than $10k","type":"issue","updatedAt":"2025-07-17T13:22:25Z","url":"https://github.com/sablier-labs/command-center/issues/169"},{"author":"PaulRBerg","body":"## Task\n\nThe task is to vibe-code a TOV dashboard using Cursor and Claude Sonnet 4.0.\n\n### Data Source\n\nFor the data source, let's use OpenOcean. See the TG chat - they've provided us with an API key.\n\n```text\nAPI Key:\nAcy5ZUq6ZbiRBGnNAdrF9yc8tt2rfpcq\n\nPro Endpoint: \nhttps://open-api-pro.openocean.finance\n```\n\n```js\nvar request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'https://open-api-pro.openocean.finance/v3/8453/quote?amount=0.00001&gasPrice=0.004583062&inTokenAddress=0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee&outTokenAddress=0x28fe69ff6864c1c218878bdca01482d36b9d57b1&slippage=0.5',\n  'headers': {\n    'apikey': 'Acy5ZUq6ZbiRBGnNAdrF9yc8tt2rfpcq',\n    'Content-Type': 'application/json'\n  },\n```\n\n## References\n\n- [Original thread](https://x.com/PaulRBerg/status/1715436588438520204)\n- [ETHCluj 2025 talk](https://x.com/PaulRBerg/status/1942898029171810494)\n\n## Notes\n\n@maxdesalle if you end up building this:\n\n- Subscribe to Cursor Pro (monthly)\n- Use BiomeJS, Next.js and the styling guide used in [this repo](https://github.com/sablier-labs/pricing-slider) - also see this: https://github.com/sablier-labs/command-center/issues/167","createdAt":"2025-07-09T10:59:52Z","labels":["effort: high","priority: 2","work: complicated","scope: data"],"number":168,"repository":"sablier-labs/command-center","state":"open","title":"Vibe-code a TOV dashboard","type":"issue","updatedAt":"2025-07-09T10:59:52Z","url":"https://github.com/sablier-labs/command-center/issues/168"},{"author":"PaulRBerg","body":"## Stack\n\n- Biome\n- Next.js\n- Prettier (for Markdown and YAML)\n- [Sablier DevKit](https://github.com/sablier-labs/devkit)\n- Tailwind CSS\n- Vercel\n\n## Example\n\n https://github.com/sablier-labs/pricing-slider","createdAt":"2025-07-09T10:56:38Z","labels":["effort: medium","priority: 1","work: clear","scope: devops"],"number":167,"repository":"sablier-labs/command-center","state":"open","title":"Template repo for vibe-coded UIs","type":"issue","updatedAt":"2025-07-09T10:56:54Z","url":"https://github.com/sablier-labs/command-center/issues/167"},{"author":"PaulRBerg","body":"A project started by one of our angel investors (Kerman Kohli):\n\nhttps://routeme.sh/\n\nA zero-config RPC abstraction layer — they route toward Infura, Alchemy, other public RPCs, without using managing any API keys.\n\nWhere to use it:\n\n- Indexers\n- Interfaces\n- Solidity fork testing (maybe, TBD if fork testing is supported)","createdAt":"2025-07-07T14:00:08Z","labels":["priority: 2","work: complicated","effort: medium","scope: devops"],"number":166,"repository":"sablier-labs/command-center","state":"closed","title":"Try RouteMesh (zero-config RPC abstraction later)","type":"issue","updatedAt":"2025-07-14T18:46:38Z","url":"https://github.com/sablier-labs/command-center/issues/166"},{"author":"smol-ninja","body":"The [new version](https://github.com/protofire/solhint/releases/tag/v6.0.0) contains many new improvements and features that we requested.\n\n1. Introduced `cache` (https://github.com/protofire/solhint/issues/661)\n2. Multiple config files (https://github.com/protofire/solhint/issues/359)\n3. Several new rules.","createdAt":"2025-07-04T19:07:46Z","labels":["priority: 2","scope: evm","effort: medium","work: clear"],"number":165,"repository":"sablier-labs/command-center","state":"closed","title":"Bump Solhint to v6.0.0","type":"issue","updatedAt":"2025-07-24T12:34:18Z","url":"https://github.com/sablier-labs/command-center/issues/165"},{"author":"PaulRBerg","body":"See @maxdesalle's 1st point here:\n\nhttps://github.com/sablier-labs/command-center/discussions/148","createdAt":"2025-07-04T14:49:53Z","labels":["effort: low","scope: evm","work: complicated","priority: 1"],"number":164,"repository":"sablier-labs/command-center","state":"open","title":"Investigate how it works when USDC is used for paying gas fees","type":"issue","updatedAt":"2025-08-06T08:58:45Z","url":"https://github.com/sablier-labs/command-center/issues/164"},{"author":"PaulRBerg","body":"","createdAt":"2025-06-23T19:23:00Z","labels":["effort: low","priority: 2","work: clear","scope: devops"],"number":163,"repository":"sablier-labs/command-center","state":"open","title":"Solution for sharing env vars","type":"issue","updatedAt":"2025-06-23T20:47:48Z","url":"https://github.com/sablier-labs/command-center/issues/163"},{"author":"PaulRBerg","body":"https://docs.cursor.com/slack","createdAt":"2025-06-20T14:23:54Z","labels":["effort: low","priority: 2","scope: other","work: clear"],"number":162,"repository":"sablier-labs/command-center","state":"open","title":"Integrate Cursor in Slack","type":"issue","updatedAt":"2025-06-20T14:23:54Z","url":"https://github.com/sablier-labs/command-center/issues/162"},{"author":"smol-ninja","body":"See discussion at https://github.com/sablier-labs/command-center/discussions/160.\n\n### Todo\n\n- [x] Change `bytecode_hash` value from `none` to `ipfs`\n- [x] Add a new Just recipe (not sure if we will need it but it might come handy) in `devkit` (suggestion for names welcome)\n\n```Justfile\nbuild-optimized-metadata:\n    FOUNDRY_PROFILE=optimized forge build --extra-output-files metadata\n```\n\nLets do it before the next deployment.","createdAt":"2025-06-19T12:07:50Z","labels":["effort: low","scope: evm","priority: 1","work: clear"],"number":161,"repository":"sablier-labs/command-center","state":"closed","title":"Set `bytecode_hash` to `ipfs` in all EVM repos","type":"issue","updatedAt":"2025-07-13T17:55:47Z","url":"https://github.com/sablier-labs/command-center/issues/161"},{"author":"PaulRBerg","body":"Raycast's GitHub plugin is great but it only works for public repositories:\n\nhttps://github.com/raycast/extensions/issues/18479","createdAt":"2025-06-12T10:57:38Z","labels":["priority: 2","work: complicated","effort: medium","scope: other"],"number":159,"repository":"sablier-labs/command-center","state":"closed","title":"Figure out a way to search issues and discussions in all GitHub repos, including private ones","type":"issue","updatedAt":"2025-08-15T07:27:18Z","url":"https://github.com/sablier-labs/command-center/issues/159"},{"author":"PaulRBerg","body":"Explained here: https://github.com/sablier-labs/lockup/pull/1254#issuecomment-2913576244","createdAt":"2025-06-10T13:16:21Z","labels":["effort: low","priority: 2","work: complicated","scope: other"],"number":157,"repository":"sablier-labs/command-center","state":"closed","title":"Generalize vscode-setup repo into a team-wide config","type":"issue","updatedAt":"2025-06-16T09:44:27Z","url":"https://github.com/sablier-labs/command-center/issues/157"},{"author":"PaulRBerg","body":"## Problem\n\nThe GraphQL fragments are duplicated between the Interfaces and the Indexers repos:\n\n- https://github.com/sablier-labs/indexers/blob/4ad8eaf87d6f62ccdf98ba2a4b260ec6a8ecb830/apps/flow-envio/test/setup/fragments.ts\n- https://github.com/sablier-labs/interfaces/blob/ed5b8da4063b24d34779e4b2303d0527f2eedc7d/packages/subgraphs/src/documents/flow/fragments.ts\n\n## Solution\n\n- [ ] In Indexers, generate the fragments and export them to a `@sablier/indexers` package\n- [ ] In Interfaces, import `@sablier/indexers`\n\n---\n\ncc @sablier-labs/frontend","createdAt":"2025-05-28T11:12:58Z","labels":["effort: high","scope: frontend","priority: 2","work: clear"],"number":153,"repository":"sablier-labs/command-center","state":"closed","title":"DRY-ify GraphQL fragments between Indexers and Interfaces","type":"issue","updatedAt":"2025-07-11T13:32:07Z","url":"https://github.com/sablier-labs/command-center/issues/153"},{"author":"PaulRBerg","body":"Just like https://github.com/sablier-labs/benchmarks/issues/9 but for the fork tests in the EVM repo.","createdAt":"2025-05-23T12:27:45Z","labels":["priority: 2","scope: evm","effort: medium","work: clear"],"number":152,"repository":"sablier-labs/command-center","state":"open","title":"Load mainnet addresses from deployments package in all EVM repos with fork tests","type":"issue","updatedAt":"2025-05-23T12:27:45Z","url":"https://github.com/sablier-labs/command-center/issues/152"},{"author":"PaulRBerg","body":"Context: [Just](https://github.com/casey/just) is a neat command runner that I've been playing with recently. It's like [Makefile](https://makefiletutorial.com/) but with a nice, modern syntax.\n\nThere's a problem in the EVM repos — a lot of configuration is duplicated, specifically the scripts in the `package.json` file.\n\nIf we switch to Just, we can use the [shared configs repo](https://github.com/sablier-labs/command-center/issues/149) to define the EVM scripts in a single place. It will be possible to extend the `justfile` with custom scripts for each repository.\n\nI will handle this task myself. Tagging you FYI @sablier-labs/evm.","createdAt":"2025-05-22T11:26:24Z","labels":["effort: low","priority: 2","work: clear","scope: devops"],"number":151,"repository":"sablier-labs/command-center","state":"closed","title":"Replace package.json scripts with Just shared config to reduce cross-repository duplication","type":"issue","updatedAt":"2025-06-13T12:30:30Z","url":"https://github.com/sablier-labs/command-center/issues/151"},{"author":"PaulRBerg","body":"This is a task that touches the Interfaces, the Indexers, and the Deployments package.\n\nLet's hold off with implementing this until the new Deployments package is used everywhere in our stack.\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0bc731c8-8ccf-493a-b234-7f221971522d\" />","createdAt":"2025-05-13T19:35:02Z","labels":[],"number":150,"repository":"sablier-labs/command-center","state":"closed","title":"Drop support for Taiko","type":"issue","updatedAt":"2025-08-11T15:10:50Z","url":"https://github.com/sablier-labs/command-center/issues/150"},{"author":"PaulRBerg","body":"a package called `@sablier/configs`\n\ne.g. for Biome: [Share a configuration file](https://biomejs.dev/guides/configure-biome/#share-a-configuration-file)","createdAt":"2025-05-01T14:33:14Z","labels":["priority: 3","effort: low","scope: other","work: clear"],"number":149,"repository":"sablier-labs/command-center","state":"closed","title":"Provide a repo with shared configs","type":"issue","updatedAt":"2025-07-11T13:35:39Z","url":"https://github.com/sablier-labs/command-center/issues/149"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-24T06:15:24Z","labels":["effort: low","priority: 2","scope: evm","work: clear"],"number":146,"repository":"sablier-labs/command-center","state":"closed","title":"Bump OpenZeppelin dependency to v5.3.0","type":"issue","updatedAt":"2025-05-05T10:09:27Z","url":"https://github.com/sablier-labs/command-center/issues/146"},{"author":"PaulRBerg","body":"## Problem\n\nWhen there is a bug in the create stream form, we lose a lot of users, and this has a severe negative impact on our business.\n\nBut at the moment, we don't have an automated way of knowing when bugs occur in the create stream form — we rely on user reports, and users may be lazy, may not be good with English, or may not know how to contact us.\n\n## Solution\n\nSet up an email-based monitoring system that:\n\n1. Listens to errors as they are sent to Sentry.\n2. Filters the errors thrown in the create stream form, especially after the \"Create\" button is clicked (will let you @sablier-labs/frontend say if this requires introducing a new error class in the UI code).\n3. If a critical error is found, notify the @sablier-labs/frontend team via email.\n\n**What critical means**: to begin with, we can define critical errors as those reported in the create stream form when the \"Create\" button is clicked.\n\n> [!TIP]\n> Zapier might be useful here.","createdAt":"2025-04-17T18:13:20Z","labels":["scope: frontend","work: complicated","priority: 1"],"number":145,"repository":"sablier-labs/command-center","state":"open","title":"Email alerts for critical errors reported on Sentry","type":"issue","updatedAt":"2025-06-18T10:56:18Z","url":"https://github.com/sablier-labs/command-center/issues/145"},{"author":"PaulRBerg","body":"## Problem\n\n- [ ] @maxdesalle writes an article\n- [ ] Max asks @razgraf to design a custom cover\n- [ ] As a result, there's context switch for both Max and Razvan\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d88d5966-1ef3-47b5-97f6-1826aec8abbd\" />\n\n## Solution\n\nThere must be some sort of AI-based design tool that can be:\n\n1. Trained on all of our articles' covers\n2. Integrated with Slack (or used via a UI) for generating covers without requiring @razgraf's intervention\n\n> [!NOTE]\n> This tool is guaranteed to not work for complex use cases, but it should be helpful for SEO and simple marketing updates.","createdAt":"2025-04-14T11:38:29Z","labels":["scope: marketing","effort: low","priority: 2","work: complicated"],"number":144,"repository":"sablier-labs/command-center","state":"open","title":"AI design tool for automating article cover generation","type":"issue","updatedAt":"2025-04-14T11:38:41Z","url":"https://github.com/sablier-labs/command-center/issues/144"},{"author":"PaulRBerg","body":"There are many assumptions that are identical across Airdrops, Flow, and Lockup, e.g. rebase tokens not supported.\n\n- https://github.com/sablier-labs/airdrops/blob/f55d355859b2239632aba5931a8484f39de207c5/SECURITY.md\n- https://github.com/sablier-labs/lockup/blob/13750cac0f4cb4cc2edb98f5881fcf02d6bf5d08/SECURITY.md\n- https://github.com/sablier-labs/flow/blob/ba0d774eeb6827e5109ae790407cdc69431e0fa6/SECURITY.md","createdAt":"2025-04-12T13:21:50Z","labels":["priority: 3","effort: low","scope: evm","work: clear"],"number":143,"repository":"sablier-labs/command-center","state":"open","title":"Move shared assumptions in the Notion-hosted bug bounty","type":"issue","updatedAt":"2025-04-12T13:21:50Z","url":"https://github.com/sablier-labs/command-center/issues/143"},{"author":"PaulRBerg","body":"- [ ] UI\n- [ ] APIs\n- [ ] Subgraphs\n\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/1422\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** February  5, 2025</sup>\nPotential vendors for this:\n\n- https://status.atlassian.com/\n- https://status.io/\n- https://manage.statuspage.io/login</div>","createdAt":"2025-04-10T11:06:57Z","labels":["effort: high","priority: 1","work: clear","scope: integrations"],"number":142,"repository":"sablier-labs/command-center","state":"open","title":"Status page for tracking downtime","type":"issue","updatedAt":"2025-04-10T11:06:57Z","url":"https://github.com/sablier-labs/command-center/issues/142"},{"author":"PaulRBerg","body":"The task is to create a new Safe multisig with the same address across all chains where Safe is available, in order to use it as the new protocol admin in upcoming protocol releases.\n\nNote that this task is solely about setting up the Safe. We can decide later if we wish to transfer the admin in the existing protocols or not.\n\n> [!IMPORTANT]\n> The signers should be the same as in the current admins.","createdAt":"2025-04-09T15:27:44Z","labels":["effort: low","scope: evm","priority: 1","work: clear"],"number":140,"repository":"sablier-labs/command-center","state":"closed","title":"Set up a new protocol admin Safe multisig with a deterministic address","type":"issue","updatedAt":"2025-04-09T22:47:54Z","url":"https://github.com/sablier-labs/command-center/issues/140"},{"author":"PaulRBerg","body":"See https://github.com/sablier-labs/lockup/discussions/1229#discussioncomment-12657286","createdAt":"2025-04-09T08:54:59Z","labels":["priority: 3","effort: low","scope: evm","work: clear"],"number":139,"repository":"sablier-labs/command-center","state":"closed","title":"Open issue in Foundry repo to explain the fork test event logs problem","type":"issue","updatedAt":"2025-04-21T18:36:50Z","url":"https://github.com/sablier-labs/command-center/issues/139"},{"author":"PaulRBerg","body":"We can use [GitHub Actions variables](https://graphite.dev/guides/github-actions-variables) for storing public RPC URLs.\n\nThis would be useful for repositories like EVM Token List, where we currently declare the RPC URLs like so:\n\nhttps://github.com/sablier-labs/evm-token-list/blob/a60a8fb0f24b925ca0e3ff65255e300151229d43/.env.example","createdAt":"2025-04-08T18:23:48Z","labels":["priority: 2","effort: medium","scope: other","work: clear"],"number":138,"repository":"sablier-labs/command-center","state":"closed","title":"Store public RPC URLs in GitHub Actions variables","type":"issue","updatedAt":"2025-04-09T07:14:13Z","url":"https://github.com/sablier-labs/command-center/issues/138"},{"author":"PaulRBerg","body":"## Problem\n\nWe have various customers (e.g., Fluid) who have decided to subsidize the claim fees for their users.\n\nThis is how our [billing model](https://github.com/sablier-labs/command-center/discussions/100) works at the moment:\n\n- Charge a minimum $200 fee, which grants up to 200 claim txs.\n- We track the usage on a monthly basis, and if the quota was exceeded, we send an invoice.\n- At the moment, tracking the usage is a manual process.\n\n## Solution\n\nWrite a script that uses the Dune API to query @maxdesalle's [Usage Tracker](https://dune.com/sablier/usage-tracker) and generate a report (in a format like Markdown) with the customers that have exceeded their quota.\n\nAlternatively, if the Dune API is difficult to work with, the logic in the Usage Tracker should be reimplemented in the script itself.","createdAt":"2025-04-07T13:29:43Z","labels":["effort: high","priority: 2","scope: data","work: clear"],"number":137,"repository":"sablier-labs/command-center","state":"closed","title":"Script for tracking billing quotas for sender subsidies","type":"issue","updatedAt":"2025-08-13T20:22:01Z","url":"https://github.com/sablier-labs/command-center/issues/137"},{"author":"PaulRBerg","body":"Merge the following Notion sites into a single Notion site:\n\n- [Sablier Lockup vs Competitors](https://www.notion.so/sablier/Sablier-Lockup-VS-Competitors-16e6105ad8b680d8af62c137f9e8063c)\n- [Sablier Flow vs Competitors](https://www.notion.so/sablier/Sablier-Flow-VS-Competitors-1f391c08c6d14c3c843acdcef659e41a?utm_content=1f391c08-c6d1-4c3c-843a-cdcef659e41a&utm_campaign=TNYCNUWE9&pvs=6)","createdAt":"2025-03-31T12:35:06Z","labels":["priority: 2","effort: medium","scope: business","work: clear"],"number":134,"repository":"sablier-labs/command-center","state":"closed","title":"Merge competitor analyses into a single document","type":"issue","updatedAt":"2025-04-30T20:16:42Z","url":"https://github.com/sablier-labs/command-center/issues/134"},{"author":"PaulRBerg","body":"## Problem\n\nThere are many repos in which we have replaced CI checks with a `husky` + `lint-staged` setup in which we run the `fix` script to fix any linting or formatting issues.\n\nThe problem is that results into longer commit times, and wasteful executions.\n\n## Solution\n\nUse the `--cache` and `--cache-location` functionality to cache the Prettier, ESLint, etc., linting.\n\nSee how we use it in the Interfaces repo: https://github.com/sablier-labs/interfaces/blob/cffd48edfb41ca8615df2f6bb9bba6241821059a/packages/components/package.json#L75-L87","createdAt":"2025-03-30T10:03:47Z","labels":["effort: low","priority: 2","scope: other","work: clear"],"number":133,"repository":"sablier-labs/command-center","state":"closed","title":"Use cache when running husky and lint-staged","type":"issue","updatedAt":"2025-04-08T20:06:33Z","url":"https://github.com/sablier-labs/command-center/issues/133"},{"author":"PaulRBerg","body":"","createdAt":"2025-03-29T12:29:12Z","labels":["scope: marketing","effort: high","priority: 2","work: clear"],"number":132,"repository":"sablier-labs/command-center","state":"open","title":"Research on vesting airdrop performance compared to instant airdrops","type":"issue","updatedAt":"2025-03-29T12:29:12Z","url":"https://github.com/sablier-labs/command-center/issues/132"},{"author":"PaulRBerg","body":"It would be helpful to go back to all Sablier contracts and name them according to [package tethering](https://github.com/sablier-labs/lockup/issues/808).\n\nFor example, [this contract](https://etherscan.io/address/0xAFb979d9afAd1aD27C5eFf4E27226E3AB9e5dCC9) is currently tagged `Sablier : V2 Lockup Linear`, but it should be tagged `LockupLinear V1.1.2`.\n\nAnd [this contract](https://etherscan.io/address/0x3962f6585946823440d274aD7C719B02b49DE51E) is currently tagged `SablierV2 : LockupLinear`, but it should be named `LockupLinear v1.2.0`","createdAt":"2025-03-29T12:25:29Z","labels":["priority: 3","effort: high","scope: evm","work: clear"],"number":131,"repository":"sablier-labs/command-center","state":"open","title":"Rename public tags on Etherscan after package tethering","type":"issue","updatedAt":"2025-04-04T14:31:08Z","url":"https://github.com/sablier-labs/command-center/issues/131"},{"author":"PaulRBerg","body":"- [x]  [DeFiLlama](https://defillama.com/protocol/sablier)](https://defillama.com/protocol/sablier) (see [[DeFiLlama Updates for package tethering](https://www.notion.so/DeFiLlama-Updates-for-package-tethering-1636105ad8b680938292cc27c5199741?pvs=21)\n- [x]  [Dune dashboards](https://dune.com/discover/content/relevant?q=author:sablier&resource-type=dashboards)\n- [x]  [Dune queries](https://github.com/sablier-labs/onchain-analytics)\n- [ ]  [Etherscan NFT collections](https://etherscan.io/token/0xb10daee1fcf62243ae27776d7a92d39dc8740f95)\n- [ ]  OpenSea collections","createdAt":"2025-03-29T12:21:02Z","labels":["priority: 3","effort: high","work: clear","scope: integrations"],"number":130,"repository":"sablier-labs/command-center","state":"open","title":"Update integrations in light of Package Tethering","type":"issue","updatedAt":"2025-07-16T13:37:43Z","url":"https://github.com/sablier-labs/command-center/issues/130"},{"author":"PaulRBerg","body":"See [Explore](https://x.com/dwr/status/1823018728747069538).","createdAt":"2025-03-29T12:18:53Z","labels":["priority: 3","effort: high","work: clear","scope: integrations"],"number":129,"repository":"sablier-labs/command-center","state":"open","title":"Create a \"Create Stream\" action on Farcaster","type":"issue","updatedAt":"2025-03-29T12:18:53Z","url":"https://github.com/sablier-labs/command-center/issues/129"},{"author":"PaulRBerg","body":"- [ ]  Group layers\n- [ ]  Move the “Symbols” to their dedicated document (outside [[V2: Covers](https://www.figma.com/design/lpD3VaQ4pYwCfueBylcJO0/V2%3A-Covers?node-id=17-543&t=Wi8oHhDvQIfiSMW9-0)](https://www.figma.com/design/lpD3VaQ4pYwCfueBylcJO0/V2%3A-Covers?node-id=17-543&t=Wi8oHhDvQIfiSMW9-0))\n- [ ]  Rename frames and elements more intuitively\n- [ ]  Test the structure given a layer-first approach rather than a design-first one","createdAt":"2025-03-29T12:12:04Z","labels":["priority: 3","scope: frontend","effort: medium","work: clear"],"number":128,"repository":"sablier-labs/command-center","state":"open","title":"Organize Figma layers","type":"issue","updatedAt":"2025-03-29T12:12:16Z","url":"https://github.com/sablier-labs/command-center/issues/128"},{"author":"PaulRBerg","body":"Keywords like:\n\n- onchain vesting\n- (vested) airdrops\n- token vesting\n- usdc payroll\n\n@sneg55 mentioned using [TweetDeck](https://tweetdeck.com/), which may work well as a one-off, but I am thinking of a solution that is more programmatic in nature.\n\nThat is, smth like a weekly Cron job that looks for particular keywords, and generates a report with the findings, split by relevance.","createdAt":"2025-03-29T11:52:58Z","labels":["effort: epic","priority: 2","work: complicated","scope: data","scope: business"],"number":127,"repository":"sablier-labs/command-center","state":"open","title":"Bot for monitoring keywords on social media","type":"issue","updatedAt":"2025-03-29T11:52:58Z","url":"https://github.com/sablier-labs/command-center/issues/127"},{"author":"PaulRBerg","body":"- [ ] Update bio to say `onchain token distribution`\n- [ ] Update GitHub links (from `sablierhq` to `sablier-labs`)\n- [ ] Update URL from sablier.finance to sablier.com","createdAt":"2025-03-29T11:24:00Z","labels":["scope: marketing","priority: 3","effort: medium","work: clear"],"number":126,"repository":"sablier-labs/command-center","state":"open","title":"Update YouTube descriptions with latest company bio and links","type":"issue","updatedAt":"2025-03-29T11:24:00Z","url":"https://github.com/sablier-labs/command-center/issues/126"},{"author":"PaulRBerg","body":"https://blog.sablier.com/overview-token-streaming-models/","createdAt":"2025-03-29T11:15:43Z","labels":["scope: marketing","priority: 3","effort: low","work: clear"],"number":125,"repository":"sablier-labs/command-center","state":"open","title":"Mention Flow in the streaming model comparison article","type":"issue","updatedAt":"2025-03-29T11:22:37Z","url":"https://github.com/sablier-labs/command-center/issues/125"},{"author":"PaulRBerg","body":"https://defillama.com/protocol/sablier#information","createdAt":"2025-03-29T11:04:43Z","labels":["priority: 3","effort: medium","work: clear","scope: integrations"],"number":124,"repository":"sablier-labs/command-center","state":"closed","title":"Add Sablier Flow to DeFiLlama","type":"issue","updatedAt":"2025-04-16T17:44:06Z","url":"https://github.com/sablier-labs/command-center/issues/124"},{"author":"PaulRBerg","body":"The task is to create a public site on Notion for documenting our legal and compliance practices.\n\nAs suggested by @sneg55:\n\n> Could we add a dedicated documentation page focusing on legal compliance? This page could address our compliance measures, such as TRM, North Korea geofencing, and other relevant policies.\n\nThese topics frequently come up in discussions with prospects, and having a centralized, detailed resource would streamline the process of addressing their concerns.","createdAt":"2025-03-29T11:03:31Z","labels":["effort: high","scope: business","priority: 1","work: clear"],"number":123,"repository":"sablier-labs/command-center","state":"open","title":"Dedicated documentation for legal compliance practices","type":"issue","updatedAt":"2025-03-29T11:03:31Z","url":"https://github.com/sablier-labs/command-center/issues/123"},{"author":"PaulRBerg","body":"These are two boring web2 security standards. Our competitor Magna supports them\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/384b2fc6-4166-4c92-a083-841a56c89ff2\"/>","createdAt":"2025-03-29T11:01:38Z","labels":["priority: 3","effort: high","scope: frontend","work: complicated","scope: business"],"number":122,"repository":"sablier-labs/command-center","state":"open","title":"SOC 2 and ISO 27001","type":"issue","updatedAt":"2025-03-29T11:01:38Z","url":"https://github.com/sablier-labs/command-center/issues/122"},{"author":"PaulRBerg","body":"","createdAt":"2025-03-29T10:46:24Z","labels":["scope: marketing","priority: 3","effort: medium","work: clear"],"number":121,"repository":"sablier-labs/command-center","state":"open","title":"Update old articles to reference the latest contracts, docs, etc.","type":"issue","updatedAt":"2025-03-29T10:46:24Z","url":"https://github.com/sablier-labs/command-center/issues/121"},{"author":"PaulRBerg","body":"Create a [Zapper](https://zapper.xyz) adapter for Sablier so that Sablier data appears in the Zapper UI.","createdAt":"2025-03-29T10:45:06Z","labels":["priority: 3","effort: high","scope: data","work: clear"],"number":120,"repository":"sablier-labs/command-center","state":"open","title":"Zapper adapter","type":"issue","updatedAt":"2025-03-29T10:45:06Z","url":"https://github.com/sablier-labs/command-center/issues/120"},{"author":"PaulRBerg","body":"## Context\n\nFor our accounting to be simple, we need to collect the native token fees at a very predictable rate.\n\nWe talked to our accountants today, and we decided that the fee collection date will be the **1st of every month**. This means that on Tuesday (April 1), we need to collect the fees across all blockchains.\n\n## Task\n\n- [x] Create a new EOA that is specifically used for paying the gas for collecting the fees\n    - The EOA will be a personal account. I will personally provide the funds (as a one-time transfer), but I'd appreciate it @smol-ninja if you could handle the bridging/transfers from your end. Transak might be helpful here.\n- [x] Write a script that iterates over all Sablier deployments, and calls the `collectFees` function on all relevant contracts, including all Merkle campaigns.\n    - The [deployments package](https://github.com/sablier-labs/deployments/issues/21) might be helpful here (once we build it)!\n- [x] The script should generate a CSV artifact with the following info: tx hash, UTC timestamp, fee amount collected, and other useful info. Errors should also be logged in the CSV.\n- [ ] Write a GitHub Actions workflow that runs this script on the 1st date of each month\n\n### Low-Value\n\nFor simplicity, the script should NOT care about the USD value of the fee amount — unless it's zero, in which case the call should not be made.\n\n### Structure\n\nI will let you @smol-ninja decide between:\n\n1. Create a new GitHub repo specifically for the collection scripts and any admin-specific functionality in the EVM contracts\n2. OR turn the [multichain-deployer](https://github.com/sablier-labs/multichain-deployer) into something like `multichain-scripts` or `multichain-utils`\n\nI'm on the fence. We also need admin scripts for updating the fees, and I'm not sure where to put those.\n\n## Feedback\n\nOpen to feedback. Tagging @maxdesalle and @razgraf in case they have any thoughts.","createdAt":"2025-03-28T17:38:06Z","labels":["effort: high","scope: evm","work: complicated","priority: 0"],"number":118,"repository":"sablier-labs/command-center","state":"closed","title":"Script for automating the fee collection","type":"issue","updatedAt":"2025-05-13T11:37:03Z","url":"https://github.com/sablier-labs/command-center/issues/118"},{"author":"PaulRBerg","body":"https://www.notion.so/sablier/16ad272c72f34161b6ab1236e5cf35de?v=94b8c768d3854273a8759b5ba47bd0f7","createdAt":"2025-03-28T15:59:21Z","labels":[],"number":117,"repository":"sablier-labs/command-center","state":"closed","title":"Migrate tasks from Notion","type":"issue","updatedAt":"2025-03-29T12:30:11Z","url":"https://github.com/sablier-labs/command-center/issues/117"},{"author":"PaulRBerg","body":"So far, we've used this repo exclusively for internal discussions. It's time to turn into a general-purpose todo tracker.\n\n- [x] Rename it to something else\n- [x] Update the labels\n- [x] Update the README","createdAt":"2025-03-13T14:21:51Z","labels":[],"number":114,"repository":"sablier-labs/command-center","state":"closed","title":"Turn this repo into a general-purpose todo tracker","type":"issue","updatedAt":"2025-03-28T16:56:24Z","url":"https://github.com/sablier-labs/command-center/issues/114"},{"author":"smol-ninja","body":"","createdAt":"2025-03-13T10:07:54Z","labels":[],"number":113,"repository":"sablier-labs/command-center","state":"closed","title":"Update Readme","type":"issue","updatedAt":"2025-03-28T15:53:37Z","url":"https://github.com/sablier-labs/command-center/issues/113"},{"author":"PaulRBerg","body":"","createdAt":"2024-10-04T15:07:02Z","labels":[],"number":82,"repository":"sablier-labs/command-center","state":"closed","title":"Update the labels","type":"issue","updatedAt":"2025-03-28T16:56:19Z","url":"https://github.com/sablier-labs/command-center/issues/82"},{"author":"PaulRBerg","body":"","createdAt":"2025-08-15T11:48:34Z","labels":["priority: 2","work: complicated","type: feature","effort: medium"],"number":186,"repository":"sablier-labs/indexers","state":"open","title":"Custom Claude Code command for indexing a new contract","type":"issue","updatedAt":"2025-08-15T11:48:34Z","url":"https://github.com/sablier-labs/indexers/issues/186"},{"author":"PaulRBerg","body":"","createdAt":"2025-08-15T11:48:17Z","labels":["priority: 2","work: complicated","type: feature","effort: medium"],"number":185,"repository":"sablier-labs/indexers","state":"open","title":"Custom Claude Code command for indexing a new chain","type":"issue","updatedAt":"2025-08-15T11:48:17Z","url":"https://github.com/sablier-labs/indexers/issues/185"},{"author":"PaulRBerg","body":"Useful for user analytics/metrics, to find out how many streams were created as cancelable initially.\n\nWe cannot easily find out this information at the moment because canceling a stream sets `cancelable` to `false`.","createdAt":"2025-08-06T11:13:20Z","labels":["priority: 2","effort: low","work: clear","type: feature"],"number":184,"repository":"sablier-labs/indexers","state":"open","title":"Introduce \"wasCancelable\" boolean flag","type":"issue","updatedAt":"2025-08-06T11:13:20Z","url":"https://github.com/sablier-labs/indexers/issues/184"},{"author":"razgraf","body":"After testing with the mainnet indexers, we've uncovered an issue with the dual-version algorithm in both envio and the graph.\n\n> [!IMPORTANT]\n> We (for some reason) don't have proxied stream indexed on sepolia, which is why the tests there passed successfully. \n\n## Initial discovery\n\nUpon running the equivalence tests, we found discrepancies between vendors for proxied streams.\n\n<img width=\"400\" height=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/983ef7af-16cf-43fa-a99a-1b3d52e040ce\" />\n\n\n## Problem statement\n\nThere's a general issue with the logic and a specific issue which made debugging a bit harder.\n\n### General issue\n\nThe general one can be analyzed using the envio indexer.\n\nhttps://github.com/sablier-labs/indexers/blob/db964df7b9289a42326bd3a8ad5f05653ded8a73/envio/common/effects/proxender.ts#L63-L70\n\nFor owners who created proxies using both systems (`4.0.0` and `4.0.1`), the checks will stop after the `4.0.1` resolution is made. If we have a stream where the owner actually used `4.0.0` the flow will simply stop before checking the older version, and mark this as being a non-proxy.\n\n1. Fetch the `4.0.1` proxy from the registry\n2. Ok, found one, don't go in the `4.0.0` branch _// it skips although our stream was using the `4.0.0` registry_\n3. Since the proxy address is not the one I was expecting, return `undefined`\n\n#### Solution\n\nInstead, the flow should ask both registries about the proxy address `registry.getProxy(owner)` and compare the results, or at least consider going in the `4.0.0` branch when a `4.0.1` result is found but still incompatible (later edit: what ended up being implememented). If one of them is true (meaning a registry has identified the proxy as being valid), we have a proper `proxied` stream on our hands. This covers any case where an owner might have both versions - so streams using the older one will be scanned as well.\n\n\n### The Graph issue\n\nFurther checks revealed that the mainnet the-graph indexer (deployed here [/82/sablier-lockup-experimental-2](https://api.studio.thegraph.com/query/82/sablier-lockup-experimental-2/version/latest)) only indexes proxies for two streams (both using proxy version `4.0.0`) - `LD-1-1` and `LL-1-1`.\n\nhttps://github.com/sablier-labs/indexers/blob/db964df7b9289a42326bd3a8ad5f05653ded8a73/graph/lockup/helpers/prb-proxy.ts#L20-L27\n\nThe conditional statement on line **24** should've actually been:\n```ts\n if (reverse.reverted || reverse.value.equals(Address.zero())) // notice the lack of `!`\n```\n\nThe older logic made it so, any tests for streams with proxy `4.0.1` be overwritten (since the `reverse` value wasn't address `zero`).\n\n#### Solution\n\nThe general issue will affect the code here anyway, so that's where the final solution is :D \n\n","createdAt":"2025-07-25T12:05:19Z","labels":["priority: 2","work: complicated","type: bug"],"number":183,"repository":"sablier-labs/indexers","state":"open","title":"Fix logic in proxy resolution","type":"issue","updatedAt":"2025-07-29T08:33:11Z","url":"https://github.com/sablier-labs/indexers/issues/183"},{"author":"PaulRBerg","body":"An idea shared by Derek from BuildersDAO\n\n```graphql\nentity IndexerInfo @entity(immutable: true) {\n  commitHash: string; # git commit when deployment was made\n  protocol: string; # one of \"airdrops\", \"flow\", or \"lockup\"\n  deployedAt: Timestamp! # unix timestamp when deployment was made\n  versionLabel: string; # same as subgraph version label, e.g., v2.0--v1.0.0-beta.1\n}\n```","createdAt":"2025-07-22T10:20:45Z","labels":["priority: 3","effort: low","work: clear","type: feature"],"number":182,"repository":"sablier-labs/indexers","state":"open","title":"Introduce \"IndexerInfo\" entity for indexer metadata information (runs only once on first block)","type":"issue","updatedAt":"2025-07-22T10:20:45Z","url":"https://github.com/sablier-labs/indexers/issues/182"},{"author":"PaulRBerg","body":"## Problem\n\nIn PR #92, I introduced two new entities called `User` and `Revenue` for tracking our KPIs using Envio. This is necessary because Dune has become unusable given the scale of our infra (the many EVM chains we are deployed to).\n\nThere are two issues:\n\n1. The user data is split among three different indexers, which means we cannot easily get an aggregate view of out entire user base.\n  - Envio introduced a new [`User_aggregate`](https://github.com/sablier-labs/indexers/issues/175) feature, which is cool, but it cannot be used across indexers.\n2. The additional entities have increased the complexity of a code base that was already complex.\n  - The performance has taken a hit\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3ddf8985-c2ae-4789-9218-1d0e865348cc\" />\n\n## Solution\n\nBespoke KPI indexer, moving the `User` and `Revenue` entities there.\n\nThe only con is that some handler logic will be duplicated between KPIs and each protocol, but that should be an acceptable trade-off. The handler entrypoints shouldn't change that often in the KPIs indexer (since we will just be parsing the `event.params.*` and calling a helper that inserts the data in the database).\n\n### Related\n\nhttps://github.com/enviodev/hyperindex/issues/652\n","createdAt":"2025-07-21T11:00:35Z","labels":["effort: epic","priority: 2","work: complicated","type: feature"],"number":181,"repository":"sablier-labs/indexers","state":"open","title":"Bespoke Envio indexer for unified KPIs","type":"issue","updatedAt":"2025-07-21T11:00:40Z","url":"https://github.com/sablier-labs/indexers/issues/181"},{"author":"PaulRBerg","body":"<img width=\"556\" height=\"166\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/eae39857-1a42-452e-a1f1-32d4ced901d6\" />","createdAt":"2025-07-21T07:48:37Z","labels":["priority: 3","effort: low","work: clear","type: perf"],"number":180,"repository":"sablier-labs/indexers","state":"open","title":"Use \"Promise.all\" to optimize performance in Envio loaders","type":"issue","updatedAt":"2025-07-21T07:48:37Z","url":"https://github.com/sablier-labs/indexers/issues/180"},{"author":"PaulRBerg","body":"https://www.loom.com/share/49cbb0addef24948a1a089428dcb1b3c","createdAt":"2025-07-18T15:48:27Z","labels":["priority: 0","work: complicated","type: refactor","effort: medium"],"number":179,"repository":"sablier-labs/indexers","state":"open","title":"Use new Envio cache feature","type":"issue","updatedAt":"2025-07-18T15:48:27Z","url":"https://github.com/sablier-labs/indexers/issues/179"},{"author":"PaulRBerg","body":"These are most likely scams.\n\nExamples:\n\n- \"ACX   [via www.across.events]\"\n- \"Claim on: zk-claim.io\"","createdAt":"2025-07-18T15:21:09Z","labels":["priority: 1","effort: low","work: clear","type: feature"],"number":178,"repository":"sablier-labs/indexers","state":"open","title":"Remove URLs from token names and symbols","type":"issue","updatedAt":"2025-07-18T15:21:09Z","url":"https://github.com/sablier-labs/indexers/issues/178"},{"author":"PaulRBerg","body":"e.g. something like this:\n\n```graphql\ntype Numerical {\n  raw: BigInt! # 1e18\n  humanized: Float! # works in Envio, alternatively, we can use BigDecimals\n}\n```\n\nIn this way, we would get rid of a whole lot of numerical conversions in the UI.","createdAt":"2025-07-18T13:19:27Z","labels":["effort: high","priority: 2","work: complicated","type: refactor"],"number":177,"repository":"sablier-labs/indexers","state":"open","title":"Numerical entity to encapsulate 1e18 numbers and humanized numbers","type":"issue","updatedAt":"2025-07-21T12:46:31Z","url":"https://github.com/sablier-labs/indexers/issues/177"},{"author":"PaulRBerg","body":"See:\n\n- https://github.com/sablier-labs/indexers/issues/159\n- https://github.com/sablier-labs/onchain-analytics/pull/32","createdAt":"2025-07-18T08:49:19Z","labels":["priority: 2","work: complicated","type: feature","effort: medium"],"number":176,"repository":"sablier-labs/indexers","state":"open","title":"Add a field to query Safe users in the User entity","type":"issue","updatedAt":"2025-07-18T08:49:19Z","url":"https://github.com/sablier-labs/indexers/issues/176"},{"author":"PaulRBerg","body":"This can be done by setting this environment variable:\n\n```\nENVIO_HASURA_PUBLIC_AGGREGATE=[\"YourEntityName\"]\n```\n\ne.g.\n\n```graphql\nStream_aggregate {\n  aggregate {\n    count\n  }\n}\n```\n\nWould return:\n\n```json\n{\n  \"data\": {\n    \"Stream_aggregate\": {\n      \"aggregate\": {\n        \"count\": 476\n      }\n    }\n  }\n}\n```\n\nFor more context, see the release spec for v2.22: https://github.com/enviodev/hyperindex/releases/tag/v2.22.0\n\nRelated: https://github.com/sablier-labs/interfaces/issues/1493","createdAt":"2025-07-16T19:09:31Z","labels":["priority: 2","effort: low","work: clear","type: feature"],"number":175,"repository":"sablier-labs/indexers","state":"open","title":"Enable aggregate metrics in Envio (total count, averages, max, min, sum)","type":"issue","updatedAt":"2025-07-19T18:52:35Z","url":"https://github.com/sablier-labs/indexers/issues/175"},{"author":"PaulRBerg","body":"See:\n\n- https://github.com/enviodev/hyperindex/pull/540\n- https://github.com/enviodev/hyperindex/discussions/539","createdAt":"2025-07-16T19:04:13Z","labels":["priority: 3","work: complicated","type: refactor","effort: medium"],"number":174,"repository":"sablier-labs/indexers","state":"open","title":"Simplify types for Envio event handlers by using the new loaderArgs and handlerArgs (introduced in v2.25)","type":"issue","updatedAt":"2025-07-16T19:04:13Z","url":"https://github.com/sablier-labs/indexers/issues/174"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/171\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** July 14, 2025</sup>\n","createdAt":"2025-07-14T11:20:36Z","labels":["priority: 3","effort: low","work: clear","type: feature"],"number":173,"repository":"sablier-labs/indexers","state":"open","title":"Introduce \"oldRecipients\" array in stream schema","type":"issue","updatedAt":"2025-07-14T11:20:36Z","url":"https://github.com/sablier-labs/indexers/issues/173"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/171\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** July 14, 2025</sup>\n","createdAt":"2025-07-14T11:20:10Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":172,"repository":"sablier-labs/indexers","state":"open","title":"Remove \"parties\" array","type":"issue","updatedAt":"2025-07-14T11:20:10Z","url":"https://github.com/sablier-labs/indexers/issues/172"},{"author":"PaulRBerg","body":"## Problem\n\nThe GraphQL fragments are duplicated between the Interfaces and the Indexers repos:\n\n- https://github.com/sablier-labs/indexers/blob/4ad8eaf87d6f62ccdf98ba2a4b260ec6a8ecb830/apps/flow-envio/test/setup/fragments.ts\n- https://github.com/sablier-labs/indexers/blob/5181a8905e5267e2e88e990f1878ce4e0fbc18ec/tests/vendor-consistency/merkle/fragments.ts\n\n## Solution\n\n- [ ] In Indexers repo, generate the fragments and export them to a `@sablier/indexers` package\n- [ ] In Interfaces, import them from `@sablier/indexers`","createdAt":"2025-07-11T13:31:53Z","labels":["priority: 3","type: refactor","work: clear","effort: medium"],"number":170,"repository":"sablier-labs/indexers","state":"open","title":"Export fragments and queries in the npm package","type":"issue","updatedAt":"2025-07-11T13:31:53Z","url":"https://github.com/sablier-labs/indexers/issues/170"},{"author":"razgraf","body":"Seems we have it disabled which could affect historical sync performance.\n\nhttps://docs.envio.dev/docs/HyperIndex/configuration-file#rollback-on-reorg","createdAt":"2025-07-11T09:35:53Z","labels":[],"number":169,"repository":"sablier-labs/indexers","state":"open","title":"Enable \"rollback on reorg\" mode in Envio","type":"issue","updatedAt":"2025-07-11T11:47:14Z","url":"https://github.com/sablier-labs/indexers/issues/169"},{"author":"PaulRBerg","body":"See LK-12 in the [BuildersDAO report](https://sablier.notion.site/Responses-to-BuildersDAO-Audit-of-Indexers-June-2025-21c6105ad8b6807d838ec6a27e4e6277).","createdAt":"2025-07-09T10:16:00Z","labels":["priority: 2","effort: low","work: clear","type: feature"],"number":168,"repository":"sablier-labs/indexers","state":"open","title":"Infer shape for LockupLinear v1.x streams","type":"issue","updatedAt":"2025-07-09T10:16:00Z","url":"https://github.com/sablier-labs/indexers/issues/168"},{"author":"PaulRBerg","body":"Because the factory can have the same address on multiple chains.\n\nhttps://github.com/sablier-labs/indexers/blob/92cc695d2233a3ceee054c4ae9727a7fe9461c01/src/schema/airdrops/factory.graphql#L5-L8","createdAt":"2025-07-07T13:50:07Z","labels":["priority: 2","effort: low","type: bug","work: clear"],"number":166,"repository":"sablier-labs/indexers","state":"open","title":"The ID of the factory entity should contain the chain ID","type":"issue","updatedAt":"2025-07-07T13:50:07Z","url":"https://github.com/sablier-labs/indexers/issues/166"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/158\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** June 24, 2025</sup>\nFrom the BuildersDAO audit report:\r\n\r\n<img width=\"400\" alt=\"SCR-20250624-ooel\" src=\"https://github.com/user-attachments/assets/d57f36ec-a7d2-4be8-9b26-c7ac642148e2\" />\r\n\r\nI see that the UI queries both the `endTime` and the `timestamp`/ `milestone`. But why? this seems superfluous:\r\n\r\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/subgraphs/src/documents/lockup/fragments.ts#L57-L68\r\n\r\nCan we delete \"Tranche.timestamp\" and \"Segment.milestone\", @razgraf, @gavriliumircea?\r\n</div>","createdAt":"2025-06-27T20:04:47Z","labels":["priority: 3","effort: low","work: clear","type: perf"],"number":165,"repository":"sablier-labs/indexers","state":"open","title":"Delete \"Tranche.timestamp\" and \"Segment.milestone\"","type":"issue","updatedAt":"2025-06-27T20:04:53Z","url":"https://github.com/sablier-labs/indexers/issues/165"},{"author":"PaulRBerg","body":"## Problem\n\nContext: https://github.com/sablier-labs/indexers/discussions/161\n\nMK-5 finding from BuildersDAO audit report:\n\n<img width=\"500\" alt=\"SCR-20250624-pfqp\" src=\"https://github.com/user-attachments/assets/88d17d88-485e-43fe-9d52-d80b0dc8b9b5\" />\n\n## Solution\n\nRename to `latestClawback`","createdAt":"2025-06-27T16:17:19Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":164,"repository":"sablier-labs/indexers","state":"open","title":"Rename \"clawback\" to \"lastClawback\" in Airdrops indexers","type":"issue","updatedAt":"2025-06-27T16:17:28Z","url":"https://github.com/sablier-labs/indexers/issues/164"},{"author":"PaulRBerg","body":"- https://github.com/erpc/erpc\n- https://github.com/sablier-labs/indexers/discussions/162","createdAt":"2025-06-26T19:36:51Z","labels":["priority: 3","effort: low","work: clear","type: feature"],"number":163,"repository":"sablier-labs/indexers","state":"open","title":"Use eRPC for greater RPC resilience in the Envio indexers","type":"issue","updatedAt":"2025-07-11T20:18:39Z","url":"https://github.com/sablier-labs/indexers/issues/163"},{"author":"PaulRBerg","body":"See MK-4 finding in BuildersDAO report (#126)\n\nThe `stream` fields should be moved to a separate entity.","createdAt":"2025-06-24T14:19:00Z","labels":["priority: 2","work: complicated","type: refactor","effort: medium"],"number":160,"repository":"sablier-labs/indexers","state":"open","title":"Destructure overloaded `Campaign` entity","type":"issue","updatedAt":"2025-06-24T14:19:00Z","url":"https://github.com/sablier-labs/indexers/issues/160"},{"author":"PaulRBerg","body":"## Context\n\nSee LK-11 finding in BuildersDAO report (#126).\n\nA bespoke User entity would provide a superior UX when querying user-owned streams.\n\n## Tasks\n\n- [x] Define entity (done in #92)\n- [ ] Integrate ERC-721 approvals in stream access control (when zero address is approved, remove previous approval)\n\n## Spec\n\nIntroduce a User Entity (Full Normalization). Model sender/recipient/proxied/approved relationships as derived relations on a new User entity, e.g.\n\n```graphql\ntype User @entity {\n  id: ID!\n  sentStreams: [Stream!] @derivedFrom(field: \"sender\")\n  receivedStreams: [Stream!] @derivedFrom(field: \"recipient\")\n  proxiedStreams: [Stream!] @derivedFrom(field: \"proxender\")\n  approvedOperators: [ApprovedOperator!] @derivedFrom(field: \"owner\")\n}\ntype Stream @entity {\n  id: ID!\n  sender: User!\n  recipient: User!\n  proxender: User\n}\ntype ApprovedOperator @entity {\n  id: ID!\n  owner: User!\n  operator: User!\n  timestamp: BigInt!\n  approved: Boolean!\n}\n\n```","createdAt":"2025-06-24T13:44:34Z","labels":["effort: epic","priority: 1","work: complicated","type: feature"],"number":159,"repository":"sablier-labs/indexers","state":"open","title":"User entity with full normalization in the GraphQL schema","type":"issue","updatedAt":"2025-07-18T08:48:25Z","url":"https://github.com/sablier-labs/indexers/issues/159"},{"author":"PaulRBerg","body":"See LK-4 finding in BuildersDAO report.\n\n#126","createdAt":"2025-06-24T13:27:05Z","labels":["priority: 3","type: refactor","work: clear","effort: medium"],"number":157,"repository":"sablier-labs/indexers","state":"open","title":"Destructure overloaded `Stream` entity with version and model-specific fields","type":"issue","updatedAt":"2025-06-24T13:27:05Z","url":"https://github.com/sablier-labs/indexers/issues/157"},{"author":"PaulRBerg","body":"Cross Cutting issue no. 2\n\nhttps://thegraph.com/docs/en/subgraphs/best-practices/avoid-eth-calls/#reducing-the-runtime-overhead-of-eth_calls","createdAt":"2025-06-24T10:19:59Z","labels":["priority: 3","effort: low","work: complicated","type: perf"],"number":156,"repository":"sablier-labs/indexers","state":"open","title":"Replace Manual `eth_call` with Declarative Calls","type":"issue","updatedAt":"2025-07-25T09:55:36Z","url":"https://github.com/sablier-labs/indexers/issues/156"},{"author":"PaulRBerg","body":"It'd be nice to be able to make the `version-label` an optional parameter here:\n\nhttps://github.com/sablier-labs/indexers/blob/8da14b21cb4091f22d6bb18aa00a0d2c3f872ca9/src/graph/graph.just#L95-L103\n\ne.g. if the latest version is `v2.0.0--v1.0.0-alpha.5`, the script would automatically set the version label to `v2.0.0--v1.0.0-alpha.6` (without the user's intervention). ","createdAt":"2025-06-24T08:54:16Z","labels":["priority: 3","effort: low","work: clear","type: perf"],"number":155,"repository":"sablier-labs/indexers","state":"open","title":"Fetch the latest deployment version label for The Graph indexers so that users don't have to manually provide it to the deployment recipes","type":"issue","updatedAt":"2025-07-21T19:02:12Z","url":"https://github.com/sablier-labs/indexers/issues/155"},{"author":"PaulRBerg","body":"Requires upgrading to Envio v2.23.0\n\nhttps://github.com/enviodev/hyperindex/discussions/584#discussioncomment-13506029","createdAt":"2025-06-18T13:50:47Z","labels":["priority: 3","effort: low","work: clear","type: perf"],"number":153,"repository":"sablier-labs/indexers","state":"open","title":"Use \"context.Entity.getOrCreate\" for \"Activity\" entity","type":"issue","updatedAt":"2025-06-18T13:56:31Z","url":"https://github.com/sablier-labs/indexers/issues/153"},{"author":"PaulRBerg","body":"## Problem\n\nWithout an email-based notification for indexing failures, errors like #150 are difficult to catch.\n\nRelated: https://github.com/sablier-labs/command-center/issues/145\n\n## Solution\n\n### Envio\n\nWe could pipe our logs to a [Kibana](https://www.elastic.co/kibana/kibana-dashboard), but we would have to upgrade to the [dedicated plan](https://github.com/enviodev/hyperindex/discussions/604).\n\n### The Graph\n\nTBD","createdAt":"2025-06-18T10:56:30Z","labels":["effort: high","priority: 1","work: complicated","type: feature"],"number":152,"repository":"sablier-labs/indexers","state":"open","title":"Receive email alerts for critical indexing errors","type":"issue","updatedAt":"2025-07-14T15:22:54Z","url":"https://github.com/sablier-labs/indexers/issues/152"},{"author":"PaulRBerg","body":":/\n\n- https://explorer.zksync.io/address/0x16C2FBfE68519fA465784AccF11B4b2079Ae1AEb\n- https://abscan.org/address/0x3e177f012334b4F120d920629801A4d14830c428\n\n![Image](https://github.com/user-attachments/assets/d7d95be1-58b6-4f4b-95c3-eef4b6494e24)","createdAt":"2025-06-17T20:49:24Z","labels":["priority: 3","type: bug","work: clear","effort: medium"],"number":150,"repository":"sablier-labs/indexers","state":"open","title":"Handle NFTs and tokens that revert when the `decimals` are queried","type":"issue","updatedAt":"2025-07-14T19:20:04Z","url":"https://github.com/sablier-labs/indexers/issues/150"},{"author":"PaulRBerg","body":"## Problem\n\nBetween [July 6, 2023](https://github.com/sablier-labs/interfaces/commit/8833e4a260ae6eda9e22c5a0e650812672d914ab) and [July 11, 2023](https://github.com/sablier-labs/interfaces/commit/6f634155e04aa6e446a3e876f56dc1238af4d86a), the UI used PRBProxy v4.0.0, an intermediary release which was shortly replaced with v4.0.1.\n\nThis led to some users deploying proxies using v4.0.0 of the registry, such as:\n\n- Owner `0xc517d5bcb3a5591d21321ACb90a7666805Bf063c`, who deployed proxy v4.0.0 [`0xac7dd73b1f8ce885535783e753ae8a263425861a`](https://arbiscan.io/address/0xac7dd73b1f8ce885535783e753ae8a263425861a), and who also deployed proxy v4.0.1 [`0x15b485114d09734C43D8C60369d7a3E9b2d35D7B`](https://arbiscan.io/address/0x15b485114d09734C43D8C60369d7a3E9b2d35D7B)\n\nThe problem is that the v4.0.0 streams are not indexed correctly, i.e., the `proxender` is not resolved due to the reverse check.\n\n## Solution\n\nQuery both `PRBProxyRegistry` v4.0.1 and v4.0.0 the reverse check (that is, if the former call fails):\n\n- [v4.0.1: `0x584009E9eDe26e212182c9745F5c000191296a78`](https://arbiscan.io/address/0x584009E9eDe26e212182c9745F5c000191296a78)\n- [v4.0.0: `0xd42a2bb59775694c9df4c7822bffab150e6c699d`](https://arbiscan.io/address/0xd42a2bb59775694c9df4c7822bffab150e6c699d)\n\nSee https://github.com/PaulRBerg/prb-proxy/releases\n","createdAt":"2025-06-17T15:45:11Z","labels":["priority: 2","effort: low","type: bug","work: clear"],"number":148,"repository":"sablier-labs/indexers","state":"open","title":"PRBProxy v4.0.0 not indexed correctly — missing 5 days between July 6 and July 11, 2023","type":"issue","updatedAt":"2025-06-17T15:45:11Z","url":"https://github.com/sablier-labs/indexers/issues/148"},{"author":"moose-code","body":"Hi folks — JonJon here, co-founder at **Envio**.\n\nIf you haven't updated in a while, you might have missed these highlights – and we're happy to help you adopt any of them:\n\n### v2.22.0 — \"Big Clean-up\"\n- `getOrCreate` / `getOrThrow` helpers → no more boiler-plate null checks  \n- Smarter multichain batch builder for higher loader hit-rates  \n\n### Speed & stability (May)\n- ~35% faster backfills via the new indexing buffer (v2.21.4)  \n- Deep-reorg infinite-loop fix (v2.21.5)\n\n### Dev-experience gems\n- **Effect API** — makes external API calls **dramatically faster** via auto-batching, memoization & deduplication. Parallelize thousands of calls instead of executing one-by-one! (v2.19) ⚡ _Caching system coming soon!_\n- **Contract-registration boost** — dynamic contracts now fast enough to make `preRegisterDynamicContracts` obsolete  \n- Dev Console with live **Performance** tab for query timing insights (v2.18)  \n- Automatic **RPC fallback** to keep blocks flowing if HyperSync stalls (v2.14)\n\n**Need anything?**  \n- Quick tips on schema design or perf tuning  \n- Early feedback on v2.22  \n- Help migrating to our hosted service (alerting beta next week)\n\nReply here or join us on [Discord](https://discord.gg/envio).\n\n```bash\n# one-liner upgrade\npnpm i envio@latest\n```\n\nFull changelog → https://github.com/enviodev/hyperindex/releases/tag/v2.22.0  \nDocs → https://docs.envio.dev\n\nFeel free to close if you're all set.  \nBest,  \nJonJon & the Envio team\n","createdAt":"2025-06-12T10:56:02Z","labels":[],"number":145,"repository":"sablier-labs/indexers","state":"closed","title":"HyperIndex v2.22.2 → one-line upgrade, big gains","type":"issue","updatedAt":"2025-06-17T13:22:24Z","url":"https://github.com/sablier-labs/indexers/issues/145"},{"author":"PaulRBerg","body":"See:\n\n- https://github.com/enviodev/hyperindex/releases/tag/v2.22.0\n- https://github.com/enviodev/hyperindex/discussions/584","createdAt":"2025-06-11T15:52:04Z","labels":["priority: 1","work: clear","type: feature","effort: medium"],"number":144,"repository":"sablier-labs/indexers","state":"closed","title":"Use the new `getOrThrow` and `getOrCreate` methods available in Envio v2.22","type":"issue","updatedAt":"2025-06-17T13:22:16Z","url":"https://github.com/sablier-labs/indexers/issues/144"},{"author":"gavriliumircea","body":"In the create `createBaseStream` initially proxy is pushed in the parties field but bellow the field is overridden and the proxender is lost.","createdAt":"2025-06-11T14:22:47Z","labels":["effort: low","work: clear"],"number":143,"repository":"sablier-labs/indexers","state":"closed","title":"For the lockup V1_0 contract version the proxender is not set in the parties field","type":"issue","updatedAt":"2025-06-16T16:55:39Z","url":"https://github.com/sablier-labs/indexers/issues/143"},{"author":"gavriliumircea","body":"The fist stream of the batch always has the position set to -1. Bellow you can check the behavior.\n\n![Image](https://github.com/user-attachments/assets/c64d1961-f2ca-463a-b98d-1949f486b8bb)","createdAt":"2025-06-11T14:06:02Z","labels":["effort: low","work: clear"],"number":142,"repository":"sablier-labs/indexers","state":"closed","title":"Batch position wrong for the first element","type":"issue","updatedAt":"2025-06-24T08:20:51Z","url":"https://github.com/sablier-labs/indexers/issues/142"},{"author":"PaulRBerg","body":"To remind the developer of the requirement to define the `NAME_OVERRIDES`:\n\n\nhttps://github.com/sablier-labs/indexers/blob/bbaceb4bc2005f322d8815359f5d3d7ba9adb0ba/src/exports/vendors.ts#L12-L19","createdAt":"2025-06-10T15:34:41Z","labels":["priority: 3","type: test","effort: low","work: clear"],"number":139,"repository":"sablier-labs/indexers","state":"closed","title":"Test for ensuring that the network slugs used in the subgraph manifest match The Graph's slugs","type":"issue","updatedAt":"2025-06-17T13:58:11Z","url":"https://github.com/sablier-labs/indexers/issues/139"},{"author":"PaulRBerg","body":"Docs: https://docs.envio.dev/docs/HyperIndex/hypersync#improving-resilience-with-rpc-fallback\n\nThe idea is to provide an RPC fallback so that Envio can rely on this if their HyperSync infra experiences any interruption.\n\nNote: this is about pulling the events themselves, and it's a separate issue from https://github.com/sablier-labs/indexers/issues/128 (ERC20 metadata cache).\n\n","createdAt":"2025-06-09T17:27:02Z","labels":["priority: 2","effort: low","work: clear","type: feature"],"number":138,"repository":"sablier-labs/indexers","state":"open","title":"Provide RPC fallback in Envio config file","type":"issue","updatedAt":"2025-06-17T13:57:30Z","url":"https://github.com/sablier-labs/indexers/issues/138"},{"author":"PaulRBerg","body":"Explained here: https://github.com/sablier-labs/indexers/issues/128","createdAt":"2025-06-09T12:16:21Z","labels":["priority: 2","effort: low","work: clear","type: perf"],"number":136,"repository":"sablier-labs/indexers","state":"open","title":"Use Infura with API key as a fallback instead of the public RPC URLs","type":"issue","updatedAt":"2025-06-09T12:16:21Z","url":"https://github.com/sablier-labs/indexers/issues/136"},{"author":"PaulRBerg","body":"Envio docs: https://docs.envio.dev/docs/HyperSync/hypersync-supported-networks\n\nBug here:\n\nhttps://github.com/sablier-labs/indexers/blob/a432c08c12e0255e874cbac6a8fc20d7de8352ee/packages/constants/src/addresses/lightlink.ts#L1-L2\n","createdAt":"2025-06-09T12:05:52Z","labels":["priority: 1","effort: low","type: bug","work: clear"],"number":135,"repository":"sablier-labs/indexers","state":"open","title":"Incorrect `chain` name in Envio bundle for Lightlink (Envio is not supported on Lightlink)","type":"issue","updatedAt":"2025-06-09T12:05:52Z","url":"https://github.com/sablier-labs/indexers/issues/135"},{"author":"PaulRBerg","body":"Move these ABIs to a dedicated separate repository so that they can be reused across multiple repos, e.g. the Interfaces:\n\nhttps://github.com/sablier-labs/indexers/tree/f2d17d8251967eae028de97b785515e523f6f1a4/src/abi","createdAt":"2025-06-07T15:31:57Z","labels":["priority: 3","type: refactor","work: clear","effort: medium"],"number":134,"repository":"sablier-labs/indexers","state":"open","title":"Move the ABIs to a separate repository","type":"issue","updatedAt":"2025-06-11T11:51:39Z","url":"https://github.com/sablier-labs/indexers/issues/134"},{"author":"PaulRBerg","body":"I've already implemented this on #92 but FYI event signatures don't have to be defined in the Envio config if the ABI file path is provided:\n\n<img width=\"456\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4d4483a7-b06d-4ee8-b9e5-8b65d85569e9\" />\n\nDocs: https://docs.envio.dev/docs/HyperIndex/configuration-file","createdAt":"2025-06-07T13:45:39Z","labels":["priority: 1","type: refactor","work: clear","effort: medium"],"number":133,"repository":"sablier-labs/indexers","state":"open","title":"Declare only event names, not the whole event signatures, in the Envio config YAML","type":"issue","updatedAt":"2025-06-07T13:45:46Z","url":"https://github.com/sablier-labs/indexers/issues/133"},{"author":"PaulRBerg","body":"Instead of \"Uniswap V2\" and \"UNI-V2\", we could resolve the names and the symbols to something more descriptive about the particular pool (the assets being held there).\n\n```json\n\"0x03268783d9e70ed6fe1c6065f38906c038db10a7\": { \"decimals\": 18, \"name\": \"Uniswap V2\", \"symbol\": \"UNI-V2\" },\n\"0x035afeb9b84919bb10977a639b49ef3f93477cc0\": { \"decimals\": 18, \"name\": \"Uniswap V2\", \"symbol\": \"UNI-V2\" },\n\"0x05460665240586b6fe136ffb50b75f58639887e7\": { \"decimals\": 18, \"name\": \"Uniswap V2\", \"symbol\": \"UNI-V2\" },\n```\n\nWe would have to import the Uniswap ABIs into the manifest YAML, which is why this task should ideally be coupled with:\n\n- https://github.com/sablier-labs/indexers/issues/131\n- https://github.com/sablier-labs/indexers/issues/128","createdAt":"2025-06-06T15:17:00Z","labels":["effort: high","priority: 2","work: clear","type: feature"],"number":132,"repository":"sablier-labs/indexers","state":"open","title":"Better names and symbols for AMM LP pool tokens","type":"issue","updatedAt":"2025-06-09T05:46:45Z","url":"https://github.com/sablier-labs/indexers/issues/132"},{"author":"PaulRBerg","body":"Reference: https://thegraph.com/docs/en/subgraphs/guides/subgraph-composition/\n\nSince it is now possible to compose subgraphs on The Graph, I propose this idea:\n\n- [ ] Create a bespoke subgraph for storing the `Asset` entities.\n- [ ] The manifest YAML file would contain entries for all Sablier contracts with `create` functions, and it would provide simple event handlers that perform the `ERC20.bind` logic to pull the ERC-20 metadata.\n  - [ ] Alternatively, maybe we can use `callHandlers` or `blockHandlers` to avoid listing the contracts.\n- [ ] In each protocol subgraph, pull the assets' metadata from the asset subgraph.\n- [ ] Remove the `ERC20` and `ERC20Bytes` ABI declarations from all manifest YAMLs.","createdAt":"2025-06-06T15:16:25Z","labels":["effort: high","priority: 3","work: complicated","type: perf"],"number":131,"repository":"sablier-labs/indexers","state":"open","title":"Use subgraph composition to store the assets into a single subgraph","type":"issue","updatedAt":"2025-06-09T05:50:57Z","url":"https://github.com/sablier-labs/indexers/issues/131"},{"author":"PaulRBerg","body":"It would be helpful to be able to know if a stream was created as part of an airdrop campaign or not. There were cases where this would have been helpful, e.g. https://github.com/sablier-labs/interfaces/issues/1550\n\nThis can be done by using [subgraph composition](https://thegraph.com/docs/en/subgraphs/guides/subgraph-composition/) and composing the Airdrops subgraph into the Lockup subgraph.\n\nAlternatively, we could add an `IS_SABLIER_MERKLE` getter into [`ISablierMerkleBase`](https://github.com/sablier-labs/airdrops/blob/5b0682494e060ef93aedecabd5afe930adfcf2ed/src/interfaces/ISablierMerkleBase.sol) contract, and query that at runtime. WDYT of this approach, @sablier-labs/evm?","createdAt":"2025-06-06T12:38:31Z","labels":["effort: high","priority: 2","work: complicated","type: feature"],"number":130,"repository":"sablier-labs/indexers","state":"open","title":"Knowing whether a stream was created through an airdrop","type":"issue","updatedAt":"2025-06-06T12:53:37Z","url":"https://github.com/sablier-labs/indexers/issues/130"},{"author":"PaulRBerg","body":"When the returned values are falsy, they should not be committed to the cache:\n\nhttps://github.com/sablier-labs/indexers/blob/3ec790fdb73b161361efc5909518638b1a0d29e5/apps/flow-envio/src/helpers/asset.ts#L93-L99","createdAt":"2025-06-06T12:03:34Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":129,"repository":"sablier-labs/indexers","state":"open","title":"Empty ERC20 metadata should not be committed to the cache","type":"issue","updatedAt":"2025-06-06T12:03:34Z","url":"https://github.com/sablier-labs/indexers/issues/129"},{"author":"PaulRBerg","body":"As pointed out by Dmitry from Envio [here](https://github.com/sablier-labs/indexers/discussions/84#discussioncomment-13388408), loading a JSON file and writing to it synchronously leads to subpar performance.\n\nUnfortunately, doing it asynchronously is not an option either. The data would be continuously overwritten (due to racing `await` Promises).\n\nOne thing we can do is this:\n\n- [ ] Do not touch the JSON file during the Envio indexing\n- [ ] Fetch the asset metadata from the production The Graph subgraphs\n- [ ] Save them to a JSON file\n- [ ] In Envio, only read from the JSON file (never write)\n\n> [!NOTE]\n> We can run a cron job on a weekly basis to refetch the latest assets from The Graph.","createdAt":"2025-06-06T11:51:35Z","labels":["priority: 2","work: clear","type: perf","effort: medium"],"number":128,"repository":"sablier-labs/indexers","state":"open","title":"Improve Envio indexing speed by piggybacking off The Graph for the RPC data","type":"issue","updatedAt":"2025-07-14T13:09:16Z","url":"https://github.com/sablier-labs/indexers/issues/128"},{"author":"PaulRBerg","body":"Getting this warning from time to time:\n\n```\npnpm jest\njest-haste-map: Haste module naming collision: generated\n  The following files share their name; please adjust your hasteImpl:\n    * <rootDir>/src/envio/airdrops/bindings/package.json\n    * <rootDir>/src/envio/flow/bindings/package.json\n```","createdAt":"2025-06-05T15:41:14Z","labels":[],"number":127,"repository":"sablier-labs/indexers","state":"closed","title":"Ignore \"bindings/package.json\" from Jest processing","type":"issue","updatedAt":"2025-06-17T13:58:55Z","url":"https://github.com/sablier-labs/indexers/issues/127"},{"author":"PaulRBerg","body":"See TG chat","createdAt":"2025-06-04T11:47:26Z","labels":["priority: 2","effort: medium"],"number":126,"repository":"sablier-labs/indexers","state":"open","title":"Fix issues reported by BuildersDAO","type":"issue","updatedAt":"2025-06-24T10:18:47Z","url":"https://github.com/sablier-labs/indexers/issues/126"},{"author":"PaulRBerg","body":"https://github.com/actuallymentor/chainlist-rpcs","createdAt":"2025-06-03T13:12:20Z","labels":["priority: 1","effort: low","work: clear","type: feature"],"number":125,"repository":"sablier-labs/indexers","state":"closed","title":"Source RPC URLs from this npm package","type":"issue","updatedAt":"2025-06-24T09:47:59Z","url":"https://github.com/sablier-labs/indexers/issues/125"},{"author":"PaulRBerg","body":"","createdAt":"2025-06-03T11:45:28Z","labels":["priority: 2","work: clear","type: feature","effort: medium"],"number":122,"repository":"sablier-labs/indexers","state":"closed","title":"Bring back Envio \"config.yaml\" in version control","type":"issue","updatedAt":"2025-06-05T12:09:57Z","url":"https://github.com/sablier-labs/indexers/issues/122"},{"author":"PaulRBerg","body":"## High Priority\n\n- [ ] Refactor `fee` to `minimumFee` in `Campaign` entity — this is especially important for clarity\n- [ ] Refactor `subgraphId` to `globalId` or smth else — subgraph ID can be confused in several ways, e.g., for the subgraph's deployment ID\n\n## Low Priority\n\n- [ ] Move stream/ vesting config of `Campaign` entities to a separate entity in the\n- [ ] Refactor `initial` to `unlockStart` or smth like that (to avoid introducing a new concept\n- [ ] Refactor `lastAdjustmentTimestamp` to `lastAdjustmentTime`\n- [ ] Refactor `milestone` to `timestamp` (for consistency with the latest version)\n- [ ] Refactor `position` to `batchIndex` or `batchPosition`\n\n## Related\n\n- [Is the `@deprecated` directive supported by The Graph's GraphQL engine?](https://ethereum.stackexchange.com/questions/169936/is-the-deprecated-directive-supported-by-the-graphs-graphql-engine)","createdAt":"2025-06-02T21:02:18Z","labels":["priority: 2","type: refactor","work: clear","effort: medium"],"number":120,"repository":"sablier-labs/indexers","state":"open","title":"Proposed GraphQL schema changes","type":"issue","updatedAt":"2025-06-15T14:47:02Z","url":"https://github.com/sablier-labs/indexers/issues/120"},{"author":"PaulRBerg","body":"During my [queries refactor in the Interfaces repo](https://github.com/sablier-labs/interfaces/issues/1652), I realized that we really don't need the `chainId` in The Graph indexers. We can remove it and gain a little indexing speed (as well as a simplified mapping implementation).\n\nWe can dynamically generate the `where` variables for Envio, and include the `chainId` only in those queries.","createdAt":"2025-06-01T11:36:30Z","labels":["priority: 2","type: refactor","work: clear","effort: medium"],"number":119,"repository":"sablier-labs/indexers","state":"closed","title":"Remove \"chainId\" from The Graph schema","type":"issue","updatedAt":"2025-06-02T21:52:13Z","url":"https://github.com/sablier-labs/indexers/issues/119"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/indexers/issues/97#issuecomment-2915907384","createdAt":"2025-05-28T11:08:13Z","labels":["effort: high","priority: 1","type: test","work: complicated"],"number":117,"repository":"sablier-labs/indexers","state":"open","title":"Write unit tests for Envio","type":"issue","updatedAt":"2025-05-28T11:08:13Z","url":"https://github.com/sablier-labs/indexers/issues/117"},{"author":"PaulRBerg","body":"We can remove these boilerplate types:\n\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow-envio/src/types/remap.ts#L56-L141\n\nAnd instead use the `_loader` and `_handler` types that are dynamically generated by Envio\n\nSee https://github.com/enviodev/hyperindex/discussions/539\n\n","createdAt":"2025-05-20T13:25:07Z","labels":["priority: 1","type: refactor","work: clear","effort: medium"],"number":115,"repository":"sablier-labs/indexers","state":"open","title":"Simplify loader and handler typings","type":"issue","updatedAt":"2025-05-20T13:25:16Z","url":"https://github.com/sablier-labs/indexers/issues/115"},{"author":"PaulRBerg","body":"## Problem\n\nA `Batch` entity is created even when a single stream is created in a transaction.\n\nThis pollutes our indexers' databases with junk data that is not useful for anything.\n\n## Potential Solution\n\nRemove the `Batch` entity after all handlers are executed by using:\n\n```typescript\nimport { store } from \"@graphprotocol/graph-ts\";\n\nstore.remove(\"Batch\", batchId);\n```\n\nThe trick is that this 'afterAll' functionality may be missing from The Graph/Envio. I've asked about this in [The Graph's Discord](https://discord.com/channels/438038660412342282/438070183794573313/1373640888781377626).\n\nI'll follow up here if I obtain an answer.\n\n## Related\n\n- https://github.com/sablier-labs/indexers/discussions/107\n- https://github.com/sablier-labs/indexers/issues/112","createdAt":"2025-05-18T12:51:05Z","labels":["priority: 2","work: complicated","type: perf"],"number":114,"repository":"sablier-labs/indexers","state":"open","title":"Reducing the number of `Batch` entities created","type":"issue","updatedAt":"2025-05-18T12:51:05Z","url":"https://github.com/sablier-labs/indexers/issues/114"},{"author":"PaulRBerg","body":"## Implementation\n\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow/src/helpers/batch.ts#L22-L40\n\n## Problem\n\nThis implementation does not take into account the following scenario:\n\n- Same transaction `T`\n- Batch `B1` funded by Alice and with sender John within transaction `T`\n- Batch `B2` funded by Alice and with sender Mary within transaction `T`\n- The indexer will create `B1` correctly, but not `B2`\n- `B2` will not exist because the `B1` entity will be loaded instead for the same `id` (which is the tx hash)\n\nThis can happen when a Safe uses the Transaction Builder to call [`SablierBatchLockup`](https://github.com/sablier-labs/lockup/blob/d85521f5615f6c19612ff250ee89c57b9afa6aa2/src/SablierBatchLockup.sol) multiple times within the same tx.\n\n## Solution\n\nInclude the chain ID and the sender address in the `Batch`, like so: `chainId-txHash-sender` (related: https://github.com/sablier-labs/indexers/issues/109)\n\n> [!NOTE]\n> There's also the (unlikely) scenario in which there are different funders AND senders in the same transaction. To address this, we would have to include the funder address in the ID. However, I think it should be fine to treat all sender-controlled batches as part of a single batch, regardless of their funder?\n","createdAt":"2025-05-18T11:42:32Z","labels":["priority: 2","effort: low","type: bug","work: clear"],"number":112,"repository":"sablier-labs/indexers","state":"open","title":"The Batch implementation doesn't handle multi-batches created in the same transaction","type":"issue","updatedAt":"2025-05-19T10:08:48Z","url":"https://github.com/sablier-labs/indexers/issues/112"},{"author":"PaulRBerg","body":"The `context` object in Envio provides a `log` functionality.\n\nFrom the [Envio docs](https://docs.envio.dev/docs/HyperIndex/logging):\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/23e0703b-5b9e-4511-9e64-4a2bba8a3dc5\" />\n\n","createdAt":"2025-05-17T13:33:38Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":110,"repository":"sablier-labs/indexers","state":"open","title":"Use idiomatic way of logging errors in Envio","type":"issue","updatedAt":"2025-06-17T19:03:24Z","url":"https://github.com/sablier-labs/indexers/issues/110"},{"author":"razgraf","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/107\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** May 16, 2025</sup>\n\nThe entities for The Graph do not contain the `chainId`.\n\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow-envio/src/helpers/batch.ts#L60-L72\n\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow/src/helpers/batch.ts#L51-L57</div>","createdAt":"2025-05-17T12:03:37Z","labels":["priority: 3","effort: low","type: bug","work: clear"],"number":109,"repository":"sablier-labs/indexers","state":"open","title":"Add `chainId` to the ID of the Batch entity in The Graph","type":"issue","updatedAt":"2025-06-03T12:04:28Z","url":"https://github.com/sablier-labs/indexers/issues/109"},{"author":"PaulRBerg","body":"It is not possible to restart a voided stream, so this logic is redundant:\n\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow/src/mappings/handle-stream.ts#L293-L295\n\nhttps://github.com/sablier-labs/indexers/blob/f23d7f309cf0b80466f39e815af938fc6286541e/apps/flow-envio/src/mappings/stream-restart.ts#L94-L96","createdAt":"2025-05-17T09:43:38Z","labels":["priority: 3","effort: low","work: clear","type: perf"],"number":108,"repository":"sablier-labs/indexers","state":"open","title":"Nullifying the `voided` fields in the restart handler is redundant","type":"issue","updatedAt":"2025-05-17T09:43:38Z","url":"https://github.com/sablier-labs/indexers/issues/108"},{"author":"PaulRBerg","body":"After #92 is merged, update this:\n\nhttps://docs.envio.dev/docs/HyperIndex/example-sablier","createdAt":"2025-05-16T07:55:42Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":106,"repository":"sablier-labs/indexers","state":"open","title":"Update Envio docs about Sablier once the refactor PR is merged","type":"issue","updatedAt":"2025-05-16T07:55:53Z","url":"https://github.com/sablier-labs/indexers/issues/106"},{"author":"PaulRBerg","body":"### Reported in https://github.com/sablier-labs/indexers/discussions/102\n\nThe Envio indexes only Flow v1.0 contracts","createdAt":"2025-05-14T13:53:14Z","labels":["priority: 0","effort: low","type: bug","work: clear"],"number":104,"repository":"sablier-labs/indexers","state":"closed","title":"Index both Flow v1.0 and Flow v1.1 in Envio indexers","type":"issue","updatedAt":"2025-05-14T13:53:59Z","url":"https://github.com/sablier-labs/indexers/issues/104"},{"author":"razgraf","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/102\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** May 14, 2025</sup>\n@razgraf @gavriliumircea\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/c45d9d337e7f1483fc7d49fc7c133d33c56cb09f/apps/flow-envio/config.template.mustache#L34-L50</div>","createdAt":"2025-05-14T12:14:15Z","labels":[],"number":103,"repository":"sablier-labs/indexers","state":"closed","title":"Add Flow 1.1 in Envio's manifest","type":"issue","updatedAt":"2025-05-14T15:16:45Z","url":"https://github.com/sablier-labs/indexers/issues/103"},{"author":"PaulRBerg","body":"Loading the asset on every call to the `toScaled` is a wasteful operation:\n\nhttps://github.com/sablier-labs/indexers/blob/c45d9d337e7f1483fc7d49fc7c133d33c56cb09f/apps/flow/src/utils/index.ts#L5-L10\n\nIt would be much more efficient to store the ERC-20 token decimals alongside the `asset` entity:\n\nhttps://github.com/sablier-labs/indexers/blob/c45d9d337e7f1483fc7d49fc7c133d33c56cb09f/apps/flow/schema.graphql#L152-L153\n\nLike so:\n\n```graphql\n\"\"\"\nERC-20 token decimals. Stored here to avoid loading the asset entity on each stream.\n\"\"\"\nassetDecimals: BigInt!\n```","createdAt":"2025-05-13T19:08:03Z","labels":["priority: 1","effort: low","work: clear","type: perf"],"number":101,"repository":"sablier-labs/indexers","state":"open","title":"Store asset decimals in `FlowStream` entity to avoid loading the asset on every `toScaled` operation","type":"issue","updatedAt":"2025-05-13T19:08:17Z","url":"https://github.com/sablier-labs/indexers/issues/101"},{"author":"PaulRBerg","body":"This Berachain address is listed in the indexers:\n\nhttps://github.com/sablier-labs/indexers/blob/c45d9d337e7f1483fc7d49fc7c133d33c56cb09f/packages/constants/src/addresses/berachain.ts#L32-L35\n\nThe comment is wrong because it's not a matter of contracts that were never deployed — it's that the listed address [does not exist](https://berascan.com/address/0x7a34159cf99f0e04596b7c93c96ff390d806e3be). It was a mistake we made in the docs.\n\nP.S. errors like this would no longer be possible if we move away from the initializer pattern — I've already started the refactor today.\n\n@razgraf ","createdAt":"2025-05-06T14:55:45Z","labels":["priority: 1","effort: low","type: bug","work: clear"],"number":98,"repository":"sablier-labs/indexers","state":"open","title":"Inexistent \"MerkleStreamerFactory\" on Berachain","type":"issue","updatedAt":"2025-05-06T14:55:45Z","url":"https://github.com/sablier-labs/indexers/issues/98"},{"author":"PaulRBerg","body":"Docs here: https://thegraph.com/docs/en/subgraphs/developing/creating/unit-testing-framework/#logging","createdAt":"2025-05-05T13:02:13Z","labels":["effort: high","priority: 1","type: test","work: complicated"],"number":97,"repository":"sablier-labs/indexers","state":"closed","title":"Write unit tests for The Graph subgraphs using Matchstick","type":"issue","updatedAt":"2025-07-14T13:11:50Z","url":"https://github.com/sablier-labs/indexers/issues/97"},{"author":"PaulRBerg","body":"It looks like the latest version is v1.3.0 now:\n\nhttps://thegraph.com/docs/en/subgraphs/developing/creating/subgraph-manifest/#specversion-releases","createdAt":"2025-05-05T11:34:47Z","labels":["priority: 2","type: build","work: complicated"],"number":96,"repository":"sablier-labs/indexers","state":"open","title":"Upgrade to SpecVersion v1.3.0 for The Graph","type":"issue","updatedAt":"2025-05-05T11:34:47Z","url":"https://github.com/sablier-labs/indexers/issues/96"},{"author":"PaulRBerg","body":"From the [The Graph's docs](https://thegraph.com/docs/en/subgraphs/developing/creating/subgraph-manifest/):\n\n>  `dataSources.mapping.blockHandlers`\n> lists the blocks this Subgraph reacts to and handlers in the mapping to run when a block is appended to the chain. Without a filter, the block handler will be run every block.\n> An optional call-filter can be provided by adding a `filter` field with `kind: call` to the handler.","createdAt":"2025-05-05T09:51:28Z","labels":["priority: 1","effort: low","work: clear","type: perf"],"number":95,"repository":"sablier-labs/indexers","state":"closed","title":"Add block handler of kind `call` to optimizer subgraphs","type":"issue","updatedAt":"2025-05-06T08:59:56Z","url":"https://github.com/sablier-labs/indexers/issues/95"},{"author":"PaulRBerg","body":"It is now possible to deploy multiple subgraphs with one command.\n\nSee [Deploying the Subgraph to multiple networks](https://thegraph.com/docs/en/subgraphs/developing/deploying/multiple-networks/#deploying-the-subgraph-to-multiple-networks).","createdAt":"2025-05-04T13:03:39Z","labels":["priority: 1","work: complicated","type: refactor","effort: medium"],"number":93,"repository":"sablier-labs/indexers","state":"closed","title":"Use a \"chains.json\" config file to simplify deployments to multiple chains","type":"issue","updatedAt":"2025-06-02T21:04:16Z","url":"https://github.com/sablier-labs/indexers/issues/93"},{"author":"PaulRBerg","body":"It's 421614, not 421613\n\nhttps://chainlist.org/chain/421614","createdAt":"2025-05-02T16:43:50Z","labels":["priority: 1","effort: low","type: bug","work: clear"],"number":91,"repository":"sablier-labs/indexers","state":"closed","title":"Incorrect chain ID for Arbitrum Sepolia","type":"issue","updatedAt":"2025-05-14T15:16:46Z","url":"https://github.com/sablier-labs/indexers/issues/91"},{"author":"PaulRBerg","body":"I noticed that I am getting  warnings when running `prettier-fix` in the Envio indexers.\n\nThe fix is to explicitly define the import sorting plugin like so:\n\n```yml\nplugins:\n  - \"@trivago/prettier-plugin-sort-imports\"\n```","createdAt":"2025-05-01T13:07:53Z","labels":["priority: 1","effort: low","type: bug","work: clear"],"number":89,"repository":"sablier-labs/indexers","state":"closed","title":"Define import sorting plugin for Prettier","type":"issue","updatedAt":"2025-06-02T21:06:38Z","url":"https://github.com/sablier-labs/indexers/issues/89"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/85\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** May  1, 2025</sup>\ncc @razgraf @gavriliumircea\r\n\r\nI couldn't find any information about these git ignore paths in the Envio docs. Why do we use them?\r\n\r\nIgnoring so many paths is an error-prone approach because it can lead to git ignoring files that should not be git ignored. When so many files have to be git ignored, it is typically better to target specific directories.\r\n\r\nhttps://github.com/sablier-labs/indexers/blob/07b3166a41bda559f94ac5026f038efdbd8fb6fc/.gitignore#L51-L81</div>","createdAt":"2025-05-01T09:55:32Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":87,"repository":"sablier-labs/indexers","state":"open","title":"Remove verbose paths in `.gitignore`","type":"issue","updatedAt":"2025-05-01T09:55:32Z","url":"https://github.com/sablier-labs/indexers/issues/87"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/indexers/discussions/84\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** May  1, 2025</sup>\nQuestion for @razgraf @gavriliumircea\r\n\r\nThese `.cache `directories appear to be auto-generated\r\n\r\ne.g. https://github.com/sablier-labs/indexers/tree/main/apps/flow-envio/.cache\r\n</div>","createdAt":"2025-05-01T09:43:06Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":86,"repository":"sablier-labs/indexers","state":"open","title":"Rename `.cache` directory to something else","type":"issue","updatedAt":"2025-05-01T09:43:06Z","url":"https://github.com/sablier-labs/indexers/issues/86"},{"author":"PaulRBerg","body":"\"Indexers\" would be a better fit, especially now that the `@sablier/deployments` package exports an `indexer` object.\n\nIs this repo linked to The Graph explorer in any way, @gavriliumircea?","createdAt":"2025-04-30T10:26:00Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":83,"repository":"sablier-labs/indexers","state":"closed","title":"Suggestion to rename this repo to \"indexers\"","type":"issue","updatedAt":"2025-05-01T08:57:19Z","url":"https://github.com/sablier-labs/indexers/issues/83"},{"author":"PaulRBerg","body":"or maybe this should stay in the Interfaces repo — for faster development? 🤔","createdAt":"2025-04-28T17:49:52Z","labels":["priority: 1","work: clear","type: feature","effort: medium"],"number":141,"repository":"sablier-labs/indexers","state":"closed","title":"Type field for preference of indexers (subgraph or envio)","type":"issue","updatedAt":"2025-06-11T11:53:06Z","url":"https://github.com/sablier-labs/indexers/issues/141"},{"author":"PaulRBerg","body":"https://github.com/enviodev/docs/issues/619","createdAt":"2025-04-22T10:36:50Z","labels":["priority: 3","effort: low","type: bug","work: clear"],"number":140,"repository":"sablier-labs/indexers","state":"open","title":"Write a test to check Envio unsupported chains","type":"issue","updatedAt":"2025-07-14T15:05:38Z","url":"https://github.com/sablier-labs/indexers/issues/140"},{"author":"PaulRBerg","body":"## Task\n\nSee [announcement on X](https://x.com/Sablier/status/1914326014995620114).\n\nThe fee-less contracts are:\n\n- Lockup v1.0\n- Lockup v1.1\n- Lockup v1.2\n- Flow v1.0\n\nI recommend implementing this at the same with #75 and #92 because we will have to mention the specific versions deprecated in our public announcement.\n\n> [!NOTE]\n> V2 Periphery is part of the old Lockup releases.\n\n## Exemptions\n\n- [`esEXA`](https://optimistic.etherscan.io/address/0xbea586A167853ADddEF12818f264f1F9823fBc18)","createdAt":"2025-04-18T10:04:18Z","labels":["effort: high","priority: 1","work: clear","type: feature"],"number":82,"repository":"sablier-labs/indexers","state":"open","title":"Stop indexing stream creation events of fee-less contracts after June 23th","type":"issue","updatedAt":"2025-06-23T14:54:59Z","url":"https://github.com/sablier-labs/indexers/issues/82"},{"author":"razgraf","body":"We're using the first ever deployed contract to kick-start indexing on every chain.\n\nProblem: if the first ever contract does not have activity it blocks newer releases from being indexed. For example, if the first version `A1` of Airdrops on chain `C` doesn't have any campaigns, and we release a new version `A2` which starts having campaigns created, `A2` will not get indexed because the system still waits for `A1` to kick-start with its first event.\n\nThe solution is to probably add all contracts as initializers.\n\nThe hotfix, until we introduce this solution, is to move the first contract that has activity as first in line to make that one the initializer.","createdAt":"2025-04-09T12:27:07Z","labels":[],"number":81,"repository":"sablier-labs/indexers","state":"closed","title":"Attempt initialization on all contracts","type":"issue","updatedAt":"2025-06-02T21:05:25Z","url":"https://github.com/sablier-labs/indexers/issues/81"},{"author":"PaulRBerg","body":"Ref https://github.com/sablier-labs/interfaces/issues/1541#issuecomment-2775008131","createdAt":"2025-04-03T09:39:37Z","labels":["priority: 1","work: clear","type: feature","effort: medium"],"number":80,"repository":"sablier-labs/indexers","state":"open","title":"Index protocol admins in all contracts","type":"issue","updatedAt":"2025-04-03T09:39:37Z","url":"https://github.com/sablier-labs/indexers/issues/80"},{"author":"PaulRBerg","body":"Ref https://github.com/sablier-labs/interfaces/issues/1541#issuecomment-2775008131","createdAt":"2025-04-03T09:39:13Z","labels":["priority: 1","work: clear","type: feature","effort: medium"],"number":79,"repository":"sablier-labs/indexers","state":"open","title":"Index minimum fees in \"FactoryMerkle\" contracts","type":"issue","updatedAt":"2025-04-03T09:39:13Z","url":"https://github.com/sablier-labs/indexers/issues/79"},{"author":"PaulRBerg","body":"## Problem\n\nThe Dashboard currently doesn't display the total number of outgoing or incoming streams for a Sablier user.\n\nSimilarly, when using the Search, there's no information about the total number of streams associated with that token.\n\nThis is problematic because:\n\n1. Users may want to know these total figures for general informational purposes, e.g., accounting.\n2. For billing purposes, we (Sablier Labs staff) may want to be able to quickly find out how many streams were created by a particular user.\n\n## Solution\n\n- [ ] Counter for total number of **incoming** streams **by token** and **by address** (as recipient)\n- [ ] Counter for total number of **outgoing** streams **by token** and **by address** (as sender)\n- [ ] Counter for total number of streams created for a **particular token**","createdAt":"2025-04-01T14:07:25Z","labels":["priority: 2","work: clear","type: feature"],"number":78,"repository":"sablier-labs/indexers","state":"open","title":"Counter for total number of streams in Lockup and Flow","type":"issue","updatedAt":"2025-04-01T14:31:24Z","url":"https://github.com/sablier-labs/indexers/issues/78"},{"author":"PaulRBerg","body":"The subgraphs are still using the old versioning system (Lockup V2.0, V2.1, etc.):\n\nhttps://github.com/sablier-labs/subgraphs/blob/fb61186d334f07899e4d1529f63c0b39d1ff8fef/apps/lockup/src/mappings/handle-initializer.ts#L2-L14\n\nWe should switch to using the package-tethering approach, i.e., Lockup v1.2, v2.0, etc.","createdAt":"2025-03-18T19:47:07Z","labels":["priority: 1","type: refactor","work: clear","effort: medium"],"number":75,"repository":"sablier-labs/indexers","state":"open","title":"Use package-tethering versioning system","type":"issue","updatedAt":"2025-03-18T19:47:07Z","url":"https://github.com/sablier-labs/indexers/issues/75"},{"author":"PaulRBerg","body":"<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0af24841-5dca-4650-89bb-3c76869dce6b\" />","createdAt":"2025-02-12T15:21:08Z","labels":["priority: 0","effort: low","type: build","work: clear"],"number":70,"repository":"sablier-labs/indexers","state":"open","title":"Create GitHub releases to notify integrators","type":"issue","updatedAt":"2025-02-13T17:54:10Z","url":"https://github.com/sablier-labs/indexers/issues/70"},{"author":"PaulRBerg","body":"The CHANGELOG files still refer to the old versioning system (V2.2, V2.1, V2.0) instead of the current one (Lockup v1.0, v1.1, v1.2, and v2.0)","createdAt":"2025-02-03T10:24:40Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":67,"repository":"sablier-labs/indexers","state":"open","title":"Update CHANGELOG versions according to package tethering","type":"issue","updatedAt":"2025-02-03T10:24:40Z","url":"https://github.com/sablier-labs/indexers/issues/67"},{"author":"PaulRBerg","body":"The CHANGELOG files in this repository do not follow an industry standard format.\n\nIn Lockup, we use Common Changelog:\n\nhttps://github.com/sablier-labs/lockup/blob/835cac359e03700cfd713313991e9430d8760c42/CHANGELOG.md","createdAt":"2025-02-03T10:23:47Z","labels":["priority: 2","type: docs","work: clear","effort: medium"],"number":66,"repository":"sablier-labs/indexers","state":"closed","title":"Use Common Changelog format for the CHANGELOG files","type":"issue","updatedAt":"2025-06-17T14:00:22Z","url":"https://github.com/sablier-labs/indexers/issues/66"},{"author":"andreivladbrg","body":"For reference, see [this](https://github.com/sablier-labs/solsab/blob/43adadb875d6be9009753443b7270261b0221a69/programs/lockup/src/lib.rs) and [this](https://github.com/sablier-labs/solsab/blob/main/programs/merkle_instant/src/lib.rs)\n\nThe Solana programs should be added to https://docs.sablier.com/reference/overview","createdAt":"2025-08-14T12:20:21Z","labels":["effort: medium","priority: 1","type: docs","work: clear"],"number":345,"repository":"sablier-labs/docs","state":"open","title":"Add script to autogen the Solana program reference from the rust comments","type":"issue","updatedAt":"2025-08-14T14:45:44Z","url":"https://github.com/sablier-labs/docs/issues/345"},{"author":"smol-ninja","body":"### Custom Prompt for Algolia\n\nPlay around with the [Algolia system prompt](https://dashboard.algolia.com/apps/9L7N2RKHWE/ask-ai/stats/0a832f3a-519c-4438-ba92-80a1d96d1733) to identify the best instruction for creating good responses in the docs.\n\nA **best instruction**, imo, should create responses as insightful and helpful as us (the team). A strong response should go to lengths beyond answering the direct question, it should also provide additional indirectly helpful information to the user. \n\nFor example:\n\n**Q**: Can I create a stream with a non-transferable token?\n\nAn excellent answer would mention that its possible, but also include additional details such as importance of whitelisting the contract, specify contracts for both Lockup and Flow, highlight potential issues such as user unable withdraw funds if transferability is disabled etc.\n\nThis [Prompting 101 from Anthropic](https://www.youtube.com/watch?v=ysPbXH0LpIE) could be a useful.\n\n### Selection of OpenAI Model\n\nExperiment with different models from OpenAI. You can select them in the [Algolia dashboard](https://dashboard.algolia.com/apps/9L7N2RKHWE/ask-ai/stats/0a832f3a-519c-4438-ba92-80a1d96d1733).\n\nThe pricing for different models can be reviewed [here](https://platform.openai.com/docs/pricing?latest-pricing=standard). The objective is to identify the most cost-effective model that still delivers high quality responses. Some of OpenAI's latest models, such as GPT-5 mini, are even more affordable and better than the GPT-4o model (which is currently used).","createdAt":"2025-08-08T15:41:11Z","labels":["priority: 2","effort: high","type: perf","work: complicated"],"number":344,"repository":"sablier-labs/docs","state":"open","title":"Improve AI responses on docs","type":"issue","updatedAt":"2025-08-08T19:53:28Z","url":"https://github.com/sablier-labs/docs/issues/344"},{"author":"PaulRBerg","body":"They look pretty random\n\nI confused the bottom-right corner circle with the AI chat box, thinking it's a bug\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/08839a11-8c19-431c-86fc-1f52f4f516c3\" />\n\n@razgraf @smol-ninja","createdAt":"2025-08-08T15:23:14Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":343,"repository":"sablier-labs/docs","state":"open","title":"Remove blue circle SVGs from the landing page","type":"issue","updatedAt":"2025-08-08T15:23:14Z","url":"https://github.com/sablier-labs/docs/issues/343"},{"author":"smol-ninja","body":"| Query | Chef AI | ChatGPT |\n| -- | -- | -- |\n| <img width=\"552\" height=\"147\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5c0cc3aa-eba8-4435-b983-3492cae47e0f\" /> | <img width=\"733\" height=\"657\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d5b3c840-c9fe-41d6-a50f-c370709c42a1\" /> | <img width=\"805\" height=\"708\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/56d57e68-25da-4856-aabf-fe47d9198f83\" /> |\n\nIts evident that ChatGPT (or any other popular LLM) is better at responding compared to Chef AI. `Ask in ChatGPT` button can be added to every page (e.g. [Foundry](https://getfoundry.sh/introduction/getting-started) and [Pimlico](https://docs.pimlico.io/guides/getting-started)) redirecting users to the ChatGPT interface with a prefilled prompt.\n\n```text\nPlease research and analyze this page: https://docs.sablier.com/concepts/use-cases so I can ask you questions about it.\nOnce you have read it, prompt me with any questions I have. Do not post content from the page in your response. Any of\nmy follow up questions must reference the site I gave you.\n```\n<img width=\"213\" height=\"106\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d84145a2-951b-45e8-8a86-80da22b194b8\" />\n\nChatGPT does a good job analyzing all the pages even when you just give it https://docs.sablier.com/ instead of the specific page. The response in the above screenshot was generated by referring to the docs website and not any specific page.\n\nThoughts @maxdesalle and @PaulRBerg?","createdAt":"2025-08-06T09:37:44Z","labels":["priority: 2","type: feature","effort: low","work: clear"],"number":341,"repository":"sablier-labs/docs","state":"closed","title":"Replace Chef AI's \"Ask Sablier\" with \"Ask in ChatGPT\"","type":"issue","updatedAt":"2025-08-08T19:16:49Z","url":"https://github.com/sablier-labs/docs/issues/341"},{"author":"PaulRBerg","body":"<img width=\"284\" height=\"51\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9ea22cb2-a819-40ba-a45c-948655a631df\" />","createdAt":"2025-08-04T14:45:54Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":340,"repository":"sablier-labs/docs","state":"closed","title":"Remove \"| Sablier\" from HTML title","type":"issue","updatedAt":"2025-08-04T15:44:02Z","url":"https://github.com/sablier-labs/docs/issues/340"},{"author":"smol-ninja","body":"The instructions on the [campaign verification page](https://docs.sablier.com/guides/airdrops/verify-campaign) assume that an EOA interacted with the Factory contract directly to create the campaign. If a Gnosis SAFE is used to create the campaign, then the instructions don't work. In that case, the hack is to verify another similar campaign that was created using an EOA and then etherscan verifies Gnosis created campaign automatically based on \"matching source code\" criterion. \n\nThe actual solution is the following:\n\n1. Go to [`tx eventlog`](https://optimistic.etherscan.io/tx/0xaa6de14852bb9b86bd4acf62bbadfd4cd339328a1e692318bdcc898cce58d1db#eventlog) on Etherscan.\n2. Identify `data`.\n\n<img width=\"1035\" height=\"288\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f0f68148-8023-491a-915d-a9d29c5c3c26\" />\n\n3. Use that value of `data` as the input data in [Step 3](https://docs.sablier.com/guides/airdrops/verify-campaign#step-3-copy-the-input-data-and-campaign-creator-address).\n4. Use Gnosis SAFE address as the campaign creator address in [Step 3](https://docs.sablier.com/guides/airdrops/verify-campaign#step-3-copy-the-input-data-and-campaign-creator-address).","createdAt":"2025-08-01T10:27:02Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":338,"repository":"sablier-labs/docs","state":"closed","title":"Add assumptions on the campaign verification page","type":"issue","updatedAt":"2025-08-04T10:19:47Z","url":"https://github.com/sablier-labs/docs/issues/338"},{"author":"PaulRBerg","body":"Maybe in the FAQ or somewhere. We should explain that `BatchLockup` and `Lockup` have to be whitelisted.\n\nThis has become a pattern as of lately:\n\n<img width=\"726\" height=\"144\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ff38897b-af42-4c4c-bf28-69a5e3384ccf\" />","createdAt":"2025-07-10T12:18:23Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":337,"repository":"sablier-labs/docs","state":"closed","title":"Add guide about vesting non-transferable tokens","type":"issue","updatedAt":"2025-08-04T17:30:36Z","url":"https://github.com/sablier-labs/docs/issues/337"},{"author":"PaulRBerg","body":"## Problem\n\nIt's difficult for LLMs and AI agents to consume the Sablier Docs website.\n\n## Solution\n\nProvide the docs as a single Markdown file.\n\nRepomix can be used for this.\n\n### References\n\n- [Repomix](https://repomix.com/)\n- [DeepWiki](https://docs.devin.ai/work-with-devin/deepwiki) (potentially relevant)\n- Example: [Stripe LLM docs](https://docs.stripe.com/building-with-llms)\n\n> [!TIP]\n> Watch this talk by Andrej Karpathy: [Software is Changing (Again)](https://youtu.be/LCEmiRjPEtQ?si=Ku4h1c63J0hdbi8b). Totally worth it.","createdAt":"2025-07-09T14:47:20Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":336,"repository":"sablier-labs/docs","state":"open","title":"Make docs more LLM-friendly through a single Markdown file","type":"issue","updatedAt":"2025-08-08T13:55:20Z","url":"https://github.com/sablier-labs/docs/issues/336"},{"author":"PaulRBerg","body":"So that we don't have to manually maintain it ourselves:\n\nhttps://docs.sablier.com/api/airdrops/merkle-api/functionality","createdAt":"2025-06-13T15:45:39Z","labels":["priority: 2","effort: medium","work: complicated","type: refactor"],"number":335,"repository":"sablier-labs/docs","state":"open","title":"Automatically generate the Merkle API documentation using Swagger or similar tool","type":"issue","updatedAt":"2025-06-13T15:52:21Z","url":"https://github.com/sablier-labs/docs/issues/335"},{"author":"PaulRBerg","body":"It looks bad:\n\n<img width=\"250\" src=\"https://github.com/user-attachments/assets/538f4bf1-cebf-444a-be4e-2d91c2fc408c\"/>","createdAt":"2025-06-13T14:59:22Z","labels":["priority: 3","type: style","effort: low","work: clear"],"number":334,"repository":"sablier-labs/docs","state":"closed","title":"Better arrange (or disable) Cookbot AI on mobile","type":"issue","updatedAt":"2025-08-08T14:51:40Z","url":"https://github.com/sablier-labs/docs/issues/334"},{"author":"PaulRBerg","body":"Docs: https://docusaurus.io/docs/markdown-features/react#mdx-component-scope\n\nWhat should go in there:\n\n- `LinkPreview`\n- `LinkPreviewIndexers`","createdAt":"2025-06-13T14:20:35Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":333,"repository":"sablier-labs/docs","state":"open","title":"Swizzle the ThemeComponents to provide frequently needed components in the global scope","type":"issue","updatedAt":"2025-06-13T14:20:35Z","url":"https://github.com/sablier-labs/docs/issues/333"},{"author":"PaulRBerg","body":"We can delete all \"Entities\"/ \"Queries\" pages (for both The Graph and Envio) by using one of these Markdown generators:\n\n- https://github.com/2fd/graphdoc\n- https://github.com/anvilco/spectaql\n- https://github.com/graphql-markdown/graphql-markdown\n- https://github.com/exogen/graphql-markdown","createdAt":"2025-06-12T17:39:52Z","labels":["effort: medium","priority: 1","work: complicated","type: refactor"],"number":332,"repository":"sablier-labs/docs","state":"open","title":"Automatically generate GraphQL docs","type":"issue","updatedAt":"2025-06-14T13:27:20Z","url":"https://github.com/sablier-labs/docs/issues/332"},{"author":"PaulRBerg","body":"So that users can run queries against the Sablier indexers without leaving [docs.sablier.com](https://docs.sablier.com).","createdAt":"2025-06-12T17:29:34Z","labels":["good first issue","effort: medium","type: feature","work: clear"],"number":331,"repository":"sablier-labs/docs","state":"open","title":"Embed GraphiQL playground in the APIs Endpoints docs using an iframe","type":"issue","updatedAt":"2025-06-12T17:29:34Z","url":"https://github.com/sablier-labs/docs/issues/331"},{"author":"PaulRBerg","body":"Instead of maintaining different pages for [The Graph queries](https://docs.sablier.com/api/lockup/the-graph/queries) and the [Envio queries](https://docs.sablier.com/api/lockup/envio/queries), we can instead use Docusaurus' feature [Multi-language support code blocks](https://docusaurus.io/docs/markdown-features/code-blocks#multi-language-support-code-blocks), and display something like this:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/fd5d46b4-10ec-4d06-b8a5-fcf5269fae76\" />","createdAt":"2025-06-12T17:25:07Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":330,"repository":"sablier-labs/docs","state":"closed","title":"Multi-language code blocks for The Graph and Envio queries","type":"issue","updatedAt":"2025-06-12T17:40:13Z","url":"https://github.com/sablier-labs/docs/issues/330"},{"author":"PaulRBerg","body":"The `autogen-reference.sh` script has grown big over time.\n\nIt would be easier to maintain it in TypeScript:\n\nhttps://github.com/sablier-labs/docs/blob/9f2fba0fb3c230df69424490019319dbebb68b91/scripts/autogen.sh","createdAt":"2025-06-11T16:15:49Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":329,"repository":"sablier-labs/docs","state":"open","title":"Turn the `autogen-reference.sh` script into a TypeScript script","type":"issue","updatedAt":"2025-06-11T16:15:49Z","url":"https://github.com/sablier-labs/docs/issues/329"},{"author":"PaulRBerg","body":"The APIs are more relevant than the references in the menu bar.","createdAt":"2025-06-10T12:45:31Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":328,"repository":"sablier-labs/docs","state":"open","title":"Switch order of \"References\" and \"APIs\"","type":"issue","updatedAt":"2025-06-10T12:45:31Z","url":"https://github.com/sablier-labs/docs/issues/328"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/interfaces/issues/1700\n\nWill be done in #308","createdAt":"2025-06-06T19:33:48Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":324,"repository":"sablier-labs/docs","state":"open","title":"Provide Graph API key as \"Authorization: Header\" in request instead of URL string","type":"issue","updatedAt":"2025-06-06T19:33:48Z","url":"https://github.com/sablier-labs/docs/issues/324"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/indexers/pull/92\n\n- [x] Merge the _Overview_ and the _Indexers_ pages\n- [x] Merge the _Development_ and the _Caveats_ pages\n- [x] Move the [Contribute](https://docs.sablier.com/api/development#contribute) section to a `CONTRIBUTING.md` file in the Indexers GitHub repo\n- [x] Rewrite explainer for IDs and aliases","createdAt":"2025-06-06T12:29:33Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":323,"repository":"sablier-labs/docs","state":"open","title":"Update the Indexers docs in light of the PRB refactor","type":"issue","updatedAt":"2025-06-14T12:23:24Z","url":"https://github.com/sablier-labs/docs/issues/323"},{"author":"PaulRBerg","body":"Instead of putting the admins and the fees in the `@sablier/deployments` (which contains only static data at the moment), it would be better to generate the admins and the fees tables dynamically by making requests to JSON-RPC servers.\n\nTo add in https://github.com/sablier-labs/docs/pull/308","createdAt":"2025-06-03T13:13:14Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":322,"repository":"sablier-labs/docs","state":"open","title":"Generate the fees and the admins table dynamically using JSON RPC requests","type":"issue","updatedAt":"2025-06-03T13:13:35Z","url":"https://github.com/sablier-labs/docs/issues/322"},{"author":"smol-ninja","body":"https://docs.sablier.com/apps/guides/csv-support#csv-template-1","createdAt":"2025-06-01T16:39:11Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":320,"repository":"sablier-labs/docs","state":"closed","title":"Rename \"Range\" to \"Timestamps\" on CSV support page","type":"issue","updatedAt":"2025-06-04T11:56:41Z","url":"https://github.com/sablier-labs/docs/issues/320"},{"author":"razgraf","body":"The id / endpoint-slug for Sepolia is not `sablier-flow-ethereum-sepolia`, it's simply `sablier-flow-sepolia`.\n\n<img width=\"783\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1523683b-8c7c-4868-a454-1ee602c55210\" />","createdAt":"2025-05-14T14:23:39Z","labels":[],"number":316,"repository":"sablier-labs/docs","state":"open","title":"Fix endpoint slug for sepolia","type":"issue","updatedAt":"2025-05-14T14:24:02Z","url":"https://github.com/sablier-labs/docs/issues/316"},{"author":"smol-ninja","body":"See https://docs.sablier.com/concepts/flow/overview#lifecycle.\n\n<img width=\"997\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c73c444e-603a-49f8-9a77-5d55ced3f8d7\" />","createdAt":"2025-05-07T10:54:04Z","labels":["priority: 2","type: bug","effort: low","work: clear"],"number":315,"repository":"sablier-labs/docs","state":"closed","title":"Fix the missing diagram on Flow concepts page","type":"issue","updatedAt":"2025-08-04T17:30:36Z","url":"https://github.com/sablier-labs/docs/issues/315"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/interfaces/issues/1556","createdAt":"2025-05-04T10:33:18Z","labels":["priority: 1","effort: high","type: build","work: complicated"],"number":314,"repository":"sablier-labs/docs","state":"open","title":"Replace Prettier and ESlint setup with Biome","type":"issue","updatedAt":"2025-05-04T10:33:18Z","url":"https://github.com/sablier-labs/docs/issues/314"},{"author":"PaulRBerg","body":"So that they don't have to be imported manually anymore\n\nThis can be done by overriding `src/theme/MDXComponents.js`, see the docs:\n\nSee https://docusaurus.io/docs/markdown-features/react","createdAt":"2025-05-01T11:04:20Z","labels":["priority: 3","type: perf","effort: low","work: clear"],"number":313,"repository":"sablier-labs/docs","state":"closed","title":"Make Link and LinkPreview components available in the global scope","type":"issue","updatedAt":"2025-08-04T17:30:36Z","url":"https://github.com/sablier-labs/docs/issues/313"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-28T14:25:38Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":312,"repository":"sablier-labs/docs","state":"open","title":"Use react-hooks ESLint plugin","type":"issue","updatedAt":"2025-04-28T14:25:38Z","url":"https://github.com/sablier-labs/docs/issues/312"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-24T10:33:25Z","labels":["priority: 2","type: feature","effort: low","work: clear"],"number":311,"repository":"sablier-labs/docs","state":"open","title":"Load benchmarks directly from GitHub repo","type":"issue","updatedAt":"2025-04-24T10:33:25Z","url":"https://github.com/sablier-labs/docs/issues/311"},{"author":"PaulRBerg","body":"The gas benchmarks for Flow and Lockup are generated using the [benchmarks](https://github.com/sablier-labs/benchmarks) repository.\n\nHowever, there's no information about:\n\n1. What particular version of that repo was used to generate the benchmarks. A commit hash should be included.\n2. The Flow/Lockup versions for which the benchmarks are provided.","createdAt":"2025-04-23T13:34:53Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":310,"repository":"sablier-labs/docs","state":"closed","title":"Add comments about commit hash used for generating the benchmarks","type":"issue","updatedAt":"2025-04-24T10:33:34Z","url":"https://github.com/sablier-labs/docs/issues/310"},{"author":"IaroslavMazur","body":"There are 2 problems with the following section:\n\n1. It's not clear whether the temperature refers to what/who can cause the change TO or FROM the respective status and\n2. Depending on whether it is TO or FROM, either `Settled` or `Depleted` doesn't belong in the the `Cold` category.\n\nhttps://github.com/sablier-labs/docs/blob/f62a64dbc6b0f93f7f99e30b16dd65b97117ce04/docs/concepts/lockup/05-statuses.md?plain=1#L19-L26","createdAt":"2025-04-22T11:40:50Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":307,"repository":"sablier-labs/docs","state":"closed","title":"Ambiguous description of \"Temperature\" & incorrect temperature grouping","type":"issue","updatedAt":"2025-04-23T11:56:04Z","url":"https://github.com/sablier-labs/docs/issues/307"},{"author":"PaulRBerg","body":"- Skale: never used, never willing to pay for the deployment\n- Berachain Artio: deprecated testnet","createdAt":"2025-04-21T09:39:14Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":305,"repository":"sablier-labs/docs","state":"open","title":"Remove Skale testnet and Berachain Artio","type":"issue","updatedAt":"2025-04-21T09:39:14Z","url":"https://github.com/sablier-labs/docs/issues/305"},{"author":"PaulRBerg","body":"## Problem\n\nPage: https://github.com/sablier-labs/docs/blob/1959c2eeb5e4ca71e2ff65ff530b865ed9ec2c60/docs/guides/lockup/02-deployments.mdx\n\n- Poor developer experience: the rows in the tables no longer fit on a single line\n- There's a lot of repetition\n    - Links like [`core-v1-2-0`](https://github.com/sablier-labs/deployments/blob/main/lockup/v1.2.0/core) are duplicated 148 times\n    - The blockchain explorer is duplicated many times, too\n- The first two issues combined makes this page prone to errors (when errors are made)\n\n## Solution\n\n\nRefactor this:\n\n```markdown\n| Contract            | Address                                                                                                               | Deployment                                                                           |\n| :------------------ | :-------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------- |\n| SablierLockup       | [0x7C01AA3783577E15fD7e272443D44B92d5b21056](https://etherscan.io/address/0x7C01AA3783577E15fD7e272443D44B92d5b21056) | [lockup-v2.0.0](https://github.com/sablier-labs/deployments/blob/main/lockup/v2.0.0) |\n| SablierBatchLockup  | [0x3F6E8a8Cffe377c4649aCeB01e6F20c60fAA356c](https://etherscan.io/address/0x3F6E8a8Cffe377c4649aCeB01e6F20c60fAA356c) | [lockup-v2.0.0](https://github.com/sablier-labs/deployments/blob/main/lockup/v2.0.0) |\n| LockupNFTDescriptor | [0xA9dC6878C979B5cc1d98a1803F0664ad725A1f56](https://etherscan.io/address/0xA9dC6878C979B5cc1d98a1803F0664ad725A1f56) | [lockup-v2.0.0](https://github.com/sablier-labs/deployments/blob/main/lockup/v2.0.0) |\n| Helpers             | [0xf8076E4Fb5cfE8be1C26E61222DC51828Db8C1dc](https://etherscan.io/address/0xf8076E4Fb5cfE8be1C26E61222DC51828Db8C1dc) | [lockup-v2.0.0](https://github.com/sablier-labs/deployments/blob/main/lockup/v2.0.0) |\n| VestingMath         | [0x5522CA06Ce080800AB59BA4C091e63f6f54C5E6d](https://etherscan.io/address/0x5522CA06Ce080800AB59BA4C091e63f6f54C5E6d) | [lockup-v2.0.0](https://github.com/sablier-labs/deployments/blob/main/lockup/v2.0.0) |\n```\n\nInto something like this:\n\n```\nimport DeploymentTable from \"@site/src/snippets/DeploymentTable\";\n\n<DeploymentTable product=\"Lockup\" version=\"v2.0.0\" chain=\"ethereum-mainnet\"/>\n```\n\nAnd the `DeploymentTable` snippet would render the appropriate Markdown table.\n\nIf this doesn't work, we might have to build a React component instead of an MDX snippet.\n\n## Planning\n\nThis task should be implemented AFTER https://github.com/sablier-labs/docs/issues/300.","createdAt":"2025-04-12T13:17:33Z","labels":[],"number":301,"repository":"sablier-labs/docs","state":"open","title":"Use reusable MDX template to DRY-ify the deployment tables","type":"issue","updatedAt":"2025-04-12T13:17:33Z","url":"https://github.com/sablier-labs/docs/issues/301"},{"author":"PaulRBerg","body":"Once we implement it, of course!\n\nhttps://github.com/sablier-labs/deployments/issues/21","createdAt":"2025-04-12T13:17:18Z","labels":["priority: 2","effort: high","work: complicated","type: refactor"],"number":300,"repository":"sablier-labs/docs","state":"open","title":"Source deployment addresses from the Sablier deployment package","type":"issue","updatedAt":"2025-04-12T13:17:18Z","url":"https://github.com/sablier-labs/docs/issues/300"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/interfaces/issues/1572","createdAt":"2025-04-08T19:15:03Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":298,"repository":"sablier-labs/docs","state":"closed","title":"Update airdrop claim fee","type":"issue","updatedAt":"2025-04-12T12:45:33Z","url":"https://github.com/sablier-labs/docs/issues/298"},{"author":"smol-ninja","body":"The [\"About Precision\"](https://github.com/sablier-labs/flow/blob/ba0d774eeb6827e5109ae790407cdc69431e0fa6/TECHNICAL-DOC.md#about-precision) section has been removed from the Flow repo in https://github.com/sablier-labs/flow/pull/431. However, some of its content can be useful for developers into understanding why we use 18 decimals format for RPS and snapshot amount.\n\nTherefore, we should document it somewhere in the Sablier docs (TBD), answering the following questions:\n\n1. Why does RPS use 18 decimals format instead of token's decimals?\n2. Why is scaling and descaling of amounts necessary in deposit and withdraw?\n\n### References\n1. [About Precision section](https://github.com/sablier-labs/flow/blob/ba0d774eeb6827e5109ae790407cdc69431e0fa6/TECHNICAL-DOC.md#about-precision)\n2. https://github.com/sablier-labs/flow/discussions/412","createdAt":"2025-04-08T13:45:35Z","labels":["effort: medium","priority: 3","work: complicated","type: docs"],"number":297,"repository":"sablier-labs/docs","state":"open","title":"Explain the rationale behind 18 decimals format for RPS and snapshot amount","type":"issue","updatedAt":"2025-04-08T13:45:52Z","url":"https://github.com/sablier-labs/docs/issues/297"},{"author":"PaulRBerg","body":"Refs:\n\n- https://github.com/actions/cache/blob/5a3ec84eff668545956fd18022155c47e93e2684/examples.md#bun\n- https://github.com/sablier-labs/reusable-workflows/issues/23","createdAt":"2025-04-03T16:57:04Z","labels":["priority: 2","type: ci","effort: low","work: clear"],"number":294,"repository":"sablier-labs/docs","state":"closed","title":"Cache dependencies in CI","type":"issue","updatedAt":"2025-04-09T07:15:55Z","url":"https://github.com/sablier-labs/docs/issues/294"},{"author":"PaulRBerg","body":"Page: https://docs.sablier.com/concepts/fees\n\nSay something similar to what we say in the create stream form, and add a link to a Google Form:\n\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/3f9828de-42dc-40b6-b4de-c7219dbbd27f\"/>","createdAt":"2025-03-31T14:25:31Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":292,"repository":"sablier-labs/docs","state":"closed","title":"Explain that fees can be subsidized by the sender in the Fees page","type":"issue","updatedAt":"2025-08-04T17:30:37Z","url":"https://github.com/sablier-labs/docs/issues/292"},{"author":"PaulRBerg","body":"Requested by Treehouse:\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/6316c839-4b47-4d91-a63d-8bc11537e87b\"/>\n\nAlso see [GitHub Discussion: UI for approving an NFT operator](https://github.com/sablier-labs/interfaces/discussions/1430)","createdAt":"2025-03-29T11:12:24Z","labels":["priority: 3","type: feature","effort: low","work: clear"],"number":289,"repository":"sablier-labs/docs","state":"open","title":"Tutorial for how to approve NFT operator","type":"issue","updatedAt":"2025-03-29T11:12:30Z","url":"https://github.com/sablier-labs/docs/issues/289"},{"author":"PaulRBerg","body":"We should add a new section called Preview Calldata under [Other Features](https://docs.sablier.com/apps/features/other), and explain how to use the preview calldata feature (which is available when creating Lockup or Flow streams):\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e5469857-6486-448e-8173-8a4756e3a3df\" />","createdAt":"2025-03-29T10:52:12Z","labels":["priority: 3","type: feature","effort: low","work: clear"],"number":288,"repository":"sablier-labs/docs","state":"open","title":"Document preview calldata feature","type":"issue","updatedAt":"2025-03-29T10:52:12Z","url":"https://github.com/sablier-labs/docs/issues/288"},{"author":"smol-ninja","body":"As mentioned in https://github.com/sablier-labs/airdrops/issues/37#issuecomment-2681249131, add diagrams to show different configurations for airdrop distribution. ","createdAt":"2025-02-25T11:08:17Z","labels":["effort: medium","priority: 1","work: complicated","type: docs"],"number":278,"repository":"sablier-labs/docs","state":"open","title":"Add diagrams to show different configurations for airdrop distribution","type":"issue","updatedAt":"2025-08-04T11:18:08Z","url":"https://github.com/sablier-labs/docs/issues/278"},{"author":"PaulRBerg","body":"","createdAt":"2025-02-21T14:06:43Z","labels":["priority: 3","type: feature","effort: low","work: clear"],"number":272,"repository":"sablier-labs/docs","state":"open","title":"Add subgraph endpoints for Berachain and Form Network","type":"issue","updatedAt":"2025-02-21T14:06:43Z","url":"https://github.com/sablier-labs/docs/issues/272"},{"author":"PaulRBerg","body":"Similar to the Lockup guide:\n\nhttps://github.com/sablier-labs/lockup/blob/main/CONTRIBUTING.md","createdAt":"2025-02-21T12:49:44Z","labels":["priority: 3","effort: low","type: docs","work: clear"],"number":271,"repository":"sablier-labs/docs","state":"closed","title":"Add CONTRIBUTING guide","type":"issue","updatedAt":"2025-03-10T17:01:36Z","url":"https://github.com/sablier-labs/docs/issues/271"},{"author":"PaulRBerg","body":"Here:\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ef095259-300b-4bbd-aecc-1113514ce064\" />","createdAt":"2025-02-18T16:51:35Z","labels":["priority: 3","effort: low","type: docs","work: clear"],"number":270,"repository":"sablier-labs/docs","state":"closed","title":"Add new \"config\" column for benchmark tables","type":"issue","updatedAt":"2025-04-23T15:27:21Z","url":"https://github.com/sablier-labs/docs/issues/270"},{"author":"PaulRBerg","body":"Files are named like this: `01-foo`, `02-bar`, etc.\n\nIt'd be helpful to do the same for folders","createdAt":"2025-02-13T19:47:37Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":269,"repository":"sablier-labs/docs","state":"open","title":"Number nested folders just like files are named","type":"issue","updatedAt":"2025-02-13T20:24:36Z","url":"https://github.com/sablier-labs/docs/issues/269"},{"author":"PaulRBerg","body":"What I did here:\n\nhttps://github.com/sablier-labs/community-token-list/commit/87f12fdb3d6214e448499f1327fad7cb132ffa52","createdAt":"2025-02-11T13:59:15Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":268,"repository":"sablier-labs/docs","state":"closed","title":"Rename Sepolia to Ethereum Sepolia","type":"issue","updatedAt":"2025-03-09T15:44:38Z","url":"https://github.com/sablier-labs/docs/issues/268"},{"author":"smol-ninja","body":"Nearly every time, the CI passes on the PR but fails when deploying the `main` branch. Here is [an example](https://github.com/sablier-labs/docs/actions/runs/13238133841/job/36947295430). This is always an issue with code linting.\n\nBy integrating Husky, [similar to Lockup](https://github.com/sablier-labs/lockup/pull/1026), let's automate code linting during the commit.","createdAt":"2025-02-10T10:01:34Z","labels":["priority: 1","type: style","effort: low","work: clear"],"number":267,"repository":"sablier-labs/docs","state":"closed","title":"Integrate Husky into the repo","type":"issue","updatedAt":"2025-03-10T17:54:19Z","url":"https://github.com/sablier-labs/docs/issues/267"},{"author":"PaulRBerg","body":"We should list example Merkle campaigns in the \"Deployment Addresses\" for airdrops:\n\n<img width=\"741\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6b67a65f-217a-424b-8645-cb7df9a2d084\" />\n\nThis is not an easy thing to do, but I think it'd be very helpful, for two reasons:\n\n1. Transparency and documentation for all our airdrop contracts\n\n2. It'd solve the problem of source code verification for Merkle contracts — there have been several cases in which users pinged us manually to verify the Merkle contract code.\n\nAchieving this would require us to deploy some dummy campaigns every time `MerkleFactory` is deployed, but I think it's worth it.\n\ncc @sablier-labs/evm","createdAt":"2025-02-07T11:46:39Z","labels":["priority: 2","effort: epic","type: feature","work: clear"],"number":265,"repository":"sablier-labs/docs","state":"open","title":"List example Merkle campaigns in the \"Deployment Addresses\" for airdrops","type":"issue","updatedAt":"2025-02-11T12:55:52Z","url":"https://github.com/sablier-labs/docs/issues/265"},{"author":"PaulRBerg","body":"Document the new \"Recent activity\" section in:\n\n- https://docs.sablier.com/apps/features/overview\n- https://docs.sablier.com/apps/features/airdrops\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/449a0d39-98cf-4d8a-bca4-576b58ecf0ea\" />","createdAt":"2025-02-06T14:56:14Z","labels":["priority: 2","type: feature","effort: low","work: clear"],"number":263,"repository":"sablier-labs/docs","state":"open","title":"Document recent activity section in Apps Overview + Airdrops","type":"issue","updatedAt":"2025-02-06T14:56:14Z","url":"https://github.com/sablier-labs/docs/issues/263"},{"author":"PaulRBerg","body":"We have decided to set the `defaultFee` to ~$1.\n\nThe only chains that won't have a fee are:\n\n- Tangle (the $TNT token is not tradable yet)\n- IoTeX (low usage)\n\nURL to update: https://docs.sablier.com/concepts/fees\n\nWe need a Markdown table with the fee amounts in each chain's gas token (ETH, POL, etc.)","createdAt":"2025-02-05T17:56:39Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":261,"repository":"sablier-labs/docs","state":"closed","title":"Add table with `MerkleFactory` fee values","type":"issue","updatedAt":"2025-02-11T12:55:28Z","url":"https://github.com/sablier-labs/docs/issues/261"},{"author":"PaulRBerg","body":"The table should have four columns:\n\n- Name\n- Chain ID\n- Gas token\n- Decimals of gas token\n- Link to explorer\n\nThis will be helpful for both internal and external purposes.","createdAt":"2025-02-05T17:53:13Z","labels":["priority: 2","type: feature","effort: low","work: clear"],"number":260,"repository":"sablier-labs/docs","state":"closed","title":"Add a table with all the chains Sablier is available on","type":"issue","updatedAt":"2025-03-12T16:11:16Z","url":"https://github.com/sablier-labs/docs/issues/260"},{"author":"PaulRBerg","body":"@sablier-labs/solidity could you please add the admins on the new chains?\n\nhttps://docs.sablier.com/concepts/governance#admins","createdAt":"2025-02-05T15:27:03Z","labels":["priority: 3","type: feature","effort: low","work: clear"],"number":257,"repository":"sablier-labs/docs","state":"closed","title":"Add admins on all chains","type":"issue","updatedAt":"2025-02-05T17:31:46Z","url":"https://github.com/sablier-labs/docs/issues/257"},{"author":"smol-ninja","body":"### Repo\n- https://github.com/sablier-labs/benchmarks\n\n### Pages\n1. https://docs.sablier.com/guides/lockup/gas-benchmarks\n2. https://docs.sablier.com/guides/flow/gas-benchmarks","createdAt":"2025-02-05T13:28:35Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":256,"repository":"sablier-labs/docs","state":"closed","title":"Refer to `benchmarks` repo for gas reference","type":"issue","updatedAt":"2025-03-24T22:49:54Z","url":"https://github.com/sablier-labs/docs/issues/256"},{"author":"PaulRBerg","body":"## Problem\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/48331312-df37-4b78-8301-516d6f715ff8\" />\n\n## Solution\n\n1. Do nothing (not a big deal)\n2. Add \"Contract/Library\" in the column name\n3. Add a new table that has \"Library\" in the column name\n\nWDYT @sablier-labs/solidity?","createdAt":"2025-02-04T18:34:13Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":255,"repository":"sablier-labs/docs","state":"closed","title":"Library addresses documented as contracts","type":"issue","updatedAt":"2025-02-05T12:51:07Z","url":"https://github.com/sablier-labs/docs/issues/255"},{"author":"PaulRBerg","body":"Replace all `LL`/ `LockupLinear` examples with `LK`/ `Lockup`.\n\nhttps://docs.sablier.com/apps/guides/url-schemes","createdAt":"2025-02-04T17:32:14Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":253,"repository":"sablier-labs/docs","state":"open","title":"Update the URL Schemes with fresh examples","type":"issue","updatedAt":"2025-03-20T15:57:54Z","url":"https://github.com/sablier-labs/docs/issues/253"},{"author":"PaulRBerg","body":"The following sections of the [CSV guide](https://docs.sablier.com/apps/guides/csv-support) are superfluous and difficult to maintain:\n\n- Form Layout\n- Working with the CSV Template\n\nI call them 'superfluous' because it really is the job of the UI to hand-hold the user through the CSV upload. Posting screenshots that are annotated with explanations that (basically) repeat what it is said in the app does not seem helpful to me.\n\nOf course, we will keep the CSV templates, but the rest can be removed.\n\ncc @sablier-labs/frontend","createdAt":"2025-02-04T16:53:40Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":252,"repository":"sablier-labs/docs","state":"closed","title":"Simplify the CSV support guide by removing superfluous and difficult-to-maintain sections","type":"issue","updatedAt":"2025-02-06T14:58:15Z","url":"https://github.com/sablier-labs/docs/issues/252"},{"author":"PaulRBerg","body":"There have been some changes in the CSV features:\n\n- New design: https://github.com/sablier-labs/interfaces/issues/1331\n- New templates supported in Airdrops: Instant, Unlock Linear, etc.","createdAt":"2025-02-04T15:28:45Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":251,"repository":"sablier-labs/docs","state":"open","title":"Update CSV guide","type":"issue","updatedAt":"2025-02-04T15:28:45Z","url":"https://github.com/sablier-labs/docs/issues/251"},{"author":"PaulRBerg","body":"e.g. for Lockup:\n\nhttps://github.com/sablier-labs/docs/blob/081670a26a33599d2e0b81995477ff555ea729b1/docs/apps/features/02-vesting.mdx#any-erc-20-token\n\nand Flow:\n\nhttps://github.com/sablier-labs/docs/blob/081670a26a33599d2e0b81995477ff555ea729b1/docs/apps/features/03-payments.mdx#mobile-ready-layout","createdAt":"2025-02-04T15:18:34Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":250,"repository":"sablier-labs/docs","state":"open","title":"Reusable snippet components for the duplicated app features","type":"issue","updatedAt":"2025-02-04T15:18:34Z","url":"https://github.com/sablier-labs/docs/issues/250"},{"author":"smol-ninja","body":"","createdAt":"2025-02-03T15:22:36Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":248,"repository":"sablier-labs/docs","state":"closed","title":"Add screenshots in the fee page","type":"issue","updatedAt":"2025-02-04T18:03:36Z","url":"https://github.com/sablier-labs/docs/issues/248"},{"author":"PaulRBerg","body":"[KPI-based airdrop distributions is a frequently requested feature](https://github.com/sablier-labs/company-discussions/discussions/80#discussioncomment-12010400).\n\nWe should write a mini guide for showing how to run an airdrop based on certain metrics, e.g., onchain activity.","createdAt":"2025-01-31T13:44:41Z","labels":["priority: 1","effort: high","type: feature","work: clear"],"number":247,"repository":"sablier-labs/docs","state":"open","title":"Guide for how to launch KPI-based airdrop","type":"issue","updatedAt":"2025-01-31T13:44:41Z","url":"https://github.com/sablier-labs/docs/issues/247"},{"author":"PaulRBerg","body":"depcheck was archived on June 16, 2025\n\nthey now recommend using [Knip](https://knip.dev/overview/configuration)\n\nKnip will also detect unused code!","createdAt":"2025-08-15T12:33:44Z","labels":["priority: 3","effort: low","type: build","work: clear"],"number":1772,"repository":"sablier-labs/interfaces","state":"open","title":"Use Knip instead of depcheck","type":"issue","updatedAt":"2025-08-15T12:38:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1772"},{"author":"PaulRBerg","body":"between `latest` and `card`:\n\n- https://github.com/sablier-labs/interfaces/blob/7984f9e/apps/client/src/api/vesting/frame/latest/latest.tsx\n- https://github.com/sablier-labs/interfaces/blob/7984f9e/apps/client/src/api/vesting/meta/card.tsx\n\nAnd between Vesting and Payments.","createdAt":"2025-08-12T14:17:05Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1770,"repository":"sablier-labs/interfaces","state":"open","title":"Deduplicate OpenGraph meta images and Farcaster frames logic","type":"issue","updatedAt":"2025-08-12T15:39:52Z","url":"https://github.com/sablier-labs/interfaces/issues/1770"},{"author":"PaulRBerg","body":"## Context\n\nVercel is giving up on Edge Runtime because it turns out it isn't actually faster than Node.js (in most real-world scenarios), and the UX is bad.\n\nFrom the [docs](https://vercel.com/docs/functions/runtimes/edge):\n\n<img width=\"948\" height=\"293\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/97847310-bad2-4118-afdf-2aa7a34ac8d8\" />\n\n## References\n\n- [Vercel docs on Edge Runtime](https://vercel.com/docs/functions/runtimes/edge)\n- [Lee Robinson on X - Aug 18, 2024: Vercel reverted all edge rendering back to Node.js](https://x.com/leerob/status/1780705942734331983?lang=en)\n- [/r/nextjs: Is Vercel giving up on the Edge runtime?](https://www.reddit.com/r/nextjs/comments/1ijkw4d/is_vercel_giving_up_on_the_edge_runtime/)\n- [/r/nextjs: Next.js Runtimes: Edge vs. Node.js](https://www.reddit.com/r/nextjs/comments/1idjr5i/nextjs_runtimes_edge_vs_nodejs)","createdAt":"2025-08-12T13:35:29Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1769,"repository":"sablier-labs/interfaces","state":"open","title":"Migrate from Edge Runtime to standard Node.js runtime","type":"issue","updatedAt":"2025-08-12T14:21:12Z","url":"https://github.com/sablier-labs/interfaces/issues/1769"},{"author":"PaulRBerg","body":"The meta image and the Farcaster frame both produce this as the HTML title:\n\n```text\nby-id (1200x600)\n```\n\n<img width=\"288\" height=\"43\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d98ed2f7-f635-46c0-a518-21ec45109c1e\" />\n\n\n- [example for meta](https://app.sablier.com/api/vesting/meta/stream/by-id/?id=LL-1-273)\n- [example for frame](https://app.sablier.com/api/frame/stream/LL2-11155111-3)\n\n","createdAt":"2025-08-12T12:35:10Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1768,"repository":"sablier-labs/interfaces","state":"open","title":"HTML title for auto-generated images","type":"issue","updatedAt":"2025-08-12T12:35:10Z","url":"https://github.com/sablier-labs/interfaces/issues/1768"},{"author":"PaulRBerg","body":"I saw it on the [Merit](https://merit.systems) website and I thought it's a great idea:\n\n<img width=\"442\" height=\"218\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5d99b631-b3d0-4c8b-9248-a56ff13180a9\" />","createdAt":"2025-08-08T14:13:55Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1767,"repository":"sablier-labs/interfaces","state":"open","title":"Print Sablier ASCII in console log","type":"issue","updatedAt":"2025-08-08T14:13:55Z","url":"https://github.com/sablier-labs/interfaces/issues/1767"},{"author":"PaulRBerg","body":"We should provide a shape for the traditional, monthly-based 1-year cliff, N-year vesting curve (defaulting to 4 years in total, but the number of years should be customizable).\n\nThe shape should be generic - the cliff can have any length, and there can be any number of months, but the default should be 1-year and 4-years total, respectively.","createdAt":"2025-08-04T17:58:32Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1764,"repository":"sablier-labs/interfaces","state":"open","title":"Shape for the traditional 1-year cliff, N-year vesting curve","type":"issue","updatedAt":"2025-08-15T11:20:43Z","url":"https://github.com/sablier-labs/interfaces/issues/1764"},{"author":"PaulRBerg","body":"We got a report from a Discord user who shared a [Tenderly URL](https://dashboard.tenderly.co/Sablier/project/simulator/new?rawFunctionInput=0xfdd46d60000000000000000000000000000000000000000000000000000000000000026900000000000000000000000018e4ed9d9d182fec240855bfe7a2fe680c879b2b000000000000000000000000000000000000000000001fc3842bd1f071c00000&contractAddress=0x49d753422ff05daa291A9efa383E4f57daEAd889&network=1890&from=0x18e4Ed9D9D182FEC240855bFe7A2fe680C879B2b&value=0\n) that doesn't work on Lightlink:\n\n<img width=\"658\" height=\"506\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e0c302e0-84da-4f5b-bf76-a605e2d955a1\" />","createdAt":"2025-08-04T15:53:35Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1763,"repository":"sablier-labs/interfaces","state":"open","title":"Do not display Tenderly URLs for chains not supported by Tenderly","type":"issue","updatedAt":"2025-08-04T15:53:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1763"},{"author":"razgraf","body":"<img width=\"500\" height=\"846\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/19c1a2b1-e510-4782-8858-01c3276e4be6\" />\n\nIdeea is to add a callout under \"about fees\" saying the address you're connected to has been whitelisted to create campaigns with a special fee on chains: X (value), Y (value), Z (value).\n\n<img width=\"500\" height=\"976\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/591fc4c5-99e2-4bce-8e72-4cb7dfa180f1\" />","createdAt":"2025-07-31T09:38:15Z","labels":[],"number":1762,"repository":"sablier-labs/interfaces","state":"open","title":"Add callout about wallet being whitelisted for zero fees in create airdrop form","type":"issue","updatedAt":"2025-07-31T09:38:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1762"},{"author":"PaulRBerg","body":"A page dedicated for highlighting our network of integrators/partners/service providers.\n\ne.g.\n\n- [Enflux](https://enflux.io) for market making\n- [Den](https://onchainden.com) for Safe multisigs\n- [Chainforce](https://chainforce.tech) - tokenomics studio\n- [Costa Norte](https://linkedin.com/company/costanortecapital/posts/?feedView=all) - investment agency","createdAt":"2025-07-28T12:56:16Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1761,"repository":"sablier-labs/interfaces","state":"open","title":"Sablier Ecosystem/Partners page","type":"issue","updatedAt":"2025-07-28T12:56:16Z","url":"https://github.com/sablier-labs/interfaces/issues/1761"},{"author":"maxdesalle","body":"Prevent recipients from inadvertently transferring the stream to our own contracts by mistake in the UI.\n\n![image](https://github.com/user-attachments/assets/0d233d62-3cc3-4afb-a376-326f86e5d407)","createdAt":"2025-07-22T16:38:46Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1759,"repository":"sablier-labs/interfaces","state":"open","title":"Blacklist our own contracts from stream transfers","type":"issue","updatedAt":"2025-08-15T14:33:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1759"},{"author":"PaulRBerg","body":"## Context\n\nWe deployed Sablier contracts to HyperEVM, and listed them in the SDK: https://github.com/sablier-labs/sdk/commit/663a03cb21161ea807b11012e16034bbd4b3e66b. They will be available in `sablier@1.0.0-beta.9`.\n\nNot sure what's the best way to go about this in terms of order of operations. There's PR #1712 but it's pending review. And in the Indexers, PR https://github.com/sablier-labs/indexers/pull/92 is also pending review (and a few changes to optimize the RPC cache). I'd prefer to merge those before merging this PR .. but I will let you decide @razgraf.\n\n## Question\n\nDo we have users requesting to use Sablier on HyperEVM today?\n\ncc @sablier-labs/business","createdAt":"2025-07-19T14:25:40Z","labels":["type: feature","priority: 1","effort: medium","work: complicated"],"number":1758,"repository":"sablier-labs/interfaces","state":"open","title":"Integrate HyperEVM","type":"issue","updatedAt":"2025-07-20T11:53:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1758"},{"author":"maxdesalle","body":"From a user.\n\n<img width=\"3342\" height=\"1742\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d59b6073-5c24-4c2d-a6d7-655eba9547c7\" />","createdAt":"2025-07-18T08:11:58Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1756,"repository":"sablier-labs/interfaces","state":"open","title":"\"Select all\" option when selecting streams","type":"issue","updatedAt":"2025-07-18T08:12:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1756"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/interfaces/issues/1753 but for these types:\n\n- `IFilterStream`\n- `IFilterAirdrop`\n- ~`IOptions`~\n\nThey should all be refactored to use/ extend the auto-generated types in the `gql` directories, e.g. `Stream_Filter`:\n\nhttps://github.com/sablier-labs/interfaces/blob/f977898d04f5896e44b42372e0b67d3309bf9634/packages/subgraphs/src/generated/lockup/graphql.ts#L1286","createdAt":"2025-07-15T11:57:48Z","labels":["priority: 2","effort: epic","type: refactor","work: complicated"],"number":1754,"repository":"sablier-labs/interfaces","state":"open","title":"Lower code reuse by using filtering models from the gql directories","type":"issue","updatedAt":"2025-07-15T13:36:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1754"},{"author":"PaulRBerg","body":"A lot of logic in the `models` package can be removed by instead extending the types auto-generated by GraphQL Code Generated.\n\nExample:\n\nhttps://github.com/sablier-labs/interfaces/blob/f977898d04f5896e44b42372e0b67d3309bf9634/packages/models/src/Tranche/index.ts#L7-L38\n\nCan be sourced from:\n\nhttps://github.com/sablier-labs/interfaces/blob/f977898d04f5896e44b42372e0b67d3309bf9634/packages/subgraphs/src/generated/lockup/graphql.ts#L980-L1002\n\nAnd to improve the type for `Scalars['BigInt']['output']`, we can manually set it to our desired BigNumber type. More research needed on how to improve the UX here; GraphQL Code Generator has some useful settings for [scalars](https://the-guild.dev/graphql/codegen/plugins/presets/preset-client).","createdAt":"2025-07-14T18:22:20Z","labels":["priority: 2","effort: epic","type: refactor","work: complicated"],"number":1753,"repository":"sablier-labs/interfaces","state":"open","title":"Lower code reuse by using GraphQL models from the gql directories instead of redefining them as classes","type":"issue","updatedAt":"2025-07-14T18:24:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1753"},{"author":"PaulRBerg","body":"<img width=\"763\" height=\"204\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0284efe0-5f4c-45cc-b054-eb0cf33707e4\" />","createdAt":"2025-07-14T17:17:40Z","labels":["priority: 2","effort: low","type: chore","work: clear"],"number":1752,"repository":"sablier-labs/interfaces","state":"open","title":"Use Envio API key for queries","type":"issue","updatedAt":"2025-07-14T17:17:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1752"},{"author":"PaulRBerg","body":"This logic:\n\nhttps://github.com/sablier-labs/interfaces/blob/f977898d04f5896e44b42372e0b67d3309bf9634/packages/subgraphs/src/client/middleware.ts#L144-L177\n\nCan be removed entirely by using aliases in the GraphQL queries, e.g. for single:\n\n```diff\nexport const getStream = /* GraphQL */ `\n  query getStream($streamId: String!) {\n-    Stream_by_pk(id: $streamId) {\n+    stream: Stream_by_pk(id: $streamId) {\n      ...StreamFragment\n    }\n  }\n`;\n```\n\nAnd for plural:\n\n```diff\nexport const getStreams = /* GraphQL */ `\n  query getStreams($first: Int!, $orderDirection: order_by!, $where: Stream_bool_exp) {\n-    Stream(\n+    streams: Stream(\n      limit: $first\n      order_by: { subgraphId: $orderDirection }\n      where: $where\n    ) {\n      ...StreamFragment\n    }\n  }\n`;\n```","createdAt":"2025-07-14T10:32:25Z","labels":["priority: 1","effort: low","type: perf","work: clear"],"number":1749,"repository":"sablier-labs/interfaces","state":"open","title":"Envio response reformatting logic can be replaced with aliases in the GraphQL queries","type":"issue","updatedAt":"2025-07-14T10:32:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1749"},{"author":"PaulRBerg","body":"## Problem\n\nMany of our users want to vest non-transferable tokens. They start using Sablier and then they get stuck because the tokens cannot be transferred to Sablier. Here's a recent example with Velvet:\n\n<img width=\"726\" height=\"144\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/fa4e22b0-350f-4395-b9f7-cbb796b56594\" />\n\n## Solution\n\nWhen the stream creation fails, display an informational card/banner to users that says something like this:\n\n> Is your token non-transferable? Then, you have to whitelist the Sablier contracts, specifically, the SablierLockup and the SablierBatchLockup contracts. The deployment addresses are available here: URL\n\n> [!NOTE]\n> It would be great if we could find out if \n\n### Prioritization\n\nThis should be implemented later, after #1587 and the [Metamorphic Refactor](https://github.com/sablier-labs/interfaces/discussions/1726).","createdAt":"2025-07-10T12:28:13Z","labels":["type: feature","priority: 2","effort: medium","work: complicated"],"number":1747,"repository":"sablier-labs/interfaces","state":"open","title":"Suggest that the stream creation may have failed due to non-transferability","type":"issue","updatedAt":"2025-07-10T12:28:13Z","url":"https://github.com/sablier-labs/interfaces/issues/1747"},{"author":"PaulRBerg","body":"There is some repetition with the way the `useQuery` hook is used:\n\n```\ngcTime: QUERY_CACHE_TIME,\nretry: false,\nstaleTime: QUERY_CACHE_TIME,\n```\n\nAnd:\n\n```\ngcTime: Infinity,\nretry: false,\nstaleTime: Infinity,\n```\n\nWe could provide abstractions for these so that we don't have to declare them every time. This way, the `QUERY_CACHE_TIME` constant wouldn't have to be imported in many different places.\n\nRelated: https://github.com/sablier-labs/interfaces/discussions/1726","createdAt":"2025-07-09T19:56:45Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1746,"repository":"sablier-labs/interfaces","state":"open","title":"Abstractions for \"useQuery\"","type":"issue","updatedAt":"2025-07-09T19:56:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1746"},{"author":"PaulRBerg","body":"## Problem\n\n1. Lazy user called Louis opens the [create stream gallery](https://app.sablier.com/vesting/gallery/).\n2. Louis fills out the form, but only then do they realize that they want to create the stream from their Safe multisig.\n3. Louis doesn't know how to do that, or he's too lazy to find out.\n\n### Case in Point\n\nFrom the Velvet TG chat group:\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a2fd456a-ff58-4d02-8cc7-19088ce7d712\" />\n\n## Solution\n\nProvide an \"Open in Safe\" button (with the Safe logo) in the top-right corner, like so:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0b9aec5e-9769-49a5-b3fe-f2ea6a1d41a7\" />\n\nIdeally, the hyperlink would link to the Sablier app opened on https://app.safe.global\n\n### Prioritization\n\nI think this would be quite easy to implement, but the payoff would be decent. @razgraf/ @gavriliumircea WDYT, could this be done quickly and, if yes, could we implement it this week?","createdAt":"2025-07-09T19:00:44Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1744,"repository":"sablier-labs/interfaces","state":"open","title":"Provide \"Open in Safe\" button in the create stream gallery","type":"issue","updatedAt":"2025-07-09T19:00:44Z","url":"https://github.com/sablier-labs/interfaces/issues/1744"},{"author":"PaulRBerg","body":"<img width=\"485\" height=\"244\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/300e06b7-e880-4b88-8b23-253c690f7d1d\" />","createdAt":"2025-07-09T13:35:10Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1741,"repository":"sablier-labs/interfaces","state":"open","title":"Hide \"tranched stream\" card for Timelocks","type":"issue","updatedAt":"2025-07-09T13:35:10Z","url":"https://github.com/sablier-labs/interfaces/issues/1741"},{"author":"PaulRBerg","body":"e.g. https://app.sablier.com/vesting/stream/LK-1-4758/\n\nIt says \"Streaming (1.5%)\", but it should say \"0%\"\n\nMaybe we should replace \"Streaming\" with \"Vested\" in the OG image\n\n![Image](https://github.com/user-attachments/assets/1a196a4d-46ea-461a-b8fb-99e7db3f0d3c)","createdAt":"2025-07-09T13:31:25Z","labels":["type: bug","priority: 3","effort: low","work: clear"],"number":1740,"repository":"sablier-labs/interfaces","state":"open","title":"Incorrect status for Timelock streams in the OpenGraph image","type":"issue","updatedAt":"2025-07-09T13:31:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1740"},{"author":"PaulRBerg","body":"e.g. https://app.sablier.com/vesting/stream/LK-1-4758/","createdAt":"2025-07-09T13:29:28Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1739,"repository":"sablier-labs/interfaces","state":"open","title":"Say \"Timelock\" instead of \"Vesting Stream\" in the auto-generated OpenGraph image for timelocks","type":"issue","updatedAt":"2025-07-09T13:32:45Z","url":"https://github.com/sablier-labs/interfaces/issues/1739"},{"author":"PaulRBerg","body":"From TG chat with Ondefy:\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/1bbabfa9-eec7-4be1-8f28-c03038da0f0c\"/>","createdAt":"2025-07-09T12:36:16Z","labels":["type: bug","priority: 1","work: chaotic"],"number":1738,"repository":"sablier-labs/interfaces","state":"open","title":"Investigate and fix zkSync \"storage invocation limit reached\" error","type":"issue","updatedAt":"2025-07-09T12:39:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1738"},{"author":"PaulRBerg","body":"## Problem\n\nCSV users are having a hard time filtering out TRM-flagged addresses:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e030e11a-4b01-4b00-9192-7e32f4f3b4ae\" />\n\n## Solution\n\nProvide a list of addresses flagged by TRM as high-risk instead of a single address.","createdAt":"2025-07-09T12:11:15Z","labels":["priority: 2","effort: medium","type: perf","work: clear"],"number":1737,"repository":"sablier-labs/interfaces","state":"open","title":"Provide TRM-flagged addresses in a list instead of one-by-one","type":"issue","updatedAt":"2025-07-09T12:11:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1737"},{"author":"PaulRBerg","body":"## Problem\n\nWe received a request to stream tokens to ERC-20 contracts.. There may have been more cases like this that were not reported.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0b38c8e8-5e7b-493a-ab0c-d2a952f106c4\" />\n\n<img width=\"400\"  alt=\"Image\" src=\"https://github.com/user-attachments/assets/41c9d4d3-859a-4a0e-b9e7-450df4666d5d\" />\n\n## Solution\n\nInstead of outright blocking users from streaming to ERC-20 contracts, we should allow experienced users to do it. Like so:\n\n- [ ] Display an explanatory model/warning for users to know that the recipient is an ERC-20\n- [ ] Allow the user to click \"Proceed\"","createdAt":"2025-07-09T10:27:18Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1736,"repository":"sablier-labs/interfaces","state":"open","title":"Allow experienced users to stream tokens to ERC-20 contracts","type":"issue","updatedAt":"2025-07-09T10:27:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1736"},{"author":"PaulRBerg","body":"Can be easily done using [react-use](https://github.com/streamich/react-use):\n\n```typescript\nimport { useKey } from 'react-use';\n\n// Usage:\nuseKey('Escape', doClose);\n```","createdAt":"2025-07-07T20:51:48Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1735,"repository":"sablier-labs/interfaces","state":"open","title":"Close side bars via the ESC key","type":"issue","updatedAt":"2025-07-07T21:00:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1735"},{"author":"PaulRBerg","body":"To this:\n\nhttps://app.sablier.com/airdrops/create\n\nInstead of this:\n\nhttps://app.sablier.com/airdrops/?t=created","createdAt":"2025-07-07T20:35:52Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1734,"repository":"sablier-labs/interfaces","state":"open","title":"Make \"Airdrop to 1M recipients\" banner redirect to the airdrop create page","type":"issue","updatedAt":"2025-07-07T20:35:52Z","url":"https://github.com/sablier-labs/interfaces/issues/1734"},{"author":"PaulRBerg","body":"The chains are important enough that they deserve their own package under `packages/*` instead of being nested under `constants/src/`.\n\nThis will be tackled after https://github.com/sablier-labs/interfaces/pull/1712 and https://github.com/sablier-labs/interfaces/discussions/1726.","createdAt":"2025-07-06T11:29:46Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1733,"repository":"sablier-labs/interfaces","state":"open","title":"Create a bespoke package for the chain data","type":"issue","updatedAt":"2025-07-06T11:29:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1733"},{"author":"PaulRBerg","body":"Airdrops v1.4 will support `claimTo`, analogous to `withdrawTo` in Lockup.","createdAt":"2025-07-04T15:53:19Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1732,"repository":"sablier-labs/interfaces","state":"open","title":"Implement \"claimTo\" in Airdrops","type":"issue","updatedAt":"2025-07-04T15:53:19Z","url":"https://github.com/sablier-labs/interfaces/issues/1732"},{"author":"PaulRBerg","body":"```sh\nni @bgd-labs/aave-address-book\n```\n\nSource code:\n\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/constants/src/tokens.tsx#L235\n\nLinks:\n\n- https://github.com/bgd-labs/aave-address-book\n- https://search.onaave.com/\n- https://ethereum.stackexchange.com/q/170182/24693\n","createdAt":"2025-07-03T13:18:38Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1731,"repository":"sablier-labs/interfaces","state":"open","title":"Source Aave addresses from Aave Address Book so that we don't have to maintain the addresses ourselves","type":"issue","updatedAt":"2025-07-03T13:19:19Z","url":"https://github.com/sablier-labs/interfaces/issues/1731"},{"author":"PaulRBerg","body":"We should delete the first source and only use the latter.\n\n- https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/assets/src/chains/index.ts\n- https://github.com/sablier-labs/interfaces/blob/8be76d486989f080635521cd9c8895d2b3737608/apps/client/src/api/utils.ts#L35","createdAt":"2025-07-01T09:21:28Z","labels":["priority: 2","effort: low","type: perf","work: clear"],"number":1730,"repository":"sablier-labs/interfaces","state":"open","title":"Chain logos should not be loaded from two different sources (this repo + GitHub files repo)","type":"issue","updatedAt":"2025-07-14T18:44:12Z","url":"https://github.com/sablier-labs/interfaces/issues/1730"},{"author":"PaulRBerg","body":"There are 87 files defined under `packages/hooks/*`\n\nhttps://github.com/sablier-labs/interfaces/tree/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/hooks/src","createdAt":"2025-06-26T21:14:14Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1724,"repository":"sablier-labs/interfaces","state":"open","title":"Oversized directory in \"packages/hooks\"","type":"issue","updatedAt":"2025-06-27T16:06:36Z","url":"https://github.com/sablier-labs/interfaces/issues/1724"},{"author":"PaulRBerg","body":"Many types in this repo are simple aliases for basic types like `string`.\n\nWhile there are cases in which type aliases can be helpful, there are many cases where it is overkill to do this.\n\nFor example, `IEnvironmentVariable` is just an alias for `string`, and simply loading the environment variables is\nenough. `process.env.FOO` has a type of `string | undefined`.\n\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/packages/types/src/utils.ts#L7","createdAt":"2025-06-26T20:13:04Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1722,"repository":"sablier-labs/interfaces","state":"open","title":"Remove superfluous type `IEnvironmentVariable`","type":"issue","updatedAt":"2025-06-27T16:18:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1722"},{"author":"PaulRBerg","body":"## Problem\n\nThe packages under `packages/*` are not actually packages.\n\nThe only code shipped to production from this repo is the `apps/*`. But the apps are built using [Next.js's SWC](https://nextjs.org/docs/architecture/nextjs-compiler) compiler.\n\nThe code under `packages/*` is NOT transpiled to JS — for good reason. Doing so would lead to a bad development experience as we would have to keep the TypeScript compiler on hot reload, all the time.\n\nIt thus follows that the `package.json` files are superfluous. The `dependencies` and `devDependencies` do not do anything besides creating a significant maintenance cost. All of those dependencies could be moved to the root `package.json` (or one of the `apps/*` `package.json`, and everything would work the same). The only exception is the `scripts`. More on this below under the **Solution**.\n\n### No Official Guidance\n\nIt's worth noting that more than two years ago, I've asked for help on Next.js's forum:\n\n- https://github.com/vercel/next.js/discussions/50866\n- [Best practices on using Next.js in a TypeScript monorepo](https://community.vercel.com/t/best-practices-on-using-next-js-in-a-typescript-monorepo/7131/2)\n\nUnfortunately, I've never received an answer. It looks like Next.js itself doesn't provide any official recommendation when it comes to monorepos.\n\n## Solution\n\nGet rid of the `package.json` files \n\nThe `scripts` functionality can be replaced with [Just](https://github.com/casey/just) files (and Just provides a superior UX anyway).\n\nNote: this issue goes hand in hand with https://github.com/sablier-labs/interfaces/issues/1720","createdAt":"2025-06-26T20:09:47Z","labels":["priority: 2","effort: high","type: build","work: complicated"],"number":1721,"repository":"sablier-labs/interfaces","state":"open","title":"Get rid of all \"package.json\" in the \"packages/*\"","type":"issue","updatedAt":"2025-06-27T20:04:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1721"},{"author":"PaulRBerg","body":"Bun is much faster than Yarn, and it's used in most of our repositories.","createdAt":"2025-06-26T19:59:48Z","labels":["priority: 1","effort: high","type: build","work: complicated"],"number":1720,"repository":"sablier-labs/interfaces","state":"open","title":"Switch to Bun for Node.js dependency management","type":"issue","updatedAt":"2025-06-26T19:59:48Z","url":"https://github.com/sablier-labs/interfaces/issues/1720"},{"author":"PaulRBerg","body":"Here:\n\n- https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/hooks/useLockupDashboardTable.ts#L31\n- https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/hooks/useFlowDashboardTable.ts#L145\n\nThe `owned` and `searched` dependencies trigger a lot of re-renderings.\n\nIt'd be better to list the explicit properties needed in each `useMemo`, e.g. `owned.error` and `searched.error`.","createdAt":"2025-06-25T19:33:23Z","labels":["priority: 1","effort: medium","type: perf","work: chaotic"],"number":1719,"repository":"sablier-labs/interfaces","state":"open","title":"Non-exhaustive useMemo dependencies in \"useData\" lead to lots of re-renderings","type":"issue","updatedAt":"2025-06-25T19:33:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1719"},{"author":"PaulRBerg","body":"It is possible to use a single JS file for the GraphQL Codegen config.\n\nSee https://the-guild.dev/graphql/codegen/docs/config-reference/multiproject-config\n\nWill be fixed by #1712","createdAt":"2025-06-25T19:30:31Z","labels":["priority: 2","effort: low","type: refactor","work: complicated"],"number":1718,"repository":"sablier-labs/interfaces","state":"open","title":"Use multi-project syntax in GraphQL Codegen","type":"issue","updatedAt":"2025-06-25T19:30:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1718"},{"author":"PaulRBerg","body":"<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1a4365c5-7a57-4fad-a70e-c970a14fd261\" />","createdAt":"2025-06-25T18:22:00Z","labels":["type: bug","priority: 3","effort: low","work: clear"],"number":1717,"repository":"sablier-labs/interfaces","state":"open","title":"The dashboard watcher does not correctly redirect the user to the \"All\" tab","type":"issue","updatedAt":"2025-06-25T18:22:00Z","url":"https://github.com/sablier-labs/interfaces/issues/1717"},{"author":"PaulRBerg","body":"## Problem\n\nI spent 2-3 hours debugging a bug today that was caused by an infinite re-render in these files:\n\n- https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/hooks/useAirdropDashboardWatcher.ts\n- https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/hooks/useFlowDashboardWatcher.ts\n- https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/hooks/useLockupDashboardWatcher.ts\n\n## Solution\n\n- [ ] Add explanatory comments so that every developer on the team is informed about how fragile and dangerous this hook is\n- [ ] Check if the router's path is already that of the target path, to avoid an infinite re-render\n\n```typescript\n/**\n * Watches for dashboard navigation state and redirects to the default tab when appropriate.\n *\n * This hook handles cases where the user lands on an invalid or fallback state\n * (e.g., accessing /vesting/ with invalid query params) and redirects them\n * to the default \"all\" tab to ensure a consistent user experience.\n */\nexport function useLockupDashboardWatcher(reroute = false) {\n  const router = useRouter();\n  const { identifier, isReady, isFallback } = useLockupDashboardQuery();\n\n  useEffect(() => {\n    // Early returns: skip if not in fallback state, data isn't ready, or routing is disabled.\n    if (!isFallback || !isReady || !reroute) {\n      return;\n    }\n\n    const targetPath = tabs.vesting.all.builder();\n\n    // Prevent infinite re-renders by checking if we're already at the target path\n    // Compare both pathname and asPath to handle edge cases with query params\n    console.log({\n      routerPathname: router.pathname,\n      routerAsPath: router.asPath,\n      targetPath,\n    });\n    if (router.pathname !== targetPath && router.asPath !== targetPath) {\n      void router.replace(targetPath, undefined, {\n        shallow: true,\n      });\n    }\n  }, [identifier, isReady, isFallback, router, reroute]);\n}\n```","createdAt":"2025-06-25T16:57:34Z","labels":["type: feature","priority: 1","effort: low","work: chaotic"],"number":1716,"repository":"sablier-labs/interfaces","state":"open","title":"The dashboard watchers are fragile and can easily lead to hard-to-debug infinite re-renders","type":"issue","updatedAt":"2025-06-25T17:01:30Z","url":"https://github.com/sablier-labs/interfaces/issues/1716"},{"author":"PaulRBerg","body":"This code:\n\nhttps://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/components/organisms/Toolbar/index.tsx#L6-L39\n\nCan be simplified like this:\n\n```typescript\nconst Wrapper = styled.nav`\n  position: relative;\n  z-index: ${(props) => props.theme.sizes.zIndexToolbar};\n  width: 100%;\n  height: ${(props) => props.theme.sizes.toolbar};\n\n  ${(props) => props.theme.medias.maxLG} {\n    height: auto;\n  }\n`;\nfunction Toolbar() {\n  const { isMounted } = useIsMounted();\n  const { minLG } = useWindowMediaQuery();\n\n  // Prevent hydration mismatch by always rendering Mobile during SSR\n  const shouldShowDesktop = isMounted && minLG;\n\n  return <Wrapper>{shouldShowDesktop ? <Desktop /> : <Mobile />}</Wrapper>;\n}\n```\n\nNote: this isn't just a performance thing. It's also about simplifying the component tree so that debugging is easier.","createdAt":"2025-06-25T10:55:21Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1715,"repository":"sablier-labs/interfaces","state":"open","title":"Do not render <Mobile/> React component on desktop, and vice-versa","type":"issue","updatedAt":"2025-06-27T20:06:51Z","url":"https://github.com/sablier-labs/interfaces/issues/1715"},{"author":"PaulRBerg","body":"The `routes/client.ts` are only used in the client app, so they should only be defined there, especially since there is that wonky behavior of next-edge-dynamic.\n\nDitto for the landing routes.","createdAt":"2025-06-25T10:05:38Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1714,"repository":"sablier-labs/interfaces","state":"closed","title":"Define the routes in the \"apps\" directories","type":"issue","updatedAt":"2025-06-29T10:13:58Z","url":"https://github.com/sablier-labs/interfaces/issues/1714"},{"author":"PaulRBerg","body":"Happens here: https://github.com/sablier-labs/interfaces/blob/30fffc00f4c5c25e1a845a29f43031d1124d1ed6/apps/client/src/stores/lockup.ts#L20\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5bc3d1be-cddd-4837-b63f-2bc4a4105037\" />","createdAt":"2025-06-24T19:44:46Z","labels":["type: bug","priority: 3","work: clear"],"number":1713,"repository":"sablier-labs/interfaces","state":"open","title":"Error: Maximum update depth exceeded.","type":"issue","updatedAt":"2025-06-25T17:26:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1713"},{"author":"PaulRBerg","body":"## Problem\n\nIn Airdrops and Flow, it is possible to create airdrop campaigns and streams with ERC-721 NFTs because there are no calls made to the `decimals` function. Flow is fine because it enforces tokens to have <= 18 decimals.\n\nI investigated this and I was able to deploy an airdrop campaign using a test NFT contract I deployed on Sepolia:\n\nhttps://sepolia.etherscan.io/tx/0x4d9cb0b7ae59a3c3622237e22530a650fc5f0ad73a8659f3329876fb94eb6ad6\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/34fde537-a544-4d6f-a749-37cdeceeec4a\" />\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5ea6447c-0e20-4a5d-aa58-77ef0743423f\" />\n\n### Production User\n\nThere is also a production user who created a `MerkleInstant` campaign using an NFT: \n\n- https://github.com/sablier-labs/indexers/issues/150\n- https://abscan.org/tx/0x732d76e98df7bd32711974150466ff2f2afa94d98607490c7a1fe411b6489a07\n\n## Solution\n\nIn the creation form, do this:\n\n- When the token is not part of the EVM token list, add a guard check by querying the [ERC-165 `supportsInterface`](https://ercs.ethereum.org/ERCS/erc-721) method on the token contract.\n- The argument to pass to this method is [`0x80ac58cd`](https://github.com/binodnp/openzeppelin-solidity/blob/ffc4bcbba398b61d19ede03e4fdf673ddbce1083/contracts/token/ERC721/ERC721.sol#L34)\n- If the contract call is successful and the returned value is `true`, the user should NOT be allowed to proceed.\n- If the contract call reverts, then the user should be allowed to proceed (because ERC-20 doesn't implement ERC-165 and there's no `supportsInterface` method on it).\n\n> [!NOTE]\n> It is not worth implementing a check against NFTs in the Lockup contracts because: (i) this is a low-probability scenario and it's not fair to ask 99.8% of users to pay the gas cost for a check they don't need, and (ii) the Lockup contract's size is 'scarce' as we're approaching the contract size limit enforced by the EVM.\n> However, we may want to consider implementing this check in the Merkle factories (regardless of whether we do this or not, the UI should still perform this check to serve as a double layer of defense).\n\n### Related\n\n- https://github.com/sablier-labs/interfaces/issues/1587\n- https://github.com/wevm/viem/discussions/3752","createdAt":"2025-06-18T12:13:42Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1709,"repository":"sablier-labs/interfaces","state":"open","title":"Users should not be allowed to create invalid streams or airdrops with NFTs","type":"issue","updatedAt":"2025-06-18T12:23:02Z","url":"https://github.com/sablier-labs/interfaces/issues/1709"},{"author":"PaulRBerg","body":"## How to Reproduce\n\n1. Go to Airdrops Create\n2. Choose Instant (it should work with the others but this is the simplest)\n3. Fill out the 1st page\n4. Go to the 2nd page\n5. Upload a dummy CSV\n6. Go back to the 1st page\n7. Edit the token address\n8. Unable to click \"Continue\"\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5e459212-edeb-4c92-bac0-144680d9416d\" />","createdAt":"2025-06-18T12:05:42Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1708,"repository":"sablier-labs/interfaces","state":"open","title":"Bug in the navigation flow of the airdrop creation form","type":"issue","updatedAt":"2025-06-18T12:05:48Z","url":"https://github.com/sablier-labs/interfaces/issues/1708"},{"author":"PaulRBerg","body":"https://tokenicons.io/\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a66c64df-6739-4b07-83d0-d970e1b06a49\" />","createdAt":"2025-06-17T11:11:33Z","labels":["priority: 3","effort: medium","type: refactor","work: clear"],"number":1707,"repository":"sablier-labs/interfaces","state":"open","title":"Use Web3Icons to lower the maintenance cost for the token logos","type":"issue","updatedAt":"2025-06-17T11:11:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1707"},{"author":"PaulRBerg","body":"Hasura provides a specialized [By PK](https://hasura.io/docs/2.0/api-reference/graphql-api/query/#by-pk-syntax) syntax, which can be used to query single entities like this:\n\n```graphql\nStream_by_pk(id: \"0xe0bfe071da104e571298f8b6e0fce44c512c1ff4-137-42\") {\n  sender\n}\n```\n\nThis is cleaner and easier to read than:\n\n```graphql\nStream(where: {id: {_eq: \"0xe0bfe071da104e571298f8b6e0fce44c512c1ff4-137-42\"}}) {\n  sender\n}\n```\n\nWhich is the approach currently employed in this repo, and in the docs.\n\nThis root query can be seed in the Hasura GraphiQL playground: https://cloud.hasura.io/public/graphiql?endpoint=https%3A%2F%2Findexer.hyperindex.xyz%2F53b7e25%2Fv1%2Fgraphql","createdAt":"2025-06-13T15:10:24Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1706,"repository":"sablier-labs/interfaces","state":"open","title":"Use `_by_pk` syntax for querying single entities by ID in Envio Hasura GraphQL","type":"issue","updatedAt":"2025-06-13T15:10:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1706"},{"author":"PaulRBerg","body":"Low-priority since this shouldn't be needed that often, but it'd be a helpful feature nonetheless. We keep getting asked about it from time to time.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/64c27a12-c034-42b1-94ad-e94bba979048\" />","createdAt":"2025-06-11T13:14:18Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1704,"repository":"sablier-labs/interfaces","state":"open","title":"Provide utility for wrapping ETH into WETH","type":"issue","updatedAt":"2025-06-11T13:14:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1704"},{"author":"PaulRBerg","body":"Make a request to a JSON-RPC server to check that the tokenlist ERC20 metadata `decimals` matches the value returned from the JSON-RPC.","createdAt":"2025-06-09T15:45:20Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1703,"repository":"sablier-labs/interfaces","state":"open","title":"Validate token decimals when creating streams","type":"issue","updatedAt":"2025-06-09T15:45:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1703"},{"author":"PaulRBerg","body":"The address can be either sender or recipient.\n\nContext: email with reference `0707032-69.2025.8.07.0001`\n\n@maxdesalle and @razgraf know about this","createdAt":"2025-06-09T15:10:25Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1702,"repository":"sablier-labs/interfaces","state":"closed","title":"Ban address 0xc7FbFF0152B98f30354aBDC245927c12342d4E5F from UI (either sender or recipient)","type":"issue","updatedAt":"2025-06-11T11:46:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1702"},{"author":"PaulRBerg","body":"It looks like it is now possible to pass the API key in the request header as opposed to the request URL.\n\nUsing it as a header param is a safer approach, and it also lowers the code we have to maintain in the Deployments and the Indexers repos.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/08c1f208-abac-4f2b-b1c8-7ff8503b12b3\" />","createdAt":"2025-06-06T19:33:24Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1700,"repository":"sablier-labs/interfaces","state":"open","title":"Provide Graph API key as \"Authorization: Header\" in request instead of URL string","type":"issue","updatedAt":"2025-06-09T05:44:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1700"},{"author":"PaulRBerg","body":"Let's do this at the same with #1556\n\n(After Solana merge)\n\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/1677\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** May 31, 2025</sup>\n@sablier-labs/frontend\n\n1. We're using 120 everywhere else (not just Solidity; docs, deployments, indexers, etc.)\n2. All of our devices' screens are big enough nowadays to fit at least 120 characters\n3. Some code snippets look really ugly with a print width of 80, e.g.\n\n<img width=\"300\" alt=\"SCR-20250531-rhfe\" src=\"https://github.com/user-attachments/assets/4aa2f5d9-1ebe-4c95-a64f-2ac0d3ff979a\" />\n\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/.prettierrc.yml#L3</div>","createdAt":"2025-06-06T12:27:16Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1699,"repository":"sablier-labs/interfaces","state":"open","title":"Increase `printWidth` to 120","type":"issue","updatedAt":"2025-06-06T12:27:16Z","url":"https://github.com/sablier-labs/interfaces/issues/1699"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/interfaces/issues/1680#issuecomment-2939632068\n\n- [ ] Rename `crash` to `sentry`\n- [ ] Rename `track` to `mixpanel`","createdAt":"2025-06-04T17:25:41Z","labels":["priority: 3","effort: medium","type: refactor","work: clear"],"number":1697,"repository":"sablier-labs/interfaces","state":"open","title":"Bespoke names for vendors","type":"issue","updatedAt":"2025-06-04T17:25:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1697"},{"author":"PaulRBerg","body":"Code:\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useFlowOptions.ts#L68\n\nContext: https://github.com/sablier-labs/interfaces/issues/1672#issuecomment-2940570288","createdAt":"2025-06-04T17:19:25Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1696,"repository":"sablier-labs/interfaces","state":"open","title":"Add explanatory comments above the use of the Lockup simulator in the Flow code","type":"issue","updatedAt":"2025-06-04T17:19:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1696"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/449, the idea is to have a \"Pay bonus\" button in the Flow UI which triggers [`transferTokens`](https://github.com/sablier-labs/flow/blob/staging/src/SablierFlow.sol#L532) from `msg.sender` to the recipient.\n\n### Rationale\n\nAs @maxdesalle pointed out, it will make it possible to pay bonuses alongside an active stream. \n\n### Note\n\nThis can only be implemented post Flow Q3 release.","createdAt":"2025-06-04T11:52:59Z","labels":[],"number":1695,"repository":"sablier-labs/interfaces","state":"open","title":"Add \"Pay bonus\" button for Flow users","type":"issue","updatedAt":"2025-06-04T11:56:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1695"},{"author":"sneg55","body":"Got feedback from the inbound prospect that they can’t easily find prices/fees. I guess we need something like a pricing page on our website in addition to the app and docs fees explainer we have.\n\n![Image](https://github.com/user-attachments/assets/8bff3897-ac18-4bc5-8ba1-1451deeeecef)","createdAt":"2025-06-03T18:40:19Z","labels":["type: feature","priority: 2","work: clear"],"number":1694,"repository":"sablier-labs/interfaces","state":"open","title":"Add pricing to navbar","type":"issue","updatedAt":"2025-06-25T19:18:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1694"},{"author":"maxdesalle","body":"Payment streams show up as \"Vesting stream\", as opposed to \"Payment stream\"\n\n![Image](https://github.com/user-attachments/assets/7625132a-117f-484c-810b-f02f7f5d51d3)","createdAt":"2025-06-01T20:04:00Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1690,"repository":"sablier-labs/interfaces","state":"closed","title":"Change page title for payment streams","type":"issue","updatedAt":"2025-06-02T14:39:42Z","url":"https://github.com/sablier-labs/interfaces/issues/1690"},{"author":"PaulRBerg","body":"In order to reduce the nesting hell and make the code more maintainable (and reviewable by AI):\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useLockupDashboardTable.ts#L195","createdAt":"2025-06-01T11:52:32Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1689,"repository":"sablier-labs/interfaces","state":"open","title":"Split UI logic of \"use{PROTOCOL}DashboardTable\" hooks into separate components","type":"issue","updatedAt":"2025-06-02T10:43:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1689"},{"author":"PaulRBerg","body":"## Problem\n\nTo get to the emission curve from the stream profile, one has to perform two manual steps:\n\n1. Click on \"Details\"\n2. Scroll to find \"Emissions\"\n\nThe user also has to guess (or know from before) that that's where the emission can be found.\n\nThe emission curve is a super important chart, and it deserves a front row seat.\n\n## Solution\n\nFront-load the emission curve somewhere on the stream profile, or at least add a button for it.","createdAt":"2025-06-01T08:52:28Z","labels":["type: feature","priority: 1","effort: medium","work: complicated"],"number":1688,"repository":"sablier-labs/interfaces","state":"open","title":"Frontload the emission curve in the stream profile","type":"issue","updatedAt":"2025-08-04T12:19:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1688"},{"author":"PaulRBerg","body":"Similar to https://github.com/sablier-labs/interfaces/issues/1493 but for airdrop campaigns searched:\n\n<img width=\"1331\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c5011b45-90a1-46cf-8626-bf5771d4465b\" />","createdAt":"2025-05-31T20:39:01Z","labels":["type: feature","priority: 3","effort: high","work: clear"],"number":1687,"repository":"sablier-labs/interfaces","state":"open","title":"Inform the user if they have reached the end of the search results when searching for Airdrops/Streams","type":"issue","updatedAt":"2025-06-04T11:36:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1687"},{"author":"PaulRBerg","body":"They don't belong in the `constants` package:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/constants/src/requests.ts\n\nDitto for `fees`:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/constants/fees/utils.ts","createdAt":"2025-05-31T20:23:31Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1686,"repository":"sablier-labs/interfaces","state":"open","title":"Move the requests and the fees to a different place","type":"issue","updatedAt":"2025-06-01T10:17:32Z","url":"https://github.com/sablier-labs/interfaces/issues/1686"},{"author":"PaulRBerg","body":"Refactor this:\n\n```typescript\nconst foundOwned = owned?.airdrops.find((airdrop) => airdrop.id === id);\n```\n\nTo this:\n\n```typescript\nconst foundOwned = _.find(owned?.airdrops, { id });\n```\n\nDitto for `_.some`","createdAt":"2025-05-31T20:21:20Z","labels":["priority: 3","type: refactor","work: clear"],"number":1685,"repository":"sablier-labs/interfaces","state":"open","title":"Use cleaner \"_.find\" and \"_.some\" syntax instead of more verbose \"object.find\" and \"object.some\"","type":"issue","updatedAt":"2025-07-09T19:06:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1685"},{"author":"PaulRBerg","body":"The constants don't follow up much of a consistent pattern:\n\n- Some constant names are defined using `snake_case`, e.g. in `blacklist.ts`\n- Some constant objects are defined using `camelCase`, others in `UPPERCASE_SNAKE_CASE`, and yet others in `PascalCase`. We should stick with a consistent approach, regardless of what that is.\n- The `macros.ts` are a dumping places for all sorts of values. They deserve to be re-categorized.\n- Comment dividers generated using an extension like [this](https://marketplace.visualstudio.com/items?itemName=stackbreak.comment-divider) would go a long way","createdAt":"2025-05-31T20:12:00Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1684,"repository":"sablier-labs/interfaces","state":"open","title":"Organize and tidy up constants","type":"issue","updatedAt":"2025-06-02T12:39:21Z","url":"https://github.com/sablier-labs/interfaces/issues/1684"},{"author":"PaulRBerg","body":"So we don't have to maintain this code:\n\nhttps://github.com/sablier-labs/interfaces/blob/9dcb52aa220675bf60e13570fd825cbda118b6b9/packages/constants/src/countries.ts","createdAt":"2025-05-31T20:09:51Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1683,"repository":"sablier-labs/interfaces","state":"closed","title":"Import countries from external package","type":"issue","updatedAt":"2025-06-04T11:35:42Z","url":"https://github.com/sablier-labs/interfaces/issues/1683"},{"author":"PaulRBerg","body":"It is non-intuitive that in the code below, the `eligible.params.identifier` is used as a catch-all checker for all tabs (created,eligible,search) — because all of them use `t` as the identifier.\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropDashboardQuery.ts#L25-L28\n\nSimilarly, maybe we should find a different name for this `params.identifier` thingy. But to begin with, a bespoke constant would go a long way.","createdAt":"2025-05-31T20:07:01Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1682,"repository":"sablier-labs/interfaces","state":"open","title":"Meaningful constant name for the identifier \"t\" which serves us a common resolver for the airdrops tabs","type":"issue","updatedAt":"2025-05-31T22:07:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1682"},{"author":"PaulRBerg","body":"It would be a nicer developer experience if instead of throwing errors like this:\n\n```typescript\nvendors.crash.log(new Error(t(\"errors.chainMandatory\")));\n```\n\nWe would throw them like this:\n\n```typescript\nthrow SablierError.ChainMandatory\n```\n\nDemo code:\n\n```typescript\nexport namespace SablierError {\n export class ChainMandatory extends Error {\n    constructor() {\n     const message = t(\"errors.chainMandatory\");\n      super(message);\n    }\n  }\n}\n```","createdAt":"2025-05-31T19:42:44Z","labels":["priority: 3","effort: high","type: refactor","work: clear"],"number":1681,"repository":"sablier-labs/interfaces","state":"open","title":"Custom errors that extend from the Error class for a more robust developer experience","type":"issue","updatedAt":"2025-06-25T18:24:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1681"},{"author":"PaulRBerg","body":"e.g. here\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropDashboardQuery.ts#L86\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/packages/subgraphs/src/client/index.ts#L115\n\n`crash.log` should only be used for tracking actual crashes","createdAt":"2025-05-31T18:53:55Z","labels":["priority: 2","type: chore","work: complicated"],"number":1680,"repository":"sablier-labs/interfaces","state":"closed","title":"\"crash\" logger used in non-crash contexts","type":"issue","updatedAt":"2025-06-04T17:25:47Z","url":"https://github.com/sablier-labs/interfaces/issues/1680"},{"author":"PaulRBerg","body":"The tabs should be abstracted through a type/enum so that we can check if the search queries belong to the type.\n\nInstead of doing this:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropDashboardQuery.ts#L32-L34\n\nWe would do:\n\n```typescript\nif (identifier in AIRDROPS_TABS) {\n // ...\n}\n```","createdAt":"2025-05-31T18:47:54Z","labels":["priority: 3","type: refactor"],"number":1679,"repository":"sablier-labs/interfaces","state":"open","title":"Types/enums for the tabs","type":"issue","updatedAt":"2025-05-31T18:47:54Z","url":"https://github.com/sablier-labs/interfaces/issues/1679"},{"author":"PaulRBerg","body":"It is confusing behavior that the UI defaults to using the connected chain when the chain ID provided in the search is not found among the list of supported chains:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropDashboardQuery.ts#L41-L50\n\nThe user is expressly asking for a particular chain. If that chain is not supported by Sablier, a bespoke modal/error has to be thrown to inform the user about the state of affairs.\n\nOnly there in the modal error, we could suggest a recommendation to search for the connected chain.","createdAt":"2025-05-31T18:31:39Z","labels":["priority: 3","effort: low","type: refactor"],"number":1678,"repository":"sablier-labs/interfaces","state":"open","title":"When the search query yields an unknown chain, the UI should display an error not default to the connected chain","type":"issue","updatedAt":"2025-06-25T19:19:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1678"},{"author":"PaulRBerg","body":"```typescript\nimport { bn } from \"@sablier/utils\"; // or `@sablier/mixins`\n\nconst foo = bn(10);\n// instead of\nconst foo = new BigNumber(10);\n```","createdAt":"2025-05-31T16:28:27Z","labels":["priority: 3","effort: medium","type: refactor","work: clear"],"number":1676,"repository":"sablier-labs/interfaces","state":"open","title":"Add \"bn\" utility to improve developer experience","type":"issue","updatedAt":"2025-06-04T17:20:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1676"},{"author":"PaulRBerg","body":"This should check for `===`, NOT for `!==`.\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropsSearch.ts#L42-L45","createdAt":"2025-05-31T16:26:18Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1675,"repository":"sablier-labs/interfaces","state":"open","title":"\"useAirdropsSearch\" allows search on unsupported chains","type":"issue","updatedAt":"2025-05-31T16:26:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1675"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useFlowDashboardTab.ts#L9-L13","createdAt":"2025-05-30T20:58:39Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1673,"repository":"sablier-labs/interfaces","state":"closed","title":"\"tabs.vesting\" used in \"useFlowDashboardTab\"","type":"issue","updatedAt":"2025-06-02T13:44:09Z","url":"https://github.com/sablier-labs/interfaces/issues/1673"},{"author":"PaulRBerg","body":"Here:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useFlowOptions.ts#L68\n\nPerhaps we should rename `useModalLockupSimulator` to `useModalStreamSimulator`? And `modals.lockupSimulator` to `modals.streamSimulator`?","createdAt":"2025-05-30T20:42:10Z","labels":["priority: 3","effort: low"],"number":1672,"repository":"sablier-labs/interfaces","state":"closed","title":"Lockup simulator used in flow modals","type":"issue","updatedAt":"2025-06-04T17:19:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1672"},{"author":"PaulRBerg","body":"During my recent refactor, I've noticed that there is a lot of unused/dead code in the code base.\n\nIt would thus be helpful to add a utility/analyzer for reporting unused code.","createdAt":"2025-05-30T19:51:08Z","labels":["priority: 3","effort: medium","type: chore"],"number":1671,"repository":"sablier-labs/interfaces","state":"closed","title":"Script/utility for detecting unused code","type":"issue","updatedAt":"2025-08-15T12:38:24Z","url":"https://github.com/sablier-labs/interfaces/issues/1671"},{"author":"PaulRBerg","body":"See [Winston](https://github.com/winstonjs/winston) and my work in Deployments and Indexers:\n\n- https://github.com/sablier-labs/deployments\n- https://github.com/sablier-labs/indexers\n","createdAt":"2025-05-30T17:51:57Z","labels":["priority: 3","effort: high","type: chore","work: complicated"],"number":1670,"repository":"sablier-labs/interfaces","state":"open","title":"Use a professional logger like Winston for debugging logs","type":"issue","updatedAt":"2025-06-04T17:24:32Z","url":"https://github.com/sablier-labs/interfaces/issues/1670"},{"author":"PaulRBerg","body":"The cost of using `useMemo` is higher than running the nil checks on every render:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropCurrentOnchain.ts#L16-L19\n\nAI explanation:\n\n> This is just a nil check + array length check - extremely fast operations that take nanoseconds.\n> **useMemo overhead exceeds the benefit:**\n> `useMemo` has to compare dependencies `[chainId, ids]` on every render\n> It has to decide whether to recompute or return cached value\n> This overhead is likely more expensive than just computing the boolean directly\n\nAnother benefit of removing the `useMemo`: cleaner and more palatable code.","createdAt":"2025-05-30T17:41:55Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1669,"repository":"sablier-labs/interfaces","state":"open","title":"Dememoize trivial operations like nil checks in \"isEnabled\"","type":"issue","updatedAt":"2025-05-30T17:41:55Z","url":"https://github.com/sablier-labs/interfaces/issues/1669"},{"author":"PaulRBerg","body":"Should be `airdropOnchain`:\n\nhttps://github.com/sablier-labs/interfaces/blob/cfc9d09fc0650dee271b61b09d50d81f512bf86f/apps/client/src/hooks/useAirdropCurrentOnchain.ts#L27","createdAt":"2025-05-30T17:35:03Z","labels":["type: bug","priority: 3","effort: low","work: clear"],"number":1668,"repository":"sablier-labs/interfaces","state":"open","title":"Incorrect request ID used as key in \"useAirdropCurrentOnchain\"","type":"issue","updatedAt":"2025-05-30T17:35:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1668"},{"author":"PaulRBerg","body":"Two small changes to improve the developer experience:\n\n- [ ] Provide a `NOW` constant for `new BigNumber(Date.now())` (since it's used in so many places throughout the repo)\n- [ ] Modify `_.toSeconds` to accept a `number` as an input so that `NOW` doesn't have to be always stringified before","createdAt":"2025-05-30T15:55:25Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1667,"repository":"sablier-labs/interfaces","state":"open","title":"Provide \"NOW\" constant in milliseconds, and allow number as inputs in \"toSeconds\"","type":"issue","updatedAt":"2025-06-02T21:58:13Z","url":"https://github.com/sablier-labs/interfaces/issues/1667"},{"author":"PaulRBerg","body":"Once https://github.com/sablier-labs/interfaces/issues/1652 is implemented, we will be able to separate the Lockup v1.0 proxy GraphQL queries from the v1.1+ proxy-less queries.\n\nThis will lead to more performant queries from The Graph. As per their [docs](https://thegraph.com/docs/en/subgraphs/querying/graphql-api/#subgraph-metadata-example):\n\n> Note: When writing queries, it is important to consider the performance impact of using the or operator. While or can be a useful tool for broadening search results, it can also have significant costs. One of the main issues with or is that it can cause queries to slow down.","createdAt":"2025-05-30T11:54:34Z","labels":["priority: 2","effort: medium","type: perf","work: clear"],"number":1665,"repository":"sablier-labs/interfaces","state":"closed","title":"Separate Lockup v1.0 proxy queries from v1.1+ queries for performance reasons","type":"issue","updatedAt":"2025-06-02T10:52:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1665"},{"author":"PaulRBerg","body":"<img width=\"317\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2c2df6ba-5423-4b0e-aa0d-fec03b78b619\" />","createdAt":"2025-05-29T17:53:59Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1660,"repository":"sablier-labs/interfaces","state":"closed","title":"Browser tab says \"Vesting Streams\" in Payment stream page","type":"issue","updatedAt":"2025-06-02T13:44:09Z","url":"https://github.com/sablier-labs/interfaces/issues/1660"},{"author":"PaulRBerg","body":"When errors are reported to the console here:\n\n- https://github.com/sablier-labs/interfaces/blob/cab40248a61f3823b425737f82b0314b14108c3c/packages/subgraphs/src/client/index.ts#L113-L116\n- https://github.com/sablier-labs/interfaces/blob/cab40248a61f3823b425737f82b0314b14108c3c/packages/utils/src/vendors/crash.ts\n\nThe endlines are not parsed, and they are printed as raw `\\n` characters:\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/87d31ac2-4938-4fc6-bb65-bec0014d9763\" />\n\n","createdAt":"2025-05-29T14:07:38Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1659,"repository":"sablier-labs/interfaces","state":"open","title":"Better console formatting for GraphQL errors","type":"issue","updatedAt":"2025-06-02T10:34:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1659"},{"author":"PaulRBerg","body":"The `isNilOrEmptyString` lodash utility is used throughout the code base.\n\nThe name of the function is verbose.\n\nWe should alias is to `isNil` or something shorter to avoid nesting statements on multiple lines.","createdAt":"2025-05-29T13:26:55Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1658,"repository":"sablier-labs/interfaces","state":"open","title":"Shorter alias for \"_.isNilOrEmptyString\"","type":"issue","updatedAt":"2025-06-04T11:34:30Z","url":"https://github.com/sablier-labs/interfaces/issues/1658"},{"author":"PaulRBerg","body":"Context:\n\n- https://nextjs.org/docs/architecture/nextjs-compiler#modularize-imports\n- https://vercel.com/blog/how-we-optimized-package-imports-in-next-js\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b39f0a12-8266-4beb-b6d5-a32bc90e040c\" />","createdAt":"2025-05-29T13:14:17Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1657,"repository":"sablier-labs/interfaces","state":"open","title":"Use \"optimizePackageImports\" instead of \"modularizeImports\"","type":"issue","updatedAt":"2025-05-29T13:14:17Z","url":"https://github.com/sablier-labs/interfaces/issues/1657"},{"author":"PaulRBerg","body":"Next.js supports TypeScript now:\n\nhttps://nextjs.org/docs/pages/api-reference/config/typescript","createdAt":"2025-05-29T13:10:33Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1656,"repository":"sablier-labs/interfaces","state":"closed","title":"Use TypeScript for Next.js config file","type":"issue","updatedAt":"2025-05-29T13:11:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1656"},{"author":"PaulRBerg","body":"## Problem\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5071ed75-a12a-4f8d-b7ce-abda8146521a\" />\n\n<img width=\"250\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/71100a4c-75b5-4c5e-9ce4-6509abd852e4\" />\n\n## Solution\n\nAllow an option in the UI to hide/ filter out scammy tokens.","createdAt":"2025-05-29T12:43:24Z","labels":["type: feature","priority: 2","effort: high"],"number":1655,"repository":"sablier-labs/interfaces","state":"open","title":"Allow users to hide scammy tokens","type":"issue","updatedAt":"2025-05-29T12:43:24Z","url":"https://github.com/sablier-labs/interfaces/issues/1655"},{"author":"PaulRBerg","body":"Context: https://x.com/mykcryptodev/status/1927909997373014506\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/0c741ef4-2c31-4565-aac1-e79b637e48cb\"/>","createdAt":"2025-05-29T12:38:46Z","labels":["work: complicated"],"number":1654,"repository":"sablier-labs/interfaces","state":"closed","title":"Get rid of scary infinite allowance warning for Smart Wallet","type":"issue","updatedAt":"2025-06-02T09:35:50Z","url":"https://github.com/sablier-labs/interfaces/issues/1654"},{"author":"PaulRBerg","body":"Rename \"Sablier V2\" to something else.\r\n\r\n<img width=\"600\" alt=\"SCR-20241212-nimy\" src=\"https://github.com/user-attachments/assets/963bbcf6-fc5e-4e74-8585-6c17b1445897\" />\r\n","createdAt":"2024-12-12T13:02:57Z","labels":["priority1"],"number":316,"repository":"sablier-labs/legacy-interfaces","state":"open","title":"Rename \"Sablier V2\" banner","type":"issue","updatedAt":"2024-12-12T13:02:57Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/316"},{"author":"PaulRBerg","body":"In line with package tethering and Sablier Flow.\r\n\r\nhttps://github.com/sablier-labs/docs/pull/186","createdAt":"2024-12-12T13:02:11Z","labels":[],"number":315,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Rename all references from \"Sablier V1\" to \"Sablier Legacy\"","type":"issue","updatedAt":"2024-12-21T10:43:05Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/315"},{"author":"PaulRBerg","body":"An issue reported by Ahrefs — the V1 landing app points to stale links such as `sablier.com/terms-of-service`:\r\n\r\n<img width=\"500\" alt=\"SCR-20240925-mhug\" src=\"https://github.com/user-attachments/assets/35dad21a-bb70-485c-b57e-aa3a8b178cf0\">\r\n","createdAt":"2024-09-25T12:48:12Z","labels":["bug"],"number":313,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Stale links in footer","type":"issue","updatedAt":"2024-09-25T13:29:58Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/313"},{"author":"razgraf","body":"We have a custom implementation for the Ronin connector in v1. Looks like their new wallet version (v2.0.1) broke the API.\r\n\r\n<img width=\"608\" alt=\"Screenshot 2024-05-13 at 11 55 09\" src=\"https://github.com/sablier-labs/v1-interfaces/assets/15740806/73f6a738-71e6-4cc3-9f51-da5788fa5aad\">\r\n","createdAt":"2024-05-13T10:57:23Z","labels":["bug"],"number":311,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Ronin wallet fails to establish connection after v2.0.0+","type":"issue","updatedAt":"2024-05-14T17:58:23Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/311"},{"author":"PaulRBerg","body":"To simplify our privacy policy and legal maintenance work, we should replace Rollbar with Sentry.","createdAt":"2024-03-26T12:55:43Z","labels":["enhancement","priority2"],"number":310,"repository":"sablier-labs/legacy-interfaces","state":"open","title":"Replace Rollbar with Sentry","type":"issue","updatedAt":"2024-03-26T12:55:43Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/310"},{"author":"razgraf","body":"Rollbar has been reporting a couple of fails due to rate limiting with TRM's free API. It's weird, as Sablier V2 had much more usage and no reports have been caught by Sentry.. so unsure why V1 is experiencing these failing calls.\r\n\r\n![Screenshot 2024-02-21 at 11 56 41](https://github.com/sablier-labs/v1-interfaces/assets/15740806/7748e635-2ad3-4c26-b629-43dcd1fa6f3a)\r\n","createdAt":"2024-02-21T10:02:23Z","labels":["bug"],"number":309,"repository":"sablier-labs/legacy-interfaces","state":"open","title":"TRM failing with 429 rate-limit","type":"issue","updatedAt":"2024-02-21T10:30:16Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/309"},{"author":"PaulRBerg","body":"PR #304 addressed the problem of interacting with $TORN streams - this is what is shown when a $TORN stream (example [here](https://v1-app.sablier.com/stream/105359)) is opened in the UI:\r\n\r\n<img width=\"500\" alt=\"SCR-20231215-leqi\" src=\"https://github.com/sablier-labs/v1-interfaces/assets/8782666/53be627e-4ca2-4183-8e96-e5bc74922091\">\r\n\r\nThat is good. However, there's one more edge case - the user can append `/history` to the URL, and they will be able to see this:\r\n\r\n<img width=\"300\" alt=\"SCR-20231215-lefv\" src=\"https://github.com/sablier-labs/v1-interfaces/assets/8782666/e3955d20-75b6-4684-926c-e03788a372ed\">\r\n\r\nFor completeness, we should block this page, too.","createdAt":"2023-12-15T10:26:07Z","labels":["enhancement","priority2"],"number":307,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Block the history page for sanctioned streams","type":"issue","updatedAt":"2024-01-11T07:25:40Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/307"},{"author":"PaulRBerg","body":"Goerli is getting deprecated:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0c76cc53-99be-4bba-9103-a45b8705550d\"/>\r\n","createdAt":"2023-12-13T12:33:34Z","labels":["feature","priority2"],"number":306,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Drop support for Goerli","type":"issue","updatedAt":"2024-01-11T07:25:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/306"},{"author":"razgraf","body":"The app will have to remove access to Goerli and replace it with Sepolia. This also requires deploying contracts there (@PaulRBerg ), as well as deploying a new hosted subgraph for Sepolia.\r\n\r\nIt should probably be dealt with during the next bug-fixing or maintenance sprint.","createdAt":"2023-12-13T12:18:32Z","labels":[],"number":305,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Deprecate Goerli, move to Sepolia","type":"issue","updatedAt":"2023-12-13T12:41:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/305"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nReported by user on Discord:\r\n\r\n```text\r\nmain.bddf9a4a.js:2 Error: Invalid chainId NaN\r\n    at main.bddf9a4a.js:2:3180948\r\nbecause an ancestor violates the following Content Security Policy directive: \"frame-ancestors https://%2A.sablier.finance/ https://sablier.finance/\".\r\n\r\n```\r\n\r\nIt's possible that this is strictly related to the `sablier.com` domain. I've asked the user to check if `pay.sablier.finance` works.\r\n\r\n## Screenshot\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-09-08 at 11 34 46 AM\" src=\"https://github.com/sablier-labs/v1-interfaces/assets/8782666/bcd4220a-a8ae-453c-a8e7-1a3e7c3240de\">\r\n","createdAt":"2023-09-08T08:35:28Z","labels":["bug"],"number":303,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Wallet Connect not working on v1-pay.sablier.com","type":"issue","updatedAt":"2023-10-07T12:03:57Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/303"},{"author":"PaulRBerg","body":"After https://github.com/sablier-labs/v1-interfaces/pull/301, there's no CI workflow run on PRs anymore.\r\n\r\nWe should write another workflow that lints the code and builds the packages.","createdAt":"2023-07-13T06:46:38Z","labels":["testing","priority3"],"number":302,"repository":"sablier-labs/legacy-interfaces","state":"open","title":"Add CI workflow to lint the code","type":"issue","updatedAt":"2023-07-13T06:46:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/302"},{"author":"PaulRBerg","body":"There should be a banner at the top of each app (`pay.sablier.finance` and `app.sablier.finance`) to announce the V2 launch.","createdAt":"2023-07-10T09:46:21Z","labels":["feature"],"number":298,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add banner about V2","type":"issue","updatedAt":"2023-07-13T17:13:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/298"},{"author":"PaulRBerg","body":"Cc @razgraf - does this make sense to you, too?","createdAt":"2023-07-10T09:26:55Z","labels":["feature","priority1"],"number":296,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Remove stream creation form to encourage users to migrate to V2","type":"issue","updatedAt":"2023-07-10T09:44:08Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/296"},{"author":"razgraf","body":"The team from Ronin migrated their subgraph management to a service called Satsuma. They provided us with a nice dashboard to track the endpoint (and probably update the deployment ... or make a new one easier).\r\n\r\nHere's the link that should replace the old ronin subgraph endpoint: https://subgraph.satsuma-prod.com/d8d041c49d56/sablierlabs/sablier-ronin/api","createdAt":"2023-07-06T22:56:47Z","labels":[],"number":295,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Update Ronin subgraph endpoint","type":"issue","updatedAt":"2023-10-07T12:02:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/295"},{"author":"razgraf","body":"There seems to be a misconfiguration for wallet connect with web3-react, on [`chains` vs `optionalChains`](https://docs.walletconnect.com/2.0/advanced/migration-from-v1.x/dapps#web3-react).\r\n\r\n![CleanShot 2023-06-27 at 19 00 06@2x](https://github.com/sablier-labs/v1-interfaces/assets/15740806/4c323bf7-3cae-4739-b41c-62cddd896cdd)\r\n","createdAt":"2023-06-27T21:45:16Z","labels":["bug"],"number":294,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Re-configure wallet connect with web3-react","type":"issue","updatedAt":"2023-06-28T15:01:00Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/294"},{"author":"PaulRBerg","body":"See:\r\n\r\nhttps://github.com/sablier-labs/v1-interfaces/blob/1f08b5b3bb1c04feb10f3e1df38475844f8dc554/packages/apollo/src/createClient.js#L10-L12\r\n\r\nRef: https://github.com/graphprotocol/support/issues/105","createdAt":"2023-05-21T21:52:49Z","labels":["enhancement","priority2","backlog"],"number":292,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Update URL for Hosted Service subgraphs","type":"issue","updatedAt":"2023-10-07T12:04:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/292"},{"author":"razgraf","body":"WalletConnect v2 comes with a universal-provider as part of the setup. The package literally requires `react-native` as a hard import and breaks the build process when it doesn't notice it. Apparently, declaring it as a dependency to the project will not fix it. \r\n\r\nUntil this is not fixed or patched temporarily, the build process of #289 will fail.\r\n\r\nRelated issues to watch:\r\n- https://github.com/Uniswap/web3-react/issues/811\r\n- https://github.com/WalletConnect/walletconnect-monorepo/issues/2304\r\n- https://github.com/wagmi-dev/wagmi/issues/2290","createdAt":"2023-05-10T13:01:01Z","labels":["bug","dependencies"],"number":290,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Track WalletConnect v2 dependency issue (react-native)","type":"issue","updatedAt":"2023-10-07T12:05:00Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/290"},{"author":"maxdesalle","body":"The badge images can be found [here](https://drive.google.com/drive/folders/1ZKVOHQZeIit2QyndO7uMxP0NMd43IjAn), and should be placed somewhere in the frontend app.","createdAt":"2023-03-24T19:04:04Z","labels":["feature"],"number":287,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add a badge for The Graph to indicate that we are using the decentralized network","type":"issue","updatedAt":"2023-05-15T10:48:11Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/287"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablierhq/v1-interfaces/pull/279#discussion_r1112968266), @razgraf added a check for mined but unfinalized txs in #279 (this is something that can only be done starting with the Byzantium hardfork of Ethereum), but he only added in the `createStreamMachine`.\r\n\r\nWe should also implement this in the [`Transactions`](https://github.com/sablierhq/v1-interfaces/blob/main/packages/contexts/src/Transactions.js) context, so that cancellations and withdrawals are handled, too.","createdAt":"2023-02-21T12:21:45Z","labels":["enhancement","priority3"],"number":282,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Handle mined but unfinalized txs in the `Transactions` context","type":"issue","updatedAt":"2024-12-21T10:44:09Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/282"},{"author":"PaulRBerg","body":"To make it clear that users need to accept out Terms of Service when using the Sablier interfaces, we should add a warning about this in the wallet connection modal.\r\n\r\nSee how Uniswap [did][1] this:\r\n\r\n<img width=\"426\" alt=\"uniswap-disclaimer\" src=\"https://user-images.githubusercontent.com/8782666/194028424-5435fbc2-044e-43f3-8d3d-25f3b672bba7.png\">\r\n\r\n[1]: https://github.com/Uniswap/interface/blob/fc08ede58afa2d6f15da7845d3167022ced7940a/src/components/WalletModal/index.tsx#L310-L341","createdAt":"2023-02-18T18:03:06Z","labels":["documentation","priority1"],"number":281,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Prompt user to agree to Terms of Service when connecting a wallet","type":"issue","updatedAt":"2023-03-08T12:01:07Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/281"},{"author":"razgraf","body":"Wallet connect will be migrating their system to v2, ending support for v1. The deadline has been postponed to [June 28](https://twitter.com/WalletConnect/status/1626296351796387841), but as part of #271 we began preparing for this update in #279 anyway.\r\n\r\nWatch this web3-react PR https://github.com/Uniswap/web3-react/pull/750 and make sure we add support for WC v2 after it gets merged successfully. ","createdAt":"2023-02-18T15:29:12Z","labels":["dependencies","enhancement","priority0"],"number":280,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Upgrade wallet connect to v2","type":"issue","updatedAt":"2023-05-15T10:48:11Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/280"},{"author":"PaulRBerg","body":"Advice received from our lawyers:\r\n\r\n> The issue is that widgets provided by Twitter use cookies and, as you are making the decision to include them on your website, you (and, arguably, Twitter) are required to obtain prior consent.  You may have recently noticed more websites disabling this kind of social media integration where visitors don’t consent to cookies for this reason.  While you may be happy to accept a degree of compliance risk here, one alternative would be to look for an alternative plugin/widget which displays information from Twitter without using cookies or similar technologies.","createdAt":"2023-02-14T14:26:20Z","labels":["enhancement","priority3"],"number":278,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use a Twitter timeline widget that doesn't have cookies","type":"issue","updatedAt":"2023-05-15T10:48:11Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/278"},{"author":"PaulRBerg","body":"View details in Rollbar: [https://rollbar.com/sablier/pay.sablier.finance/items/546/](https://rollbar.com/sablier/pay.sablier.finance/items/546/)\n\n```\n\nTypeError: u.estimateGas.cancelStream is not a function\n  File \"https://pay.sablier.finance/static/js/main.36a8b6f4.js\", line 2, in [anonymous]\n  File \"https://pay.sablier.finance/static/js/main.36a8b6f4.js\", line 2, in d\n  File \"https://pay.sablier.finance/static/js/main.36a8b6f4.js\", line 2, in Generator.<anonymous>\n  File \"https://pay.sablier.finance/static/js/main.36a8b6f4.js\", line 2, in Generator.next\n  File \"https://pay.sablier.finance/static/js/main.36a8b6f4.js\", line 2, in n\n  File \"https://pay.sablier.finance/static/js/main.36a8b6f4.js\", line 2, in s\n```","createdAt":"2023-02-02T08:24:18Z","labels":["bug"],"number":275,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"TypeError: u.estimateGas.cancelStream is not a function","type":"issue","updatedAt":"2023-02-02T09:00:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/275"},{"author":"PaulRBerg","body":"See the conversation with a user on Crisp:\r\n\r\n<img width=\"985\" alt=\"Screenshot 2023-01-24 at 11 13 47 PM\" src=\"https://user-images.githubusercontent.com/8782666/214417885-4e8e16aa-d147-4f49-b628-5de240f359a9.png\">\r\n","createdAt":"2023-01-24T21:14:50Z","labels":["bug","priority2"],"number":274,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Test withdrawal with Trezor","type":"issue","updatedAt":"2024-12-21T10:42:53Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/274"},{"author":"PaulRBerg","body":"View details in Rollbar: [https://rollbar.com/sablier/pay.sablier.finance/items/514/](https://rollbar.com/sablier/pay.sablier.finance/items/514/)\n\n```\n\nTypeError: null is not an object (evaluating 'document.querySelector('meta[property=\"og:site_name\"]').content')\n  File \"https://pay.sablier.finance/\", line 1, in global code\n```","createdAt":"2023-01-14T09:07:51Z","labels":["bug","priority3"],"number":273,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Cannot read property of undefined/null expression document.querySelector('meta[...","type":"issue","updatedAt":"2024-12-21T10:45:35Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/273"},{"author":"PaulRBerg","body":"See [item #375](https://app.rollbar.com/a/sablier/fix/item/pay.sablier.finance/375/) in Rollbar, and the associated [issue](https://github.com/trustwallet/trust-web3-provider/issues/355) I opened in TrustWallet's repo.\r\n\r\nThe only place where we're accessing an `address` property is in the [`TokenInput`](https://github.com/sablierhq/v1-interfaces/blob/68cec286fc783e4cf1443d7c976c73095b603832/apps/sender/src/components/CreateStream/TokenInput/index.js#L235) component, though the `token` object should definitely have an `address` property in this context.\r\n\r\nAlso, it's a bit strange that this keeps happening only in TrustWallet, so I am rather inclined to believe that this is an issue with TrustWallet.","createdAt":"2023-01-04T14:04:15Z","labels":["bug","priority3"],"number":272,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Uncaught TypeError: Cannot read properties of undefined (reading 'address')","type":"issue","updatedAt":"2024-12-21T10:45:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/272"},{"author":"PaulRBerg","body":"There is an [Upgrading from v6](https://github.com/Uniswap/web3-react#upgrading-from-v6) section in `web3-react`'s README.\r\n\r\nAs per the discussion [here](https://github.com/WalletConnect/walletconnect-monorepo/issues/839), upgrading to v8 would also solve [the \"User closed modal\" error](https://rollbar.com/sablier/pay.sablier.finance/items/524/).","createdAt":"2023-01-04T13:18:31Z","labels":["dependencies","priority1"],"number":271,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Upgrade to web3-react v8","type":"issue","updatedAt":"2023-02-21T13:14:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/271"},{"author":"PaulRBerg","body":"Error reported on Rollbar:\r\n\r\n> Error: call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method=\"balanceOf(uint256,address)\", data=\"0x\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)\r\n\r\nWhat we know:\r\n\r\n- Happened on [app.sablier.finance](https://app.sablier.finance)\r\n- Happened for stream with id 111566 on Polygon\r\n- It is related to a call to the `balanceOf` function of Sablier V1 (not the ERC-20 token)\r\n\r\nSee the full report in [item #919](https://rollbar.com/sablier/app.sablier.finance/items/919) on Rollbar.","createdAt":"2022-12-21T09:38:22Z","labels":["bug"],"number":270,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"stream does not exist\" when calling \"balanceOf\" on app.sablier.finance","type":"issue","updatedAt":"2024-12-21T10:45:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/270"},{"author":"PaulRBerg","body":"Looks like some user don't have [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) poly-filled in the default browser context.\r\n\r\nSee [item #174](https://app.rollbar.com/a/sablier/fix/item/pay.sablier.finance/174/), which was last received on December 9, 2022.","createdAt":"2022-12-15T11:48:27Z","labels":["bug"],"number":269,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Can't find variable AbortController","type":"issue","updatedAt":"2024-12-21T10:45:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/269"},{"author":"PaulRBerg","body":"We keep getting lots of reports about user rejected transactions on Rollbar, e.g. [item #500](https://app.rollbar.com/a/sablier/fix/item/pay.sablier.finance/500).\r\n\r\nBut these should not be reported at the \"Error\" level. Instead, they should be reported \"Info\" level.","createdAt":"2022-12-15T11:46:14Z","labels":["enhancement"],"number":268,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"User rejected transactions should not be logged as errors on Rollbar","type":"issue","updatedAt":"2023-02-22T08:10:26Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/268"},{"author":"razgraf","body":"Typy doesn't seems to work when numeric keys are being used to extract an object. It should convert the key into a string on its own but it fails to do that.\r\n\r\nThe example below showcases an attempt to extract the value for `GAS_LIMITS[chainId]` and the difference between selecting by string or by numeric key. \r\n\r\n```js\r\ntypy(GAS_LIMITS, chainId) // translates to e.g. GAS_LIMIT[1], fails\r\ntypy(GAS_LIMITS, chainId.toString()) // translates to e.g. GAS_LIMIT[\"1\"], works\r\n```\r\n\r\n![Screenshot 2022-12-05 at 15 04 03](https://user-images.githubusercontent.com/15740806/205644208-e7e4b9df-e6af-45aa-9e3c-8afb4ebf0072.png)\r\n\r\nFor some reason, selecting by numeric key fails, causing typy to simply fallback and return the parent object instead of the child. It looks like they're [requiring](https://github.com/flexdinesh/typy/blob/d891dc729994eb92f355da8a94c7b45149b8ebad/src/util.js#L1-L2) the nesting keys to be a string but this is only visible in-code, and nowhere to be found in their docs 🤷‍♂️.\r\n\r\nThis may also be the reason for #265 and other similar problems.\r\n","createdAt":"2022-12-05T13:08:36Z","labels":["bug","priority0"],"number":266,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Massive error with `typy` querying objects with numeric keys","type":"issue","updatedAt":"2022-12-15T11:45:21Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/266"},{"author":"PaulRBerg","body":"I cannot withdraw at all on Optimism (didn't test on other chains yet).\r\n\r\n- Stream id [101119](https://app.sablier.finance/stream/101119)\r\n- USDC stream\r\n- Small amounts involved\r\n\r\nGetting this vague and annoying error:\r\n\r\n![image](https://user-images.githubusercontent.com/8782666/205511085-f30f354d-d1e6-4088-80d1-ebc0a2c64d9d.png)\r\n\r\nAnd nothing else (except for this warning https://github.com/sablierhq/v1-interfaces/issues/264, which seems unrelated).","createdAt":"2022-12-04T19:25:55Z","labels":["bug","priority0"],"number":265,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"Internal JSON-RPC\" error on Optimism","type":"issue","updatedAt":"2022-12-06T20:09:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/265"},{"author":"PaulRBerg","body":"Full error log:\r\n\r\n>  Machine given to `useMachine` has changed between renders.\r\n> This is not supported and might lead to unexpected results. Please make sure that you pass the same Machine as argument each time\r\n\r\nThis seems to be just a warning, but it doesn't look great (as the warning says, this can lead to unexpected issues), which was probably introduced in https://github.com/sablierhq/v1-interfaces/pull/256 when I upgraded our xState dependencies.\r\n\r\nIt is curious that it only happens in the recipient app, only when viewing a stream.\r\n\r\n<details>\r\n<summary>Full stack trace</summary>\r\n<img width=\"558\" alt=\"Screenshot 2022-12-04 at 9 12 57 PM\" src=\"https://user-images.githubusercontent.com/8782666/205510528-be982def-d608-44d9-9630-908daaac656b.png\">\r\n</details>","createdAt":"2022-12-04T19:13:18Z","labels":["bug","priority2"],"number":264,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Machine given to \"useMachine\" has changed between renders","type":"issue","updatedAt":"2024-12-21T10:45:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/264"},{"author":"razgraf","body":"We're having a problem with too many requests going to the Infura nodes. \r\n\r\nThe issue has been narrowed down to `eth_blockNumber` calls being sent by the apps. The culprits: `EthereumContextUpdater` and its main consumer `TransactionsContextUpdater`.\r\n\r\n\r\nPossible solutions:\r\n1. Nuke everything. Makes the code cleaner but for cancel + withdraw we won't have that \"block/lock of the side bar\" to deny the user from closing it while txs are happening.\r\n2. Make it so the `blockNumber` updater only activates when there are pending transactions registered.\r\n\r\nI'm currently exploring solution no. 2, with the first one being a last-resort fallback.\r\n\r\n\r\nReferences:\r\n- [`EthereumContext`](https://github.com/sablierhq/v1-interfaces/blob/a220a5d1d0c10625cb4d88d5d0e8146867c9ab6f/packages/contexts/src/Ethereum.js)","createdAt":"2022-12-02T13:52:19Z","labels":["bug"],"number":262,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Too many `eth_blockNumber` requests being sent to Infura","type":"issue","updatedAt":"2022-12-14T13:38:22Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/262"},{"author":"PaulRBerg","body":"When I load the apps on localhost, this is what I see in the console:\r\n\r\n> Indicate whether to send a cookie in a cross-site request by specifying its SameSite attribute\r\n\r\nAnd as a screenshot:\r\n\r\n<img width=\"737\" alt=\"SameSite attribute error\" src=\"https://user-images.githubusercontent.com/8782666/202220037-816af3cd-8722-4253-b072-d8c10d2cd65e.png\">\r\n\r\nThis is caused by the [Crisp Chat](https://crisp.chat/) cookies. I reached out to their support team, who wasn't particularly helpful, but said that this shouldn't affect the chatbox functionality in any way:\r\n\r\n<img width=\"406\" alt=\"Crisp Chat support\" src=\"https://user-images.githubusercontent.com/8782666/202220437-f6e877e4-70d4-467c-b610-85cd6fc08891.png\">\r\n","createdAt":"2022-11-16T15:20:05Z","labels":["bug"],"number":261,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Crisp cookie error on localhost","type":"issue","updatedAt":"2024-12-21T10:45:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/261"},{"author":"PaulRBerg","body":"After https://github.com/sablierhq/v1-interfaces/issues/244 is fully implemented and https://github.com/sablierhq/v1-interfaces/pull/257 gets merged, we should explore whether we can reduce the number of calls made to the TRM API by passing multiple addresses to the `/screening/address` endpoint request.\r\n\r\nFrom the [docs](https://documentation.trmlabs.com/tag/Screening):\r\n\r\n> Users can submit up to five addresses to the Wallet Screening API at one time.","createdAt":"2022-11-15T14:47:15Z","labels":["enhancement"],"number":260,"repository":"sablier-labs/legacy-interfaces","state":"open","title":"Optimize the calls to the TRM API","type":"issue","updatedAt":"2022-11-15T14:47:15Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/260"},{"author":"PaulRBerg","body":"Reported by a user on Discord. I'm not sure if this is about Tally Ho per se or some other issue. The user said that they are getting this error:\r\n\r\n> The user rejected the request\r\n\r\nWhich, according to [this][1] and [this][2], it seems to be a pain in the ass kind of error, as it can have multiple possible causes depending upon the user's wallet configuration.\r\n\r\nMore research needed. I have actually never used Tally Ho.\r\n\r\n![User screenshot](https://user-images.githubusercontent.com/8782666/201513756-c5a9665a-e14e-4828-aba0-566077b276d1.png)\r\n\r\n[1]: https://www.reddit.com/r/AlgorandOfficial/comments/pzdc9b/need_help_it_keep_saying_the_user_rejected_the/\r\n[2]: https://github.com/TrueFiEng/useDApp/issues/852","createdAt":"2022-11-13T09:00:41Z","labels":["bug"],"number":259,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"App doesn't work with the Tally Ho wallet (apparently)","type":"issue","updatedAt":"2024-12-21T10:45:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/259"},{"author":"razgraf","body":"Looks like for very very small numbers, the UI starts showing scientific notations. This is an edge case, as in not too many users will be affected by it. The stream in question is for 1 MATIC over 2 years.\r\n\r\nOn one hand, a possible solution would be to restrict the precision of these numbers and show a `<0` instead of the full number.\r\nOn the other hand, leaving it like this at least keeps the UX of an increasing number for the streamed amount.\r\n\r\n![Screenshot 2022-11-11 at 14 56 56](https://user-images.githubusercontent.com/15740806/201345117-8a9892db-4df2-4702-9ba5-73669df30532.png)\r\n","createdAt":"2022-11-11T13:00:39Z","labels":["bug","priority3"],"number":258,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"The UI doesn't handle very small numbers","type":"issue","updatedAt":"2022-11-11T16:15:01Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/258"},{"author":"PaulRBerg","body":"In all places but one (the [`ActivityCard`][1]), we are not passing the `symbol` to the `StyledTokenLogo` component, and this results in the token logo not being displayed e.g. on the streaming page:\r\n\r\n<img width=\"590\" alt=\"Screen Shot 2022-11-01 at 12 28 32 PM\" src=\"https://user-images.githubusercontent.com/8782666/199214061-f06ce67c-4be6-463e-b735-4087c68e614c.png\">\r\n\r\nHowever, all `StyledTokenLogo` components are superclasses of [`TokenLogo`][2], which expects a `symbol` prop.\r\n\r\nJavaScript is a mess.\r\n\r\n[1]: https://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/packages/components/src/Stream/DetailsPage/ActivityCard/index.js\r\n[2]: https://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/packages/components/src/TokenLogo/index.js","createdAt":"2022-11-01T10:31:32Z","labels":["bug"],"number":254,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Token symbol not passed to \"StyledTokenLogo\" component","type":"issue","updatedAt":"2022-11-02T15:24:23Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/254"},{"author":"PaulRBerg","body":"How to reproduce:\r\n\r\n1. Open the app and connect to a chain.\r\n2. Refresh the app.\r\n3. Open the create stream sidebar and click on \"Dai Stablecoin\" to open the token dropdown.\r\n4. Close the sidebar.\r\n5. Switch to any other chain.\r\n6. Switch back to the original chain.\r\n\r\nYou will see this (on Arbitrum):\r\n\r\n<img width=\"544\" alt=\"Screen Shot 2022-11-01 at 11 47 05 AM\" src=\"https://user-images.githubusercontent.com/8782666/199208508-f5d0689f-64b2-40d1-9331-0f114db62dce.png\">\r\n\r\nAnd this (on Ethereum Mainnet);\r\n\r\n<img width=\"544\" alt=\"Screen Shot 2022-11-01 at 11 49 09 AM\" src=\"https://user-images.githubusercontent.com/8782666/199208491-7ad6d0a5-9472-41ad-9209-fdc1faf89859.png\">\r\n","createdAt":"2022-11-01T09:59:54Z","labels":["bug"],"number":253,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Duplicated tokens in create stream sidebar when switching chains","type":"issue","updatedAt":"2022-11-06T23:11:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/253"},{"author":"PaulRBerg","body":"How to reproduce:\r\n\r\n- Switch to the Arbitrum One chain\r\n- Impersonate `0x0298F4332e3857631385b39766325058a93e249f`\r\n- Open stream with id `100048`\r\n- Try to click the \"Cancel\" button\r\n\r\nIt should not be possible to open the cancelation sidebar, because the stream with id 100048 has [ended](https://arbiscan.io/tx/0x70edc088a4f0e6c8d4e16125cfcb7f4ccfe1d1180d3e9eb3bb0c0c8776731011).\r\n\r\n<img width=\"1728\" alt=\"Screen Shot 2022-11-01 at 11 34 41 AM\" src=\"https://user-images.githubusercontent.com/8782666/199204302-0c28b438-2b83-4d2b-ae27-9edd4e371c41.png\">\r\n","createdAt":"2022-11-01T09:41:14Z","labels":["bug"],"number":252,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Canceling streams UI should be disabled when the stream has ended","type":"issue","updatedAt":"2024-12-21T10:45:32Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/252"},{"author":"PaulRBerg","body":"During my work on #249, I have realized how complex the address validation has become in the [`RecipientInput`][recipient-input] component. We have gradually added more logic over time (Ronin addresses, TRM etc.), and now the `useEffect` logic is like a Ruby Goldberg machine.\r\n\r\nIt's about time we turn the validation logic into an xState machine.\r\n\r\n[recipient-input]: https://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/apps/sender/src/components/CreateStream/RecipientInput/index.js","createdAt":"2022-10-31T14:06:52Z","labels":["enhancement"],"number":251,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Turn the \"RecipientInput\" address validation logic into an xState machine","type":"issue","updatedAt":"2024-12-21T10:45:32Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/251"},{"author":"PaulRBerg","body":"We are currently sourcing the token logos from GitHub directly:\r\n\r\nhttps://github.com/sablierhq/v1-interfaces/blob/3930d5b05f41e8509bf83fd2263145c2cebbed99/packages/components/src/TokenLogo/index.js#L234\r\n\r\nHowever, TrustWallet is hosting the token logos on a dedicated CDN. For example, this is the URL for the WETH logo:\r\n\r\n```text\r\nhttps://assets-cdn.trustwallet.com/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\r\n```\r\n\r\nYou can see the full list of URLS [here](https://github.com/trustwallet/assets/blob/5cdbaeeca6981761b827985d9d7c65beea56a0c9/blockchains/ethereum/tokenlist.json)>","createdAt":"2022-10-31T14:04:30Z","labels":["enhancement"],"number":250,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Switch to using TrustWallet API instead of hardcoded GitHub URLs","type":"issue","updatedAt":"2024-12-21T10:45:32Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/250"},{"author":"PaulRBerg","body":"The JavaScript [`match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) function returns an array with the matching strings in the provided input. But we don't want this - we only want a boolean result.\r\n\r\nWe should instead use the [`test`](https://stackoverflow.com/a/6603043/3873510) function here:\r\n\r\nhttps://github.com/sablierhq/frontend/blob/0e5a5a7210cece9026a6ff33ff5339ae3a619b39/packages/utils/src/types.js#L27\r\n\r\nAnd here:\r\n\r\nhttps://github.com/sablierhq/frontend/blob/0e5a5a7210cece9026a6ff33ff5339ae3a619b39/packages/utils/src/types.js#L44\r\n\r\nAnd here:\r\n\r\nhttps://github.com/sablierhq/frontend/blob/0e5a5a7210cece9026a6ff33ff5339ae3a619b39/packages/utils/src/types.js#L53\r\n\r\nThis worked so far because an array is coerced into a boolean if used in an if statement (e.g. `if (array)`). However, during some recent development I bumped into an edge case where this caused a bug.\r\n\r\nIt's so damn easy to shoot ourselves in the foot with JS.","createdAt":"2022-10-30T12:53:31Z","labels":["bug"],"number":248,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Improper use of Regex testing","type":"issue","updatedAt":"2024-12-21T10:45:32Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/248"},{"author":"PaulRBerg","body":"There's an issue with the `validate` function in the `RecipientInput` component:\r\n\r\nhttps://github.com/sablierhq/frontend/blob/3c56cc958c8d039cd3b7fb80c26ad90e6142293b/apps/sender/src/components/CreateStream/RecipientInput/index.js#L73\r\n\r\nIt does not perform the validation checks on addresses resolved via ENS, though it should. We should prevent users from streaming tokens to themselves, to a token contract, etc., even if the address is passed as an ENS!","createdAt":"2022-10-28T10:59:13Z","labels":["bug"],"number":246,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Recipient input address validation is not performed on resolved ENS addresses","type":"issue","updatedAt":"2022-11-02T15:23:10Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/246"},{"author":"PaulRBerg","body":"I am occasionally seeing these invalid requests in the browser console, whereby the app tries to load the logo for a token with address `0x`:\r\n\r\n<img width=\"524\" alt=\"Screen Shot 2022-10-28 at 12 42 53 PM\" src=\"https://user-images.githubusercontent.com/8782666/198557403-217f889e-bb53-40af-83d9-5226b25bc2b1.png\">\r\n\r\nThis started happening only recently. Perhaps related to one of the refactors @razgraf did recently (The Graph etc.)? Or some new token added by Max?","createdAt":"2022-10-28T09:43:30Z","labels":["bug"],"number":245,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Invalid request to load token logo","type":"issue","updatedAt":"2022-11-07T11:41:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/245"},{"author":"PaulRBerg","body":"#243 implemented basic banning, whereby if the wallet address connected to the app is on the list of sanctions provided by TRM, we show the `SanctionModal` and block access to the entire app.\r\n\r\nHowever, the are two more edge cases that need to be taken into account:\r\n\r\n- [x] Block access to streams funded by a sanctioned address; this should be done in the stream page\r\n- [x] Do not let streams be created towards addresses that are sanctioned\r\n- [x] $TORN streams (see latest [update](https://twitter.com/wadealexc/status/1590800683846217729?utm_source=substack&utm_medium=email), they added $TORN on the sanctions list on ~Nov 10, 2022)","createdAt":"2022-10-28T09:26:50Z","labels":["enhancement"],"number":244,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Comprehensive blocking of OFAC sanctioned addresses","type":"issue","updatedAt":"2023-12-15T10:23:13Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/244"},{"author":"PaulRBerg","body":"Reported by a user on Twitter:\r\n\r\n> I'd type a number and before I click withdraw. It'd clean off.\r\n\r\nHe's using Sablier on mobile, and was kind enough to share a screen recording:\r\n\r\nhttps://user-images.githubusercontent.com/8782666/194820755-d29a2bf7-9e86-4787-b08d-9fd60f828723.mov","createdAt":"2022-10-10T07:56:10Z","labels":["bug"],"number":241,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Withdraw input cleaned off automatically on mobile","type":"issue","updatedAt":"2024-12-21T10:45:31Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/241"},{"author":"PaulRBerg","body":"If I pull a copy of the latest HEAD, built id and try to use it the app locally on Ethereum Mainnet, this is what I'm seeing:\r\n\r\n<img width=\"1728\" alt=\"Screen Shot 2022-10-09 at 12 26 57 PM\" src=\"https://user-images.githubusercontent.com/8782666/194749098-09044080-3bd0-41cb-8322-ab40560e54b2.png\">\r\n\r\nThis is with both the sender and the recipient app. If I switch to any other chain (Arbitrum, Optimism, BSC, Polygon, or Avalanche) the app works just fine. Also, thankfully, the works fine on https://sablier.finance, this seems to be just a localhost issue.\r\n\r\nThis seems to be an error with The Graph (I recall seeing the same error when The Graph was malfunctioning in the past).\r\n\r\n@razgraf perhaps we have to allow \"localhost:3000\" in The Graph's settings somewhere?","createdAt":"2022-10-09T09:31:07Z","labels":["wontfix"],"number":240,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Apps don't work on localhost on Ethereum Mainnet","type":"issue","updatedAt":"2022-10-09T17:46:26Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/240"},{"author":"PaulRBerg","body":"See [Add a Google Analytics 4 property (to a site that already has Analytics](https://support.google.com/analytics/answer/9744165?hl=en&utm_id=ad).\r\n\r\nUniversal Analytics (what we're currently using) will stop working on July 1, 2023.","createdAt":"2022-10-08T13:12:23Z","labels":["dependencies","enhancement"],"number":238,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Upgrade to Google Analytics 4","type":"issue","updatedAt":"2023-01-11T16:40:05Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/238"},{"author":"PaulRBerg","body":"We're not optimizing the transaction creation for EIP-1559, since we're not using `maxFeePerGas` and/ or `maxPriorityFeePerGas`.\r\n\r\nSee discussion in https://github.com/sablierhq/frontend/pull/174.","createdAt":"2022-10-06T11:21:38Z","labels":["enhancement"],"number":237,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Optimize for EIP-1559","type":"issue","updatedAt":"2024-12-21T10:45:31Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/237"},{"author":"PaulRBerg","body":"See the bug as reported by a Sablier user on Twitter:\r\n\r\nhttps://twitter.com/quagliero/status/1574721628486762497","createdAt":"2022-09-28T09:13:41Z","labels":["bug"],"number":234,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"execution reverted: amount exceeds the available balance\" when writing amount in the withdraw input box","type":"issue","updatedAt":"2022-10-09T09:46:50Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/234"},{"author":"PaulRBerg","body":"Refer to this [article](https://help.mixpanel.com/hc/en-us/articles/115004494803-Disable-Geolocation-Collection) for instructions on how to do this.","createdAt":"2022-08-16T12:50:39Z","labels":["enhancement","priority1"],"number":230,"repository":"sablier-labs/legacy-interfaces","state":"open","title":"Disable geolocation tracking in Mixpanel","type":"issue","updatedAt":"2023-12-12T17:17:32Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/230"},{"author":"PaulRBerg","body":"There's a code snippet in the landing page which indicates that Sablier is following the ERC-1620 standard:\r\n\r\n<img width=\"830\" alt=\"Screen Shot 2022-08-06 at 5 44 38 PM\" src=\"https://user-images.githubusercontent.com/8782666/183253846-6c8fcf18-1a37-4570-9a52-b0314d26ed85.png\">\r\n\r\nBut we're no longer adhering to ERC-1620 since Sablier v1.1\r\n\r\nThe code snippet is an image, not an actual React component displaying code. I think that it's @razgraf who has generated this image.\r\n","createdAt":"2022-08-06T14:46:01Z","labels":["enhancement"],"number":228,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Remove reference to ERC-1620 in landing page code snippet","type":"issue","updatedAt":"2024-12-21T10:45:31Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/228"},{"author":"PaulRBerg","body":"Instead of:\r\n\r\n> A stream has been initiatied by your company\r\n\r\nWe could instead say:\r\n\r\n> A stream has just been created by your web3 organization\r\n\r\n<img width=\"292\" alt=\"Screen Shot 2022-08-06 at 5 15 16 PM\" src=\"https://user-images.githubusercontent.com/8782666/183252811-b5d60ed0-a971-4c62-8190-8a6f6410ccf0.png\">","createdAt":"2022-08-06T14:18:01Z","labels":["enhancement"],"number":227,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Change copy in demo video on landing page","type":"issue","updatedAt":"2024-12-21T10:45:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/227"},{"author":"PaulRBerg","body":"See [Rollbar entry](https://rollbar.com/sablier/pay.sablier.finance/items/360/?utm_campaign=exp_repeat_item&utm_medium=email&utm_source=rollbar-notification&utm_content=view-item-button-1):\r\n\r\n```text\r\nError: unknown account #0 (operation=\"getAddress\", code=UNSUPPORTED_OPERATION, version=providers/5.6.8) (Most recent call first)\r\n  File ../../src.ts/index.ts line 261 col 28 in e.value\r\n  File ../../src.ts/index.ts line 273 col 20 in e.value\r\n  File ../../src.ts/json-rpc-provider.ts line 204 col 24 in [anonymous]\r\n}\r\n```","createdAt":"2022-07-24T12:15:01Z","labels":["bug"],"number":222,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Error: unknown account #0 (operation=\"getAddress\", code=UNSUPPORTED_OPERATION, version=providers/5.6.8)","type":"issue","updatedAt":"2024-12-21T10:45:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/222"},{"author":"PaulRBerg","body":"See [Rollbar entry](https://rollbar.com/sablier/pay.sablier.finance/items/362/occurrences/254534486845/?utm_campaign=exp_repeat_item&utm_medium=email&utm_source=rollbar-notification&utm_content=view-item-button-1).\r\n\r\nTraceback:\r\n\r\n```text\r\nError: Ronin Wallet is not installed\r\n1\r\nFile \"../../../packages/connectors/lib/RoninConnector.js\" line 115 col 23 in n.<anonymous>\r\nthrow new Error(\"Ronin Wallet is not installed\");\r\n2\r\nFile \"../../../node_modules/regenerator-runtime/runtime.js\" line 63 col 40 in c\r\nreturn { type: \"normal\", arg: fn.call(obj, arg) };\r\n3\r\nFile \"../../../node_modules/regenerator-runtime/runtime.js\" line 293 col 22 in Generator._invoke\r\nvar record = tryCatch(innerFn, self, context);\r\n4\r\nFile \"../../../node_modules/regenerator-runtime/runtime.js\" line 118 col 21 in Generator.next\r\nreturn this._invoke(method, arg);\r\n5\r\nFile \"../../../node_modules/@babel/runtime/helpers/asyncToGenerator.js\" line 3 col 20 in r\r\nvar info = gen[key](arg);\r\n6\r\nFile \"../../../node_modules/@babel/runtime/helpers/asyncToGenerator.js\" line 25 col 9 in s\r\nasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\r\n7\r\nFile \"../../../node_modules/@babel/runtime/helpers/asyncToGenerator.js\" line 32 col 7 in [anonymous]\r\n_next(undefined);\r\n8\r\nFile \"../../../node_modules/@babel/runtime/helpers/asyncToGenerator.js\" line 21 col 12 in n.<anonymous>\r\nreturn new Promise(function (resolve, reject) {\r\n9\r\nFile \"../../../packages/connectors/lib/RoninConnector.js\" line 170 col 26 in n.<anonymous>\r\nreturn _activate.apply(this, arguments);\r\n```","createdAt":"2022-07-24T12:13:39Z","labels":["bug"],"number":221,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"#362 Error: Ronin Wallet is not installed","type":"issue","updatedAt":"2024-12-21T10:45:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/221"},{"author":"PaulRBerg","body":"Ronin asked to change the copy from \"ENS or Ethereum address\" to \"Ronin Address\"\r\n\r\n<img width=\"389\" alt=\"Screen Shot 2022-07-21 at 9 47 50 PM\" src=\"https://user-images.githubusercontent.com/8782666/180292434-259f4ca7-284e-491f-b878-e6ad638e82cd.png\">","createdAt":"2022-07-21T18:48:04Z","labels":["feature"],"number":220,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Change label for recipient field on Ronin Chain","type":"issue","updatedAt":"2022-07-25T16:00:10Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/220"},{"author":"PaulRBerg","body":"Happening on [app.sablier.finance](https://app.sablier.finance)  when connected to Ronin:\r\n\r\n<img width=\"1728\" alt=\"use-max-withdrawable-error\" src=\"https://user-images.githubusercontent.com/8782666/180233253-a0469dcb-6efa-4e64-b2fc-b2e75a7d6e5f.png\">\r\n","createdAt":"2022-07-21T14:08:22Z","labels":["bug"],"number":219,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"Internal JSON-RPC error\" due to \"useMaxWithdrawable\"","type":"issue","updatedAt":"2022-07-21T15:00:55Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/219"},{"author":"PaulRBerg","body":"We have temporarily moved to doing the txs sequentially rather than atomically due the issue explained in https://github.com/sablierhq/frontend/issues/208.\r\n\r\nHowever, as Richard Moore argued [here](https://github.com/ethers-io/ethers.js/discussions/1767#discussioncomment-3089509), it should be possible for a tx to **not** be simulated in the JSON-RPC node if the gas limit is provided.\r\n\r\nThis is perhaps related to EIP-1559.","createdAt":"2022-07-21T14:02:00Z","labels":["enhancement"],"number":218,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Execute stream creation txs atomically","type":"issue","updatedAt":"2024-12-21T10:45:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/218"},{"author":"maxdesalle","body":"The [$BANK logo](https://github.com/sablierhq/assets/blob/main/tokens/BANK-2.png) doesn't appear on the interface when the network is set to Polygon. There are two $BANK tokens listed on Ethereum, and only one of them is also listed on Polygon. There was initially an issue (when using Ethereum as network) caused by the fact that both tokens have the same ticker, but this was fixed in the [following commit](https://github.com/sablierhq/frontend/commit/386a708f740b08d404ff7bbaffb71b490b7fb866). However, the logo still doesn't appear when using Polygon.\r\n\r\n<img width=\"484\" alt=\"CleanShot 2022-07-17 at 13 07 49@2x\" src=\"https://user-images.githubusercontent.com/70470326/179395411-89369c23-1307-4163-9f8d-f585d95846ed.png\">","createdAt":"2022-07-17T11:13:58Z","labels":["bug"],"number":215,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"$BANK logo doesn't appear on the interface","type":"issue","updatedAt":"2022-07-18T08:38:40Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/215"},{"author":"IaroslavMazur","body":"One of the things that should go there is:\n\n```bash\nshfmt -w scripts/bash/*.sh\n```","createdAt":"2025-08-14T13:33:12Z","labels":["effort: medium","priority: 1","type: ci","work: clear"],"number":246,"repository":"sablier-labs/solsab","state":"open","title":"Implement pre-commit hooks","type":"issue","updatedAt":"2025-08-14T13:40:24Z","url":"https://github.com/sablier-labs/solsab/issues/246"},{"author":"IaroslavMazur","body":"","createdAt":"2025-08-13T21:42:26Z","labels":["effort: medium","priority: 1","type: docs","work: clear"],"number":245,"repository":"sablier-labs/solsab","state":"closed","title":"Auto-generate the Solana reference from the Rust comments","type":"issue","updatedAt":"2025-08-14T12:21:26Z","url":"https://github.com/sablier-labs/solsab/issues/245"},{"author":"IaroslavMazur","body":"As **[agreed on Slack](https://sablier.slack.com/archives/C08MY3M0LGG/p1754692139564559)**, we should store the following campaign data on-chain, as well:\n\n```\naggregate_amount\nrecipient_count\ntoken_decimals\n```","createdAt":"2025-08-12T10:18:30Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":244,"repository":"sablier-labs/solsab","state":"open","title":"Store more campaign data on-chain","type":"issue","updatedAt":"2025-08-12T10:18:30Z","url":"https://github.com/sablier-labs/solsab/issues/244"},{"author":"andreivladbrg","body":"Add tests for [these](https://github.com/sablier-labs/solsab/tree/main/programs/lockup/src/instructions/view).\n\nThe motivation is simple - coverage","createdAt":"2025-08-06T21:00:41Z","labels":["effort: medium","priority: 0","type: test","work: clear"],"number":239,"repository":"sablier-labs/solsab","state":"open","title":"Add view calculation Ix tests","type":"issue","updatedAt":"2025-08-14T19:49:14Z","url":"https://github.com/sablier-labs/solsab/issues/239"},{"author":"andreivladbrg","body":"the motivation here is to provide a getter for the chainlink addresses saved in the state\n\nso that one can verify whether he is passing the correct ones in the withdraw/claim","createdAt":"2025-08-06T13:00:08Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":238,"repository":"sablier-labs/solsab","state":"open","title":"Add a view ix for the treasury addresses saved during initialization","type":"issue","updatedAt":"2025-08-14T19:49:09Z","url":"https://github.com/sablier-labs/solsab/issues/238"},{"author":"andreivladbrg","body":"It would be useful to have a view function that returns whether a stream exists for a given salt and creator  \n\nthe implementation would be similar to `has_claimed` from merkle instant ","createdAt":"2025-08-05T10:42:17Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":237,"repository":"sablier-labs/solsab","state":"open","title":"Add a view Ix for lockup to return whether a salt has been used or not","type":"issue","updatedAt":"2025-08-14T19:49:46Z","url":"https://github.com/sablier-labs/solsab/issues/237"},{"author":"andreivladbrg","body":"as also mentioned in the code:  \nhttps://github.com/sablier-labs/solsab/blob/0ceed58137824b9b80621b311ece961e0ebc6582/tests/common/chainlink-mock.ts#L6-L7\n\nwe need to add mocks for chainlink to cover all possible scenarios for the [convert function](https://github.com/sablier-labs/solsab/blob/0ceed58137824b9b80621b311ece961e0ebc6582/programs/lockup/src/utils/fee_calculation.rs#L12) to have a higher coverage  \n\nthe tests shouldn't be added in the claim / withdraw Ixs tests, but to the view ones: [1](https://github.com/sablier-labs/solsab/blob/0ceed58137824b9b80621b311ece961e0ebc6582/programs/lockup/src/lib.rs#L328) and [2](https://github.com/sablier-labs/solsab/blob/0ceed58137824b9b80621b311ece961e0ebc6582/programs/merkle_instant/src/lib.rs#L189)  ","createdAt":"2025-08-04T11:45:27Z","labels":["effort: high","priority: 2","type: test","work: complex"],"number":234,"repository":"sablier-labs/solsab","state":"open","title":"Add more chainlink tests","type":"issue","updatedAt":"2025-08-04T11:45:27Z","url":"https://github.com/sablier-labs/solsab/issues/234"},{"author":"andreivladbrg","body":"In this [PR](https://github.com/sablier-labs/solsab/pull/91), we added the chainlink accounts to the current `Treasury` state struct\n\nWe have agreed on this change:\n\n<img width=\"800\" height=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0ea6cc86-62e9-4bee-8c06-a6d47c784a14\" />","createdAt":"2025-08-04T11:32:42Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":233,"repository":"sablier-labs/solsab","state":"open","title":"Rename Treasury to Comptroller","type":"issue","updatedAt":"2025-08-04T11:32:42Z","url":"https://github.com/sablier-labs/solsab/issues/233"},{"author":"IaroslavMazur","body":"","createdAt":"2025-08-03T20:08:05Z","labels":["effort: medium","priority: 0","work: clear"],"number":231,"repository":"sablier-labs/solsab","state":"closed","title":"Prepare the audit handbook","type":"issue","updatedAt":"2025-08-03T22:39:43Z","url":"https://github.com/sablier-labs/solsab/issues/231"},{"author":"andreivladbrg","body":"@PaulRBerg IIRC, you said that it doesn't matter whether we use hex or numerical values for the types generated by [this script](https://github.com/sablier-labs/solsab/blob/5c06fb2388dad25e91702fa0444ca4649c19757b/scripts/ts/codegen-errors.ts).\n\nFor debugging purposes, it would be better to use hex because, if a test were to fail, it would log the hex code and not a numerical value — and it would be faster to simply copy it and search for it in that file.\n\nSee this: https://app.warp.dev/block/EGeDnPefGrkiDo2SbXbQ71","createdAt":"2025-08-01T14:09:04Z","labels":["effort: medium","priority: 3","type: test","work: clear"],"number":229,"repository":"sablier-labs/solsab","state":"open","title":"Change the auto generated error codes types to hex","type":"issue","updatedAt":"2025-08-04T09:28:53Z","url":"https://github.com/sablier-labs/solsab/issues/229"},{"author":"PaulRBerg","body":"## Discussed in https://github.com/sablier-labs/solsab/discussions/222\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** July 29, 2025</sup>\n\n## Tasks\n\n- [ ] Namespace Lockup errors as `SablierLockup_ErrorName`\n- [ ] Namespace MerkleInstant errors as `SablierAirdrops_ErrorName`\n\nSee how the errors are defined here:\n\n- https://github.com/sablier-labs/lockup/blob/6341f0f493ac38a3d164e5211b36a8dc3a81f79d/src/libraries/Errors.sol\n- https://github.com/sablier-labs/airdrops/blob/d4eb8def61a316e91fc12d0a7899345705eff2b9/src/libraries/Errors.sol\n\n### Related\n\nSee https://github.com/sablier-labs/solsab/issues/197","createdAt":"2025-07-30T13:41:40Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":224,"repository":"sablier-labs/solsab","state":"open","title":"Namespace error names","type":"issue","updatedAt":"2025-07-30T13:41:58Z","url":"https://github.com/sablier-labs/solsab/issues/224"},{"author":"PaulRBerg","body":"As per the [Anchor docs](https://www.anchor-lang.com/docs/references/account-constraints), it is possible to throw custom errors when a constraint isn't met:\n\n```rs\n#[account(constraint = <expr>)]\n#[account(\n    constraint = <expr> @ <custom_error>\n)]\n```\n\nSo we could do this here:\n\n```rs\n    #[account(\n        constraint = (\n            withdrawal_recipient.key() == stream_recipient.key() ||\n            (withdrawal_recipient.key() != stream_recipient.key() &&\n            signer.key() == stream_recipient.key())\n        ) @ ErrorCode::Unauthorized\n    )]\n```\n\nAnd match the custom errors in EVM Lockup:\n\nhttps://github.com/sablier-labs/lockup/blob/6341f0f493ac38a3d164e5211b36a8dc3a81f79d/src/libraries/Errors.sol#L130-L131","createdAt":"2025-07-29T16:16:47Z","labels":["effort: low","priority: 3","type: feature","work: clear"],"number":221,"repository":"sablier-labs/solsab","state":"open","title":"Throw custom errors when the custom constraints aren't met","type":"issue","updatedAt":"2025-07-29T16:36:49Z","url":"https://github.com/sablier-labs/solsab/issues/221"},{"author":"PaulRBerg","body":"","createdAt":"2025-07-29T16:08:26Z","labels":["effort: epic","priority: 1","type: test","work: complicated"],"number":219,"repository":"sablier-labs/solsab","state":"open","title":"Invariant tests","type":"issue","updatedAt":"2025-07-29T16:08:26Z","url":"https://github.com/sablier-labs/solsab/issues/219"},{"author":"PaulRBerg","body":"","createdAt":"2025-07-29T15:46:33Z","labels":["effort: low","priority: 2","type: test","work: clear"],"number":218,"repository":"sablier-labs/solsab","state":"open","title":"Unit tests for \"status_of\" instruction","type":"issue","updatedAt":"2025-08-14T19:49:31Z","url":"https://github.com/sablier-labs/solsab/issues/218"},{"author":"PaulRBerg","body":"Similar to https://github.com/sablier-labs/lockup/blob/staging/SECURITY.md\n\ne.g. I suppose we do not support fee-on-transfer tokens, do we? @sablier-labs/solana","createdAt":"2025-07-29T13:09:45Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":216,"repository":"sablier-labs/solsab","state":"closed","title":"Protocol Assumptions section in a SECURITY.md document","type":"issue","updatedAt":"2025-07-29T13:42:17Z","url":"https://github.com/sablier-labs/solsab/issues/216"},{"author":"andreivladbrg","body":"as we did for the `lockup` context structs:  \n\nhttps://github.com/sablier-labs/solsab/blob/d456b7c540a56c6d233919f4d1af91bcdd2146c1/programs/lockup/src/instructions/cancel.rs#L15-L69\n\nwe should do the same for `merkle_instant`  ","createdAt":"2025-07-29T12:39:31Z","labels":["effort: low","priority: 1","type: docs","work: clear"],"number":214,"repository":"sablier-labs/solsab","state":"closed","title":"Add account comments for `merkle_instant`","type":"issue","updatedAt":"2025-08-03T13:14:48Z","url":"https://github.com/sablier-labs/solsab/issues/214"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/solsab/blob/2492604d4cbdbf104ccc0a7a969301235f85877c/tests/merkle-instant/unit/createCampaign.test.ts#L16-L19","createdAt":"2025-07-28T15:59:27Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":213,"repository":"sablier-labs/solsab","state":"closed","title":"Explanatory comment for why we expect campaign to be created before program is initialized","type":"issue","updatedAt":"2025-08-13T15:30:53Z","url":"https://github.com/sablier-labs/solsab/issues/213"},{"author":"PaulRBerg","body":"- [x] Reference other code like ``[`MyEvent`]`` instead of `{MyEvent}`.\n- [x] Say 'fail' instead of 'revert' because Solana transactions do not 'revert'.\n- [x] Use Markdown syntax for separating sections","createdAt":"2025-07-28T10:18:54Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":211,"repository":"sablier-labs/solsab","state":"closed","title":"Idiomatic Rust code syntax","type":"issue","updatedAt":"2025-08-04T09:46:04Z","url":"https://github.com/sablier-labs/solsab/issues/211"},{"author":"PaulRBerg","body":"Instead of this:\n\n```rust\n/// See the documentation of the {lib.rs#refundable_amount_of} function.\n```\n\nWe should write it like this:\n\n```rust\n/// See the documentation of the [`crate::sablier_lockup::refundable_amount_of`] function.\n```\n\nWith this syntax, an IDE can properly infer the location of the referenced code. Holding <kbd>CMD</kbd> and clicking on the reference will open the file.","createdAt":"2025-07-28T10:08:31Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":210,"repository":"sablier-labs/solsab","state":"closed","title":"Idiomatic way of cross-referencing code in Rust comments","type":"issue","updatedAt":"2025-08-02T13:03:38Z","url":"https://github.com/sablier-labs/solsab/issues/210"},{"author":"PaulRBerg","body":"BUSL for `programs`, LGPL for everything else.","createdAt":"2025-07-27T15:50:04Z","labels":["effort: low","priority: 1","type: docs","work: clear"],"number":209,"repository":"sablier-labs/solsab","state":"closed","title":"Multiple licenses (BUSL and LGPL)","type":"issue","updatedAt":"2025-07-30T10:53:02Z","url":"https://github.com/sablier-labs/solsab/issues/209"},{"author":"PaulRBerg","body":"## Problems\n\n- **Mixed concerns**: Base files contain both setup logic and global state\n- **Global variables not encapsulated**: Config variables like `eve`, `sender`, etc.,  are exported at module level, and are divorced from their initialization\n- **Verbose imports**: Tests need to import many variables individually from multiple base files\n\n## Solution\n\nEncapsulate the state and the logic by providing a `BaseTest` class, which is inherited and extended by Lockup and Airdrops programs.","createdAt":"2025-07-25T16:21:25Z","labels":["effort: medium","priority: 1","type: refactor","type: test","work: complicated"],"number":208,"repository":"sablier-labs/solsab","state":"closed","title":"Tighter coupling between base test modules and their set-up functions","type":"issue","updatedAt":"2025-07-28T18:20:44Z","url":"https://github.com/sablier-labs/solsab/issues/208"},{"author":"PaulRBerg","body":"## Problem\n\nThe caching mechanism implemented in #184 is incorrect:\n\n```yml\n- name: Cache Rust build artifacts\n        uses: actions/cache@v4\n        id: cache-target\n        with:\n          path: target\n          key: target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}\n          restore-keys: |\n            target-${{ runner.os }}-\n```\n\nIt doesn't take into account file system changes.\n\n## Solution\n\nInvalidate the cache whenever a file under `programs/**/*` is changed, or `Anchor.toml`, or `Cargo.toml`\n\nSee how we do it in the EVM action: https://github.com/sablier-labs/gha-utils/blob/77662e52d08b27f39933d0a1daed4560efad9d61/.github/actions/evm-cache/action.yml","createdAt":"2025-07-25T15:14:06Z","labels":["effort: medium","priority: 2","type: ci","work: clear"],"number":207,"repository":"sablier-labs/solsab","state":"closed","title":"Cache Anchor build artifacts","type":"issue","updatedAt":"2025-07-28T18:20:45Z","url":"https://github.com/sablier-labs/solsab/issues/207"},{"author":"IaroslavMazur","body":"### Discussed in https://github.com/sablier-labs/solsab/discussions/190\n\n<div type='discussions-op-text'>\n\nAppropriate places for this explanation are the **[Timestamps](https://github.com/sablier-labs/solsab/blob/d9443b2d3b1ac966fd2fc7334f8f227da4a246c2/programs/lockup/src/state/lockup.rs#L27)** and the **[Campaign](https://github.com/sablier-labs/solsab/blob/d9443b2d3b1ac966fd2fc7334f8f227da4a246c2/programs/merkle_instant/src/state/campaign.rs#L7)** structs.","createdAt":"2025-07-25T14:29:32Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":206,"repository":"sablier-labs/solsab","state":"closed","title":"Explain the use of `i64` for timestamps in our programs","type":"issue","updatedAt":"2025-08-01T18:57:18Z","url":"https://github.com/sablier-labs/solsab/issues/206"},{"author":"PaulRBerg","body":"## Problem\n\nRunning `anchor build` produces lots of console logs like so:\n\n```\n    Updating crates.io index\n Downloading crates ...\n  Downloaded anchor-attribute-error v0.31.1\n  Downloaded anchor-attribute-access-control v0.31.1\n  Downloaded anchor-attribute-account v0.31.1\n  Downloaded thiserror-impl v2.0.12\n  Downloaded quote v1.0.40\n  Downloaded radium v0.7.0\n  Downloaded zeroize v1.8.1\n  Downloaded anchor-attribute-constant v0.31.1\n  Downloaded aes-gcm-siv v0.11.1\n```\n\nThis makes it more difficult to debug failing CI workflows.\n\n## Solution\n\nTBD\n\n Unfortunately, neither `anchor build` nor the underlying `cargo build-sbf` command have a `--quiet` flag.\n\n## References\n\n- https://solana.stackexchange.com/q/22911/5620\n- https://github.com/solana-foundation/anchor/issues/3788","createdAt":"2025-07-25T13:54:48Z","labels":["priority: 2","type: ci","work: complicated"],"number":205,"repository":"sablier-labs/solsab","state":"closed","title":"Disable compiling logs in CI","type":"issue","updatedAt":"2025-07-28T18:20:45Z","url":"https://github.com/sablier-labs/solsab/issues/205"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/solsab/discussions/201\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** July 24, 2025</sup>\n@sablier-labs/solana\r\n\r\nThey will be auto-generated (I suppose), so give us more homework by appending them as comments, e.g. here?\r\n\r\nhttps://github.com/sablier-labs/solsab/blob/bba5c892c67518c55073f669573bb735fc36059a/programs/lockup/src/utils/errors.rs#L7</div>","createdAt":"2025-07-25T08:41:16Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":204,"repository":"sablier-labs/solsab","state":"closed","title":"Remove error codes hex values in the Rust code comments","type":"issue","updatedAt":"2025-07-28T20:06:04Z","url":"https://github.com/sablier-labs/solsab/issues/204"},{"author":"PaulRBerg","body":"Here:\n\nhttps://github.com/sablier-labs/solsab/blob/afcf5b928ac5311ec9ea81d92ccfbf51f9b79bcf/tests/lockup/unit/createWithDurations.ts#L22-L32\n\nWe should modify the create stream helpers to NOT throw this error:\n\nhttps://github.com/sablier-labs/solsab/blob/afcf5b928ac5311ec9ea81d92ccfbf51f9b79bcf/tests/lockup/base.ts#L456-L458\n\nAnd instead, look for the `ANCHOR_ERROR__ACCOUNT_NOT_INITIALIZED` error.","createdAt":"2025-07-24T16:26:41Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":202,"repository":"sablier-labs/solsab","state":"closed","title":"Do not test our own errors in \"createWithDurations\" and \"createWithTimestamps\"","type":"issue","updatedAt":"2025-07-28T18:20:45Z","url":"https://github.com/sablier-labs/solsab/issues/202"},{"author":"PaulRBerg","body":"Same rationale as in https://github.com/sablier-labs/solsab/issues/197.\n\nEven more important here because the UI relies upon these shapes in the indexers.\n\nThe `shape` parameter should be a `string` analogous to the EVM version:\n\nhttps://github.com/sablier-labs/lockup/blob/4b6b9b726c4c57d3b86d24725922b42870b167d0/src/types/Lockup.sol#L53-L63","createdAt":"2025-07-24T13:40:02Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":199,"repository":"sablier-labs/solsab","state":"open","title":"Introduce \"shape\" parameter in Lockup create functions","type":"issue","updatedAt":"2025-07-24T16:11:37Z","url":"https://github.com/sablier-labs/solsab/issues/199"},{"author":"PaulRBerg","body":"Move the comments in `lib.rs` to the top of each instruction file using the idiomatic `//!` syntax for Rust modules.\n\nDoing so would keep the documentation of the instruction closer to the actual logic, thereby removing the need for comments like this:\n\n```rs\n/// See the documentation of the {lib.rs#withdraw} function.\n```","createdAt":"2025-07-24T12:55:14Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":198,"repository":"sablier-labs/solsab","state":"closed","title":"Module comments (//!) instead of aggregated comments in `lib.rs`","type":"issue","updatedAt":"2025-07-25T08:35:24Z","url":"https://github.com/sablier-labs/solsab/issues/198"},{"author":"PaulRBerg","body":"## Rationale\n\n1. We will likely introduce Tranched and Dynamic at some point.\n2. The API between Solana and EVM should be as similar as possible.\n\n## Tasks\n\n- [x] Rename `create_with_timestamps` instruction to `create_with_timestamps_ll`  (or maybe we should capitalize `LL`)\n- [ ] Rename `create_with_durations` instruction to `create_with_durations_ll`\n- [ ] Rename `cliff_duration` to `duration_cliff`, and `total_duration` to `duration_total`\n- [x] Rename `start_unlock` to `unlock_start_amount`, and `cliff_unlock` to `unlock_cliff_amount`\n    - On a tangential note: adding `_amount` postfix is important. Without it, those parameters can be confused to be timestamps.\n- [ ] Rename `get_streamed_amount` to `calculate_streamed_amount_ll`","createdAt":"2025-07-24T12:53:09Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":197,"repository":"sablier-labs/solsab","state":"open","title":"Bespoke LockupLinear terminology","type":"issue","updatedAt":"2025-08-14T12:31:02Z","url":"https://github.com/sablier-labs/solsab/issues/197"},{"author":"PaulRBerg","body":"This can be easily done using TypeScript generics.\n\n- https://github.com/sablier-labs/solsab/blob/bba5c89/tests/lockup/unit/collectFees.ts\n- https://github.com/sablier-labs/solsab/blob/bba5c89/tests/merkle_instant/unit/collectFees.ts","createdAt":"2025-07-24T12:40:03Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":195,"repository":"sablier-labs/solsab","state":"open","title":"Deduplicate the common \"collectFees\" between the two programs","type":"issue","updatedAt":"2025-07-25T08:24:31Z","url":"https://github.com/sablier-labs/solsab/issues/195"},{"author":"PaulRBerg","body":"Instead of this:\n\n```\ntests/lockup/unit/withdraw.test.ts > withdraw > when the program is initialized > given a valid stream > given a valid deposited token mint > when stream status is not DEPLETED > when non zero withdraw amount > when withdraw amount does not overdraw > when withdrawal address recipient > when signer not recipient > when stream status is not SETTLED > when stream status is CANCELED > should make the withdrawal\n```\n\nDisplay it like this:\n\n```\n> withdraw  \n  > when the program is initialized  \n    > given a valid stream  \n      > given a valid deposited token mint  \n        > when stream status is not DEPLETED  \n          > when non zero withdraw amount  \n            > when withdraw amount does not overdraw  \n              > when withdrawal address recipient  \n                > when signer not recipient  \n                  > when stream status is not SETTLED  \n                    > when stream status is not CANCELED  \n                      > should make the withdrawal\n```\n\nThis can be done with a custom Vitest reporter.","createdAt":"2025-07-24T12:19:51Z","labels":["effort: medium","priority: 1","type: test","work: complicated"],"number":193,"repository":"sablier-labs/solsab","state":"closed","title":"Pretty print the nested BTT describe blocks on new lines","type":"issue","updatedAt":"2025-07-28T18:20:44Z","url":"https://github.com/sablier-labs/solsab/issues/193"},{"author":"IaroslavMazur","body":"Several examples of the code fragments that could be abstracted away:\n\n1. The querying of the current time: `Clock::get()?.unix_timestamp`,\n2. The `safe_collectable_amount()` function,\n3. The Oracle logic","createdAt":"2025-07-24T11:54:58Z","labels":["effort: high","priority: 1","type: refactor","work: complex"],"number":192,"repository":"sablier-labs/solsab","state":"open","title":"Abstract the common LK/MI program code to a stand-alone Rust crate","type":"issue","updatedAt":"2025-07-25T15:14:25Z","url":"https://github.com/sablier-labs/solsab/issues/192"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/interfaces/issues/1556\n\n- Biome for JavaScript, TypeScript, and JSON\n- Prettier for Markdown and YAML\n\nbye bye ESLint and TypeScript ESLint","createdAt":"2025-07-24T10:44:39Z","labels":["effort: medium","priority: 1","type: style","work: clear"],"number":189,"repository":"sablier-labs/solsab","state":"closed","title":"Replace Prettier and ESlint setup with Biome","type":"issue","updatedAt":"2025-08-09T07:02:01Z","url":"https://github.com/sablier-labs/solsab/issues/189"},{"author":"PaulRBerg","body":"This:\n\n```typescript\nassert.isTrue(await accountExists(nftCollectionDataAddress), \"nftCollectionDataAddress is null\");\n```\n\nShould be abstracted away into a helper like so:\n\n```typescript\nawait assertAccountExists(nftCollectionDataAddress);\n```","createdAt":"2025-07-24T10:11:40Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":188,"repository":"sablier-labs/solsab","state":"closed","title":"Assertion helper for account existence","type":"issue","updatedAt":"2025-07-28T18:20:46Z","url":"https://github.com/sablier-labs/solsab/issues/188"},{"author":"PaulRBerg","body":"## Problem\n\nThe programs' error codes are duplicated in the test files:\n\nhttps://github.com/sablier-labs/solsab/blob/4261ae479311321b3fd7ee5b0134ee3232509134/tests/lockup/utils/errors.ts#L6-L38\n\nThis increases the maintenance cost.\n\n## Solution\n\nUse the already-defined error codes from the \"target/types/*.ts\" files, e.g.\n\n```typescript\nexport type ProgramError = {\n  [E in SablierLockup[\"errors\"][number] as E[\"name\"]]: E[\"code\"];\n};\n```\n\n### IDL\n\n```typescript\n// ...\n\"errors\": [\n  {\n    \"code\": 6000,\n    \"name\": \"streamCanceled\",\n    \"msg\": \"Can't renounce an already-renounced Stream!\"\n  },\n  {\n    \"code\": 6001,\n    \"name\": \"streamIsNotCancelable\",\n    \"msg\": \"Can't cancel a non-cancelable Stream!\"\n  },\n  {\n    \"code\": 6002,\n    \"name\": \"streamSettled\",\n    \"msg\": \"Can't cancel a settled Stream!\"\n  },\n  {\n    \"code\": 6003,\n    \"name\": \"cantCollectZeroFees\",\n    \"msg\": \"Can't collect zero fees!\"\n  },\n  // ...\n```","createdAt":"2025-07-23T17:14:32Z","labels":["effort: medium","priority: 2","type: chore","work: clear"],"number":187,"repository":"sablier-labs/solsab","state":"closed","title":"Use already-defined error codes from the \"target/idl\"","type":"issue","updatedAt":"2025-07-28T18:20:46Z","url":"https://github.com/sablier-labs/solsab/issues/187"},{"author":"PaulRBerg","body":"## Problem\n\nThis syntax is ugly, hard to follow, and increases the nesting depth for no good reason:\n\n```typescript\ntry {\n  await createWithTimestamps({\n    timestamps: {\n      ...defaults.timestamps(),\n      start: new BN(-1),\n    },\n  });\n  assert.fail(\"Expected the tx to revert, but it succeeded.\");\n} catch (error) {\n  assertErrorHexCode(error, getErrorCode(\"StartTimeNotPositive\"));\n}\n```\n\n## Solution\n\nUse this more declarative syntax:\n\n```typescript\nawait expect(createWithTimestamps({\n  timestamps: {\n    ...defaults.timestamps(),\n    start: new BN(-1),\n  },\n})).rejects.toThrow(/REGEX_TO_MATCH_HERE/);\n```","createdAt":"2025-07-23T17:06:50Z","labels":["effort: medium","priority: 3","type: test","work: clear"],"number":186,"repository":"sablier-labs/solsab","state":"closed","title":"Use more declarative \"expect(promise).rejects.toThrow\" testing syntax","type":"issue","updatedAt":"2025-07-28T18:20:46Z","url":"https://github.com/sablier-labs/solsab/issues/186"},{"author":"PaulRBerg","body":"@sablier-labs/solana I suppose this is a typo and it should say `... is not positive` OR `... is negative`:\n\nhttps://github.com/sablier-labs/solsab/blob/4261ae479311321b3fd7ee5b0134ee3232509134/tests/lockup/unit/createWithTimestamps.ts#L82","createdAt":"2025-07-23T17:01:42Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":185,"repository":"sablier-labs/solsab","state":"closed","title":"Typo: \"when start time is not negative\"","type":"issue","updatedAt":"2025-07-24T05:47:27Z","url":"https://github.com/sablier-labs/solsab/issues/185"},{"author":"PaulRBerg","body":"This is outdated: https://github.com/actions-rs/toolchain/tree/master\n\nWe should use https://github.com/actions-rust-lang/setup-rust-toolchain","createdAt":"2025-07-23T14:42:10Z","labels":["effort: low","priority: 2","type: ci","work: clear"],"number":183,"repository":"sablier-labs/solsab","state":"closed","title":"Use up-to-date GitHub Action for installing Rust","type":"issue","updatedAt":"2025-07-28T18:20:47Z","url":"https://github.com/sablier-labs/solsab/issues/183"},{"author":"PaulRBerg","body":"We should have an enum for the program names:\n\nhttps://github.com/sablier-labs/solsab/blob/4261ae479311321b3fd7ee5b0134ee3232509134/tests/common-base.ts#L31\n\nSimilar to https://github.com/sablier-labs/solsab/issues/179","createdAt":"2025-07-23T13:50:46Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":182,"repository":"sablier-labs/solsab","state":"closed","title":"Type-safe program names","type":"issue","updatedAt":"2025-07-28T18:20:47Z","url":"https://github.com/sablier-labs/solsab/issues/182"},{"author":"PaulRBerg","body":"For consistency across our EVM and Solana repositories, we should rename the \"Merkle Instant\" program to \"Airdrops\".\n\n\"Merkle Instant\" should simply be the name of the campaign that can be created using the Sablier Airdrops program on Solana.","createdAt":"2025-07-23T13:12:35Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":181,"repository":"sablier-labs/solsab","state":"open","title":"Rename \"Merkle Instant\" program to \"Airdrops\"","type":"issue","updatedAt":"2025-08-04T14:42:23Z","url":"https://github.com/sablier-labs/solsab/issues/181"},{"author":"PaulRBerg","body":"## Problem\n\nGetting these warnings when cloning the repo and running `anchor build`:\n\n```text\nwarning: unexpected `cfg` condition value: `custom-heap`\n  --> programs/merkle_instant/src/lib.rs:11:1\n   |\n11 | #[program]\n   | ^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`\n   = help: consider adding `custom-heap` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: `#[warn(unexpected_cfgs)]` on by default\n   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nwarning: unexpected `cfg` condition value: `custom-panic`\n  --> programs/merkle_instant/src/lib.rs:11:1\n   |\n11 | #[program]\n   | ^^^^^^^^^^\n   |\n   = note: expected values for `feature` are: `cpi`, `default`, `idl-build`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`\n   = help: consider adding `custom-panic` as a feature in `Cargo.toml`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n\nFull logs:\n\nhttps://app.warp.dev/block/4Kikxd6n20y4q4kv1JaVkz\n\n## Solution\n\nidk\n\n## Environment\n\nsolana-cli 2.2.20 (src:dabc99a5; feat:3073396398, client:Agave)\nanchor-cli 0.31.1\nrustc 1.90.0-nightly (9748d87dc 2025-07-21)\n\n## Related\n\n- https://github.com/solana-foundation/anchor/issues/3740\n- https://solana.stackexchange.com/q/17777/5620","createdAt":"2025-07-23T12:33:17Z","labels":["effort: medium","help","priority: 1","type: build","work: complex"],"number":180,"repository":"sablier-labs/solsab","state":"closed","title":"awarning: unexpected `cfg` condition value:","type":"issue","updatedAt":"2025-07-28T18:25:54Z","url":"https://github.com/sablier-labs/solsab/issues/180"},{"author":"PaulRBerg","body":"## Problem\n\n`getErrorCode` and `getErrorName` use strings as inputs:\n\nhttps://github.com/sablier-labs/solsab/blob/3b1b2515c2e69a72b14bf6eeb9d90238a2d46d67/tests/lockup/utils/errors.ts#L44\n\nThis is bad because it doesn't catch incorrect error names at compile-time, only at runtime.\n\n## Solution\n\nUse the `ErrorCode` as an input.\n\nOr, alternatively, turn the `const ErrorCode` into an enum.\n\nOr, use classes for errors.\n\n### SDK Analogous Example\n\nhttps://github.com/sablier-labs/sdk/blob/97594a0666da3ad0ee4511f05b771848aeb7272c/src/types.ts#L224-L234","createdAt":"2025-07-23T11:14:46Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":179,"repository":"sablier-labs/solsab","state":"closed","title":"Type-safe error management in tests","type":"issue","updatedAt":"2025-07-28T18:20:47Z","url":"https://github.com/sablier-labs/solsab/issues/179"},{"author":"PaulRBerg","body":"## Problem\n\nThe tests use two different big number paradigms:\n\n- Built-in JavaScript BigInt (introduced in ES2020)\n- `bn.js`\n\nThis is an anti-pattern in JavaScript code bases. We should only use one big number library.\n\n### Yet Another Related Problem\n\nTangentially, there is another problem. There are two instances where we convert the big numbers to vanilla JavaScript numbers, e.g. here\n\nhttps://github.com/sablier-labs/solsab/blob/4261ae479311321b3fd7ee5b0134ee3232509134/tests/lockup/unit/withdraw.ts#L155\n\nThis is problematic because normal JavaScript numbers can only hold up to $2^{53}-1$, which is less than the maximum amount available in Solana's `u64` type, which is $2^{64}-1$.\n\n## Solution\n\nRefactor all uses of `bn.js` to use the built-in JavaScript BigInt type, or the other way around.\n\n| syntax | bn.js | BigInt |\n| ------- | ----- | ------ |\n| type |`BN` | `bigint` |\n| constructor | `new BN(42)` | `42n` |\n\nIncidentally, implementing this solution will also address this related issue: https://github.com/sablier-labs/solsab/issues/176","createdAt":"2025-07-23T09:55:55Z","labels":["effort: low","priority: 1","type: test","work: clear"],"number":178,"repository":"sablier-labs/solsab","state":"closed","title":"Use a single big number library","type":"issue","updatedAt":"2025-07-28T18:20:47Z","url":"https://github.com/sablier-labs/solsab/issues/178"},{"author":"PaulRBerg","body":"Cloning this repo and running `bun run t` produces this error:\n\n```\n  1) Uncaught error outside test suite:\n     Uncaught file:///Users/prb/Sablier/solana/foo-solsab/tests/lockup/utils/types.ts:1\nimport { BN } from \"@coral-xyz/anchor\";\n         ^^\nSyntaxError: Named export 'BN' not found. The requested module '@coral-xyz/anchor' is a CommonJS module, which may not support all module.exports as named exports.\nCommonJS modules can always be imported via the default export, for example using:\n\nimport pkg from '@coral-xyz/anchor';\nconst { BN } = pkg;\n\n      at ModuleJob._instantiate (node:internal/modules/esm/module_job:182:21)\n      at ModuleJob.run (node:internal/modules/esm/module_job:266:5)\n      at onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)\n```\n\nWarp terminal block:\n\nhttps://app.warp.dev/block/cefWS3WslMcaLDxwQT8top\n\nWhat's the fix, @sablier-labs/solana?","createdAt":"2025-07-22T15:27:31Z","labels":["effort: low","priority: 0","type: bug"],"number":176,"repository":"sablier-labs/solsab","state":"closed","title":"SyntaxError: Named export 'BN' not found","type":"issue","updatedAt":"2025-07-28T18:20:48Z","url":"https://github.com/sablier-labs/solsab/issues/176"},{"author":"PaulRBerg","body":"","createdAt":"2025-07-22T14:42:15Z","labels":["effort: low","priority: 1","type: docs","work: clear"],"number":175,"repository":"sablier-labs/solsab","state":"closed","title":"Use BUSL license","type":"issue","updatedAt":"2025-07-28T18:20:48Z","url":"https://github.com/sablier-labs/solsab/issues/175"},{"author":"IaroslavMazur","body":"","createdAt":"2025-07-21T11:22:36Z","labels":["effort: high","priority: 1","type: feature","work: clear"],"number":171,"repository":"sablier-labs/solsab","state":"open","title":"Implement the ability for the admin to change the withdraw/claim fees","type":"issue","updatedAt":"2025-07-21T11:22:36Z","url":"https://github.com/sablier-labs/solsab/issues/171"},{"author":"IaroslavMazur","body":"","createdAt":"2025-07-20T15:50:11Z","labels":["effort: high","priority: 2","type: feature","work: clear"],"number":170,"repository":"sablier-labs/solsab","state":"open","title":"Implement a recovery mechanism for the SOL & SPL/Token2022 tokens accidentally sent to our programs","type":"issue","updatedAt":"2025-07-20T15:50:11Z","url":"https://github.com/sablier-labs/solsab/issues/170"},{"author":"IaroslavMazur","body":"The current implementation of the Merkle Airdrops on EVM allows the campaign creator to send the funds that are being clawed back **[to a different address](https://github.com/sablier-labs/airdrops/blob/260ddb6a8f318d8ba917e497bba2cea2d36e87bb/src/abstracts/SablierMerkleBase.sol#L155)**.\n\nTo keep the Merkle products similar between EVM & Solana, let's add the same for SolSab, as well.","createdAt":"2025-07-18T10:43:19Z","labels":["effort: low","priority: 0","type: feature","work: clear"],"number":169,"repository":"sablier-labs/solsab","state":"closed","title":"Add a `to` account to the `Clawback` Ix","type":"issue","updatedAt":"2025-07-29T14:14:25Z","url":"https://github.com/sablier-labs/solsab/issues/169"},{"author":"andreivladbrg","body":"In the latest EVM version of the MI, we introduced a start time for the campaign, which is checked at [claim time](https://github.com/sablier-labs/airdrops/blob/124d70689ae9922149ca31d95eef90f387a1f937/src/abstracts/SablierMerkleBase.sol#L274-L280).\n\nI think it would be nice to add this here as well,  the implemenation should be easy. \nwdyt @IaroslavMazur?\n","createdAt":"2025-07-16T23:03:20Z","labels":["effort: medium","priority: 0","type: feature","work: clear"],"number":167,"repository":"sablier-labs/solsab","state":"closed","title":"Add campaign start time","type":"issue","updatedAt":"2025-07-31T15:25:47Z","url":"https://github.com/sablier-labs/solsab/issues/167"},{"author":"andreivladbrg","body":"In this account, `mut` is used:\n\nhttps://github.com/sablier-labs/solsab/blob/879eb7a114f4f853d0acc8e68442858e9b1b1839/programs/lockup/src/instructions/withdraw.rs#L48-L57\n\nbut it's not needed, as this account is read-only and only used to check the constraint `amount == 1`.\n\nThus, we can remove it.\n\n---\n\nWe should check all accounts that use `mut` or `init` to confirm whether they are truly necessary","createdAt":"2025-06-26T12:52:05Z","labels":["effort: low","priority: 0","type: bug","work: clear"],"number":161,"repository":"sablier-labs/solsab","state":"closed","title":"Unneeded usage of `mut` in the `withdraw` Ix","type":"issue","updatedAt":"2025-06-26T20:57:07Z","url":"https://github.com/sablier-labs/solsab/issues/161"},{"author":"andreivladbrg","body":"The same as the parent issue: https://github.com/sablier-labs/solsab/issues/18\n\nCreating a separate issue as we need to wait until the tests PR (which includes other changes as well) is merged.","createdAt":"2025-06-26T11:14:14Z","labels":["priority: 2","type: docs","work: clear"],"number":159,"repository":"sablier-labs/solsab","state":"closed","title":"Add natspec for MerkleInstant","type":"issue","updatedAt":"2025-07-24T16:31:49Z","url":"https://github.com/sablier-labs/solsab/issues/159"},{"author":"andreivladbrg","body":"For example: `testClaim` function with assertions that is used accros all test\n\nhttps://github.com/sablier-labs/solsab/blob/5deaa3b4beb53e99897abb635ecafe267ae140c2/tests/new/merkle_instant/unit/claim.ts#L211-L290","createdAt":"2025-06-24T15:52:11Z","labels":["effort: medium","priority: 2","type: test","work: complex"],"number":156,"repository":"sablier-labs/solsab","state":"open","title":"Dry-fy the tests in `lockup` as did for merkle instant","type":"issue","updatedAt":"2025-06-24T15:52:25Z","url":"https://github.com/sablier-labs/solsab/issues/156"},{"author":"andreivladbrg","body":"currently, the context of the `has_claimed` ix requires an account of type `ClaimReceipt`.\n\n\nthis is problematic because anchor does an additional check to see if the account exists, and when it doesn't, the tx will revert — which it shouldn't, given it's a getter that **must** return a boolean in both cases:  \n- it does not exist: **false**  \n- it exists: **true**\n\nso, we should use an unchecked account:\n\n```rs\npub claim_receipt: UncheckedAccount<'info>,\n```\n\nand do this in `lib.rs`:\n\n\n```rs\npub fn has_claimed(ctx: Context<HasClaimed>, _index: u32) -> Result<bool> {\n    Ok(!ctx.accounts.claim_receipt.data_is_empty())\n}\n\n```\n","createdAt":"2025-06-24T14:34:42Z","labels":["effort: low","priority: 0","type: bug","work: clear"],"number":155,"repository":"sablier-labs/solsab","state":"closed","title":"Fix `has_claimed` Ix","type":"issue","updatedAt":"2025-07-07T22:08:47Z","url":"https://github.com/sablier-labs/solsab/issues/155"},{"author":"IaroslavMazur","body":"### The problem\n\nHere's how we're currently validating the `Clawback` Ix:\n```rust\npub fn check_clawback(expiration_time: i64, first_claim_time: i64) -> Result<()> {\n    // Check: the grace period has passed and the campaign has not expired.\n    if has_grace_period_passed(first_claim_time)? && !has_expired(expiration_time)? {\n        return Err(ErrorCode::ClawbackNotAllowed.into());\n    }\n\n    Ok(())\n}\n\npub fn has_expired(expiration_time: i64) -> Result<bool> {\n    let current_time = Clock::get()?.unix_timestamp;\n\n    Ok(expiration_time > 0 && expiration_time <= current_time)\n}\n\npub fn has_grace_period_passed(first_claim_time: i64) -> Result<bool> {\n    let current_time = Clock::get()?.unix_timestamp;\n    let grace_period = 7 * 24 * 60 * 60; // 7 days in seconds\n\n    Ok(first_claim_time > 0 && current_time > first_claim_time + grace_period)\n}\n```\n\nThe problems with this approach are that:\n1. “grace period” normally means “you can be late [to **_pay_** for smth you **_have to_** buy] without penalty.” We're, however, using it to refer to a period during which the campaign creator has the **_opportunity/option_**  to get the funds **_back to themselves_**;\n2. the validations are hard to follow, being \n    - distributed across multiple functions,\n    - wrapped around the terms that name them (sometimes, incorrectly).\n\n### The proposed solution\n\nReplace the above with inline checks that read top-to-bottom and don't require you to do the mental unwrapping and memorization to understand:\n```rust\npub fn check_clawback(expiration_time: i64, first_claim_time: i64) -> Result<()> {\n    // Allow clawback if no claims have been made yet or the campaign has already expired\n    if first_claim_time == 0 || has_expired(expiration_time)? {\n        return Ok(());\n    }\n\n    // Allow clawback if less than a week has passed since the first claim.\n    let current_time = Clock::get()?.unix_timestamp;\n    let a_week_past_first_claim = first_claim_time + 7 * 24 * 60 * 60;\n    if current_time < a_week_past_first_claim {\n        return Ok(());\n    }\n\n    // Otherwise, disallow clawback.\n    Err(ErrorCode::ClawbackNotAllowed.into())\n}\n\npub fn has_expired(expiration_time: i64) -> Result<bool> {\n    let current_time = Clock::get()?.unix_timestamp;\n\n    Ok(expiration_time > 0 && expiration_time <= current_time)\n}\n```\n\nTagging @sablier-labs/solana for feedback.","createdAt":"2025-06-24T11:03:37Z","labels":[],"number":153,"repository":"sablier-labs/solsab","state":"closed","title":"Simplify and clarify `Clawback` validation: Deprecate “grace period” in favor of an explicit clawback window","type":"issue","updatedAt":"2025-06-24T14:24:31Z","url":"https://github.com/sablier-labs/solsab/issues/153"},{"author":"andreivladbrg","body":"Currently, the `ipfs_cid` is included in the campaign seeds:\n\nhttps://github.com/sablier-labs/solsab/blob/031b5bfe82e69ec6bd9a23ccd736971e3e497c5a/programs/merkle_instant/src/instructions/create_campaign.rs#L29-L44\n\nAs mentioned here: https://github.com/sablier-labs/solsab/issues/150, the cid is actually 46 characters long, while the max size for anchor account seeds is 32 bytes.\n\nI have two solutions in mind for this:  \n- remove the cid and add another parameter in the seeds  \n- hash the cid so it fits within the 32-byte limit","createdAt":"2025-06-20T22:15:42Z","labels":["effort: medium","priority: 0","type: bug","work: complex"],"number":151,"repository":"sablier-labs/solsab","state":"closed","title":"Fix the campaign seeds","type":"issue","updatedAt":"2025-07-08T15:38:18Z","url":"https://github.com/sablier-labs/solsab/issues/151"},{"author":"andreivladbrg","body":"An example of `IPFS_CID` would be: `QmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR`\n\nAnd that's 46 characters, thus, this is not enough:\n\nhttps://github.com/sablier-labs/solsab/blob/52ffafe30812601dbdd53c891f130611be85ccd3/programs/merkle_instant/src/utils/constants.rs#L3","createdAt":"2025-06-20T22:12:01Z","labels":["effort: low","priority: 0","type: bug","work: clear"],"number":150,"repository":"sablier-labs/solsab","state":"closed","title":"Incorrect size for the `IPFS_CID`","type":"issue","updatedAt":"2025-07-08T15:37:31Z","url":"https://github.com/sablier-labs/solsab/issues/150"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/solsab/discussions/125\n\nWe should add an assumption stating that the programs are assumed to be initialized before being used\n\nWe should include more in the list, but no others come to mind at the moment","createdAt":"2025-06-20T15:00:06Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":149,"repository":"sablier-labs/solsab","state":"closed","title":"Protocol Assumptions section in a SECURITY.md document","type":"issue","updatedAt":"2025-08-05T11:32:50Z","url":"https://github.com/sablier-labs/solsab/issues/149"},{"author":"IaroslavMazur","body":"","createdAt":"2025-06-19T21:17:29Z","labels":[],"number":146,"repository":"sablier-labs/solsab","state":"closed","title":"The MerkleInstant part","type":"issue","updatedAt":"2025-07-07T22:59:55Z","url":"https://github.com/sablier-labs/solsab/issues/146"},{"author":"IaroslavMazur","body":"","createdAt":"2025-06-19T21:17:12Z","labels":[],"number":145,"repository":"sablier-labs/solsab","state":"closed","title":"The Lockup part","type":"issue","updatedAt":"2025-06-24T10:47:23Z","url":"https://github.com/sablier-labs/solsab/issues/145"},{"author":"IaroslavMazur","body":"\n### As agreed in https://github.com/sablier-labs/solsab/discussions/138\n\n<div type='discussions-op-text'>\n\n","createdAt":"2025-06-14T16:04:21Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":139,"repository":"sablier-labs/solsab","state":"closed","title":"Add the `Sender` account to the Stream Creation `Context`","type":"issue","updatedAt":"2025-06-19T11:52:19Z","url":"https://github.com/sablier-labs/solsab/issues/139"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/command-center/discussions/175, implement price-gated timelock stream. \n\n1. For PoC design refer to [this thread](https://github.com/sablier-labs/command-center/discussions/175#discussioncomment-13961923).\n2. Add a [new invariant](https://github.com/sablier-labs/command-center/discussions/175#discussioncomment-13986809).\n3. Some good [Qs](https://github.com/sablier-labs/command-center/discussions/175#discussioncomment-14019783) and [As](https://github.com/sablier-labs/command-center/discussions/175#discussioncomment-14021342).\n\nThe proof of concept in the linked discussion is purely for demonstration purpose. Therefore, you are at the liberty of improving the technical implementation, variable and function names, data types as well as the storage layouts.\n\nDo check the contract size after the implementation and ask questions in case you hit a wall.","createdAt":"2025-08-06T15:35:47Z","labels":["type: feature","effort: high","work: complex","priority: 1"],"number":1280,"repository":"sablier-labs/lockup","state":"open","title":"Implement price gated timelock stream","type":"issue","updatedAt":"2025-08-06T15:37:23Z","url":"https://github.com/sablier-labs/lockup/issues/1280"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/lockup/issues/1277#issuecomment-3139440610.","createdAt":"2025-07-31T11:11:26Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":1278,"repository":"sablier-labs/lockup","state":"open","title":"Rename `Helpers` library to `LockupHelpers`","type":"issue","updatedAt":"2025-07-31T11:11:26Z","url":"https://github.com/sablier-labs/lockup/issues/1278"},{"author":"PaulRBerg","body":"Here:\n\nhttps://github.com/sablier-labs/lockup/blob/6341f0f493ac38a3d164e5211b36a8dc3a81f79d/src/libraries/Errors.sol#L19-L30","createdAt":"2025-07-30T13:36:54Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":1277,"repository":"sablier-labs/lockup","state":"open","title":"Rename \"SablierHelpers_\" prefix to \"SablierLockupHelpers\"","type":"issue","updatedAt":"2025-07-31T11:10:04Z","url":"https://github.com/sablier-labs/lockup/issues/1277"},{"author":"PaulRBerg","body":"Emit `CreateBatch` event, and include details such as batch size, lockup address used, the funder, etc.\n\nThere should be a warning in the NatSpec docs about the batch size being possibly inaccurate - due to one or more streams in the batch reverting.\n\nContext: https://github.com/sablier-labs/flow/issues/455","createdAt":"2025-07-19T15:03:24Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1273,"repository":"sablier-labs/lockup","state":"closed","title":"Emit `CreateBatch` event","type":"issue","updatedAt":"2025-08-06T13:54:28Z","url":"https://github.com/sablier-labs/lockup/issues/1273"},{"author":"smol-ninja","body":"Similar to https://github.com/sablier-labs/flow/blob/staging/tests/invariant/README.md","createdAt":"2025-06-24T10:33:20Z","labels":["type: docs","priority: 2","effort: low","work: clear"],"number":1267,"repository":"sablier-labs/lockup","state":"closed","title":"Add an invariant readme","type":"issue","updatedAt":"2025-07-08T11:30:53Z","url":"https://github.com/sablier-labs/lockup/issues/1267"},{"author":"PaulRBerg","body":"- JSON extension for the hard-coded values in `tokenURI.t.sol`\n- SVG extension for `generateSVG.t.sol`","createdAt":"2025-06-22T20:02:32Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1264,"repository":"sablier-labs/lockup","state":"open","title":"Define the hard-coded token URI and SVGs in files and load them using Foundry cheats","type":"issue","updatedAt":"2025-06-23T12:05:27Z","url":"https://github.com/sablier-labs/lockup/issues/1264"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/lockup/discussions/1256\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** May 23, 2025</sup>\nAnalogous to https://github.com/sablier-labs/lockup/issues/1252#issuecomment-2904224027, what if we split the create functions for `SablierLockup` into:\n\n- `abstract contract SablierLockupDynamic`\n- `abstract contract SablierLockupLinear`\n- `abstract contract SablierLockupTranched`","createdAt":"2025-05-26T15:42:03Z","labels":["priority: 0","type: refactor","effort: low","work: clear"],"number":1258,"repository":"sablier-labs/lockup","state":"closed","title":"Split the `SablierLockup` logic into separate abstracts","type":"issue","updatedAt":"2025-06-16T11:16:12Z","url":"https://github.com/sablier-labs/lockup/issues/1258"},{"author":"PaulRBerg","body":"## Problem\n\nThe `prepare` npm lifecycle script is run upon `npm install` (or `bun install` etc.), but ALSO when a user installs the package from GitHub.\n\nThis is bad because:\n\n- npm will install our `dependencies` and even the `devDependencies`\n- we will populate/override the user's git hooks\n\nContext: https://github.com/typicode/husky/issues/1016\n\n## Solution\n\nUnfortunately, npm does not provide a lifecycle script that is run only upon running `npm install` locally.\n\nSo the only fix is this:\n\n- [ ] Remove `prepare`\n- [ ] Replace it with `setup` (or `bootload`, or whatever), and inform our contributors (in the `CONTRIBUTING.md` file) they should run this script upon cloning the repo\n\nMaybe we can use this as a opportunity to perform other setup tasks in that script.","createdAt":"2025-05-23T13:25:03Z","labels":["effort: low","work: clear","type: chore","priority: 3"],"number":1257,"repository":"sablier-labs/lockup","state":"open","title":"Remove Husky from \"prepare\"","type":"issue","updatedAt":"2025-05-23T13:34:03Z","url":"https://github.com/sablier-labs/lockup/issues/1257"},{"author":"PaulRBerg","body":"The `DataTypes` file has become quite verbose now. Let's split it into separate files for each library:\n\n- `types/Lockup.sol`\n- `types/LockupDynamic.sol`\n- `types/LockupLinear.sol`\n- `types/LockupTranched.sol`\n\nFor backward-compatibility, we can still keep `DataTypes.sol` and import the other files in it.","createdAt":"2025-05-20T13:28:28Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":1252,"repository":"sablier-labs/lockup","state":"closed","title":"Split the DataTypes into separate files","type":"issue","updatedAt":"2025-06-16T11:16:04Z","url":"https://github.com/sablier-labs/lockup/issues/1252"},{"author":"smol-ninja","body":"","createdAt":"2025-04-28T09:15:47Z","labels":["priority: 2","effort: low","work: clear","type: chore"],"number":1248,"repository":"sablier-labs/lockup","state":"closed","title":"Bump forge-std to v1.9.7","type":"issue","updatedAt":"2025-05-02T16:05:04Z","url":"https://github.com/sablier-labs/lockup/issues/1248"},{"author":"smol-ninja","body":"As mentioned in https://github.com/sablier-labs/lockup/issues/1221, write an invariant test to show that gas consumption of `create` function always exceed gas consumption of `withdraw` and `cancel`.","createdAt":"2025-04-19T12:57:06Z","labels":["priority: 2","type: test","work: complicated","effort: medium"],"number":1246,"repository":"sablier-labs/lockup","state":"closed","title":"Invariant test for gas usage of `create` vs `withdraw` and `cancel`","type":"issue","updatedAt":"2025-08-13T09:34:29Z","url":"https://github.com/sablier-labs/lockup/issues/1246"},{"author":"smol-ninja","body":"`recipient.code.length == 0` check is redundant because it is followed by `ISablierLockupRecipient(recipient).supportsInterface(interfaceId)`. `code.length` is implicitly checked by checking that `recipient` implements `supportsInterface`. \n\ncc @sablier-labs/evm for objection.","createdAt":"2025-04-14T10:32:39Z","labels":["priority: 2","effort: low","work: clear","type: perf"],"number":1241,"repository":"sablier-labs/lockup","state":"closed","title":"Remove `code.length` check from `allowToHook`","type":"issue","updatedAt":"2025-04-19T12:59:09Z","url":"https://github.com/sablier-labs/lockup/issues/1241"},{"author":"smol-ninja","body":"Similar to https://github.com/sablier-labs/airdrops/issues/141","createdAt":"2025-04-11T19:39:50Z","labels":["type: feature","priority: 1","work: clear","effort: medium"],"number":1240,"repository":"sablier-labs/lockup","state":"closed","title":"Role-Based Access Control","type":"issue","updatedAt":"2025-04-19T12:46:45Z","url":"https://github.com/sablier-labs/lockup/issues/1240"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/430, since foundry can handle autoremappings, delete `remappings.txt` file.","createdAt":"2025-04-09T23:53:08Z","labels":["type: build","priority: 2","effort: low","work: clear"],"number":1237,"repository":"sablier-labs/lockup","state":"closed","title":"Delete remappings.txt","type":"issue","updatedAt":"2025-04-10T21:28:58Z","url":"https://github.com/sablier-labs/lockup/issues/1237"},{"author":"smol-ninja","body":"Discussed in https://github.com/sablier-labs/lockup/discussions/1114#discussioncomment-12714607.\n\n- [x] Remove `BatchLockup` contract and associated strucuts.\n- [x] Refactor all create functions to accept an array of parameters except for `token`.\n- [x] Have single ERC20 transfer\n- [x] Update `aggregateAmount` only once \n- [x] Verify contract size within limit\n\n<details><summary>Click to see demo code</summary>\n\n```solidity\n function createWithDurationsLL(\n        IERC20 token,\n        BatchLockup.CreateWithDurationsLL[] calldata batch\n    )\n        external\n        payable\n        override\n        noDelegateCall\n        returns (uint256[] memory streamIds)\n    {\n        // Check that the batch size is not zero.\n        uint256 batchSize = batch.length;\n        if (batchSize == 0) {\n            revert Errors.SablierBatchLockup_BatchSizeZero();\n        }\n\n        uint128 amountDeposited;\n\n        // Use the block timestamp as the start time.\n        uint40 startTime = uint40(block.timestamp);\n\n        streamIds = new uint256[](batchSize);\n\n        for (uint256 i = 0; i < batchSize; ++i) {\n            // Set the current block timestamp as the stream's start time.\n            Lockup.Timestamps memory timestamps = Lockup.Timestamps({ start: startTime, end: 0 });\n\n            uint40 cliffTime;\n\n            // Calculate the cliff time and the end time.\n            if (batch[i].durations.cliff > 0) {\n                cliffTime = timestamps.start + batch[i].durations.cliff;\n            }\n            timestamps.end = timestamps.start + batch[i].durations.total;\n\n            // Checks, Effects and Interactions: create the stream.\n            streamIds[i] = _createLL(\n                Lockup.CreateWithTimestamps({\n                    sender: batch[i].sender,\n                    recipient: batch[i].recipient,\n                    depositAmount: batch[i].depositAmount,\n                    token: token,\n                    cancelable: batch[i].cancelable,\n                    transferable: batch[i].transferable,\n                    timestamps: timestamps,\n                    shape: batch[i].shape\n                }),\n                batch[i].unlockAmounts,\n                cliffTime\n            );\n\n            amountDeposited += batch[i].depositAmount;\n        }\n\n        // Transfer the total amount to the contract.\n        token.safeTransferFrom({ from: msg.sender, to: address(this), value: amountDeposited });\n\n        aggregateAmount[token] += amountDeposited;\n    }\n```\n</details>","createdAt":"2025-04-04T15:34:21Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":1235,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor `SablieLockup` create functions to allow array of parameters","type":"issue","updatedAt":"2025-05-21T11:40:23Z","url":"https://github.com/sablier-labs/lockup/issues/1235"},{"author":"PaulRBerg","body":"## Problem\n\nAs explained by Max [here](https://github.com/sablier-labs/command-center/discussions/119), there's a need for automating the fee management _after_ the fees are collected.\n\nAs of now, automating this process is difficult because the fees can only be collected to the admin contract, which is a multisig on some chains. On these chains, we will need to manually submit a multisig tx for bridging or selling the fees for USDC.\n\n## Solution\n\nAdd a new `to` parameter in the `collectFees` function, which would behave similarly to the `to` parameter in the stream withdraw functions:\n\n- If the `msg.sender` is the admin, allow `to` to be any address.\n- Otherwise, `to` must be the admin. If `to` is not the admin, the function should revert.","createdAt":"2025-04-01T12:50:28Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1234,"repository":"sablier-labs/lockup","state":"closed","title":"Add a \"to\" parameter in the \"collectFees\" function","type":"issue","updatedAt":"2025-04-11T11:37:43Z","url":"https://github.com/sablier-labs/lockup/issues/1234"},{"author":"smol-ninja","body":"[ISablierLockupBase.sol#L51](https://github.com/sablier-labs/lockup/blob/staging/src/interfaces/ISablierLockupBase.sol#L51): `CollectFees` event should not index `feeAmount`. \n\nChange\n\n```solidity\n event CollectFees(address indexed admin, uint256 indexed feeAmount);\n```\n\nto\n\n```solidity\n event CollectFees(address indexed admin, uint256 feeAmount);\n```","createdAt":"2025-03-31T11:36:47Z","labels":["priority: 2","effort: low","work: clear","type: perf"],"number":1231,"repository":"sablier-labs/lockup","state":"closed","title":"Remove `indexed` from `feeAmount` parameter in `CollectFees` event","type":"issue","updatedAt":"2025-04-11T11:37:45Z","url":"https://github.com/sablier-labs/lockup/issues/1231"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/airdrops/issues/131\n\nDeclare the immutables at the bottom of the `Constants` file, like so:\n\n```solidity\nabstract contract Constants {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n    \n    // Constants here\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     IMMUTABLES\n    //////////////////////////////////////////////////////////////////////////*/\n\n    // Immutables here\n}\n```","createdAt":"2025-03-26T16:45:10Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1227,"repository":"sablier-labs/lockup","state":"closed","title":"Separate constants from immutables","type":"issue","updatedAt":"2025-05-02T16:05:14Z","url":"https://github.com/sablier-labs/lockup/issues/1227"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/lockup/discussions/1213, restructure the contract as the following:\n\n- [x] Rename `SablierLockupBase` into `SablierLockupState`.\n- [x] Move all state variables, associated getters and `notNull` modifier into `SablierLockupState`.\n- [x] Everything else into `SablierLockup`.\n\n#### Note\n\n`SablierLockup` should inherit from `Batch`, `NoDelegateCall`, `Adminable`, `SablierLockupState` and `ERC721`.\n\nIf it looks good after implementation, we can make the same changes in other repos.","createdAt":"2025-03-24T12:41:22Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":1224,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor \"LockupBase\" into \"LockupState\"","type":"issue","updatedAt":"2025-04-30T14:04:48Z","url":"https://github.com/sablier-labs/lockup/issues/1224"},{"author":"PaulRBerg","body":"In line with the plural terminology of `tests`.","createdAt":"2025-03-23T21:58:37Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":1223,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"script\" directory to \"scripts\"","type":"issue","updatedAt":"2025-04-19T14:14:15Z","url":"https://github.com/sablier-labs/lockup/issues/1223"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/airdrops/discussions/110, reclassify the functions as the following:\n\nUSER-FACING / CONTRACT-INTERNAL + READ-ONLY / STATE-CHANGING + FUNCTIONS","createdAt":"2025-03-23T14:53:47Z","labels":["type: docs","effort: low","work: clear","priority: 3"],"number":1222,"repository":"sablier-labs/lockup","state":"closed","title":"Reclassify functions under new categories","type":"issue","updatedAt":"2025-04-30T14:04:57Z","url":"https://github.com/sablier-labs/lockup/issues/1222"},{"author":"PaulRBerg","body":"## Task\n\n- [x] Delete `MAX_COUNT` and the associated checks in the create function\n- [ ] Delete the `EstimateMaxCount` script\n- [x] Delete all other logic related to the `MAX_COUNT`\n- [ ] Write invariant tests to show that the gas consumption for `create` is always greater than `cancel` and/or `withdraw` (for the same `streamId`)\n\n## Rationale + Benefits\n\n- The estimation script takes into account the block gas limit at the time when the contract is deployed .. but the block gas limit changes all the time due to ERC-1559, and some chains like Base change their gas limit for [business reasons](https://github.com/sablier-labs/interfaces/issues/1473#issue-2898127008).\n- It follows that:\n     - There is no guarantee that the `MAX_COUNT` will remain accurate over time.\n     - This is an artificial limitation that harms business for Sablier (by arbitrarily limiting how many segments/tranches there can be a in stream, when in fact there may be more).\n- The UI will switch to an [optimistic approach](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729865961) that simulates the stream creation before submitting the tx. The same approach will enable us to check if the user-provided segment count\n\n> [!NOTE]\n> It's safe to do this because the gas cost of storing segments outweighs the gas cost of traversing them. So, we know the the gas cost of the `create` function is always larger than the gas cost of the `withdraw` or `cancel` functions when the number of segments/tranches is large.\n\n## Side Note\n\n- The estimation script remain still useful in the frontend, so let's move it to the [scripts](github.com/sablier-labs/scripts) repo, or re-implement it in the frontend code.\n\n## Related\n\ncc @sablier-labs/evm and @sablier-labs/frontend\n\nAlso see https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2718466401","createdAt":"2025-03-17T21:56:30Z","labels":["type: refactor","priority: 1","work: clear","effort: medium"],"number":1221,"repository":"sablier-labs/lockup","state":"closed","title":"Get rid of \"MAX_COUNT\"","type":"issue","updatedAt":"2025-04-19T12:59:45Z","url":"https://github.com/sablier-labs/lockup/issues/1221"},{"author":"smol-ninja","body":"<sup>Discussed in https://github.com/sablier-labs/lockup/discussions/1214</sup>\n\nRefactor the following modifiers (which should reduce the contract size of Lockup by at least 1000 bytes):\n\n### 1. `notNull`\n\n```solidity\nmodifier notNull(uint256 streamId) {\n    _notNull(streamId);\n    _;\n}\n\nfunction _notNull(uint256 streamId) private view {\n    if (!_streams[streamId].isStream) {\n        revert Errors.SablierLockupBase_Null(streamId);\n    }\n}\n```\n\nThe effect will be same as inserting `_notNull(streamId)` at the start of every function.\n\n### 2. `onlyAdmin`\n\nSince `onlyAdmin` is inherited from [evm-utils](https://github.com/sablier-labs/evm-utils/) repo, this change should be made there as a part of this issue.\n\n```solidity\nmodifier onlyAdmin() {\n    _onlyAdmin();\n    _;\n}\n\nfunction _onlyAdmin() private view {\n    if (admin != msg.sender) {\n        revert Errors.CallerNotAdmin({ admin: admin, caller: msg.sender });\n    }\n}\n```\n\nPS: [NoDelegateCall.sol](https://github.com/sablier-labs/evm-utils/blob/main/src/NoDelegateCall.sol) already follows this logic.","createdAt":"2025-03-17T21:25:39Z","labels":["priority: 1","effort: low","work: clear","type: perf"],"number":1220,"repository":"sablier-labs/lockup","state":"closed","title":"Move modifiers logic into a private function","type":"issue","updatedAt":"2025-03-20T11:32:02Z","url":"https://github.com/sablier-labs/lockup/issues/1220"},{"author":"PaulRBerg","body":"Implement the `minimumFeeInWei` logic currently implemented in the Airdrops repo.\n\nNote: this can be implemented in Lockup v2.2 (after v2.1, which will be released next).","createdAt":"2025-03-17T20:41:45Z","labels":["type: feature","effort: epic","priority: 1","work: complicated"],"number":1219,"repository":"sablier-labs/lockup","state":"closed","title":"Implement minimum fee in wei","type":"issue","updatedAt":"2025-06-14T14:25:05Z","url":"https://github.com/sablier-labs/lockup/issues/1219"},{"author":"PaulRBerg","body":"`shape` is a user-provided parameter, whereas `maxCount` is an internal value that needs to be passed between the Sablier contract and the Sablier libraries because it's an immutable variable and we cannot hard-code it into the libraries.\n\nhttps://github.com/sablier-labs/lockup/blob/8d9a1798c502db3137b7f6947755d246868bb36e/src/libraries/Helpers.sol#L84-L85","createdAt":"2025-03-17T20:26:50Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":1216,"repository":"sablier-labs/lockup","state":"closed","title":"Reverse order of \"shape\" and \"maxCount\"","type":"issue","updatedAt":"2025-03-26T20:17:20Z","url":"https://github.com/sablier-labs/lockup/issues/1216"},{"author":"PaulRBerg","body":"## Task\n\n- [ ] Move the calculation functions `calculateSegmentTimestamps` and `calculateTrancheTimestamps` to `LockupMath` (ref #1201)\n- [ ] Rename `Helpers` to `CheckCreate`\n\n## Benefits\n\n- `LockupMath` is a more natural place for those functions","createdAt":"2025-03-17T19:42:51Z","labels":["type: refactor","priority: 2","work: clear","effort: medium"],"number":1215,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"Helpers\" to \"CheckCreate\" and move calculation functions to \"LockupMath\"","type":"issue","updatedAt":"2025-03-26T20:09:51Z","url":"https://github.com/sablier-labs/lockup/issues/1215"},{"author":"andreivladbrg","body":"Recently, when we implemented the [Chainlink oracle PR](https://github.com/sablier-labs/airdrops/pull/75) in Airdrops, we decided not to use an interface/contract type in the constructor parameters (see [here](https://github.com/sablier-labs/airdrops/blob/459f8f4b0f61ae9cafa195c81894c1a9e35d4f60/src/SablierMerkleFactoryLT.sol#L25)) in order to avoid the need to import the type in multiple places where it was only necessary to cast and pass it.\n\nWe should do the same here for `initialNFTDescriptor`. (similar in `flow`)\n\ncc @sablier-labs/evm — lmk if you have any objections.\n","createdAt":"2025-03-15T15:48:53Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":1212,"repository":"sablier-labs/lockup","state":"closed","title":"Change the type of the constructor params to `address` instead of interfaces","type":"issue","updatedAt":"2025-04-30T14:04:53Z","url":"https://github.com/sablier-labs/lockup/issues/1212"},{"author":"PaulRBerg","body":"Context here: https://github.com/sablier-labs/company-discussions/discussions/115#discussioncomment-12502839\n\n### Tasks\n- [x] Declare `nativeToken` storage variable.\n- [x] Define `setNativeToken` only admin function\n- [x] Add it to the NatSpec of the `collectFees` function","createdAt":"2025-03-14T18:31:49Z","labels":["type: feature","priority: 1","work: clear","effort: medium"],"number":1211,"repository":"sablier-labs/lockup","state":"closed","title":"Implement `setNativeToken` setter","type":"issue","updatedAt":"2025-03-20T14:55:40Z","url":"https://github.com/sablier-labs/lockup/issues/1211"},{"author":"andreivladbrg","body":"## Non-informational fixes:\n\n- For tokens like `POL` and `CELO`, we won't support them at the UI level.\n\n### Informational fixes:\n\n- Remove the unused `Errors.LockupNFTDescriptor_UnknownNFT`.\n- Add more documentation about \"double-entry\" tokens, and update Assumptions to state that these tokens are not supported.\n\n---\n\n*(For further explanations, go through each finding.)*\n\n**Findings:**\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/7  \n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/8  \n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/11  \n","createdAt":"2025-03-13T15:41:57Z","labels":["priority: 0","type: docs","effort: low","work: clear"],"number":1208,"repository":"sablier-labs/lockup","state":"closed","title":"Q1 2025 audit issues","type":"issue","updatedAt":"2025-03-24T19:56:39Z","url":"https://github.com/sablier-labs/lockup/issues/1208"},{"author":"PaulRBerg","body":"I noticed that we don't have a consistency commenting practice for assertions. Some assertions are annotated like so:\n\n> Assert that FOO has been updated\n\nWhile other completely homologous assertions (i.e., same function, just a different test file) are annotated like so:\n\n> It should update FOO\n\nFor greater consistency, we should use only one approach, and I think the `It should ...` approach is clearer and more declarative.","createdAt":"2025-03-08T18:17:11Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1204,"repository":"sablier-labs/lockup","state":"open","title":"Consistent comments for assertions","type":"issue","updatedAt":"2025-05-12T13:19:21Z","url":"https://github.com/sablier-labs/lockup/issues/1204"},{"author":"PaulRBerg","body":"The new name is better because it more clearly differentiates this variable from the ERC-20 balance, which can be greater than the `aggregateAmount`, hence leading to a surplus that can be recovered by the admin.\n\nThe current name `aggregateBalance` may be misunderstood as meaning the ERC20 `balanceOf` + something else.","createdAt":"2025-03-08T17:57:14Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":1203,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `aggregateBalance` to `aggregateAmount`","type":"issue","updatedAt":"2025-03-27T10:14:51Z","url":"https://github.com/sablier-labs/lockup/issues/1203"},{"author":"PaulRBerg","body":"There appear to be many optimizations introduced in v0.8.27:\n\nhttps://github.com/ethereum/solidity/releases\n\nAnd do the same in Flows and Airdrops (I won't duplicate this issue in those repos).\n\nP.S. once I create that general-purpose todo tracker GitHub repo, maybe we should have an `evm` category for issues that pertain to all EVM Solidity repos? WDYT @sablier-labs/evm?","createdAt":"2025-03-08T17:40:34Z","labels":["type: build","priority: 1","effort: low","work: clear"],"number":1202,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to Solidity v0.8.29","type":"issue","updatedAt":"2025-03-13T15:22:51Z","url":"https://github.com/sablier-labs/lockup/issues/1202"},{"author":"PaulRBerg","body":"While reviewing https://github.com/sablier-labs/lockup/pull/1177/files, it dawned on me that a much better name for the `StreamingMath` would be `LockupMath`. Here's why:\n\n- `LockupMath` makes it clear that this is a helper library meant to be used by the Sablier Lockup protocol only\n- It's NOT streaming logic used in Flow","createdAt":"2025-03-08T17:36:37Z","labels":["type: refactor","priority: 1","effort: low","work: clear"],"number":1201,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `StreamingMath` to `LockupMath`","type":"issue","updatedAt":"2025-03-27T10:14:55Z","url":"https://github.com/sablier-labs/lockup/issues/1201"},{"author":"andreivladbrg","body":"### About\n\nIn the current version of the fork tests, we are using both fuzz and fork approaches. This is beneficial for testing different edge cases with various contract states.\n\n### Problem\n\nDuring development on the `staging` branch, since we are modifying the actual production contract code, it is necessary to deploy the contracts before running the fork tests. However, this contradicts the intended purpose mentioned above and results in wasting the API calls.\n\n### Fix\n\n~~The fix is simply to comment out [the fork line](https://github.com/sablier-labs/lockup/blob/eb85c9bdf541b1af88a2f43ce05499bce424fb8d/tests/fork/Fork.t.sol#L33) and the `assumeNoBlacklisted` calls, similar to how addresses are loaded. Once the changes are merged into `main` and the new contracts are deployed, we can load the addresses and uncomment the fork line.~~\n\n**Later edit:** The fix is not that simple, as we also have the [tokens](https://github.com/sablier-labs/lockup/tree/main/tests/fork/tokens), which are loaded from Mainnet. To resolve this, we need to find a solution that:  (i) does not introduce significant differences between `main` and `staging` (ii) ensures the tests continue running to prevent incorrect changes in fork tests.\n\n@PaulRBerg Shub and I discussed this on Slack, and we agree. What is your opinion on this?","createdAt":"2025-03-04T11:06:03Z","labels":["priority: 1","type: test","effort: low","work: clear"],"number":1197,"repository":"sablier-labs/lockup","state":"closed","title":"Run fork tests only against the actual deployed addresses","type":"issue","updatedAt":"2025-03-11T14:02:05Z","url":"https://github.com/sablier-labs/lockup/issues/1197"},{"author":"mingbaile","body":"Hi, we are a research group on programming languages and software engineering. We recently conducted a systematic study on the causes, effects, and fixes of the inconsistent state update vulnerability in solidity. We are attempting to build a tool to detect bugs about state updates based on our findings. We have tried our prototype tool on some popular Github solidity repositories, and for your repository, we found that there are missing state updates or gas consumption that can be optimized.\n\nThe point is that when we declare a state variable in the contract, if the variable is not reassigned throughout the project, it may be a missed state update, including balance, order number, counter, contract status flag, etc. Of course, it may also be a state variable with special purposes that does not need to be changed, such as maximum supply, contract administrator address, configuration information, etc. When declaring these state variables that do not need to be changed, the _constant_ or _immutable_ modifier should be used as required, which will save gas.\n\nFor your repository, we found the following state variables that may need attention. If you are not forgetting to update them, perhaps you should declare them with the _constant_ or _immutable_ modifier:\n\n[Benchmark.t.sol](https://github.com/sablier-labs/lockup/blob/main/benchmark/Benchmark.t.sol)\n**State variable:** benchmarkResults\n```solidity\nstring internal benchmarkResults = \"benchmark/results/\";\n```\n\n[batch.t.sol](https://github.com/sablier-labs/lockup/blob/main/tests/unit/concrete/batch/batch.t.sol)\n**State variable:** newNumber\n```solidity\nuint256 internal newNumber = 100;\n```\n\nDo you find our results useful? Your reply and invaluable suggestions would be greatly appreciated, and are vital for improving our tool. Thanks a lot for your time!\n(The reason why _constant_ and _immutable_ modifiers can save gas is that they do not consume storage space within the EVM. Their values are compiled directly into smart contract bytecode, which reduces the gas cost of storage. This storage method also avoids the SLOAD operation that reads EVM storage (costs about 100 gas in EVM). The main difference between _constant_ and _immutable_ variables is that the value of _immutable_ variables can be set in the constructor, and _immutable_ variables may cost more gas than _constant_ variables. In addition, there is a slight difference in the variable types they support. The official documentation describes more details: https://docs.soliditylang.org/en/latest/contracts.html)","createdAt":"2025-02-28T15:41:10Z","labels":[],"number":1191,"repository":"sablier-labs/lockup","state":"closed","title":"Missing state updates or optimizable state variables","type":"issue","updatedAt":"2025-03-04T17:26:03Z","url":"https://github.com/sablier-labs/lockup/issues/1191"},{"author":"Patrick-Ehimen","body":"The Discord community Link in the `Contributing.md` [file](https://github.com/sablier-labs/lockup/blob/main/CONTRIBUTING.md) is expired/broken\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/97e9ccad-67c4-4ce6-9640-a56e53bc44e0\" />","createdAt":"2025-02-22T11:58:15Z","labels":[],"number":1187,"repository":"sablier-labs/lockup","state":"closed","title":"Broken Link","type":"issue","updatedAt":"2025-02-22T18:49:43Z","url":"https://github.com/sablier-labs/lockup/issues/1187"},{"author":"PaulRBerg","body":"## Problem\n\nWhen the `sender` is the same as the `recipient`, the `to` address passed to the withdrawal function must be the `recipient`. This is due to this check:\n\nhttps://github.com/sablier-labs/lockup/blob/95717b7b970a8000446febe0053fbb3afab2c418/src/abstracts/SablierLockupBase.sol#L416-L418\n\n## Solution\n\nModify the check so that if `sender == recipient`, the `to` address can be any value.\n\n## Priority 3\n\nIf we can manage to get this included in the March 1 audit, that's fine, but if not, that's fine, too.\n\nThe other features already scheduled for March 1 are more important.","createdAt":"2025-02-17T11:08:04Z","labels":["type: feature","work: clear","priority: 3","effort: medium"],"number":1180,"repository":"sablier-labs/lockup","state":"closed","title":"Allow \"to\" to be any address when the \"sender\" is the same as the \"recipient\"","type":"issue","updatedAt":"2025-02-17T13:23:27Z","url":"https://github.com/sablier-labs/lockup/issues/1180"},{"author":"PaulRBerg","body":"See https://x.com/limes_eth/status/1889040644355625460","createdAt":"2025-02-13T19:09:32Z","labels":["type: docs","effort: low","work: clear","priority: 3"],"number":1178,"repository":"sablier-labs/lockup","state":"open","title":"ENS subdomain for Lockup deployments","type":"issue","updatedAt":"2025-02-13T19:09:32Z","url":"https://github.com/sablier-labs/lockup/issues/1178"},{"author":"smol-ninja","body":"Since deep tests are run on every Sunday, we can run fork tests only on Monday and Wednesday (total 3 times a week).","createdAt":"2025-02-07T12:56:40Z","labels":["priority: 2","effort: low","work: clear","type: ci"],"number":1172,"repository":"sablier-labs/lockup","state":"closed","title":"Update workflow schedule for fork tests","type":"issue","updatedAt":"2025-02-10T17:40:00Z","url":"https://github.com/sablier-labs/lockup/issues/1172"},{"author":"smol-ninja","body":"Now that we have a separate [benchmarks repo](https://github.com/sablier-labs/benchmarks/tree/main/results) that generate and store the gas table from the mainnet deployments. We can remove unneeded [benchmark](https://github.com/sablier-labs/lockup/tree/main/benchmark) code from this repo.","createdAt":"2025-02-05T13:31:43Z","labels":["work: clear","type: chore","priority: 3","effort: medium"],"number":1170,"repository":"sablier-labs/lockup","state":"closed","title":"Remove `benchmarks` code","type":"issue","updatedAt":"2025-02-14T14:51:32Z","url":"https://github.com/sablier-labs/lockup/issues/1170"},{"author":"smol-ninja","body":"Both `BatchLockupBuilder` and `Modifiers` are not using relative path to import source contracts. As a a result, their imports cannot be resolved when importing Lockup using the npm package.\n\nhttps://github.com/sablier-labs/lockup/blob/main/tests/utils/BatchLockupBuilder.sol#L4\n\nhttps://github.com/sablier-labs/lockup/blob/main/tests/utils/Modifiers.sol#L4","createdAt":"2025-02-04T18:03:32Z","labels":["type: build","priority: 1","effort: low","work: clear"],"number":1168,"repository":"sablier-labs/lockup","state":"closed","title":"Imports source contracts using relative path in `Modifiers` and `BatchLockupBuilder`","type":"issue","updatedAt":"2025-02-06T17:37:42Z","url":"https://github.com/sablier-labs/lockup/issues/1168"},{"author":"smol-ninja","body":"The comment should say `Check: the Merkle proof is valid against the leaf and merkle root`.\n\nhttps://github.com/sablier-labs/airdrops/blob/2c2b9720c8191e6fec447efea10e255fc83e5c14/src/abstracts/SablierMerkleBase.sol#L305-L308","createdAt":"2025-08-06T16:47:05Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":181,"repository":"sablier-labs/airdrops","state":"open","title":"Fix comment over verification of Merkle proof","type":"issue","updatedAt":"2025-08-06T16:47:05Z","url":"https://github.com/sablier-labs/airdrops/issues/181"},{"author":"PaulRBerg","body":"## Problem\n\nUsers want to claim-and-stake in one tx. A recent example is Velvet, who has explicitly said they want `claim+stake`:\n\n> Gm, how can we do claim+stake as a default option?\n> User will claim but end up selling it.. We want to get staked in same process\n\n## Solution\n\n~Add a `stakingContract` parameter in the claim functions and, if it's non-zero, proceed to stake the Sablier NFT or the ERC-20 tokens.~\n\n~Alternatively, implement and a hook-like system where more things other than staking can be hooked to.~\n\nSee https://github.com/sablier-labs/airdrops/issues/171#issuecomment-3049481883 for proposed solution.\n\n### Integration\n\nThis feature requires integration with @smol-ninja's new staking contract.","createdAt":"2025-07-03T06:36:25Z","labels":["effort: epic","priority: 1","type: feature","work: clear"],"number":171,"repository":"sablier-labs/airdrops","state":"open","title":"Implement \"claimAndExecute\"","type":"issue","updatedAt":"2025-07-16T09:42:01Z","url":"https://github.com/sablier-labs/airdrops/issues/171"},{"author":"PaulRBerg","body":"Rationale: the current name is too general because all fields in the event declaration are `params`.\n\ne.g. here:\n\nhttps://github.com/sablier-labs/airdrops/blob/5088c4ce2f22a4ca63d92987efbfe37b2286ac48/src/interfaces/ISablierFactoryMerkleLL.sol#L19\n\nhttps://github.com/sablier-labs/airdrops/blob/5088c4ce2f22a4ca63d92987efbfe37b2286ac48/src/interfaces/ISablierFactoryMerkleLL.sol#L44","createdAt":"2025-06-18T11:45:42Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":168,"repository":"sablier-labs/airdrops","state":"open","title":"Rename `params` to `campaignParams` in create functions and events","type":"issue","updatedAt":"2025-06-18T18:18:47Z","url":"https://github.com/sablier-labs/airdrops/issues/168"},{"author":"smol-ninja","body":"Replace the current approach of testing `claimViaSig` with Foundry's EIP721 cheatcodes after they are released.\n\n### Refer to:\n1. https://github.com/foundry-rs/foundry/pull/10510\n2. https://github.com/sablier-labs/airdrops/pull/160\n3. https://github.com/foundry-rs/foundry/releases/tag/v1.3.0-rc1","createdAt":"2025-06-13T13:01:22Z","labels":["effort: medium","priority: 3","type: test","work: complicated"],"number":167,"repository":"sablier-labs/airdrops","state":"open","title":"Use Foundry's EIP721 cheatcodes","type":"issue","updatedAt":"2025-07-21T09:16:47Z","url":"https://github.com/sablier-labs/airdrops/issues/167"},{"author":"PaulRBerg","body":"Context here: https://github.com/sablier-labs/indexers/issues/130#issuecomment-2949190592\n\nThe task is to implement a simple `IS_SABLIER_MERKLE` constant set to `true` in the [`SablierMerkleBase`](https://github.com/sablier-labs/airdrops/blob/8cbf863b74339e0386231cd16c815d21f62efc0f/src/abstracts/SablierMerkleBase.sol) contract.\n\n@sablier-labs/evm Can we implement this ASAP this week? It should be easy-peasy.","createdAt":"2025-06-11T12:08:54Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":164,"repository":"sablier-labs/airdrops","state":"closed","title":"Add \"IS_SABLIER_MERKLE\" boolean constant in","type":"issue","updatedAt":"2025-06-12T11:54:49Z","url":"https://github.com/sablier-labs/airdrops/issues/164"},{"author":"PaulRBerg","body":"## Problem\n\nWhile working on the [Indexers](https://github.com/sablier-labs/indexers), @gavriliumircea and I bumped into some issues with the AVCA contract because it has multiple events with the same name: `Claim`.\n\n## Solution\n\nGIve bespoke names to the `Claim` events, differentiating them. Do this not just in the AVCA contract, but in all contracts. E.g. in `MerkleInstant`, name it `ClaimInstant`, and in `MerkleLL`, name it `ClaimLL`.","createdAt":"2025-06-06T18:46:32Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":161,"repository":"sablier-labs/airdrops","state":"closed","title":"Differentiate \"Claim\" events by giving them bespoke names","type":"issue","updatedAt":"2025-06-14T14:24:38Z","url":"https://github.com/sablier-labs/airdrops/issues/161"},{"author":"PaulRBerg","body":"Same as https://github.com/sablier-labs/lockup/issues/1257","createdAt":"2025-05-23T13:26:22Z","labels":["effort: low","priority: 3","type: chore","work: clear"],"number":159,"repository":"sablier-labs/airdrops","state":"open","title":"Remove Husky from \"prepare\"","type":"issue","updatedAt":"2025-05-23T13:26:22Z","url":"https://github.com/sablier-labs/airdrops/issues/159"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/lockup/issues/125","createdAt":"2025-05-23T12:13:28Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":158,"repository":"sablier-labs/airdrops","state":"open","title":"Split DataTypes in different files","type":"issue","updatedAt":"2025-05-23T12:13:28Z","url":"https://github.com/sablier-labs/airdrops/issues/158"},{"author":"maxdesalle","body":"Enable the ability to set the start of an airdrop in the future, as opposed to as soon as it's funded.\n\nTiming the airdrop by funding it only when you want it to launch technically works, but it's an inferior experience, and requires people to stay up when the airdrop is supposed to launch at midnight, for example. It's just more practical to be able to set it up via our interface to start at a certain date, assuming it's funded.","createdAt":"2025-05-19T19:48:20Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":155,"repository":"sablier-labs/airdrops","state":"closed","title":"Enable the ability to plan an airdrop in the future","type":"issue","updatedAt":"2025-05-30T18:20:46Z","url":"https://github.com/sablier-labs/airdrops/issues/155"},{"author":"andreivladbrg","body":"## Problem\n\nIn the current version of the Merkle airdrops, the fees generated during `claim` are stored in each deployed campaign.  \nThe issue with this is that if we end up with a high number of campaigns, it will require collecting the fees from each one of them, which is a PITA.\n\n## Solution\n\nIn the `claim` function, transfer the `msg.value` to the factory contract so that all fees are stored there. This way, we will have only one fee collection action per factory contract.\n\nThe only downside is slightly higher gas costs during `claim` (pct-wise still small, given that users are paying the fee).\n\n## Implementation\n\nAdd this in the `_preProcessClaim` function.\n\n```solidity\nif (msg.value > 0) {\n    (bool success,) = address(FACTORY).call{ value: msg.value }(\"\");\n}\n```\n\n@maxdesalle tagging you since this is relevant to you; we plan to implement it before the next release.\n\n@sablier-labs/frontend tagging you in case this would be problematic for you and to request feedback.","createdAt":"2025-05-06T09:38:49Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":154,"repository":"sablier-labs/airdrops","state":"closed","title":"Transfer the fee to the factory in the `claim` function","type":"issue","updatedAt":"2025-06-02T10:03:59Z","url":"https://github.com/sablier-labs/airdrops/issues/154"},{"author":"smol-ninja","body":"","createdAt":"2025-04-28T09:16:26Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":151,"repository":"sablier-labs/airdrops","state":"closed","title":"Bump forge-std to v1.9.7","type":"issue","updatedAt":"2025-05-05T10:09:32Z","url":"https://github.com/sablier-labs/airdrops/issues/151"},{"author":"PaulRBerg","body":"## Problem\n\nAn empty `ipfsCID` results in incompatibilities with the Sablier UI.\n\nHere's a [recent campaign](https://app.sablier.com/airdrops/campaign/0x7cac25b2ecc7f6e752aecea6222ed2c1ec8eef49-8453/) that doesn't have an `ipfsCID`.\n\nIt led to this error in the UI:\n\nhttps://github.com/sablier-labs/interfaces/issues/1582\n\n## Solution\n\nAdd an explanatory `@dev` note here and in other places where `ipfsCID` appears:\n\nhttps://github.com/sablier-labs/airdrops/blob/708b5e7f1933afed5b26f078c96396182ece017f/src/interfaces/ISablierMerkleBase.sol#L54-L55","createdAt":"2025-04-10T15:22:38Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":146,"repository":"sablier-labs/airdrops","state":"closed","title":"Add a warning that an empty `ipfsCID` will result in Sablier UI incompatibilities","type":"issue","updatedAt":"2025-05-13T13:27:45Z","url":"https://github.com/sablier-labs/airdrops/issues/146"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/430, since foundry can handle autoremappings, delete `remappings.txt` file.","createdAt":"2025-04-09T23:53:24Z","labels":["effort: low","priority: 2","type: build","work: clear"],"number":145,"repository":"sablier-labs/airdrops","state":"closed","title":"Delete remappings.txt","type":"issue","updatedAt":"2025-04-11T12:13:41Z","url":"https://github.com/sablier-labs/airdrops/issues/145"},{"author":"smol-ninja","body":"Implement redistribution logic in MerkleVCA contract. For specs, please refer to [this discussion](https://github.com/sablier-labs/airdrops/discussions/117).\n\nFeel free to take decision on function names as well as other necessary logic required for implementation.","createdAt":"2025-04-08T21:53:45Z","labels":["effort: high","priority: 1","type: feature","work: complicated"],"number":144,"repository":"sablier-labs/airdrops","state":"open","title":"Implement redistribution in MerkleVCA contract","type":"issue","updatedAt":"2025-06-03T06:27:58Z","url":"https://github.com/sablier-labs/airdrops/issues/144"},{"author":"PaulRBerg","body":"## Problem\n\nSelf-checkout + fee management and consolidation\n\nExplained [here](https://github.com/sablier-labs/command-center/discussions/135).\n\n## Solution\n\nUse OpenZeppelin's [Role-Based Access Control](https://docs.openzeppelin.com/contracts/5.x/access-control) mechanism and split the single admin into\n\n1. A so-called 'default admin' that takes the role of the single admin.\n2. Granular roles that can perform highly specific tasks only (e.g., for collecting fees to third-party addresses).\n\n> [!NOTE]\n> The roles implemented via RBAC will be _additive_, i.e., the default admin will still be able to perform every action that the roles can.\n\n<details><summary>Toggle to see Solidity sample implementation</summary>\n<p>\n\n```solidity\npragma solidity >=0.8.29;\n\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract ContractWithRules is AccessControl {\n    bytes32 public constant FEE_COLLECTOR_ROLE = keccak256(\"FEE_COLLECTOR_ROLE\");\n    bytes32 public constant FEE_MANAGEMENT_ROLE = keccak256(\"FEE_MANAGEMENT_ROLE\");\n    \n    constructor(address initialAdmin) {\n        // Will be able to grant and revoke any roles\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\n    }\n\n    function collectFees(ISablierMerkleBase campaign) external onlyRole(FEE_COLLECTOR_ROLE) {\n        // ...\n    }\n    \n     function setCustomFeeUSD(address campaignCreator, uint256 customFeeUSD) external onlyRole(FEE_MANAGEMENT_ROLE) {\n        // ....\n      }\n\n    function lowerMinFeeUSD(uint256 newMinFeeUSD) external {\n        if (!factoryAdmin.hasRole(FEE_MANAGEMENT_ROLE, msg.sender)) {\n            revert CallerUnauthorized(msg.sender);\n        }\n        // ...\n    }\n}\n```\n\n</p>\n</details> \n\n\n## Structure\n\nI will let you @sablier-labs/evm decide if you like to implement some logic partially in EVM utils, and some partially in Airdrops (e.g. maybe the roles should be defined here).","createdAt":"2025-04-04T15:04:35Z","labels":["effort: epic","priority: 0","type: feature","work: complicated"],"number":141,"repository":"sablier-labs/airdrops","state":"closed","title":"Role-Based Access Control","type":"issue","updatedAt":"2025-04-21T20:13:04Z","url":"https://github.com/sablier-labs/airdrops/issues/141"},{"author":"PaulRBerg","body":"## Problem\n\nAs explained by Max [here](https://github.com/sablier-labs/command-center/discussions/119), there's a need for automating the fee management _after_ the fees are collected.\n\nAs of now, automating this process is difficult because the fees can only be collected to the admin contract, which is a multisig on some chains. On these chains, we will need to manually submit a multisig tx for bridging or selling the fees for USDC.\n\n## Solution\n\nAdd a new `to` parameter in the `collectFees` function, which would behave similarly to the `to` parameter in the stream withdraw functions:\n\n- If the `msg.sender` is the admin, allow `to` to be any address.\n- Otherwise, `to` must be the admin. If `to` is not the admin, the function should revert.","createdAt":"2025-04-01T12:49:40Z","labels":["effort: low","priority: 0","type: feature","work: clear"],"number":139,"repository":"sablier-labs/airdrops","state":"closed","title":"Add a \"to\" parameter in the \"collectFees\" function","type":"issue","updatedAt":"2025-04-08T21:46:46Z","url":"https://github.com/sablier-labs/airdrops/issues/139"},{"author":"PaulRBerg","body":"So that there's no more `get` read-only function in this repo","createdAt":"2025-03-27T20:57:42Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":136,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"getTranchesWithPercentages\" to \"tranchesWithPercentages\"","type":"issue","updatedAt":"2025-04-30T13:29:03Z","url":"https://github.com/sablier-labs/airdrops/issues/136"},{"author":"PaulRBerg","body":"So that it cannot be confused for any vesting unlock percentage","createdAt":"2025-03-27T20:57:01Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":135,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"TOTAL_PERCENTAGE\" to \"TRANCHES_TOTAL_PERCENTAGE\"","type":"issue","updatedAt":"2025-04-30T13:29:12Z","url":"https://github.com/sablier-labs/airdrops/issues/135"},{"author":"smol-ninja","body":"### Context\n\nThe claim function is implemented within the Merkle contracts. However, the public function and interface are defined in the [`SablierMerkleBase`](https://github.com/sablier-labs/airdrops/blob/staging/src/abstracts/SablierMerkleBase.sol#L107) which led to writing natspecs that apply universally to all Merkle campaigns.\n\n### Problem\n\nWhile the claim function is implemented differently in each Merkle contract, they all share the same interface and [common natspecs](https://github.com/sablier-labs/airdrops/blob/staging/src/interfaces/ISablierMerkleBase.sol#L81-L100). Ideally, the natspecs should be specific to the individual Merkle contracts rather than shared across all implementations.\n\n### Solution\n\n- [x] Rename `claim` to `_preProcessClaim ` and change its visibility to `internal` in `SablierMerkleBase`\n- [x] Remove `claim` function from `ISablierMerkleBase` interface\n- [x] Add bespoke `claim` function in each Merkle contract\n- [x] Rename `_claim` to `claim` and change its visibility to `external` in each Merkle contract\n- [x] Call `_preProcessClaim ` inside `claim`\n\n@sablier-labs/evm I created the issue without initiating a discussion because I think its very obvious. However, please feel free to object if you disagree.","createdAt":"2025-03-27T16:07:01Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":134,"repository":"sablier-labs/airdrops","state":"closed","title":"Refactor `claim` by moving its interface into each Merkle contract","type":"issue","updatedAt":"2025-04-30T13:29:20Z","url":"https://github.com/sablier-labs/airdrops/issues/134"},{"author":"PaulRBerg","body":"This is an alternative for https://github.com/sablier-labs/airdrops/issues/130. We either implement that issue or we implement this one.","createdAt":"2025-03-26T17:03:36Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":132,"repository":"sablier-labs/airdrops","state":"closed","title":"Refactor \"STREAM_START_TIME\" to \"START_TIME\" in MerkleLT","type":"issue","updatedAt":"2025-03-26T17:11:22Z","url":"https://github.com/sablier-labs/airdrops/issues/132"},{"author":"PaulRBerg","body":"## Problem\n\nContext: I've spent 30 minutes debugging [this commit](https://github.com/sablier-labs/airdrops/pull/125/commits/d350ed0d02102cb2c4b3774031dd44bb79cfabcf) because I've encountered [this issue](https://x.com/PaulRBerg/status/1904936390019727615) related to the order in which immutable variables are declared.\n\nSpecifically,`VESTING_END_TIME` was using `VESTING_START_TIME`, which were declared both as `immutable` (not `constant`), and `VESTING_START_TIME` was evaluated to `0`.\n\n## Solution\n\nDeclare the immutables at the bottom of the `Constants` file, like so:\n\n```solidity\nabstract contract Constants {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n    \n    // Constants here\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                     IMMUTABLES\n    //////////////////////////////////////////////////////////////////////////*/\n\n    // Immutables here\n}\n```","createdAt":"2025-03-26T16:44:35Z","labels":["effort: low","priority: 3","type: test","work: clear"],"number":131,"repository":"sablier-labs/airdrops","state":"closed","title":"Separate constants from immutables","type":"issue","updatedAt":"2025-06-20T15:10:28Z","url":"https://github.com/sablier-labs/airdrops/issues/131"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/airdrops/pull/125\n\n- [x] Rename `END_TIME` to `VESTING_END_TIME`\n- [x] Rename `STREAM_START_TIME`  to `VESTING_START_TIME`\n    - Rename `params.streamStartTime` to `params.startTime` (for consistency)\n- [x] Rename `START_TIME` to `VESTING_START_TIME`","createdAt":"2025-03-26T16:22:43Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":130,"repository":"sablier-labs/airdrops","state":"closed","title":"Add \"VESTING_\" prefix in \"MerkleLT\" and \"MerkleVCA\"","type":"issue","updatedAt":"2025-03-27T15:23:43Z","url":"https://github.com/sablier-labs/airdrops/issues/130"},{"author":"andreivladbrg","body":"Shub and I were discussing this check on Slack:\n\nhttps://github.com/sablier-labs/airdrops/blob/05c302fd3a5feb6a9c8388b0bb1c57cfe4d27b51/src/SablierMerkleVCA.sol#L171-L173\n\n### Problem\n\nThe problem with this is that there could be cases when the start time is less than the block time, but the claim amount is still 0.  \nFor example, Joe is eligible for `0.0001e6 WBTC`. That’s `0.000003170979198 WBTC` unlocking every second if vesting is 1 year. So if Joe claims in the first 87 hours (315360 seconds), he would receive 0 and the forgone amount would be 100%.\n\nThis issue exists for `unlockPct` as well — for the above example, it would need to be greater than 1%. For instance, 0.5% of `0.0001e6 WBTC` would still be calculated as 0.\n\n### Fix\n\nThe fix is simply to check whether the `claimAmount` is zero instead of relying on the time variable.","createdAt":"2025-03-25T12:32:22Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":126,"repository":"sablier-labs/airdrops","state":"closed","title":"Check if the claim amount is zero","type":"issue","updatedAt":"2025-03-26T17:17:58Z","url":"https://github.com/sablier-labs/airdrops/issues/126"},{"author":"PaulRBerg","body":"## Problem\n\nVCA campaign creators may want to start the distribution from a non-zero value.\n\n## Solution\n\nImplement an `unlockPercentage` (name TBD) that becomes immediately available as soon as `block.timestamp >= startTime`:\n\n```solidity\nclaimAmount = unlockPercentage * fullAmount + (elapsedTime / totalDuration) * (100% - unlockPercentage) * fullAmount\n```","createdAt":"2025-03-24T19:44:56Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":124,"repository":"sablier-labs/airdrops","state":"closed","title":"Implement \"unlockPercentage\" in VCA","type":"issue","updatedAt":"2025-03-26T18:38:49Z","url":"https://github.com/sablier-labs/airdrops/issues/124"},{"author":"PaulRBerg","body":"I just noticed that this name:\n\n```\nSablier Merkle Factory ...\n```\n\nShould really be refactored into:\n\n```\nSablier Factory Merkle ...\n```\n\nThe `Factory` should take priority over the `Merkle` part, because the latter is connected to the model (e.g. `Instant`).\n\nI'd prefer us to do this now to prevent a refactor in the subgraphs/UI. I can handle it in the current PR: https://github.com/sablier-labs/airdrops/pull/112\n\ncc @sablier-labs/evm","createdAt":"2025-03-23T22:01:03Z","labels":["effort: medium","priority: 2","type: refactor","work: clear"],"number":122,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"SablierMerkleFactory\" to \"SablierFactoryMerkle\"","type":"issue","updatedAt":"2025-03-24T21:47:12Z","url":"https://github.com/sablier-labs/airdrops/issues/122"},{"author":"PaulRBerg","body":"In line with the plural terminology of `tests`.","createdAt":"2025-03-23T21:57:57Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":121,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"script\" directory to \"scripts\"","type":"issue","updatedAt":"2025-04-19T14:14:18Z","url":"https://github.com/sablier-labs/airdrops/issues/121"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/airdrops/discussions/110, reclassify the functions as the following:\n\nUSER-FACING / CONTRACT-INTERNAL + READ-ONLY / STATE-CHANGING + FUNCTIONS","createdAt":"2025-03-23T14:53:36Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":120,"repository":"sablier-labs/airdrops","state":"closed","title":"Reclassify functions under new categories","type":"issue","updatedAt":"2025-05-13T13:27:39Z","url":"https://github.com/sablier-labs/airdrops/issues/120"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/airdrops/issues/106#issuecomment-2741782757) and similar to [this issue](https://github.com/sablier-labs/airdrops/issues/111), let's refactor the `schedule` struct into standalone getters.\n\nDoing so should also save a little gas in the claim function since loading basic types should be more gas efficient than loading a struct.","createdAt":"2025-03-23T12:15:54Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":119,"repository":"sablier-labs/airdrops","state":"closed","title":"Refactor MerkleLL \"schedule\" into standalone getters","type":"issue","updatedAt":"2025-03-26T17:38:53Z","url":"https://github.com/sablier-labs/airdrops/issues/119"},{"author":"PaulRBerg","body":"Why does this getter have the `get` prefix, while most others don't have it?\n\nIt's safe to rename it since it's [not used](https://github.com/sablier-labs/airdrops/issues/106#issuecomment-2743436134) in either the subgraphs or the UI.","createdAt":"2025-03-23T12:13:17Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":118,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"getFirstClaimTime\" to \"firstClaimTime\"","type":"issue","updatedAt":"2025-03-24T22:34:56Z","url":"https://github.com/sablier-labs/airdrops/issues/118"},{"author":"smol-ninja","body":"In Merkle campaign, there is no easy way to determine whether the campaign is fully funded or not. This could be helpful for users as well as the Sablier UI to show the funding status of the campaign.\n\n### Tasks\n\n- [ ] Store `aggregateAmount` in a state variable. This would be set at constructor.\n- [ ] Store `totalClaimedAmount` in a state variable. This would be updated during claim.\n- [ ] Getter returns funding status: `UNFUNDED`, `PARTIALLY_FUNDED`, `FULLY_FUNDED` by checking `aggregateAmount - totalClaimedAmount <= token.balanceOf(this)`.\n\n### Remarks\n\nI understand that `aggregateAmount` cannot be trusted, but given that all the valid campaigns are and will be created through Sablier or partner UI, we can optimistically assume it to be accurate. Moreover, `aggregateAmount` does not interfere with `claim`, so even if it's incorrectly set, it will not have any impact on the claim.\n\nOne other advantage of storing `aggregateAmount` will be in the MerkleVCA campaign with redistribution strategy (which I will explain in a separate discussion).\n\n\n### Risks\n\nThe argument that a malicious campaign creator could deploy a campaign by providing an incorrect value for `aggregateAmount` and trick users into believing an incorrect state of funding is weak. This is because the biggest risk with a malicious user is providing an incorrect Merkle root or not funding the campaign at all, which anyways is never in our control.\n\nCriticisms are Welcome!","createdAt":"2025-03-21T23:06:33Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":114,"repository":"sablier-labs/airdrops","state":"closed","title":"Getter to determine campaign funding state","type":"issue","updatedAt":"2025-04-02T18:21:34Z","url":"https://github.com/sablier-labs/airdrops/issues/114"},{"author":"PaulRBerg","body":"Zero is used a sentinel value for `startTime`.\n\nWhen users set `startTime` to zero, we will set the start time to `block.timestamp`.\n\nIt'd be nice to provide a constant in the tests for this, something like `START_NOW = 0`, or `START_AT_BLOCK_TIMESTAMP = 0`, and use that instead of zero throughout the tests.","createdAt":"2025-03-21T20:56:06Z","labels":["effort: high","priority: 2","type: test","work: clear"],"number":113,"repository":"sablier-labs/airdrops","state":"closed","title":"Add a sentinel value constant for `startTime == 0`","type":"issue","updatedAt":"2025-03-23T11:59:50Z","url":"https://github.com/sablier-labs/airdrops/issues/113"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/airdrops/issues/106#issuecomment-2741782757), it'd be cleaner for the `schedule` struct in `MerkleVCA` to be refactored into separate `START_TIME` and `END_TIME` values.","createdAt":"2025-03-21T12:31:06Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":111,"repository":"sablier-labs/airdrops","state":"closed","title":"Turn \"timestamps\" into \"START_TIME\" and \"END_TIME\"","type":"issue","updatedAt":"2025-03-24T22:36:05Z","url":"https://github.com/sablier-labs/airdrops/issues/111"},{"author":"PaulRBerg","body":"Similar to https://github.com/sablier-labs/airdrops/issues/105 but for the foregone amount:\n\n```solidity\nfunction calculateForgoneAmount(uint128 fullAmount, uint40 claimTime) external view returns (uint128);\n```\n","createdAt":"2025-03-20T21:13:26Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":108,"repository":"sablier-labs/airdrops","state":"closed","title":"Getter for calculating forgone amount","type":"issue","updatedAt":"2025-03-24T21:48:59Z","url":"https://github.com/sablier-labs/airdrops/issues/108"},{"author":"PaulRBerg","body":"For consistency with the MerkleLL contract, we could rename the `timestamps` to `getSchedule`:\n\nhttps://github.com/sablier-labs/airdrops/blob/41f2e742744caabd64c388a32aa6eaf26bbe4654/src/interfaces/ISablierMerkleVCA.sol#L26","createdAt":"2025-03-20T20:21:15Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":106,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"timestamps\" to \"schedule\" in VCA","type":"issue","updatedAt":"2025-03-21T13:54:24Z","url":"https://github.com/sablier-labs/airdrops/issues/106"},{"author":"PaulRBerg","body":"In the VCA contract, we absolutely need a new getter for calculating the claim amount. This logic needs to be moved to a subroutine:\n\nhttps://github.com/sablier-labs/airdrops/blob/41f2e742744caabd64c388a32aa6eaf26bbe4654/src/SablierMerkleVCA.sol#L125-L130\n\nInterface:\n\n```solidity\nfunction calculateClaimAmount(uint128 fullAmount, uint40 claimTime) public view returns (uint128);\n```","createdAt":"2025-03-20T20:12:35Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":105,"repository":"sablier-labs/airdrops","state":"closed","title":"Getter for calculating the claim amount in VCA","type":"issue","updatedAt":"2025-03-24T21:48:55Z","url":"https://github.com/sablier-labs/airdrops/issues/105"},{"author":"PaulRBerg","body":"SLOADs are costly, so instead of reading so many times from storage in the `claim` function of the VCA contract, we could load the struct into memory once, like so:\n\n```solidity\nMerkleVCA.Timestamps memory timestamp = _timestamp;\n```","createdAt":"2025-03-20T20:05:29Z","labels":["effort: low","priority: 2","type: perf","work: clear"],"number":104,"repository":"sablier-labs/airdrops","state":"closed","title":"Load timestamps into memory to avoid multiple SLOAD","type":"issue","updatedAt":"2025-03-23T11:56:03Z","url":"https://github.com/sablier-labs/airdrops/issues/104"},{"author":"PaulRBerg","body":"","createdAt":"2025-03-20T16:40:10Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":103,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"forgoneAmount\" to \"totalForgoneAmount\"","type":"issue","updatedAt":"2025-03-24T21:47:31Z","url":"https://github.com/sablier-labs/airdrops/issues/103"},{"author":"PaulRBerg","body":"Because why not? It should be a helpful piece of information.","createdAt":"2025-03-20T16:36:33Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":102,"repository":"sablier-labs/airdrops","state":"closed","title":"Add \"forgoneAmount\" in the \"Claim\" event, and remove \"totalAmount\"","type":"issue","updatedAt":"2025-03-24T21:47:26Z","url":"https://github.com/sablier-labs/airdrops/issues/102"},{"author":"PaulRBerg","body":"- `FactoryInstant`\n- `FactoryLL`\n- `FactoryLT`\n- `FactoryVCA`","createdAt":"2025-03-19T16:07:29Z","labels":["effort: low","priority: 0","type: style","work: clear"],"number":101,"repository":"sablier-labs/airdrops","state":"closed","title":"Add ASCII artwork in factories","type":"issue","updatedAt":"2025-03-24T21:47:24Z","url":"https://github.com/sablier-labs/airdrops/issues/101"},{"author":"PaulRBerg","body":"## Problem\n\nThe fact that `minimumFeeInWei` has such a similar name to to `minimumFee` is problematic because the former is measured in wei with 18 decimals, whereas the latter is measured in USD with 8 decimals.\n\nFurthermore, the former is a storage variable, whereas the latter is a dynamic variable that is always calculated at runtime. The names do not reflect this subtle but important distinction.\n\n## Solution\n\n- [x] Rename `customFee` to `customFeeUSD` (and ditto for all related functions, e.g., `setCustomFeeUSD`)\n- [x] Rename `getFee` to `minFeeUSDFor`\n- [x] Rename `lowerMinimumFee` to `lowerMinFeeUSD`\n- [x] Rename `minimumFee` to `minFeeUSD`\n- [x] Rename `minimumFeeInWei` to `calculateMinFeeWei`\n- [x] Rename `initialMinimumFee` to `initialMinFeeUSD`\n\n## Rationale for 'Claim Fee'\n\n> [!NOTE]\n> This is outdated, see comments below.\n\nWhy going with `calculateMinClaimFee` instead of `calculateMinFeeWei`?\n\n- It's a much more specific name as it hints at the fact that the fee is used for claims.\n- It avoids 'wei' and thus avoids potential confusions on chains that don't use ETH as a native token. In a strictly technical sense, we can say that `1 $POL = 1e18 wei`, but in practice it's a bit awkward.","createdAt":"2025-03-19T15:12:28Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":100,"repository":"sablier-labs/airdrops","state":"closed","title":"Refactor fee terminology for more clarity","type":"issue","updatedAt":"2025-03-24T21:47:22Z","url":"https://github.com/sablier-labs/airdrops/issues/100"},{"author":"PaulRBerg","body":"We need this assumption because of this calculation:\n\nhttps://github.com/sablier-labs/airdrops/blob/03734199f9b7b3536b71661521fc33aee9ce0248/src/abstracts/SablierMerkleBase.sol#L273","createdAt":"2025-03-19T14:46:45Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":99,"repository":"sablier-labs/airdrops","state":"closed","title":"Add security assumption about the native token having 18 decimals","type":"issue","updatedAt":"2025-03-24T21:47:20Z","url":"https://github.com/sablier-labs/airdrops/issues/99"},{"author":"PaulRBerg","body":"In Sablier's code, the underscore at the beginning is typically reserved for internal variables.\n\n- [x] Rename `_campaignName` to `campaignName_`\n- [x] Rename `_ipfsCID` to `ipfsCID_`","createdAt":"2025-03-19T14:35:30Z","labels":["effort: low","priority: 3","type: refactor","work: clear"],"number":98,"repository":"sablier-labs/airdrops","state":"closed","title":"Move underscore at the end of the constructor params' names","type":"issue","updatedAt":"2025-03-24T21:47:17Z","url":"https://github.com/sablier-labs/airdrops/issues/98"},{"author":"PaulRBerg","body":"- [x] Rename `minimumFee` to  `newMinimumFee`, and add a new parameter `previousMinimumFee`","createdAt":"2025-03-19T14:19:22Z","labels":["effort: low","priority: 3","type: feature","work: clear"],"number":97,"repository":"sablier-labs/airdrops","state":"closed","title":"Emit previous value in \"SetMinimumFee\"","type":"issue","updatedAt":"2025-03-24T21:47:15Z","url":"https://github.com/sablier-labs/airdrops/issues/97"},{"author":"smol-ninja","body":"To complement https://github.com/sablier-labs/airdrops/issues/95, enable claim to a third-party address.\n\nDefine `claimTo ` to enable airdrop transfer to an arbitrary `to` address when `msg.sender` is eligible.","createdAt":"2025-03-19T12:38:38Z","labels":["effort: high","priority: 2","type: feature","work: clear"],"number":96,"repository":"sablier-labs/airdrops","state":"closed","title":"Claim to a third-party address","type":"issue","updatedAt":"2025-05-13T13:27:55Z","url":"https://github.com/sablier-labs/airdrops/issues/96"},{"author":"PaulRBerg","body":"## Feature\n\n- [x] Introduce a new claim function with an extra signature parameter (so that we keep the UX simple for basic claims). The goal is to enable the `msg.sender` to be a different address from the eligible recipient.\n- [x] Use the EIP-712 signature scheme (open to recommendations, but I think this is the gold standard)\n- [x] Verify the signature and transfer the airdrop to the third-party address if the verification passes\n\n### Requirements\n\n- The signatory must be an address eligible for the airdrop.\n- The third-party address may not be the zero address or the campaign contract's own address.\n\n### Notes\n\n- Without an expiry field in the signature blob, there's a tiny risk that the user may change their mind, and they may no longer want to claim to a third-party address. However, because the transaction is now public in the mempool, anyone can submit it and claim the airdrop on behalf of the user.\n- I think that this is a very unlikely and low-risk scenario. Concerned users can use Flashbots and just set a high gas price if they want to claim ASAP.\n\n## Use Cases\n\n- [x] Hacked addresses eligible for airdrops (e.g. Micah made this feature request [here](https://x.com/MicahZoltu/status/1897621075045064715))\n- [x] Claiming airdrop directly to CEX or custodian account (BitGo, Anchorage, etc.)\n\n\n## References\n- https://github.com/cowprotocol/contracts/blob/main/src/contracts/mixins/GPv2Signing.sol","createdAt":"2025-03-17T21:06:55Z","labels":["effort: epic","priority: 1","type: feature","work: complicated"],"number":95,"repository":"sablier-labs/airdrops","state":"closed","title":"Claim to third-party address using signatures (EIP-712 and EIP-1272)","type":"issue","updatedAt":"2025-06-13T12:57:57Z","url":"https://github.com/sablier-labs/airdrops/issues/95"},{"author":"PaulRBerg","body":"Context here: https://github.com/sablier-labs/company-discussions/discussions/115#discussioncomment-12502839\n\n### Tasks\n- [x] Declare `nativeToken` storage variable.\n- [x] Define `setNativeToken` only admin function\n- [x] Add it to the NatSpec of the `collectFees` function","createdAt":"2025-03-14T18:34:33Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":92,"repository":"sablier-labs/airdrops","state":"closed","title":"Implement `setNativeToken` setter","type":"issue","updatedAt":"2025-03-20T11:41:10Z","url":"https://github.com/sablier-labs/airdrops/issues/92"},{"author":"PaulRBerg","body":"This was recently requested by a user:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/40d3ab02-e6ba-4c11-93e3-c4e2f2ac65b5\" />\n\nNote: I'm not sure if this repo is the best place to store this script long-term. Maybe @sablier-labs/evm can comment on this.\n\ncc @sablier-labs/frontend FYI","createdAt":"2025-03-13T16:27:36Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":90,"repository":"sablier-labs/airdrops","state":"closed","title":"Script for generating CSV file with recipients from IPFS CID","type":"issue","updatedAt":"2025-03-17T18:44:17Z","url":"https://github.com/sablier-labs/airdrops/issues/90"},{"author":"andreivladbrg","body":"### Non-informational fixes:\n\n- Add checks for time parameters in `MerkleLL` and `MerkleLT` constructors.\n- For tokens like `POL` and `CELO`, we won't support them at the UI level.\n- ~Do not allow a grace period in VCA (rely solely on `hasExpired`).~\n- Return 0 if the last update on the oracle is older than 24 hours.\n\n### Informational fixes:\n\n- `ISablierMerkleBase.sol#L87`: Use `minimumFeeInWei` instead of `minimumFee`.\n- `SablierMerkleFactoryBase.sol#L83–L86`: Use \"Effect\" instead of \"Checks.\"\n- `SablierMerkleVCA.sol#L113`: Remove \"now,\" as users cannot claim at the start time.\n- `DataTypes.sol#L130`: Remove \"A value of zero means the campaign does not expire.\"\n- Add more documentation about \"double-entry\" tokens, and update Assumptions to state that these tokens are not supported.\n\n---\n\n*(For further explanations, go through each finding)*\n\n**Findings**\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/1  \n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/4 \n- ~https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/3~ No action is needed, as it will be mitigated through the UI.\n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/6 \n- https://cantina.xyz/code/c9980035-706a-4119-91fe-7ebddaf123e4/findings/10   ","createdAt":"2025-03-13T15:40:08Z","labels":["effort: medium","priority: 0","type: docs","type: refactor","work: complex"],"number":89,"repository":"sablier-labs/airdrops","state":"closed","title":"Q1 2025 audit issues","type":"issue","updatedAt":"2025-03-26T13:00:02Z","url":"https://github.com/sablier-labs/airdrops/issues/89"},{"author":"PaulRBerg","body":"As suggested by @smol-ninja on Slack, the name of the `merkleBase` parameter in the `collectFees` ([here](https://github.com/sablier-labs/airdrops/blob/41f2e742744caabd64c388a32aa6eaf26bbe4654/src/abstracts/SablierMerkleFactoryBase.sol#L66)) function is a bit ambiguous:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/264b01aa-d279-413f-9105-04dd49b1420a\" />\n\nIdea for new name: `airdropContract`.","createdAt":"2025-03-12T12:56:33Z","labels":["effort: low","priority: 2","type: refactor","work: clear"],"number":86,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"merkleBase\" to something more descriptive","type":"issue","updatedAt":"2025-03-26T13:42:58Z","url":"https://github.com/sablier-labs/airdrops/issues/86"},{"author":"andreivladbrg","body":"Similar to the [lockup fork tests](https://github.com/sablier-labs/lockup/blob/staging/tests/fork/Lockup.t.sol), we can dry-fy the Merkle campaign fork tests code as well.  \n\nFor example:  \n- [MerkleInstant code](https://github.com/sablier-labs/airdrops/blob/b9dba976afb53d3c6d8020236743732909377fc7/tests/fork/merkle-campaign/MerkleInstant.t.sol#L71-L108)  \n- [MerkleLL code](https://github.com/sablier-labs/airdrops/blob/b9dba976afb53d3c6d8020236743732909377fc7/tests/fork/merkle-campaign/MerkleLL.t.sol#L91-L128)  \n\nThis is just an example—there are more lines that can be DRY-ified.","createdAt":"2025-03-04T10:30:24Z","labels":["effort: high","priority: 2","type: test","work: complex"],"number":81,"repository":"sablier-labs/airdrops","state":"closed","title":"DRY-ify fork tests","type":"issue","updatedAt":"2025-03-12T10:57:08Z","url":"https://github.com/sablier-labs/airdrops/issues/81"},{"author":"andreivladbrg","body":"Once the audit is finished and everything is merged to `main` in `v2-core` (future `lockup`) we should archive this repo and reference the new repo created for airdrops contracts.","createdAt":"2024-12-18T11:19:07Z","labels":[],"number":386,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Archive this repo and add a note with reference to `airdrop` repo","type":"issue","updatedAt":"2025-01-29T12:54:34Z","url":"https://github.com/sablier-labs/v2-periphery/issues/386"},{"author":"smol-ninja","body":"https://github.com/sablier-labs/v2-periphery/blob/2d338a7ff6452b20a25e779f5a960f047a5d16af/test/fork/merkle-lockup/MerkleLT.t.sol#L146-L152\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/2d338a7ff6452b20a25e779f5a960f047a5d16af/test/fork/merkle-lockup/MerkleLL.t.sol#L144-L150","createdAt":"2024-08-01T15:05:59Z","labels":["effort: low","priority: 0","type: test","work: clear"],"number":382,"repository":"sablier-labs/v2-periphery","state":"closed","title":"missing `expectEmit` in `MerkleLL` and `MerkleLT` fork tests","type":"issue","updatedAt":"2024-08-01T16:16:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/382"},{"author":"smol-ninja","body":"Bump the solhint version to v5.0.2 and add the new rule to automatically order the imports in alphabetical order (PR [#587](https://github.com/protofire/solhint/pull/587)).","createdAt":"2024-07-22T22:50:48Z","labels":["effort: low","type: chore","priority: 2","work: clear"],"number":376,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Bump solhint and add the new rule to order imports","type":"issue","updatedAt":"2024-07-30T14:00:12Z","url":"https://github.com/sablier-labs/v2-periphery/issues/376"},{"author":"smol-ninja","body":"Its redundant.\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/ab9dfdd5501749aa5efa3a90bb5d9b91707dd247/src/types/DataTypes.sol#L10-L14","createdAt":"2024-07-19T19:23:26Z","labels":["good first issue","effort: low","type: refactor","priority: 2","work: clear"],"number":373,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Remove `CancelMultiple` struct from Batch Lockup library","type":"issue","updatedAt":"2024-07-24T13:13:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/373"},{"author":"andreivladbrg","body":"The current blast deployment script configuration does not work as expected:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/424bc4f313b90162077d2dcb652b1421b9e02ff5/script/DeployDeterministicPeriphery.s.sol#L27-L44\r\n\r\nWhen you run, it reverts with `CallerNotAdmin`.","createdAt":"2024-07-15T14:58:28Z","labels":["effort: low","priority: 3","type: refactor"],"number":368,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Try to fix blast deployment script configuration","type":"issue","updatedAt":"2025-01-14T14:24:06Z","url":"https://github.com/sablier-labs/v2-periphery/issues/368"},{"author":"andreivladbrg","body":"With the latest release, I had to deploy the contracts on all chains, which made me realize that we don’t have a deploy multi-chain script here, similar to [core](https://github.com/sablier-labs/v2-core/blob/main/shell/deploy-multi-chain.sh). \r\n\r\nWe should have it here too.","createdAt":"2024-07-15T11:05:57Z","labels":["effort: high","work: complex","priority: 2","type: feature"],"number":367,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add deploy multi chain shell script","type":"issue","updatedAt":"2024-07-31T09:24:46Z","url":"https://github.com/sablier-labs/v2-periphery/issues/367"},{"author":"smol-ninja","body":"As discussed [here](https://github.com/sablier-labs/v2-periphery/issues/353#issuecomment-2178060522), the goal is to write a view function that verifies that the sum of percentages of tranches equals 100%. \r\n\r\n```solidity\r\n/// @notice Verifies if the sum of percentages in `tranches` equals 100% , i.e. 1e18.\r\n/// @dev Reverts if the sum of percentages overflows.\r\n/// @param tranches The tranches with their respective unlock percentages.\r\n/// @return result True if the sum of percentages equals 100%, otherwise false.\r\nfunction isPercentagesSum100(MerkleLT.TrancheWithPercentage[] calldata tranches)\r\n    external\r\n    pure\r\n    returns (bool result);\r\n```","createdAt":"2024-06-19T09:04:03Z","labels":["effort: low","priority: 0","type: feature","work: clear"],"number":356,"repository":"sablier-labs/v2-periphery","state":"closed","title":"A view function to verify the sum of percentages in MLT prior to deployment","type":"issue","updatedAt":"2024-06-21T08:45:58Z","url":"https://github.com/sablier-labs/v2-periphery/issues/356"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe use of `CREATE` can be exploited when the blockchain is reorged. For more details, see [M-04. Use of CREATE method is suspicious of reorg attack](https://www.codehawks.com/report/clvb9njmy00012dqjyaavpl44#M-04) in CodeHawks' audit report.\r\n\r\n### My Thoughts\r\n\r\nThe odds for this vulnerability to occur are very low because stealing of funds can occur only in an exquisite set of circumstances:\r\n\r\n- Alice creates airstream campaign\r\n- Alice sends another tx to fund the campaign\r\n    - Note: contrary to what Rusty said [here](https://github.com/cantinasec/review-sablier-3/issues/1#issuecomment-2156787774), this issue applies even when Alice uses the same wallet for the funding tx because the higher-nonce tx may still be kept in the mempool\r\n- Alice's funding tx remains in the mempool WITHOUT being included in the previously reorged blockchain\r\n- Eve notices this setup and sends a tx to create an airstream campaign, sniping Alice's campaign contract\r\n- Alice's funding tx gets processed now and Eve clawbacks\r\n\r\n## Solution\r\n\r\n- [x] Switch to CREATE2\r\n- [x] Remove percentage sum check in create function and move it to the claim function\r\n- [x] Add appropriate tests\r\n\r\n## Related\r\n\r\nRusty's finding during the private audit: https://github.com/cantinasec/review-sablier-3/issues/1","createdAt":"2024-06-17T14:25:45Z","labels":["priority: 1","effort: medium","type: refactor","work: clear"],"number":353,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Switch back to CREATE2 for creating the MerkleLockup campaigns","type":"issue","updatedAt":"2024-06-19T09:04:23Z","url":"https://github.com/sablier-labs/v2-periphery/issues/353"},{"author":"smol-ninja","body":"Ref: https://github.com/sablier-labs/v2-core/issues/935","createdAt":"2024-06-16T11:29:50Z","labels":["effort: low","priority: 1","type: build","work: clear"],"number":352,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Exclude .t.sol files from NPM package","type":"issue","updatedAt":"2024-07-04T14:18:13Z","url":"https://github.com/sablier-labs/v2-periphery/issues/352"},{"author":"smol-ninja","body":"[Release announcement](https://soliditylang.org/blog/2024/05/21/solidity-0.8.26-release-announcement/)\r\n\r\nThe latest version of solidity offers the following relevant optimisations:\r\n1. reverts without parameters\r\n2. faster Yul optimizer","createdAt":"2024-06-14T11:48:10Z","labels":["effort: low","priority: 1","type: build","work: clear"],"number":350,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Upgrade to Solidity v0.8.26","type":"issue","updatedAt":"2024-06-14T19:58:07Z","url":"https://github.com/sablier-labs/v2-periphery/issues/350"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/925, set `evm_version` to `Shanghai` since `PUSH0` is supported by all chains where the Sablier protocol exists.","createdAt":"2024-05-15T15:46:26Z","labels":["effort: low","priority: 1","type: perf","work: clear"],"number":347,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update EVM Version to `Shanghai`","type":"issue","updatedAt":"2024-05-16T11:49:37Z","url":"https://github.com/sablier-labs/v2-periphery/issues/347"},{"author":"andreivladbrg","body":"Same as here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/issues/922","createdAt":"2024-05-14T21:01:56Z","labels":["effort: medium","type: refactor","priority: 2","work: clear"],"number":345,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Remove Sphinx support","type":"issue","updatedAt":"2024-05-15T15:46:09Z","url":"https://github.com/sablier-labs/v2-periphery/issues/345"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-periphery/discussions/332.","createdAt":"2024-05-02T17:06:27Z","labels":["priority: 0","effort: medium","type: feature","work: clear"],"number":338,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Implement post-first-claim grace period mechanism for clawback","type":"issue","updatedAt":"2024-05-03T16:13:34Z","url":"https://github.com/sablier-labs/v2-periphery/issues/338"},{"author":"andreivladbrg","body":"After the latest audit, some issues were found if the contract is pre-funded before deployment, e.g.: https://github.com/cantinasec/review-sablier-3/issues/1. Therefore, having deterministic contracts is problematic, and we should switch to using `CREATE`.\r\n\r\nIt will require to remove this:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/29be29e08ddd8c86e35252d76c1f81c7bf3db21e/src/SablierV2MerkleStreamerFactory.sol#L36-L51","createdAt":"2024-05-02T16:08:42Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":337,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Use CREATE instead of CREATE2 when deploying the MerkleLockup contract","type":"issue","updatedAt":"2024-05-03T11:37:05Z","url":"https://github.com/sablier-labs/v2-periphery/issues/337"},{"author":"smol-ninja","body":"Same as https://github.com/sablier-labs/v2-core/pull/908","createdAt":"2024-04-28T14:55:25Z","labels":["priority: 1","effort: high","type: test","work: complicated"],"number":334,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add benchmark dir in tests","type":"issue","updatedAt":"2024-06-29T10:38:49Z","url":"https://github.com/sablier-labs/v2-periphery/issues/334"},{"author":"smol-ninja","body":"Since [staging-blast](https://github.com/sablier-labs/v2-periphery/tree/staging-blast) branch contains 1 additional commit on top of the `staging` branch, a separate CI workflow should be added to the `staging-blast` branch that runs automatically everytime `staging-blast` branch is updated.","createdAt":"2024-04-12T14:25:33Z","labels":["priority: 1","effort: medium","type: ci","work: clear"],"number":328,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Create a separate CI workflow for `staging-blast` branch","type":"issue","updatedAt":"2024-04-15T15:25:02Z","url":"https://github.com/sablier-labs/v2-periphery/issues/328"},{"author":"smol-ninja","body":"<img width=\"855\" alt=\"Screenshot 2024-04-12 at 14 49 53\" src=\"https://github.com/sablier-labs/v2-periphery/assets/6676622/5200e0f9-af72-4c08-aaaa-c920f48ed7fd\">","createdAt":"2024-04-12T13:51:32Z","labels":["good first issue","effort: low","type: test","priority: 2","work: clear"],"number":327,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Replace `computeCreate2Address` (deprecated) with `vm.computeCreate2Address`","type":"issue","updatedAt":"2024-06-18T20:11:33Z","url":"https://github.com/sablier-labs/v2-periphery/issues/327"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-periphery/discussions/318\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **andreivladbrg** April 10, 2024</sup>\r\nWith the new OE contract, we will have multiple batch contracts, but in different repos.\r\n\r\nThus, to differentiate between them, shouldn't we rename the batch contract to: `SablierV2BatchLockup`?\r\n\r\n@sablier-labs/solidity \r\n\r\nAlso, tagging @razgraf to ask if this would improve the dev work at the app level?</div>","createdAt":"2024-04-10T18:42:05Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":320,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename Batch to BatchLockup","type":"issue","updatedAt":"2024-04-12T11:06:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/320"},{"author":"PaulRBerg","body":"See context in https://github.com/sablier-labs/v2-periphery/discussions/314.","createdAt":"2024-04-10T15:22:11Z","labels":["effort: low","priority: 0","type: refactor","work: clear"],"number":319,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename \"LockupLL\" to \"LL\" and \"LockupLT\" to \"LT\"","type":"issue","updatedAt":"2024-04-11T16:21:39Z","url":"https://github.com/sablier-labs/v2-periphery/issues/319"},{"author":"PaulRBerg","body":"Using UD60x18 is overkill here - it's more gas expensive than `uint64` and doesn't offer any practical benefits:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/cb2ed635769dbe49d57fe8e297d8b77ac86450c5/src/SablierV2MerkleLockupFactory.sol#L71-L86\r\n\r\nFrom the PRBMath [README](https://github.com/PaulRBerg/prb-math/blob/a111d11988756e091c7ccfd1f5af490d4ddf8783/README.md):\r\n\r\n> it is important to be aware that utilizing these functions may result in increased gas costs compared to unwrapping and directly using the vanilla types","createdAt":"2024-04-09T15:35:05Z","labels":["effort: low","type: perf","priority: 2","work: clear"],"number":317,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Use basic numbers instead of UD60x18 for the percentage calculations","type":"issue","updatedAt":"2024-04-11T14:57:42Z","url":"https://github.com/sablier-labs/v2-periphery/issues/317"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-periphery/discussions/313#discussioncomment-9060175, the goal is to refactor memory structs to have parameters in alphabetical order throughout the codebase. \r\n\r\nRelated:\r\n- https://github.com/sablier-labs/v2-core/issues/888","createdAt":"2024-04-09T14:59:56Z","labels":["effort: high","priority: 3","type: refactor","work: clear"],"number":316,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Refactor memory structs to have parameters in an alphabetical order","type":"issue","updatedAt":"2024-04-12T14:27:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/316"},{"author":"smol-ninja","body":"The `CHANGELOG` file should be updated with the latest changes related to V2.2.","createdAt":"2024-03-21T10:26:03Z","labels":["priority: 1","effort: medium","type: docs","work: clear"],"number":306,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update changelog","type":"issue","updatedAt":"2024-07-04T14:18:11Z","url":"https://github.com/sablier-labs/v2-periphery/issues/306"},{"author":"PaulRBerg","body":"[Forge Std v1.8.0](https://github.com/foundry-rs/forge-std/releases/tag/v1.8.0) has been released recently.\r\n\r\nIt comes with a wonderful new feature: native Foundry assertions! They got rid of DSTest.\r\n\r\nThis has motivated me to [deprecate PRBTest](https://github.com/PaulRBerg/prb-test/issues/45), hence why I also opened this issue here to replace PRBTest with the native assertions available in Foundry now.\r\n\r\nRelated:\r\n\r\n- https://github.com/foundry-rs/forge-std/pull/503\r\n- https://github.com/foundry-rs/forge-std/pull/514","createdAt":"2024-03-12T09:32:39Z","labels":["effort: high","type: test","priority: 2","work: complicated"],"number":303,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Replace PRBTest with native Foundry assertions","type":"issue","updatedAt":"2024-03-28T18:06:29Z","url":"https://github.com/sablier-labs/v2-periphery/issues/303"},{"author":"andreivladbrg","body":"We need to add the batch functions for `LockupTranched` in `SablierV2Batch`.","createdAt":"2024-03-06T16:41:49Z","labels":["priority: 0","effort: medium"],"number":299,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add batch create functions for LockupTranched","type":"issue","updatedAt":"2024-03-11T16:55:37Z","url":"https://github.com/sablier-labs/v2-periphery/issues/299"},{"author":"smol-ninja","body":"Similar to https://github.com/sablier-labs/v2-core/issues/832.","createdAt":"2024-03-04T22:50:38Z","labels":["effort: low","type: ci","priority: 2","work: clear"],"number":296,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Run precompiles tests along with fork tests periodically","type":"issue","updatedAt":"2024-03-11T16:11:06Z","url":"https://github.com/sablier-labs/v2-periphery/issues/296"},{"author":"smol-ninja","body":"Same as https://github.com/sablier-labs/v2-core/issues/807. Depends on https://github.com/sablier-labs/v2-core/pull/811.","createdAt":"2024-02-26T13:48:59Z","labels":["priority: 1","effort: high","type: feature","work: complicated"],"number":295,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Support Blast network","type":"issue","updatedAt":"2024-03-01T14:29:18Z","url":"https://github.com/sablier-labs/v2-periphery/issues/295"},{"author":"andreivladbrg","body":"With the merge of https://github.com/sablier-labs/v2-core/pull/813 in `staging` we renamed the `LockupLinear.Stream` and `LockupDynamic.Stream` to `LockupLinear.StreamLL` and `LockupDynamic.StreamLD` respectively.\r\n\r\nWe need to update the `staging` branch in this repo accordingly.","createdAt":"2024-02-21T11:26:47Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":293,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update `staging` branch to use the new structs","type":"issue","updatedAt":"2024-03-04T10:25:48Z","url":"https://github.com/sablier-labs/v2-periphery/issues/293"},{"author":"andreivladbrg","body":"Since we renamed `MerkleStreamer` to `MerkleLockup` we need to udpate the natspec here:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/e8f006f7dc04b22d27ebb9b7d5aab27322ac0f06/src/interfaces/ISablierV2MerkleLockup.sol#L7-L13","createdAt":"2024-02-13T20:46:05Z","labels":["effort: low","type: docs","priority: 2","work: clear"],"number":289,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update natspec in `ISablierV2MerkleLockup`","type":"issue","updatedAt":"2024-04-11T14:57:36Z","url":"https://github.com/sablier-labs/v2-periphery/issues/289"},{"author":"smol-ninja","body":"Since we are not storing forked `asset` into a separate variable, `Base_Test.setUp()` overrides the value of `asset` set by the `Fork_Test`’s constructor. That means all fork tests are operating with our own mock DAI and not with the forked asset.\r\n\r\n[See code here ↗](https://github.com/sablier-labs/v2-periphery/blob/3e6e023623e7b0260990564047569f9e2cb2ca16/test/fork/Fork.t.sol#L19C1-L32C27)\r\n\r\n```solidity\r\nabstract contract Fork_Test is Base_Test, V2CoreFuzzers {\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                    CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n    constructor(IERC20 asset_) {\r\n        asset = asset_;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////////////////\r\n                                  SET-UP FUNCTION\r\n    //////////////////////////////////////////////////////////////////////////*/\r\n\r\n    function setUp() public virtual override {\r\n        // Fork Ethereum Mainnet at a specific block number.\r\n        vm.createSelectFork({ blockNumber: 18_821_300, urlOrAlias: \"mainnet\" });\r\n\r\n        // Set up the base test contract.\r\n        Base_Test.setUp();\r\n```","createdAt":"2024-02-07T15:37:14Z","labels":["priority: 0","effort: medium","type: bug","work: complicated"],"number":286,"repository":"sablier-labs/v2-periphery","state":"closed","title":"forked `asset` is overridden by `Base_Test.setUp()` during fork tests","type":"issue","updatedAt":"2024-02-14T10:18:39Z","url":"https://github.com/sablier-labs/v2-periphery/issues/286"},{"author":"smol-ninja","body":"Raised by @razgraf, the goal is to store `ipfsCID` in the contract storage to make it publicly queryable.","createdAt":"2024-02-05T14:47:25Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":281,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Store `ipfsCID` in the contract storage","type":"issue","updatedAt":"2024-02-26T20:00:41Z","url":"https://github.com/sablier-labs/v2-periphery/issues/281"},{"author":"PaulRBerg","body":"See https://github.com/sablier-labs/v2-periphery/actions/runs/7755786954/job/21151934309.\r\n\r\nLogs:\r\n\r\n```text\r\n[FAIL. Reason: revert: ERC20: transfer amount exceeds balance; counterexample: calldata=0x306cdef600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000006581caargs=[Params({ admin: 0x0000000000000000000000000000000000000001, expiration: 1703004720\r\n```","createdAt":"2024-02-02T12:51:42Z","labels":["priority: 1","effort: medium","type: test","work: chaotic"],"number":277,"repository":"sablier-labs/v2-periphery","state":"closed","title":"\"ERC20: transfer amount exceeds balance\" in fork tests","type":"issue","updatedAt":"2024-02-02T17:02:04Z","url":"https://github.com/sablier-labs/v2-periphery/issues/277"},{"author":"PaulRBerg","body":"These warnings pop up in the CI summary, e.g. https://github.com/sablier-labs/v2-core/actions/runs/7755374062\r\n\r\n<img width=\"400\" alt=\"SCR-20240202-muyf\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/f28a9b86-02be-439a-8c64-2ad382a79317\">\r\n","createdAt":"2024-02-02T12:25:48Z","labels":["effort: low","priority: 3","type: chore","work: clear"],"number":276,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Upgrade GitHub Actions to get rid of Node.js v16 warning","type":"issue","updatedAt":"2024-03-18T11:17:57Z","url":"https://github.com/sablier-labs/v2-periphery/issues/276"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/23.","createdAt":"2024-02-01T21:40:42Z","labels":["priority: 1","effort: high","type: feature","work: complicated"],"number":274,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Implement MerkleLockupLD (LockupDynamic)","type":"issue","updatedAt":"2024-03-06T16:55:57Z","url":"https://github.com/sablier-labs/v2-periphery/issues/274"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/23.","createdAt":"2024-02-01T21:40:15Z","labels":["effort: high","type: feature","work: complicated"],"number":273,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Implement MerkleLockupLT (LockupTranched)","type":"issue","updatedAt":"2024-03-11T12:26:28Z","url":"https://github.com/sablier-labs/v2-periphery/issues/273"},{"author":"PaulRBerg","body":"Related: https://github.com/sablier-labs/v2-core/issues/808 and https://github.com/sablier-labs/company-discussions/discussions/25\r\n\r\nThe task is to move all contracts in this repository to the `v2-lockup` repository (formerly known as `v2-core`)","createdAt":"2024-01-30T11:16:29Z","labels":["effort: epic","type: refactor","work: complex","priority: 2"],"number":269,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Package tethering","type":"issue","updatedAt":"2024-08-08T19:01:29Z","url":"https://github.com/sablier-labs/v2-periphery/issues/269"},{"author":"PaulRBerg","body":"Our contracts have transitioned to referring to ERC-20s as tokens instead of assets.\n\n- https://github.com/sablier-labs/v2-core/issues/991\n- https://github.com/sablier-labs/flow/issues/195\n\nIt'd be best to pair this refactor with #57 to minimize downtime for integrators.","createdAt":"2024-12-21T09:21:46Z","labels":["type: refactor","work: clear","effort: medium","backlog"],"number":58,"repository":"sablier-labs/indexers","state":"closed","title":"Refactor Asset entity to Token","type":"issue","updatedAt":"2025-06-17T14:01:07Z","url":"https://github.com/sablier-labs/indexers/issues/58"},{"author":"PaulRBerg","body":"### As discussed in https://github.com/sablier-labs/subgraphs/discussions/53\n\nThe task is to create new subgraph series, as it is not possible to rename subgraphs on The Graph. The existing subgraphs will continue working.\n\n- [ ] New series for Flow to remove `v2`\n- [ ] New series for Lockup to remove `v2`\n- [ ] New series for the Airdrop contracts to remove `v2` and `ms` (acronym for Merkle Streamer)\n\nIt'd be great if we could do this before/ during the Lockup v2.0.0 launch in Q1 2025 — I imagine that @gavriliumircea will have to go through the slog of updating all subgraphs anyway.\n\nP.S. we should also create a PR in [DeFiLlama](https://github.com/DefiLlama/DefiLlama-Adapters/blob/6b88947f7c69d9baa21ffedfeebf30cfab305baf/projects/sablier-v2/index.js) to update the endpoints. **edit**: this is [done](https://github.com/DefiLlama/DefiLlama-Adapters/pull/12815) now","createdAt":"2024-12-21T08:56:25Z","labels":["effort: high","priority: 2","type: refactor","work: clear"],"number":57,"repository":"sablier-labs/indexers","state":"closed","title":"New subgraph series to supersede the outdated names","type":"issue","updatedAt":"2025-02-01T14:48:45Z","url":"https://github.com/sablier-labs/indexers/issues/57"},{"author":"razgraf","body":"Rename this repository to `@sablier/subgraphs` and alter folder structure, such that `apps/protocol*` will now become `apps/lockup`, given we'll be merging `apps/flow*` soon.\r\n\r\nThe projects inside Envio's Hosted Service should be renamed as well.\r\nNote that the docs may have to be updated.","createdAt":"2024-10-16T13:10:58Z","labels":[],"number":46,"repository":"sablier-labs/indexers","state":"closed","title":"Rename to `@sablier/subgraphs` and alter folder structure","type":"issue","updatedAt":"2024-10-23T08:00:15Z","url":"https://github.com/sablier-labs/indexers/issues/46"},{"author":"razgraf","body":"Bump Envio to `>= 2.4.4`.","createdAt":"2024-10-10T14:21:48Z","labels":[],"number":45,"repository":"sablier-labs/indexers","state":"closed","title":"Bump Envio to its latest version","type":"issue","updatedAt":"2024-10-14T08:29:40Z","url":"https://github.com/sablier-labs/indexers/issues/45"},{"author":"razgraf","body":"The version we currently host in [main] has issues when deploying to Envio's hosted service. The problems seems to be caused by Typescript but cannot be reproduces easily in a local environment (the deployment only crashes on the hosted service).","createdAt":"2024-07-16T10:19:11Z","labels":["effort: high","priority: 1","type: bug"],"number":41,"repository":"sablier-labs/indexers","state":"closed","title":"Fix Envio deployment on the hosted service","type":"issue","updatedAt":"2024-08-29T12:38:33Z","url":"https://github.com/sablier-labs/indexers/issues/41"},{"author":"razgraf","body":"We've received some new deployment addresses from @andreivladbrg for [Optimism Sepolia](https://docs.sablier.com/contracts/v2/deployments#optimism-sepolia) and [Arbitrum Sepolia](https://docs.sablier.com/contracts/v2/deployments#arbitrum-sepolia) (alongside others). Since we had integrators asking for support on these testnets, we should deploy the indexers/subgraphs with these new contracts.","createdAt":"2024-07-16T10:16:48Z","labels":["priority: 3","effort: low","type: chore"],"number":40,"repository":"sablier-labs/indexers","state":"closed","title":"Update testent addresses and re-deploy subgraphs","type":"issue","updatedAt":"2024-08-28T08:57:30Z","url":"https://github.com/sablier-labs/indexers/issues/40"},{"author":"alex-pakalniskis","body":"Hey team,\n\nWe've noticed that you're referencing a subgraph deployed on The Graph's hosted service in this repository. **Just a heads-up: after June 12th, hosted service subgraph endpoints will no longer be available as the offering is being deprecated.**\n\nIf you are the subgraph owner or maintainer, it's time to upgrade your subgraph to the network. This ensures everything keeps running smoothly and you get access to all the latest features and improvements. Here is a [quick guide](https://thegraph.com/docs/en/sunrise/#how-do-i-upgrade-my-hosted-service-subgraph) with all the upgrade steps.\n\nIf you're not the subgraph owner or maintainer, check [Graph Explorer](https://thegraph.com/explorer) to see if the subgraph development team has already upgraded to the network. If you don’t find an upgraded subgraph, a friendly nudge to the subgraph development team would be greatly appreciated—it's a quick process that benefits everyone. Here's the [upgrade guide](https://thegraph.com/docs/en/sunrise/#how-do-i-upgrade-my-hosted-service-subgraph) with all the necessary steps for the subgraph development team.\n\nOnce the subgraph is upgraded to the network, you can [create an API key and updated query URL](https://thegraph.com/docs/en/querying/querying-the-graph/) in Subgraph Studio then update this repository to query from the new endpoint, `https://api.studio.thegraph.com/query/<ID>/<SUBGRAPH_NAME>/<VERSION>`\n\nNeed more support or have more questions? Feel free to reach out to felix@edgeandnode.com. We're here to help!\n\nCheers,\n\nPaka","createdAt":"2024-06-11T04:30:19Z","labels":[],"number":37,"repository":"sablier-labs/indexers","state":"closed","title":"Subgraph endpoint update required","type":"issue","updatedAt":"2024-06-11T10:18:59Z","url":"https://github.com/sablier-labs/indexers/issues/37"},{"author":"razgraf","body":"To prevent the UI from showing Airstream campaigns created with unknown lockup contracts, indexing new entities should be skipped if the the \"create campaign\" event resolves to an untracked LL/LD/LT address.","createdAt":"2024-05-05T14:17:06Z","labels":[],"number":33,"repository":"sablier-labs/indexers","state":"closed","title":"Index only merkle campaigns using known lockup contracts","type":"issue","updatedAt":"2024-07-04T13:37:12Z","url":"https://github.com/sablier-labs/indexers/issues/33"},{"author":"razgraf","body":"A workflow that it triggered automatically once per week (or even day) should be implemented to run the differential tests from `protocol-envio/test` and `merkle-envio/test`.\r\n\r\nSome caveats to consider:\r\n- If the indexer reaches a block faster than the subgraph, the test will fail - this is somewhat of a false-positive as indexing speed is a good thing, so tests should be adapted for this caveat\r\n- The tests could be run against two separate subgraphs (different chain) for even more reassurance\r\n- Separately, availability tests could be considered for all subgraphs and indexers","createdAt":"2024-02-08T09:16:18Z","labels":["effort: high","priority: 2","type: test","work: complicated"],"number":26,"repository":"sablier-labs/indexers","state":"open","title":"Create workflow to run differential tests at set intervals","type":"issue","updatedAt":"2025-07-14T13:15:59Z","url":"https://github.com/sablier-labs/indexers/issues/26"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/759\r\n- https://github.com/sablier-labs/sablier-v2-integration-template/pull/3","createdAt":"2023-12-31T11:47:06Z","labels":["effort: high","priority: 2","type: build","work: complicated"],"number":22,"repository":"sablier-labs/indexers","state":"closed","title":"Use Bun for dependency management","type":"issue","updatedAt":"2024-11-04T12:50:14Z","url":"https://github.com/sablier-labs/indexers/issues/22"},{"author":"DenhamPreen","body":"Current behaviour: An error is logged when a Transfer event is emitted and a stream doesn't already exist, this will occur everytime a new stream is created as when a StreamNFT is created the action of minting an NFT results in a Transfer event being emitted, this Transfer event is emitted before the `CreateLockupLinearStream` event is emitted\r\n\r\nSolution: Treat mints and transfer differently by identifying a mint by the from address being equal to the zero address (\r\n0x0000000000000000000000000000000000000000)\r\n\r\nExample pseudo code  fix:\r\n```typescript\r\n  if (stream == null && event.params.from != zeroAddress) {\r\n    log.info(\r\n      \"[SABLIER] Stream hasn't been registered before this transfer event: {}\",\r\n      [id.toHexString()],\r\n    );\r\n    log.error(\"[SABLIER]\", []);\r\n    return;\r\n  }\r\n```\r\n\r\nExample transaction: https://etherscan.io/tx/0x8255c56151b47382aea1e3b255339d0ed9934e4a384fb346a37dd1e62f8393b3#eventlog\r\nRelevant code: \r\nhttps://github.com/sablier-labs/v2-subgraphs/blob/2e1a92c8b39a13a2ea91f3a3cbed34c09c3a8c27/packages/protocol/src/mappings/handle-stream.ts#L119\r\n\r\ncc: @woosungd","createdAt":"2023-12-07T10:13:22Z","labels":[],"number":18,"repository":"sablier-labs/indexers","state":"closed","title":"[Minor bug] - False error message on Transfer event","type":"issue","updatedAt":"2023-12-07T16:19:18Z","url":"https://github.com/sablier-labs/indexers/issues/18"},{"author":"PaulRBerg","body":"The `core` package includes non-V2 Core entities, such as `Batch`:\r\n\r\nhttps://github.com/sablier-labs/v2-subgraphs/blob/b948ff927a4f1cecc4f23a4b37ff93bdb2f3f421/packages/core/schema.graphql#L204-L219\r\n\r\nSuch entities should either be moved to another package/ subgraph called `periphery`, or the package should be named differently to indicate that it contains logic for the Sablier V2 protocol as a whole (not just V2 Core).\r\n\r\nAlternatively, we could remove the plural form of this repository name and keep the subgraph at the root since the PRBProxy subgraph is [expected](https://github.com/sablier-labs/v2-subgraphs/issues/7) to be migrated over.","createdAt":"2023-07-31T10:20:12Z","labels":[],"number":13,"repository":"sablier-labs/indexers","state":"closed","title":"Core and periphery entities are bundled together","type":"issue","updatedAt":"2023-08-04T11:54:17Z","url":"https://github.com/sablier-labs/indexers/issues/13"},{"author":"PaulRBerg","body":"For better performance, enhanced DX, and more consistency between our repositories.\r\n\r\nMost parts of our [docs website](https://docs.sablier.com/) recommend using [Pnpm](https://pnpm.io/), while the subgraphs section mentions Yarn.","createdAt":"2023-07-11T09:45:46Z","labels":[],"number":12,"repository":"sablier-labs/indexers","state":"closed","title":"Migrate to Pnpm","type":"issue","updatedAt":"2023-12-31T11:47:37Z","url":"https://github.com/sablier-labs/indexers/issues/12"},{"author":"razgraf","body":"Registry addresses will have to be updated in both interfaces (as per https://github.com/sablier-labs/v2-interfaces/issues/514) and the subgraphs.","createdAt":"2023-07-10T17:15:49Z","labels":[],"number":11,"repository":"sablier-labs/indexers","state":"closed","title":"Update to PRBProxy v4.0.1","type":"issue","updatedAt":"2023-07-11T16:53:40Z","url":"https://github.com/sablier-labs/indexers/issues/11"},{"author":"razgraf","body":"The soon to be frozen July versions of the `Sablier V2` and `PRB Proxy` contracts bring upon some changes regarding ABIs and methods implemented. The task is to follow https://github.com/sablier-labs/v2-interfaces/issues/451 and as soon as the contracts are available, perform the required changes to support them.\r\n\r\nIn related efforts, the functionality in the PRBProxy subgraph can also be changed to reflect the updates (as well as the lack of a Transfer event/functionality).","createdAt":"2023-06-26T18:41:06Z","labels":[],"number":8,"repository":"sablier-labs/indexers","state":"closed","title":" Post-audit contract changes relevant for V2 Subgraphs","type":"issue","updatedAt":"2023-07-02T22:08:50Z","url":"https://github.com/sablier-labs/indexers/issues/8"},{"author":"PaulRBerg","body":"Thanks for building a subgraph for PRBProxy, @razgraf. As explained in a recent [comment exchange](https://github.com/cantinasec/review-sablier2/issues/19#issuecomment-1589316971) I had with Cantina, this subgraph plays an important rule for proxy discoverability.\r\n\r\nPRBProxy has been designed as an open-source public good. Given the [recent drama](https://github.com/sablier-labs/v2-core/discussions/53#discussioncomment-6183448) about whether the BUSL license constitutes open-source or non-open-source, it might well be worth it to draw a line in the sand between Sablier V2 code and PRBProxy code. Furthermore, it might play to Sablier's advantage as a business to _not_ take any responsibility regarding proxies, given how difficult they are to get right (computational universality à la [`execute`](https://github.com/PaulRBerg/prb-proxy/blob/6fbb6df62d25e07fc702a4485595aa34d8297237/src/PRBProxy.sol#L87) begets errors).\r\n\r\nSide note: I should also [consider](https://github.com/PaulRBerg/prb-proxy/issues/112) turning the PRBProxy repo into a monorepo 🤔","createdAt":"2023-06-15T09:12:30Z","labels":[],"number":7,"repository":"sablier-labs/indexers","state":"closed","title":"Move PRBProxy to a separate repo","type":"issue","updatedAt":"2023-12-07T17:14:40Z","url":"https://github.com/sablier-labs/indexers/issues/7"},{"author":"razgraf","body":"As discussed in #2 , the field `type` may cause some conflicts due to it already being heavily used by languages (and libraries). Moreover, it causes concern when an entity has more than one type of \"type\".\r\n\r\nThe suggestion is to rename this field (encountered in the definition of Action, Contract or Stream) into something like:\r\n- `purpose` (used quite a lot in v2-interfaces)\r\n- `context`\r\n- `category` (sounds nice)","createdAt":"2023-01-02T12:04:34Z","labels":[],"number":3,"repository":"sablier-labs/indexers","state":"closed","title":"Rename `entity.type` with something less conflicting","type":"issue","updatedAt":"2023-01-03T14:49:19Z","url":"https://github.com/sablier-labs/indexers/issues/3"},{"author":"PaulRBerg","body":"Rationale:\r\n\r\n- It's a more specific and more accurate name for this functionality — since it reflects the continues nature of the Flow stream\r\n- Differentiate Flow from Lockup/ Airdrops\r\n","createdAt":"2024-12-04T19:41:39Z","labels":["effort: high","type: refactor","priority: 2","work: clear"],"number":344,"repository":"sablier-labs/flow","state":"closed","title":"Rename \"deposit\" to \"topUp\"","type":"issue","updatedAt":"2025-01-24T10:53:31Z","url":"https://github.com/sablier-labs/flow/issues/344"},{"author":"andreivladbrg","body":"Similar to: https://github.com/sablier-labs/v2-core/issues/1103\r\n","createdAt":"2024-12-02T13:54:42Z","labels":["effort: medium","type: build","priority: 2","work: clear"],"number":341,"repository":"sablier-labs/flow","state":"closed","title":"Get rid of \"optimized\" foundry profiles","type":"issue","updatedAt":"2025-07-23T12:49:37Z","url":"https://github.com/sablier-labs/flow/issues/341"},{"author":"andreivladbrg","body":"similar to [lockup](https://github.com/sablier-labs/v2-core/tree/chain/blast/), we need to add a separate implementation with the additional logic needed for blast chain","createdAt":"2024-12-01T18:45:34Z","labels":[],"number":340,"repository":"sablier-labs/flow","state":"closed","title":"Add blast chain branch","type":"issue","updatedAt":"2024-12-02T13:39:35Z","url":"https://github.com/sablier-labs/flow/issues/340"},{"author":"smol-ninja","body":"The return value of `statusOf` cannot be relied upon. It can be manipulated by a smart sender. Take the following example:\r\n\r\n1. A call to `statusOf` is made inside a transaction.\r\n2. The sender sees the pending tx and front runs it by pausing the stream.\r\n3. The function returns `PAUSED`.\r\n4. The sender sends another tx in the next block to resume the stream.\r\n\r\nTherefore, the natspecs of `statusOf` should mention a note about it as the following:\r\n\r\n\r\n```solidity\r\n/// Since Flow offers flexibility to the senders, a sender can pause and resume a stream at any time. Therefore, \r\n/// it is not recommended to rely solely on the return value of `statusOf`.\r\n```","createdAt":"2024-11-25T13:47:20Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":339,"repository":"sablier-labs/flow","state":"closed","title":"Include a note on reliability of `statusOf` function","type":"issue","updatedAt":"2025-01-07T13:54:06Z","url":"https://github.com/sablier-labs/flow/issues/339"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/company-discussions/discussions/72#discussioncomment-11292236","createdAt":"2024-11-18T13:52:36Z","labels":["priority: 1","effort: low","type: feature","work: clear"],"number":338,"repository":"sablier-labs/flow","state":"closed","title":"Make \"batch\" function payable","type":"issue","updatedAt":"2024-12-16T04:48:18Z","url":"https://github.com/sablier-labs/flow/issues/338"},{"author":"smol-ninja","body":"In `Security.md`, add the following assumptions:\r\n\r\n```md\r\n- The token contract must implement `decimals()` in order to be compatible with Flow.\r\n- The `decimals` must remain immutable and must not be altered.\r\n```","createdAt":"2024-11-12T15:42:02Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":337,"repository":"sablier-labs/flow","state":"closed","title":"Add assumptions about `decimals` implementation","type":"issue","updatedAt":"2024-11-25T13:32:33Z","url":"https://github.com/sablier-labs/flow/issues/337"},{"author":"smol-ninja","body":"As reported in [Codehawk audit](https://codehawks.cyfrin.io/c/2024-10-sablier/results?t=report), a 0 value of `depletionTimeOf` may mean two things:\r\n1. `balance <= debt` when balance > 0\r\n2. `balance == 0`\r\n\r\nTherefore, it provides ambiguity between (1) the stream has been depleted, or (2) the stream has zero balance. The depletion in the context of a stream only makes sense if the stream transits from being solvent to becoming insolvent _over time_. Therefore, when the balance is 0, a stream never goes through the transition phase.\r\n\r\nAs a solution, revert `depletionTimeOf` with `Errors.SablierFlow_BalanceZero(uint256 streamId)` if `balance == 0`.","createdAt":"2024-11-11T16:42:10Z","labels":["priority: 0","effort: low","type: feature","work: clear"],"number":332,"repository":"sablier-labs/flow","state":"closed","title":"Revert `depletionTimeOf` if `balance == 0`","type":"issue","updatedAt":"2024-11-13T14:38:23Z","url":"https://github.com/sablier-labs/flow/issues/332"},{"author":"smol-ninja","body":"Reported in [Codehawk audit](https://codehawks.cyfrin.io/c/2024-10-sablier/results?t=report), a user can bypass paying the protocol fee by withdrawing in smaller amounts such that 10% of it becomes 0. For example,\r\n\r\n- Withdraw amount: 9 tokens\r\n- Protocol fee: 10% becomes 0.9 = 0 in solidity\r\n\r\nThus, as a fix, round up the protocol fee to `1` token if the following conditions are met:\r\n1. `withdraw amount > 0` AND\r\n2. `protocol fee (10% of withdraw amount ) == 0`\r\n\r\nNote: Double check that the function reverts when withdraw amount is 0 so that users do not pay a fee of 1 token when there are no tokens to withdraw.","createdAt":"2024-11-11T16:29:55Z","labels":["priority: 0","effort: medium","type: bug","work: clear"],"number":331,"repository":"sablier-labs/flow","state":"closed","title":"Round up protocol fee to 1 if its 0","type":"issue","updatedAt":"2024-11-12T16:47:18Z","url":"https://github.com/sablier-labs/flow/issues/331"},{"author":"smol-ninja","body":"Since `SablierFlowBase` inherits from `EIP4906`, add the following function to comply with EIP 165:\r\n\r\n```solidity\r\n/// @inheritdoc ERC721\r\nfunction supportsInterface(bytes4 interfaceId) public view override(IERC165, ERC721) returns (bool) {\r\n    // 0x49064906 is the ERC-165 interface ID required by ERC-4906\r\n    return interfaceId == 0x49064906 || super.supportsInterface(interfaceId);\r\n}\r\n```\r\n\r\nReported in [Codehawk audit](https://codehawks.cyfrin.io/c/2024-10-sablier/results?t=report).","createdAt":"2024-11-11T16:24:07Z","labels":["priority: 0","effort: low","type: feature","work: clear"],"number":330,"repository":"sablier-labs/flow","state":"closed","title":"Comply with `EIP-165`","type":"issue","updatedAt":"2024-11-12T13:08:25Z","url":"https://github.com/sablier-labs/flow/issues/330"},{"author":"PaulRBerg","body":"The design should be the same as in [Lockup](https://github.com/sablier-labs/v2-core/issues/1076).\r\n\r\n### Discussed in https://github.com/sablier-labs/flow/discussions/327\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** November  6, 2024</sup>\r\nWe've recently decided to charge [ETH fees](https://github.com/sablier-labs/v2-core/issues/1076) instead of [protocol fees](https://github.com/sablier-labs/v2-core/issues/1034) in Lockup. ETH fees make much more sense for Lockup streams per all the reasons provided [here](https://github.com/sablier-labs/company-discussions/discussions/72#discussioncomment-11115807).\r\n\r\nNow, for Flow streams, the fee is paid in stablecoin. This is not bad, but I wonder if charging in ETH wouldn't be better?\r\n\r\n1. More consistency across our fee models\r\n2. Less psychological resistance; the user has to pay a fee in ETH anyway (for the gas), so charging $1 in ETH should feel less pressuring than paying a *separate* fee in USDC (from the recipient's salary)\r\n3. Charging in ETH means that we are charging the account that withdraws, not the recipient (these accounts might not be the same)\r\n\r\nNotes:\r\n\r\n- I'm not suggesting to change the implementation now because doing so would cancel the validity of the security audits.\r\n- We will start charging in ~March anyway, so changing the implementation in Flow now would be overkill.\r\n\r\nCc @sablier-labs/everybody for feedback.</div>\r\n\r\n### Tasks\r\n- [x] https://github.com/sablier-labs/flow/issues/338","createdAt":"2024-11-06T17:13:19Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":328,"repository":"sablier-labs/flow","state":"closed","title":"ETH fees in withdraw function","type":"issue","updatedAt":"2024-12-16T04:44:23Z","url":"https://github.com/sablier-labs/flow/issues/328"},{"author":"smol-ninja","body":"## To do\r\n\r\n- [x] Implement `IBatch` interface\r\n- [x] Inherit `IBatch` into `ISablierFlowBase`","createdAt":"2024-10-31T22:06:03Z","labels":["priority: 0","effort: low","type: feature","work: clear"],"number":325,"repository":"sablier-labs/flow","state":"closed","title":"Implement `IBatch` interface","type":"issue","updatedAt":"2024-11-03T14:39:57Z","url":"https://github.com/sablier-labs/flow/issues/325"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/322.","createdAt":"2024-10-28T11:10:44Z","labels":["priority: 0","effort: low","type: feature","work: clear"],"number":323,"repository":"sablier-labs/flow","state":"closed","title":"Implement `refundMax`","type":"issue","updatedAt":"2024-10-28T21:04:50Z","url":"https://github.com/sablier-labs/flow/issues/323"},{"author":"PaulRBerg","body":"I've published [PRBMath v4.1.0](https://www.npmjs.com/package/@prb/math) on npm.","createdAt":"2024-10-21T11:37:51Z","labels":["effort: low","type: build","priority: 2","work: clear"],"number":318,"repository":"sablier-labs/flow","state":"closed","title":"Upgrade to PRBMath v4.1.0","type":"issue","updatedAt":"2024-10-21T12:01:34Z","url":"https://github.com/sablier-labs/flow/issues/318"},{"author":"PaulRBerg","body":"See context on [Slack](https://sablier.slack.com/archives/CT3NXSNMS/p1728984591815089).","createdAt":"2024-10-15T11:21:24Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":310,"repository":"sablier-labs/flow","state":"closed","title":"Add assumption about centralized tokens with admin powers","type":"issue","updatedAt":"2024-10-17T10:22:06Z","url":"https://github.com/sablier-labs/flow/issues/310"},{"author":"smol-ninja","body":"Currently, code coverage includes both fuzz and concrete tests. The fuzz tests require that functions are not reverting. That's why we use `assume` and `bound` in them. Thus, they only test for non reverting situations.\r\n\r\nOn the other hand, concrete tests is to test for each and every line and all possible branches, which is what coverage should be telling us. Currently, even if some of the branches are missed in concrete but called in fuzz, the coverage will not be able to detect that.\r\n\r\nAn example is missing `notNull` modifier in `isTransferrable` ([cantina finding](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/2)).\r\n\r\nThus, I propose to run coverage only using concrete tests.\r\n\r\nRFC @sablier-labs/solidity.\r\n\r\nHere is a comparison. As you can see the coverage for `SablierFlow.sol` went down when calculating it based on concrete tests, demonstrating that there are missing concrete tests for some lines / branches.\r\n\r\n| `--mp \"tests/{integration}/**/*.sol\"` | `--mp \"tests/integration/concrete/**/*.sol\"` |\r\n| -- | -- |\r\n| <img width=\"890\" alt=\"Screenshot 2024-10-15 at 12 02 17\" src=\"https://github.com/user-attachments/assets/6df0b168-711e-485e-b684-06be85156b34\"> | <img width=\"890\" alt=\"Screenshot 2024-10-15 at 12 03 28\" src=\"https://github.com/user-attachments/assets/55fc660f-3db2-441d-b386-90b2957ddc86\"> |\r\n\r\nPS: similar suggestion for lockup.","createdAt":"2024-10-15T11:07:44Z","labels":["effort: low","work: clear","priority: 3","type: ci"],"number":309,"repository":"sablier-labs/flow","state":"closed","title":"Code coverage based on concrete tests only","type":"issue","updatedAt":"2024-12-09T14:31:48Z","url":"https://github.com/sablier-labs/flow/issues/309"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/issues/289, remove the delay logic from `invariant_TotalStreamedWithDelayEqTotalDebtPlusWithdrawn` and use inequality as follows:\r\n\r\n- approximately assert that \"totalStreamedAmount = flow.totalDebtOf(streamId) + flowStore.withdrawnAmounts(streamId)\" with a delta of 10 wei.","createdAt":"2024-10-14T14:17:15Z","labels":["priority: 0","effort: medium","work: clear","type: test"],"number":307,"repository":"sablier-labs/flow","state":"closed","title":"replace the delay logic from invariant with an inequality","type":"issue","updatedAt":"2024-10-17T14:25:32Z","url":"https://github.com/sablier-labs/flow/issues/307"},{"author":"smol-ninja","body":"From [Cantina finding 13](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/13)\r\n\r\nThe current version of the `FlowNFTDescriptor` contract responsible for the metadata JSON does not include the protocol fee as part of the metadata. However a future version of the `NFTDescriptor` can include the protocol fee and therefore a change of the fee should emit a `BatchMetadataUpdate` event so third parties can update the metadata accordingly. [EIP-4906](https://eips.ethereum.org/EIPS/eip-4906) also specifies that it MUST be emitted in this case.\r\n\r\nThe `MetadataUpdate` or `BatchMetadataUpdate` event MUST be emitted when the JSON metadata of a token, or a consecutive range of tokens, is changed.","createdAt":"2024-10-14T12:07:07Z","labels":["priority: 0","effort: low","type: feature","work: clear"],"number":305,"repository":"sablier-labs/flow","state":"closed","title":"emit `BatchMetadataUpdate` in `setProtocolFee`","type":"issue","updatedAt":"2024-10-15T13:43:18Z","url":"https://github.com/sablier-labs/flow/issues/305"},{"author":"smol-ninja","body":"Many of [Cantina findings](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/10) were due to the fact that there are no concrete tests that can test the Flow system for max possible values for `rps`. Therefore, brainstorm potential solutions to achieve this. \r\n\r\nThe advantage is clear: Flow protocol would be tested for edge cases.\r\n\r\nThis can also be done in conjecture with https://github.com/sablier-labs/flow/issues/272.","createdAt":"2024-10-13T15:47:27Z","labels":["effort: high","priority: 2","type: test","work: complicated"],"number":303,"repository":"sablier-labs/flow","state":"open","title":"tests for values of rps near `uint128` max","type":"issue","updatedAt":"2025-08-07T16:05:41Z","url":"https://github.com/sablier-labs/flow/issues/303"},{"author":"smol-ninja","body":"As per [cantina finding 11](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/11), storing snapshot debt as a 18 decimal value can increase precision.\r\n\r\nNote: use `uint256` for `snapshotDebt` as per https://github.com/sablier-labs/flow/discussions/297#discussioncomment-10935202.","createdAt":"2024-10-13T14:04:10Z","labels":["priority: 0","type: perf","effort: medium","work: clear"],"number":302,"repository":"sablier-labs/flow","state":"closed","title":"Store snapshot debt as a 18 decimal value","type":"issue","updatedAt":"2024-10-16T13:49:46Z","url":"https://github.com/sablier-labs/flow/issues/302"},{"author":"smol-ninja","body":"As per [cantina finding 9](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/9), an integrator will most likely need to know the exact amount transferred to the recipient as well as protocol fee charged.\r\n\r\nThus, we should return both amounts in `withdraw` and `withdrawMax`.","createdAt":"2024-10-13T14:01:33Z","labels":["priority: 0","effort: low","type: feature","work: clear"],"number":301,"repository":"sablier-labs/flow","state":"closed","title":"Return withdrawn amount and protocol fee in withdraw functions","type":"issue","updatedAt":"2024-10-14T13:34:39Z","url":"https://github.com/sablier-labs/flow/issues/301"},{"author":"smol-ninja","body":"As per [Cantina finding 7](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/7), deposits are susceptible of reorg attacks. Thus, include `sender` and `recipient` in `deposit`'s input parameters. This would avoid stealing funds from depositors during chain re-orgs.","createdAt":"2024-10-13T13:58:49Z","labels":["priority: 0","type: refactor","effort: medium","work: clear"],"number":300,"repository":"sablier-labs/flow","state":"closed","title":"include `sender` and `recipient` in deposit","type":"issue","updatedAt":"2024-10-17T11:09:52Z","url":"https://github.com/sablier-labs/flow/issues/300"},{"author":"smol-ninja","body":"Some of the getters in `SablierFlowBase` simply read and return storage values and so do not have their own concrete tests. As a consequence of which, we missed adding `notNull` to `isTransferable` function. This was discovered during [Cantina audit](https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/2).\r\n\r\nTo avoid similar errors in the future, we should concrete tests for those getters too.","createdAt":"2024-10-13T13:45:55Z","labels":["effort: low","priority: 2","work: clear","type: test"],"number":299,"repository":"sablier-labs/flow","state":"closed","title":"Concrete tests for `SablierFlowBase` getters","type":"issue","updatedAt":"2024-10-29T17:05:06Z","url":"https://github.com/sablier-labs/flow/issues/299"},{"author":"smol-ninja","body":"### Findings\r\n1. https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/1\r\n2. https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/2\r\n3. https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/3\r\n4. https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/4\r\n5. https://cantina.xyz/code/99ae802b-f05c-4e36-a1d1-240d5146649c/findings/8\r\n\r\n### Recommandation\r\n1. Use `uint256` for `scaledOngoingDebt` and for all values until its absolutely necessary to downcast to amounts\r\n2. Add `notNull` to `isTransferable` getter\r\n3. Use `uint256` for `solvencyAmount` in `depletionTimeOf()`\r\n4. Return `uint256` in `depletionTimeOf()`\r\n5. Calculate depletion time when `totalDebt == balance`","createdAt":"2024-10-09T15:58:19Z","labels":["priority: 0","type: refactor","effort: low","work: clear"],"number":295,"repository":"sablier-labs/flow","state":"closed","title":"Change datatypes as per Cantina recommendation","type":"issue","updatedAt":"2024-10-14T13:20:44Z","url":"https://github.com/sablier-labs/flow/issues/295"},{"author":"smol-ninja","body":"- Fork test: https://github.com/sablier-labs/flow/actions/runs/11141128818/job/30961427630?pr=277\r\n- Invariant test: https://github.com/sablier-labs/flow/actions/runs/11183773875/job/31093145916","createdAt":"2024-10-05T15:23:32Z","labels":["effort: high","priority: 0","type: bug","work: complicated"],"number":289,"repository":"sablier-labs/flow","state":"closed","title":"Investigate failing tests","type":"issue","updatedAt":"2024-10-20T17:10:40Z","url":"https://github.com/sablier-labs/flow/issues/289"},{"author":"PaulRBerg","body":"Between nothing and the Sablier logo, it'd be better to display the latter.\r\n\r\nThe SVG logo can be obtained from https://github.com/sablier-labs/branding.","createdAt":"2024-10-02T15:57:09Z","labels":["priority: 1","effort: low","type: feature","work: clear"],"number":284,"repository":"sablier-labs/flow","state":"closed","title":"Return Sablier Logo SVG in NFT descriptor","type":"issue","updatedAt":"2024-10-04T15:27:59Z","url":"https://github.com/sablier-labs/flow/issues/284"},{"author":"PaulRBerg","body":"The complicated explanations in the README, DIAGRAM, and the PRECISION-FILE should be moved to the docs site.\r\n\r\nThe README should contain simple, high-level explanations of how the protocol works, and provide some examples.","createdAt":"2024-10-02T14:15:13Z","labels":["priority: 1","effort: medium","type: docs","work: clear"],"number":283,"repository":"sablier-labs/flow","state":"closed","title":"Move technical explanations to the docs site","type":"issue","updatedAt":"2024-10-06T14:40:08Z","url":"https://github.com/sablier-labs/flow/issues/283"},{"author":"PaulRBerg","body":"As explained in:\r\n\r\n- https://github.com/sablier-labs/flow/discussions/271\r\n- https://github.com/sablier-labs/flow/discussions/280","createdAt":"2024-10-01T12:19:38Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":281,"repository":"sablier-labs/flow","state":"closed","title":"Remove zero address check for sender","type":"issue","updatedAt":"2024-10-01T12:52:27Z","url":"https://github.com/sablier-labs/flow/issues/281"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/flow/discussions/278","createdAt":"2024-10-01T11:02:53Z","labels":["priority: 0","type: refactor","effort: low","work: clear"],"number":279,"repository":"sablier-labs/flow","state":"closed","title":"Remove zero check for rps in create","type":"issue","updatedAt":"2024-10-02T13:09:09Z","url":"https://github.com/sablier-labs/flow/issues/279"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/269 and https://github.com/sablier-labs/flow/discussions/271.\r\n\r\n### Tasks\r\n\r\n- [x] Remove `isPaused` from storage and implement runtime check: `rps == 0`\r\n- [x] Update `snapshotTime` in `pause` and `void`","createdAt":"2024-09-30T11:26:08Z","labels":["priority: 0","type: refactor","effort: low","work: clear"],"number":276,"repository":"sablier-labs/flow","state":"closed","title":"Remove `isPaused` from storage slot and update `snapshotTime` in `pause` and `void`","type":"issue","updatedAt":"2024-10-02T13:09:08Z","url":"https://github.com/sablier-labs/flow/issues/276"},{"author":"smol-ninja","body":"We now have a common pattern at multiple places where the following struct is used to avoid stack too deep error. We should look into DRY'ifying the same, if possible.\r\n\r\n```solidity\r\nstruct Vars {\r\n    IERC20 token;\r\n    uint40 previousSnapshotTime;\r\n    uint128 previousTotalDebt;\r\n    uint256 previousAggregateAmount;\r\n    uint128 expectedProtocolRevenue;\r\n    uint256 initialTokenBalance;\r\n    uint40 expectedSnapshotTime;\r\n    uint128 expectedTotalDebt;\r\n    uint128 expectedStreamBalance;\r\n    uint256 expectedTokenBalance;\r\n}\r\n```","createdAt":"2024-09-30T10:25:10Z","labels":["effort: medium","work: clear","priority: 3","type: test"],"number":275,"repository":"sablier-labs/flow","state":"closed","title":"DRY'ify `Vars` struct","type":"issue","updatedAt":"2024-10-14T13:34:39Z","url":"https://github.com/sablier-labs/flow/issues/275"},{"author":"PaulRBerg","body":"After #263 gets merged, let's add an input JSON file for defining test ranges, and modify the relevant tests like so:\r\n\r\n1. If the JSON file is not present, apply the default ranges, i.e., the realistic ones that stream ~$100 per month.\r\n2. Otherwise, load the ranges from the JSON file.\r\n\r\nThen, add a new CI workflow that is scheduled to run on a weekly basis, which creates a JSON file with unrealistic test ranges.\r\n\r\nThis approach achieves the best of both worlds — focusing on realistic scenarios for the most part, but also proving that the protocol doesn't break when the payment rates are extreme.","createdAt":"2024-09-27T13:46:27Z","labels":["effort: high","priority: 2","work: clear","type: test"],"number":272,"repository":"sablier-labs/flow","state":"closed","title":"Input JSON file for test ranges + weekly CI workflow","type":"issue","updatedAt":"2025-04-22T10:37:42Z","url":"https://github.com/sablier-labs/flow/issues/272"},{"author":"smol-ninja","body":"cc @andreivladbrg we will need a `SECURITY.md` file to include assumptions that we make for Flow.","createdAt":"2024-09-26T09:56:58Z","labels":["priority: 1","effort: medium","type: docs","work: clear"],"number":268,"repository":"sablier-labs/flow","state":"closed","title":"Add SECURITY.md","type":"issue","updatedAt":"2024-10-06T15:50:18Z","url":"https://github.com/sablier-labs/flow/issues/268"},{"author":"andreivladbrg","body":"","createdAt":"2024-09-25T15:13:03Z","labels":["priority: 1","effort: medium","type: docs","work: clear"],"number":265,"repository":"sablier-labs/flow","state":"closed","title":"Update `diagrams.md`","type":"issue","updatedAt":"2024-10-01T11:39:47Z","url":"https://github.com/sablier-labs/flow/issues/265"},{"author":"smol-ninja","body":"Refer to https://github.com/sablier-labs/flow/pull/263.","createdAt":"2024-09-25T13:55:03Z","labels":["priority: 1","effort: medium","type: test","work: complicated"],"number":264,"repository":"sablier-labs/flow","state":"closed","title":"Fix tests failing due to realistic range for rps","type":"issue","updatedAt":"2024-09-27T13:51:26Z","url":"https://github.com/sablier-labs/flow/issues/264"},{"author":"smol-ninja","body":"This would be useful to identify sequences for failed invariants, if any.\r\n\r\nRefer to https://github.com/sablier-labs/v2-core/blob/main/.github/workflows/ci-deep.yml","createdAt":"2024-09-19T19:36:39Z","labels":["priority: 1","effort: low","work: clear","type: ci"],"number":252,"repository":"sablier-labs/flow","state":"closed","title":"Create Deep CI for Flow","type":"issue","updatedAt":"2024-09-20T11:56:47Z","url":"https://github.com/sablier-labs/flow/issues/252"},{"author":"smol-ninja","body":"This test would be useful to to understand the benefits that `fix/precision-issue` offer over `main`.\r\n\r\nRelated: https://gist.github.com/andreivladbrg/a57ce0db02c00f90dc842dbb6503c385","createdAt":"2024-09-19T19:32:59Z","labels":["priority: 0","effort: medium","type: test","work: complicated"],"number":251,"repository":"sablier-labs/flow","state":"closed","title":"Write a fuzz test that fails on `main` but not on `fix/precision-issue`","type":"issue","updatedAt":"2024-09-22T14:26:44Z","url":"https://github.com/sablier-labs/flow/issues/251"},{"author":"PaulRBerg","body":"Starting [Solidity v0.8.21](https://github.com/ethereum/solidity/releases/tag/v0.8.21), events can be emitted from interface files.\r\n\r\nSo we can get rid of the `Events.t.sol` file and duplicated events there and instead import the interface files from `src`.","createdAt":"2024-09-19T11:12:49Z","labels":["effort: low","work: clear","priority: 3","type: test"],"number":250,"repository":"sablier-labs/flow","state":"closed","title":"Get rid of \"Events\" helper in tests","type":"issue","updatedAt":"2024-09-30T11:42:36Z","url":"https://github.com/sablier-labs/flow/issues/250"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/243.\r\n\r\ncc @andreivladbrg for your approval as you are a big proponent of not wasting any calls during testing.","createdAt":"2024-09-17T14:50:09Z","labels":["priority: 0","effort: low","work: clear","type: test"],"number":244,"repository":"sablier-labs/flow","state":"closed","title":"Replace bound with `vm.assume` in invariant handlers","type":"issue","updatedAt":"2024-09-17T15:42:24Z","url":"https://github.com/sablier-labs/flow/issues/244"},{"author":"smol-ninja","body":"### Discussed in https://github.com/sablier-labs/flow/discussions/239\r\n\r\n## Context\r\nGiven that now we have two admin related functions: `recover` and `collectProtocolRevenue`, implement invariants that make sure that any of the admin functions don't lead to an unexpected behaviour.\r\n\r\n## Implementation\r\n1. contract `FlowAdminHandler`\r\n2. functions `collectRevenue` and `recover` in `FlowAdminHandler`\r\n3. variables `mapping (IERC20 token => uint256) protocolRevenue` and `mapping (IERC20 token => uint256) aggregateBalance` in FlowStore\r\n4. functions `token.transfer` so that invariant can make random deposits to Flow contract\r\n\r\n## Invariants\r\n1. $\\text{all stream balance sum} + \\text{revenue} = \\text{aggregate balance}$\r\n2. $\\text{aggregate balance} \\le \\text{token balance}$","createdAt":"2024-09-16T13:54:41Z","labels":["priority: 1","effort: medium","type: test","work: complicated"],"number":241,"repository":"sablier-labs/flow","state":"closed","title":"Implement `FlowAdminHandler` & invariants to test against admin functions","type":"issue","updatedAt":"2024-09-30T11:42:36Z","url":"https://github.com/sablier-labs/flow/issues/241"},{"author":"smol-ninja","body":"Related:\r\n- https://github.com/sablier-labs/flow/pull/232#discussion_r1756552059\r\n- https://github.com/sablier-labs/flow/pull/232#discussion_r1756553109\r\n- https://github.com/sablier-labs/flow/pull/234#discussion_r1773046717","createdAt":"2024-09-13T14:46:21Z","labels":["effort: medium","priority: 3","type: test","work: complicated"],"number":238,"repository":"sablier-labs/flow","state":"closed","title":"Polish withdraw tree","type":"issue","updatedAt":"2025-01-16T13:15:26Z","url":"https://github.com/sablier-labs/flow/issues/238"},{"author":"andreivladbrg","body":"We will merge this PR https://github.com/sablier-labs/flow/pull/222 without adding assert in `Helpers.calculateAmountsFromFee`.\r\n\r\n```solidity\r\n// Calculate the fee amount based on the fee percentage.\r\nfeeAmount = ud(totalAmount).mul(fee).intoUint128();\r\n\r\n// Assert that the total amount is strictly greater than the fee amount.\r\nassert(totalAmount > feeAmount);\r\n\r\n// Calculate the net amount after subtracting the fee from the total amount.\r\nnetAmount = totalAmount - feeAmount;\r\n``` \r\n\r\nThe reason is because the invariants would fail due to denormalization (we can have `time > snapshotTime`  and a `totalDebt = 0`), as there is the possibility of passing an withdraw amount of zero which would result in `totalAmount == feeAmount`. \r\n\r\nWe will include this `assert` in the withdraw amount.","createdAt":"2024-09-05T14:27:04Z","labels":["priority: 1","effort: low","type: perf","work: clear"],"number":230,"repository":"sablier-labs/flow","state":"closed","title":"Add assert statement in `Helpers.calculateAmountsFromFee`","type":"issue","updatedAt":"2024-09-10T21:35:24Z","url":"https://github.com/sablier-labs/flow/issues/230"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/issues/214","createdAt":"2024-09-05T11:57:27Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":229,"repository":"sablier-labs/flow","state":"closed","title":"Remove `createAndDepositViaBroker`","type":"issue","updatedAt":"2024-09-09T11:40:40Z","url":"https://github.com/sablier-labs/flow/issues/229"},{"author":"PaulRBerg","body":"See https://x.com/limes_eth/status/1889040644355625460","createdAt":"2025-02-13T19:10:04Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":69,"repository":"sablier-labs/airdrops","state":"open","title":"ENS subdomain for Merkle Airdrops deployments","type":"issue","updatedAt":"2025-02-13T19:10:16Z","url":"https://github.com/sablier-labs/airdrops/issues/69"},{"author":"smol-ninja","body":"The idea is to include it in the constructor of `MerkleFactory` so that a minimum value can be set at the time of deployment.","createdAt":"2025-02-10T21:09:07Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":67,"repository":"sablier-labs/airdrops","state":"closed","title":"Include `minimumFee` in the constructor of `MerkleFactory`","type":"issue","updatedAt":"2025-02-20T00:13:11Z","url":"https://github.com/sablier-labs/airdrops/issues/67"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/107,\n\n1. Declare an oracle variable of type `address` in Factory, optionally can be set through the constructor of Factory contract.\n2. Write function to grant permission to the Factory admin to change oracle address.\n3. At the time of campaign deployment, set the Oracle address as an immutable variable in Merkle contract.\n4. During claim:\n    1. Use the oracle to fetch price of native token.\n    2. Calculate fee in native token using price and dollar fee stored\n    3. Ensure `msg.value` exceeds the fee\n\nIn the same PR, lets include the changes requested in https://github.com/sablier-labs/company-discussions/discussions/106,\n\n1. At the time of campaign deployment, if the oracle address is `address(0)`, set the fee as 0.","createdAt":"2025-02-10T20:37:33Z","labels":["effort: medium","priority: 1","type: feature","work: complicated"],"number":66,"repository":"sablier-labs/airdrops","state":"closed","title":"Integrate price oracles into Merkle contracts","type":"issue","updatedAt":"2025-02-28T18:40:21Z","url":"https://github.com/sablier-labs/airdrops/issues/66"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/airdrops/discussions/57, each campaign should have its own dedicated factory.\n\n- [x] Create one factory for each campaign. Suggested names:\n    1. `SablierMerkleLLFactory`\n    2. `SablierMerkleLTFactory`\n    3. `SablierMerkleInstantFactory`\n    4. `SablierMerkleVCAFactory`\n- [x] Create an abstract factory contract called `SablierMerkleFactory` which will be inherited by all the above factory contracts.  This will contain common logic.\n- [x] Create separate run scripts for each factory","createdAt":"2025-02-10T20:22:35Z","labels":["effort: high","priority: 1","type: refactor","work: clear"],"number":65,"repository":"sablier-labs/airdrops","state":"closed","title":"Write Factory for each Campaign","type":"issue","updatedAt":"2025-02-20T00:13:08Z","url":"https://github.com/sablier-labs/airdrops/issues/65"},{"author":"smol-ninja","body":"What if we move `constant` and `immutable` variables from `Defaults` to `Constants` contract? This can remove several redundant lines from the code where we have to set the default value onto a local variable to make `expectRevert` work.\n\nFor example,\n\n```solidity\nuint256 index1 = defaults.INDEX1();\nuint128 amount = defaults.CLAIM_AMOUNT();\nbytes32[] memory merkleProof = defaults.index1Proof();\nuint256 fee = defaults.FEE();\n\nvm.expectRevert(abi.encodeWithSelector(Errors.SablierMerkleBase_InsufficientFeePayment.selector, 0, fee));\nmerkleBase.claim{ value: 0 }(index1, users.recipient1, amount, merkleProof);\n```\n\nwould become\n\n```solidity\nbytes32[] memory merkleProof = defaults.index1Proof();\n\nvm.expectRevert(abi.encodeWithSelector(Errors.SablierMerkleBase_InsufficientFeePayment.selector, 0, FEE));\nmerkleBase.claim{ value: 0 }(INDEX1, users.recipient1, CLAIM_AMOUNT, merkleProof);\n```\n\ncc @sablier-labs/evm.","createdAt":"2025-02-10T15:34:25Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":63,"repository":"sablier-labs/airdrops","state":"closed","title":"Move variables from `Defaults` to `Constants`","type":"issue","updatedAt":"2025-02-20T15:52:30Z","url":"https://github.com/sablier-labs/airdrops/issues/63"},{"author":"smol-ninja","body":"Since deep tests are run on every Sunday, we can run fork tests only on Monday and Wednesday (total 3 times a week).","createdAt":"2025-02-07T12:56:02Z","labels":["effort: low","priority: 2","type: ci","work: clear"],"number":61,"repository":"sablier-labs/airdrops","state":"closed","title":"Update workflow schedule for fork tests","type":"issue","updatedAt":"2025-02-10T17:40:58Z","url":"https://github.com/sablier-labs/airdrops/issues/61"},{"author":"PaulRBerg","body":"As originally suggested [here](https://github.com/sablier-labs/company-discussions/discussions/102#discussioncomment-11996940) by @andreivladbrg, `minimumFee` would be a much better name than `defaultFee`:\n\nhttps://github.com/sablier-labs/airdrops/blob/1c19bd51449a62baadda656b91cd4c04479f1384/src/SablierMerkleFactory.sol#L48\n\nSimilarly, in the `SablierMerkleBase`, we should rename this to `MINIMUM_FEE`:\n\nhttps://github.com/sablier-labs/airdrops/blob/1c19bd51449a62baadda656b91cd4c04479f1384/src/abstracts/SablierMerkleBase.sol#L38\n\nI'm suggesting this change because [we are considering implementing a gas-based protocol fee in Lockup and Flow](https://github.com/sablier-labs/company-discussions/discussions/105).","createdAt":"2025-02-07T11:15:16Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":60,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename \"defaultFee\" to \"minimumFee\"","type":"issue","updatedAt":"2025-02-14T13:19:57Z","url":"https://github.com/sablier-labs/airdrops/issues/60"},{"author":"PaulRBerg","body":"Calculate $1 in the native gas token of the chain, and set it as the minimuk fee at deployment time.\n\nRelated: https://github.com/sablier-labs/multichain-deployer/issues/13.","createdAt":"2025-02-07T11:00:34Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":59,"repository":"sablier-labs/airdrops","state":"closed","title":"Set the minimum fee at deployment time","type":"issue","updatedAt":"2025-02-15T11:59:14Z","url":"https://github.com/sablier-labs/airdrops/issues/59"},{"author":"andreivladbrg","body":"As discussed here https://github.com/sablier-labs/lockup/issues/1125, the repo is created: https://github.com/sablier-labs/evm-utils/\n\nWe will need to remove the respective logic from here.","createdAt":"2025-01-30T00:01:03Z","labels":["effort: medium","priority: 2","type: refactor","work: clear"],"number":52,"repository":"sablier-labs/airdrops","state":"closed","title":"Update contracts to use the new EVM utils repo","type":"issue","updatedAt":"2025-02-24T08:31:39Z","url":"https://github.com/sablier-labs/airdrops/issues/52"},{"author":"smol-ninja","body":"## Context\n`SablierMerkleFactory` has grown significantly over time and is nearing the contract size limit. During the previous release, it was at 24.4 kB (with 1000 runs), which is only 164 B below the limit. This will create issues during future updates, as even minor changes will push it over the limit.\n\n## Some possible approaches\n\n- Refactoring existing code by removing `string` data type or changing them into fixed size data type, if possible.\n- Moving non-essential logic to external libraries or contracts, if possible.\n- Look into architectural changes.\n- https://github.com/sablier-labs/airdrops/discussions/57","createdAt":"2025-01-28T17:28:51Z","labels":["effort: epic","priority: 2","type: refactor","work: complicated"],"number":50,"repository":"sablier-labs/airdrops","state":"closed","title":"Investigate how to reduce the contract size for `SablierMerkleFactory`","type":"issue","updatedAt":"2025-02-11T20:02:25Z","url":"https://github.com/sablier-labs/airdrops/issues/50"},{"author":"smol-ninja","body":"Add the new release in the `CHANGELOG.md`","createdAt":"2025-01-17T15:58:01Z","labels":["effort: low","priority: 0","type: docs","work: clear"],"number":45,"repository":"sablier-labs/airdrops","state":"closed","title":"Update `CHANGELOG` file","type":"issue","updatedAt":"2025-01-20T13:45:24Z","url":"https://github.com/sablier-labs/airdrops/issues/45"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/85, implement a new merkle contract with the following features:\n- The amount of airdropped token depends on the claim timestamp.\n- Only works for ranged streams i.e. all streams begin at the same time.\n- Enforce expiry to be greater than end time of the vesting schedule.\n- Nomenclatures TBD.\n\n```solidity\nfunction createMerkleVCA(\n    MerkleBase.ConstructorParams memory baseParams,\n    uint40 startTime,\n    uint40 endTime,\n    uint256 aggregateAmount,\n    uint256 recipientCount\n)\n```\n\n### Calculation of airdropped amount\n\n```math\n\\text{airdrop amount} = \\text{claim amount} \\cdot \\frac{\\text{block timestamp} - \\text{start time}}{\\text{total duration}}\n```\n\n### Some questions\n1. Should it have start and cliff unlocks?\n2. What should the contract be called?","createdAt":"2025-01-10T07:48:40Z","labels":["effort: medium","priority: 1","type: feature","work: complicated"],"number":43,"repository":"sablier-labs/airdrops","state":"closed","title":"Implement `MerkleVCA` for campaigns with variable claim amount","type":"issue","updatedAt":"2025-02-18T17:10:17Z","url":"https://github.com/sablier-labs/airdrops/issues/43"},{"author":"PaulRBerg","body":"Implement the following mapping (name is TBD):\n\n```solidity\nmapping(address recipient => uint256[] streamIds) claimed;\n```\n\nTo make it possible to reverse index streams claimed through an airdrop.\n\n### Discussed in https://github.com/sablier-labs/airdrops/discussions/31\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** February  1, 2024</sup>","createdAt":"2025-01-06T10:23:13Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":40,"repository":"sablier-labs/airdrops","state":"closed","title":"Implement mapping between addresses and claimed streams","type":"issue","updatedAt":"2025-02-20T15:56:06Z","url":"https://github.com/sablier-labs/airdrops/issues/40"},{"author":"PaulRBerg","body":"When `end time <= block timestamp`, transfer the airdrop amount directly to the user, without creating a stream.\n\ncc @sablier-labs/frontend, this may have implications for the informatinal tooltips in the UI\n\n### Discussed in https://github.com/sablier-labs/airdrops/discussions/33\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** December 23, 2024</sup>","createdAt":"2025-01-05T11:22:05Z","labels":["effort: high","priority: 1","type: feature","work: clear"],"number":37,"repository":"sablier-labs/airdrops","state":"closed","title":"Immediately transfer tokens when the vesting period has ended","type":"issue","updatedAt":"2025-02-28T19:02:00Z","url":"https://github.com/sablier-labs/airdrops/issues/37"},{"author":"PaulRBerg","body":"Address [Cantina's finding 13](https://cantina.xyz/code/52d6aa1e-6aa4-4e73-96ed-6077652cf0f1/findings/13) by removing the assert here:\n\nhttps://github.com/sablier-labs/airdrops/blob/7d245165a02de247aaf5a5a879e8abe68e2f19ad/src/SablierMerkleLT.sol#L209\n\nThe assertion is superfluous because the stream creation will fill anyway in Lockup if `calculatedAmountsSum > claimAmount`.","createdAt":"2025-01-04T19:45:03Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":36,"repository":"sablier-labs/airdrops","state":"closed","title":"Remove \"assert\" in \"_calculateStartTimeAndTranches\"","type":"issue","updatedAt":"2025-01-07T22:08:31Z","url":"https://github.com/sablier-labs/airdrops/issues/36"},{"author":"PaulRBerg","body":"**UPDATE**: we don't need to implement this. See my [comment](https://github.com/sablier-labs/airdrops/issues/35#issuecomment-2575341905) below.\n\nAddress [Cantina finding 12](https://cantina.xyz/code/52d6aa1e-6aa4-4e73-96ed-6077652cf0f1/findings/12) by implementing an abort function in the Merkle abstract contract.\n\nThe function should take an array of recipient addresses as inputs, and it should allow the campaign creator to effectively cancel the airstreams for particular users.\n\nThe `_claim` function should be modified accordingly to check for cancelations.","createdAt":"2025-01-04T19:22:33Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":35,"repository":"sablier-labs/airdrops","state":"closed","title":"Abort function in Merkle vesting campaigns","type":"issue","updatedAt":"2025-01-07T17:19:41Z","url":"https://github.com/sablier-labs/airdrops/issues/35"},{"author":"andreivladbrg","body":"### Problem\n\nWhen an airdrop campaign is created, it is very likely that not everyone will receive the same amount airdropped.\n\nWhich means we can have:\n- A gets 100K\n- B gets 10K\n- C gets 10\n\nThe issue arises because the new unlock amounts variable stored in the `Schedule` struct is globally set for each stream.\n\nhttps://github.com/sablier-labs/airdrops/blob/aa45dabb6c82c7cbf7ad02411e143bbe206f4a26/src/SablierMerkleLL.sol#L53-L54\n\nhttps://github.com/sablier-labs/airdrops/blob/aa45dabb6c82c7cbf7ad02411e143bbe206f4a26/src/types/DataTypes.sol#L48-L54\n\nThis can result in situations where a creator wants to set a cliff amount of 1000 for A but only 1 for C, which is problematic. Furthermore, if the cliff amount exceeds the minimum amount airdropped, the stream cannot be created.\n\n\n### Solution\n\nThe solution is to use percentage-based variables in the Schedule struct instead of amount-based ones, similar to how [TrancheWithPercentage](https://github.com/sablier-labs/airdrops/blob/aa45dabb6c82c7cbf7ad02411e143bbe206f4a26/src/types/DataTypes.sol#L64C12-L64C33) works.\n\n---\n\nCredits to @razgraf for this finding.","createdAt":"2024-12-20T13:08:19Z","labels":["effort: medium","priority: 0","type: bug","work: complex"],"number":27,"repository":"sablier-labs/airdrops","state":"closed","title":"Change the amount based variables in `MerkleLL.Schedule` to percentages","type":"issue","updatedAt":"2024-12-21T12:10:24Z","url":"https://github.com/sablier-labs/airdrops/issues/27"},{"author":"andreivladbrg","body":"Similar to [lockup](https://github.com/sablier-labs/v2-core/blob/staging/script/DeploymentLogger.s.sol), it would be useful to have that kind of contract here as well","createdAt":"2024-12-12T16:30:54Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":25,"repository":"sablier-labs/airdrops","state":"closed","title":"Add deployment logger and default admin mapping","type":"issue","updatedAt":"2025-01-29T13:09:42Z","url":"https://github.com/sablier-labs/airdrops/issues/25"},{"author":"andreivladbrg","body":"Similar to: https://github.com/sablier-labs/v2-core/issues/1103","createdAt":"2024-12-02T13:56:23Z","labels":["effort: medium","priority: 2","stale","type: build","work: clear"],"number":22,"repository":"sablier-labs/airdrops","state":"closed","title":"Get rid of \"optimized\" foundry profiles","type":"issue","updatedAt":"2025-06-22T03:31:15Z","url":"https://github.com/sablier-labs/airdrops/issues/22"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/airdrops/issues/1#issuecomment-2501609932:\n\n- [x] Add separate shared parameters struct for `createMerkleLL` and `createMerkleLT` functions. Then DRY'ify their internal logic.\n- [x] Separate out the parameters of `createMerkleInstant` function and remove its dependency from the current `ConstructorParams` struct.\n\nThe objective is to separate out `createMerkleInstant` input parameters from `createMerkleLL` and `createMerkleLT`. Right now, there are a tons of parameters shared between `createMerkleLL` and `createMerkleLT` which can be DRY'ified through a common struct between them. However, due to them sharing it with `createMerkleInstant`, its not possible.","createdAt":"2024-11-26T18:29:13Z","labels":["effort: medium","priority: 2","type: refactor","work: complicated"],"number":16,"repository":"sablier-labs/airdrops","state":"closed","title":"Separate out parameters of `createMerkleInstant` function","type":"issue","updatedAt":"2025-02-12T15:23:36Z","url":"https://github.com/sablier-labs/airdrops/issues/16"},{"author":"PaulRBerg","body":"Refactor the `withdrawFees` function to allow any account to call it, and always transfer the ETH fees to the contract admin. The `to` parameter is removed.\r\n\r\nRationale:\r\n\r\n- Allowing any account to claim makes it possible to work with fee collector services such as [Mimic](https://x.com/mimicfi/status/1750917624832119150?s=46)\r\n- The contract admin will be a multisig, which would make withdrawals cumbersome to perform","createdAt":"2024-11-21T12:07:17Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":12,"repository":"sablier-labs/airdrops","state":"closed","title":"Refactor \"withdrawFees\" to allow anyone to call it","type":"issue","updatedAt":"2024-11-22T23:04:22Z","url":"https://github.com/sablier-labs/airdrops/issues/12"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/airdrops/pull/5#discussion_r1850948897\r\n\r\nhttps://x.com/PaulRBerg/status/1849765766129737964","createdAt":"2024-11-21T09:28:13Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":11,"repository":"sablier-labs/airdrops","state":"closed","title":"Use Etherscan V2 API keys","type":"issue","updatedAt":"2024-11-30T20:03:46Z","url":"https://github.com/sablier-labs/airdrops/issues/11"},{"author":"PaulRBerg","body":"To avoid having to maintain the code + benefit from the latest updates in Murky.\r\n\r\nhttps://github.com/sablier-labs/airdrops/pull/5#discussion_r1850989530","createdAt":"2024-11-21T09:25:40Z","labels":["effort: low","priority: 2","type: build","work: clear"],"number":10,"repository":"sablier-labs/airdrops","state":"closed","title":"Add Murky as dev dependency","type":"issue","updatedAt":"2024-11-27T17:14:28Z","url":"https://github.com/sablier-labs/airdrops/issues/10"},{"author":"PaulRBerg","body":"The security bug bounty in the `SECURITY.md` file is duplicated across this repo, Lockup, and Flow.\r\n\r\nTo lower the maintenance cost, we should move it to Notion, and add notices in the `SECURITY.md` files that the bug bounty has been moved to Notion.","createdAt":"2024-11-20T18:40:38Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":9,"repository":"sablier-labs/airdrops","state":"closed","title":"Move bug bounty to Notion to avoid having to maintain it in multiple places","type":"issue","updatedAt":"2025-03-13T14:54:22Z","url":"https://github.com/sablier-labs/airdrops/issues/9"},{"author":"PaulRBerg","body":"","createdAt":"2024-11-20T18:37:43Z","labels":["effort: high","priority: 2","type: test","work: complicated"],"number":8,"repository":"sablier-labs/airdrops","state":"closed","title":"Write fuzz tests","type":"issue","updatedAt":"2025-03-19T13:37:47Z","url":"https://github.com/sablier-labs/airdrops/issues/8"},{"author":"PaulRBerg","body":"","createdAt":"2024-11-20T18:37:22Z","labels":["effort: high","priority: 2","type: test","work: complicated"],"number":7,"repository":"sablier-labs/airdrops","state":"open","title":"Write invariant tests","type":"issue","updatedAt":"2025-03-12T10:13:28Z","url":"https://github.com/sablier-labs/airdrops/issues/7"},{"author":"PaulRBerg","body":"Use the \"Dark with Shadow\" font on [textfancy.com/text-art/](https://textfancy.com/text-art/).","createdAt":"2024-11-20T18:32:10Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":6,"repository":"sablier-labs/airdrops","state":"closed","title":"ASCII art in Merkle contracts","type":"issue","updatedAt":"2024-11-26T21:33:52Z","url":"https://github.com/sablier-labs/airdrops/issues/6"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/v2-core/discussions/1068</sup>\r\n\r\nMake a separate repo for Airdrops and move Merkle lockup contracts along with their test suites in the new repo.","createdAt":"2024-11-15T09:53:51Z","labels":["effort: epic","priority: 0","type: refactor","work: clear"],"number":4,"repository":"sablier-labs/airdrops","state":"closed","title":"Create a separate repo for Airdrops","type":"issue","updatedAt":"2024-11-21T11:14:06Z","url":"https://github.com/sablier-labs/airdrops/issues/4"},{"author":"smol-ninja","body":"","createdAt":"2024-11-15T09:12:04Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":3,"repository":"sablier-labs/airdrops","state":"closed","title":"Rename `test` dir to `tests` (plural)","type":"issue","updatedAt":"2024-11-21T11:14:07Z","url":"https://github.com/sablier-labs/airdrops/issues/3"},{"author":"smol-ninja","body":"Related https://github.com/sablier-labs/v2-core/issues/991","createdAt":"2024-11-15T09:11:36Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":2,"repository":"sablier-labs/airdrops","state":"closed","title":"Refactor asset terminology to tokens","type":"issue","updatedAt":"2024-11-21T11:14:07Z","url":"https://github.com/sablier-labs/airdrops/issues/2"},{"author":"smol-ninja","body":"Related https://github.com/sablier-labs/v2-core/issues/1086","createdAt":"2024-11-15T09:10:58Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":1,"repository":"sablier-labs/airdrops","state":"closed","title":"Account for `string` in Create parameters","type":"issue","updatedAt":"2024-11-27T16:15:50Z","url":"https://github.com/sablier-labs/airdrops/issues/1"},{"author":"razgraf","body":"Opening this to track progress on a possible HTTP permission impersonation exploit. \r\n\r\nThis is a low-effort clickjacking exploit where someone could embed our app into a website and possibly control the metamask pop-up such that they gain access to the user's wallet. Seems hard to achieve especially with the way iframes work (AFAIK it creates an unreachable context such that the parent container cannot talk to the iframe itself) but still a valid threat long-term.\r\n\r\nWe'd have to update some cors-like flags. Here's vercel's [docs](https://nextjs.org/docs/advanced-features/security-headers#x-frame-options) on this matter and the official MDN [X-Frame docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options). The latest standard is to play with [CSP:frame-ancestors (MDN)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors). Unfortunately this isn't supported as a meta tag (the easy way). Some examples [here](https://www.stackhawk.com/blog/react-content-security-policy-guide-what-it-is-and-how-to-enable-it/).\r\n\r\nThe next best way to do it seems to be [Enabling CORS using vercel.json](https://vercel.com/support/articles/how-to-enable-cors#enabling-cors-using-vercel.json) at least for a react app.\r\n\r\n\r\n![Screenshot 2022-07-08 at 16 20 12](https://user-images.githubusercontent.com/15740806/177999949-64cdd104-450e-402d-b61e-b9a75c3fdda7.png)\r\n","createdAt":"2022-07-08T13:38:29Z","labels":["bug"],"number":214,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Possible low-effort HTTP/CSP impersonation of the frontend app","type":"issue","updatedAt":"2024-12-21T10:45:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/214"},{"author":"razgraf","body":"The cancel stream sidebar should not have a submit button after the stream ends.\r\n\r\nBug reported by the Ronin team.\r\n\r\n![Screenshot 2022-07-07 at 14 01 17](https://user-images.githubusercontent.com/15740806/177758521-3166cbe4-20de-4f69-9522-06180744ec52.png)\r\n","createdAt":"2022-07-07T11:01:47Z","labels":["bug"],"number":212,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"There shouldn't be a \"submit\" button in the cancel-stream sidebar after the stream ends","type":"issue","updatedAt":"2024-12-21T10:46:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/212"},{"author":"razgraf","body":"Once we receive our grant from The Graph we should start using the decentralized subgraph for Mainnet queries. In order to do that we'll have to create an API key and probably fund the account holding it with $GRT.\r\n\r\nThe new subgraph can be found [here](https://thegraph.com/explorer/subgraph?id=A5XzhYZ4muyRegVTYmwWbCbKWvD4LTWqac43CEGTEGdK&view=Overview).\r\nThe ownership NFT of this subgraph has been sent by Max to the multisig (`0x5cE95bff1297dADBDcF9929a10Bd02BDfab0DCC6`)","createdAt":"2022-07-06T16:12:41Z","labels":["feature"],"number":210,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use the decentralized subgraph for mainnet","type":"issue","updatedAt":"2024-12-21T10:46:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/210"},{"author":"PaulRBerg","body":"As reported by @razgraf in https://github.com/sablierhq/frontend/pull/205, the stream creation machine fails to create the 2nd transaction on Ronin and Rinkeby.\r\n\r\nIt is specifically this code that causes the error:\r\n\r\nhttps://github.com/sablierhq/frontend/blob/23e1b182ef34f90c76a45267b2e35ee78dc20fb0/packages/machines/src/createStreamMachine.js#L61-L82\r\n\r\nI have opened this issue to investigate this behavior and see how we could make the code work on Ronin and Rinkeby. If possible, it would be great if we could keep the current approach of not doing the approval and the create stream tx sequentially. It's a much better UX to sign them at once.\r\n\r\nRelated: https://github.com/ethers-io/ethers.js/discussions/1767","createdAt":"2022-07-04T17:22:39Z","labels":["bug"],"number":208,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Investigate why the create stream machine fails to create the 2nd transaction on Ronin and Rinkeby","type":"issue","updatedAt":"2022-07-05T11:00:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/208"},{"author":"PaulRBerg","body":"While debugging #205, I stumbled upon this error while trying to withdraw from a freshly created on the Ronin chain:\r\n\r\n> An unexpected error occurred\r\n\r\n~~It turned out that the issue was that I didn't have any $RON in the wallet I tried to withdraw with. Obviously this was a silly mistake on my end, but~~ I think that this is a fairly common scenario among Sablier users (think about recipients who are introduced to DeFi apps via Sablier!).\r\n\r\nWe should detect if the user's balance is zero and display a bespoke error if it is.\r\n\r\n**Update**: no, even with the wallet funded, I'm still getting an error trying to withdraw on Ronin. But that is irrelevant for the purposes of this issue.","createdAt":"2022-06-24T08:51:10Z","labels":["enhancement"],"number":206,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Detect if the user has a zero native currency balance and display a bespoke error if so","type":"issue","updatedAt":"2024-12-21T10:46:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/206"},{"author":"PaulRBerg","body":"Vercel has finally released this feature:\r\n\r\nhttps://vercel.com/changelog/access-tokens-can-now-be-scoped-to-teams\r\n\r\nSee discussion in:\r\n\r\nhttps://github.com/vercel/vercel/issues/856","createdAt":"2022-06-14T07:23:22Z","labels":["enhancement"],"number":204,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Switch our Vercel token to be the team's token","type":"issue","updatedAt":"2024-12-21T10:46:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/204"},{"author":"maxdesalle","body":"A lot of our support requests come from users wondering why the stream they just created doesn't appear on the user interface. \r\n\r\nWe could add an informational message about it right after a stream is created on BSC and Polygon (which I think are the two networks where this problem occurs).","createdAt":"2022-04-13T11:23:10Z","labels":["enhancement"],"number":203,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add an informational message after stream creation to warn about slow subgraphs","type":"issue","updatedAt":"2024-12-21T10:46:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/203"},{"author":"PaulRBerg","body":"Steps:\r\n\r\n1. Open MetaMask Mobile on your phone\r\n2. Go to [pay.sablier.finance](https://pay.sablier.finance)\r\n3. Try to create a stream (make sure that you've not approved the ERC-20 transfer already)\r\n4. You should see an \"Internal JSON-RPC error\" at the bottom of the screen.","createdAt":"2022-03-24T16:20:26Z","labels":["bug"],"number":202,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"Internal JSON-RPC error\" on MetaMask Mobile","type":"issue","updatedAt":"2024-12-21T10:46:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/202"},{"author":"PaulRBerg","body":"`react-apollo` and all other related packages [have been migrated to `@apollo/client`](https://www.apollographql.com/docs/react/migrating/apollo-client-3-migration/). ","createdAt":"2022-03-24T15:35:22Z","labels":["enhancement"],"number":201,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Migrate to \"@apollo/client\"","type":"issue","updatedAt":"2024-12-21T10:46:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/201"},{"author":"PaulRBerg","body":"Commit https://github.com/sablierhq/sablier-frontend/commit/06fdc4aa1ff02418c511e16c318a80fffe6ef23c added a huge list of chains in our repository.\r\n\r\nThis is guaranteed to be a chore in the future, that is, maintaining it will be a pain in the ass. It will be much easier to fetch this chain list dynamically from this URL:\r\n\r\nhttps://chainid.network/chains.json\r\n\r\n~Even if it's us who ends up building that package, having the chain list as a separate package is still desirable due to the principle of separation of concerns. The frontend repo is already massive.~","createdAt":"2022-03-24T13:22:30Z","labels":["enhancement"],"number":198,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Fetch chain list dynamically from URL","type":"issue","updatedAt":"2024-12-21T10:46:28Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/198"},{"author":"PaulRBerg","body":"See the discussion here:\r\n\r\nhttps://github.com/amondnet/vercel-action/issues/122\r\n\r\nDoing it on GitHub Actions would enable parallelized builds, a feature which is quite expensive to activate on Vercel.","createdAt":"2022-03-22T17:43:22Z","labels":["enhancement"],"number":196,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Build the apps on GitHub Actions instead of Vercel","type":"issue","updatedAt":"2024-12-21T10:46:28Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/196"},{"author":"PaulRBerg","body":"A user contacted us via Crisp and told us that he had accidentally created a stream toward the address of the WBNB contract itself:\r\n\r\n<img width=\"551\" alt=\"Screen Shot 2022-03-14 at 2 37 02 PM\" src=\"https://user-images.githubusercontent.com/8782666/158194718-e01bd000-b909-4fc9-81e7-59a16e4e2b6e.png\">\r\n\r\nThat means he lost everything, if the stream had ended by the time he contacted us.\r\n\r\nWe should be able to prevent this sort of loss in the future if we disable the creation of streams toward one of our listed tokens' address. One additional rule could be added in [RecipientInput/index.js](https://github.com/sablierhq/sablier-frontend/blob/1b3bcb483fd31d5c44c02461162561361cb7b09f/apps/sender/src/components/CreateStream/RecipientInput/index.js).","createdAt":"2022-03-14T14:39:12Z","labels":["enhancement"],"number":194,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Do not allow the recipient to be a listed token address","type":"issue","updatedAt":"2022-03-24T11:24:12Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/194"},{"author":"PaulRBerg","body":"See https://github.com/Uniswap/token-lists.","createdAt":"2022-03-10T09:49:52Z","labels":["feature","enhancement"],"number":193,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Integrate token lists to avoid having to manually maintain tokens","type":"issue","updatedAt":"2024-12-21T10:46:28Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/193"},{"author":"PaulRBerg","body":"See how it's integrated in the Safe App:\r\n\r\nhttps://github.com/sablierhq/sablier-safe-app/blob/8d5ca7a569722e3453c957c2604f0bfbdb0312dd/.lintstagedrc","createdAt":"2022-03-08T21:07:58Z","labels":["enhancement"],"number":192,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Integrate \"lint-staged\" to run prettier on every git commit","type":"issue","updatedAt":"2022-03-09T10:47:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/192"},{"author":"PaulRBerg","body":"The current UX of having to know (or worse, guess) on what chains Sablier is available is not great. For example, several users still ask us whether Sablier is available on Polygon, because they don't see a network switcher in the Sablier UI.\r\n\r\nWe should follow the industry standard and implement a network switcher in the top-right corner of the screen.","createdAt":"2022-03-07T15:28:06Z","labels":["feature"],"number":190,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Network switcher","type":"issue","updatedAt":"2022-03-23T17:47:23Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/190"},{"author":"PaulRBerg","body":"We're now living in a multichain world where fees on some chains are so small they are negligible. There is no need to support so many testnets anymore.","createdAt":"2022-03-07T13:31:46Z","labels":["enhancement"],"number":188,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Remove support for most testnets but one","type":"issue","updatedAt":"2022-11-03T22:09:23Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/188"},{"author":"PaulRBerg","body":"Commit [17a70e62](https://github.com/sablierhq/sablier-frontend/commit/17a70e62cdcbba20ed127b4ad19ad7a87de7e9bd) added a new function `getChainName` in the `@sablier/utils` package:\r\n\r\nhttps://github.com/sablierhq/frontend/blob/17a70e62cdcbba20ed127b4ad19ad7a87de7e9bd/packages/utils/src/web3.js#L23-L42\r\n\r\nThe problem is that this is just a stateless utility function. Whenever a component needs the chain name, it'd better memoize its value to avoid re-computing it on every render. But doing that clogs up the component implementation.\r\n\r\nTo minimize future maintenance costs, we should write a React Hook which saves the chain name in the global state.","createdAt":"2022-03-06T23:35:50Z","labels":["enhancement"],"number":187,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Write a hook that saves the chain name in a global context","type":"issue","updatedAt":"2022-07-25T16:01:00Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/187"},{"author":"PaulRBerg","body":"Here:\r\n\r\n![2022-02-19T01-40-39 643Z](https://user-images.githubusercontent.com/8782666/154797105-3e36ed5d-95c0-492c-aa83-ef6e8b0bf8f3.png)\r\n\r\nAnd here:\r\n\r\n![2022-02-19T01-39-21 637Z](https://user-images.githubusercontent.com/8782666/154797106-54aaef31-aa93-492e-be49-c53399fe9830.png)\r\n\r\n","createdAt":"2022-02-19T10:30:31Z","labels":["feature"],"number":186,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Display ERC-20 balances in token dropdown","type":"issue","updatedAt":"2024-12-21T10:46:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/186"},{"author":"PaulRBerg","body":"One problem with monorepos is that CD is inefficient. The way deployments work now is that any commit triggers a pipeline of deployments for all websites:\r\n\r\n- sablier.finance\r\n- pay.sablier.finance\r\n- app.sablier.finance\r\n\r\nInstead our CD pipeline should be smart enough to trigger builds only for those apps that suffered a modification. Of course, this is not easy to implement. It's not just a matter of checking the git diffs within the \"apps\" folder - an app package can depend on other local packages.","createdAt":"2022-02-11T10:50:19Z","labels":["enhancement"],"number":184,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Make Vercel rebuild only the diffs","type":"issue","updatedAt":"2024-12-21T10:46:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/184"},{"author":"PaulRBerg","body":"This is a corollary of #182.\r\n\r\nThe sidebars need to be included in the DOM in order for the css slide-in animation to be run. While this doesn't cause any bug per se, all side effects are (inefficiently) executed on every render of the Stream component.\r\n\r\nWe should find a smarter way to handle this - we should prevent any logic from being run if the `isOpen` flag is set to false.","createdAt":"2022-02-10T12:09:17Z","labels":[],"number":183,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Too many sidebar side effects","type":"issue","updatedAt":"2024-12-21T10:46:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/183"},{"author":"PaulRBerg","body":"To make React run fewer side effects, we deconstruct the fields of a salary, stream, token and whatnot in the dependency arrays. This is cool, but all hell will break loose if the truthiness safeguards in the `components/src/Stream` and `Dashboard` components are removed. If these page components do not return `null` when the data returned from the subgraph is `null`, the entire frontend app will crash.\r\n\r\nWe should figure out a smarter way to handle this.","createdAt":"2022-02-10T12:07:09Z","labels":[],"number":182,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Hook dependencies deconstruction","type":"issue","updatedAt":"2024-12-21T10:46:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/182"},{"author":"PaulRBerg","body":"Lost of Crisp users coming from Polygon and BSC got confused by the \"Ethereum address\" label. We should rephrase that such that it's clear that Sablier works with Ethereum, Polygon and BSC.","createdAt":"2022-01-04T17:02:32Z","labels":["enhancement"],"number":180,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Replace \"Ethereum address\" with some other label in the create stream form","type":"issue","updatedAt":"2024-12-21T10:46:26Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/180"},{"author":"PaulRBerg","body":"Many people are accidentally streaming to their exchange wallet, instead of using their decentralized wallets. We should add a warning to clarify that they can't use centralized exchanges with Sablier.","createdAt":"2022-01-03T00:06:35Z","labels":["enhancement"],"number":179,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add warning to not stream to exchange wallet","type":"issue","updatedAt":"2024-12-21T10:47:05Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/179"},{"author":"PaulRBerg","body":"Full log:\r\n\r\n> #228 Error: contract not deployed (contractAddress=\"0xCD18eAa163733Da39c232722cBC4E8940b1D8888\", operation=\"getDeployed\", version=4.0.48)\r\n\r\n10th occurrences in [Rollbar](http://email.mail.rollbar.com/c/eJxtUcuKhDAQ_Bq9KXlp4iGHhWF-Qzqx3QnkIRr38febDB6W2YVApytV1UVn0URa2jrNCKOUMUklGznpiaBikGYyVK3TqMZGkADO93vy3sDe2xTah0aBhBtcmUQuFpgIBanQLIyMxU5h6_Uj5-1o-FvD7uX8kpfuAOMd7uW2wXd_df3qIkSLBXUZw1EqY6rK-f3MYbYQNnDvseE3_NrmHTeEPFdqw8ZKCLi4M9TnmvgCj3TuxZPfrgRdTNmtzkJ2KV4cm2LGmAvpw-FnVy07c-acYkfbXW9w-rKGl5ht1nmHeICtTuDn59SCvoT7i3T_THmKZ7eUGFopIwlHg3IdxDSMSlmxUrmM5ZeUkPYHqcWUuA).","createdAt":"2021-12-27T22:20:34Z","labels":["bug"],"number":178,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Contract not deployed","type":"issue","updatedAt":"2024-12-21T10:46:26Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/178"},{"author":"PaulRBerg","body":"Max had a call with them and they are big Sablier fans.\r\n\r\n<img width=\"807\" alt=\"im-token-1\" src=\"https://user-images.githubusercontent.com/8782666/145986061-40cd74fa-5d6e-4277-b143-178a24ec2cbf.png\">\r\n\r\n<img width=\"738\" alt=\"im-token-2\" src=\"https://user-images.githubusercontent.com/8782666/145986075-76cbac11-c291-4eb1-bc6e-130ce5b6e17f.png\">\r\n\r\n","createdAt":"2021-12-14T11:01:54Z","labels":["feature"],"number":177,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Integrate imToken","type":"issue","updatedAt":"2024-12-21T10:46:25Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/177"},{"author":"scorpion9979","body":"Currently, the Sablier UI is sending 50x more API requests to Infura than Hifi's UI. This is probably caused by huge surge of UI usage. The Hifi UI already has Multicall integrated through a library called [ethcall](https://github.com/Destiner/ethcall). If we integrate MakerDAO's Multicall into the Sablier UI, this will lead to a lot more API efficiency and decrease the API usage by many folds.","createdAt":"2021-12-11T20:55:30Z","labels":["enhancement"],"number":176,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Integrate MakerDAO's Multicall contracts for more Infura API efficiency","type":"issue","updatedAt":"2023-07-06T15:17:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/176"},{"author":"PaulRBerg","body":"See https://github.com/NoahZinsmeister/web3-react/pull/255.\r\n\r\nUnfortunately ,`web3-react` is not actively maintained anymore - it looks like Noah doesn't have much time for it. The latest versions (v.6.2.6, v6.2.7, v6.2.8) of the WalletConnect connector have [all](https://github.com/NoahZinsmeister/web3-react/issues/310#issuecomment-960207307) [been](https://github.com/NoahZinsmeister/web3-react/issues/310) [buggy](https://github.com/NoahZinsmeister/web3-react/issues/310#issuecomment-960207307).","createdAt":"2021-11-03T22:35:57Z","labels":["enhancement"],"number":175,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Upgrade to v1.6.0 of \"@walletconnect/ethereum-provider\" package","type":"issue","updatedAt":"2024-12-21T10:46:25Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/175"},{"author":"PaulRBerg","body":"Hardcoded gas limits offer a big advantage: they are robust to ethers.js gas estimation errors. But they fail in certain scenarios where the ERC-20 token transfer consumes more gas than expected by the hard-coded gas limit.\r\n\r\nThe best of both worlds would be to *try* estimate the gas limit, and only if the estimation fails, default to a hardcoded value.","createdAt":"2021-07-29T17:24:22Z","labels":["bug"],"number":173,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Try estimate the gas limit, defaulting to a hardcoded gas limit","type":"issue","updatedAt":"2022-07-21T13:52:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/173"},{"author":"PaulRBerg","body":"See [Why not BigNumber.js, BN.js, BigDecimal, etc?](https://docs.ethers.io/v5/api/utils/bignumber/#BigNumber--BigNumber--notes--why-not-bignumber-js-bn-js-bigdecimal-etc).","createdAt":"2021-07-29T09:16:32Z","labels":["enhancement"],"number":172,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use @ethersproject/BigNumber instead of bignumber.js","type":"issue","updatedAt":"2024-12-21T10:48:40Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/172"},{"author":"PaulRBerg","body":"They are [currently](https://github.com/sablierhq/sablier-frontend/blob/5f9f422ced22565a8a673c5bd2367cb36c87e7d5/packages/constants/src/index.js#L52) hosted on [vansoftware.ro](https://vansoftware.ro).","createdAt":"2021-07-25T13:26:46Z","labels":["enhancement"],"number":171,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Upload logo.png and logo.svg to sablier.finance","type":"issue","updatedAt":"2022-10-13T13:59:53Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/171"},{"author":"PaulRBerg","body":"","createdAt":"2021-07-24T18:51:52Z","labels":["enhancement"],"number":170,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Lets ethers calculate the gas cost when the token approval has already been made","type":"issue","updatedAt":"2021-07-29T09:51:06Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/170"},{"author":"PaulRBerg","body":"See https://github.com/Uniswap/uniswap-interface/discussions/2098.","createdAt":"2021-07-24T16:04:57Z","labels":["enhancement"],"number":169,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use styled-media-query over custom media queries","type":"issue","updatedAt":"2021-07-29T12:51:54Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/169"},{"author":"PaulRBerg","body":"It's more palatable:\r\n\r\n```ts\r\nimport { Trans } from '@lingui/macro'\r\n\r\nexport default function() {\r\n  return <Trans>Install Metamask</Trans>;\r\n}\r\n```","createdAt":"2021-07-24T16:04:29Z","labels":["enhancement"],"number":168,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Switch from react-i18-next to @lingui/macro","type":"issue","updatedAt":"2024-12-21T10:48:40Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/168"},{"author":"PaulRBerg","body":"Reported by user on Crisp:\r\n\r\n<img width=\"559\" alt=\"Capture d’écran 2021-07-21 à 00 36 01\" src=\"https://user-images.githubusercontent.com/8782666/126404151-cc4c8993-fe21-4595-90f4-f42f5ab21dbf.png\">\r\n","createdAt":"2021-07-20T22:36:53Z","labels":["bug"],"number":167,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Gas required exceeds allowance","type":"issue","updatedAt":"2024-12-21T10:48:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/167"},{"author":"PaulRBerg","body":"https://storage.crisp.chat/users/upload/visitor/9c7660edf9436800/error_ugrday.png","createdAt":"2021-07-19T22:47:59Z","labels":["bug"],"number":166,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Fix the CORS issue with Etherchain gas oracle and The Graph","type":"issue","updatedAt":"2021-07-31T10:25:24Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/166"},{"author":"PaulRBerg","body":"We're unnecessarily calling `eth_getBlockByNumber` thousands of times.","createdAt":"2021-07-14T11:11:30Z","labels":["enhancement"],"number":165,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Cut down calls to Infura","type":"issue","updatedAt":"2023-07-06T15:19:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/165"},{"author":"PaulRBerg","body":"Requested by mStable.","createdAt":"2021-07-14T11:10:33Z","labels":["feature"],"number":164,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"Watch Address\" option to wallet modal","type":"issue","updatedAt":"2021-07-29T09:19:57Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/164"},{"author":"PaulRBerg","body":"![image](https://user-images.githubusercontent.com/8782666/125612429-3748876c-22f6-437e-a845-e367561e8506.png)\r\n","createdAt":"2021-07-14T11:09:44Z","labels":["bug"],"number":163,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Error on Argent: \"undefined has no properties\"","type":"issue","updatedAt":"2024-12-21T10:48:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/163"},{"author":"PaulRBerg","body":"Requested by the Portis team privately.\r\n\r\nHonestly, I don't know if this is worth it. If we touch the wallet modal, it would make more sense to rebase from the Uniswap code base; if they didn't add support for mobile, we should leave it as such.","createdAt":"2021-07-14T11:06:32Z","labels":["enhancement"],"number":162,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Make Portis work on mobile","type":"issue","updatedAt":"2024-12-21T10:43:43Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/162"},{"author":"PaulRBerg","body":"As per Moshe's report:\r\n\r\n![image](https://user-images.githubusercontent.com/8782666/125611819-1ed4809d-dc8a-4331-9118-9c924ba531c1.png)\r\n","createdAt":"2021-07-14T11:03:20Z","labels":["bug"],"number":161,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Stream details are off after a cancellation","type":"issue","updatedAt":"2021-07-31T11:09:12Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/161"},{"author":"PaulRBerg","body":"See salary with id 875.\r\n\r\n![image](https://user-images.githubusercontent.com/8782666/125611718-215ae93f-1917-47ac-8977-b4a02844edd3.png)","createdAt":"2021-07-14T11:01:30Z","labels":["bug","duplicate"],"number":160,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Withdrawal amount is more than what is available in the contract","type":"issue","updatedAt":"2021-07-29T09:29:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/160"},{"author":"PaulRBerg","body":"Just like it is used in [useAddressFromENSName](https://github.com/sablierhq/sablier-frontend/blob/main/packages/react-hooks/src/ethereum/index.js#L9-L51).","createdAt":"2021-07-10T19:01:09Z","labels":[],"number":159,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Refactor \"stale\" boolean flags to AbortController in \"useEffect\" hooks ","type":"issue","updatedAt":"2021-07-13T17:51:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/159"},{"author":"PaulRBerg","body":"The `babel-plugin-inline-react-svg` package must be listed as a workspace-wide dependency, lest we get this error when building the `@sablier/components` package:\r\n\r\n```\r\nError: Cannot find module 'babel-plugin-inline-react-svg'\r\nRequire stack:\r\n- /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/plugins.js\r\n- /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/index.js\r\n- /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/index.js\r\n- /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/cli/lib/babel/options.js\r\n- /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/cli/lib/babel/index.js\r\n- /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/cli/bin/babel.js\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:957:15)\r\n    at resolve (internal/modules/cjs/helpers.js:83:19)\r\n    at resolveStandardizedName (/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/plugins.js:100:7)\r\n    at resolvePlugin (/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/plugins.js:44:10)\r\n    at loadPlugin (/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/plugins.js:52:20)\r\n    at createDescriptor (/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/config-descriptors.js:154:9)\r\n    at /Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/config-descriptors.js:109:50\r\n    at Array.map (<anonymous>)\r\n    at createDescriptors (/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/config-descriptors.js:109:29)\r\n    at createPluginDescriptors (/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/config-descriptors.js:105:10) {\r\n  code: 'MODULE_NOT_FOUND',\r\n  requireStack: [\r\n    '/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/plugins.js',\r\n    '/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/config/files/index.js',\r\n    '/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/core/lib/index.js',\r\n    '/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/cli/lib/babel/options.js',\r\n    '/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/cli/lib/babel/index.js',\r\n    '/Users/paulrberg/Projects/Sablier/Columbus/v1Frontend/packages/vendors/node_modules/@babel/cli/bin/babel.js'\r\n  ]\r\n}\r\n```\r\n\r\nThis will be solved when another package will need \"babel-plugin-inline-react-svg\", but for now we keep it at the root.\r\n\r\nThe question is: can we make it a dependency only in the \"@sablier/components\" package?","createdAt":"2021-01-28T11:28:08Z","labels":["question","dependencies"],"number":155,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Mark \"babel-plugin-inline-react-svg\" as dep only in \"@sablier/components\"","type":"issue","updatedAt":"2024-12-21T10:48:39Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/155"},{"author":"PaulRBerg","body":"There's a shit ton of them:\r\n\r\n<img width=\"1792\" alt=\"Capture d’écran 2021-01-28 à 00 54 05\" src=\"https://user-images.githubusercontent.com/8782666/106065061-66a7c800-6103-11eb-9ab6-ab70069a97e1.png\">\r\n","createdAt":"2021-01-27T22:55:03Z","labels":["dependencies"],"number":154,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Fix yarn installation warnings","type":"issue","updatedAt":"2024-12-21T10:48:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/154"},{"author":"PaulRBerg","body":"See https://github.com/NoahZinsmeister/web3-react/issues/110","createdAt":"2021-01-18T20:06:16Z","labels":["bug"],"number":152,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Remove deprecated MetaMask API","type":"issue","updatedAt":"2021-01-27T16:46:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/152"},{"author":"PaulRBerg","body":"User \"Phillancia\" said the following on Discord:\r\n\r\n> Hi, I am unable to withdraw the streamed funds to my crypto wallet. Please advise.\r\n\r\nAnd he attached the following picture:\r\n\r\n![Screenshot_1](https://user-images.githubusercontent.com/8782666/101617568-7404d800-3a19-11eb-9e6b-811f8a694823.png)\r\n\r\nThe error is:\r\n\r\n> Cannot read property \"toHexString\" of undefined","createdAt":"2020-12-09T10:25:05Z","labels":["bug"],"number":150,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Cannot read property \"toHexString\" of undefined","type":"issue","updatedAt":"2024-12-21T10:48:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/150"},{"author":"PaulRBerg","body":"As reported by Danger on Discord.\r\n\r\n<img width=\"1219\" alt=\"Capture d’écran 2020-11-11 à 13 35 53\" src=\"https://user-images.githubusercontent.com/8782666/98838059-6bd27080-244c-11eb-8e3e-406b4c0aa720.png\">","createdAt":"2020-11-11T16:33:53Z","labels":["bug"],"number":149,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Fix bug in sablier.me where token is assumed to have 18 decimals","type":"issue","updatedAt":"2020-11-11T17:14:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/149"},{"author":"PaulRBerg","body":"Happened on sablier.me when I reloaded the page with MetaMask connected:\r\n\r\n<img width=\"497\" alt=\"Capture d’écran 2020-11-11 à 17 18 12\" src=\"https://user-images.githubusercontent.com/8782666/98829506-f366b200-2441-11eb-8b9c-9319a8ffc6d4.png\">\r\n","createdAt":"2020-11-11T15:18:52Z","labels":["bug"],"number":148,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Invalid value for prop `src` on <img> tag.","type":"issue","updatedAt":"2021-04-23T14:36:41Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/148"},{"author":"PaulRBerg","body":"Looks like an easy-to-fix bug:\r\n\r\n<img width=\"1792\" alt=\"Capture d’écran 2020-11-01 à 21 28 26\" src=\"https://user-images.githubusercontent.com/8782666/97812309-30d08000-1c89-11eb-970d-097e2f5e7893.png\">\r\n","createdAt":"2020-11-01T19:28:58Z","labels":["bug"],"number":147,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"TypeError: __firefox__.searchQueryForField is not a function","type":"issue","updatedAt":"2024-12-21T10:48:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/147"},{"author":"PaulRBerg","body":"From an email from overvision13@hotmail.com:\r\n\r\n<img width=\"300\" src=\"https://user-images.githubusercontent.com/8782666/78254959-55038d00-74ff-11ea-8b50-8f98bb128d7f.png\"/>\r\n\r\nInterestingly, this error seems to be not reported on Rollbar. The seemingly closest one is \"Fetch is aborted\":\r\n\r\nhttps://rollbar.com/sablier/app.sablier.finance/items/53/","createdAt":"2020-04-02T13:40:45Z","labels":["bug"],"number":146,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Throw more specific error than \"Failed to fetch\" for JSON-RPC issues","type":"issue","updatedAt":"2024-12-21T10:48:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/146"},{"author":"PaulRBerg","body":"See https://rollbar.com/sablier/pay.sablier.finance/items/12/\r\n\r\nThe issue happens when advanced users trigger a replacement transaction in MetaMask. [Blocknative](https://blocknative.com) solves this.","createdAt":"2020-03-09T08:41:39Z","labels":["bug"],"number":145,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Error: replacement transaction underpriced","type":"issue","updatedAt":"2024-12-21T10:48:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/145"},{"author":"PaulRBerg","body":"Looks crappy now.\r\n\r\n![ScreenshotSablier](https://user-images.githubusercontent.com/8782666/75864834-ea2d3c00-5e02-11ea-8064-6e601cc154e9.png)\r\n","createdAt":"2020-03-04T09:28:44Z","labels":["feature"],"number":144,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Make Ramp Network modal responsive in Sablier.Me","type":"issue","updatedAt":"2020-03-04T23:03:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/144"},{"author":"PaulRBerg","body":"[Typy](https://github.com/flexdinesh/typy#safefunction) is a nice, little tool for checking types in JavaScript. It has plenty of functions - some secure and robust, some dangerous.\r\n\r\nI noticed that we lately started using `isNullOrUndefined` and `isUndefined`, which fall onto the latter category of dangerous functions.\r\n\r\nWe should strive to use `isFalsy` as much as possible and make smart use of enums or other heuristics to avoid using \"null\" or \"undefined\" as a generator of logical branches.","createdAt":"2020-02-29T03:10:49Z","labels":["enhancement"],"number":141,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use isFalsy instead of isNullOrUndefined or isUndefined","type":"issue","updatedAt":"2021-07-29T08:55:08Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/141"},{"author":"PaulRBerg","body":"I noticed that the complexity of Button/v2 has been growing steadily over time. This component is super hard to understand and it recently caused an outage of sablier.finance, because it ended up importing @sablier/react-hooks (admittedly, this might be a coincidence, but complexity tends to cause pesky little bugs).","createdAt":"2020-02-29T02:40:58Z","labels":[],"number":140,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Reduce complexity in Button/v2","type":"issue","updatedAt":"2020-03-01T21:22:31Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/140"},{"author":"razgraf","body":"There's an active issue with the Kyber integration.\r\nIt seems we have to load the `widget.js` script every time we render the entire kyber button component. If we don't do so, there's a buggy behaviour which makes the button open a kyber-new-tab instead of loading the dialog inside the Sablier app.\r\n\r\nPreview: to see this, go into the current **pay.sablier.finance**, open the create stream sidebar, click on kyber. Close the sidebar, click on a stream. From the stream, go back to dashboard and try to open the sidebar again and click the button. It will now open in a new window.","createdAt":"2020-02-28T23:53:30Z","labels":["bug"],"number":139,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Kyber script issue at re-render","type":"issue","updatedAt":"2020-02-29T17:37:15Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/139"},{"author":"razgraf","body":"There is an ENS issue (mainly on sablier.me) for cases where an ENS name will resolve to an address that already holds other names. See [pascal.jarvis.eth](https://app.ens.domains/address/0x476e23bFc5415397021a74e525640b328A12b81e).","createdAt":"2020-02-28T16:26:52Z","labels":["bug"],"number":138,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"ENS issue when address resolves to multiple names","type":"issue","updatedAt":"2021-04-23T14:31:30Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/138"},{"author":"PaulRBerg","body":"See how it is handled in sender-app:\r\n\r\nhttps://github.com/sablierbot/sablier-frontend/blob/develop/apps/sender/src/components/CreateStream/index.js#L454\r\n\r\nAmountBox should handle this too, otherwise the app will crash surreptitiously!\r\n\r\nhttps://github.com/sablierbot/sablier-frontend/blob/develop/apps/dotme/src/components/Profile/CreateStream/AmountBox/index.js\r\n\r\n[Read more about the infamous deposit gotcha in the docs](https://docs.sablier.finance/streams#the-deposit-gotcha).","createdAt":"2020-02-27T01:21:23Z","labels":["bug"],"number":136,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Small number of tokens is not handled in dotme","type":"issue","updatedAt":"2021-04-23T14:29:20Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/136"},{"author":"PaulRBerg","body":"You know me - I've got a penchant for robust code!\r\n\r\n```js\r\nconst [shouldModalOpen, setShouldModalOpen] = useState(false);\r\n```\r\n\r\nUsing `useState` in a component that contains loads of input tags is super fragile, close to being even dangerous to one programmer's mental health.\r\n\r\nEdit: to clarify, this is about the \"apps/dotme/src/components/CreateStream/index.js\" component.","createdAt":"2020-02-27T01:01:24Z","labels":[],"number":135,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use reducer or mini machine for \"shouldModalOpen\"","type":"issue","updatedAt":"2021-04-23T14:30:20Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/135"},{"author":"PaulRBerg","body":"Mixpanel is super important for understanding user behaviour, **particularly** when launching a new big feature of product.\r\n\r\nIt's a shame that don't have it now, but that's life. We'll see how the launch of sablier.me goes and we'll take it from there. For now, I set this to \"priority medium\".","createdAt":"2020-02-27T00:04:57Z","labels":["feature"],"number":134,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add Mixpanel trackers to all important actions in dotme-app","type":"issue","updatedAt":"2020-02-29T23:37:05Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/134"},{"author":"PaulRBerg","body":"This a humongous piece of debt we GOTTA repay sooner than later. The `createStreamMachine.js` file is duplicated across the sender-app and the dotme-app packages.\r\n\r\nWe should combine them into one by creating a `@sablier/machines` package.","createdAt":"2020-02-26T23:31:03Z","labels":[],"number":133,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Reuse createStreamMachine between sender-app and dotme-app","type":"issue","updatedAt":"2020-02-29T16:34:48Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/133"},{"author":"PaulRBerg","body":"Keep the code DRY. There shouldn't be two `CreateStreamContext` files.","createdAt":"2020-02-26T23:22:17Z","labels":[],"number":132,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Reuse CreateStreamContext between sender-app and dotme-app","type":"issue","updatedAt":"2020-02-29T16:34:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/132"},{"author":"PaulRBerg","body":"The UI/UX for this is genuinely terrible on my Mac.\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-02-26 à 22 01 01\" src=\"https://user-images.githubusercontent.com/8782666/75395217-d147f680-58e9-11ea-8206-2d85c2e05707.png\">\r\n\r\n<img width=\"367\" alt=\"Capture d’écran 2020-02-26 à 22 46 55\" src=\"https://user-images.githubusercontent.com/8782666/75395259-e9b81100-58e9-11ea-8241-8364051c7695.png\">\r\n","createdAt":"2020-02-26T22:47:15Z","labels":["feature"],"number":131,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"There is no margin between the time dropdowns and the bottom of the screen","type":"issue","updatedAt":"2020-03-04T12:47:58Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/131"},{"author":"PaulRBerg","body":"It definitely should NOT start with 00:00am. It's confusing. See how I handled this in [v0.sablier.finance](https://v0.sablier.finance).\r\n\r\n<img width=\"139\" alt=\"Capture d’écran 2020-02-26 à 22 21 31\" src=\"https://user-images.githubusercontent.com/8782666/75393613-5c26f200-58e6-11ea-81f5-d26ccf31077f.png\">\r\n","createdAt":"2020-02-26T22:21:50Z","labels":["feature"],"number":130,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"The hour selection dropdown should automatically select the curent time","type":"issue","updatedAt":"2024-12-21T10:48:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/130"},{"author":"PaulRBerg","body":"After the user completes the form and before the confirmation modals pops up, there is no activity loading indicator.","createdAt":"2020-02-26T22:13:52Z","labels":["feature"],"number":129,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"No loading indicator while the stream gets created in sablier.me","type":"issue","updatedAt":"2020-03-04T10:56:04Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/129"},{"author":"PaulRBerg","body":"The default time selection flow is \"duration\", which does not provide a default start time. Most users are probably confused about Sablier anyway - we should guide the path for them.\r\n\r\n<img width=\"682\" alt=\"Capture d’écran 2020-02-26 à 22 07 12\" src=\"https://user-images.githubusercontent.com/8782666/75392638-5b8d5c00-58e4-11ea-9a2b-7afe192cec90.png\">\r\n\r\n\r\n","createdAt":"2020-02-26T22:07:24Z","labels":["feature"],"number":128,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Sablier.Me should automatically pre-fill \"now+10 minutes\"","type":"issue","updatedAt":"2020-03-01T21:20:50Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/128"},{"author":"PaulRBerg","body":"If today is Feb 26, all dates prior to Feb 26 should be grayed-out. See how I handled this scenario in [v0.sablier.finance](https://v0.sablier.finance).\r\n\r\n<img width=\"271\" alt=\"Capture d’écran 2020-02-26 à 22 02 55\" src=\"https://user-images.githubusercontent.com/8782666/75392480-06514a80-58e4-11ea-9c53-a121042e6d82.png\">\r\n","createdAt":"2020-02-26T22:05:02Z","labels":["feature"],"number":127,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"The calendar should gray out past dates and times","type":"issue","updatedAt":"2024-12-21T10:48:36Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/127"},{"author":"PaulRBerg","body":"And this dummy modal pops up:\r\n\r\n<img width=\"749\" alt=\"Capture d’écran 2020-02-26 à 21 56 09\" src=\"https://user-images.githubusercontent.com/8782666/75391902-deadb280-58e2-11ea-8606-13aa27d40edd.png\">\r\n","createdAt":"2020-02-26T21:57:02Z","labels":["bug"],"number":126,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"The sablier.me request button shouldn't be clickable if the form is not complete","type":"issue","updatedAt":"2020-02-29T03:11:42Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/126"},{"author":"PaulRBerg","body":"The left-hand side button goes to this page:\r\n\r\n+ https://etherscan.io/address/undefined\r\n\r\n<img width=\"749\" alt=\"Capture d’écran 2020-02-26 à 21 53 08\" src=\"https://user-images.githubusercontent.com/8782666/75391650-6646f180-58e2-11ea-8009-8be2c402949f.png\">\r\n","createdAt":"2020-02-26T21:53:36Z","labels":["bug"],"number":125,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"The left-hand side button in the wallet modal opens a bogus link","type":"issue","updatedAt":"2020-02-28T16:36:26Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/125"},{"author":"razgraf","body":"There is a small issue with the logic inside the createStream form (and probably withdraw). The problem seems to be caused by the delay between input-broadcast and the reducer triggering updates.\r\n\r\nScenario:\r\n- user completes the entire form with 10 units of token A\r\n- action (button) unlocks\r\n- user changes the token input from token A to token B\r\n- user quickly pushes the action (button) and proceeds with the sign & send flow\r\n- user will *end up (if not careful) sending an unwanted transaction*\r\n\r\nThis isn't such a big issue right now as if you want to reach this case (1) you have to either act really quick or (2) play with the platform to some extent. Also, in the case of a transaction where token B doesn't have the *10* units, the transaction will just be denied by the contract.\r\n\r\nExperiencing the same loophole with the Sablier.me create stream form.","createdAt":"2020-02-23T22:25:18Z","labels":["bug"],"number":123,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Create stream form broadcasts changes too slow","type":"issue","updatedAt":"2024-12-21T10:48:36Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/123"},{"author":"PaulRBerg","body":"When the stream is either:\r\n\r\n1. Cancelled\r\n2. Ended\r\n\r\nThe \"Cancel\" button cannot be tapped. This is the expected behaviour, as per #90.\r\n\r\nBut now I propose showing a notification popup (in the top part) explaining why the button cannot be cancelled.","createdAt":"2020-02-21T19:47:59Z","labels":["enhancement"],"number":122,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add a notification popup for why \"Cancel\" cannot be tapped","type":"issue","updatedAt":"2024-12-21T10:48:36Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/122"},{"author":"PaulRBerg","body":"I know that this is still WIP, but I had a look today on the \"dotme\" branch and I have a few thoughts to share.\r\n\r\n- [x] By and large, the alphabetical order principle has not been respected. I value this a lot, because it makes reading code much easier.\r\n- [x] I've seen a few props passed down to styled-components like this: \"cleanStyle\". Our preferred way to name this is \"isStyleClean\", to avoid collisions with html-specific props.\r\n- [x] I would rename the \"react-hooks\" folder to \"hooks\". It's self-evident what it does. The reason for which the \"react-hooks\" package has the \"react-\" prefix is because it's much more likely for there to be a naming collision across the whole npmjs.com registry.\r\n- [x] I've seen you used \"isUndefined\" a couple of times. This is not a robust way to check for invalidness. We should use \"isFalsy\", which covers the whole spectrum of invalid values in JavaScript.\r\n- [x] The \"ProfilePage\" and \"RequestPage\" folders under \"dotme/components\" should really be renamed to \"Profile\" and \"Request\", just like \"CreateStream\" is different to \"CreateStreamPage\" in \"sender-app\"\r\n\r\nAbout the input. I agree that we should keep the code DRY and reuse the \"AmountInput\" and \"DurationInput\" components across \"sender-app\" and \"dotme-app\". It's not going to be easy though to do this.\r\n\r\nFinally, about the \"/request\" route and component. I would really, really, hold on to it for now. It adds a lot of complexity to the codebase, it increases the development time to get sablier.me out and the payoff is super small. You'd need the request creator to (1) understand what Sablier is (2) have a true need for someone to stream them money (3) know how to find the request page and (4) have the request payer understand what Sablier is. I'm skeptical that we'll have any returning user for this.","createdAt":"2020-02-21T15:32:37Z","labels":["feature"],"number":121,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Feedback for dotme","type":"issue","updatedAt":"2020-02-29T03:07:24Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/121"},{"author":"PaulRBerg","body":"We use Etherchain as a gas price oracle:\r\n\r\nhttps://github.com/sablierbot/sablier-frontend/blob/develop/packages/utils/src/ethereum.js#L49\r\n\r\nWhich apparently gets blocked by certain browser extensions such as Privacy Badger. Rosco Kalis was kind enough to send me a report of this via Telegram.\r\n\r\n![IMG_7141](https://user-images.githubusercontent.com/8782666/74692611-ba6e1980-51f0-11ea-9489-1e70962467c0.PNG)\r\n\r\nMy first reaction was \"oh, we gotta do something about Privacy Badger\", but then I realised that no, what we should do is have a failsafe mechanism that returns some constant gas price when the call to the Etherchain gas oracle fails.","createdAt":"2020-02-17T23:50:02Z","labels":["bug"],"number":120,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Certain browser extensions block calls to Etherchain","type":"issue","updatedAt":"2022-03-24T16:25:23Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/120"},{"author":"PaulRBerg","body":"See this transaction on Etherscan:\r\n\r\n+ https://etherscan.io/tx/0x28dcb37d28d44a12ec43669925eae4163ceffba49d9f3a43e9b695b30a70b706\r\n\r\nAll I did was to tap the \"Max\" button. I presume that the dapp overflows the maximum withdrawal value.","createdAt":"2020-02-12T22:00:14Z","labels":["bug"],"number":119,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"The \"max\" button overflows what can be withdrawn from the stream","type":"issue","updatedAt":"2024-12-21T10:48:35Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/119"},{"author":"PaulRBerg","body":"I have not verified Patrick's statement, but he's a good engineer in general.\r\n\r\n![F5631A06-230A-43AF-AC15-ACB4D20B9DA0](https://user-images.githubusercontent.com/8782666/74113855-8327b900-4baf-11ea-86a2-d13419a87d50.png)\r\n","createdAt":"2020-02-10T00:46:46Z","labels":["feature"],"number":118,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Smooth out rerendering via react-countup","type":"issue","updatedAt":"2024-12-21T10:48:35Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/118"},{"author":"PaulRBerg","body":"Reported by Alice Negru on Discord:\r\n\r\n<img width=\"289\" alt=\"Capture d’écran 2020-02-10 à 01 19 59\" src=\"https://user-images.githubusercontent.com/8782666/74112227-7ac98100-4ba3-11ea-84ad-3f4873601e7d.png\">\r\n","createdAt":"2020-02-09T23:20:16Z","labels":["bug"],"number":117,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Error com.coinbase.wallet.ethereum.exceptions.EthereumException$IncorrectNonceProvided: Unable to determine nonce or incorrect nonce provided","type":"issue","updatedAt":"2024-12-21T10:48:35Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/117"},{"author":"PaulRBerg","body":"Just received this error in Rollbar:\r\n\r\n[Error: User denied transaction signature](https://rollbar.com/sablier/pay.sablier.finance/items/14/)\r\n\r\nIt shouldn't be there, it should be in Mixpanel. Apparently our `isWalletError` utility function is not doing its job properly:\r\n\r\nhttps://github.com/sablierbot/sablier-frontend/blob/master/packages/utils/src/errors.js#L29","createdAt":"2020-02-09T22:42:52Z","labels":["bug"],"number":116,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"\"User denied transaction signature\" should NOT be in Rollbar","type":"issue","updatedAt":"2024-12-21T10:48:35Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/116"},{"author":"PaulRBerg","body":"In one my recent commits:\r\n\r\n+ 7af13bf690ac4147925dba843fd1a42e9bf57d87\r\n\r\nI implemented a feature that updates the document.title inside of the Balances.js component, setting the label to the total value that has been streamed until now. That is, how much money has been streamed to the recipient.\r\n\r\nI was thinking about this though: shouldn't senders see a decreasing amount, starting with their deposit?","createdAt":"2020-02-07T21:49:13Z","labels":["question"],"number":115,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Should we show a decreasing value for senders?","type":"issue","updatedAt":"2022-03-24T15:32:19Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/115"},{"author":"PaulRBerg","body":"I've recently experienced an outage from one of The Graph's nodes:\r\n\r\n```\r\nOPTIONS https://api.thegraph.com/subgraphs/name/sablierhq/sablier 502\r\n```\r\n\r\nAlso in the subgraph explorer:\r\n\r\n<img width=\"942\" alt=\"Capture d’écran 2020-02-07 à 01 36 46\" src=\"https://user-images.githubusercontent.com/8782666/73988090-52931580-494a-11ea-97f1-97529753f545.png\">\r\n\r\nWe should:\r\n\r\n1. Handle this situation better by displaying some cute \"no data\" graphic\r\n2. Move on with the [Operating the Sablier protocol manually](https://www.notion.so/sablier/Todo-71368445cc2e42a9b6d995366c84d4f3?p=3cdd319a1a364ff8bb9c143cefaac8dd) blog post","createdAt":"2020-02-06T23:38:19Z","labels":["bug","feature"],"number":114,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Make apps robust to malfunctioning backends","type":"issue","updatedAt":"2024-12-21T10:48:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/114"},{"author":"PaulRBerg","body":"Not sure what could be the cause here ..\r\n\r\n![IMG_7090](https://user-images.githubusercontent.com/8782666/73893116-72aad200-4881-11ea-8b2c-aeb38a21ff0f.PNG)\r\n","createdAt":"2020-02-05T23:39:12Z","labels":["bug"],"number":113,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Token dropdown is reversed on iOS mobile","type":"issue","updatedAt":"2024-12-21T10:47:49Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/113"},{"author":"PaulRBerg","body":"See the full log on [Rollbar](https://rollbar.com/sablier/pay.sablier.finance/items/12/).\r\n\r\nThe only way I'm aware of for solving this problem, that is, when the user tries to either replace or cancel an existing transaction with Metamask, is to use [Blocknative](https://www.blocknative.com/).","createdAt":"2020-02-05T23:13:58Z","labels":["bug"],"number":112,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Error: replacement transaction underpriced","type":"issue","updatedAt":"2024-12-21T10:47:49Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/112"},{"author":"PaulRBerg","body":"How many streams can be created in one go, how many can be canceled, etc.\n\nOver the years, we've received several questions about this:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e01d6889-0411-4f1e-a3e4-3d1413dea241\" />\n\ncc @sablier-labs/solidity","createdAt":"2025-01-27T17:05:50Z","labels":["priority: 3","type: feature","work: clear"],"number":244,"repository":"sablier-labs/docs","state":"open","title":"Document limits for batch actions","type":"issue","updatedAt":"2025-01-29T10:38:02Z","url":"https://github.com/sablier-labs/docs/issues/244"},{"author":"PaulRBerg","body":"Context on [Slack](https://sablier.slack.com/archives/C04357LFXTQ/p1737663222231069).\n\nAnd on [X](https://x.com/Sablier/status/1869768643195904478).","createdAt":"2025-01-27T16:47:44Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":243,"repository":"sablier-labs/docs","state":"open","title":"Document CreateMyToken integration","type":"issue","updatedAt":"2025-01-27T16:47:44Z","url":"https://github.com/sablier-labs/docs/issues/243"},{"author":"PaulRBerg","body":"<img width=\"584\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ac619499-9992-46e2-8c19-f1852d1b1732\" />\n\nAlso related: https://sablier.slack.com/archives/C04357LFXTQ/p1737663188948579","createdAt":"2025-01-27T16:42:43Z","labels":["priority: 2","effort: medium","type: feature","work: complicated"],"number":241,"repository":"sablier-labs/docs","state":"open","title":"Document integration with Hats Protocol","type":"issue","updatedAt":"2025-01-27T16:42:43Z","url":"https://github.com/sablier-labs/docs/issues/241"},{"author":"PaulRBerg","body":"When users ask about CSV templates, we send them [this URL](https://docs.sablier.com/apps/guides/csv-support), which leads to the following table:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/75c88611-cbe6-41c8-991c-ed70f131b296\" />\n\nAs you can see, it is difficult to tell the UI shapes that each template corresponds to.\n\nTo improve the UX, I suggest adding a new column in which we show a little preview (a chart/ emission curve).","createdAt":"2025-01-27T15:25:10Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":240,"repository":"sablier-labs/docs","state":"open","title":"Add column with shape preview in CSV template table","type":"issue","updatedAt":"2025-01-27T15:25:10Z","url":"https://github.com/sablier-labs/docs/issues/240"},{"author":"PaulRBerg","body":"It should be possible to set up a bot that runs in a weekly CI, and checks for 404 links.\n\nThe goal is to improve the developer experience, and avoid situations like this:\n\n<img width=\"546\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9de015f3-a737-4045-9333-5f263f2fc3db\" />\n\ncc @smol-ninja, @maxdesalle","createdAt":"2025-01-20T11:34:54Z","labels":["priority: 2","type: test","effort: high","work: clear"],"number":239,"repository":"sablier-labs/docs","state":"closed","title":"Automated checks for detecting 404 errors","type":"issue","updatedAt":"2025-01-24T10:44:03Z","url":"https://github.com/sablier-labs/docs/issues/239"},{"author":"PaulRBerg","body":"We should document the `Alice → BatchLockup → Lockup` user flow.\n\nThis will be useful for users interacting with Sablier programmatically.\n\nThere's a special case for which this documentation will be particularly helpful: token contracts in which only some addresses are allowed to transfer tokens.\n\nRelated: [idea to get rid of `BatchLockup`](https://github.com/sablier-labs/v2-core/discussions/1148).","createdAt":"2025-01-15T10:35:53Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":237,"repository":"sablier-labs/docs","state":"closed","title":"User flow when batch creating streams","type":"issue","updatedAt":"2025-08-04T17:30:37Z","url":"https://github.com/sablier-labs/docs/issues/237"},{"author":"PaulRBerg","body":"Fees will be enabled in early January.\n\nThey will be documented on the [landing page](https://github.com/sablier-labs/v2-interfaces/issues/1316), but it'd be good to also mention them in the docs.","createdAt":"2025-01-14T13:36:36Z","labels":["effort: medium","type: feature","priority: 0","work: clear"],"number":236,"repository":"sablier-labs/docs","state":"closed","title":"Fee structure","type":"issue","updatedAt":"2025-02-03T16:04:10Z","url":"https://github.com/sablier-labs/docs/issues/236"},{"author":"PaulRBerg","body":"@maxdesalle, @razgraf, and I provided different responses when this integrator (SPL) asked us this question:\n\n<img width=\"491\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9efabec0-051e-42ee-b04f-7f6ba80dfa0d\" />\n\nI thus think it would be helpful to provide a lil guide for this particular use case of integrating airstreams in third-party UIs so that we point users here when need be.","createdAt":"2025-01-13T14:44:15Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":235,"repository":"sablier-labs/docs","state":"open","title":"Guide for integrating airdrops in third-party UIs","type":"issue","updatedAt":"2025-01-13T14:44:15Z","url":"https://github.com/sablier-labs/docs/issues/235"},{"author":"smol-ninja","body":"### Summary\n- In case of unclaimed ranged airstreams, sender would have to trigger claims on behalf of recipients before cancelling them.\n- Sender would have to pay protocol fee in native token while claiming, if its non-zero. This creates inconsistencies with cancellation of already claimed airstreams. ","createdAt":"2025-01-08T05:21:53Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":233,"repository":"sablier-labs/docs","state":"closed","title":"Add note about potential cancelation of unclaimed ranged airstreams","type":"issue","updatedAt":"2025-02-03T16:04:06Z","url":"https://github.com/sablier-labs/docs/issues/233"},{"author":"PaulRBerg","body":"Include the diagram created by @andreivladbrg [here](https://github.com/sablier-labs/v2-core/pull/1075#issue-2633282675). I have also pasted it below.\n\n<details><summary>Diagram for new function flow in LockupLinear</summary>\n<p>\n\n\n```mermaid\nflowchart TD\n    start_time_check([Is startTime >= current block timestamp?]):::check\n    return_zero([Return 0]):::return\n    end_time_check([Is current block timestamp >= endTime?]):::check\n    return_deposited([Return depositedAmount]):::return\n    cliff_time_check([Is cliffTime set and cliffTime > current block timestamp?]):::check\n    return_start_unlock([Return start unlock amount]):::return\n    unlock_sum_check([Is unlockAmountsSum >= depositedAmount?]):::check\n    elapsed_calculation_check([Calculate elapsedTime and streamableDuration]):::calculation\n    etp_calculation([Calculate elapsedTimePercentage]):::calculation\n    streamable_amount_calc([Calculate streamableAmount]):::calculation\n    streamed_amount_calc([Calculate streamedAmount]):::calculation\n    final_check([Is streamedAmount > depositedAmount?]):::check\n    return_withdrawn([Return withdrawn amount]):::return\n    return_streamed([Return streamedAmount]):::return\n\n    start_time_check -- \"Yes\" --> return_zero\n    start_time_check -- \"No\" --> end_time_check\n    end_time_check -- \"Yes\" --> return_deposited\n    end_time_check -- \"No\" --> cliff_time_check\n    cliff_time_check -- \"Yes\" --> return_start_unlock\n    cliff_time_check -- \"No\" --> unlock_sum_check\n    unlock_sum_check -- \"Yes\" --> return_deposited\n    unlock_sum_check -- \"No\" --> elapsed_calculation_check\n\n    elapsed_calculation_check --> etp_calculation\n    etp_calculation --> streamable_amount_calc\n    streamable_amount_calc --> streamed_amount_calc\n    streamed_amount_calc --> final_check\n    final_check -- \"Yes\" --> return_withdrawn\n    final_check -- \"No\" --> return_streamed\n\n    classDef check fill:#FFC107,stroke:#333,stroke-width:2px;\n    classDef return fill:#4CAF50,stroke:#333,stroke-width:2px;\n    classDef calculation fill:#03A9F4,stroke:#333,stroke-width:2px;\n```\n\n</p>\n</details> ","createdAt":"2025-01-06T14:05:01Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":232,"repository":"sablier-labs/docs","state":"open","title":"Document the new function flow in LockupLinear","type":"issue","updatedAt":"2025-01-06T14:05:10Z","url":"https://github.com/sablier-labs/docs/issues/232"},{"author":"PaulRBerg","body":"## Task\n\nAs originally suggested by @andreivladbrg [here](https://github.com/sablier-labs/v2-core/pull/1075#issue-2633282675), we should document the new shapes enabled by LockupLinear (part of Lockup v2.0.0):\n\nNote for self: we need to come up with bespoke names for these shapes.\n\n## Scenario 5\n\n<img width=\"500\" alt=\"image\" src=\"https://github.com/user-attachments/assets/50e809a8-1b48-4668-b7e5-2c28e083f67b\">\n\n<details><summary>Toggle to see the code:</summary>\n<p>\n\n```mdx\n<FunctionPlot\n  options={{\n    data: [\n      { fn: \"0\", range: [0, 25], color: \"#f77423\" },\n      { fn: \"(4/3) * (x - 25)\", range: [25, 100], color: \"#f77423\" },\n      {\n        points: [\n          [0, 0],\n          [25, 0],\n        ],\n        fnType: \"points\",\n        graphType: \"polyline\",\n        color: \"#f77423\",\n      },\n    ],\n  }}\n/>\n```\n\n</p>\n</details> \n\n## Scenario 6\n\n<img width=\"500\" alt=\"image\" src=\"https://github.com/user-attachments/assets/94b20281-4dcd-4386-9f92-ea9682d028f7\">\n\n<details><summary>Toggle to see the code:</summary>\n<p>\n\n```mdx\n<FunctionPlot\n  options={{\n    data: [\n      { fn: \"25\", range: [0, 50], color: \"#f77423\" }, // Constant at y=25 from x=0 to x=50\n      { fn: \"1.5 * (x - 50) + 25\", range: [50, 100], color: \"#f77423\" }, // Linear rise with slope 1.5 starting from y=25 at x=50\n      {\n        points: [\n          [0, 25],\n          [50, 25],\n        ],\n        fnType: \"points\",\n        graphType: \"polyline\",\n        color: \"#f77423\",\n      },\n    ],\n  }}\n/>\n\n```\n\n</p>\n</details> ","createdAt":"2025-01-06T14:03:25Z","labels":["priority: 2","type: feature","effort: low","work: clear"],"number":231,"repository":"sablier-labs/docs","state":"open","title":"Add new shapes enabled by LockupLinear","type":"issue","updatedAt":"2025-01-06T14:03:52Z","url":"https://github.com/sablier-labs/docs/issues/231"},{"author":"smol-ninja","body":"Instead of having `git clone` followed by `git checkout <VERSION_NAME>` instructions, use a single instruction:\n\n```bash\ngit clone REPO --branch release\n```\n\nThe `release` branch always mimics the latest version. So by doing so, we won't have to update it in the docs on every new release.\n\n### References\n- https://docs.sablier.com/guides/custom-deployments\n- https://docs.sablier.com/guides/lockup/verify-campaign","createdAt":"2024-12-24T07:29:12Z","labels":["priority: 3","effort: low","type: docs","work: clear"],"number":230,"repository":"sablier-labs/docs","state":"closed","title":"Use `--branch` in `git clone` instructions","type":"issue","updatedAt":"2025-02-03T16:03:57Z","url":"https://github.com/sablier-labs/docs/issues/230"},{"author":"razgraf","body":"Update https://docs.sablier.com/apps/features/payments to include details and pictures for\n\n- [x] Multi-top-up through the batched deposits (highlight suggestions for topping up for 30 days)\n- [x] Save for later through batch search","createdAt":"2024-12-23T14:14:13Z","labels":[],"number":227,"repository":"sablier-labs/docs","state":"closed","title":"Include batch features in the \"payments\" app docs","type":"issue","updatedAt":"2025-03-15T11:21:20Z","url":"https://github.com/sablier-labs/docs/issues/227"},{"author":"PaulRBerg","body":"As per Discord user 'Eddie_' suggestion:\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/cda7aebb-d252-436d-afd6-f9eb9509b060\" />\n","createdAt":"2024-12-21T11:48:33Z","labels":["priority: 3","type: feature","effort: low","work: clear"],"number":225,"repository":"sablier-labs/docs","state":"open","title":"Warning about streams longer than 2030","type":"issue","updatedAt":"2024-12-21T11:48:38Z","url":"https://github.com/sablier-labs/docs/issues/225"},{"author":"PaulRBerg","body":"There's [significant overlap](https://www.diffchecker.com/vNLh1yx9/) between these two guides:\n\n- https://docs.sablier.com/guides/lockup/examples/local-environment\n- https://docs.sablier.com/guides/flow/examples/local-environment\n\nTo lower the maintenance cost, we should write an MDX component that reuses the identical content.","createdAt":"2024-12-20T09:24:34Z","labels":["effort: medium","priority: 3","type: refactor","work: clear"],"number":223,"repository":"sablier-labs/docs","state":"closed","title":"DRY-ify Lockup vs Flow local environment guide","type":"issue","updatedAt":"2025-02-03T16:04:04Z","url":"https://github.com/sablier-labs/docs/issues/223"},{"author":"PaulRBerg","body":"I just noticed that the [Flow diagrams](https://docs.sablier.com/reference/flow/diagrams) don't contain a diagram analogous to the ones in [Lockup](https://docs.sablier.com/reference/lockup/diagrams), specifically:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c3fb68e8-99ad-4eca-a45a-adf31185d8f2\" />\n","createdAt":"2024-12-19T12:58:00Z","labels":["priority: 2","effort: low","work: clear"],"number":222,"repository":"sablier-labs/docs","state":"closed","title":"Add relational diagram for how streams are represented in Flow contract (as a monolith)","type":"issue","updatedAt":"2024-12-23T13:15:14Z","url":"https://github.com/sablier-labs/docs/issues/222"},{"author":"PaulRBerg","body":"Write a guide on how to verify the source code manually for Merkle campaigns so that partners like Daylight don't have to ping us anymore.\n\nThere's already a guide written in https://github.com/sablier-labs/v2-periphery/discussions/385 — we should put in the docs, too.\n\nLet's wait for Lockup v2.0.0 to be out before publishing this, though, in order to avoid having to explain the distinction between the V2 Periphery vs Airdrops repos.","createdAt":"2024-12-19T08:09:36Z","labels":["priority: 3","effort: low","work: clear"],"number":220,"repository":"sablier-labs/docs","state":"closed","title":"Guide for verifying Merkle campaigns","type":"issue","updatedAt":"2024-12-23T13:15:14Z","url":"https://github.com/sablier-labs/docs/issues/220"},{"author":"smol-ninja","body":"Because of libraries being public now in the upcoming release, Lockup requires a new deployment guide.","createdAt":"2024-12-16T18:41:28Z","labels":["effort: medium","priority: 1","work: complicated","type: docs"],"number":218,"repository":"sablier-labs/docs","state":"closed","title":"Update deployment guide for Lockup with mention of libraries","type":"issue","updatedAt":"2025-02-03T16:04:01Z","url":"https://github.com/sablier-labs/docs/issues/218"},{"author":"tukwan","body":"The search results appear on the list, but when I click them, it redirects to 404.\r\n\r\n\r\nhttps://github.com/user-attachments/assets/9d5aa96f-70a9-4d2f-bf46-b3b487151250\r\n\r\n","createdAt":"2024-12-13T14:20:20Z","labels":["type: bug"],"number":213,"repository":"sablier-labs/docs","state":"closed","title":"Search result redirects to 404","type":"issue","updatedAt":"2024-12-13T17:45:33Z","url":"https://github.com/sablier-labs/docs/issues/213"},{"author":"smol-ninja","body":"","createdAt":"2024-12-12T14:27:36Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":210,"repository":"sablier-labs/docs","state":"closed","title":"Add glossary for Flow protocol","type":"issue","updatedAt":"2025-02-03T16:04:13Z","url":"https://github.com/sablier-labs/docs/issues/210"},{"author":"PaulRBerg","body":"It's not immediately obvious what this code does:\r\n\r\nhttps://github.com/sablier-labs/docs/blob/1c7d8041d2b5cfec6e47afcbb3778da8728fcd08/formatter.js#L3-L10","createdAt":"2024-12-12T12:03:37Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":207,"repository":"sablier-labs/docs","state":"closed","title":"Add comments to explain what the `formatter.js` file does","type":"issue","updatedAt":"2025-04-23T12:26:28Z","url":"https://github.com/sablier-labs/docs/issues/207"},{"author":"PaulRBerg","body":"To inform users like this about what can happen when they use Excel to generate their CSV files:\r\n\r\n<img width=\"501\" alt=\"SCR-20241210-rsqg\" src=\"https://github.com/user-attachments/assets/06c5023b-99f9-46a1-831e-173763639597\">\r\n","createdAt":"2024-12-10T18:24:57Z","labels":["priority: 3","effort: low","work: clear"],"number":206,"repository":"sablier-labs/docs","state":"open","title":"Add admonition about cell formats applied by Excel","type":"issue","updatedAt":"2024-12-10T18:24:58Z","url":"https://github.com/sablier-labs/docs/issues/206"},{"author":"PaulRBerg","body":"In Lockup V2.0.0, we have decided to merge the LockupLinear, LockupTranched, and LockupDynamic contracts. Context here: https://github.com/sablier-labs/v2-core/discussions/1064\n\nMany parts of the docs will have to be updated.","createdAt":"2024-12-05T15:40:14Z","labels":["effort: epic","priority: 1","work: complicated"],"number":203,"repository":"sablier-labs/docs","state":"closed","title":"Big update in light of Lockup merger","type":"issue","updatedAt":"2025-02-03T15:55:23Z","url":"https://github.com/sablier-labs/docs/issues/203"},{"author":"andreivladbrg","body":"If you go to either of these links:\r\n\r\n1. https://docs.sablier.com/concepts/protocol/stream-types#unlock-linear\r\n2. https://docs.sablier.com/concepts/protocol/stream-types#unlock-cliff\r\n\r\nboth will direct you to the `Exponential` or Cliff `Exponential` shape instead\r\n\r\n\r\n| Unlock Linear  | Unlock Cliff                     |\r\n|-----------------------------------------|----------------------------------------|\r\n| ![Unlock Linear Shape](https://github.com/user-attachments/assets/01a55b2d-2b54-4c33-9434-fe638080897f) | ![Unlock Cliff Shape](https://github.com/user-attachments/assets/928b2560-8a66-440f-bf36-3b2c8c9e0bce) |\r\n\r\n\r\nThe issue affects all links, as each one simply directs you to the shape above with some levels.\r\nI’m not sure what causes this or how to fix it.","createdAt":"2024-10-28T13:49:02Z","labels":["effort: medium","priority: 1","type: bug","work: complicated"],"number":193,"repository":"sablier-labs/docs","state":"open","title":"Fix links and right section missmatch","type":"issue","updatedAt":"2025-01-28T14:06:16Z","url":"https://github.com/sablier-labs/docs/issues/193"},{"author":"PaulRBerg","body":"As suggested by @sneg55 on [Slack](https://sablier.slack.com/archives/CSSNL10Q3/p1729688181533289).","createdAt":"2024-10-23T13:17:58Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":192,"repository":"sablier-labs/docs","state":"closed","title":"Write a guide for how to operate the staking template","type":"issue","updatedAt":"2024-11-20T14:12:00Z","url":"https://github.com/sablier-labs/docs/issues/192"},{"author":"PaulRBerg","body":"Write a mini guide that shows how to pull vesting data from Sablier contracts, what functions to focus on (e.g. `streamedAmountOf`, etc.)\r\n\r\nThis is relevant for our integrations with CMC, CoinGecko, etc.\r\n\r\nCC @sablier-labs/business ","createdAt":"2024-10-14T17:58:52Z","labels":["priority: 2","effort: medium","work: clear"],"number":188,"repository":"sablier-labs/docs","state":"closed","title":"Write a guide for pulling vesting data","type":"issue","updatedAt":"2024-12-05T16:07:29Z","url":"https://github.com/sablier-labs/docs/issues/188"},{"author":"sneg55","body":"We need a doc page on a workaround with Cron for canceling after partial withdrawal from the stream. A few users recently asked me about this case.","createdAt":"2024-10-14T12:03:14Z","labels":["priority: 2","effort: medium","type: feature","work: complicated"],"number":187,"repository":"sablier-labs/docs","state":"closed","title":"Cancel on Partial withdraw","type":"issue","updatedAt":"2024-12-19T12:09:18Z","url":"https://github.com/sablier-labs/docs/issues/187"},{"author":"PaulRBerg","body":"Also, delete the FAQ as it's superfluous.","createdAt":"2024-10-08T15:52:08Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":185,"repository":"sablier-labs/docs","state":"open","title":"Move support videos under \"Apps\"","type":"issue","updatedAt":"2024-10-08T15:52:09Z","url":"https://github.com/sablier-labs/docs/issues/185"},{"author":"PaulRBerg","body":"As pointed out by @razgraf [here](https://github.com/sablier-labs/docs/discussions/167#discussioncomment-10799662), we will need redirects set up after the docs for Flow are implemented.\r\n\r\nDepends upon #176.","createdAt":"2024-09-30T17:56:08Z","labels":["effort: medium","priority: 0","type: refactor","work: clear"],"number":183,"repository":"sablier-labs/docs","state":"closed","title":"Add redirects after Flow docs are implemented","type":"issue","updatedAt":"2024-12-12T14:27:27Z","url":"https://github.com/sablier-labs/docs/issues/183"},{"author":"PaulRBerg","body":"Here: https://github.com/sablier-labs/docs/blob/ede8e0c6b2f29399288efd51b4227e62f9510133/docusaurus.config.ts#L204-L210\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/1073","createdAt":"2024-09-25T13:41:24Z","labels":["effort: medium","priority: 1","type: perf","work: complicated"],"number":178,"repository":"sablier-labs/docs","state":"closed","title":"Improve keywords for SEO","type":"issue","updatedAt":"2024-12-19T08:41:35Z","url":"https://github.com/sablier-labs/docs/issues/178"},{"author":"PaulRBerg","body":"An issue reported by Ahrefs — the links in the footer point to stale sites such as `sablier.com/terms-of-service`:\r\n\r\n<img width=\"500\" alt=\"SCR-20240925-myzi\" src=\"https://github.com/user-attachments/assets/a2f2c98f-1ad8-42cc-8c56-d091b8c3afe8\">\r\n","createdAt":"2024-09-25T13:38:16Z","labels":["priority: 1","type: bug","effort: low","work: clear"],"number":177,"repository":"sablier-labs/docs","state":"closed","title":"Stale links in footer","type":"issue","updatedAt":"2024-09-25T13:46:58Z","url":"https://github.com/sablier-labs/docs/issues/177"},{"author":"smol-ninja","body":"","createdAt":"2024-09-24T15:19:17Z","labels":["effort: epic","priority: 1","work: complex","type: docs"],"number":176,"repository":"sablier-labs/docs","state":"closed","title":"Add docs for Flow protocol","type":"issue","updatedAt":"2024-12-12T14:26:42Z","url":"https://github.com/sablier-labs/docs/issues/176"},{"author":"PaulRBerg","body":"There are several entities who have been granted a BUSL license for deploying the Sablier protocol on their own. To aid them, we should update the [_Custom Deployments_](https://docs.sablier.com/contracts/v2/guides/custom-deployments) page to include a mini guide for how to make the deployments.\r\n\r\nA good starting point is the internal Notion document [How to Deploy Sablier V2 Contracts](https://www.notion.so/sablier/How-to-Deploy-Sablier-V2-Contracts-20fe630984e04c6bb35fa3f9dd293cee).","createdAt":"2024-09-12T10:21:07Z","labels":["priority: 1","type: feature","effort: low","work: clear"],"number":173,"repository":"sablier-labs/docs","state":"closed","title":"Deployment guide for BUSL grantees","type":"issue","updatedAt":"2024-09-16T10:16:37Z","url":"https://github.com/sablier-labs/docs/issues/173"},{"author":"PaulRBerg","body":"We recently moved the forms from Google to Pipedrive, but the docs site still uses the old Google forms.","createdAt":"2024-09-12T10:20:03Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":172,"repository":"sablier-labs/docs","state":"closed","title":"Change form URLs to Pipedrive","type":"issue","updatedAt":"2024-09-12T12:25:14Z","url":"https://github.com/sablier-labs/docs/issues/172"},{"author":"razgraf","body":"The guides support page should be updated to include the recent videos uploaded to our youtube channel (zkSync, Safe, distribution curves etc.).","createdAt":"2024-08-27T11:56:27Z","labels":[],"number":170,"repository":"sablier-labs/docs","state":"closed","title":"Add the latest video guides","type":"issue","updatedAt":"2024-12-19T10:24:54Z","url":"https://github.com/sablier-labs/docs/issues/170"},{"author":"PaulRBerg","body":"We should add an admonition about lowercasing addresses in the subgraph APIs. A user got stuck because of this requirement:\r\n\r\n<img width=\"400\" alt=\"SCR-20240806-lhks\" src=\"https://github.com/user-attachments/assets/2c432e1e-4766-4d6f-b64a-7313e312b7e7\">\r\n\r\ncc @sablier-labs/frontend for feedback","createdAt":"2024-08-06T09:35:08Z","labels":["priority: 2","effort: medium","type: docs","work: clear","stale"],"number":169,"repository":"sablier-labs/docs","state":"closed","title":"Admonition about lowercasing addresses in subgraph APIs","type":"issue","updatedAt":"2025-08-10T10:40:00Z","url":"https://github.com/sablier-labs/docs/issues/169"},{"author":"razgraf","body":"A user made me realize we should add a note in the [deployments](https://docs.sablier.com/contracts/v2/deployments) page that mentions what aliases we used for each version of the contracts.\r\n\r\n<img width=\"1020\" alt=\"Screenshot 2024-07-26 at 14 58 36\" src=\"https://github.com/user-attachments/assets/0a0ab281-b0c0-4865-8433-51be0bfe1b28\">\r\n\r\nMaybe we can provide a table in this info box where we could say something like: \r\n\r\n> [!NOTE]\r\n> Came here looking for the previous V2 deployments? Click below to see previous versions as well as in-app aliases assigned under our naming [convention](https://docs.sablier.com/api/subgraphs/protocol/structure#identifying).\r\n> \r\n> | Version | Aliases |\r\n> | --- | --- |\r\n> | v2.2 (current) |  LD3 (Lockup Dynamic), LL3 (Lockup Linear), LT3 (Lockup Tranched) |\r\n> | [v2.1](https://docs.sablier.com/contracts/v2/deployments/v2.1) |  LD2 (Lockup Dynamic), LL2 (Lockup Linear) |\r\n> | [v2.0](https://docs.sablier.com/contracts/v2/deployments/v2.1)  |  LD (Lockup Dynamic), LL (Lockup Linear) |\r\n>\r\n> Or maybe you're looking for V1? [Click here](https://docs.sablier.com/contracts/v1/deployments).","createdAt":"2024-07-26T12:06:35Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":166,"repository":"sablier-labs/docs","state":"closed","title":"Include a note in Deployment Addresses about app-level aliases","type":"issue","updatedAt":"2024-08-15T09:14:36Z","url":"https://github.com/sablier-labs/docs/issues/166"},{"author":"PaulRBerg","body":"Similar to https://github.com/sablier-labs/docs/issues/163, but for Transferability.","createdAt":"2024-07-24T09:59:43Z","labels":["effort: medium","priority: 1","work: clear"],"number":164,"repository":"sablier-labs/docs","state":"closed","title":"Add section about \"Transferability\" under \"Concepts\"","type":"issue","updatedAt":"2024-07-24T15:39:24Z","url":"https://github.com/sablier-labs/docs/issues/164"},{"author":"PaulRBerg","body":"It would be helpful to add a section about Cancelability in the Concepts section.\r\n\r\nWe keep getting questions about this:\r\n\r\n<img width=\"350\" alt=\"SCR-20240724-lnle\" src=\"https://github.com/user-attachments/assets/a1bc3710-534b-4f67-b893-f7a5c719042e\">\r\n","createdAt":"2024-07-24T09:50:25Z","labels":["effort: medium","priority: 1","work: clear"],"number":163,"repository":"sablier-labs/docs","state":"closed","title":"Add section about \"Cancelability\" under \"Concepts\"","type":"issue","updatedAt":"2024-07-24T15:31:11Z","url":"https://github.com/sablier-labs/docs/issues/163"},{"author":"smol-ninja","body":"The appropriate section would be [Apps](https://docs.sablier.com/apps/overview) since the geoblocking can only apply to the interface.","createdAt":"2024-07-23T13:12:10Z","labels":["effort: medium","priority: 1","type: docs","work: clear"],"number":162,"repository":"sablier-labs/docs","state":"closed","title":"Add information about geographical restrictions in Airstreams","type":"issue","updatedAt":"2024-12-24T07:32:51Z","url":"https://github.com/sablier-labs/docs/issues/162"},{"author":"PaulRBerg","body":"The `lint:check` command doesn't work:\r\n\r\n```\r\nParsing error: Named export 'parse' not found. The requested module 'micromark' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from 'micromark';\r\nconst { parse, postprocess, preprocess } = pkg;eslint\r\n```\r\n\r\nI spent a little bit of time trying to figure this out, but I couldn't get to the bottom of it.","createdAt":"2024-07-05T12:57:24Z","labels":["priority: 2","effort: medium","type: bug","work: complicated"],"number":158,"repository":"sablier-labs/docs","state":"closed","title":"Named export 'parse' not found","type":"issue","updatedAt":"2024-07-05T13:08:56Z","url":"https://github.com/sablier-labs/docs/issues/158"},{"author":"smol-ninja","body":"After v2.2 has been released, update the screenshots on [etherscan page](https://docs.sablier.com/contracts/v2/guides/etherscan) to reflect the v2.2 functions.","createdAt":"2024-07-04T15:38:49Z","labels":["effort: medium","priority: 0","type: docs","work: clear"],"number":157,"repository":"sablier-labs/docs","state":"closed","title":"Use latest screenshots on etherscan page","type":"issue","updatedAt":"2024-07-05T15:38:38Z","url":"https://github.com/sablier-labs/docs/issues/157"},{"author":"smol-ninja","body":"We have been asked on several occasions why did we prefer `SD59x18` over `UD60x18` for segment amount in Lockup dynamic calculations.\r\n\r\nTherefore, document its important in the Sablier docs.","createdAt":"2024-05-27T14:29:58Z","labels":["effort: medium","priority: 1","type: docs","work: clear"],"number":153,"repository":"sablier-labs/docs","state":"closed","title":"Mention the importance of using `SD59x18` in Lockup Dynamic","type":"issue","updatedAt":"2024-07-03T20:28:20Z","url":"https://github.com/sablier-labs/docs/issues/153"},{"author":"PaulRBerg","body":"The current value is 300, but it is not documented anywhere.\r\n\r\nWhen we deploy the new contracts, we will have different values for each chain.\r\n\r\nhttps://github.com/sablier-labs/v2-core/issues/872","createdAt":"2024-05-27T09:46:03Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":152,"repository":"sablier-labs/docs","state":"closed","title":"Document \"MAX_SEGMENT_COUNT\" and \"MAX_TRANCHE_COUNT\"","type":"issue","updatedAt":"2024-07-12T08:26:37Z","url":"https://github.com/sablier-labs/docs/issues/152"},{"author":"PaulRBerg","body":"See Optimism's guide:\r\n\r\nhttps://docs.optimism.io/connect/contribute/style-guide","createdAt":"2024-05-21T14:40:13Z","labels":["effort: medium","priority: 3","type: docs","work: clear"],"number":150,"repository":"sablier-labs/docs","state":"open","title":"Docs style guide","type":"issue","updatedAt":"2025-06-01T03:36:17Z","url":"https://github.com/sablier-labs/docs/issues/150"},{"author":"PaulRBerg","body":"This ain't easy.\r\n\r\nOngoing work: https://gist.github.com/PaulRBerg/53e8e1a502a11de12b1aa686f400fbab\r\n\r\nReferences:\r\n\r\n- https://eslint.org/docs/latest/use/migrate-to-9.0.0\r\n- https://eslint.org/docs/latest/use/configure/migration-guide","createdAt":"2024-04-30T11:37:35Z","labels":["effort: high","priority: 3","type: build","work: complicated","stale"],"number":145,"repository":"sablier-labs/docs","state":"closed","title":"Upgrade to ESLint V9","type":"issue","updatedAt":"2025-05-04T10:33:26Z","url":"https://github.com/sablier-labs/docs/issues/145"},{"author":"maxdesalle","body":"![CleanShot 2024-04-26 at 20 46 02@2x](https://github.com/sablier-labs/docs/assets/70470326/c022d29c-8380-46c3-a5a9-be4dd11d30e8)\r\n","createdAt":"2024-04-27T12:03:20Z","labels":["priority: 2","effort: medium"],"number":143,"repository":"sablier-labs/docs","state":"closed","title":"Add gas costs for the different types of streams","type":"issue","updatedAt":"2024-04-28T16:22:22Z","url":"https://github.com/sablier-labs/docs/issues/143"},{"author":"razgraf","body":"The task is to add informational notes in the Airstreams and CSV docs (the client app guides) about the date formats we're using and how they're transformed (e.g. mention we take the date from the CSV and process it using the locales of the client's device).\r\n\r\nContext: this is informed by a user request for clarity around dates being local vs. UTC","createdAt":"2024-04-18T12:23:43Z","labels":[],"number":141,"repository":"sablier-labs/docs","state":"closed","title":"Document times in the Airstream docs","type":"issue","updatedAt":"2024-04-25T19:53:56Z","url":"https://github.com/sablier-labs/docs/issues/141"},{"author":"andreivladbrg","body":"The idea is to mention that you can't have the same Airstream Campaign deployed twice, this is due to how CREATE2 works and the fact we hash in the salt all relevant parameters.","createdAt":"2024-04-04T11:37:40Z","labels":["priority: 1","effort: low","type: docs"],"number":140,"repository":"sablier-labs/docs","state":"closed","title":"Add more informations about Airstream Campaigns unicity","type":"issue","updatedAt":"2024-07-03T20:28:57Z","url":"https://github.com/sablier-labs/docs/issues/140"},{"author":"smol-ninja","body":"Currently, Vercel only deploys the production website for docs, the deployment for the preview website fails because customs builds are ignored in its configurations.\r\n\r\n<img width=\"868\" alt=\"Screenshot 2024-04-03 at 17 25 51\" src=\"https://github.com/sablier-labs/docs/assets/6676622/7ed21c33-4519-44ed-9e2c-f04ca9401a83\">\r\n\r\n\r\nHowever, It would be useful to deploy a preview version of the website for new PRs.\r\n\r\nRelated https://github.com/sablier-labs/docs/pull/138.","createdAt":"2024-04-03T16:26:40Z","labels":["priority: 2","type: build","effort: low","work: clear"],"number":139,"repository":"sablier-labs/docs","state":"closed","title":"Deploy preview for new PRs","type":"issue","updatedAt":"2024-04-14T17:08:32Z","url":"https://github.com/sablier-labs/docs/issues/139"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-core/discussions/1159\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **smol-ninja** January 23, 2025</sup>","createdAt":"2025-01-24T09:10:57Z","labels":["priority: 0","type: refactor","work: clear","effort: medium"],"number":1160,"repository":"sablier-labs/lockup","state":"closed","title":"Remove precompiles from the Lockup repo","type":"issue","updatedAt":"2025-01-24T15:04:29Z","url":"https://github.com/sablier-labs/lockup/issues/1160"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/company-discussions/discussions/97","createdAt":"2025-01-22T10:31:30Z","labels":["type: refactor","priority: 2","work: clear","effort: medium"],"number":1157,"repository":"sablier-labs/lockup","state":"closed","title":"Remove Broker functionality","type":"issue","updatedAt":"2025-02-07T12:52:40Z","url":"https://github.com/sablier-labs/lockup/issues/1157"},{"author":"andreivladbrg","body":"Add the new release in the `CHANGELOG.md`","createdAt":"2025-01-16T17:26:30Z","labels":["priority: 0","type: docs","effort: low","work: clear"],"number":1151,"repository":"sablier-labs/lockup","state":"closed","title":"Update `CHANGELOG` file with `v2.0.0`","type":"issue","updatedAt":"2025-01-20T14:04:30Z","url":"https://github.com/sablier-labs/lockup/issues/1151"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/multichain-deployer/issues/5","createdAt":"2025-01-16T13:59:17Z","labels":["type: refactor","priority: 1","work: clear","effort: medium"],"number":1149,"repository":"sablier-labs/lockup","state":"closed","title":"Remove the DeploymentLogger once it is implemented in multichain script","type":"issue","updatedAt":"2025-01-20T13:52:42Z","url":"https://github.com/sablier-labs/lockup/issues/1149"},{"author":"andreivladbrg","body":"In the next deployments, we will need to include the `Helpers` and `VestingMath` libraries in the table.\n\nI’m not sure yet what the best method to address this will be, as the libraries are automatically deployed when deploying the `SablierLockup` contract (no return values for them). One idea is to find them in the `broadcast/<chain_id>/run-latest.run` file.","createdAt":"2025-01-14T15:43:25Z","labels":["type: refactor","priority: 1","work: clear","effort: medium"],"number":1147,"repository":"sablier-labs/lockup","state":"closed","title":"Update `DeploymentLogger` to include the libraries","type":"issue","updatedAt":"2025-01-16T12:00:58Z","url":"https://github.com/sablier-labs/lockup/issues/1147"},{"author":"smol-ninja","body":"Similar to [`withdrawMultiple`](https://github.com/sablier-labs/v2-core/blob/staging/src/abstracts/SablierLockupBase.sol#L489-L517), make `cancelMultiple` non-reverting by emitting an event if call to `cancel` fails.","createdAt":"2025-01-14T14:37:35Z","labels":["type: feature","priority: 2","work: clear","effort: medium"],"number":1146,"repository":"sablier-labs/lockup","state":"closed","title":"Make `cancelMultiple` non-reverting","type":"issue","updatedAt":"2025-02-11T16:08:06Z","url":"https://github.com/sablier-labs/lockup/issues/1146"},{"author":"smol-ninja","body":"See https://github.com/sablier-labs/v2-core/pull/1141#discussion_r1913053414\n\n```solidity\n// BEFORE\nuint256 internal defaultStreamId;\nuint256 internal notAllowedtoHookStreamId;\n\n// AFTER\nstruct StreamIDs {\n  uint256 default;\n  uint256 notAllowedToHook;\n}\nStreamIDs internal streamIds;\n\n// USING IT:\nfunction test_Foo() external {\n  streamIds.default;\n  streamIds.notAllowedToHook;\n}\n```\n","createdAt":"2025-01-13T11:49:28Z","labels":["priority: 2","type: test","effort: low","work: clear"],"number":1142,"repository":"sablier-labs/lockup","state":"closed","title":"Use struct to manage stream ID variables in tests","type":"issue","updatedAt":"2025-02-12T17:11:32Z","url":"https://github.com/sablier-labs/lockup/issues/1142"},{"author":"PaulRBerg","body":"It would be nice if we can get these refactors included in the current release (Lockup v2.0.0). I'll ask the auditors, but if they balk, I'd be OK with leaving this for v2.1.0\n\n- [x] Rename `VestingMath` to `StreamingMath`\n- [x] Shorten the model names to `LL`, `LT`, and `LD`\n  - [x] In this function series: from `calculateLockupLinearStreamedAmount` to `calculateStreamedAmountLL`\n  - [x] And from `checkCreateLockupLinear ` to `checkCreateLL`\n\nThere are two issues with the current names:\n\n1. We maintain a duplicity of naming modalities for the models: (i) the longer form (\"Lockup Linear\"), and (ii) the short form (\"LL\")\n2. There's an inconsistent ordering: some functions contain the model in the middle, while others contain it at as a suffix","createdAt":"2025-01-06T11:43:23Z","labels":["type: refactor","effort: low","work: clear","priority: 3"],"number":1134,"repository":"sablier-labs/lockup","state":"closed","title":"Renamings for consistency","type":"issue","updatedAt":"2025-02-17T14:43:04Z","url":"https://github.com/sablier-labs/lockup/issues/1134"},{"author":"smol-ninja","body":"While brainstorming https://github.com/sablier-labs/company-discussions/discussions/85, I came to realize that its super useful to return amounts in functions which transfer tokens:\n\n- [x] `cancel`\n- [x] `cancelMultiple`\n\nCurrently, it requires making two calls such as `refundableAmountOf` followed by `cancel`.\n\ncc @sablier-labs/solidity in case you have any objection.","createdAt":"2024-12-25T07:25:01Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1130,"repository":"sablier-labs/lockup","state":"closed","title":"Return `amount` in cancel functions","type":"issue","updatedAt":"2025-02-11T16:07:59Z","url":"https://github.com/sablier-labs/lockup/issues/1130"},{"author":"smol-ninja","body":"DRY'ify the code that looks similar to the following:\n\n```solidity\n// Allow the recipients to Hook.\nresetPrank({ msgSender: users.admin });\nlockup.allowToHook(address(recipientReverting));\nresetPrank({ msgSender: users.sender });\n```\n\nCurrently, `allowToHook` is called in the respective test contract. We should be able to move it in the `initializeRecipientsWithHooks` function in Integration contract.  Refer to https://github.com/sablier-labs/v2-core/pull/1126#discussion_r1895721142.","createdAt":"2024-12-23T17:46:11Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1129,"repository":"sablier-labs/lockup","state":"closed","title":"DRY'ify `allowToHook` calls by moving them to Integration","type":"issue","updatedAt":"2025-01-11T15:37:43Z","url":"https://github.com/sablier-labs/lockup/issues/1129"},{"author":"smol-ninja","body":"Now that we have a singleton contract, lets look into how the fork tests can be DRY'ified.\n\n- [LockupDynamic.t.sol](https://github.com/sablier-labs/v2-core/blob/staging/tests/fork/LockupDynamic.t.sol)\n- [LockupLinear.t.sol](https://github.com/sablier-labs/v2-core/blob/staging/tests/fork/LockupLinear.t.sol)\n- [LockupTranched.t.sol](https://github.com/sablier-labs/v2-core/blob/staging/tests/fork/LockupTranched.t.sol)\n\nThey seem to have [more than 90% common code](https://www.diffchecker.com/drUellHZ/). Any small change in one file requires doing it in all the files (see [this commit](https://github.com/sablier-labs/airdrops/commit/28409f43452212b1adb64f58525c5f54b290ecf9) in airdrops repo). If we are able to find a way to DRY'ify fork tests in Lockup, we can do the same with airdrops tests as well.","createdAt":"2024-12-23T12:34:36Z","labels":["effort: high","work: complex","priority: 2","type: test"],"number":1127,"repository":"sablier-labs/lockup","state":"closed","title":"DRY'ify fork tests through a shared contract","type":"issue","updatedAt":"2025-02-20T15:01:58Z","url":"https://github.com/sablier-labs/lockup/issues/1127"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/orgs/sablier-labs/discussions/13).\n\nThe task is to move the following logic to a separate `@sablier/solidity-utils` package/ repo (name TBD):\n\n- [x] [Adminable.sol](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/Adminable.sol)\n- [x] [NoDelegateCall.sol](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/NoDelegateCall.sol)\n- [x] [Batch.sol](https://github.com/sablier-labs/flow/blob/staging/src/abstracts/Batch.sol)\n- [x] Some portions of [Base.s.sol](https://github.com/sablier-labs/airdrops/blob/main/script/Base.s.sol)\n- [x] Some test files inherited by Flow from Lockup","createdAt":"2024-12-21T13:05:34Z","labels":["effort: epic","type: refactor","priority: 2","work: complicated"],"number":1125,"repository":"sablier-labs/lockup","state":"closed","title":"Move shared utilities to separate repository","type":"issue","updatedAt":"2025-02-11T15:23:18Z","url":"https://github.com/sablier-labs/lockup/issues/1125"},{"author":"PaulRBerg","body":"## Context\n\nI've recently [tweeted](https://x.com/PaulRBerg/status/1870044881533473179) about our batch function, and it turned out to be a productive exercise, as we have received a lot of great feedback in the replies.\n\n## Changes\n\nI've parsed through all replies, and I would like us to make the following changes to `batch`:\n\n- [x] Bubble up the revert (for better specificity when debugging errors, and not needing a Tenderly account to debug batch-related reverts in Sablier)\n- [x] Explain in the NatSpec comments that it is NOT safe to use `msg.value`; quote [this article](https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong)\n- [x] Return results in an array\n\n## Rationale\n\nWhy return the results?\n\n1. They provide critical information for onchain integrators. Imagine needing to know the stream IDs that have just been created. It's impossible to do that now when `batch` is used.\n2. The additional gas cost isn't much.\n\nI've made a gas comparison:\n\n- [Without returned results: 257,276](https://app.warp.dev/block/hh0SOGAzBcJMQJJfI9x2KT)\n- [With returned results: 261,698](https://app.warp.dev/block/vc2b6D03qqMDa0MRSCtVeO)\n\nSo it's only 4422 extra gas for creating two streams, i.e., extra ~2.2k gas per created streams. Small price to pay.\n\n## Resources\n\nCheck out [PRBProxy](https://github.com/PaulRBerg/prb-proxy) for inspiration on how to bubble up the revert, as well as this [StackExchange Q&A](https://ethereum.stackexchange.com/q/145042/24693).\n\nNote: unlike in PRBProxy, let's NOT revert with a custom error when the revert `response` is empty. Let's just bubble it up empty, as is.\n\n","createdAt":"2024-12-21T08:19:03Z","labels":["type: feature","type: refactor","priority: 1","work: clear","effort: medium"],"number":1124,"repository":"sablier-labs/lockup","state":"closed","title":"Important adjustments to the batch function","type":"issue","updatedAt":"2025-01-05T11:50:53Z","url":"https://github.com/sablier-labs/lockup/issues/1124"},{"author":"PaulRBerg","body":"I just noticed that the `batch` function in Lockup is not tested as comprehensively as in [Flow](https://github.com/sablier-labs/flow/blob/41a093fb5dd4347d190c8b2c9067877db250542b/tests/integration/concrete/batch/batch.t.sol#L4).\n\nAs Sam Sun argues in this [article](https://samczsun.com/two-rights-might-make-a-wrong/), two rights might make a wrong, i.e., the core Lockup functions might work fine by themselves, and the batch function might work fine by itself, but together they might break.","createdAt":"2024-12-21T07:48:20Z","labels":["priority: 2","type: test","work: clear","effort: medium"],"number":1123,"repository":"sablier-labs/lockup","state":"closed","title":"Test \"batch\" function more comprehensively with concrete tests","type":"issue","updatedAt":"2025-01-05T11:50:44Z","url":"https://github.com/sablier-labs/lockup/issues/1123"},{"author":"smol-ninja","body":"Same https://github.com/sablier-labs/flow/issues/353, include index in BatchError in order to trace down the failing call.","createdAt":"2024-12-21T06:12:01Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1122,"repository":"sablier-labs/lockup","state":"closed","title":"Revert BatchError with index","type":"issue","updatedAt":"2024-12-21T08:21:13Z","url":"https://github.com/sablier-labs/lockup/issues/1122"},{"author":"smol-ninja","body":"<sup>Originally proposed in https://github.com/sablier-labs/company-discussions/discussions/59 by @maxdesalle</sup>\r\n\r\n## Feature request\r\nAllow senders to grant permission to an array of addresses, to which non-transferrable streams can be transferred to.\r\n\r\n## Pseudo implementation\r\n\r\nFollowing is just an approximation. _Actual implementation should be at the discretion of the developer implementing it_.\r\n\r\n- [ ] Add a new storage variable\r\n```solidity\r\nmapping (address sender => address recipient => bool) public hasPermissionToReceive;\r\n```\r\n- [ ] Add two new sender only functions:\r\n\r\n```solidity\r\nfunction grantPermissionToReceive(address recipient) onlySender {\r\n  hasPermissionToReceive[msg.sender][recipient] = true;\r\n}\r\n\r\nfunction revokePermissionToReceive(address recipient) onlySender {\r\n  hasPermissionToReceive[msg.sender][recipient] = false;\r\n}\r\n```\r\n\r\nor maybe one to perform both:\r\n\r\n```solidity\r\nfunction managePermissionToReceive(address recipient, bool permission) onlySender {\r\n  hasPermissionToReceive[msg.sender][recipient] = permission;\r\n}\r\n```\r\n\r\n- [ ] Modify `_update` to include the following logic:\r\n\r\n```solidity\r\nif (!_streams[streamId].isTransferable && hasPermissionToReceive[_streams[streamId].sender][recipient]) {\r\n  return super._update(to, streamId, auth);\r\n}\r\nelse {\r\n  revert()\r\n}\r\n```\r\n\r\n## Some notes\r\n\r\n- This implementation grants permissions for all the streams created by the sender regardless of the underlying token.\r\n- This would be one-way transfer, i.e., once transferred to the approved address, the user cannot get it back. So, should we allow both ways or is it fine? cc @maxdesalle and @PaulRBerg.","createdAt":"2024-12-17T20:16:25Z","labels":["type: feature","priority: 1","work: clear","effort: medium"],"number":1119,"repository":"sablier-labs/lockup","state":"closed","title":"Manage permissions to transfer non-transferrable streams","type":"issue","updatedAt":"2024-12-19T12:14:04Z","url":"https://github.com/sablier-labs/lockup/issues/1119"},{"author":"andreivladbrg","body":"Based on this [comment](https://github.com/sablier-labs/v2-core/pull/1108#discussion_r1878200880) we need to need to fix some strings in the `tokenURI` function, and based on [this discussion](https://github.com/sablier-labs/v2-core/discussions/1109) we will remove backwards compatibility.\r\n","createdAt":"2024-12-11T16:06:54Z","labels":["priority: 0","type: refactor","effort: low","work: clear"],"number":1112,"repository":"sablier-labs/lockup","state":"closed","title":"Fix `tokenURI` function and remove backwards compatility","type":"issue","updatedAt":"2024-12-12T07:49:59Z","url":"https://github.com/sablier-labs/lockup/issues/1112"},{"author":"PaulRBerg","body":"I just noticed that this branch is not covered by any test:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/b2b33286d8411e0da49a2e7e3f632dafbd722951/src/LockupNFTDescriptor.sol#L80-L82\r\n\r\nSee [Codecov](https://app.codecov.io/gh/sablier-labs/v2-core/blob/staging/src%2FLockupNFTDescriptor.sol#L80).","createdAt":"2024-12-03T16:34:40Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1105,"repository":"sablier-labs/lockup","state":"closed","title":"Add a test to cover all branches in \"tokenURI\" function","type":"issue","updatedAt":"2024-12-09T14:27:34Z","url":"https://github.com/sablier-labs/lockup/issues/1105"},{"author":"andreivladbrg","body":"Foundry has released a new version which allows you to set up multiple profiles that are compiled simultaneously. Ref [here](https://x.com/gretzke/status/1861175241814282496).\r\n\r\nThus, we should remove these profiles:\r\n- https://github.com/sablier-labs/v2-core/blob/b5d35c40d1d411da81b8ba13ba2a1376126792b6/foundry.toml#L40\r\n- https://github.com/sablier-labs/v2-core/blob/b5d35c40d1d411da81b8ba13ba2a1376126792b6/foundry.toml#L83\r\n\r\nalso, we would be able to update the `deployConditionally` logic.\r\n\r\n---\r\n\r\nquestions: \r\n1. should we updated the CI reusables to not pass the foundry profile?\r\n2. @PaulRBerg should we keep the `smt` profiles anymore? we haven’t used them at all.","createdAt":"2024-12-02T13:53:13Z","labels":["type: build","priority: 2","work: clear","effort: medium"],"number":1103,"repository":"sablier-labs/lockup","state":"closed","title":"Get rid of \"optimized\" foundry profiles","type":"issue","updatedAt":"2025-07-23T12:41:25Z","url":"https://github.com/sablier-labs/lockup/issues/1103"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/airdrops/pull/5#discussion_r1850948897\r\n\r\nhttps://x.com/PaulRBerg/status/1849765766129737964","createdAt":"2024-11-21T09:28:38Z","labels":["priority: 2","effort: low","work: clear","type: chore"],"number":1092,"repository":"sablier-labs/lockup","state":"closed","title":"Use Etherscan V2 API keys","type":"issue","updatedAt":"2024-11-30T20:03:07Z","url":"https://github.com/sablier-labs/lockup/issues/1092"},{"author":"PaulRBerg","body":"https://github.com/sablier-labs/company-discussions/discussions/72#discussioncomment-11292236\r\n\r\n- [x] Mark all functions as `payable`.\r\n- [x] Do **NOT** emit the fee in any event because the withdraw function can be called in multiple ways, e.g, directly via `withdraw`, via `withdrawMultiple`, or via `batch`, which would make the accounting difficult to handle.\r\n\r\nWe will keep track of ETH transfers through other means, e.g., Etherscan, subgraphs, etc.","createdAt":"2024-11-18T13:52:10Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1090,"repository":"sablier-labs/lockup","state":"closed","title":"Make \"batch\" function payable","type":"issue","updatedAt":"2024-11-23T16:31:55Z","url":"https://github.com/sablier-labs/lockup/issues/1090"},{"author":"smol-ninja","body":"As reasoned in https://github.com/sablier-labs/v2-interfaces/issues/1178:\r\n\r\n- [x] Include a `shape` parameter of `string` valuetype in the common create parameters struct\r\n- [x] Emit it in Create events\r\n- [x] If not provided, use `\"\"`","createdAt":"2024-11-14T09:52:04Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1086,"repository":"sablier-labs/lockup","state":"closed","title":"Include a name string in Create parameters struct","type":"issue","updatedAt":"2024-11-26T14:20:39Z","url":"https://github.com/sablier-labs/lockup/issues/1086"},{"author":"andreivladbrg","body":"Since the getters test logic is very repetitive, we should move all tests into a single file, similar to flow:\r\n\r\nhttps://github.com/sablier-labs/flow/tree/main/tests/integration/concrete/getters","createdAt":"2024-11-08T20:26:02Z","labels":["priority: 2","type: test","work: clear","effort: medium"],"number":1081,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor getters similar to flow","type":"issue","updatedAt":"2024-11-13T22:25:19Z","url":"https://github.com/sablier-labs/lockup/issues/1081"},{"author":"PaulRBerg","body":"## Context\r\n\r\nAs discussed [here](https://github.com/sablier-labs/company-discussions/discussions/72#discussioncomment-11115807), we want to be able to monetize the Lockup streams by charging an ETH fee, since this is much easier than charging in USDC or the stream's token.\r\n\r\n## Spec\r\n\r\n- [x] Make all functions payable so that the UI can set a non-zero `msg.value`.\r\n- [x] Allow anyone to call `withdrawFees` function, and always transfer the ETH fees to the contract admin.\r\n\r\nNote: compared to the ETH fee in MerkleLockup, the fee in this proposal is *optional*. The goal is to keep the protocol free but monetize at the UI level — the Sablier UI would introduce a small ETH fee in the transactions signed by users.","createdAt":"2024-11-05T13:36:08Z","labels":["type: feature","effort: high","work: complex","priority: 1"],"number":1076,"repository":"sablier-labs/lockup","state":"closed","title":"ETH fee in withdraw function","type":"issue","updatedAt":"2024-11-23T16:31:45Z","url":"https://github.com/sablier-labs/lockup/issues/1076"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/v2-core/discussions/1064</sup>\r\n\r\nThe task is to write a singleton contract that can represent all lockup streams and see if its viable.","createdAt":"2024-10-31T10:54:01Z","labels":["type: feature","effort: epic","work: complex","priority: 1"],"number":1074,"repository":"sablier-labs/lockup","state":"closed","title":"Combine all Lockups into a singleton contract","type":"issue","updatedAt":"2024-11-13T22:18:23Z","url":"https://github.com/sablier-labs/lockup/issues/1074"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/v2-core/discussions/1068</sup>\r\n\r\n- [x] Place `SablierBatchLockup` into `core` directory\r\n- [x] Refactor tests","createdAt":"2024-10-31T09:49:29Z","labels":["effort: epic","type: refactor","priority: 1","work: clear"],"number":1073,"repository":"sablier-labs/lockup","state":"closed","title":"Place `SablierBatchLockup` and core contracts into `src` directory","type":"issue","updatedAt":"2024-11-20T11:51:35Z","url":"https://github.com/sablier-labs/lockup/issues/1073"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/v2-core/discussions/1068</sup>\r\n\r\nRemove merkle lockup contracts from this repo.","createdAt":"2024-10-31T09:46:25Z","labels":["effort: epic","type: refactor","priority: 1","work: clear"],"number":1072,"repository":"sablier-labs/lockup","state":"closed","title":"Remove Merkle Lockup contracts from this repo","type":"issue","updatedAt":"2024-11-21T11:38:58Z","url":"https://github.com/sablier-labs/lockup/issues/1072"},{"author":"andreivladbrg","body":"The idea is to no longer skip these tests after we finish all changes related to 2.0.0:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/997444866a2f9279ffe4bdde59462e4598d6d87e/test/core/integration/concrete/lockup-dynamic/token-uri/tokenURI.t.sol#L20-L24\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/997444866a2f9279ffe4bdde59462e4598d6d87e/test/core/integration/concrete/lockup-tranched/token-uri/tokenURI.t.sol#L20-L25\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/997444866a2f9279ffe4bdde59462e4598d6d87e/test/core/integration/concrete/lockup-linear/token-uri/tokenURI.t.sol#L20-L24","createdAt":"2024-10-30T23:14:13Z","labels":["type: test","work: clear","priority: 3","effort: medium"],"number":1071,"repository":"sablier-labs/lockup","state":"closed","title":"Change contract address and expected token URI strings in tests","type":"issue","updatedAt":"2024-12-12T07:50:12Z","url":"https://github.com/sablier-labs/lockup/issues/1071"},{"author":"smol-ninja","body":"","createdAt":"2024-10-21T12:09:57Z","labels":["type: build","effort: low","work: clear","priority: 3"],"number":1067,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to PRBMath v4.1.0","type":"issue","updatedAt":"2024-11-19T16:27:30Z","url":"https://github.com/sablier-labs/lockup/issues/1067"},{"author":"PaulRBerg","body":"See context on [Slack](https://sablier.slack.com/archives/CT3NXSNMS/p1728984591815089).","createdAt":"2024-10-15T11:21:00Z","labels":["type: docs","priority: 2","effort: low","work: clear"],"number":1065,"repository":"sablier-labs/lockup","state":"closed","title":"Add assumption about centralized tokens with admin powers","type":"issue","updatedAt":"2024-10-23T11:17:03Z","url":"https://github.com/sablier-labs/lockup/issues/1065"},{"author":"andreivladbrg","body":"As discussed here https://github.com/sablier-labs/v2-core/pull/1021 and the new repo created https://github.com/sablier-labs/deploy-multi-chain, we shall remove the bash script:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/staging/shell/deploy-multi-chain.sh","createdAt":"2024-10-09T20:04:03Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":1059,"repository":"sablier-labs/lockup","state":"closed","title":"Remove deploy multi chain bash script","type":"issue","updatedAt":"2024-11-07T22:45:21Z","url":"https://github.com/sablier-labs/lockup/issues/1059"},{"author":"lantianlaoli","body":"I'm trying to achieve it (https://github.com/sablier-labs/v2-core/issues/1052)\r\nThe only change to the origin code is change the `renounce` function's visibility `external` to `public`.\r\n```\r\n/// @inheritdoc ISablierV2Lockup\r\n    function renounce(uint256 streamId) public override noDelegateCall notNull(streamId)\r\n```\r\n\r\nThe other change  are newly added code. Please refer to my fork repo for details.(https://github.com/cxp-13/v2-core.git)\r\n\r\n```\r\nPS E:\\solidity_open_source_projects\\v2-core> forge -V\r\nforge 0.2.0 (ef1989d 2023-12-10T13:42:34.571002000Z)\r\n```\r\n\r\nwhen I  execute `forge test --match-contract Renounce_LockupDynamic_Integration_Concrete_Test  -vvv`.\r\nconsole shows:\r\n\r\n<details><summary>Toggle to see logs</summary>\r\n<p>\r\n\r\n```\r\nPS E:\\solidity_open_source_projects\\v2-core> forge test --match-contract Renounce_LockupDynamic_Integration_Concrete_Test  -vvv       \r\n[⠑] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 8 tests for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:Renounce_LockupDynamic_Integration_Concrete_Test\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_Renounce() (gas: 273699)\r\nTraces:\r\n  [273699] Renounce_LockupDynamic_Integration_Concrete_Test::test_Renounce()\r\n    ├─ [0] VM::warp(1714517999 [1.714e9])\r\n    │   └─ ← ()\r\n    ├─ [229592] LockupDynamic::31df3d48(00000000000000000000000000000000000000000000000000000000000000200000000000000000000000006332e7b1deb1f1a0b77b2bb18b144330c7291bca00000000000000000000000003a6a84cd762d9707a21605b548aaab891562aab00000000000000000000000000000000000000000000021fbb76e79bace171bf000000000000000000000000a4ad4f68d0b91cfd19687c881e50f3a00242828c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000066341af00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000142daaefac3480821d046ebae9a2c00b614f9dc0000000000000000000000000000000000000000000000000000aa87bee53800000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000878678326eac9000000000000000000000000000000000000000000000000000002b93855d12ba000000000000000000000000000000000000000000000000000000000000663424b40000000000000000000000000000000000000000000001969368974c05b0000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000066344200)\r\n    │   ├─ emit MetadataUpdate(_tokenId: 2)\r\n    │   ├─ emit Transfer(from: 0x0000000000000000000000000000000000000000, to: Good Recipient: [0x03A6a84cD762D9707A21605b548aaaB891562aAb], tokenId: 2)\r\n    │   ├─ [15318] DAI::transferFrom(Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898], 10000000000000000000000 [1e22])\r\n    │   │   ├─ emit Transfer(from: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], to: LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898], value: 10000000000000000000000 [1e22])\r\n    │   │   └─ ← true\r\n    │   ├─ [8518] DAI::transferFrom(Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], Broker: [0x142daAEFAc3480821D046eBAe9a2C00b614F9dC0], 30090270812437311935 [3.009e19])\r\n    │   │   ├─ emit Transfer(from: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], to: Broker: [0x142daAEFAc3480821D046eBAe9a2C00b614F9dC0], value: 30090270812437311935 [3.009e19])\r\n    │   │   └─ ← true\r\n    │   ├─ emit CreateLockupDynamicStream(streamId: 2, funder: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], sender: Sender: [0x6332e7b1DeB1F1a0b77b2bB18B144330c7291BCA], recipient: Good Recipient: [0x03A6a84cD762D9707A21605b548aaaB891562aAb], amounts: CreateAmounts({ deposit: 10000000000000000000000 [1e22], brokerFee: 30090270812437311935 [3.009e19] }), asset: DAI: [0xA4AD4f68d0b91CFD19687c881e50f3A00242828c], cancelable: true, transferable: true, segments: [Segment({ amount: 2500000000000000000000 [2.5e21], exponent: 3140000000000000000 [3.14e18], timestamp: 1714693300 [1.714e9] }), Segment({ amount: 7500000000000000000000 [7.5e21], exponent: 500000000000000000 [5e17], timestamp: 1714700800 [1.714e9] })], timestamps: Timestamps({ start: 1714690800 [1.714e9], end: 1714700800 [1.714e9] }), broker: Broker: [0x142daAEFAc3480821D046eBAe9a2C00b614F9dC0])\r\n    │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000002\r\n    ├─ [0] VM::expectEmit(LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898])\r\n    │   └─ ← ()\r\n    ├─ emit RenounceLockupStream(streamId: 2)\r\n    ├─ [0] VM::expectEmit(LockupDynamic: [0x49c3486EC9f488230dD85FAc098929AeA9a3A898])\r\n    │   └─ ← ()\r\n    ├─ emit MetadataUpdate(_tokenId: 2)\r\n    ├─ [4355] LockupDynamic::renounce(2)\r\n    │   ├─ emit RenounceLockupStream(streamId: 2)\r\n    │   ├─ emit MetadataUpdate(_tokenId: 2)\r\n    │   └─ ← ()\r\n    ├─ [1494] LockupDynamic::isCancelable(2) [staticcall]\r\n    │   └─ ← 0x0000000000000000000000000000000000000000000000000000000000000000\r\n    ├─ [0] VM::assertFalse(false, \"isCancelable\") [staticcall]\r\n    │   └─ ← unknown selector `0x7ba04809` for VmCalls\r\n    └─ ← unknown selector `0x7ba04809` for VmCalls\r\n\r\n[PASS] test_RevertGiven_Null() (gas: 11214)\r\n[PASS] test_RevertGiven_StatusCanceled() (gas: 87726)\r\n[PASS] test_RevertGiven_StatusDepleted() (gas: 63282)\r\n[PASS] test_RevertGiven_StatusSettled() (gas: 24947)\r\n[PASS] test_RevertGiven_StreamNotCancelable() (gas: 635254)\r\n[PASS] test_RevertWhen_CallerNotSender() (gas: 268510)\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_RevertWhen_DelegateCalled() (gas: 11794)\r\nTraces:\r\n  [11794] Renounce_LockupDynamic_Integration_Concrete_Test::test_RevertWhen_DelegateCalled()\r\n    ├─ [0] VM::warp(1714517999 [1.714e9])\r\n    │   └─ ← ()\r\n    ├─ [400] LockupDynamic::renounce(1) [delegatecall]\r\n    │   └─ ← custom error a1c0d6e5:\r\n    ├─ [0] VM::assertFalse(false, \"delegatecall success\") [staticcall]\r\n    │   └─ ← unknown selector `0x7ba04809` for VmCalls\r\n    └─ ← unknown selector `0x7ba04809` for VmCalls\r\n\r\nTest result: FAILED. 6 passed; 2 failed; 0 skipped; finished in 13.71ms\r\n\r\nRan 1 test suites: 6 tests passed, 2 failed, 0 skipped (8 total tests)\r\n\r\nFailing tests:\r\nEncountered 2 failing tests in test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:Renounce_LockupDynamic_Integration_Concrete_Test\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_Renounce() (gas: 273699)\r\n[FAIL. Reason: unknown selector `0x7ba04809` for VmCalls] test_RevertWhen_DelegateCalled() (gas: 11794)\r\n\r\nEncountered a total of 2 failing tests, 6 tests succeeded\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\nThis issue also occurs in `test\\integration\\concrete\\lockup\\cancel-multiple\\cancelMultiple.t.sol`.  \r\nThere were no issues with the testing of functions other than `test_SevertWhen_DelegateCalled`.\r\n\r\n<details><summary>Toggle to see logs</summary>\r\n<p>\r\n\r\n```\r\nPS E:\\solidity_open_source_projects\\v2-core> forge test --match-test test_RevertGiven_OnlyNull                                 \r\n[⠑] Compiling...\r\nNo files changed, compilation skipped\r\n\r\nRunning 1 test for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:RenounceMultiple_LockupDynamic_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12075)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 13.68ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-linear/LockupLinear.t.sol:WithdrawMultiple_LockupLinear_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 20650)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 12.64ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:CancelMultiple_LockupDynamic_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12111)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 14.28ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-tranched/LockupTranched.t.sol:CancelMultiple_LockupTranched_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12066)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 14.83ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-dynamic/LockupDynamic.t.sol:WithdrawMultiple_LockupDynamic_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 20672)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 14.99ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-linear/LockupLinear.t.sol:CancelMultiple_LockupLinear_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 12111)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 11.65ms\r\n\r\nRunning 1 test for test/integration/concrete/lockup-tranched/LockupTranched.t.sol:WithdrawMultiple_LockupTranched_Integration_Concrete_Test\r\n[PASS] test_RevertGiven_OnlyNull() (gas: 20606)\r\nTest result: ok. 1 passed; 0 failed; 0 skipped; finished in 12.37ms\r\n\r\nRan 7 test suites: 7 tests passed, 0 failed, 0 skipped (7 total tests)\r\n```\r\n\r\n</p>\r\n</details> ","createdAt":"2024-10-09T14:18:18Z","labels":[],"number":1057,"repository":"sablier-labs/lockup","state":"closed","title":"unknown selector `0x7ba04809` for VmCalls","type":"issue","updatedAt":"2024-10-09T21:54:40Z","url":"https://github.com/sablier-labs/lockup/issues/1057"},{"author":"PaulRBerg","body":"Implement a general-purpose \"batch\" function in Lockup similar to [the `batch` function in Flow](https://github.com/sablier-labs/flow/blob/5c7a2b79f6f0780b509ce3913dad6c2d80c65fb7/src/abstracts/Batch.sol#L16-L25).\r\n\r\nNotes: this doesn't mean we should remove the `BatchLockup` contract. We should keep that for gas optimization purposes, backward-compatibility, and better UX/developer experience.","createdAt":"2024-10-07T13:01:55Z","labels":["type: feature","priority: 2","work: clear","effort: medium"],"number":1053,"repository":"sablier-labs/lockup","state":"closed","title":"Implement general-purpose \"batch\" function in Lockup","type":"issue","updatedAt":"2024-11-01T13:42:27Z","url":"https://github.com/sablier-labs/lockup/issues/1053"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/v2-core/discussions/1030#discussioncomment-10812780), we should implement a `renounceMultiple` function in `SablierV2Lockup` in order to allow senders to batch-renounce streams.","createdAt":"2024-10-07T12:40:13Z","labels":["type: feature","priority: 2","work: clear","effort: medium"],"number":1052,"repository":"sablier-labs/lockup","state":"closed","title":"Implement \"renounceMultiple\"","type":"issue","updatedAt":"2024-11-20T11:58:00Z","url":"https://github.com/sablier-labs/lockup/issues/1052"},{"author":"PaulRBerg","body":"Modify the check [here](https://github.com/sablier-labs/v2-core/blob/f84a53de1b6d51b62ac205ac38c6a9721419ba2e/src/abstracts/SablierV2Lockup.sol#L425-L428) to call `_isCallerStreamRecipientOrApproved` instead of checking just the recipient.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-core/discussions/1050\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **gabrielstoica** October  4, 2024</sup>\r\nHey, \r\n\r\nI'm looking for a way to withdraw a stream and transfer it to another recipient in a programmatic way, through an intermediary contract (aka Stream Management contract - see [this discussion](https://github.com/sablier-labs/v2-core/discussions/977)).\r\nAs stated in [this discussion](https://github.com/sablier-labs/v2-core/discussions/669) on NFT transferability, only the stream recipient can toggle the transfer - through the `withdrawMaxAndTransfer` method which [checks](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/SablierV2Lockup.sol#L424-L428) if the `msg.sender` is the current recipient.\r\n\r\nHowever, this can be bypassed through a 3-step process, as follows:\r\n1. Approve the intermediary contract to transfer the stream's NFT by calling the `SablierV2Lockup.approve` method;\r\n2. Withdraw the maximum withdrawable amount from the stream by calling the `withdrawMax` method;\r\n3. Transfer the NFT by calling the `transferFrom` exposed by the `SablierV2Lockup` implementation;\r\n\r\nWith all that said, should only the stream recipient be able to transfer the NFT? If so, the workflow above should not be allowed. Otherwise, if that's not an issue, is there another way to accomplish it?\r\n\r\nThanks!</div>","createdAt":"2024-10-04T10:53:29Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":1051,"repository":"sablier-labs/lockup","state":"closed","title":"The NFT operator should be allowed to call \"withdrawMaxAndTransfer\"","type":"issue","updatedAt":"2024-10-08T19:33:27Z","url":"https://github.com/sablier-labs/lockup/issues/1051"},{"author":"PaulRBerg","body":"Starting [Solidity v0.8.21](https://github.com/ethereum/solidity/releases/tag/v0.8.21), events can be emitted from interface files.\r\n\r\nSo we can get rid of the `Events.t.sol` file and duplicated events there and instead import the interface files from `src`.","createdAt":"2024-09-19T11:13:11Z","labels":["priority: 2","type: test","effort: low","work: clear"],"number":1045,"repository":"sablier-labs/lockup","state":"closed","title":"Get rid of \"Events\" helper in tests","type":"issue","updatedAt":"2024-11-01T12:55:36Z","url":"https://github.com/sablier-labs/lockup/issues/1045"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-core/discussions/903\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **smol-ninja** April 16, 2024</sup>\r\n> [!IMPORTANT]  \r\n> The below proposal is for future release of Lockup and not v2.2.\r\n\r\nContext\r\n---------\r\nIn the current design of Lockup linear, the amount unlocked at `cliff` is a function of the time elapsed. That is, if the cliff timestamp is 30% ahead of the start time, this would unlock 30% of the total amount at the cliff. This makes it less flexible for creating a cliff linear vesting.\r\n\r\n> [!NOTE]  \r\n> In a cliff linear vesting, token distributions include a preset amount unlocked at the cliff followed by a linear distribution. The amount unlocks at the cliff can be any and does not need to follow the curve slope.\r\n\r\nExisting solution\r\n---------\r\nA Cliff linear vesting can be created using Lockup Dynamic (LD). It has a few problems:\r\n1. It is not intuitive to use LD for creating Linear streams with cliffs.\r\n2. Creating a cliff linear vesting stream is less gas efficient (same argument as [why we chose to implement lockup tranched](https://github.com/sablier-labs/company-discussions/discussions/19)). \r\n3. Despite having a cliff feature in Lockup Linear (LL), it does not support Cliff linear vesting. \r\n\r\nProposed solution\r\n---------\r\nModify the Lockup Linear design to allow the creation of cliff linear vesting streams. So that,\r\n1. LL can be used to create streams with unlocks instantly followed by a linear curve (as requested by one of our users). \r\n2. LL can be used to create a stream with a fixed amount of unlock at a cliff time followed by a linear curve.\r\n3. it becomes more gas-efficient than doing the same with LD.\r\n4. Existing curves such as Unlock-cliff and Unlock-linear on Sablier UI will become gas efficient. Because they are created using LD at present. \r\n\r\nWe might also add two percentages representing: (i) instant unlocked amount (ii) cliff amount.\r\n\r\n```python\r\nif block.timestamp < cliffTime:\r\n    streamedAmount = deposited * instantUnlockPct # instant unlocked amount\r\nelse:\r\n    # elapsed time is defined from cliff time\r\n    elapsedTime = (block.timestamp - cliffTime) / (endTime - cliffTime)\r\n    streamedAmount = deposited * instantUnlockPct # instant unlocked amount\r\n                   + deposited * cliffUnlockPct  # cliff unlocked amount\r\n                    # stream linearly from cliff time\r\n                   + deposited * (1 - instantUnlockPct - cliffUnlockPct) * elapsedTime\r\n```","createdAt":"2024-09-16T11:58:43Z","labels":["type: feature","effort: epic","priority: 1","work: complicated"],"number":1043,"repository":"sablier-labs/lockup","state":"closed","title":"Instant unlock + more flexible cliff in LockupLinear","type":"issue","updatedAt":"2024-11-19T16:27:17Z","url":"https://github.com/sablier-labs/lockup/issues/1043"},{"author":"PaulRBerg","body":"## Problem\n\nThe `OR` clauses in our GraphQL queries contain repeated logic in the `AND` sub-clauses — this leads to a high maintenance cost for devs, and an impaired performance for the GraphQL engine (because each sub-clause needs to be parsed independently):\n\nhttps://github.com/sablier-labs/interfaces/blob/cab40248a61f3823b425737f82b0314b14108c3c/packages/subgraphs/src/documents/flow/queries.ts#L521-L538\n\n## Solution\n\nDefine the common fields before the `OR` clause, like so:\n\n```graphql\nwhere: {\n  subgraphId_lt: $subgraphId\n  chainId:        $chainId\n  or: [\n    { sender:    $sender }\n    { recipient: $recipient }\n  ]\n}\n```","createdAt":"2025-05-29T11:44:44Z","labels":["priority: 2","effort: low","type: perf","work: clear"],"number":1653,"repository":"sablier-labs/interfaces","state":"open","title":"Simplify OR clauses in GraphQL queries","type":"issue","updatedAt":"2025-06-02T13:04:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1653"},{"author":"PaulRBerg","body":"## Problem\n\nThere is a lot of repeated logic in our GraphQL queries, e.g. the `getStreams` queries for Flow are mostly the same except for the `where: {} `filters:\n\nhttps://github.com/sablier-labs/interfaces/blob/cab40248a61f3823b425737f82b0314b14108c3c/packages/subgraphs/src/documents/flow/queries.ts#L259-L290\n\n\n## Solution\n\nWe can replace all those 17 separate queries (and a few related hooks) with a simple query that defines the `$where` clause as an input, like so:\n\n```typescript\nexport const getStreams = gql(/* GraphQL */ `\n  query getStreams($first: Int!, $skip: Int!, $where: Stream_filter!) {\n    streams(\n      first: $first\n      skip: $skip\n      orderBy: subgraphId\n      orderDirection: desc\n      where: $where\n    ) {\n      ...StreamFragment\n      actions(\n        orderBy: timestamp\n        orderDirection: desc\n        where: { category_in: [Create, Adjust, Pause, Void, Restart] }\n      ) {\n        ...ActionFragment\n      }\n    }\n  }\n`);\n```\n","createdAt":"2025-05-29T11:41:52Z","labels":["priority: 1","effort: high","type: refactor","work: complicated"],"number":1652,"repository":"sablier-labs/interfaces","state":"open","title":"DRY-ify GraphQL queries by using `$where` as an input","type":"issue","updatedAt":"2025-06-02T21:53:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1652"},{"author":"PaulRBerg","body":"We need this because:\n\n1. We will soon start using the [`@sablier/deployments`](https://npmjs.com/package/@sablier/deployments) package.\n2. In general, we should make a difference between public packages like `@sablier/deployments` and `@sablier/lockup` and private ones like the Interfaces package — so that we avoid accidentally publishing the code in this repo to npm.\n\n**Note**: the diff may be large and there may be git conflicts after merging this, but they will be relatively easy to fix. Just need to change `@sablier` to `@sablier-ui` everywhere, and doing this will be way easier to do now vs after installing `@sablier/deployments`.\n\n**Alternatives** considered: `@sab`, `@interfaces`, `@sab-ui`. I like `@sablier-ui` the most, but I wouldn't mind going with any any of these other options. The goal is to differentiate between the private packages and the public ones.\n\nIn terms of order of operations, let's wait for the Solana PR to be merged first: https://github.com/sablier-labs/interfaces/pull/1446\n\nContext: https://github.com/sablier-labs/interfaces/pull/1649","createdAt":"2025-05-29T10:43:47Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1651,"repository":"sablier-labs/interfaces","state":"open","title":"Rename package to `@sablier-ui`","type":"issue","updatedAt":"2025-05-29T10:44:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1651"},{"author":"maxdesalle","body":"(see second point)\n\n![Image](https://github.com/user-attachments/assets/3c334993-b4f6-42d0-a21a-cbadcae0b7f0)","createdAt":"2025-05-23T19:41:24Z","labels":["type: feature","effort: high","work: clear"],"number":1643,"repository":"sablier-labs/interfaces","state":"closed","title":"Label streams","type":"issue","updatedAt":"2025-07-18T13:11:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1643"},{"author":"PaulRBerg","body":"## Problem\n\nThere are users who want to cancel streams in bulk, a scenario that can arise when an airdrop campaign was misconfigured.\n\nHere's a recent example (a user called Octant):\n\n<img width=\"350\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/38e0e55f-4c31-443c-87cc-859ecdbd0189\" />\n\n## Solution\n\nAllow users to upload a CSV file with a list of stream IDs they would like to cancel.","createdAt":"2025-05-21T10:26:37Z","labels":["type: feature","priority: 2","work: clear"],"number":1640,"repository":"sablier-labs/interfaces","state":"open","title":"Upload CSV for batch canceling streams","type":"issue","updatedAt":"2025-05-23T15:31:44Z","url":"https://github.com/sablier-labs/interfaces/issues/1640"},{"author":"PaulRBerg","body":"## Context\n\nRequested by users (cc @sneg55):\n\n<img width=\"306\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e8b6ee17-783b-46ca-b48d-6646e4bba04e\" />\n\n## Implementation\n\nHeuristics:\n\n- Today's date is <=29, then N months in the future = the same date as in the current month\n- Today is 30, or 31, then N months in the future = 1st day of the N+1 month\n\nFurther notes:\n\n- We can keep all current pickers (Years, Days, Hours).\n- We can replace the defaults, e.g. instead of 2 days, add 1 month, 2 months, etc.","createdAt":"2025-05-15T11:27:28Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1636,"repository":"sablier-labs/interfaces","state":"open","title":"Allow months in the date picker","type":"issue","updatedAt":"2025-05-15T11:27:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1636"},{"author":"PaulRBerg","body":"From the [Prettier docs](https://prettier.io/docs/configuration):\n\n> The configuration file will be resolved starting from the location of the file being formatted, and searching up the file tree until a config file is (or isn’t) found.\n\nSo this path need not be passed here:\n\nhttps://github.com/sablier-labs/interfaces/blob/e5bb3e03eb932aa188ce339ee4a28c35b3361907/packages/hooks/package.json#L61-L62","createdAt":"2025-05-04T13:34:15Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1628,"repository":"sablier-labs/interfaces","state":"closed","title":"Delete superfluous Prettier config path in apps/packages","type":"issue","updatedAt":"2025-05-06T10:01:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1628"},{"author":"PaulRBerg","body":"Getting this error:\n\n> Failed to load schema from https://api.studio.thegraph.com/query/57079/sablier-v2-fl-experimental/version/latest: deployment `u57079/s76655/latest` does not exist\n> GraphQLError: deployment `u57079/s76655/latest` does not exist\n\nSee my terminal output:\n\nhttps://app.warp.dev/block/KL4X9CG3gXqLmo7t8xtd4L","createdAt":"2025-05-04T13:22:13Z","labels":["type: bug","priority: 1"],"number":1626,"repository":"sablier-labs/interfaces","state":"closed","title":"The \"generate\" scripts in the \"subgraphs\" package don't work","type":"issue","updatedAt":"2025-05-06T11:15:17Z","url":"https://github.com/sablier-labs/interfaces/issues/1626"},{"author":"PaulRBerg","body":"## Spec\n\nTBD\n\nPrioritized for Q3 or Q4.\n\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/577\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** September 5, 2023</sup>\n#### Context\n\nCustom shape generator tool to enable shapes that are not available by default in the Sablier Interface, but which can be implemented via the Sablier Protocol.","createdAt":"2025-04-25T08:53:24Z","labels":["type: feature","priority: 2","effort: epic","work: complicated"],"number":1617,"repository":"sablier-labs/interfaces","state":"open","title":"Custom shape generator UI for Vesting streams","type":"issue","updatedAt":"2025-04-25T08:53:36Z","url":"https://github.com/sablier-labs/interfaces/issues/1617"},{"author":"PaulRBerg","body":"## Problem\n\nThe _Unlock Linear_ and _Unlock Cliff_ shapes are technically capable of supporting arbitrary start times, but the UI doesn't emphasize this capability, and the wording confuses users.\n\n## Solution\n\n- [ ] Default to using fixed dates in the _Unlock Linear_ and _Unlock Cliff_ shapes\n- [ ] Ask users to provide the Start, Cliff, End (in this order). At the moment, users are asked to provide Start, End, Cliff.\n- [ ] Calculate the _Duration_ in the receipt by subtracting the end date from the present moment (as opposed to the `startTime`)\n- [ ] Update the wording to never say 'immediate' or 'initial'\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/cc9c9492-6bc9-42c5-9897-304ae29d38af\" />\n\n## Proof of Demand\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/116a839e-29a5-47d0-8c5a-6b6464276686\" />","createdAt":"2025-04-23T18:41:18Z","labels":["type: feature","priority: 1","resolution required","effort: medium","work: clear"],"number":1615,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the Unlock Linear and Unlock Cliff shapes more general purpose by emphasizing arbitrary start times","type":"issue","updatedAt":"2025-04-30T11:18:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1615"},{"author":"PaulRBerg","body":"The day has come that we have so many EVM deployments that not all appear by default in the chain picker — at least not on my MacBook Pro 14\":\n\n<img width=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/adf04e11-3a8d-4076-852a-b0dbf785ffed\" />","createdAt":"2025-04-19T18:56:45Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1611,"repository":"sablier-labs/interfaces","state":"closed","title":"Search function in chain picker","type":"issue","updatedAt":"2025-04-21T15:37:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1611"},{"author":"PaulRBerg","body":"e.g. [here](https://github.com/sablier-labs/interfaces/blob/941dcc04c32914a77bb4f7e28cef1aa7e845abf6/packages/constants/src/macros.ts)\n\n- [ ] Refactor `DEFAULT_` to `Default` namespace\n- [ ] Refactor `REQUEST_ID.airdrop` to `RequestID.AIRDROP`\n\n```typescript\nexport const Default = {\n    DECIMALS: 18\n}\n```","createdAt":"2025-04-19T08:25:25Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1610,"repository":"sablier-labs/interfaces","state":"closed","title":"Use PascalCase for structuring constants in a cleaner way","type":"issue","updatedAt":"2025-05-31T20:12:10Z","url":"https://github.com/sablier-labs/interfaces/issues/1610"},{"author":"PaulRBerg","body":"## Problem\n\nOur current parsing of the response received from `simulateAndRevert` doesn't disambiguate between successful and reverting txs (that is, if the tx being simulated were sent to the network, would it pass or revert).\n\nhttps://github.com/sablier-labs/interfaces/blob/941dcc04c32914a77bb4f7e28cef1aa7e845abf6/packages/contracts/src/framework/interact.ts#L368-L387\n\n## Solution\n\nDecode the boolean status from the funnily encoded data sent by Safe (it's the next EVM word after the gas estimate), and:\n\n- If it's `true`, proceed with the create tx.\n- If it's `false`, run the local validation checks to inform the user what's wrong in the CSV input.\n\ncc @gavriliumircea I'm not sure if the local validation checks are run before the simulation is made or after, but either way, this issue should still be implemented because it would serve as a 2nd line of defense against a potential bug in the local validation checker. Plus, it's a bad approach in principle to allow the user to continue submitting a tx that we know surely will revert (I mean, this will be caught by viem/Safe/Rabby/etc., but better catch it earlier).","createdAt":"2025-04-18T18:00:33Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":1607,"repository":"sablier-labs/interfaces","state":"closed","title":"Decode boolean status in response received from \"simulateAndRevert\"","type":"issue","updatedAt":"2025-04-30T11:18:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1607"},{"author":"PaulRBerg","body":"In a `CONTRIBUTING.md` file\n\ne.g. https://github.com/sablier-labs/lockup/blob/13750cac0f4cb4cc2edb98f5881fcf02d6bf5d08/CONTRIBUTING.md","createdAt":"2025-04-18T14:28:01Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":1604,"repository":"sablier-labs/interfaces","state":"open","title":"Add a contributor's guide","type":"issue","updatedAt":"2025-04-18T17:51:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1604"},{"author":"PaulRBerg","body":"So that everyone in the team can quickly understand the rationale. References to the issues I opened in Safe's GitHub repositories would also be helpful.\n\n- https://github.com/sablier-labs/interfaces/blob/270dd703115ba130c26ea971bb643b398f0b3467/packages/contracts/src/framework/interact.ts#L254\n- https://github.com/sablier-labs/interfaces/blob/270dd703115ba130c26ea971bb643b398f0b3467/packages/contracts/src/framework/interact.ts#L346-L352\n- https://github.com/sablier-labs/interfaces/blob/270dd703115ba130c26ea971bb643b398f0b3467/packages/contracts/src/framework/interact.ts#L363-L371\n\nAlso, the comments here are incorrect:\n\nhttps://github.com/sablier-labs/interfaces/blob/270dd703115ba130c26ea971bb643b398f0b3467/packages/contracts/src/framework/interact.ts#L263-L267","createdAt":"2025-04-17T18:42:16Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":1600,"repository":"sablier-labs/interfaces","state":"closed","title":"Explanatory comments for mission-critical logic in Safe","type":"issue","updatedAt":"2025-04-17T20:50:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1600"},{"author":"PaulRBerg","body":"## Problem\n\nReported by Primex, a user:\n\n<img width=\"250\" src=\"https://github.com/user-attachments/assets/548f7874-5c92-4026-9fd1-0354e9befa38\"/>\n\nI was able to reproduce the bug on Sepolia using the default CSV template:\n\n<details><summary>Toggle to see error logs</summary>\n<p>\n\n```\nCallExecutionError: Execution reverted for an unknown reason.\n\nRaw Call Arguments:\n  from:   0xCffBE584dDf60a122b59Ed2eC4C71B07B97699D2\n  to:     0xCffBE584dDf60a122b59Ed2eC4C71B07B97699D2\n  value:  0 ETH\n  data:   0xb4faba090000000000000000000000003d4ba2e0884aa488718476ca2fb8efc291a46199000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008241c5fb2110000000000000000000000009641d764fc13c8b624c04430c7356c1c7c8102e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000007648d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000071200776b6fc2ed15d6bb5fc32e0c89de68683118c62a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000b655ecd83d27f7c683a9605783bd2866a4dceb04000000000000000000000000000000000000314dc6448d9338c15b0a0000000000b655ecd83d27f7c683a9605783bd2866a4dceb04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006248f331574000000000000000000000000d116c275541cdbe7594a202bd6ae4dbca4578462000000000000000000000000776b6fc2ed15d6bb5fc32e0c89de68683118c62a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000cffbe584ddf60a122b59ed2ec4c71b07b97699d20000000000000000000000000298f4332e3857631385b39766325058a93e249f0000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003dcc5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c696e6561720000000000000000000000000000000000000000000000000000000000000000000000000000cffbe584ddf60a122b59ed2ec4c71b07b97699d20000000000000000000000000298f4332e3857631385b39766325058a93e249f000000000000000000000000000000000000000000000016ec38faa509ed000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ace800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c696e6561720000000000000000000000000000000000000000000000000000000000000000000000000000cffbe584ddf60a122b59ed2ec4c71b07b97699d20000000000000000000000000298f4332e3857631385b39766325058a93e249f0000000000000000000000000000000000000000000000487a9a3045394400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c29f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c696e656172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\nDetails: execution reverted\nVersion: viem@2.27.0\n    at d (_app-832e324d6eb1cb06.js:1675:71424)\n    at S (_app-832e324d6eb1cb06.js:1646:204323)\n    at async Y (_app-832e324d6eb1cb06.js:201:393005)\n    at async Object.X [as safeAllowAndSimulate] (_app-832e324d6eb1cb06.js:201:393519)\n    at async ar (_app-832e324d6eb1cb06.js:7:646426)\n    at async doProcess (_app-832e324d6eb1cb06.js:201:467282)Caused by: ExecutionRevertedError: Execution reverted for an unknown reason.\n\nDetails: execution reverted\nVersion: viem@2.27.0\n    at r (_app-832e324d6eb1cb06.js:1675:72285)\n    at _app-832e324d6eb1cb06.js:1675:71378\n    at d (_app-832e324d6eb1cb06.js:1675:71414)\n    at S (_app-832e324d6eb1cb06.js:1646:204323)\n    at async Y (_app-832e324d6eb1cb06.js:201:393005)\n    at async Object.X [as safeAllowAndSimulate] (_app-832e324d6eb1cb06.js:201:393519)\n    at async ar (_app-832e324d6eb1cb06.js:7:646426)\n    at async doProcess (_app-832e324d6eb1cb06.js:201:467282)Caused by: RpcRequestError: RPC Request failed.\n\nURL: https://sepolia.infura.io/v3/55ec4d77a2584beca52ce26a730357fd\nRequest body: {\"method\":\"eth_call\",\"params\":[{\"data\":\"0xb4faba090000000000000000000000003d4ba2e0884aa488718476ca2fb8efc291a46199000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008241c5fb2110000000000000000000000009641d764fc13c8b624c04430c7356c1c7c8102e200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000007648d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000071200776b6fc2ed15d6bb5fc32e0c89de68683118c62a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000b655ecd83d27f7c683a9605783bd2866a4dceb04000000000000000000000000000000000000314dc6448d9338c15b0a0000000000b655ecd83d27f7c683a9605783bd2866a4dceb04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006248f331574000000000000000000000000d116c275541cdbe7594a202bd6ae4dbca4578462000000000000000000000000776b6fc2ed15d6bb5fc32e0c89de68683118c62a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000cffbe584ddf60a122b59ed2ec4c71b07b97699d20000000000000000000000000298f4332e3857631385b39766325058a93e249f0000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003dcc5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c696e6561720000000000000000000000000000000000000000000000000000000000000000000000000000cffbe584ddf60a122b59ed2ec4c71b07b97699d20000000000000000000000000298f4332e3857631385b39766325058a93e249f000000000000000000000000000000000000000000000016ec38faa509ed000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ace800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c696e6561720000000000000000000000000000000000000000000000000000000000000000000000000000cffbe584ddf60a122b59ed2ec4c71b07b97699d20000000000000000000000000298f4332e3857631385b39766325058a93e249f0000000000000000000000000000000000000000000000487a9a3045394400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c29f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c696e656172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"from\":\"0xCffBE584dDf60a122b59Ed2eC4C71B07B97699D2\",\"to\":\"0xCffBE584dDf60a122b59Ed2eC4C71B07B97699D2\",\"value\":\"0x0\"},\"latest\"]}\n\n_app-832e324d6eb1cb06.js:19 Error: We are not able to simulate the transaction. Please contact our team for more details.\n    at 70417 (_app-832e324d6eb1cb06.js:201:41198)\n    at i (webpack-3aed750d91572558.js:1:508)\n    at 50691 (_app-832e324d6eb1cb06.js:7:315154)\n    at i (webpack-3aed750d91572558.js:1:508)\n    at 65313 (_app-832e324d6eb1cb06.js:2:701725)\n    at i (webpack-3aed750d91572558.js:1:508)\n    at _app-832e324d6eb1cb06.js:2:695910\n    at main-811b55617f158811.js:1:38049\n```\n\n</p>\n</details> \n\n## Solution\n\nTBD","createdAt":"2025-04-17T18:06:59Z","labels":["type: bug","priority: 0"],"number":1599,"repository":"sablier-labs/interfaces","state":"closed","title":"Safe simulations don't work due to incorrect error type checks","type":"issue","updatedAt":"2025-04-25T08:27:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1599"},{"author":"PaulRBerg","body":"## Context\n\nWe implemented tx simulation in order to solve the [dynamic max batch size](https://github.com/sablier-labs/interfaces/issues/1473). This resulted into splitting the create form in two steps:\n\n1. Simulate\n2. Create\n\n## Problem\n\nThe two-step user flow is bad UX as it is reminiscent of the two-step approval flow. Granted, running the simulation doesn't lead to an onchain tx, but it'd be much more convenient to only have to click on one button and the UI handles everything in the background.\n\n## Solution\n\nRun the simulations silently in the background by incorporating the simulation logic in the \"Create\" button flow.\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/61c07ecf-c054-43f9-b794-7ecc1914edc7\"/>\n\n\n","createdAt":"2025-04-17T17:59:00Z","labels":["priority: 1","type: perf"],"number":1598,"repository":"sablier-labs/interfaces","state":"closed","title":"Delete the \"Simulate\" button and run the simulations as part of the \"Create\" button flow","type":"issue","updatedAt":"2025-04-22T18:34:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1598"},{"author":"PaulRBerg","body":"## Problem\n\nThe tx simulation flow (in Safe, or for EOAs) can fail due to all sorts of reasons (errors are a fact of life in software). Here's a recent example with Primex:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5cbc8f40-6605-4016-980d-d3753fae9f08\" />\n\nThe simulation was introduced as a solution to the [dynamic max batch size](https://github.com/sablier-labs/interfaces/issues/1473) problem.\n\n## Solution\n\nAllow users to submit the tx even if the simulation fails, but display a warning to inform the user that if the uploaded CSV contains many rows, the tx might revert.\n\n> [!NOTE]\n> As a general rule of thumb, our app should be built in such a way that it allows 'optimistic approaches' wherever possible. It's better to allow users to try to submit txs than block this altogether.","createdAt":"2025-04-17T17:50:02Z","labels":["type: feature","priority: 0","effort: medium","work: clear"],"number":1597,"repository":"sablier-labs/interfaces","state":"closed","title":"Optimistic approach reloaded: allow users to create streams even when the simulation fails","type":"issue","updatedAt":"2025-04-30T11:18:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1597"},{"author":"PaulRBerg","body":"## Problem\n\nTelegram user `icount_stars` reports a problem when connecting MetaMask via the Telegram in-app browser/Safari on iOS@18.2:\n\n> my wallet marked red, i click withdraw on green\n> redirects me here\n> redirects me here but when i do click the meta mask it just\n> stays there\n\n## Screenshots\n\n<img width=\"200\" src=\"https://github.com/user-attachments/assets/6d1a8104-7bbd-4350-aa9a-88cca3d38449\"/>\n<img width=\"200\" src=\"https://github.com/user-attachments/assets/f67e8149-9933-459a-8b5e-9785b2dd573c\"/>\n<img width=\"200\" src=\"https://github.com/user-attachments/assets/2371610b-0911-463f-bba0-8e279eefd720\"/>\n","createdAt":"2025-04-15T12:09:47Z","labels":["type: bug","priority: 2","work: complex"],"number":1591,"repository":"sablier-labs/interfaces","state":"open","title":"Potential bug when connecting MetaMask in the Telegram in-app browser on iOS","type":"issue","updatedAt":"2025-04-15T12:09:47Z","url":"https://github.com/sablier-labs/interfaces/issues/1591"},{"author":"razgraf","body":"Some users might miss our batch functionality so whenever they enter the \"cancel\" or \"withdraw\" covers, we could add a small note about being able to run those on a list of streams within a single transaction. A link could point towards the video guide for how to perform those.","createdAt":"2025-04-14T14:16:23Z","labels":[],"number":1590,"repository":"sablier-labs/interfaces","state":"open","title":"Add note about batch actions in each individual cover","type":"issue","updatedAt":"2025-04-14T14:16:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1590"},{"author":"maxdesalle","body":"https://x.com/newmichwill/status/1910698283208425513?s=46","createdAt":"2025-04-11T16:44:59Z","labels":[],"number":1589,"repository":"sablier-labs/interfaces","state":"open","title":"Enhance security related to package dependencies","type":"issue","updatedAt":"2025-04-18T09:53:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1589"},{"author":"PaulRBerg","body":"A meta issue for tracking error management issues","createdAt":"2025-04-10T15:03:21Z","labels":[],"number":1587,"repository":"sablier-labs/interfaces","state":"open","title":"More robust error management","type":"issue","updatedAt":"2025-04-10T15:03:21Z","url":"https://github.com/sablier-labs/interfaces/issues/1587"},{"author":"PaulRBerg","body":"For obvious psychological reasons:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/753bf357-5e6c-498d-af9c-d0e977c5577a\" />","createdAt":"2025-04-10T14:27:18Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1586,"repository":"sablier-labs/interfaces","state":"open","title":"Charge $0.99 and $1.99 instead of $1 and $2","type":"issue","updatedAt":"2025-04-10T14:27:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1586"},{"author":"PaulRBerg","body":"This wording is clearer, especially given that we now provide ranged airdrops (where the stream has technically started already):\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/44c09631-000d-4f46-8323-80c94bbcc028\" />","createdAt":"2025-04-10T14:26:13Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1585,"repository":"sablier-labs/interfaces","state":"open","title":"Clearer wording in claim button for vesting streams","type":"issue","updatedAt":"2025-04-10T14:26:13Z","url":"https://github.com/sablier-labs/interfaces/issues/1585"},{"author":"PaulRBerg","body":"<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1dd927dc-112f-4a08-bd37-461ce4a1690c\" />","createdAt":"2025-04-10T14:06:56Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1583,"repository":"sablier-labs/interfaces","state":"open","title":"Clearer wording in \"Listing the first result for ...\"","type":"issue","updatedAt":"2025-04-10T14:06:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1583"},{"author":"PaulRBerg","body":"## Problem\n\nIn this case, the problem was an empty `ipfsCID`.\n\nBut more generally, when the Merkle API server has NOT indexed a particular airdrop campaign, the following warning is shown in the claim side bar:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/cf3bf59f-6115-42f4-bc70-ca88d29488b9\" />\n\nHere's an [example campaign](https://app.sablier.com/airdrops/campaign/0x7cac25b2ecc7f6e752aecea6222ed2c1ec8eef49-8453/)>\n\nThis error makes it seem that the error is related to the subgraph.\n\n## Solution\n\nUpdate the wording to clarify that the issue is related to an API (not the subgraph).\n\nThis will speed up debugging when users report issues related to the API, since we will not need to double-check the subgraphs.\n\n\n","createdAt":"2025-04-10T14:03:56Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1582,"repository":"sablier-labs/interfaces","state":"open","title":"Clearer error wording when the ipfs CID is empty","type":"issue","updatedAt":"2025-04-10T15:21:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1582"},{"author":"PaulRBerg","body":"We don't have docs on docs.sablier.com about this yet, but you can read the NatSpec here:\n\n- https://github.com/sablier-labs/airdrops/blob/44208251c91ee64b21b253729f52cea598cfb372/src/interfaces/ISablierMerkleVCA.sol\n- https://github.com/sablier-labs/airdrops/blob/44208251c91ee64b21b253729f52cea598cfb372/src/interfaces/ISablierFactoryMerkleVCA.sol\n","createdAt":"2025-04-10T13:43:59Z","labels":["type: feature","priority: 1","effort: epic","work: complicated"],"number":1580,"repository":"sablier-labs/interfaces","state":"open","title":"Airdrops with variable claim amounts (VCAs)","type":"issue","updatedAt":"2025-04-10T13:43:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1580"},{"author":"PaulRBerg","body":"## Context\n\nThis is a sequel to https://github.com/sablier-labs/interfaces/issues/1332.\n\nWe are still debating whether the basic metrics will remain free, but the TokenOps-like dashboard will definitely be behind a paywall.\n\n## Feature Set\n\n- [ ] **Most Important**: tracing funds after users claim them, especially whether the tokens are immediately dumped.\n     - Email alerts for token moves.\n     - Classification for addresses: dumpers, non-dumpers, smth-in-between, etc.\n     - A diagram/flowchart showing the token outflows (to what contract etc.) would be nice.\n- [ ] Ability to isolate certain streams or recipients and look for aggregated metrics for those only\n- [ ] Labeling addresses (see https://github.com/sablier-labs/interfaces/discussions/986)\n- [ ] Export to CSV (see https://github.com/sablier-labs/interfaces/issues/807)\n\n> [!TIP]\n> Looking at [TokenOps's landing page](https://tokenops.xyz/) is a productive exercise. They explain what analytics they provide.\n\n## References\n\n- https://github.com/sablier-labs/interfaces/issues/1332\n- [Is there any API for obtaining basic information about Ethereum addresses? Besides Etherscan](https://ethereum.stackexchange.com/questions/168553/is-there-any-api-for-obtaining-basic-information-about-ethereum-addresses-besid)","createdAt":"2025-04-10T12:44:44Z","labels":["type: feature","priority: 1","effort: epic","work: complicated"],"number":1576,"repository":"sablier-labs/interfaces","state":"open","title":"Dashboard with TokenOps-like analytics","type":"issue","updatedAt":"2025-07-09T15:55:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1576"},{"author":"PaulRBerg","body":"Instead of putting the stream ID in the title (which is a technical information), it would be much useful to display something like:\n\n> Vesting Stream $TKN {AMOUNT}\n\nAlso, can we say _Vesting_ instead of _Streaming_? In line with https://github.com/sablier-labs/interfaces/discussions/1379\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bf633a6b-47e1-4105-95d3-0d1e56a1e07a\" />","createdAt":"2025-04-10T12:39:22Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1575,"repository":"sablier-labs/interfaces","state":"open","title":"More informative social media preview","type":"issue","updatedAt":"2025-04-14T12:33:12Z","url":"https://github.com/sablier-labs/interfaces/issues/1575"},{"author":"razgraf","body":"\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/1450\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **razgraf** February 24, 2025</sup>\nI have this in my to-do list since forever but in our future optimization sprint for the apps, we should audit performance using https://github.com/aidenybai/react-scan. \r\n\r\nIt's an amazing dev tool for catching messy re-rendering.\r\n\r\n![](https://raw.githubusercontent.com/aidenybai/react-scan/refs/heads/main/.github/assets/demo.gif)</div>","createdAt":"2025-04-10T09:15:51Z","labels":[],"number":1573,"repository":"sablier-labs/interfaces","state":"open","title":"Audit the apps using react-scan","type":"issue","updatedAt":"2025-04-10T09:15:51Z","url":"https://github.com/sablier-labs/interfaces/issues/1573"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-08T19:13:46Z","labels":["priority: 0","effort: low","type: refactor","work: clear"],"number":1572,"repository":"sablier-labs/interfaces","state":"closed","title":"Lower airdrop claim fee to $2","type":"issue","updatedAt":"2025-04-10T13:34:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1572"},{"author":"PaulRBerg","body":"Investigate this issue reported by Micah on Discord:\n\n- https://discord.com/channels/659709894315868191/659712123865399296/1350414134705131593\n- https://discord.com/channels/659709894315868191/659712123865399296/1356511856218607767\n\n![image](https://github.com/user-attachments/assets/021a9416-1ec5-47a1-82a8-d206dd28efd3)","createdAt":"2025-04-07T20:46:23Z","labels":["type: bug","priority: 1"],"number":1570,"repository":"sablier-labs/interfaces","state":"open","title":"Memory leak","type":"issue","updatedAt":"2025-06-25T19:33:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1570"},{"author":"PaulRBerg","body":"In the Payments dashboard, viewing the streams with the _By Debt_ toggle activated provides a much more useful overview than the standard view.","createdAt":"2025-04-07T14:30:35Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1568,"repository":"sablier-labs/interfaces","state":"open","title":"The \"By Debt\" toggle should be enabled by default in Flow","type":"issue","updatedAt":"2025-04-15T12:30:58Z","url":"https://github.com/sablier-labs/interfaces/issues/1568"},{"author":"PaulRBerg","body":"Nothing can be done to voided Flow streams.\n\nThey should appear with a different color:\n\n<img width=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c50ccb14-40df-4e05-aa15-e56b9f8b1ea9\" />","createdAt":"2025-04-07T14:28:38Z","labels":["priority: 2","effort: low","type: style","work: clear"],"number":1567,"repository":"sablier-labs/interfaces","state":"open","title":"Voided streams should appear with a different color","type":"issue","updatedAt":"2025-04-08T20:54:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1567"},{"author":"PaulRBerg","body":"","createdAt":"2025-04-07T14:24:17Z","labels":["type: feature","priority: 1","effort: high","work: complicated"],"number":1566,"repository":"sablier-labs/interfaces","state":"open","title":"Flow top-up adjustments","type":"issue","updatedAt":"2025-04-07T14:24:17Z","url":"https://github.com/sablier-labs/interfaces/issues/1566"},{"author":"PaulRBerg","body":"## Encoding the Simulation Tx\n\nAs per what a Safe developer told me [here](https://ethereum.stackexchange.com/a/168415/24693), we can use the simulation functions available in the [Protocol Kit](https://github.com/search?q=repo%3Asafe-global%2Fsafe-core-sdk%20simulate&type=code) (from the `safe-core-sdk`).\n\nWe don't have to manually encode the txs as we have so far done on the `feat/dynamic-limits` branches (or, let's hope that we don't have to!).\n\n## Decoding the Simulation Tx\n\nThe revert data sent by the `simulateAndRevert` function is NOT encoded correctly.\n\nTo obtain the gas estimate, we need to use the low-level `slice` functions provided by JavaScript. See my dummy function `decodeGasConsumption` on the [`feat/dynamic-limits-prb`](https://github.com/sablier-labs/interfaces/tree/feat/dynamic-limits-prb) branch.\n\n### Safe SDK Implementation\n\nThis is how Safe decodes the revert data in their Protocol Kit:\n\nhttps://github.com/safe-global/safe-core-sdk/blob/4f4a0f63d57bd6d7ecac85e5b68d75d70521432f/packages/protocol-kit/src/utils/transactions/gas.ts#L353C1-L358C2\n\n## Our Business Logic\n\nAfter the gas estimate is decoded, we can compare it to the chain's block gas limit.\n\nThe gas estimate should be added to a **safety buffer** (say, 5% of the block gas limit) to account for potential errors AND for the gas consumption of Safe's signature verification.\n\nI still suggest [querying the block gas limit](https://github.com/sablier-labs/interfaces/issues/1424) instead of hard-coding the values. This is a simple request that can be made silently in the background whenever the user switches the network.\n\n### Caveats\n\n1. The simulate feature is available only in Safe v1.3.0 and above, which means we need to block older Safes from interacting with Sablier, and ask the user to go to upgrade their Safes first. However, this should be alright since [v1.2.0](https://github.com/safe-global/safe-smart-account/releases/tag/v1.2.0) was released in Jan 2020 — there are important security upgrades available in the new versions, so there are important reasons for upgrading anyway!\n2. Safe multisigs with many signers may consume more gas than simple 2-of-3 multisigs, but the 5% buffer should account for that.\n\n## References\n\n- https://github.com/sablier-labs/interfaces/issues/1473\n- [Estimating the gas cost for a batch transaction in Safe](https://ethereum.stackexchange.com/q/168410/24693)\n- [What is the difference between safe-apps-sdk and safe-core-sdk?](https://ethereum.stackexchange.com/q/168412/24693)\n- https://github.com/safe-global/safe-apps-sdk/issues/469","createdAt":"2025-04-03T18:10:56Z","labels":["type: feature","priority: 0","effort: high","work: complicated"],"number":1564,"repository":"sablier-labs/interfaces","state":"closed","title":"Spec for using \"simulateAndRevert\" to simulate batch txs in Safe","type":"issue","updatedAt":"2025-05-04T14:08:51Z","url":"https://github.com/sablier-labs/interfaces/issues/1564"},{"author":"PaulRBerg","body":"## Problem\n\nUsers are not informed when they are connected to chain X, but they have streams on other chains Y, W, Z, etc. As a result, some users might mistakenly assume that they don't have any incoming streams.\n\n> [!NOTE]\n> At ETHBucharest, we met a Sablier user in person who said that the UX is very bad because of this problem. He said that he feels like the project 'rug-pulled' him when he sees no streams in the UI.\n\n## Solution\n\n### Backend\n\nBuild a new API endpoint (using something like a Vercel Function) that is:\n\n- Run once per hour (so it's an hourly cron job).\n- Makes a simple query to the subgraphs on all chains, selecting Envio where only that is available.\n\n### Frontend\n\n- Add a banner in the dashboard that informs the user they have activity on other chains.\n- When the banner is clicked, a dropdown shows up, which allows the user to connect to that network (in their web3 wallet).\n\n<img width=\"350\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1ffceab6-c224-45e6-90c3-612f6cc785bc\" />\n\n## Marketing\n\ncc @maxdesalle\n\nWhen this feature is implemented, we should tweet about it — it's pretty cool.","createdAt":"2025-04-03T17:52:56Z","labels":["type: feature","priority: 1","effort: epic","work: clear"],"number":1563,"repository":"sablier-labs/interfaces","state":"open","title":"Banner with activity on other chains","type":"issue","updatedAt":"2025-04-03T17:55:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1563"},{"author":"sneg55","body":"Could we add linear with a top-up shape here?  This is a very commonly asked feature recently, and for some prospects, it is confusing that it in the payments tab.\n\n![Image](https://github.com/user-attachments/assets/a3bfb493-390d-4275-8b58-47ef3dc7a3c6)","createdAt":"2025-04-03T15:58:23Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1562,"repository":"sablier-labs/interfaces","state":"open","title":"Add Linear Top-up shape in Select Shape gallery page","type":"issue","updatedAt":"2025-08-15T21:47:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1562"},{"author":"PaulRBerg","body":"Analogous to https://github.com/sablier-labs/interfaces/issues/1541 but for protocol admins.\n\nThe admin addresses rotate a lot, so querying then dynamically would prevent many confusing scenarios where the admin addresses remain outdated in the docs.\n\ne.g. @smol-ninja has recently encountered an issue on Chiliz related to the fee collection script, an issue which was caused by outdated information in the docs: https://github.com/sablier-labs/docs/pull/293","createdAt":"2025-04-03T09:14:02Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1561,"repository":"sablier-labs/interfaces","state":"open","title":"Table with protocol admins","type":"issue","updatedAt":"2025-04-03T10:56:37Z","url":"https://github.com/sablier-labs/interfaces/issues/1561"},{"author":"tukwan","body":"To improve SEO by resolving the _Duplicate pages without canonical_ issue reported by Ahrefs (create & search views in the client apps).\n\nReferences:\n- [Ahrefs logs](https://app.ahrefs.com/site-audit/7006528/data-explorer?columns=pageRating%2Curl%2Ctraffic%2Cdepth%2Ccompliant%2Ccanonical%2CincomingCanonical%2ChashContent%2CduplicateContent%2Ctitle%2CmetaDescription%2Ch1&filterId=f0b94dd8f12b3de78caad15a13b864b1&issueId=c64d5626-d0f4-11e7-8ed1-001e67ed4656&sorting=-hashContent)\n- https://github.com/sablier-labs/interfaces/issues/1078#issuecomment-2765979034\n- https://github.com/sablier-labs/interfaces/pull/1172#discussion_r1830761345\n- https://github.com/sablier-labs/interfaces/issues/1087\n- https://github.com/sablier-labs/interfaces/discussions/198\n- https://github.com/sablier-labs/interfaces/pull/526","createdAt":"2025-03-31T12:41:03Z","labels":["priority: 3","effort: high","work: complicated","topic: seo"],"number":1557,"repository":"sablier-labs/interfaces","state":"open","title":"Improve SEO by fixing \"Duplicate pages without canonical\"","type":"issue","updatedAt":"2025-03-31T12:43:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1557"},{"author":"PaulRBerg","body":"## Problem\n\n- Maintaining both ESlint and Prettier in a TypeScript context is a PITA; there are soooo many config files and hacky packages to avoid conflicts between ESLint (linter) and Prettier (formatter)\n- Linting and formatting takes a long time, both in CI and locally\n\n## Solution\n\nSwitch to [BiomeJS](https://github.com/biomejs/biome), a new project that combines linting and formatting into a single, neat CLI tool.\n\n### 60x Faster\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dbe80741-0944-40a5-94a3-fcfb9b36e2d1\" />\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d466f802-be59-4785-8850-d3fe99406cc1\" />\n\n## Smol Issues\n\n### Next.js Linting\n\nThe only potential issue is that [Next.js enforces 'doctoring' through ESLint](https://github.com/vercel/next.js/discussions/59347). However, there is a [workaround](https://github.com/vercel/next.js/discussions/59347#discussioncomment-12154120) for this, and the [rumor on the street](https://github.com/vercel/next.js/discussions/59347#discussioncomment-12256020) is that Next.js will enable support for Biome soon.\n\n### Markdown not Supported\n\nWe'd still need Prettier for Markdown. We could enable it but don't run it in the CI/linting scripts .. or we could just skip formatting the READMEs?\n\nhttps://github.com/biomejs/biome/discussions/923","createdAt":"2025-03-30T16:24:48Z","labels":["priority: 1","effort: high","type: build","work: complicated"],"number":1556,"repository":"sablier-labs/interfaces","state":"open","title":"Use Biome instead of Prettier and ESLint","type":"issue","updatedAt":"2025-06-26T20:11:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1556"},{"author":"PaulRBerg","body":"## Context\n\nWhile working on the [Dynamic max batch size](https://github.com/sablier-labs/interfaces/issues/1473) task, I noticed that Viem doesn't show the revert data returned by the RPC server directly in the [`CallExecutionError`](https://viem.sh/docs/glossary/errors#callexecutionerror) type. To obtain the revert data, we need to 'walk' the error, like so:\n\n```typescript\nconst lowLevelError = callError.walk();\nconst revertData = lowLevelError.data;\n```\n\nThis is a very bad developer experience, and I will open an issue in the Viem repo to suggest including the revert data by default. It looks like [several people](https://github.com/wevm/viem/discussions/581#discussioncomment-5999904) have bumped into this problem already.\n\n**Update**: here's the [Viem issue](https://github.com/wevm/viem/discussions/3519).\n\n## Task\n\nHaving access to the revert data would speed up our debugging process, so the task is to update all the places where we we log errors on Sentry to do this:\n\n1. Check if the error is something related to a reverted tx\n2. If it is, walk the error data to obtain the revert data\n3. Include the revert data in the payload sent to Sentry\n\n### User Reporting\n\nI'm not sure whether it'd be helpful to display the revert data in the UI for the user to see it. I don't think it would be super helpful, but I'm open to changing my mind. At any rate, I will let you decide this.","createdAt":"2025-03-28T21:47:35Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1555,"repository":"sablier-labs/interfaces","state":"open","title":"Log revert data on Sentry by walking the Viem errors","type":"issue","updatedAt":"2025-03-28T22:09:48Z","url":"https://github.com/sablier-labs/interfaces/issues/1555"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/1486\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** March  7, 2025</sup>\n\n## Problem\n\nWhen pitching Sablier to a new potential customer for the Airdrop product, I often get asked for some social proofing, i.e., show an example of an existing airdrop campaign processed via Sablier.\n\nObviously, the more well-known the airdrop, the better the social proof.\n\nThe problem is that the _Search_ tab displays the most recent airdrops .. which are typically no-names:\n\n<img width=\"500\" alt=\"SCR-20250307-oaqd\" src=\"https://github.com/user-attachments/assets/d7b75603-a17e-4a23-ae76-a525812b3b7d\" />\n\n## Solution\n\nCreate a new \"Curated\" tab (or \"Vetted\") that displays only airdrop campaign curated by us.\n\nAnd potentially make it the default for [additional social proofing effects](https://github.com/sablier-labs/interfaces/issues/1436).","createdAt":"2025-03-28T17:40:58Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1554,"repository":"sablier-labs/interfaces","state":"open","title":"New \"Curated\" tab in Airdrops","type":"issue","updatedAt":"2025-03-28T17:40:58Z","url":"https://github.com/sablier-labs/interfaces/issues/1554"},{"author":"PaulRBerg","body":"The rationale is evident: lower our TRM API consumption by not checking the addressed used during development.","createdAt":"2025-03-27T20:53:43Z","labels":["priority: 0","effort: low","type: perf","work: clear"],"number":1553,"repository":"sablier-labs/interfaces","state":"closed","title":"Skip TRM checks when the environment is neither PRODUCTION nor STAGING","type":"issue","updatedAt":"2025-05-06T09:10:12Z","url":"https://github.com/sablier-labs/interfaces/issues/1553"},{"author":"PaulRBerg","body":"<img width=\"400\" src=\"https://github.com/user-attachments/assets/b4ed4dcc-2682-4fe1-b322-0fa34e636104\"/>","createdAt":"2025-03-26T19:50:14Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1550,"repository":"sablier-labs/interfaces","state":"open","title":"Wrong hyperlink in airdrop claim \"view claimed stream\"","type":"issue","updatedAt":"2025-04-10T14:19:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1550"},{"author":"PaulRBerg","body":"## Problem\n\nThe [`@stylelint/postcss-css-in-js`](https://github.com/stylelint/postcss-css-in-js) package was deprecated in Feb 2023.\n\n## Solution\n\n- [ ] Upgrade to Stylelint v16 (see v15 migration guide [here](https://github.com/stylelint/stylelint/blob/main/docs/migration-guide/to-15.md), and v16 migration guide [here](https://github.com/stylelint/stylelint/blob/main/docs/migration-guide/to-16.md))\n- [ ] Replace `@stylelint/postcss-css-in-js` with [`postcss-styled-syntax`](https://github.com/hudochenkov/postcss-styled-syntax)\n- [ ] Fix the errors that will appear\n\n## Why upgrade?\n\nFixing the outdated package will uncover some Stylelint errors, many of which are relevant and should be fixed, but some are Stylelint bugs that were fixed in the latest versions, e.g. https://github.com/hudochenkov/postcss-styled-syntax/issues/3","createdAt":"2025-03-25T16:31:31Z","labels":["priority: 2","effort: medium","type: build","work: complicated"],"number":1549,"repository":"sablier-labs/interfaces","state":"open","title":"Upgrade to Stylelint v16","type":"issue","updatedAt":"2025-03-25T16:31:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1549"},{"author":"PaulRBerg","body":"The official [Stylelint VSCode extension](https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint) does not, by default, lint JS/TS files. To make it do that, we need to add these VSCode settings:\n\n```json\n  \"stylelint.validate\": [\n    \"css\",\n    \"javascript\",\n    \"javascriptreact\",\n    \"postcss\",\n    \"typescript\",\n    \"typescriptreact\"\n  ],\n```","createdAt":"2025-03-25T15:52:42Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1547,"repository":"sablier-labs/interfaces","state":"open","title":"Make Stylelint work in VSCode","type":"issue","updatedAt":"2025-03-25T15:55:44Z","url":"https://github.com/sablier-labs/interfaces/issues/1547"},{"author":"PaulRBerg","body":"It'd be quite handy to write a Bash script that does the following:\n\n1. Pull the Vercel environment (staging or production)\n2. Generate `.env` files for the landing and the client app\n\nThis would make it possible to ditch the `.env.example` files.\n\nNote — the script should separate the Node.js from the Browser environment variables, like so:\n\n```\n# Browser\n...\n\n# Node.js\n...\n```\n\n","createdAt":"2025-03-25T15:18:57Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1546,"repository":"sablier-labs/interfaces","state":"closed","title":"Dev utility for pulling secrets from Vercel and creating `.env` files","type":"issue","updatedAt":"2025-04-25T10:47:34Z","url":"https://github.com/sablier-labs/interfaces/issues/1546"},{"author":"PaulRBerg","body":"As explained and discussed here: https://github.com/sablier-labs/interfaces/issues/1535#issuecomment-2747975660","createdAt":"2025-03-25T13:10:26Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1543,"repository":"sablier-labs/interfaces","state":"open","title":"Detect error codes 500 and 402 thrown by RPC providers, and display app-wide \"RPC is down\" error banner","type":"issue","updatedAt":"2025-03-25T13:10:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1543"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/solsab/discussions/136\n\nWe should use `init_if_needed` wherever a token transfer occurs, in case ATAs are accidentally deleted (although created initially in `create` Ixs). \n","createdAt":"2025-06-12T14:43:03Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":137,"repository":"sablier-labs/solsab","state":"closed","title":"Change to `init_if_needed` on all ATAs instead of `mut`","type":"issue","updatedAt":"2025-07-07T23:03:37Z","url":"https://github.com/sablier-labs/solsab/issues/137"},{"author":"IaroslavMazur","body":"While working on the tests for Merkle Instant's `Clawback` Ix, I realized that there is an edge case that could, potentially, result in campaign funds becoming locked inside the campaign ATA account.\n\n---\n\n**Important note:** this issue also applies to Lockup`s `Cancel` Ix, which similarly transfers tokens to a potentially non-existent `sender_asset_ata`.\n\n---\n\n### The Problem\n\nIf a campaign creator manually closes their token account (ATA) before calling `Clawback`, then:\n- Our program attempts to transfer clawed-back funds to a now-nonexistent `campaign_creator_ata`.\n- Because of the `#[account(mut)]` constraint, the account is expected to exist and be mutable.\n- This leads to a runtime error, preventing the transfer and effectively locking the funds inside the campaign.\n\nWhile this is clearly the campaign creator’s fault (they closed their own ATA), it’s a fragile UX trap.\n\n---\n\n### Suggested Fix\n\nChange:\n```rust\n#[account(mut...)]\npub campaign_creator_ata: Box<InterfaceAccount<'info, TokenAccount>>\n```\n\ninto:\n\n```rust\n#[account(init_if_needed...)]\npub campaign_creator_ata: Box<InterfaceAccount<'info, TokenAccount>>\n```\n\nThis would auto-create the ATA if it has been closed, avoiding a failure and ensuring funds are always recoverable.\n\n---\n\n### The alternative approach\n\nLeave the current behavior as-is. This enforces stricter expectations around ATA management and punishes carelessness, but would be user-hostile in edge cases - and could, ultimately, cause some bad PR for us, as a company.\n\n---\n\nTagging @sablier-labs/solana  for input:\n\n1. Do we want to protect users from themselves here?\n2. Or keep the logic strict and trust campaign creators to know what they’re doing?","createdAt":"2025-06-12T11:38:14Z","labels":[],"number":135,"repository":"sablier-labs/solsab","state":"closed","title":"Fund lockout in Merkle Instant's `Clawback` and Lockup's `Cancel` Ixs","type":"issue","updatedAt":"2025-06-12T14:40:38Z","url":"https://github.com/sablier-labs/solsab/issues/135"},{"author":"IaroslavMazur","body":"","createdAt":"2025-06-10T16:51:16Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":134,"repository":"sablier-labs/solsab","state":"closed","title":"Do we support SOL streaming out of the box?","type":"issue","updatedAt":"2025-06-20T11:21:00Z","url":"https://github.com/sablier-labs/solsab/issues/134"},{"author":"IaroslavMazur","body":"Right now, the `Signer` of the Stream Creation tx is, also, considered to be the sender of the created Stream:\n```rust\n#[account(mut)]\npub sender: Signer<'info>,\n```\n\nWhen we introduce Merkle Linear, this might no longer be correct, depending on how CPIs work in Solana, in terms of the \"signer\" of the inner CPIs.\n\nResearch whether this represents a problem - and address it if it does.","createdAt":"2025-06-10T16:50:17Z","labels":[],"number":133,"repository":"sablier-labs/solsab","state":"closed","title":"Tx Signer as the Stream Sender","type":"issue","updatedAt":"2025-06-14T16:02:54Z","url":"https://github.com/sablier-labs/solsab/issues/133"},{"author":"IaroslavMazur","body":"Research the feasibility of:\n\n- introducing the \"admin\" role/account that's allowed to change the `fee_collector` address","createdAt":"2025-06-10T16:45:51Z","labels":["effort: medium","priority: 1","type: feature","work: complicated"],"number":132,"repository":"sablier-labs/solsab","state":"open","title":"Admin role for changing the `fee_collector`","type":"issue","updatedAt":"2025-06-14T16:07:51Z","url":"https://github.com/sablier-labs/solsab/issues/132"},{"author":"IaroslavMazur","body":"","createdAt":"2025-06-09T12:19:00Z","labels":["effort: high","priority: 0","type: test","work: clear"],"number":127,"repository":"sablier-labs/solsab","state":"open","title":"Post-deployment initialization script for Merkle Instant","type":"issue","updatedAt":"2025-06-14T16:06:51Z","url":"https://github.com/sablier-labs/solsab/issues/127"},{"author":"IaroslavMazur","body":"","createdAt":"2025-06-03T14:30:01Z","labels":["effort: epic","priority: 0","type: test","work: clear"],"number":124,"repository":"sablier-labs/solsab","state":"closed","title":"Write the tests for the Merkle Instant program","type":"issue","updatedAt":"2025-07-07T22:08:47Z","url":"https://github.com/sablier-labs/solsab/issues/124"},{"author":"andreivladbrg","body":"@iaroslavmazur as discussed on the https://github.com/sablier-labs/solsab/pull/90 PR, there is still the pending list of test scenarios you'd like to have so that we can remove the old version of the `sablier-lockup` tests (see [this branch](https://github.com/sablier-labs/solsab/tree/test/iaro-dir))","createdAt":"2025-06-02T13:49:10Z","labels":["effort: medium","priority: 3","type: test","work: clear"],"number":121,"repository":"sablier-labs/solsab","state":"open","title":"Come up with the integration dir tests","type":"issue","updatedAt":"2025-07-08T14:57:36Z","url":"https://github.com/sablier-labs/solsab/issues/121"},{"author":"andreivladbrg","body":"Currently, the name for all streams created is:\n\nhttps://github.com/sablier-labs/solsab/blob/168e2621ee48e71cbe25d180966935046d1b6159/programs/lockup/src/utils/constants.rs#L19\n\nThis name is 30 characters long, and Metaplex metadata has a maximum name length of 32 bytes — thus, we can't really add anything else to the name.\n\n@razgraf has suggested changing it to: `Sablier Lockup #<nft_id>`, which I personally like, but it would limit us to a maximum number of NFTs minted of `10^16`[^1], which should, in theory, be enough.\n\nIf we want to be more conservative, we could go with: `Sablier LK #<nft_id>`, which would allow us to have even more.\n\n[^1]: The name is built by concatenating a static prefix like `Sablier Lockup #` (16 characters) with the decimal representation of `nft_id`. Since the total name must be ≤32 bytes, the ID can be up to 16 digits long — meaning a maximum value just under `10^16`.\n\n@IaroslavMazur tagging to get notified","createdAt":"2025-05-29T23:22:05Z","labels":["effort: low","priority: 1","type: refactor","work: clear"],"number":119,"repository":"sablier-labs/solsab","state":"closed","title":"Figure out the best option for `stream_nft_name`","type":"issue","updatedAt":"2025-06-19T11:47:43Z","url":"https://github.com/sablier-labs/solsab/issues/119"},{"author":"IaroslavMazur","body":"Pass as function args the `UncheckedAccount`s that:\r\n\r\n1. are not derived deterministically,\r\n2. don't need to be `mut` and\r\n3. are not used anywhere in the `Context.\r\n\r\n_Originally posted by @IaroslavMazur in https://github.com/sablier-labs/solsab/pull/98#discussion_r2113833778_\r\n            ","createdAt":"2025-05-29T20:36:20Z","labels":[],"number":117,"repository":"sablier-labs/solsab","state":"closed","title":"Transform UncheckedAccounts into Ix handler args (where possible)","type":"issue","updatedAt":"2025-07-08T16:03:59Z","url":"https://github.com/sablier-labs/solsab/issues/117"},{"author":"andreivladbrg","body":"The idea is to NOT pass the salt in the IXs as input, e.g. here:\n\nhttps://github.com/sablier-labs/solsab/blob/827699515f7de7111db78d6e32e66d87ad8dc965/programs/lockup/src/instructions/cancel.rs#L16\n\nand to not derive the `stream_nft_mint`, e.g. here:\n\nhttps://github.com/sablier-labs/solsab/blob/827699515f7de7111db78d6e32e66d87ad8dc965/programs/lockup/src/instructions/cancel.rs#L27-L35\n\nbut simply pass it, and then derive the `stream_data` PDA:\n\n```rs\n#[account()\npub stream_nft_mint: Box<InterfaceAccount<'info, Mint>>,\n\n#[account(\n    mut,\n    seeds = [STREAM_DATA_SEED, stream_nft_mint.key().as_ref()],\n    bump = stream_data.bump,\n)]\npub stream_data: Box<Account<'info, StreamData>>,\n```\n","createdAt":"2025-05-26T16:16:34Z","labels":["effort: medium","priority: 0","type: perf","work: complex"],"number":109,"repository":"sablier-labs/solsab","state":"closed","title":"Change the inputs for the after stream creation IXs","type":"issue","updatedAt":"2025-05-28T17:01:58Z","url":"https://github.com/sablier-labs/solsab/issues/109"},{"author":"andreivladbrg","body":"In the current version of the create IX, we are currently transferring the deposit funds to the treasury ATA.\n\nA better design for both (i) security reasons[^1]  (ii) closer to Solana's account structure, would be to transfer them to the StreamData ATA.\n\n**Note:** this idea came after working on `MerkleInstant`, where we are also transferring the tokens to the campaign's ATA.\n\n[^1]: the attack surface is minimized to only one account, instead of all tokens being centralized on a single ATA (treasury).","createdAt":"2025-05-26T15:56:56Z","labels":["effort: medium","priority: 0","type: refactor","work: clear"],"number":108,"repository":"sablier-labs/solsab","state":"closed","title":"Transfer tokens to StreamData ATA instead of treasury","type":"issue","updatedAt":"2025-05-28T16:45:15Z","url":"https://github.com/sablier-labs/solsab/issues/108"},{"author":"andreivladbrg","body":"the rationale was explained on [slack](https://sablier.slack.com/archives/C08MY3M0LGG/p1747230625355719)\n\nthis:\n\nhttps://github.com/sablier-labs/solsab/blob/f311acb83b2ef5494dbfa5c173597a445c2b659e/programs/lockup/src/instructions/create_with_timestamps.rs#L92-L93\n\nshould be:\n\n```rs\n#[derive(Accounts)]\n#[instruction(unique_id: u64)]\npub struct CreateWithTimestamps<'info> {\n// ---- impl ----\n\nseeds = [\n    STREAM_NFT_MINT_SEED,\n    sender.key().as_ref(),\n    unique_id.to_le_bytes().as_ref(),\n],\n```","createdAt":"2025-05-15T13:53:48Z","labels":["effort: medium","priority: 0","type: refactor","work: clear"],"number":102,"repository":"sablier-labs/solsab","state":"closed","title":"Change the seeds passed in the `stream_nft_mint`","type":"issue","updatedAt":"2025-05-16T22:38:21Z","url":"https://github.com/sablier-labs/solsab/issues/102"},{"author":"andreivladbrg","body":"there are some places where the `init_if_needed` param passed in the account macro is not needed:\n\nhttps://github.com/sablier-labs/solsab/blob/4e6b91ba69e3432b56976eb21030079865c6da87/programs/lockup/src/instructions/create_with_timestamps.rs#L89-L100\n\nand:\n\nhttps://github.com/sablier-labs/solsab/blob/4e6b91ba69e3432b56976eb21030079865c6da87/programs/lockup/src/instructions/create_with_timestamps.rs#L102-L109\n\nthe stream is about to be created, so these accounts don’t exist yet.\n\n---\n\none other place would be when the treasury ATA is created:\n\nhttps://github.com/sablier-labs/solsab/blob/4e6b91ba69e3432b56976eb21030079865c6da87/programs/lockup/src/instructions/create_with_timestamps.rs#L44\n\nrealistically, in most cases, the tokens used for the streams will be repetitive, so there's no need to create the ATA here or check if it exists.  \nthe creation of the ATA can be achieved by batching `createATA` with `create_with_timestamps`.  \nthe downside that @IaroslavMazur pointed out is that, in case of integration, the current version is more friendly — which is true — but my counterargument is that if we manage to optimize it in terms of `CU`, we should do it.","createdAt":"2025-05-13T12:21:35Z","labels":["effort: low","priority: 2","type: perf","work: clear"],"number":101,"repository":"sablier-labs/solsab","state":"closed","title":"Remove unneeded `init_if_needed`","type":"issue","updatedAt":"2025-05-28T17:08:28Z","url":"https://github.com/sablier-labs/solsab/issues/101"},{"author":"andreivladbrg","body":"Similar to EVM contract: https://github.com/sablier-labs/lockup/blob/85968fea11e77242c0cf4052fa81e8f76b123c8d/src/SablierLockup.sol#L580\n\n","createdAt":"2025-05-12T11:14:53Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":97,"repository":"sablier-labs/solsab","state":"closed","title":"Add `withdrawMaxAndTransfer` instruction","type":"issue","updatedAt":"2025-05-13T09:03:20Z","url":"https://github.com/sablier-labs/solsab/issues/97"},{"author":"andreivladbrg","body":"**Note:** I don't know how I didn't realize this earlier.\n\nIn the current version of `create_with_timestamps`, the first stream ID will be 0.\n\nI don't see an immediate high security issue with this, but it makes more sense to start from 1. Values of zero are very confusing for external people, and they are often used as sentinel values (cliff time, for example).\n\nThus, I strongly suggest starting from 1, which would mean moving the total supply bump before the lockup state update:\n\n```rs\n// Effect: increment the total supply of the NFT collection. Safe math operation, as it would take many years to\n// overflow 2^64.\nctx.accounts.nft_collection_data.total_supply += 1;\n\nlet stream_id = ctx.accounts.nft_collection_data.total_supply;\n\n// Effect: create the stream data.\nctx.accounts.stream_data.create(\n    asset_mint.key(),\n    ctx.bumps.stream_data,\n    cliff_time,\n    cliff_unlock,\n    deposited_amount,\n    end_time,\n    stream_id,\n    is_cancelable,\n    sender.key(),\n    start_time,\n    start_unlock,\n)?;\n```\n\n\n@IaroslavMazur tagging in case of objections","createdAt":"2025-05-10T16:34:42Z","labels":["effort: low","priority: 1","type: bug","work: clear"],"number":96,"repository":"sablier-labs/solsab","state":"closed","title":"The first stream ID should be 1, not 0","type":"issue","updatedAt":"2025-05-13T10:42:41Z","url":"https://github.com/sablier-labs/solsab/issues/96"},{"author":"andreivladbrg","body":"## Suggestion\n\nThe idea is to add descriptive comments about the accounts being declared in the context structs. an idea would be to have these categories:\n- Create account\n- Created account if needed\n- Pre-existing read account\n- Pre-existing write account\n\n## Example in code\n\nThe exact words after \":\" can be more explicit — just an example here.\n\n```rs\n// Create account: recipient's stream NFT ATA\n#[account(\n    init,\n    payer = sender,\n    associated_token::mint = stream_nft_mint,\n    associated_token::authority = recipient,\n    associated_token::token_program = nft_token_program,\n)]\npub recipients_stream_nft_ata: Box<InterfaceAccount<'info, TokenAccount>>,\n```\n\n@IaroslavMazur RFF","createdAt":"2025-04-26T14:14:09Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":83,"repository":"sablier-labs/solsab","state":"closed","title":"Add explanatory comments about context's accounts","type":"issue","updatedAt":"2025-07-08T14:50:05Z","url":"https://github.com/sablier-labs/solsab/issues/83"},{"author":"IaroslavMazur","body":"Implement the following `view` Ixs:\n\n- `refundableAmountOf`\n- `statusOf`\n- `streamedAmountOf`\n- `withdrawableAmountOf`","createdAt":"2025-04-25T11:34:18Z","labels":["effort: low","priority: 1","type: feature","work: clear"],"number":79,"repository":"sablier-labs/solsab","state":"closed","title":"Implement \"viewable\" Ixs","type":"issue","updatedAt":"2025-05-02T11:46:57Z","url":"https://github.com/sablier-labs/solsab/issues/79"},{"author":"IaroslavMazur","body":"","createdAt":"2025-04-21T17:26:49Z","labels":[],"number":77,"repository":"sablier-labs/solsab","state":"closed","title":"Automate the post-deployment program initialization","type":"issue","updatedAt":"2025-05-30T07:18:08Z","url":"https://github.com/sablier-labs/solsab/issues/77"},{"author":"IaroslavMazur","body":"","createdAt":"2025-04-21T17:26:28Z","labels":[],"number":76,"repository":"sablier-labs/solsab","state":"closed","title":"Automate the program deployment","type":"issue","updatedAt":"2025-04-25T13:08:42Z","url":"https://github.com/sablier-labs/solsab/issues/76"},{"author":"IaroslavMazur","body":"On Solana, it's possible to sign multiple txs at once via [`signAllTransactions`](https://github.com/anza-xyz/wallet-adapter/blob/e88d87498434bd11aa5809d75f5ea5b4ba7a3e41/packages/core/base/src/signer.ts#L16), as well as bundle multiple txs into a single atomic group via [Jito bundles](https://www.quicknode.com/guides/solana-development/transactions/jito-bundles).\n\nExplore both of these in the TS tests for our program.","createdAt":"2025-04-17T13:12:51Z","labels":["effort: epic","priority: 1","type: test","work: chaotic"],"number":68,"repository":"sablier-labs/solsab","state":"open","title":"Test w/ `signAllTransactions` and Jito bundles","type":"issue","updatedAt":"2025-04-17T13:59:15Z","url":"https://github.com/sablier-labs/solsab/issues/68"},{"author":"IaroslavMazur","body":"Thanks to the identical (high-level) structure of NFTs & FTs on Solana, our program should, also, natively support the streaming of NFTs.\n\nAdd the tests demonstrating this.","createdAt":"2025-04-17T13:09:19Z","labels":["effort: medium","priority: 1","type: test","work: clear"],"number":67,"repository":"sablier-labs/solsab","state":"open","title":"Test the streaming of an NFT","type":"issue","updatedAt":"2025-05-27T14:23:58Z","url":"https://github.com/sablier-labs/solsab/issues/67"},{"author":"IaroslavMazur","body":"Right now, we're making sure that a certain (invalid) workflow has failed according to our expectations by fetching the program error - and comparing the (Hex) error id inside it to hardcoded value, e.g.:\n\n```typescript\ncatch (error) {\n    assert(\n      (error as Error).message.includes(\n        `custom program error: 0xbc4`\n      ),\n      \"Failed with an unexpected error\"\n    );\n  }\n```\n\nThese hardcoded values cause us troubles whenever we reorder the error values inside the `ErrorCode` `enum` in our program, requiring us to manually update the corresponding error ids used throughout the tests.\n\nTherefore, we should investigate how we could automate the process of matching the program `ErrorCode` values to the error ids that need to be used in tests.","createdAt":"2025-04-17T13:07:27Z","labels":["effort: medium","priority: 1","type: test","work: clear"],"number":66,"repository":"sablier-labs/solsab","state":"closed","title":"Automatically convert the error code to error id in tests","type":"issue","updatedAt":"2025-07-23T17:30:56Z","url":"https://github.com/sablier-labs/solsab/issues/66"},{"author":"IaroslavMazur","body":"Thanks to the serious performance improvements (in terms of the Stack Frame usage by the Ix Context) of Anchor v0.31, we no longer need to split the Initialization & Stream Creation use-cases into multiple Ixs.\n\nTherefore, it makes total sense to reunite the respective Ixs back together.","createdAt":"2025-04-17T12:57:15Z","labels":["effort: high","priority: 1","type: perf","work: complex"],"number":65,"repository":"sablier-labs/solsab","state":"closed","title":"Reunite the previously-split Ixs","type":"issue","updatedAt":"2025-04-28T09:00:38Z","url":"https://github.com/sablier-labs/solsab/issues/65"},{"author":"IaroslavMazur","body":"","createdAt":"2025-04-17T12:54:57Z","labels":["effort: medium","priority: 1","type: chore","work: complicated"],"number":64,"repository":"sablier-labs/solsab","state":"closed","title":"Automate the program deployment & post-deployment initialization","type":"issue","updatedAt":"2025-05-30T07:18:38Z","url":"https://github.com/sablier-labs/solsab/issues/64"},{"author":"IaroslavMazur","body":"Study the common exploits, bugs and best practices in the realm of Solana development - and make the necessary changes in our codebase.\n\nTo be done after the feature development is completed - and before the audits.","createdAt":"2025-04-17T12:54:06Z","labels":["effort: epic","priority: 1","type: refactor","work: chaotic"],"number":63,"repository":"sablier-labs/solsab","state":"open","title":"Pre-audit housekeeping","type":"issue","updatedAt":"2025-07-29T16:38:04Z","url":"https://github.com/sablier-labs/solsab/issues/63"},{"author":"IaroslavMazur","body":"The better name for `asset_token_program` that we've come up with during an in-person meeting with @andreivladbrg & @PaulRBerg  is `deposit_token_program`.\n\ne.g. here :\nhttps://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/programs/lockup/src/instructions/stream_creation/create_with_timestamps.rs#L135-L136\n\nThe proposed/tentative name for `nft_token_program` is along the lines of `recipient_nft_token_program`. This one should be brainstormed a little more, though, in my personal opinion.","createdAt":"2025-04-17T12:50:32Z","labels":["effort: medium","priority: 2","type: refactor","work: clear"],"number":62,"repository":"sablier-labs/solsab","state":"closed","title":"Refactor the ATA names in the Context structs","type":"issue","updatedAt":"2025-04-28T08:55:47Z","url":"https://github.com/sablier-labs/solsab/issues/62"},{"author":"IaroslavMazur","body":"\n### Discussed in https://github.com/sablier-labs/solsab/discussions/51\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **andreivladbrg** April 11, 2025</sup>\nCurrently, the `collect_fees.rs` instruction requires a parameter to be passed for the amount collected.\r\n\r\nThe problem i see with this:\r\n- it does not align with the EVM contracts\r\n- we are working on a [script](https://github.com/sablier-labs/multichain-utils/pull/20) to automate this process  \r\n  - it would require additional edge cases to support this in the same flow\r\n- it requires extra validation logic for this parameter — more logic to maintain\r\n\r\nso, i'm proposing to remove it for simplicity.\r\n\r\n@sablier-labs/solana RFF</div>","createdAt":"2025-04-15T18:01:25Z","labels":["effort: low","priority: 1","type: perf","work: clear"],"number":60,"repository":"sablier-labs/solsab","state":"closed","title":"Remove the amount param in collect fees instruction","type":"issue","updatedAt":"2025-04-25T16:18:38Z","url":"https://github.com/sablier-labs/solsab/issues/60"},{"author":"andreivladbrg","body":"this is a sub-issue of #58 (which focuses on `cancel`) — this one is about all other instructions","createdAt":"2025-04-15T15:52:02Z","labels":["effort: medium","priority: 2","type: test","work: complex"],"number":59,"repository":"sablier-labs/solsab","state":"closed","title":"Check all the tests that are repeated","type":"issue","updatedAt":"2025-07-08T15:39:53Z","url":"https://github.com/sablier-labs/solsab/issues/59"},{"author":"andreivladbrg","body":"there are several tests in the `cancel` instruction where we test \"no refund\" under different time configurations:\n- cliff time in the past / present / future\n- start time in the past / present / future\n\nfor example, these two tests:\n\nhttps://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/tests/sablier-lockup.ts#L934  \nhttps://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/tests/sablier-lockup.ts#L960\n\nboth test the same scenario — no refund during `cancel`. they exit early from the calculation function here:\n\nhttps://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/programs/lockup/src/utils/streaming_math.rs#L14-L16\n\n---\n\nwe should focus on the [possible statuses](https://docs.sablier.com/concepts/lockup/statuses) and have a single test for each scenario in the instruction being tested. for `cancel`, we should cover (besides the failing ones):\n-  when `return 0: now < start` (PENDING)\n- when `return deposited: now > end` (SETTLED)\n- when `streamed amount is calculated` (STREAMING) *and maybe:*\n- when `return amounts.start_unlock: now == cliff_time` (STREAMING)\n\n\n---\n\nthis is also done for other instructions","createdAt":"2025-04-15T14:58:41Z","labels":["effort: medium","priority: 1","type: test","work: complex"],"number":58,"repository":"sablier-labs/solsab","state":"closed","title":"Multiple tests that ultimately test the same thing","type":"issue","updatedAt":"2025-07-23T06:23:05Z","url":"https://github.com/sablier-labs/solsab/issues/58"},{"author":"andreivladbrg","body":"## Context\n\nIn the current tests, each individual test is run for both token programs: (i) the SPL Token program (ii) the SPL Token 2022 program \n\nSee [here](https://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/tests/sablier-lockup.ts#L561) and [here](https://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/tests/sablier-lockup.ts#L630) - this logic tested is not related to the streaming token used, but to the state account being created.\n\nIt’s redundant and unneeded, since the only part of the code that could cause a revert depending on the token standard is (`create_with_timestamps` instruction example):\nhttps://github.com/sablier-labs/solsab/blob/9583681061b971f32993534e06ef37f7c489ecce/programs/lockup/src/instructions/stream_creation/create_with_timestamps.rs#L192\n\n## Suggestion\n\nWe should have only 1 tests for each unique token standards at the end, after all logical branches have been tested. \nthis follows the same pattern we used in the EVM repo for tokens that may or may not return a value:  \nhttps://github.com/sablier-labs/lockup/blob/f98c83e353483563a6637de32593ea53fd9b978c/tests/integration/concrete/lockup-linear/create-with-timestamps-ll/createWithTimestampsLL.tree#L20-L33","createdAt":"2025-04-15T14:25:17Z","labels":["effort: high","priority: 1","type: test","work: complex"],"number":57,"repository":"sablier-labs/solsab","state":"closed","title":"Duplication of tests for both token standards","type":"issue","updatedAt":"2025-07-08T15:53:21Z","url":"https://github.com/sablier-labs/solsab/issues/57"},{"author":"andreivladbrg","body":"similar to the EVM contracts where we use [codecov](https://github.com/sablier-labs/lockup/blob/staging/codecov.yml) + `forge coverage`, we should aim to have something similar here\n\nnot sure if there’s already something available in Anchor — @IaroslavMazur feel free to add if you know of a solution.  \nif not, this issue is about researching possible options.","createdAt":"2025-04-14T15:58:28Z","labels":["effort: high","priority: 2","type: ci","type: test","work: complex"],"number":55,"repository":"sablier-labs/solsab","state":"open","title":"Research on coverage solutions for Anchor tests","type":"issue","updatedAt":"2025-04-15T18:06:49Z","url":"https://github.com/sablier-labs/solsab/issues/55"},{"author":"andreivladbrg","body":"Use [bun package manager](https://bun.sh/package-manager) instead of yarn.\n\nThe reason is simple: _speed_","createdAt":"2025-04-12T11:46:31Z","labels":["effort: low","priority: 2","type: build","work: clear"],"number":53,"repository":"sablier-labs/solsab","state":"closed","title":"Switch from yarn to bun","type":"issue","updatedAt":"2025-04-18T15:49:41Z","url":"https://github.com/sablier-labs/solsab/issues/53"},{"author":"andreivladbrg","body":"currently, there are two ways of updating the SOL balances used across the program:\n\n### first one (collect):\n\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/programs/lockup/src/instructions/withdrawals/collect_fees.rs#L46-L48\n\n### second one (withdraw):\n\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/programs/lockup/src/instructions/withdrawals/withdraw.rs#L98-L104\n\nfor consistency and better readability, we should go with the first one in the `withdraw` instruction as well","createdAt":"2025-04-10T15:18:47Z","labels":["effort: low","priority: 2","type: chore","work: clear"],"number":50,"repository":"sablier-labs/solsab","state":"closed","title":"Use the same approach of modifying the SOL balance in `withdraw`","type":"issue","updatedAt":"2025-04-10T21:07:58Z","url":"https://github.com/sablier-labs/solsab/issues/50"},{"author":"andreivladbrg","body":"The idea is that there’s no need to create an additional account just to store the fee collector address — it can simply be added to the Treasury:\n\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/programs/lockup/src/state/treasury.rs#L5-L7\n\nThen, we can remove this one:\n\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/programs/lockup/src/state/fee_collector.rs#L5-L8","createdAt":"2025-04-09T16:22:50Z","labels":[],"number":49,"repository":"sablier-labs/solsab","state":"closed","title":"Remove `FeeCollectorData` state struct and add an address in Treasury","type":"issue","updatedAt":"2025-04-28T08:57:51Z","url":"https://github.com/sablier-labs/solsab/issues/49"},{"author":"IaroslavMazur","body":"\n### Discussed in https://github.com/sablier-labs/solsab/discussions/44\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **andreivladbrg** April  8, 2025</sup>\n## Context\n\nIn the EVM contracts, we have scripts to run tests with different profiles/configurations:\n\nhttps://github.com/sablier-labs/lockup/blob/13750cac0f4cb4cc2edb98f5881fcf02d6bf5d08/package.json#L77C1-L79C91\n\nCurrently, in the `Anchor.toml`, there are multiple declared ways to run the tests, but they are comment:\n\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/Anchor.toml#L21-L24\n\nWhich, IMO, is not the greatest DX — all versions should always be available.\n\n## Suggestion\n\nIf possible, we should add scripts under the `package.json` file for (exact names TBD):\n- `test:log`\n- `test`\n- `test:match` – for running specific tests\n- and any others we find useful\n\nThis way, we don't have to manually comment/uncomment every time we want to run a specific command.\n</div>","createdAt":"2025-04-09T15:44:35Z","labels":["effort: low","priority: 2","type: build","work: clear"],"number":48,"repository":"sablier-labs/solsab","state":"closed","title":"Add test scripts in `package.json`","type":"issue","updatedAt":"2025-04-18T15:48:13Z","url":"https://github.com/sablier-labs/solsab/issues/48"},{"author":"IaroslavMazur","body":"","createdAt":"2025-04-08T20:06:54Z","labels":["effort: high","priority: 0","type: feature","work: complicated"],"number":47,"repository":"sablier-labs/solsab","state":"closed","title":"Oracle-based withdrawal fee charging","type":"issue","updatedAt":"2025-08-04T11:37:53Z","url":"https://github.com/sablier-labs/solsab/issues/47"},{"author":"andreivladbrg","body":"Here:\n\nhttps://github.com/sablier-labs/solsab/blob/010e169a0c24da8addc3ed3289b98ecbbe07acc5/programs/lockup/src/instructions/stream_creation/create_with_timestamps.rs#L178\n\nshould be: `cliff_unlock > 0` instead\n\nas in EVM:\n\nhttps://github.com/sablier-labs/lockup/blob/13750cac0f4cb4cc2edb98f5881fcf02d6bf5d08/src/libraries/Helpers.sol#L217","createdAt":"2025-04-05T13:18:39Z","labels":[],"number":42,"repository":"sablier-labs/solsab","state":"closed","title":"Incorrect operator used in `create` param validation","type":"issue","updatedAt":"2025-04-28T08:57:33Z","url":"https://github.com/sablier-labs/solsab/issues/42"},{"author":"andreivladbrg","body":"In the current version of the program, the `withdraw` function is missing a to address parameter:\n\nhttps://github.com/sablier-labs/solsab/blob/5d7a4f3ac1bed9cb3a312ba6860c4699ab1fd208/programs/lockup/src/lib.rs#L63\n\nWe should add this parameter and enforce the following conditions:\n- if the singer **is** the recipient \n    - the `to` addressed passed as param can be **any** address (2 ata accounts will exist in the context)\n- if the signer **is not** recipient\n    - then `to` addressed passed as param **must** be the recipient\n\n([See the equivalent in EVM](https://github.com/sablier-labs/lockup/blob/8addfa3f9844fd567610b6056833d7203d5a2ae4/src/abstracts/SablierLockupBase.sol#L479-L483))\n\n@IaroslavMazur lmk if its achievable ","createdAt":"2025-04-03T12:54:37Z","labels":["effort: medium","priority: 1","type: feature","work: complicated"],"number":40,"repository":"sablier-labs/solsab","state":"closed","title":"Add `to` param in `withdraw` function","type":"issue","updatedAt":"2025-04-28T10:36:15Z","url":"https://github.com/sablier-labs/solsab/issues/40"},{"author":"andreivladbrg","body":"As I was reviewing the code, I realized that the program does not follow the CEI (Checks, Effects, Interactions) pattern, which we use in our Solidity smart contracts.\n\nThe motivation for using this pattern is simple: (i) Reentrancy protection  (ii) Easier-to-follow function structure\n\nWhen translated to a Solana program, it would look like:\n\n1. **Checks**: Validate all inputs parameters and account permissions.  \n2. **Effects**: Update the program state (PDAs, increment counters, and update state structs).  \n3. **Interactions**: Perform CPIs, i.e. transferring tokens.","createdAt":"2025-03-24T18:56:15Z","labels":["effort: medium","priority: 1","type: refactor","work: clear"],"number":34,"repository":"sablier-labs/solsab","state":"closed","title":"Adhere to the CEI Pattern","type":"issue","updatedAt":"2025-04-17T12:35:08Z","url":"https://github.com/sablier-labs/solsab/issues/34"},{"author":"IaroslavMazur","body":"Related discussion: #19.","createdAt":"2025-03-13T02:14:20Z","labels":["effort: high","priority: 1","type: test","work: clear"],"number":29,"repository":"sablier-labs/solsab","state":"closed","title":"Group the TS tests into separate files, based by the ix/feature being tested","type":"issue","updatedAt":"2025-05-27T14:04:45Z","url":"https://github.com/sablier-labs/solsab/issues/29"},{"author":"andreivladbrg","body":"Implement the NFT logic\n\n*(The design TBD)*","createdAt":"2025-01-25T16:20:06Z","labels":["effort: epic","priority: 1","type: feature","work: complex"],"number":22,"repository":"sablier-labs/solsab","state":"closed","title":"Implement the NFT logic in create","type":"issue","updatedAt":"2025-01-25T16:22:43Z","url":"https://github.com/sablier-labs/solsab/issues/22"},{"author":"andreivladbrg","body":"Currently the project does not have a README.\n","createdAt":"2025-01-25T16:16:10Z","labels":["effort: medium","priority: 2","type: docs","work: clear"],"number":21,"repository":"sablier-labs/solsab","state":"closed","title":"Add a `README` file","type":"issue","updatedAt":"2025-04-14T21:24:54Z","url":"https://github.com/sablier-labs/solsab/issues/21"},{"author":"andreivladbrg","body":"Unlike Solidity smart contracts, where we have interfaces to include explanatory notes for each function (e.g. [ISablierLockup](https://github.com/sablier-labs/v2-core/blob/db3ecfcd4b7851184485f6e8935b428bb3a9201e/src/interfaces/ISablierLockup.sol)), in Solana and Rust, there is no concept of an interface. However, it would be useful to add explanatory comments to the functions.\n\nAfter the PR https://github.com/sablier-labs/solsab/pull/16 is merged, we will have a cleaner `lib.rs` file due to the new organization. Adding comments for the functions at that point would be a good idea.","createdAt":"2025-01-25T15:08:27Z","labels":["effort: medium","priority: 2","type: docs","work: clear"],"number":18,"repository":"sablier-labs/solsab","state":"closed","title":"Add natspec type of notes in `lib.rs`","type":"issue","updatedAt":"2025-07-31T09:04:40Z","url":"https://github.com/sablier-labs/solsab/issues/18"},{"author":"andreivladbrg","body":"The idea is to have two different functions in the Solana program, similar to the `lockup` contract:\n1. `createWithTimestamps`\n2. `createWithDurations`","createdAt":"2025-01-25T13:38:36Z","labels":["effort: medium","priority: 1","type: feature","work: clear"],"number":17,"repository":"sablier-labs/solsab","state":"closed","title":"Implement a duration based create function","type":"issue","updatedAt":"2025-04-11T15:31:16Z","url":"https://github.com/sablier-labs/solsab/issues/17"},{"author":"IaroslavMazur","body":"Instead of the regular PDAs, store the Stream metadata inside NFTs.","createdAt":"2025-01-24T15:50:17Z","labels":["effort: epic","priority: 0","type: feature","work: complex"],"number":15,"repository":"sablier-labs/solsab","state":"closed","title":"Implement the NFT functionality","type":"issue","updatedAt":"2025-03-24T15:22:51Z","url":"https://github.com/sablier-labs/solsab/issues/15"},{"author":"IaroslavMazur","body":"See **[this comment](https://github.com/sablier-labs/solsab/discussions/9#discussioncomment-11944733)** for details.","createdAt":"2025-01-24T15:41:16Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":14,"repository":"sablier-labs/solsab","state":"closed","title":"Normalize the calculations to 18 decimals when determining the streamed amount","type":"issue","updatedAt":"2025-02-02T23:56:52Z","url":"https://github.com/sablier-labs/solsab/issues/14"},{"author":"andreivladbrg","body":"The latest version of Lockup Linear has been updated to include start unlock and cliff unlock amounts.\n\nThis PR from the EVM contract shows what it achieves: https://github.com/sablier-labs/v2-core/pull/1075\n\nWe should add this new feature here as well.\n","createdAt":"2025-01-22T12:39:45Z","labels":["effort: epic","priority: 1","type: feature","work: complex"],"number":13,"repository":"sablier-labs/solsab","state":"closed","title":"Implement the latest Lockup Linear version","type":"issue","updatedAt":"2025-03-24T16:12:08Z","url":"https://github.com/sablier-labs/solsab/issues/13"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/solsab/discussions/5\n\nrestructure the repo like this:\n\n```tree\nprograms/lockup/src/\n├── instructions\n│   ├── cancel.rs\n│   ├── createLL.rs\n│   └── withdraw.rs\n├── lib.rs\n├── state\n│   └── structs.rs\n└── utils\n    ├── errors.rs\n    ├── helpers.rs\n    └── math.rs\n\n```","createdAt":"2025-01-22T12:11:14Z","labels":["effort: high","priority: 1","type: refactor","work: complex"],"number":12,"repository":"sablier-labs/solsab","state":"closed","title":"Restructure the programs","type":"issue","updatedAt":"2025-02-02T23:22:27Z","url":"https://github.com/sablier-labs/solsab/issues/12"},{"author":"andreivladbrg","body":"Currently, the state variables for the amounts are of type `u64`:\n\nhttps://github.com/sablier-labs/solsab/blob/3b3218718973f9d15a97a72e6b2a3a3dc20b118d/programs/sablier-on-solana-ts/src/lib.rs#L411-L415\n\nThis is problematic as this type is insufficient for tokens with a higher number of decimals, such as 18. For example, the maximum value `u64` can hold is  $` 2^{64} = 18\\_446744073709551615 `$, which results in a maximum deposit of only 18 tokens.\n\nTo address this, we should change the type to either `u128` or `u256`, opting for the latter only if it does not significantly impact rent/gas costs.","createdAt":"2025-01-21T16:59:32Z","labels":["effort: medium","priority: 0","type: bug","work: clear"],"number":11,"repository":"sablier-labs/solsab","state":"closed","title":"Change the amount types to support larger values","type":"issue","updatedAt":"2025-01-23T10:42:24Z","url":"https://github.com/sablier-labs/solsab/issues/11"},{"author":"smol-ninja","body":"Ref https://github.com/sablier-labs/v2-core/discussions/506","createdAt":"2024-09-04T21:55:31Z","labels":["effort: low","work: clear","priority: 3","type: test"],"number":227,"repository":"sablier-labs/flow","state":"closed","title":"Rename `test` dir to `tests` (plural)","type":"issue","updatedAt":"2024-09-24T15:52:58Z","url":"https://github.com/sablier-labs/flow/issues/227"},{"author":"smol-ninja","body":"Starting this issue as a reminder to optimise contracts for gas, wherever applicable, before the audit.\r\n\r\n- [x] Update gas benchmarks","createdAt":"2024-09-04T14:48:10Z","labels":["type: perf","effort: medium","priority: 2","work: complicated"],"number":225,"repository":"sablier-labs/flow","state":"closed","title":"Review contracts for gas optimisation before the audit","type":"issue","updatedAt":"2024-10-07T10:50:20Z","url":"https://github.com/sablier-labs/flow/issues/225"},{"author":"andreivladbrg","body":"### Discussed in https://github.com/sablier-labs/flow/discussions/223\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **andreivladbrg** September  3, 2024</sup>\r\nAfter a private discussion with @gavriliumircea, he came up with a good idea to reintroduce the `amount` parameter in `withdraw`, which was initially removed due to the explanation provided [here](https://github.com/sablier-labs/flow/pull/4). In the meantime, we have introduced the storage variable `snapshotDebt`, which changes how things work.\r\n\r\nSo, the proposed change in `withdraw` would be:\r\n- `time` --> `amount`\r\n- calculate `coveredDebt` to the current block (`block.timestamp`)\r\n- check wether the amount passed is greater than `coveredDebt`\r\n- the snapshot debt will be updated to `coveredDebt - withdrawAmount`\r\n- the snapshot time will be updated to `block.timestamp`\r\n\r\n<details><summary>Actual implementation</summary>\r\n<p>\r\n\r\n```solidity\r\n// Check: the stream balance is not zero.\r\nif (balance == 0) {\r\n    revert Errors.SablierFlow_WithdrawNoFundsAvailable(streamId);\r\n}\r\n\r\nuint128 newSnapshotDebt = _coveredDebtOf(streamId, uint40(block.timestamp));\r\n\r\n// Revert if the withdrawal amount is greater than what is available.\r\nif (amount > newSnapshotDebt) {\r\n    revert Errors.SablierFlow_WithdrawAmountTooBig();\r\n}\r\n\r\n// Update the snapshot debt, with the amount to be withdrawn.\r\nunchecked {\r\n    newSnapshotDebt -= amount;\r\n}\r\n\r\n// Effect: update the snapshot debt and time from storage.\r\n_streams[streamId].snapshotDebt = newSnapshotDebt;\r\n_streams[streamId].snapshotTime = uint40(block.timestamp);\r\n\r\n``` \r\n\r\n</p>\r\n</details> \r\n\r\n---\r\n\r\nThis change is going to be helpful for the app, as well as for the users, due to a more concise API (and consistent with `lockup` contracts).\r\n\r\nOne more thing: this change would allow us to enable the withdrawal of an amount less than what has been snapshot in the case of `adjustRps`, which was not possible with a `time` parameter.\r\n","createdAt":"2024-09-03T15:02:48Z","labels":["priority: 1","type: refactor","work: complex","effort: medium"],"number":224,"repository":"sablier-labs/flow","state":"closed","title":"Re introduce the `amount` param in `withdraw`","type":"issue","updatedAt":"2024-09-13T15:01:05Z","url":"https://github.com/sablier-labs/flow/issues/224"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/flow/discussions/216\r\n\r\nWe should: \r\n- [x] Add `isVoided` bool in the stream struct which is toggled in `void` function\r\n- [x] Check the bool in `restart` function\r\n- [x] Introduce `VOIDED` variant in the `Stream` enum\r\n","createdAt":"2024-08-29T13:50:19Z","labels":["priority: 1","work: complex","effort: medium","type: feature"],"number":218,"repository":"sablier-labs/flow","state":"closed","title":"Introduce `VOID` status and disallow restart after void","type":"issue","updatedAt":"2024-09-05T17:05:21Z","url":"https://github.com/sablier-labs/flow/issues/218"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/flow/discussions/197 we should allow the sender to `void`","createdAt":"2024-08-28T20:01:37Z","labels":["priority: 1","type: refactor","effort: medium","work: clear"],"number":215,"repository":"sablier-labs/flow","state":"closed","title":"Allow the sender to call `void`","type":"issue","updatedAt":"2024-08-29T13:46:27Z","url":"https://github.com/sablier-labs/flow/issues/215"},{"author":"PaulRBerg","body":"A function to allow Sablier to take a cut when users withdraw from Flow using the Sablier UI.\r\n\r\nAlso, as discussed [here](https://github.com/sablier-labs/company-discussions/discussions/67), we should remove `depositViaBroker` and `createAndDepositViaBroker`.","createdAt":"2024-08-27T13:39:23Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":214,"repository":"sablier-labs/flow","state":"closed","title":"Add \"withdrawViaBroker\" function","type":"issue","updatedAt":"2024-09-05T11:55:44Z","url":"https://github.com/sablier-labs/flow/issues/214"},{"author":"PaulRBerg","body":"- [x] Introduce protocol fee on withdraw of type `UD60x18` (related: #184)\r\n- [x] Cap the maximum fee that can be charged to 10% (via a hard-coded value)\r\n\r\nAs discussed in https://github.com/sablier-labs/company-discussions/discussions/67.\r\n\r\nNote: introducing the protocol fee will introduce the front-running risk flagged by Cantina during the 1st audit: https://github.com/cantinasec/review-sablier/issues","createdAt":"2024-08-27T13:36:19Z","labels":["effort: high","priority: 1","type: feature","work: complicated"],"number":213,"repository":"sablier-labs/flow","state":"closed","title":"Introduce protocol fee on withdraw","type":"issue","updatedAt":"2024-09-05T21:17:54Z","url":"https://github.com/sablier-labs/flow/issues/213"},{"author":"PaulRBerg","body":"- [ ] Introduce protocol fee on `deposit` of type `UD60x18` (related: #184)\r\n- [ ] Cap the maximum fee that can be charged to 10% (via a hard-coded value)\r\n\r\nAs discussed in https://github.com/sablier-labs/company-discussions/discussions/67.\r\n\r\nNote: introducing the protocol fee will introduce the front-running risk flagged by Cantina during the 1st audit: https://github.com/cantinasec/review-sablier/issues","createdAt":"2024-08-26T13:04:17Z","labels":["effort: high","priority: 1","type: feature","work: complicated"],"number":212,"repository":"sablier-labs/flow","state":"closed","title":"Introduce protocol fee on sender deposit","type":"issue","updatedAt":"2024-08-27T15:08:51Z","url":"https://github.com/sablier-labs/flow/issues/212"},{"author":"andreivladbrg","body":"This might be useful for the subgraph as it may not have access to input params. \r\n@razgraf is this correct?\r\n\r\nfor context, the withdraw function in `flow` doesn't take an amount as input param, but a time variable.\r\n\r\n","createdAt":"2024-08-19T08:03:46Z","labels":["effort: low","priority: 2","type: feature","work: clear"],"number":211,"repository":"sablier-labs/flow","state":"closed","title":"Add the time variable in withdraw event","type":"issue","updatedAt":"2024-08-22T18:37:32Z","url":"https://github.com/sablier-labs/flow/issues/211"},{"author":"PaulRBerg","body":"I've [swung](https://x.com/PaulRBerg/status/1821510474095116326) back and forth between 'normalized' and 'scaled' for a while.\r\n\r\nNow, I am in favor of refactoring `normalized` to `scaled`, and `denormalized` to `raw` because it's shorter, and I think it's a better fit for purpose.\r\n\r\nThe following change list applies to the terminology implemented in #205:\r\n\r\n- [ ] Rename `normalized` prefix to `scaled`\r\n  - Thankfully, there's no corresponding `raw` prefix to refactor because all non-prefixed amounts are assumed to be raw anyway, e.g. `refundAmount`\r\n- [ ] Rename `Helpers.denormalizeAmount` to `getRawAmount`\r\n- [ ] Rename `Helpers.normalizeAmount` to `getScaledAmount`\r\n- [ ] Refactor all tests to conform to this new terminology\r\n\r\nAlternatively, we could say `descaled` instead of `raw`, and `descaleAmount` instead of `getRawAmount`.\r\n\r\nLMK what you think @sablier-labs/solidity.","createdAt":"2024-08-16T10:02:38Z","labels":["priority: 0","type: refactor","effort: medium","work: complicated"],"number":210,"repository":"sablier-labs/flow","state":"closed","title":"Refactor \"normalized\" to \"scaled\" and \"denormalize\" to \"raw\"","type":"issue","updatedAt":"2024-08-16T17:22:14Z","url":"https://github.com/sablier-labs/flow/issues/210"},{"author":"andreivladbrg","body":"## Andrei's Original Issue\r\n\r\nAfter a discussion I had with @razgraf, he mentioned that for a [stream debt calculated with 18 decimals](https://github.com/sablier-labs/flow/blob/f82aedc0f8a268039eec0f0c5ee56bd5ea3eefe9/src/interfaces/ISablierFlow.sol#L126-L131) for a token that has, let’s say 6 decimals, it is not accurate to say there is debt if the calculation results in a debt of less than 0.000001 (which is possible now), as it can never be deposited in an amount smaller than that.\r\n\r\nSo the solution is to return always to the getter an amount in token decimals.\r\n\r\nRelevant to this: https://github.com/sablier-labs/flow/issues/202#issuecomment-2291445193\r\n\r\n## PRB's Edit\r\n\r\nAs discussed below, there are two tasks here:\r\n\r\n- [ ] Implement @andreivladbrg's proposal below to use the token's decimal in all places except `rps` and the `_ongoingDebtOf` function\r\n- [ ] Refactor the `refund` function to take a non-normalized amount in its input","createdAt":"2024-08-15T16:20:01Z","labels":["priority: 0","effort: medium","type: bug","work: complicated"],"number":208,"repository":"sablier-labs/flow","state":"closed","title":"Precision loss for tokens with less than 18 decimals","type":"issue","updatedAt":"2024-08-22T18:37:23Z","url":"https://github.com/sablier-labs/flow/issues/208"},{"author":"PaulRBerg","body":"In line with https://github.com/sablier-labs/flow/issues/199, we should include both normalized and denormalized amounts in the following events:\r\n\r\n- `DepositFlowStream`\r\n- `RefundFromFlowStream`\r\n- `WithdrawFromFlowStream`\r\n\r\nEvent indexers may be interested in knowing both the transfer amount AND the amount by which the stream's balance has been reduced.\r\n\r\nAlso, emitting both amounts avoids having to decide which amount to emit. Currently, in the deposit event, we emit the normalized amount, while in the others we emit the denormalized amount; I don't see any objective rationale for why this has to be so.","createdAt":"2024-08-10T10:29:52Z","labels":["priority: 1","type: refactor","effort: medium","work: complicated"],"number":204,"repository":"sablier-labs/flow","state":"closed","title":"Include both the normalized and the denormalized amount in the transfer events","type":"issue","updatedAt":"2024-08-16T17:18:40Z","url":"https://github.com/sablier-labs/flow/issues/204"},{"author":"PaulRBerg","body":"The current default test token is DAI, which has 18 decimals. This is not great because Flow [normalizes and denormalizes](https://github.com/sablier-labs/flow/issues/199) token amounts to 18 decimals.\r\n\r\nThe default asset should be a little more complex and not have 18 decimals.\r\n\r\nDoing so would avoid cases like this, where the test passes because of an accident not because it is correctly written:\r\n\r\nhttps://github.com/sablier-labs/flow/blob/360603572c1cc952e78f7a8b3ccc848d612cfcec/test/integration/concrete/refund/refund.t.sol#L137\r\n\r\nThis test works because the default asset has 18 decimals and the `REFUND_AMOUNT` is already normalized. If the default asset didn't have 18 decimals, the `REFUND_AMOUNT` would have to be normalized.","createdAt":"2024-08-10T10:07:19Z","labels":["priority: 1","effort: medium","type: test","work: complicated"],"number":203,"repository":"sablier-labs/flow","state":"closed","title":"The default test token should not have 18 decimals","type":"issue","updatedAt":"2024-08-27T15:13:12Z","url":"https://github.com/sablier-labs/flow/issues/203"},{"author":"PaulRBerg","body":"In line with https://github.com/sablier-labs/flow/issues/199, I suggest:\r\n\r\n- [ ] Renaming the current `refundableAmountOf` function to `normalizedRefundableAmountOf`\r\n- [ ] Introducing a new function `refundableAmountOf` that returns the non-normalized amount, i.e., using the token's decimal system","createdAt":"2024-08-08T11:19:38Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":202,"repository":"sablier-labs/flow","state":"closed","title":"Rename current \"refundableAmountOf\" and introduce non-normalized counterpart","type":"issue","updatedAt":"2024-08-16T17:17:31Z","url":"https://github.com/sablier-labs/flow/issues/202"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/flow/discussions/197","createdAt":"2024-08-05T21:06:15Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":201,"repository":"sablier-labs/flow","state":"closed","title":"Implement a `pauseWithReason` function","type":"issue","updatedAt":"2024-08-28T20:03:47Z","url":"https://github.com/sablier-labs/flow/issues/201"},{"author":"PaulRBerg","body":"Ditto for all other related variables, e.g. `refundableAmount`.\r\n\r\n- [ ] Rename `normalizedAmount` (and `depositAmount`) to `normalizedDepositAmount`\r\n- [ ] Rename `transferAmount` to `depositAmount` in the create and deposit functions\r\n","createdAt":"2024-08-01T11:11:58Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":199,"repository":"sablier-labs/flow","state":"closed","title":"Terminology for transfer, deposit, and normalized amounts","type":"issue","updatedAt":"2024-08-16T17:17:23Z","url":"https://github.com/sablier-labs/flow/issues/199"},{"author":"PaulRBerg","body":"Lockup doesn't check if the sender has a zero address.\r\n\r\nTo maintain parity between Lockup and Flow, we should remove the check in Flow.\r\n\r\nMore context here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/discussions/38#discussioncomment-10210887","createdAt":"2024-08-01T10:30:28Z","labels":["priority: 1","type: refactor","effort: medium","work: clear"],"number":198,"repository":"sablier-labs/flow","state":"closed","title":"Remove zero address check for sender","type":"issue","updatedAt":"2024-08-01T11:25:55Z","url":"https://github.com/sablier-labs/flow/issues/198"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/flow/discussions/194\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** July 27, 2024</sup>\r\nHere: \r\n\r\nhttps://github.com/sablier-labs/flow/blob/76bcae36e8286b2465adcf8ab80d8e24d8548bb4/src/interfaces/ISablierFlow.sol#L40\r\n\r\nThe `lastUpdateTime` can be inferred from the block timestamp of the block in which the create event was emitted. AFAIK, this property is available in the subgraph.\r\n\r\nAsking you @sablier-labs/solidity and @razgraf (to double-check my understanding of the subgraph and whether this is a problem)?</div>","createdAt":"2024-07-29T09:55:54Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":196,"repository":"sablier-labs/flow","state":"closed","title":"Remove the `block.timestamp` from the create event","type":"issue","updatedAt":"2024-08-27T15:13:11Z","url":"https://github.com/sablier-labs/flow/issues/196"},{"author":"PaulRBerg","body":"To align the NatSpec with the terminology used in our PR and documentation site, we should refactor all references to 'assets' to say 'tokens' instead.","createdAt":"2024-07-27T12:02:43Z","labels":["effort: low","type: docs","work: clear","priority: 3"],"number":195,"repository":"sablier-labs/flow","state":"closed","title":"Refactor \"asset\" terminology to \"tokens\"","type":"issue","updatedAt":"2024-08-27T15:13:11Z","url":"https://github.com/sablier-labs/flow/issues/195"},{"author":"PaulRBerg","body":"## Issues with Current Terminology\r\n\r\nI started reviewing Flow, and I noticed a few issues with the current terminology:\r\n\r\n- `amountOwed` and `debt` are synonyms\r\n- `lastTimeUpdate` and `remainingAmount` are both vague\r\n- `recentAmount` is misleading when there hasn't been an update in a long time\r\n\r\n## Suggestions\r\n\r\n| Current | New | Explanation |\r\n|--------|--------|--------|\r\n| Amount Owed | Total Debt | Better fit for purpose per the rationale below + keep the pattern `NOUN + AMOUNT + OF` used throughout the getters |\r\n| Debt | Uncovered Debt | Better fit for purpose |\r\n| Last Time Update | Snapshot Time | Better fit for purpose per the rationale below; also, it's the struct that gets updated, not time |\r\n| Recent Amount | Ongoing Debt | Better fit for purpose; _recent_ can be misleading in cases in which a lot of time has passed since the last withdrawal |\r\n| Remaining Amount | Snapshot Debt | Better fit for purpose per the rationale below |\r\n\r\n## Rationale\r\n\r\nNaming the value that is currently being referred to as `amountOwed` is difficult, but the two leading candidate solutions involve the terms 'debt' and 'streamed amount'. Why should we go with one or the other?\r\n\r\nOn the one hand, `streamedAmount` is nice because it mirrors the Lockup functions. On the other hand, it is misleading because unlike in Lockup, this value goes down when a withdrawal is made. It is _not_ a monotonically increasing value.\r\n\r\nDebt seems more accurate. Why? Let's look at the definition of debt according to the first result on Google:\r\n \r\n> a sum of money that is owed or due\r\n\r\nFundamentally, Flow is a debt-tracking product. Whether the debt is funded or not is a different matter altogether. This is why I have renamed the simple `debt` to `uncoveredDebt`.\r\n\r\nP.S. a good alternative name is `dueAmountOf`, but I find `totalDebtOf` clearer because it allows to draw a distinction between the different subtypes of debts existing in Flow.\r\n\r\n## Implementation\r\n\r\nI will include this change in my upcoming PR. Curious to hear your thoughts @sablier-labs/solidity.","createdAt":"2024-07-27T10:15:24Z","labels":["priority: 0","type: refactor","effort: medium","work: complicated"],"number":193,"repository":"sablier-labs/flow","state":"closed","title":"Refining the amounts and debt terminology","type":"issue","updatedAt":"2024-08-27T15:13:11Z","url":"https://github.com/sablier-labs/flow/issues/193"},{"author":"PaulRBerg","body":"We may want to use the Bulloak CI workflow in other Sablier repositories, so we should turn into a reusable GitHub Action published in the GitHub marketplace.\r\n\r\nBy building this, we would also do Alex a solid. And the open-source community may find it useful, too.\r\n\r\nSimilar to https://github.com/foundry-rs/foundry-toolchain.","createdAt":"2024-07-25T11:04:18Z","labels":["effort: high","type: feature","work: complicated"],"number":192,"repository":"sablier-labs/flow","state":"closed","title":"Turn Bulloak CI workflow into a reusable GitHub Action","type":"issue","updatedAt":"2024-08-14T13:22:04Z","url":"https://github.com/sablier-labs/flow/issues/192"},{"author":"smol-ninja","body":"Bump the solhint version to v5.0.3 and add the new rule to automatically order the imports in alphabetical order (PR [#587](https://github.com/protofire/solhint/pull/587)).","createdAt":"2024-07-22T22:51:00Z","labels":["effort: low","priority: 2","work: clear","type: chore"],"number":191,"repository":"sablier-labs/flow","state":"closed","title":"Bump solhint and add the new rule to order imports","type":"issue","updatedAt":"2024-08-07T09:07:55Z","url":"https://github.com/sablier-labs/flow/issues/191"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/company-discussions/discussions/11</sup>\r\n\r\nImplement a mechanism to recover any surplus amount of tokens from the core contract. The following approach has been discussed at length in the original discussion:\r\n\r\n1. Define a single variable to track down the amount of tokens that the protocol owes to the users: `mapping (erc20 => amount)`. This variable should be updated whenever there is a transfer of token into/out of the protocol.\r\n\r\n2. Declare a function to be used to manage the surplus amount, i.e. the difference between the token balance of the protocol minus the value stored. If called by admin, it can send surplus to the specified address. If called by a random address, throw an error.","createdAt":"2024-07-16T11:59:17Z","labels":["effort: high","priority: 2","type: feature","work: complicated"],"number":187,"repository":"sablier-labs/flow","state":"closed","title":"Implement ERC-20 token recovery mechanism","type":"issue","updatedAt":"2024-09-24T11:00:27Z","url":"https://github.com/sablier-labs/flow/issues/187"},{"author":"andreivladbrg","body":"The [PR](https://github.com/PaulRBerg/prb-math/pull/212) for `uint128` has been merged.\r\n\r\nWe should update the `uint128 ratePerSecond` to use `UD21x18`.\r\n","createdAt":"2024-06-29T12:43:11Z","labels":["effort: high","priority: 1","type: refactor","work: complex"],"number":184,"repository":"sablier-labs/flow","state":"closed","title":"Use the new PRB math type `UD21x18` for `rps`","type":"issue","updatedAt":"2024-09-02T17:21:07Z","url":"https://github.com/sablier-labs/flow/issues/184"},{"author":"smol-ninja","body":"Based on the argument provided in https://github.com/sablier-labs/v2-core/issues/955, we should also return amount values in the following functions.\r\n\r\n1. refund\r\n2. refundAndPause\r\n3. withdrawAt\r\n4. withdrawMax\r\n\r\ncc @andreivladbrg wdyt?","createdAt":"2024-06-29T10:06:35Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":183,"repository":"sablier-labs/flow","state":"closed","title":"Return value in `refund` and `withdraw` related functions","type":"issue","updatedAt":"2024-07-02T09:47:11Z","url":"https://github.com/sablier-labs/flow/issues/183"},{"author":"smol-ninja","body":"### Discussed in https://github.com/sablier-labs/v2-core/discussions/906\r\n\r\nAdd [newlines between tag types](https://github.com/coinbase/solidity-style-guide?tab=readme-ov-file#3-newlines-between-tag-types) to improve readability.\r\n\r\n```solidity\r\n/// @notice Creates a new MerkleLockup campaign with a LockupLinear distribution.\r\n/// @dev Emits a {CreateMerkleLL} event.\r\n/// @param baseParams Struct encapsulating the {SablierV2MerkleLockup} parameters, which are documented in\r\n/// {DataTypes}.\r\n/// @param lockupLinear The address of the {SablierV2LockupLinear} contract.\r\n/// @param streamDurations The durations for each stream.\r\n/// @param aggregateAmount The total amount of ERC-20 assets to be distributed to all recipients.\r\n/// @param recipientCount The total number of recipients who are eligible to claim.\r\n/// @return merkleLL The address of the newly created MerkleLockup contract.\r\n```\r\n\r\nbecomes \r\n\r\n```solidity\r\n/// @notice Creates a new MerkleLockup campaign with a LockupLinear distribution.\r\n///\r\n/// @dev Emits a {CreateMerkleLL} event.\r\n///\r\n/// @param baseParams Struct encapsulating the {SablierV2MerkleLockup} parameters, which are documented in\r\n/// {DataTypes}.\r\n/// @param lockupLinear The address of the {SablierV2LockupLinear} contract.\r\n/// @param streamDurations The durations for each stream.\r\n/// @param aggregateAmount The total amount of ERC-20 assets to be distributed to all recipients.\r\n/// @param recipientCount The total number of recipients who are eligible to claim.\r\n///\r\n/// @return merkleLL The address of the newly created MerkleLockup contract.\r\n```","createdAt":"2024-06-21T17:56:54Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":181,"repository":"sablier-labs/flow","state":"closed","title":"Add newlines between tag types","type":"issue","updatedAt":"2024-07-02T09:47:11Z","url":"https://github.com/sablier-labs/flow/issues/181"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/flow/discussions/168","createdAt":"2024-06-11T11:14:05Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":177,"repository":"sablier-labs/flow","state":"closed","title":"Include `streamId` in each custom error","type":"issue","updatedAt":"2024-06-14T10:09:40Z","url":"https://github.com/sablier-labs/flow/issues/177"},{"author":"smol-ninja","body":"Since https://github.com/alexfertel/bulloak/pull/68 has been merged, Bulloak can now be used in the github workflow to verify the specs of the concrete tests. Thus, we should add a new workflow file to run checks using bulloak on every PR.\r\n\r\n<details> <summary>bulloak.yml code</summary>\r\n\r\n```yml\r\nname: \"Verify the specs of concrete tests using bulloak\"\r\n\r\non: \"workflow_call\"\r\n\r\njobs:\r\n  bulloak-check:\r\n    runs-on: \"ubuntu-latest\"\r\n    steps:\r\n      - name: \"Check out the repo\"\r\n        uses: \"actions/checkout@v4\"\r\n\r\n      - name: \"Cache cargo\"\r\n        id: cache-cargo\r\n        uses: \"actions/cache@v4\"\r\n        with:\r\n          path: |\r\n            ~/.cargo/bin/\r\n            ~/.cargo/registry/index/\r\n            ~/.cargo/registry/cache/\r\n            ~/.cargo/git/db/\r\n            target/\r\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\r\n\r\n      - name: \"Install Rust\"\r\n        uses: \"actions-rs/toolchain@v1\"\r\n        with:\r\n          toolchain: \"stable\"\r\n\r\n      - name: \"Install bulloak\"\r\n        if: steps.cache-cargo.outputs.cache-hit != 'true'\r\n        run: \"cargo install bulloak\"\r\n\r\n      - name: \"Verify the concrete tests\"\r\n        run: \"bulloak check test/integration/concrete/**/**.tree --skip-modifiers\"\r\n\r\n      - name: \"Bulloak summary\"\r\n        run: |\r\n          echo \"## Bulloak result\" >> $GITHUB_STEP_SUMMARY\r\n          echo \"✅ Passed\" >> $GITHUB_STEP_SUMMARY\r\n```\r\n</details>\r\n\r\n### Note\r\n\r\nSince lockup repo does not use Bulloak yet, we can just add it to this repo instead of [reusable-workflow](https://github.com/sablier-labs/reusable-workflows). Once lockup repo has been refactored to use bulloak, we can add it to reusable-workflow repo.","createdAt":"2024-06-10T00:27:39Z","labels":["effort: medium","priority: 2","work: clear","type: ci"],"number":174,"repository":"sablier-labs/flow","state":"closed","title":"Use bulloak in github workflow","type":"issue","updatedAt":"2024-06-11T14:49:03Z","url":"https://github.com/sablier-labs/flow/issues/174"},{"author":"smol-ninja","body":"Since this is common across all concrete tests, add this to Integration test setup.","createdAt":"2024-06-09T16:59:51Z","labels":["priority: 1","effort: low","work: clear","type: test"],"number":171,"repository":"sablier-labs/flow","state":"closed","title":"Warp one month in Integration test setup","type":"issue","updatedAt":"2024-06-10T21:25:27Z","url":"https://github.com/sablier-labs/flow/issues/171"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/flow/discussions/165, refactor the events to follow the pre-defined rule.","createdAt":"2024-06-07T13:37:30Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":169,"repository":"sablier-labs/flow","state":"closed","title":"Refactor events emitted by the protocol","type":"issue","updatedAt":"2024-06-08T13:45:50Z","url":"https://github.com/sablier-labs/flow/issues/169"},{"author":"smol-ninja","body":"I think there are a few inconsistencies among the events emitted. So I decided to make rules for them.\r\n\r\n### Rules\r\n1. All events must contain `streamId` and `asset` as the first two entries.\r\n2. `streamId` must always be indexed so that it can be used to track down actions for that stream Id.\r\n3. If there is a transfer of asset, the `asset` must be indexed.\r\n4. If there is a transfer of asset, the counterparty, which is sending/receiving the asset, must be indexed.\r\n5. As an exception, create must have `sender` and `recipient` indexed.\r\n6. No indexing otherwise.\r\n\r\nHere is the revised version:\r\n\r\n```solidity\r\nevent AdjustFlowStream(\r\n    uint256 indexed streamId, uint128 amountOwed, uint128 newRatePerSecond, uint128 oldRatePerSecond\r\n);\r\n\r\nevent CreateFlowStream(\r\n    uint256 indexed streamId,\r\n    IERC20 asset,\r\n    address indexed recipient,\r\n    address indexed sender,\r\n    uint40 lastTimeUpdate,\r\n    uint128 ratePerSecond\r\n);\r\n\r\nevent DepositFlowStream(\r\n    uint256 indexed streamId, IERC20 indexed asset, address indexed funder, uint128 depositAmount\r\n);\r\n\r\nevent PauseFlowStream(\r\n    uint256 indexed streamId, IERC20 asset, address recipient, address sender, uint128 amountOwed\r\n);\r\n\r\nevent RefundFromFlowStream(\r\n    uint256 indexed streamId, IERC20 indexed asset, address indexed sender, uint128 refundAmount\r\n);\r\n\r\nevent RestartFlowStream(\r\n    uint256 indexed streamId, IERC20 asset, address recipient, address sender, uint128 ratePerSecond\r\n);\r\n\r\nevent WithdrawFromFlowStream(\r\n    uint256 indexed streamId, IERC20 indexed asset, address indexed to, uint128 withdrawnAmount\r\n);\r\n```\r\n\r\nRFC @andreivladbrg.","createdAt":"2024-06-06T18:33:13Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":164,"repository":"sablier-labs/flow","state":"closed","title":"Rules for emitted events","type":"issue","updatedAt":"2024-06-06T18:35:39Z","url":"https://github.com/sablier-labs/flow/issues/164"},{"author":"smol-ninja","body":"How do we decide which error should contain `streamId`?\r\n\r\nSome of the errors contain `streamId` and some of them not. I failed to understand what determines that. IMO we should exclude `streamId` from errors since they are always part of the function's input data.\r\n\r\nRFC @andreivladbrg.","createdAt":"2024-06-06T18:01:52Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":163,"repository":"sablier-labs/flow","state":"closed","title":"Remove `streamId` from `Errors`","type":"issue","updatedAt":"2024-06-07T10:38:10Z","url":"https://github.com/sablier-labs/flow/issues/163"},{"author":"smol-ninja","body":"1. Write fuzz test for `create`\r\n2. Write fuzz test for `deposit`","createdAt":"2024-06-05T19:46:09Z","labels":["effort: high","priority: 1","work: complicated","subtask"],"number":159,"repository":"sablier-labs/flow","state":"closed","title":"Add fuzz tests for create and deposit","type":"issue","updatedAt":"2024-06-07T15:21:21Z","url":"https://github.com/sablier-labs/flow/issues/159"},{"author":"andreivladbrg","body":"Ref: https://github.com/foundry-rs/foundry/pull/7309\r\n","createdAt":"2024-06-05T10:38:57Z","labels":["effort: low","priority: 2","work: clear","type: test"],"number":157,"repository":"sablier-labs/flow","state":"closed","title":"Use `vm.assume` in invariant handlers instead of returning","type":"issue","updatedAt":"2024-06-06T16:18:09Z","url":"https://github.com/sablier-labs/flow/issues/157"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/flow/discussions/154","createdAt":"2024-06-04T10:33:22Z","labels":["priority: 0","type: refactor","effort: medium","work: clear"],"number":156,"repository":"sablier-labs/flow","state":"closed","title":"Drop support for `ERC20` tokens with `decimals > 18`","type":"issue","updatedAt":"2024-06-04T17:37:09Z","url":"https://github.com/sablier-labs/flow/issues/156"},{"author":"andreivladbrg","body":"### About\r\n\r\nIn the current version of the `deposit` function it requires a 18 decimal `amount` param.\r\n\r\nThis causes a bug when the asset has less than 18 decimals due to a problem here:\r\n\r\nhttps://github.com/sablier-labs/flow/blob/aac36d5948a923e07c5e08b147f50ba8d992535b/src/SablierFlow.sol#L413\r\n\r\nImagine this scenario for a 6 decimals asset:\r\n- a stream is created \r\n- a deposit is made with an amount of assets (let's say `1_000000_500000000000`) \r\n    - notice the \"5\" digit right after the 6th decimals\r\n- `_streams[streamId].balance` will be updated to `1_000000_500000000000` \r\n    -  the `asset.balanceOf(flow) = 1_000000`\r\n- a second deposit it's made with the same amount\r\n- `_streams[streamId].balance` will be updated to `2 * 1_000000_500000000000 = 2_000001_000000000000` \r\n    -  notice the shifted digit to the left (due to 5 + 5)\r\n    - the `asset.balanceOf(flow) = 2_000000`\r\n\r\n\r\nSo, now we will have a stream balance, normalized (2_000001), greater than the actual asset balance (2_000000) assigned to the unique stream, which as you can see, it can lead to a leak of funds.\r\n\r\nNote: For extract operations (refund and withdraw), I couldn’t find a problem because the amount is subtracted and not added, so we will not have problems with digits shifting to the left.\r\n\r\n<details><summary>Test on remix</summary>\r\n\r\n```solidity\r\n    function bugTest()\r\n        public\r\n        pure\r\n        returns (uint128 afterSecondDepositStreamBal, uint128 afterSecondDepositAssetBalanceOf, uint128 streamBalAfterSecondDepositNormalized)\r\n    {\r\n        // There is a first deposit made with 1_000000_500000000000, so:\r\n\r\n        uint128 currentAssetBalanceOf = 1_000000;\r\n        uint128 currentStreamBal = 1_000000_500000000000;\r\n\r\n        // Deposit the same amount\r\n        uint128 depositAmount = currentStreamBal;\r\n\r\n        afterSecondDepositStreamBal = currentStreamBal + depositAmount; // result: 2_000001_000000000000\r\n        afterSecondDepositAssetBalanceOf = currentAssetBalanceOf + _calculateTransferAmount(depositAmount, 6); // result: 2_000000\r\n        streamBalAfterSecondDepositNormalized = _calculateTransferAmount(afterSecondDepositStreamBal, 6); // 2_000001\r\n    }\r\n\r\n    function _calculateTransferAmount(uint128 amount, uint8 assetDecimals) internal pure returns (uint128) {\r\n        // Return the original amount if asset's decimals are already 18.\r\n        if (assetDecimals == 18) {\r\n            return amount;\r\n        }\r\n\r\n        if (assetDecimals > 18) {\r\n            uint8 normalizingFactor = assetDecimals - 18;\r\n            return (amount * (10 ** normalizingFactor)).toUint128();\r\n        } else {\r\n            uint8 normalizingFactor = 18 - assetDecimals;\r\n            return (amount / (10 ** normalizingFactor)).toUint128();\r\n        }\r\n    }\r\n``` \r\n\r\n</details> \r\n\r\n\r\n### How to fix this\r\n\r\nThe fix consists of changing the amount parameter to match the asset decimals. However, the internal storage can still be in an 18-decimal format, so we will need to add a new function `_calculateDepositAmount`.\r\n\r\nFor assets with decimals greater than 18, I believe we will need to restrict the last decimals to zeros (the difference between decimals and 18). For example, the transfer amount divided by $10^{18}$ must be equal to $10^{normalizingFactor}$ so that assets won’t be stuck in the contract. Yes, it is a limitation, but it wouldn’t lead to loss of funds from other streams. Also, there are almost no assets with more than 18 decimals.\r\n\r\n```solidity\r\n    function _calculateDepositAmount(uint128 transferAmount, uint8 assetDecimals) internal pure returns (uint128) {\r\n        // Return the original amount if asset's decimals are already 18.\r\n        if (assetDecimals == 18) {\r\n            return transferAmount;\r\n        }\r\n\r\n        if (assetDecimals > 18) {\r\n            uint8 normalizingFactor = assetDecimals - 18;\r\n            uint256 factor = 10 ** normalizingFactor;\r\n\r\n            if (uint256(transferAmount) / 1e18 != factor) {\r\n                revert InvalidDepositAmount();\r\n            }\r\n        \r\n            return (transferAmount / factor).toUint128();\r\n        } else {\r\n            uint8 normalizingFactor = 18 - assetDecimals;\r\n            return (transferAmount * (10 ** normalizingFactor)).toUint128();\r\n        }\r\n    }\r\n``` \r\n---\r\n\r\n@smol-ninja Please lmk if I have missed something in my proposed fix, or if you have a better idea on how address this bug. Otherwise I will open a PR with this fix.\r\n","createdAt":"2024-05-31T16:11:16Z","labels":["effort: high","priority: 0","work: complex","type: bug"],"number":148,"repository":"sablier-labs/flow","state":"closed","title":"Bug in `deposit` if the asset decimals are less than 18 ","type":"issue","updatedAt":"2024-06-04T17:37:08Z","url":"https://github.com/sablier-labs/flow/issues/148"},{"author":"smol-ninja","body":"Find \"one\" core invariant that can be verified at the end of every execution.\r\n\r\n### Reading\r\n1. https://www.nascent.xyz/idea/youre-writing-require-statements-wrong for ideas\r\n2. https://github.com/orgs/sablier-labs/discussions/7","createdAt":"2024-05-30T21:01:39Z","labels":["priority: 1","work: complex","effort: medium","type: feature"],"number":146,"repository":"sablier-labs/flow","state":"closed","title":"Apply FREI-PI","type":"issue","updatedAt":"2025-02-24T17:27:43Z","url":"https://github.com/sablier-labs/flow/issues/146"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/flow/discussions/116\r\n\r\nIt should remove the check from `create` function, and also to modify the `_safeAssetDecimals` function","createdAt":"2024-05-30T11:30:15Z","labels":["priority: 1","type: refactor","work: complex","effort: medium"],"number":144,"repository":"sablier-labs/flow","state":"closed","title":"Allow zero decimals assets","type":"issue","updatedAt":"2024-06-03T12:54:48Z","url":"https://github.com/sablier-labs/flow/issues/144"},{"author":"andreivladbrg","body":"As decided here: https://github.com/sablier-labs/flow/issues/121\r\n\r\n","createdAt":"2024-05-28T21:41:32Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":140,"repository":"sablier-labs/flow","state":"closed","title":"Remove calculation functions with `time` param","type":"issue","updatedAt":"2024-05-30T18:28:11Z","url":"https://github.com/sablier-labs/flow/issues/140"},{"author":"smol-ninja","body":"- Define a new `amountOwedOf` that calls internal `_amountOwedOf` function\r\n\r\nRelated Discussions\r\n- https://github.com/sablier-labs/flow/pull/126#issuecomment-2134749441","createdAt":"2024-05-28T14:52:14Z","labels":["priority: 1","effort: medium","type: feature","work: complicated"],"number":139,"repository":"sablier-labs/flow","state":"closed","title":"Add `amountOwedOf` view function","type":"issue","updatedAt":"2024-05-29T14:56:20Z","url":"https://github.com/sablier-labs/flow/issues/139"},{"author":"andreivladbrg","body":"The idea is to write some common tests (integration) for the functions that have these modifiers:\r\n\r\nhttps://github.com/sablier-labs/flow/blob/3e897f8f414ed6dfd264f9ecb53457891a317332/src/abstracts/SablierFlowState.sol#L45-L73","createdAt":"2024-05-28T14:16:52Z","labels":["priority: 1","work: complex","effort: medium","type: test"],"number":138,"repository":"sablier-labs/flow","state":"closed","title":"Find a way to write common tests to DRY-FY the code","type":"issue","updatedAt":"2024-05-31T13:05:37Z","url":"https://github.com/sablier-labs/flow/issues/138"},{"author":"andreivladbrg","body":"The idea is to have 3 or 4 different types of assets in the invariant tests to be more precise.\r\n\r\nassets with 1/6/18 decimals.\r\nassets that either return or do not return a value\r\n\r\nThis is useful because we use only 18-decimal numbers internally.","createdAt":"2024-05-28T12:35:17Z","labels":["effort: high","work: complex","priority: 2","type: test"],"number":137,"repository":"sablier-labs/flow","state":"closed","title":"Add more assets in invariant tests","type":"issue","updatedAt":"2024-06-06T16:18:09Z","url":"https://github.com/sablier-labs/flow/issues/137"},{"author":"andreivladbrg","body":"Also explained here: https://github.com/sablier-labs/flow/pull/113#discussion_r1612292839\r\n\r\n","createdAt":"2024-05-27T23:32:34Z","labels":["effort: high","work: complex","priority: 2","type: test"],"number":133,"repository":"sablier-labs/flow","state":"closed","title":"Add an invariant test that checks if remaining amount is never greater than streamed amound from first time to now","type":"issue","updatedAt":"2024-09-19T21:30:12Z","url":"https://github.com/sablier-labs/flow/issues/133"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/flow/discussions/111\r\n\r\nThe following tests should to be refactored using bulloak:\r\n- [x] adjustRatePerSecond\r\n- [x] create\r\n- [x] deposit\r\n- [x] pause\r\n- [x] recentAmountOf\r\n- [x] refund\r\n- [x] refundableAmountOf\r\n- [x] restart\r\n- [x] restartAndDeposit\r\n- [x] streamDebtOf\r\n- [x] transferFrom\r\n- [x] withdrawAt\r\n- [x] withdrawMax\r\n- [x] withdrawableAmountOf","createdAt":"2024-05-27T21:56:04Z","labels":["effort: high","work: complex","priority: 2","type: test"],"number":132,"repository":"sablier-labs/flow","state":"closed","title":"Change structure of the tests to use Bulloak","type":"issue","updatedAt":"2024-06-06T10:34:14Z","url":"https://github.com/sablier-labs/flow/issues/132"},{"author":"andreivladbrg","body":"The idea is to add a new contract that returns the NFT `tokenURI` , which will be updated in the future. (In the first release, it can be an empty string)\r\n\r\nThis would also require adding an [Adminable](https://github.com/sablier-labs/v2-core/blob/main/src/abstracts/Adminable.sol) contract","createdAt":"2024-05-27T14:58:13Z","labels":["priority: 1","effort: medium","work: clear"],"number":131,"repository":"sablier-labs/flow","state":"closed","title":"Add a dummy NFT descriptor ","type":"issue","updatedAt":"2024-05-30T18:23:07Z","url":"https://github.com/sablier-labs/flow/issues/131"},{"author":"smol-ninja","body":"We no longer need `TimestampStore` for invariant tests.\r\n\r\nRelated:\r\n- https://github.com/sablier-labs/v2-core/issues/916\r\n- https://github.com/foundry-rs/foundry/pull/7819\r\n- https://github.com/foundry-rs/foundry/issues/4994","createdAt":"2024-05-26T10:25:40Z","labels":["priority: 1","effort: medium","work: clear","type: test"],"number":127,"repository":"sablier-labs/flow","state":"closed","title":"Remove \"TimestampStore\" from invariant tests","type":"issue","updatedAt":"2024-05-27T17:18:31Z","url":"https://github.com/sablier-labs/flow/issues/127"},{"author":"smol-ninja","body":"## tl;dr\r\n\r\nWhen `lastTimeUpdate < depletionTime < block.timestamp`, in order words `remainingAmount < balance <  remainingAmount + _streamedAmountOf`, the implementation loses track of an amount that is equal to `streamedAmount - balance`. Since this amount is owed to the recipient, this is a serious issue.\r\n\r\n## Step by step\r\n\r\nConsider the following test scenario. Ideally, this should pass but in the current implementation, it would fail.\r\n\r\n1. Sender changes rps before depletion time. This would update `remainingAmount` and `lastTimeUpdate`.\r\n2. Let the time pass beyond depletion time.\r\n3. Now the actual amount owed to the recipient = stored remaining amount + streamed amount since last time update. But since this would be > balance, if recipients withdraws max amount, he would receives the full balance. \r\n4. Now, the remaining owed amount to recipient should be = (ra + sa - bal) but if you fetch ra + sa from the API, it would return 0.\r\n5. The remaining amount owed to recipient is lost.\r\n\r\n<details><summary>Click to expand exploit test</summary>\r\n\r\n```solidity\r\nfunction test_Exploit() external {\r\n    vm.warp({ newTimestamp: flow.depletionTimeOf(defaultStreamId) - 1000 });\r\n\r\n    // Lets update `lastTimeUpdate` and  `remainingAmount` by calling `adjustRatePerSecond`.\r\n    flow.adjustRatePerSecond(defaultStreamId, RATE_PER_SECOND - 1);\r\n    // Lets quickly set it back to the original rate.\r\n    flow.adjustRatePerSecond(defaultStreamId, RATE_PER_SECOND);\r\n\r\n    // assertion: remainingAmount < balance and lastTimeUpdate < getDepletionTime\r\n    assertLt(\r\n        flow.getRemainingAmount(defaultStreamId), flow.getBalance(defaultStreamId), \"remainingAmount < balance\"\r\n    );\r\n    assertLt(\r\n        flow.getLastTimeUpdate(defaultStreamId),\r\n        flow.depletionTimeOf(defaultStreamId),\r\n        \"lastTimeUpdate < getDepletionTime\"\r\n    );\r\n\r\n    vm.warp({ newTimestamp: flow.depletionTimeOf(defaultStreamId) + 1000 });\r\n\r\n    // assertion: remainingAmount < balance <  remainingAmount + _streamedAmountOf\r\n    assertLt(\r\n        flow.getRemainingAmount(defaultStreamId), flow.getBalance(defaultStreamId), \"remainingAmount < balance\"\r\n    );\r\n    assertLt(\r\n        flow.getBalance(defaultStreamId),\r\n        flow.getRemainingAmount(defaultStreamId) + flow.streamedAmountOf(defaultStreamId),\r\n        \"balance < remainingAmount + _streamedAmountOf\"\r\n    );\r\n\r\n    // Now if user withdraws, remainingAmount set to 0 , user should receive `balance` and there should be some\r\n    // amount owed to the recipient (= remainingAmount + _streamedAmountOf - balance) which can be withdrawn after\r\n    // next\r\n    // deposit.\r\n    resetPrank({ msgSender: users.recipient });\r\n    vm.expectEmit({ emitter: address(dai) });\r\n    emit IERC20.Transfer({\r\n        from: address(flow),\r\n        to: users.recipient,\r\n        value: normalizeAmountWithStreamId(defaultStreamId, flow.getBalance(defaultStreamId))\r\n    });\r\n    flow.withdrawMax({ streamId: defaultStreamId, to: users.recipient });\r\n    assertEq(flow.getRemainingAmount(defaultStreamId), 0);\r\n\r\n    // Now we have lost track of the amount owed to the recipient.\r\n\r\n    resetPrank({ msgSender: users.sender });\r\n    flow.deposit(defaultStreamId, DEPOSIT_AMOUNT);\r\n    assertGt(flow.getBalance(defaultStreamId), 0);\r\n\r\n    // Lets try to withdraw the remaining\r\n    resetPrank({ msgSender: users.recipient });\r\n    flow.withdrawMax({ streamId: defaultStreamId, to: users.recipient });\r\n    assertLt(flow.getBalance(defaultStreamId), DEPOSIT_AMOUNT);\r\n}\r\n```\r\n\r\n</details>","createdAt":"2024-05-26T00:31:47Z","labels":["effort: high","priority: 0","type: bug","work: complicated"],"number":125,"repository":"sablier-labs/flow","state":"closed","title":"Amount owed is lost when withdraw is made post depletion timestamp","type":"issue","updatedAt":"2024-05-28T13:53:46Z","url":"https://github.com/sablier-labs/flow/issues/125"},{"author":"andreivladbrg","body":"In the current version of the calculation functions that have a `time` param we don't check if it is greater than the `lastTimeUpdate`. \r\n\r\nIf `time` is less than `lastTimeUpdate` it is a problem because in the streamed amount function when the `elapsedTime` is calculated, it will have a huge value (because we use `unchecked` and it won't underflow) , and ultimately will return a enormous streamed amount, which is not correct.\r\n\r\nhttps://github.com/sablier-labs/flow/blob/ea9534ddf489ae965d2c01c49dd0988fe7ef015d/src/SablierFlow.sol#L440\r\n\r\nWe have two options for the case `time < lastTimeUpdate`:\r\n- we return zero \r\n- revert\r\n\r\nI vote for the first option, what do you say @smol-ninja ?\r\n\r\n","createdAt":"2024-05-24T20:30:47Z","labels":["priority: 0","effort: low","work: clear"],"number":121,"repository":"sablier-labs/flow","state":"closed","title":"Check that the `time` param is greater than `lastTimeUpdate` in calculation functions","type":"issue","updatedAt":"2024-05-28T21:42:13Z","url":"https://github.com/sablier-labs/flow/issues/121"},{"author":"andreivladbrg","body":"Applying the same logic from `lockup` contracts, we have marked the main contracts from `src`  under `BUSL`, but the problem is that we don't have, yet, an actual licence for it.\r\n\r\nSo, we need both `BUSL` and `GPL` licences generated for this project as well.\r\n\r\n@PaulRBerg how should we proceed?","createdAt":"2024-05-24T13:11:52Z","labels":["effort: low","priority: 2","type: docs","work: clear"],"number":119,"repository":"sablier-labs/flow","state":"closed","title":"Generate licences for Flow contracts","type":"issue","updatedAt":"2024-10-07T10:41:11Z","url":"https://github.com/sablier-labs/flow/issues/119"},{"author":"smol-ninja","body":"<sup>Original [discussed here](https://github.com/sablier-labs/v2-open-ended/issues/112#issuecomment-2125676796).</sup>\r\n\r\n## Copied from [here](https://github.com/sablier-labs/v2-open-ended/issues/112#issuecomment-2125676796)\r\n\r\n[deposit.tree](https://github.com/sablier-labs/v2-open-ended/blob/main/test/integration/deposit/deposit.tree)\r\n```tree\r\n├── when the asset misses the ERC-20 return \r\n│  └── it should make the deposit\r\n└── when the asset does not miss the ERC-20 return value\r\n   ├── given the asset does not have 18 decimals\r\n   │  ├── it should update the stream balance\r\n   │  ├── it should perform the ERC-20 transfer\r\n   │  ├── it should emit a {Transfer} and {DepositOpenEndedStream} event\r\n   │  └── it should emit a {MetadataUpdate} event\r\n   └── given the asset has 18 decimals\r\n      ├── it should update the stream balance\r\n      ├── it should perform the ERC-20 transfer\r\n      ├── it should emit a {Transfer} and {DepositOpenEndedStream} event\r\n      └── it should emit a {MetadataUpdate} event\r\n```\r\n\r\n[Tests are like](https://github.com/sablier-labs/v2-open-ended/blob/main/test/integration/deposit/deposit.t.sol):\r\n1. `function test_Deposit_AssetMissingReturnValue_AssetNot18Decimals`\r\n2. `function test_Deposit`\r\n\r\nSo if you read tree and test side by side, you can see that we cover `when the asset misses the ERC-20 return` but we do not cover `given the asset does not have 18 decimals`. So either we combine these two branches into one (since usdt works for both) or a write a separate tes\r\n\r\n@andreivladbrg : I think we can combine these two, as the test code would be the same but the function names would be different","createdAt":"2024-05-23T11:24:38Z","labels":["effort: medium","priority: 2","type: test","work: complicated"],"number":117,"repository":"sablier-labs/flow","state":"closed","title":"Refactor branches in `deposit`, `refundFromStream` and `withdrawAt` trees","type":"issue","updatedAt":"2024-06-07T14:10:46Z","url":"https://github.com/sablier-labs/flow/issues/117"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/v2-open-ended/blob/main/test/integration/withdraw-at/withdrawAt.tree","createdAt":"2024-05-22T18:46:04Z","labels":["priority: 1","effort: low","work: clear","type: test"],"number":115,"repository":"sablier-labs/flow","state":"closed","title":"Address zero test for `to` in `withdrawAt` is missing","type":"issue","updatedAt":"2024-05-25T17:02:34Z","url":"https://github.com/sablier-labs/flow/issues/115"},{"author":"smol-ninja","body":"## Part 1\r\nExclude keyword `stream`\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/110\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/109","createdAt":"2024-05-22T13:46:51Z","labels":["effort: high","priority: 1","type: refactor","work: clear"],"number":114,"repository":"sablier-labs/flow","state":"closed","title":"Refactor function names in the core contract","type":"issue","updatedAt":"2024-05-30T12:57:26Z","url":"https://github.com/sablier-labs/flow/issues/114"},{"author":"PaulRBerg","body":"## Problem\n\nWe need to document the minimum fees charged by the FactoryMerkle contracts (formerly known as `MerkleFactory`). At the moment, we are doing this in the [docs site](https://docs.sablier.com/concepts/fees#merklefactory), but the issue is that the minimum fees change quite frequently, which makes maintenance difficult.\n\nIn the next release, we will use onchain oracles for obtaining USD price data for ETH and change the denomination of the onchain fee from ETH to USD, but even so, we will still need to document the fees transparently.\n\n## Solution\n\nImplement a table in the landing page (somewhere on sablier.com) that fetches the fees from the smart contracts themselves.\n\nNote that there's no need to do this for Airdrops v1.3.0, which used ETH denominations. We will only do this for Airdrops v1.4.0, which will use USD denominations fees, and we will display the fees as $3, $1, or 0 for chains where there is no Chainlink oracle.","createdAt":"2025-03-24T19:54:06Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1541,"repository":"sablier-labs/interfaces","state":"open","title":"Tables with fees charged by the FactoryMerkle contracts","type":"issue","updatedAt":"2025-04-03T09:39:52Z","url":"https://github.com/sablier-labs/interfaces/issues/1541"},{"author":"PaulRBerg","body":"## Problem\n\nThese warnings recently started appearing in the logs emitted when running `yarn vercel build` (so they also appear in CI). These logs do not appear when running `next build`.\n\n<details><summary>Toggle to see all logs</summary>\n<p>\n\n```text\nWARNING: Unable to find source file for page 404.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page airdrops.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page airdrops/campaign/[id].js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page index.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page payments.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page payments/create.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page payments/stream/[id].js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page vesting.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page vesting/create.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page vesting/stream.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page vesting/stream/[id].js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/airdrops/by-id.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/captcha.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/edge-config.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/geolocation.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/merkle/claimable.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/merkle/details.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/merkle/eligibility.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/merkle/hidden.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/merkle/update.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/oracle.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/payments/by-id.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/screening.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/vesting/by-id.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\nWARNING: Unable to find source file for page api/vesting/by-latest.js with extensions: tsx, ts, jsx, js, this can cause functions config from `vercel.json` to not be applied\n```\n\n</p>\n</details> \n\n## References\n\nThis is the only reference I could find about this: https://github.com/vercel/next.js/discussions/23999\n\nWe might want to contact Vercel's support team to help us troubleshoot this.","createdAt":"2025-03-24T15:29:15Z","labels":["priority: 2","type: build","work: complicated"],"number":1538,"repository":"sablier-labs/interfaces","state":"open","title":"Vercel warning: Unable to find source file for page with extensions","type":"issue","updatedAt":"2025-03-24T15:29:24Z","url":"https://github.com/sablier-labs/interfaces/issues/1538"},{"author":"maxdesalle","body":"I think there should be a message indicating here explicitly and very clearly that when you make a stream uncancelable, you lose all control over it.\n\nA user today reached out in private wanting us to cancel streams that were mistakenly created, and it's not the first time this happens.\n\n![Image](https://github.com/user-attachments/assets/dc0ebfeb-2814-4dda-9a06-9b09be44f5a8)\n![Image](https://github.com/user-attachments/assets/f393cf07-4eee-416f-a328-31cd5b55b827)","createdAt":"2025-03-24T14:57:08Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1536,"repository":"sablier-labs/interfaces","state":"open","title":"Add a warning when a stream is set as uncancelable","type":"issue","updatedAt":"2025-03-24T15:26:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1536"},{"author":"PaulRBerg","body":"Affected stream: https://app.sablier.com/vesting/stream/LK-56-51/\n\nI was able to replicate the bug reported by the user — the withdrawable amount is reported as 0, and the withdraw button is not clickable:\n\n<img width=\"373\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c48c99ba-6c12-42ea-bc4e-9c8545cf6444\" />","createdAt":"2025-03-24T12:10:01Z","labels":["type: bug","priority: 0"],"number":1535,"repository":"sablier-labs/interfaces","state":"closed","title":"Users are unable to withdraw from streams","type":"issue","updatedAt":"2025-03-25T13:32:22Z","url":"https://github.com/sablier-labs/interfaces/issues/1535"},{"author":"PaulRBerg","body":"## Problem\n\nWe started implementing [The Optimistic Approach with Guardrails](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729865961) solution for dynamically estimating the max batch size.\n\nWhile working on that, we bumped into a problem with Safe, which was explained by @gavriliumircea [here](https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2743742756). In short, simulating the tx doesn't work for Safes because the ERC-20 approval is required before the stream creation, but the tx simulation simulates the 2nd tx independent of the state changes produced by the 1st tx (the ERC-20 approval).\n\n## Solution\n\nThe solution is to use the [MultiSender](https://etherscan.io/address/0x8d29be29923b68abfdd21e541b9374737b49cdad) contract to create a single Safe tx instead of batching two separate Safe tx. This is an approach I've seen recommended on StackExchange [here](https://ethereum.stackexchange.com/questions/151414/how-to-use-batch-transaction-feature-programatically). Unfortunately, it is [nowhere to be found in the Safe docs](https://ethereum.stackexchange.com/a/151442/24693).\n\n### Spec\n\nThis code:\n\nhttps://github.com/sablier-labs/interfaces/blob/e78548c337739f3dd6adc5871fd80a8e234df066/packages/contracts/src/framework/interact.ts#L157-L168\n\nHas to be rewritten to use the `MetaTransactionData` type and the `encodeMultiSendData` function from the [Protocol Kit](https://github.com/safe-global/safe-core-sdk/tree/36ff4815298f903580dde7b677f7d62ae527e350/packages/protocol-kit).\n\n## References\n\n- [GitHub: MultiSendCallOnly Contract](https://github.com/safe-global/safe-smart-account/blob/21dc82410445637820f600c7399a804ad55841d5/contracts/libraries/MultiSendCallOnly.sol)\n- [X: Suppose you want to batch two transactions in Safe](https://x.com/PaulRBerg/status/1903096944500638069)\n- [StackExchange: Estimating the gas cost for a batch transaction in Safe](https://ethereum.stackexchange.com/q/168410/24693)\n- [GitHub: MultiSend functionality is not documented](https://github.com/safe-global/safe-core-sdk/issues/1182)","createdAt":"2025-03-24T11:52:33Z","labels":["type: bug","priority: 0","effort: high","work: complicated"],"number":1534,"repository":"sablier-labs/interfaces","state":"closed","title":"Use MultiSendCallOnly contract to batch transactions in Safe","type":"issue","updatedAt":"2025-03-28T22:23:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1534"},{"author":"PaulRBerg","body":"## Problem\n\nThat \"Invalid\" label is there because no token is selected, but it's a somewhat strange UX to see \"Invalid\" populated in all columns when uploading a CSV file.\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/863f0716-aed0-4110-a970-68e96af152e6\" />\n\n## Solutions\n\n### Solution 1: Bring Up the Token Dropdown\n\nImmediately bring up the token dropdown as soon as the CSV file has completed uploading.\n\n### Solution 2: Bespoke Warning\n\nA bespoke warning outside the table prompting the user to provide the input. Or having the token field shimmer or be highlighted in some particular way.\n\n","createdAt":"2025-03-17T22:36:59Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1531,"repository":"sablier-labs/interfaces","state":"open","title":"Prompt user to select token when uploading CSV","type":"issue","updatedAt":"2025-03-17T22:36:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1531"},{"author":"PaulRBerg","body":"It's not super intuitive that clicking on \"Valid\" leads to a chart — we should come up with a better name for the \"Validity\" column and the \"Valid\" buttons.\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/343e1a71-847e-4368-972e-e763f17e079b\" />","createdAt":"2025-03-17T22:32:49Z","labels":["priority: 2","effort: low","type: style","work: clear"],"number":1530,"repository":"sablier-labs/interfaces","state":"open","title":"Make it clearer and more intuitive that the chart can be rendered for CSV uploads","type":"issue","updatedAt":"2025-03-17T22:32:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1530"},{"author":"PaulRBerg","body":"<img width=\"750\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/7fd34ab6-f769-4834-ac14-55c7427bac71\" />","createdAt":"2025-03-17T22:21:05Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1528,"repository":"sablier-labs/interfaces","state":"open","title":"Skip hours when simulating Monthly Unlocks/ Steppers","type":"issue","updatedAt":"2025-03-17T22:21:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1528"},{"author":"PaulRBerg","body":"## Problem\n\nThe Chart button is tiny and it's easy to miss when creating streams. Off the top of my head, I can recall situations on Telegram where we had to manually inform users that they have the ability to see a chart of their vesting curve prior to creating the streams.\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bb591ab8-ff22-4f05-a371-ea856ae2ad58\" />\n\n## Solutions\n\n### Solution 1: Direct Rendering\n\nRender the chart in the page, directly. And do this for all streams, not just the 1st one.\n\n### Solution 2: Better Highlighting\n\nBetter highlight the chart button — make it bigger, flashier, etc.","createdAt":"2025-03-17T22:18:15Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":1527,"repository":"sablier-labs/interfaces","state":"open","title":"Make chart more visible when creating streams using the form","type":"issue","updatedAt":"2025-03-17T22:18:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1527"},{"author":"PaulRBerg","body":"Context: https://github.com/sablier-labs/interfaces/issues/1504#issuecomment-2729537302","createdAt":"2025-03-17T17:29:31Z","labels":["priority: 3","effort: low","type: ci","work: clear"],"number":1524,"repository":"sablier-labs/interfaces","state":"closed","title":"Don't lint landing app when deploy CI is run, and vice-versa","type":"issue","updatedAt":"2025-03-27T12:37:54Z","url":"https://github.com/sablier-labs/interfaces/issues/1524"},{"author":"PaulRBerg","body":"We should limit how many streams can be created through the Sablier UI to something like 20.\n\nDoing so would (in part) alleviate this issue: https://github.com/sablier-labs/interfaces/issues/1439\n\nAs agreed here: https://github.com/sablier-labs/interfaces/issues/1473#issuecomment-2729168352","createdAt":"2025-03-17T13:44:33Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1521,"repository":"sablier-labs/interfaces","state":"open","title":"Limit number of streams that can be created through the UI","type":"issue","updatedAt":"2025-03-17T13:44:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1521"},{"author":"smol-ninja","body":"### Problem\n\nIn VCA campaigns, users have an incentive to claim near the end of the campaign. This creates two potential risks:\n\n1.  A misconfigured campaign won't get detected until the end. \n2. In case of a correctly configured campaign, the campaign owner could misuse the grace period, which begins near the end, and clawback funds.\n\n### Solution\n\nWe could implement a checkbox before contract deployment that requires the user to confirm the following statements:\n\n<img width=\"405\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0c0d446a-57b1-4b6a-97d4-cb774b6de0a9\" />\n\n1. I confirm that the Merkle Root is valid.\n2. I confirm that I will not misuse the grace period, during which I can claw back all funds from the campaign..\n\nThough this does not solve the problem, this ensures that all campaign creators understand these risks.\n\nAnother possible approach is to include a test recipient (either us or the campaign creator) with a very small allocation. This recipient would immediately claim their allocation after the campaign is created (either automatically through the UI or manually later), verifying that the claim process works as expected. This would also initiate the grace period early. However, implementing this would require (i) consent from the campaign creator (ii) changes to the CSV file.\n\nOpening this issue for discussion and feedback.","createdAt":"2025-03-17T13:12:41Z","labels":["type: feature","priority: 3","effort: medium","work: complicated"],"number":1520,"repository":"sablier-labs/interfaces","state":"closed","title":"Preventing potential misuses of grace period in VCA campaigns","type":"issue","updatedAt":"2025-03-17T16:18:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1520"},{"author":"PaulRBerg","body":"Once [this PR](https://github.com/sablier-labs/interfaces/pull/1506) is merged, we should look into using Yarn v4's cool feature [`yarn foreach --since`](https://yarnpkg.com/cli/workspaces/foreach):\n\n> If `--since` is set, Yarn will only run the command on workspaces that have been modified since the specified ref. By default Yarn will use the refs specified by the [changesetBaseRefs](https://yarnpkg.com/configuration/yarnrc#changesetBaseRefs) configuration option.\n\nWith this, we might able to run the lint scripts only in those repos that have changes with respect to `main` or `staging`. Which sounds awesome!","createdAt":"2025-03-16T22:35:57Z","labels":["priority: 3","effort: low","type: ci","work: clear"],"number":1519,"repository":"sablier-labs/interfaces","state":"open","title":"Consider using `yarn foreach --since` in CI","type":"issue","updatedAt":"2025-03-18T12:49:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1519"},{"author":"PaulRBerg","body":"The cache step in CI caches only the root `node_modules` and the app's `node_modules`.\n\nThe `node_modules` directory in each package is not cached in CI, so there's no point in keeping these flags — unless you care about the linting being a few milliseconds on your local machine:\n\n https://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/packages/hooks/package.json#L62-L63","createdAt":"2025-03-16T22:32:27Z","labels":["priority: 3","effort: low","type: ci","work: complicated"],"number":1518,"repository":"sablier-labs/interfaces","state":"open","title":"The `--cache` and `--cache-location` flags in the packages don't work in CI","type":"issue","updatedAt":"2025-03-18T12:51:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1518"},{"author":"PaulRBerg","body":"It just dawned on me that the checkout and the cache steps in the deploy workflow are completely redundant:\n\nhttps://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/.github/workflows/deploy.yml#L26-L42\n\nThey are not needed because the base `deploy` workflow is always called within another deploy workflow (e.g. `deploy-client`), which always call the `ci` workflow before `deploy`. But the `ci` workflow checks out the repo, installs Node.js, and caches the dependencies, so we don't have to repeat those steps in `deploy`.","createdAt":"2025-03-16T19:43:28Z","labels":["priority: 1","effort: low","type: ci","work: clear"],"number":1516,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove redundant steps in deploy workflows","type":"issue","updatedAt":"2025-03-17T17:27:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1516"},{"author":"PaulRBerg","body":"Running `yarn g:all-deps` produces this:\n\nhttps://app.warp.dev/block/Xee7nrIbl03PlMIZuNunWT","createdAt":"2025-03-16T19:15:59Z","labels":["priority: 3","effort: low","type: build","work: clear"],"number":1515,"repository":"sablier-labs/interfaces","state":"open","title":"Fix dependency check fail","type":"issue","updatedAt":"2025-04-10T13:41:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1515"},{"author":"PaulRBerg","body":"We are using the following environment flags in our CI workflow:\n\nhttps://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/.github/workflows/ci.yml#L75-L80\n\nThe only flag that exists is `NEXT_TELEMETRY_DISABLED`. The others are nowhere to be found in the Vercel docs.\n\nIt's likely that they are custom flags implemented by [this developer](https://github.com/belgattitude/httpx/actions/runs/12142148389/workflow#L47-L51). Anyway.\n\n- `NEXTJS_IGNORE_ESLINT`: can be achieved by passing the `--no-lint` flag to the `next build` command\n- `NEXT_DISABLE_SOURCEMAPS` can be achieved with a setting in `next.config.js`, see [here](https://github.com/sablier-labs/interfaces/discussions/1513)\n\nAnd then:\n\n- `NEXTJS_IGNORE_TYPECHECK`: can be achieved using [`ignoreBuildErrors`](https://nextjs.org/docs/app/api-reference/config/next-config-js/typescript), however, we do NOT want to do this because the very purpose of building the app with Next.js is to ensure that the app can be compiled with Next.js's [custom TypeScript compiler](https://nextjs.org/docs/architecture/nextjs-compiler)","createdAt":"2025-03-16T17:26:21Z","labels":["priority: 1","effort: low","type: ci","work: clear"],"number":1514,"repository":"sablier-labs/interfaces","state":"closed","title":"Delete inexistent `NEXT_`/ `NEXTJS_` environment flags in CI","type":"issue","updatedAt":"2025-03-24T13:33:29Z","url":"https://github.com/sablier-labs/interfaces/issues/1514"},{"author":"PaulRBerg","body":"## Problem\n\nAccording to the [Vercel docs](https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables), only variables prefixed with `NEXT_PUBLIC_` are available in the browser environment.\n\nThis means that the variables prefixed with just `NEXT_` are NOT available in the browser (I couldn't find any info about this in the Vercel docs; this must have been documented if it were the case).\n\nAnd this further means that the names of the following environment variables are misleading:\n\n- `NEXT_MERKLE_API_BEARER_TOKEN`\n- `NEXT_RECAPTCHA_SITE_SECRET`\n- `NEXT_TRM_WALLET_SCREENING_API_KEY`\n\nBecause they are actually private variables that are NOT exposed in the production environment.\n\n## Solution\n\nDelete the `NEXT_` prefix and rearrange the `.env.example` files to make it clearer what the browser and the non-browser variables are.","createdAt":"2025-03-16T16:38:55Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1511,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove misleading `NEXT_` prefix from non-browser environment variables","type":"issue","updatedAt":"2025-03-24T12:53:45Z","url":"https://github.com/sablier-labs/interfaces/issues/1511"},{"author":"PaulRBerg","body":"When it is available, these chain IDs will be importable from the `@sablier/deployments` package:\n\nhttps://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/packages/assets/src/chains/index.ts#L34-L58\n\nContext:\n\n- https://github.com/sablier-labs/interfaces/discussions/1448\n- https://github.com/sablier-labs/deployments/issues/21","createdAt":"2025-03-16T16:34:38Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1510,"repository":"sablier-labs/interfaces","state":"open","title":"Imports chain IDs from `@sablier/deployments` package","type":"issue","updatedAt":"2025-03-16T16:34:38Z","url":"https://github.com/sablier-labs/interfaces/issues/1510"},{"author":"PaulRBerg","body":"See [Next.js: How to disable telemetry permanently in all environments?](https://stackoverflow.com/questions/63589166/next-js-how-to-disable-telemetry-permanently-in-all-environments).","createdAt":"2025-03-16T16:23:27Z","labels":["priority: 3","effort: low","type: ci","work: clear"],"number":1509,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable Next.js telemetry in CI","type":"issue","updatedAt":"2025-03-24T13:33:29Z","url":"https://github.com/sablier-labs/interfaces/issues/1509"},{"author":"PaulRBerg","body":"## Problem\n\nWhen running the deployment workflows in CI, ESLint is run twice:\n\n1. First: in the CI workflows\n2. Second: when building the app using `next build` (the `next lint` command is embedded within `next build`)\n\n## Context\n\nNext.js does have a flag called `--no-lint`, but unfortunately it wouldn't be a good idea to use it now.\n\nAs explained [here](https://github.com/vercel/next.js/discussions/59347), as of next.js v14.2.24, the `next lint` does two things:\n\n1. Performs some doctoring steps\n2. Runs ESLint\n\nThe OP in the link shared above recommends creating a separate `next doctor` command for this.\n\n## Solution\n\nOnce the Next.js implements `next doctor`, we should:\n\n- [ ] Skip the lint step when running `next build`\n- [ ] Run only `next doctor` instead","createdAt":"2025-03-16T16:08:17Z","labels":["priority: 3","effort: medium","type: ci","work: complicated"],"number":1508,"repository":"sablier-labs/interfaces","state":"open","title":"Skip the \"next lint\" when building the Next.js apps","type":"issue","updatedAt":"2025-03-30T16:11:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1508"},{"author":"PaulRBerg","body":"I have originally suggested to run `next build` instead of `vercel build` in CI in order to avoid making API requests to Vercel.\n\nBut then, I remember why we were using `vercel pull` etc. It was because of the environment variables (or rather, the lack thereof). A recent CI workflow failed because of this error:\n\n> unhandledRejection Error: No projectId found. Every dApp must now provide a WalletConnect Cloud\n\nIn light of this, I suggest removing the build step altogether from the CI workflow. It's superfluous because the deploy workflow will nonetheless run all checks again before making the deployment.\n\nThe static lint checks performed via ESLint, Prettier, etc., are enough for the CI.\n\n<details><summary>Toggle original issue</summary>\n<p>\n\nInstead of running `vercel build` (which requires making API requests to Vercel for pulling the environment etc.), we can simply run `next build` in the client and the landing app, respectively.\n\nhttps://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/.github/workflows/ci.yml#L74-L83\n\nWe can do this because the Vercel builds are **not** cached. Vercel puts the built files in the `.vercel` directory, a path which is not part of the cache keys and paths:\n\nhttps://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/.github/workflows/ci.yml#L45-L55\n\n</p>\n</details> ","createdAt":"2025-03-16T16:01:43Z","labels":["priority: 2","effort: low","type: ci","work: clear"],"number":1507,"repository":"sablier-labs/interfaces","state":"closed","title":"Do not build the app in the CI workflow","type":"issue","updatedAt":"2025-03-24T13:33:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1507"},{"author":"PaulRBerg","body":"## Problem\n\nThis is more like a research task but I'm opening it anyway because it's important!\n\nSince the ETH fees are hard-coded in the UI, and we have [promised](https://x.com/Sablier/status/1886462249445024105) our users that we're charging $1 and $3, it has become even more important now to lower the build time in CI.\n\nThe `run-lint` workflow input helps for skipping the linting steps, but the point is to look into making the Vercel build itself faster.\n\nDiscussion: https://github.com/sablier-labs/interfaces/discussions/823\n\n## Subtasks\n\nImplementing the sub-issues mentioned below may achieve a noticeably lower build time in CI.","createdAt":"2025-03-16T14:52:38Z","labels":["priority: 1","effort: high","type: perf","work: complicated"],"number":1505,"repository":"sablier-labs/interfaces","state":"closed","title":"Lower the time it takes to ship a new release using the CI deploy workflows","type":"issue","updatedAt":"2025-03-24T14:32:47Z","url":"https://github.com/sablier-labs/interfaces/issues/1505"},{"author":"PaulRBerg","body":"Only the `*-check` scripts use `WORKSPACE_FLAGS` in CI. The others, like the `-fix` scripts, do not:\n\nhttps://github.com/sablier-labs/interfaces/blob/9b5d0b6818d12b42bfe8d1a97eb679d12ba5fb2d/package.json#L58-L59\n\nI also think that a more representative name would be `YARN_FLAGS`.","createdAt":"2025-03-16T13:38:51Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1504,"repository":"sablier-labs/interfaces","state":"closed","title":"Delete WORKSPACE_FLAGS from scripts where it is unused","type":"issue","updatedAt":"2025-03-24T13:33:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1504"},{"author":"smol-ninja","body":"After https://github.com/sablier-labs/interfaces/issues/1502 is implemented, in the multi-top up user flow, the only option for users will be to enter amounts individually for each stream.\n\nTo improve the UX, we can consider adding a field and a button at the top of the sidebar screen where user can enter the total amount and click a button. The action can split the total amount among the selected batch of streams equally.\n\n<img width=\"219\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a11b5f0a-812b-43df-a589-050d37f9fd9c\" />\n\n### Related\n- https://github.com/sablier-labs/interfaces/issues/1502\n- https://github.com/sablier-labs/docs/pull/283","createdAt":"2025-03-14T16:38:39Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1503,"repository":"sablier-labs/interfaces","state":"open","title":"Ability to split amount equally while topping up streams","type":"issue","updatedAt":"2025-04-09T08:48:45Z","url":"https://github.com/sablier-labs/interfaces/issues/1503"},{"author":"PaulRBerg","body":"There's a button for calculating 30 days worth of tokens when topping up multiple streams.\n\nWe should remove this button:\n\n1. First, because [we're switching to annual cadences](https://github.com/sablier-labs/interfaces/issues/1433) by default.\n2. Second, because it's not helpful anyway. Payroll managers think in terms of monthly salaries, not in terms of 30-day amounts.\n3. Third, because it's not really clear that `30d` = `30 days`. It could be mistaken for `30 DAI` or `30 decimals`.\n\n<img width=\"700\" src=\"https://github.com/user-attachments/assets/5ecc2097-8ff7-4908-b451-3aab6e8aeb20\"/>","createdAt":"2025-03-14T16:18:00Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1502,"repository":"sablier-labs/interfaces","state":"open","title":"Remove \"30d\" button from the Manage sidebar","type":"issue","updatedAt":"2025-03-14T16:38:54Z","url":"https://github.com/sablier-labs/interfaces/issues/1502"},{"author":"PaulRBerg","body":"We mustn't allow any streams or airdrops to be created with Tangle's TNT token\n\nContext here: https://github.com/sablier-labs/company-discussions/discussions/115#discussioncomment-12502271","createdAt":"2025-03-14T15:09:48Z","labels":["type: feature","priority: 0","effort: low","work: clear"],"number":1501,"repository":"sablier-labs/interfaces","state":"closed","title":"Detect TNT as funky, dual ERC-20 thingy on Tangle chain","type":"issue","updatedAt":"2025-04-15T15:39:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1501"},{"author":"PaulRBerg","body":"- [ ] New \"Top Up\" button in Flow Dashboard\n- [ ] Auto-select behavior\n- [ ] GIX explainer/callout box the first time the button is clicked\n\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/1270\n\n","createdAt":"2025-03-12T21:27:01Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":1499,"repository":"sablier-labs/interfaces","state":"open","title":"New \"Top Up\" button for topping up multiple streams","type":"issue","updatedAt":"2025-03-12T21:27:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1499"},{"author":"PaulRBerg","body":"I wanted to tweet about this feature but I will hold off until we have a more intuitive URL parameter name, e.g., `chainId`, `cid`, or `c`.\n\n`cc` is what is typically used in emails for copying in other people, and it's not clear at all that `cc` = connected chain\n\nWe can continue allowing `cc` for backward-compatibility.\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/561d9fd4-4970-48d8-a27b-ba71b8f18647\"/>","createdAt":"2025-03-12T17:55:21Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1497,"repository":"sablier-labs/interfaces","state":"closed","title":"Deprecate \"cc\" and use \"c\" or \"chainId\" instead","type":"issue","updatedAt":"2025-07-15T11:45:24Z","url":"https://github.com/sablier-labs/interfaces/issues/1497"},{"author":"PaulRBerg","body":"The 2nd stream is cancelable because its status is `Streaming`, but the UI reports it (incorrectly) as having a warning.\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ef439387-26b1-487e-ad19-62977dc853c1\" />\n\nThe streams are:\n\n- [`LK-11155111-84`](https://app.sablier.com/vesting/stream/LK-11155111-84/)\n- [`LK-11155111-20`](https://app.sablier.com/vesting/stream/LK-11155111-20/)","createdAt":"2025-03-12T16:11:10Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1495,"repository":"sablier-labs/interfaces","state":"open","title":"Bug when canceling multiple streams — cancelable streams appear with warnings","type":"issue","updatedAt":"2025-03-12T16:11:10Z","url":"https://github.com/sablier-labs/interfaces/issues/1495"},{"author":"PaulRBerg","body":"I first identified this bug on February 6:\n\nhttps://github.com/user-attachments/assets/f031a7af-137d-4840-82de-c6887ae5ad41\n\nAnd then, a user reported it today (March 12):\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/213ac8af-91ab-4fb3-a06e-9bb393a16302\" />\n\nNote: this is similar to https://github.com/sablier-labs/interfaces/issues/1296 but it's specifically about Rabby.\n\n<details><summary>Toggle to see more context from Slack</summary>\n<p>\n\n<img width=\"571\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e99afbc3-4cf1-4197-9f9b-79b376001f7e\" />\n\n</p>\n</details> ","createdAt":"2025-03-12T15:54:56Z","labels":["type: bug","priority: 1","work: complicated"],"number":1494,"repository":"sablier-labs/interfaces","state":"closed","title":"Signer address connected instead of Safe address when using Rabby in the Safe UI","type":"issue","updatedAt":"2025-04-15T15:39:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1494"},{"author":"PaulRBerg","body":"When using the _Search_ functionality, it'd be quite helpful to display the total number of streams associated with a particular token:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0220eb25-bb29-4102-842a-5406b0e63902\" />","createdAt":"2025-03-12T14:24:24Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1493,"repository":"sablier-labs/interfaces","state":"open","title":"List total number of streams for particular token","type":"issue","updatedAt":"2025-07-16T19:09:37Z","url":"https://github.com/sablier-labs/interfaces/issues/1493"},{"author":"PaulRBerg","body":"_Low-value and low-priority, feel free to close if you disagree._\n\nI feel like the _Show more_ button could be a little bigger:\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/44bf116f-0817-4d2d-96b4-9e9db570d09c\"/>","createdAt":"2025-03-12T14:22:04Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1492,"repository":"sablier-labs/interfaces","state":"open","title":"Make \"Show more\" button bigger","type":"issue","updatedAt":"2025-03-12T14:22:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1492"},{"author":"PaulRBerg","body":"<img width=\"700\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c8ca87ef-3240-4052-81fb-7b542178c477\" />","createdAt":"2025-03-12T13:32:37Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1491,"repository":"sablier-labs/interfaces","state":"closed","title":"Selected streams in Dashboard appearing in Airdrops tab","type":"issue","updatedAt":"2025-03-12T14:38:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1491"},{"author":"PaulRBerg","body":"We should add `concurrency` settings to all of our CI workflows so that **there are no racing conditions, i.e., multiple deployment workflows running in parallel and overriding each other**.\n\n```yaml\nconcurrency:\n  # ...\n```\n\nSee GitHub reference: [Control the concurrency of workflows and jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/control-the-concurrency-of-workflows-and-jobs).","createdAt":"2025-03-08T00:45:19Z","labels":["priority: 1","effort: low","type: build","work: clear"],"number":1489,"repository":"sablier-labs/interfaces","state":"closed","title":"Set up concurrency rules in CI","type":"issue","updatedAt":"2025-03-24T14:23:50Z","url":"https://github.com/sablier-labs/interfaces/issues/1489"},{"author":"PaulRBerg","body":"Appears in the Flow stream creation form, in a tooltip — the many decimals are superfluous:\n\n<img width=\"483\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d7b3cb01-d859-4773-912e-991d2470efe7\" />","createdAt":"2025-03-07T22:31:19Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1487,"repository":"sablier-labs/interfaces","state":"closed","title":"Restrict Flow rate to 2 decimals","type":"issue","updatedAt":"2025-03-24T12:28:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1487"},{"author":"PaulRBerg","body":"I know that the country identifier for the UK is `GB` (not `UK`), but still, this is either a bug or bad UX and we should address it. It's strange that `Ukraine` appears when searching for `UK`:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d00e50ef-cffa-4dc3-85b8-10c2656f0b33\" />","createdAt":"2025-03-06T20:07:08Z","labels":["type: bug","priority: 3","effort: low","work: clear"],"number":1482,"repository":"sablier-labs/interfaces","state":"closed","title":"\"UK\" not appearing when searching for \"uk\" in geoblocking search","type":"issue","updatedAt":"2025-03-24T12:28:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1482"},{"author":"PaulRBerg","body":"- [ ] Say \"Vesting Stream\" instead of just \"Stream\"\n- [ ] Ditto for \"Payment Stream\" for Flow streams\n\n![image](https://github.com/user-attachments/assets/14e9058e-8e4b-4d21-8d38-412d555fcff2)","createdAt":"2025-03-06T03:56:08Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1477,"repository":"sablier-labs/interfaces","state":"closed","title":"Adjust title in social media preview","type":"issue","updatedAt":"2025-03-24T12:28:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1477"},{"author":"PaulRBerg","body":"Can we:\n\n- [ ] Display `$1.00` (use normal font instead of dollar icon)\n- [ ] Move the \"ETH\" after the amount? It's a bit strange to have it appear as \"1.00 ( ETH\"\n\nLike this:\n\n<img width=\"182\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4a7c8efa-191c-4827-b49b-36e37d5bb739\" />","createdAt":"2025-03-05T19:42:22Z","labels":["priority: 2","effort: low","type: style","work: clear"],"number":1476,"repository":"sablier-labs/interfaces","state":"closed","title":"Style polish for the $1/$3 fee amount","type":"issue","updatedAt":"2025-03-24T12:28:19Z","url":"https://github.com/sablier-labs/interfaces/issues/1476"},{"author":"PaulRBerg","body":"## Problem\n\nA user (Grindery) has recently missed the faucet button:\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b5d95287-03c7-485a-aae1-87c7b4378682\" />\n\nThis is because the fees card pushed it down, and it's immediatley obvious that the faucet button is associated with the same DAI token as in the dropdown.\n\n## Solution\n\n- [ ] Rename \"Dai Stablecoin\" to \"Testnet DAI\" (if we can change the logo, too, to make it indicative of a testnet, that'd be nice, too!)\n- Move the faucet button next to the token field, and only if the Testnet DAI token is selected\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4dcc3030-ecc8-4c24-9b78-53eed47f3d9f\" />\n","createdAt":"2025-03-05T19:25:58Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1474,"repository":"sablier-labs/interfaces","state":"open","title":"Make faucet button more prominent","type":"issue","updatedAt":"2025-03-27T12:37:36Z","url":"https://github.com/sablier-labs/interfaces/issues/1474"},{"author":"PaulRBerg","body":"## Problems\n\n### Problem 1\n\nIssue https://github.com/sablier-labs/interfaces/issues/1115 was closed after we hard-coded different max batch sizes per each chain. However:\n\n- EVM chains change their block gas limit all the time according to the gas usage (due to ERC-1559)\n- Some chains like Base change it even more [frequently](https://x.com/base/status/1889783240342348113/photo/1) because they are aggressive about scaling\n\n<img width=\"350\" src=\"https://github.com/user-attachments/assets/5b484961-1b40-4093-8750-4708ddf8f845\"/>\n\n### Problem 2\n\nDifferent shapes lead to different gas consumptions.\n\n## Solution\n\nThe max group size needs to be calculated dynamically according to these two dimensions:\n\n- [ ] Chain gas limit (queried dynamically)\n- [ ] Shape gas usage\n\n### Formula for LD/LT Streams\n\n@smol-ninja provided a formula for how to calculate the batch size for LD/LT streams [here](https://github.com/sablier-labs/interfaces/issues/1115#issuecomment-2400972482):\n\n> The correct way to calculate `MAX_GROUP_STREAM_SIZE` would be \n>\n> ```math\n> \\text{max group stream size} = \\frac{maxSegmentCount}{\\text{segments in one stream}}\n> ```\n>\n> where `maxSegmentCount` can be fetched directly from the smart contract using [`MAX_SEGMENT_COUNT`](https://docs.sablier.com/contracts/v2/reference/core/contract.SablierV2LockupDynamic#max_segment_count) function.","createdAt":"2025-03-05T18:38:18Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1473,"repository":"sablier-labs/interfaces","state":"closed","title":"Dynamic max batch sizes for the Vesting product","type":"issue","updatedAt":"2025-04-17T21:21:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1473"},{"author":"smol-ninja","body":"When allowing a token in the UI, a return value is expected. However, USDT does not return a value with `approve`. As a result, the \"Allow\" button throws an error with USDT. [One of the dark sides of ERC20](https://x.com/razgraf/status/1887912646512624118).\n\n| UI | Console |\n| -- | -- |\n| <img width=\"200\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b3199560-88ef-48c9-ab2e-0a7a035bb05c\" /> | <img width=\"200\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/72ca7db4-94a2-45ed-9288-57f2e5a4d6c6\" /> |","createdAt":"2025-03-05T12:00:27Z","labels":["type: bug","priority: 0","effort: medium","work: clear"],"number":1471,"repository":"sablier-labs/interfaces","state":"closed","title":"Not possible to stream USDT because allowance reverts","type":"issue","updatedAt":"2025-04-16T10:06:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1471"},{"author":"razgraf","body":"Thread to follow requests for Unlock Cliff in airdrops (doable since it's based on Lockup Linear).\n\n\n### Kayen\n\nA project on Chiliz chain requested it\n\n<img width=\"551\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1d4f6b23-5a57-4ba7-9563-3b2538c05d3c\" />","createdAt":"2025-03-05T10:15:55Z","labels":[],"number":1470,"repository":"sablier-labs/interfaces","state":"closed","title":"Requests for Unlock Cliff shape in airdrops","type":"issue","updatedAt":"2025-03-12T08:42:02Z","url":"https://github.com/sablier-labs/interfaces/issues/1470"},{"author":"PaulRBerg","body":"We have recently bumped into an urgent situation where a paying customer ([ULALO](https://github.com/sablier-labs/interfaces/pull/1463)) asked us to exempt their sender address from the airdrop claim fees.\n\nAt the moment, we have to manually update the code base and re-trigger a deployment of the app. This is a cumbersome process that takes 10 minutes to do in the best-case scenario.\n\nWe should be more agile with the fee exemptions by using Vercel Edge Config. If the API request fails, we can default to a local hard-coded dictionary.\n\nref https://github.com/sablier-labs/interfaces/discussions/1426","createdAt":"2025-03-04T00:33:36Z","labels":["type: feature","priority: 1","resolution required","effort: high","work: clear"],"number":1468,"repository":"sablier-labs/interfaces","state":"closed","title":"Use Vercel Edge Config for fee management","type":"issue","updatedAt":"2025-03-17T18:06:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1468"},{"author":"PaulRBerg","body":"It would be very, very helpful to add some explanatory comments above this interface definition:\n\nhttps://github.com/sablier-labs/interfaces/blob/32bc6eb35b2119787249ba65875ee527d402af1a/apps/client/src/types/fees.ts\n\nThere may be cases when we receive urgent requests from paying customers and @maxdesalle and I have to update the code directly.","createdAt":"2025-03-03T22:52:51Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":1465,"repository":"sablier-labs/interfaces","state":"open","title":"Explanatory comments for `IFeeOverride`","type":"issue","updatedAt":"2025-03-03T22:52:51Z","url":"https://github.com/sablier-labs/interfaces/issues/1465"},{"author":"PaulRBerg","body":"Provide a more suggestive name for this branch:\n\n<img width=\"182\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1728ec8b-57e5-4e2b-91c5-2d1763a8384d\" />\n\nE.g. add the date when the branch was created, or something related to it.\n\nOr let's just delete it because the git history should keep track of this commit anyway.","createdAt":"2025-03-03T22:45:01Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1464,"repository":"sablier-labs/interfaces","state":"open","title":"Rename `archive/staging` branch (or delete it)","type":"issue","updatedAt":"2025-03-03T22:45:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1464"},{"author":"PaulRBerg","body":"The UI still refers to the Lockup contracts using the old versioning system:\n\nhttps://github.com/sablier-labs/interfaces/blob/dd2eb6a0870b0cca361730f47a5383758064d9c1/packages/constants/src/stream/definitions.ts#L38-L43\n\nThis isn't just a matter of internal code — there are parts of the app where the old versions appear, e.g., in the Details modal.","createdAt":"2025-03-03T21:02:16Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1461,"repository":"sablier-labs/interfaces","state":"open","title":"Refactor LockupVersions to follow package tethering","type":"issue","updatedAt":"2025-03-03T21:02:16Z","url":"https://github.com/sablier-labs/interfaces/issues/1461"},{"author":"PaulRBerg","body":"Old reference from a time when the repo was called Sablier V2 Interfaces","createdAt":"2025-03-03T20:40:52Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1460,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"@types/v2-declarations\" to smth else","type":"issue","updatedAt":"2025-04-10T13:34:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1460"},{"author":"PaulRBerg","body":"<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/05464a3b-1095-4c5a-8cc2-77e607bc20ee\" />","createdAt":"2025-02-26T18:27:00Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1457,"repository":"sablier-labs/interfaces","state":"open","title":"Remove \"Polynomial\" from social proofing","type":"issue","updatedAt":"2025-02-26T18:27:00Z","url":"https://github.com/sablier-labs/interfaces/issues/1457"},{"author":"PaulRBerg","body":"Smol QoL improvement — on Sablier, when the user hovers over a submit button (e.g., the \"Create\" button), the mouse cursor stays the same.\n\nIt'd be nice if the cursor changed to a block icon, e.g., how GitHub does it:\n\n<img width=\"300\" src=\"https://github.com/user-attachments/assets/3d606a34-ef3f-47b7-838d-1066e0f94fd7\"/>","createdAt":"2025-02-26T17:43:41Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1456,"repository":"sablier-labs/interfaces","state":"open","title":"Change mouse cursor to this block icon when hovering the create buttons","type":"issue","updatedAt":"2025-04-10T13:40:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1456"},{"author":"PaulRBerg","body":"Connected to Polygon, but it displays $ETH instead of $POL in the fee disclaimer\n\n<img width=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b884b172-aaad-40dd-b704-5efd02e51547\" />","createdAt":"2025-02-24T16:17:40Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1453,"repository":"sablier-labs/interfaces","state":"closed","title":"Incorrect gas token name on non-ETH chains in the fee disclaimer","type":"issue","updatedAt":"2025-02-24T16:43:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1453"},{"author":"PaulRBerg","body":"A relatively important warning/disclaimer to add due to the reasons provided [here](https://github.com/sablier-labs/airdrops/issues/37#issuecomment-2678959915).\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/908bcbf4-f3e8-422f-a5e1-27af11a90615\" />","createdAt":"2025-02-24T16:12:26Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1452,"repository":"sablier-labs/interfaces","state":"open","title":"Add warning when expiration is earlier than vesting end date for ranged airdrops","type":"issue","updatedAt":"2025-02-24T16:12:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1452"},{"author":"PaulRBerg","body":"Most users likely don't care about the minutes when choosing a date for the airdrop expiration, vesting end time, etc.\n\nDefaulting to \"00\" would be a smol-but-nice QoL improvement so that users don't have to manually select it.\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0baf7670-8c88-48dc-841f-d8fc09b685c6\" />","createdAt":"2025-02-24T16:09:33Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1451,"repository":"sablier-labs/interfaces","state":"open","title":"Default to \"00\" minutes in date time picker","type":"issue","updatedAt":"2025-02-24T16:09:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1451"},{"author":"razgraf","body":"Stemming from #1424 we should make sure users are aware that large numbers of streams can cause transactions breaking. Either before or in case it breaks we can let them know it could be because of gas limits and ask them to reach out or switch to Airdrops.\n\nE.g. after a large CSV upload (over the hardcoded limit).","createdAt":"2025-02-18T16:49:49Z","labels":["priority: 3","effort: low"],"number":1443,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggest user reaches out in case they want to create a large group of streams","type":"issue","updatedAt":"2025-05-04T14:09:32Z","url":"https://github.com/sablier-labs/interfaces/issues/1443"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/interfaces/discussions/1379\n","createdAt":"2025-02-18T16:01:02Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1442,"repository":"sablier-labs/interfaces","state":"open","title":"Refactor \"Streaming\" status to \"Vesting\" in the Vesting tab streams","type":"issue","updatedAt":"2025-02-18T16:01:02Z","url":"https://github.com/sablier-labs/interfaces/issues/1442"},{"author":"PaulRBerg","body":"## Problem\n\n- User fills out airdrop creation form\n- Accidentally, the user refreshes the page, or there's a bug in the web3 wallet that crashes the page\n- All the form data is lost\n\nThis happened in real life with a guy from YieldNest with whom I had a call last week.\n\n## Solution\n\nSave progress in local storage so that when the user refreshes the page or closes the tabs and revisits the UI, the previous data is still in the form.\n\nAs compared to https://github.com/sablier-labs/interfaces/issues/1439, I have marked this issue as `priority: 1` — because airdrops generate more revenues.","createdAt":"2025-02-17T20:59:13Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1440,"repository":"sablier-labs/interfaces","state":"open","title":"Save progress in local storage when creating airdrop","type":"issue","updatedAt":"2025-02-18T11:17:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1440"},{"author":"PaulRBerg","body":"## Problem\n\n- User fill outs many streams manually via the stream creation form\n- Accidentally, the user refreshes the page, or there's a bug in the web3 wallet that crashes the page\n- All the form data is lost\n\nThis happened in real life with a guy from YieldNest with whom I had a call last week.\n\n## Solution\n\nSave progress in local storage so that when the user refreshes the page or closes the tabs and revisits the UI (in the same shape), the previous data is still in the form.\n\nI know that this problem is effectively solved by using a CSV file, which is why I marked this issue as `priority: 3`.\n\nHowever, it would still be a very nice QoL improvement to save the progress in local storage. This is similar to how GitHub caches a comment while it is being written in the Markdown box. Even if you refresh the page, the content is still there.\n","createdAt":"2025-02-17T20:57:54Z","labels":["type: feature","backlog","priority: 3","resolution required","effort: high","work: clear"],"number":1439,"repository":"sablier-labs/interfaces","state":"open","title":"Save progress in local storage when creating streams","type":"issue","updatedAt":"2025-02-18T10:53:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1439"},{"author":"PaulRBerg","body":"_Low-priority and low-preference, feel free to close if you disagree_\n\nI think the seconds are superfluous here — instead, it'd more helpful to display `am/pm` immediately after the minutes (with no space).\n\n<img width=\"845\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4aec94c8-4ef5-4fc4-a337-15edb695785e\" />\n\n","createdAt":"2025-02-17T20:13:43Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1438,"repository":"sablier-labs/interfaces","state":"open","title":"Remove seconds in the UTC date","type":"issue","updatedAt":"2025-02-17T20:13:43Z","url":"https://github.com/sablier-labs/interfaces/issues/1438"},{"author":"PaulRBerg","body":"Rather than letting users choose past dates and then telling them that they are not allowed, why not gray out the past dates in the date picker?\n\n<img width=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2dc35331-a916-4afd-b257-c13d1ad323b4\" />","createdAt":"2025-02-17T20:12:28Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1437,"repository":"sablier-labs/interfaces","state":"open","title":"Do not allow past times in the date picker in the airdrop creation form (QoL improvement)","type":"issue","updatedAt":"2025-02-17T20:12:34Z","url":"https://github.com/sablier-labs/interfaces/issues/1437"},{"author":"PaulRBerg","body":"For marketing and social proofing reasons, we should highlight a few popular airdrops on the airdrops home page.\n\nIdeally, the data would be dynamically generated so that it doesn't have to be manually updated. Maybe there's a way to filter two or three campaigns with a high number of recipients?\n\nThis was originally suggested by our investors (DCV):\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/66330ee5-df43-47de-b35c-86bf9fe23cf4\" />\n\n**Late edit**: maybe we could have the [\"Curated\" tab](https://github.com/sablier-labs/interfaces/discussions/1486) be the default?","createdAt":"2025-02-17T20:05:23Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1436,"repository":"sablier-labs/interfaces","state":"open","title":"Social proofing in the airdrops home page","type":"issue","updatedAt":"2025-03-08T22:22:16Z","url":"https://github.com/sablier-labs/interfaces/issues/1436"},{"author":"PaulRBerg","body":"Add an `NFT Id` section here:\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/77ef2cfa-c248-4770-8ef0-bf6acc3644e0\" />\n\nRelated: https://github.com/sablier-labs/interfaces/discussions/1430","createdAt":"2025-02-17T14:17:57Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1435,"repository":"sablier-labs/interfaces","state":"open","title":"\"NFT Id\" section in the \"Details\" modal","type":"issue","updatedAt":"2025-02-17T14:17:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1435"},{"author":"razgraf","body":"\n### Discussed in https://github.com/sablier-labs/interfaces/discussions/589\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** October 11, 2023</sup>\nSource the number of users from Dune rather than having it hard-coded on the landing page:\r\n\r\n<img width=\"397\" alt=\"Screenshot 2023-10-11 at 3 24 00 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/eb5db217-fc86-413b-ae1a-40ca47caa661\">\r\n\r\nThis would make maintainability easier because we wouldn't have to keep updating the figures.\r\n\r\nAlso, I imagine that if we do this, we could also pull other sorts of interesting data from Dune (and display them on the landing page):</div>","createdAt":"2025-02-17T14:17:39Z","labels":["type: feature","priority: 3","resolution required","effort: medium"],"number":1434,"repository":"sablier-labs/interfaces","state":"open","title":"Source number of users from Dune","type":"issue","updatedAt":"2025-02-17T14:18:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1434"},{"author":"PaulRBerg","body":"When loading the [Create Airdrop](https://app.sablier.com/airdrops/create) page, it would be helpful to preload the connected chain in the form:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3b34ee24-af2c-4945-bbb6-04e3c220b218\" />","createdAt":"2025-02-17T12:35:05Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1431,"repository":"sablier-labs/interfaces","state":"closed","title":"Preload the connected chain in the airdrop creation form (QoL improvement)","type":"issue","updatedAt":"2025-02-18T08:36:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1431"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/interfaces/discussions/1072:\n\n- [ ] When creating the stream, default to annual rates instead of `Month (30d)`\n    - Keep `Month (30d)` as a secondary option\n- [ ] In the stream's _Attributes_ card, replace `Rate/Month` by `Rate/Annual` or `Rate/Daily` or both (see Iaroslav's [comment](https://github.com/sablier-labs/interfaces/issues/1433#issuecomment-2721544758))","createdAt":"2025-02-17T11:54:18Z","labels":["priority: 1","effort: medium","type: refactor","work: clear"],"number":1433,"repository":"sablier-labs/interfaces","state":"open","title":"Default to annual rates for Flow instead of Month (30d)","type":"issue","updatedAt":"2025-03-24T12:28:36Z","url":"https://github.com/sablier-labs/interfaces/issues/1433"},{"author":"PaulRBerg","body":"Idea: train an LLM/ GPT on the Sablier Documentation website so that repetitive questions such as the one in the screenshot below could be answered by the bot instead of us.\r\n\r\n<img width=\"500\" alt=\"SCR-20240322-ohsm\" src=\"https://github.com/sablier-labs/docs/assets/8782666/3554ac89-5733-4c59-be56-5247620d6ba1\">\r\n","createdAt":"2024-03-22T16:18:24Z","labels":["priority: 2","effort: high","type: feature","work: complicated"],"number":136,"repository":"sablier-labs/docs","state":"closed","title":"AI bot trained on Sablier Documentation","type":"issue","updatedAt":"2025-08-08T15:26:10Z","url":"https://github.com/sablier-labs/docs/issues/136"},{"author":"smol-ninja","body":"Similar to https://github.com/sablier-labs/docs/issues/133, docs should be updated with the following new information regarding changes with the periphery contracts.\r\n\r\n## Technical Reference\r\n\r\n### [Overview](https://docs.sablier.com/contracts/v2/reference/overview)\r\n- [x] Rename MerkleStreamer to MerkleLockup\r\n\r\n## Guides\r\n- [x] Add Batch Tranched Streams in [Batch Create Streams section](https://docs.sablier.com/contracts/v2/guides/batch-create-streams/batch-linear-streams)\r\n- [x] Create a new guide on how to create an airstream campaign using MerkleLockup \r\n\r\n## Concepts\r\n- [x] Update [Glossary](https://docs.sablier.com/concepts/glossary)","createdAt":"2024-03-15T14:45:34Z","labels":["effort: epic","priority: 1","type: docs","work: clear"],"number":134,"repository":"sablier-labs/docs","state":"closed","title":"Update docs with v2.2 periphery changes","type":"issue","updatedAt":"2024-07-05T15:38:36Z","url":"https://github.com/sablier-labs/docs/issues/134"},{"author":"smol-ninja","body":"In preparation for v2.2, docs should be updated with the following new information regarding changes with the core contracts.\r\n\r\n## Technical Reference\r\n\r\n### [Overview](https://docs.sablier.com/contracts/v2/reference/overview)\r\n- [x] Add LockupTranched and remove Comptroller\r\n\r\n### [Diagrams](https://docs.sablier.com/contracts/v2/reference/diagrams)\r\n- [x] Add lockup tranched section\r\n\r\n## Guides\r\n\r\n### Create a Stream\r\n- [x] Review Lockup Linear and Lockup Dynamic\r\n- [x] Add Lockup Tranched\r\n\r\n### Stream management\r\n- [x] Update [withdraw from stream section](https://docs.sablier.com/contracts/v2/guides/stream-management/withdraw) with new changes\r\n\r\n### [Hooks](https://docs.sablier.com/contracts/v2/guides/hooks)\r\n- [x] Update functions name of recipient hook\r\n- [x] Add a new section  about sender hook\r\n\r\n### Miscellaneous\r\n- [x] Review [Etherscan](https://docs.sablier.com/contracts/v2/guides/etherscan)\r\n- [x] Review [snapshot strategies](https://docs.sablier.com/contracts/v2/guides/snapshot-voting)\r\n\r\n## Concepts\r\n- [x] New section on LockupTranched under [type of streams](https://docs.sablier.com/concepts/protocol/stream-types)\r\n- [x] Add a new page about Tranches or combine it into [Segments](https://docs.sablier.com/concepts/protocol/segments)\r\n- [x] Remove protocol fees from [Fees](https://docs.sablier.com/concepts/protocol/fees)\r\n- [x] Remove [Governance](https://docs.sablier.com/concepts/governance) entirely\r\n- [x] Update [Glossary](https://docs.sablier.com/concepts/glossary)","createdAt":"2024-03-15T10:36:58Z","labels":["effort: epic","priority: 1","type: docs","work: clear"],"number":133,"repository":"sablier-labs/docs","state":"closed","title":"Update docs with v2.2 core changes","type":"issue","updatedAt":"2024-07-05T15:38:37Z","url":"https://github.com/sablier-labs/docs/issues/133"},{"author":"razgraf","body":"Once the `feat/envio` PR is merged, the docs should be updated with\n- [x] A section in the `differences` pages (and a references in `overview`) regarding differential tests between subgraphs and indexers\n- [x] Fresh links for the Envio indexers","createdAt":"2024-02-07T16:09:13Z","labels":["priority: 2","effort: low","type: docs","work: clear","stale"],"number":132,"repository":"sablier-labs/docs","state":"closed","title":"Enhance Envio docs","type":"issue","updatedAt":"2025-02-10T12:05:06Z","url":"https://github.com/sablier-labs/docs/issues/132"},{"author":"PaulRBerg","body":"<img width=\"400\" alt=\"SCR-20240201-smem\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/22ace08c-e7ee-40f1-8513-6c10426ed914\">\r\n","createdAt":"2024-02-01T19:19:47Z","labels":["priority: 2","effort: medium","type: feature","work: complicated"],"number":131,"repository":"sablier-labs/docs","state":"closed","title":"Enable Vercel Analytics","type":"issue","updatedAt":"2025-02-17T15:24:41Z","url":"https://github.com/sablier-labs/docs/issues/131"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://docs.sablier.com/concepts/protocol/fees#gas-fees\r\n\r\nJust like here:\r\n\r\nhttps://docs.sablier.com/contracts/v1/guides/gas-costs","createdAt":"2024-01-29T07:22:57Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":128,"repository":"sablier-labs/docs","state":"closed","title":"Table with estimated gas fees","type":"issue","updatedAt":"2024-07-05T15:38:38Z","url":"https://github.com/sablier-labs/docs/issues/128"},{"author":"PaulRBerg","body":"## Task\r\n\r\nCustom deployments can be made like this:\r\n\r\n- Ask for permission to receive a [BUSL license grant](https://github.com/sablier-labs/v2-core/blob/main/LICENSE.md)\r\n- Follow the [technical instructions](https://sablier.notion.site/How-to-Deploy-Sablier-V2-Contracts-20fe630984e04c6bb35fa3f9dd293cee?pvs=4)\r\n\r\n## Context\r\n\r\n<img width=\"400\" alt=\"SCR-20240108-rxqg\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/90319606-a05d-4cc2-a0d9-0adb387bbcd8\">\r\n<img width=\"400\" alt=\"SCR-20240108-rxqy\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/65cf265c-0966-441f-93e7-5594f98c83d6\">\r\n","createdAt":"2024-01-08T18:39:36Z","labels":["effort: medium","priority: 1","work: clear"],"number":127,"repository":"sablier-labs/docs","state":"closed","title":"Write guide about how to make custom deployments","type":"issue","updatedAt":"2024-10-14T18:33:12Z","url":"https://github.com/sablier-labs/docs/issues/127"},{"author":"PaulRBerg","body":"There's a bug in the autogen script that causes \"Git Source\" URLs to be incorrect replaced with local URLs:\r\n\r\nhttps://github.com/sablier-labs/v2-docs/blob/2096bb65880a4809ba52a4b06a46ae2ef4fe3058/scripts/autogen.sh#L80-L84\r\n\r\nThe solution is to add a capturing group so that the Git Source URL remain untouched.\r\n\r\nI'm not sure how the script used to work before. It is possible that Foundry changes something the way the docs are generated, or that [`sd`](https://github.com/chmln/sd) changed its regex parsing rules.","createdAt":"2024-01-01T14:20:23Z","labels":["priority: 3","type: bug","effort: low"],"number":123,"repository":"sablier-labs/docs","state":"closed","title":"Do not replace \"Git Source\" URLs","type":"issue","updatedAt":"2024-01-01T14:23:40Z","url":"https://github.com/sablier-labs/docs/issues/123"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/759\r\n- https://github.com/sablier-labs/sablier-v2-integration-template/pull/3","createdAt":"2023-12-31T10:24:07Z","labels":[],"number":121,"repository":"sablier-labs/docs","state":"closed","title":"Use Bun for dependency management","type":"issue","updatedAt":"2023-12-31T12:02:05Z","url":"https://github.com/sablier-labs/docs/issues/121"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/685\r\n- https://twitter.com/Sablier/status/1737581367708225715","createdAt":"2023-12-22T23:24:11Z","labels":["priority: 1","effort: high","type: feature","work: complicated"],"number":120,"repository":"sablier-labs/docs","state":"closed","title":"Document Airstreams for integrators","type":"issue","updatedAt":"2024-02-09T10:57:47Z","url":"https://github.com/sablier-labs/docs/issues/120"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/foundry-rs/foundry/pull/6626\r\n- https://github.com/foundry-rs/foundry/issues/4541","createdAt":"2023-12-21T11:22:56Z","labels":["effort: medium","priority: 3","type: docs","work: clear"],"number":119,"repository":"sablier-labs/docs","state":"closed","title":"Update autogen script to use the latest inline doc links","type":"issue","updatedAt":"2024-01-01T23:13:24Z","url":"https://github.com/sablier-labs/docs/issues/119"},{"author":"PaulRBerg","body":"","createdAt":"2023-12-17T21:02:33Z","labels":["effort: high","priority: 3","type: build","work: complicated"],"number":117,"repository":"sablier-labs/docs","state":"closed","title":"Update to Docusaurus V3","type":"issue","updatedAt":"2024-01-04T15:24:40Z","url":"https://github.com/sablier-labs/docs/issues/117"},{"author":"PaulRBerg","body":"Over time, many users have asked us when gas fees are paid. We should clarify in the docs that gas is paid only at deposit and withdrawal time.","createdAt":"2023-12-14T10:04:51Z","labels":["good first issue","priority: 2","type: feature","effort: low"],"number":116,"repository":"sablier-labs/docs","state":"closed","title":"Clarify when gas fees are paid","type":"issue","updatedAt":"2024-01-01T15:52:33Z","url":"https://github.com/sablier-labs/docs/issues/116"},{"author":"PaulRBerg","body":"Third-parties may be interested in reproducing the bytecodes deployed on Mainnet. To assist them, we should provide a wiki or some sort of docs for how to recompile the contracts and passing the appropriate constructor arguments.\r\n\r\nMore context here:\r\n\r\nhttps://discord.com/channels/883432404780466176/1077650654396428348/1183046520975675462","createdAt":"2023-12-09T16:57:01Z","labels":["priority: 2","effort: low","type: docs","work: clear"],"number":234,"repository":"sablier-labs/docs","state":"open","title":"Provide guidance on how to reproduce bytecodes","type":"issue","updatedAt":"2025-01-19T03:09:28Z","url":"https://github.com/sablier-labs/docs/issues/234"},{"author":"andreivladbrg","body":"The idea is to have the standard deployments page(`https://docs.sablier.com/contracts/v2/deployments`) for 2.1 contracts and then we should add a note with a hyperlink that points to the old (2.0) deployments page`https://docs.sablier.com/contracts/v2/deployments/old`","createdAt":"2023-11-23T18:44:23Z","labels":["effort: medium","priority: 0","type: docs"],"number":114,"repository":"sablier-labs/docs","state":"closed","title":"Add one more page for older deployment addresses","type":"issue","updatedAt":"2024-01-01T12:07:58Z","url":"https://github.com/sablier-labs/docs/issues/114"},{"author":"andreivladbrg","body":"Ref: \r\n- core [changelog](https://github.com/sablier-labs/v2-core/blob/ba827e19f52c905fd5d5478d0b7dda10c3ef2800/CHANGELOG.md#110---2023-10-19)\r\n- periphery [changelog](https://github.com/sablier-labs/v2-periphery/blob/d3b07e5dbcf78d4439ff5623856334592063d56b/CHANGELOG.md#110---2023-10-19) \r\n\r\n","createdAt":"2023-11-23T18:39:42Z","labels":[],"number":113,"repository":"sablier-labs/docs","state":"closed","title":"Update docs for 2.1 version of the contracts","type":"issue","updatedAt":"2023-12-20T18:07:54Z","url":"https://github.com/sablier-labs/docs/issues/113"},{"author":"PaulRBerg","body":"Say:\n\n- [ ] \"Token Distribution\" instead of \"Token Streaming\"\n- [ ] \"Recurring payments\" instead of \"streaming\"\n- [ ] Explain streaming as a our flagship feature, not as the only feature\n- [ ] Explain what a stream is (introducing this term ourselves)\n- [ ] Define what a stream is (see definition [here](https://github.com/sablier-labs/v2-core/discussions/708#discussioncomment-7284921))","createdAt":"2023-11-23T16:55:25Z","labels":["priority: 1","effort: high","work: complicated"],"number":112,"repository":"sablier-labs/docs","state":"open","title":"Rewrite docs in light of new branding and copyright","type":"issue","updatedAt":"2025-07-15T05:27:57Z","url":"https://github.com/sablier-labs/docs/issues/112"},{"author":"PaulRBerg","body":"We've introduced four new curves in the UI, but we haven't updated the [Types of Streams](https://docs.sablier.com/concepts/protocol/stream-types) page to include them.\r\n\r\n- Monthly Unlocks\r\n- Timelock\r\n- Unlock-Linear\r\n- Unlock-Cliff","createdAt":"2023-11-07T20:33:05Z","labels":["effort: medium","priority: 1","type: feature","work: complicated"],"number":110,"repository":"sablier-labs/docs","state":"closed","title":"Add new curves in \"Types of Streams\"","type":"issue","updatedAt":"2024-04-18T10:45:36Z","url":"https://github.com/sablier-labs/docs/issues/110"},{"author":"PaulRBerg","body":"The task is to write a new guide for creating streams using the simple [`Batch`](https://github.com/sablier-labs/v2-periphery/blob/0004fd2e61e032df3d895045ec414ecb212ddcc8/src/SablierV2Batch.sol) contract.\r\n\r\nWe will switch to using this contract over the proxy-based `ProxyTarget`.","createdAt":"2023-11-06T14:23:08Z","labels":["effort: high","type: feature","priority: 0","work: complicated"],"number":109,"repository":"sablier-labs/docs","state":"closed","title":"Write a guide about creating streams with the simple `Batch` contract","type":"issue","updatedAt":"2024-01-01T12:21:50Z","url":"https://github.com/sablier-labs/docs/issues/109"},{"author":"codenamejason","body":"Link for reference: https://docs.sablier.com/contracts/v2/guides/local-environment\r\n\r\nIn the `LockupLinearStreamCreatorTest.t.sol` file it shows on line 40 -->\r\n```solidity\r\ncreator.DAI().approve({ spender: address(creator), amount: 1337e18 });\r\n```\r\n\r\nThis test fails with the following error: `Compiler run failed: Error (4974): Named argument \"amount\" does not match function declaration.`\r\n\r\nI updated it to the following to pass the test:\r\n```solidity\r\ncreator.DAI().approve(address(creator), 1337e18);\r\n```\r\n\r\n","createdAt":"2023-11-04T03:28:46Z","labels":[],"number":107,"repository":"sablier-labs/docs","state":"closed","title":"Named parameters not working in ERC-20 approval","type":"issue","updatedAt":"2023-11-04T18:41:06Z","url":"https://github.com/sablier-labs/docs/issues/107"},{"author":"codenamejason","body":"Docs link for reference: https://docs.sablier.com/contracts/v2/guides/local-environment\r\n\r\nIn your docs it states to run this:\r\n```bash\r\n$ echo \"@sablier/v2-core=lib/v2-core/src\" >> remappings.txt\r\n$ echo \"@sablier/v2-periphery=lib/v2-periphery/src\" >> remappings.txt\r\n```\r\nThis is not correct based on the imports of the contracts in the example.\r\n```solidity\r\nimport { ISablierV2LockupLinear } from \"@sablier/v2-core/src/interfaces/ISablierV2LockupLinear.sol\";\r\nimport { Broker, LockupLinear } from \"@sablier/v2-core/src/types/DataTypes.sol\";\r\nimport { ud60x18 } from \"@sablier/v2-core/src/types/Math.sol\";\r\nimport { IERC20 } from \"@sablier/v2-core/src/types/Tokens.sol\";\r\n```\r\n\r\nI had to remove the `/src` from the `remapping.txt` file to build successfully.\r\n\r\n```text\r\n@sablier/v2-core=lib/v2-core/\r\n@sablier/v2-periphery=lib/v2-periphery/\r\n```\r\n\r\n","createdAt":"2023-11-04T03:12:31Z","labels":[],"number":106,"repository":"sablier-labs/docs","state":"closed","title":"Remappings issue in local environment","type":"issue","updatedAt":"2023-11-04T18:55:14Z","url":"https://github.com/sablier-labs/docs/issues/106"},{"author":"PaulRBerg","body":"On this page:\r\n\r\nhttps://docs.sablier.com/contracts/v2/reference/periphery/contract.SablierV2ProxyTarget\r\n\r\nE.g. `{ISablierV2Lockup.cancel}`","createdAt":"2023-10-28T15:45:57Z","labels":["priority: 3","type: bug","effort: low"],"number":104,"repository":"sablier-labs/docs","state":"closed","title":"Fix broken hyperlinks","type":"issue","updatedAt":"2024-01-01T12:22:24Z","url":"https://github.com/sablier-labs/docs/issues/104"},{"author":"PaulRBerg","body":"From \"Sablier Docs | Sablier Docs\" to \"Sablier Docs\".","createdAt":"2023-10-26T18:28:23Z","labels":[],"number":103,"repository":"sablier-labs/docs","state":"closed","title":"Change the website title","type":"issue","updatedAt":"2023-10-27T16:11:26Z","url":"https://github.com/sablier-labs/docs/issues/103"},{"author":"PaulRBerg","body":"See https://github.com/sablier-labs/sandbox","createdAt":"2023-10-16T15:01:50Z","labels":["priority: 2","type: feature","effort: low","work: clear"],"number":102,"repository":"sablier-labs/docs","state":"open","title":"Mention the sandboxes","type":"issue","updatedAt":"2025-01-05T11:04:17Z","url":"https://github.com/sablier-labs/docs/issues/102"},{"author":"PaulRBerg","body":"See [this](https://docs.0xsplits.xyz/#values).","createdAt":"2023-08-30T12:18:52Z","labels":["effort: medium","priority: 3","type: feature","work: complicated"],"number":98,"repository":"sablier-labs/docs","state":"open","title":"Add section about company values","type":"issue","updatedAt":"2025-01-03T14:47:33Z","url":"https://github.com/sablier-labs/docs/issues/98"},{"author":"PaulRBerg","body":"See [this](https://github.com/radixdlt/scrypto-examples/tree/main/core/vesting).\n\n<img width=\"450\" src=\"https://github.com/user-attachments/assets/a1d0df02-c348-4663-9a6a-59be70f182aa\"/>","createdAt":"2023-08-25T07:57:58Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":96,"repository":"sablier-labs/docs","state":"open","title":"Piecewise function definitions for \"streamedAmountOf\"","type":"issue","updatedAt":"2025-01-05T11:04:01Z","url":"https://github.com/sablier-labs/docs/issues/96"},{"author":"PaulRBerg","body":"See Dymension's [page](https://docs.dymension.xyz/reference/glossary).","createdAt":"2023-08-17T08:56:45Z","labels":[],"number":93,"repository":"sablier-labs/docs","state":"closed","title":"Alphabetic glossary","type":"issue","updatedAt":"2024-01-01T12:23:50Z","url":"https://github.com/sablier-labs/docs/issues/93"},{"author":"PaulRBerg","body":"These should go under Contracts -> V2 Protocol -> Guides, after \"Implement Hooks\".\n\nI imagine that there will be significant overlap between this document and the announcement article for the Snapshot strategies.","createdAt":"2023-08-17T05:00:37Z","labels":[],"number":92,"repository":"sablier-labs/docs","state":"closed","title":"Document Snapshot voting strategies","type":"issue","updatedAt":"2023-08-23T07:08:05Z","url":"https://github.com/sablier-labs/docs/issues/92"},{"author":"PaulRBerg","body":"It would be helpful to let developers ask questions in a more direct way, rather than assume that they join our Discord server, etc.","createdAt":"2023-08-08T16:28:13Z","labels":[],"number":86,"repository":"sablier-labs/docs","state":"closed","title":"Add Crisp Chat box","type":"issue","updatedAt":"2023-08-16T15:56:13Z","url":"https://github.com/sablier-labs/docs/issues/86"},{"author":"PaulRBerg","body":"Say something like the \"full Sablier V2\" protocol, and explain that the proxy architecture is optional but very useful.","createdAt":"2023-08-03T07:16:05Z","labels":[],"number":85,"repository":"sablier-labs/docs","state":"closed","title":"Be more explanatory in the overview in \"Proxy Architecture\"","type":"issue","updatedAt":"2024-01-01T12:08:22Z","url":"https://github.com/sablier-labs/docs/issues/85"},{"author":"PaulRBerg","body":"This will go under \"Proxy Architecture\".\r\n\r\nRef https://github.com/sablier-labs/v2-docs/pull/58","createdAt":"2023-08-02T21:10:50Z","labels":[],"number":84,"repository":"sablier-labs/docs","state":"closed","title":"Add page for \"Cancel and Create\"","type":"issue","updatedAt":"2024-01-01T12:24:06Z","url":"https://github.com/sablier-labs/docs/issues/84"},{"author":"z0rats","body":"This link seems to be pointing to a stream that doesn't exist:\r\nhttps://github.com/sablier-labs/v2-docs/blob/4992e2cb22dfa8e183c181dd907f8be251b08f20/src/constants/links.ts#L4","createdAt":"2023-07-27T10:58:05Z","labels":[],"number":82,"repository":"sablier-labs/docs","state":"closed","title":"Fix stream example link","type":"issue","updatedAt":"2023-07-27T12:45:10Z","url":"https://github.com/sablier-labs/docs/issues/82"},{"author":"PaulRBerg","body":"In https://docs.sablier.com/concepts/use-cases","createdAt":"2023-07-26T16:52:15Z","labels":["priority: 2","effort: medium","type: feature","work: clear"],"number":81,"repository":"sablier-labs/docs","state":"closed","title":"Mention \"Grants\" in \"Use Cases\" page","type":"issue","updatedAt":"2024-07-05T15:38:37Z","url":"https://github.com/sablier-labs/docs/issues/81"},{"author":"PaulRBerg","body":"We've received this question a lot.\r\n\r\n- [ ] Superfluid\r\n- [ ] LlamaPay\r\n- [ ] Hedgey\r\n\r\nEtc.","createdAt":"2023-07-26T16:17:31Z","labels":["priority: 2","effort: high","type: feature","work: complicated"],"number":80,"repository":"sablier-labs/docs","state":"open","title":"Add a page that compares Sablier to competitors","type":"issue","updatedAt":"2024-12-19T08:42:00Z","url":"https://github.com/sablier-labs/docs/issues/80"},{"author":"PaulRBerg","body":"We have two npm packages that export the contract artifacts:\r\n\r\n- [`@sablier/v2-core`](https://www.npmjs.com/package/@sablier/v2-core)\r\n- [`@sablier/v2-periphery`](https://www.npmjs.com/package/@sablier/v2-periphery)\r\n\r\nWe should provide a bespoke guide for how to install and interact with them.","createdAt":"2023-07-23T09:35:17Z","labels":["effort: medium","priority: 3","type: feature","work: clear"],"number":78,"repository":"sablier-labs/docs","state":"closed","title":"Document npm packages explicitly","type":"issue","updatedAt":"2024-12-11T13:22:25Z","url":"https://github.com/sablier-labs/docs/issues/78"},{"author":"PaulRBerg","body":"See https://base.org","createdAt":"2023-07-20T17:33:50Z","labels":[],"number":77,"repository":"sablier-labs/docs","state":"closed","title":"Deploy to Base","type":"issue","updatedAt":"2023-07-25T17:18:53Z","url":"https://github.com/sablier-labs/docs/issues/77"},{"author":"hosseinnedaee","body":"In the [configure your local environment](https://docs.sablier.com/contracts/v2/guides/local-environment) the integration template github link is incorrect.\r\nthis:\r\n`forge init --template sablier-v2-integration-template`\r\nshould be changed to this:\r\n`forge init --template sablier-labs/sablier-v2-integration-template`","createdAt":"2023-07-17T08:14:23Z","labels":[],"number":73,"repository":"sablier-labs/docs","state":"closed","title":"Fix integration template link","type":"issue","updatedAt":"2023-07-20T17:33:28Z","url":"https://github.com/sablier-labs/docs/issues/73"},{"author":"PaulRBerg","body":"The flowchart diagrams here would be much clearer if they were converted to [sequence diagrams](https://mermaid.js.org/syntax/sequenceDiagram.html):\r\n\r\nhttps://docs.sablier.com/contracts/v2/reference/diagrams","createdAt":"2023-07-15T17:07:21Z","labels":["effort: high","priority: 3","work: complicated","type: refactor"],"number":72,"repository":"sablier-labs/docs","state":"closed","title":"Convert scenario flowcharts into sequence diagrams","type":"issue","updatedAt":"2024-12-05T17:42:56Z","url":"https://github.com/sablier-labs/docs/issues/72"},{"author":"PaulRBerg","body":"We are showing \"Goerli\" as the current connected chain here:\r\n\r\nhttps://docs.sablier.com/apps/features#multi-chain-experience","createdAt":"2023-07-15T12:09:42Z","labels":["priority: 3","effort: low","type: refactor"],"number":71,"repository":"sablier-labs/docs","state":"closed","title":"Show connected to Ethereum in \"Switch connected chain\" image","type":"issue","updatedAt":"2024-01-01T12:25:06Z","url":"https://github.com/sablier-labs/docs/issues/71"},{"author":"PaulRBerg","body":"See https://twitter.com/EmergenceKirk/status/1679625352447135745.","createdAt":"2023-07-14T11:24:46Z","labels":[],"number":70,"repository":"sablier-labs/docs","state":"closed","title":"Fix caution statement in the \"Segments\" page","type":"issue","updatedAt":"2023-07-14T20:31:37Z","url":"https://github.com/sablier-labs/docs/issues/70"},{"author":"PaulRBerg","body":"","createdAt":"2023-07-13T13:46:57Z","labels":[],"number":68,"repository":"sablier-labs/docs","state":"closed","title":"Bump repos to v2-core@1.0.1 and v2-periphery@1.0.2","type":"issue","updatedAt":"2023-07-14T11:20:21Z","url":"https://github.com/sablier-labs/docs/issues/68"},{"author":"PaulRBerg","body":"In #62, @maxdesalle attempted to stylize the Mermaid.js diagrams by adding an [orange stroke](https://github.com/sablier-labs/v2-docs/issues/13#issuecomment-1631081655). His attempt didn't pan out because the task involves catering for both the light and the dark theme of the website.\r\n\r\nThe docs for custom styling in Mermaid.js flowcharts can be found here:\r\n\r\nhttps://mermaid.js.org/syntax/flowchart.html#styling-and-classes\r\n\r\nIn particular, we may be interested in the [Css classes](https://mermaid.js.org/syntax/flowchart.html#css-classes) section - which seems to make it possible to apply a global style using the `.cssClass > rect` CSS selector.","createdAt":"2023-07-12T16:21:04Z","labels":["effort: high","priority: 3","type: style","work: complicated"],"number":66,"repository":"sablier-labs/docs","state":"closed","title":"Stylize Mermaid diagrams","type":"issue","updatedAt":"2024-12-19T09:24:20Z","url":"https://github.com/sablier-labs/docs/issues/66"},{"author":"PaulRBerg","body":"- Inspiration: [Maker Protocol 101](https://docs.makerdao.com/getting-started/maker-protocol-101)\n- Location: new section \"Protocol Participants\" in the [Diagrams](http://localhost:3000/contracts/v2/reference/diagrams) page\n- Recommendation: do not use Mermaid.js because it doesn't have user silhouettes \n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/b9a1427d-c52d-4579-931e-2fd05c5b03e1\"/>\n","createdAt":"2023-07-12T16:16:08Z","labels":["priority: 2","effort: high","type: feature","work: complicated"],"number":65,"repository":"sablier-labs/docs","state":"open","title":"Protocol participants diagram","type":"issue","updatedAt":"2024-12-19T09:28:49Z","url":"https://github.com/sablier-labs/docs/issues/65"},{"author":"PaulRBerg","body":"The docs website doesn't have any social media preview at the moment:\r\n\r\n<img width=\"300\" alt=\"SCR-20230712-mzcd\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/899b9e4a-f70f-4f03-aab1-4a06f94df8c0\">\r\n\r\n@razgraf could you please add the simple preview that used to be on `sablier.com` before moving to the app + logo preview?","createdAt":"2023-07-12T11:37:29Z","labels":[],"number":64,"repository":"sablier-labs/docs","state":"closed","title":"No social media preview","type":"issue","updatedAt":"2023-07-12T17:47:08Z","url":"https://github.com/sablier-labs/docs/issues/64"},{"author":"PaulRBerg","body":"It would be helpful to add some code snippets in the [Segments](https://docs.sablier.com/concepts/lockup/segments) and [Tranches](https://docs.sablier.com/concepts/lockup/tranches) guides in which we show how different curves get generated from mathematical values.","createdAt":"2023-07-12T10:45:53Z","labels":["effort: medium","priority: 1","type: feature","work: complicated"],"number":63,"repository":"sablier-labs/docs","state":"closed","title":"Add examples in \"Segments\" and \"Tranches\" guides","type":"issue","updatedAt":"2025-08-04T17:30:37Z","url":"https://github.com/sablier-labs/docs/issues/63"},{"author":"andreivladbrg","body":"I've been reviewing the diagrams and I think they are a little bit misleading.\r\n\r\nFor example, the [create a stream](https://docs.sablier.com/contracts/v2/reference/diagrams#create-a-stream) diagram is making me believe that:\r\n1. The Proxy has a `create` function\r\n2. The Proxy Target directly calls the core contract\r\n3. ERC-20 assets will be held in Permit2 contract\r\n\r\nAll three points from above are incorrect.\r\n\r\n<img width=\"827\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-docs/assets/99738872/7ae04d6f-0e5c-4945-9219-d2ff33c6c11c\">\r\n\r\nThe first two points can be also applied to [sender-withdraws](https://docs.sablier.com/contracts/v2/reference/diagrams#sender-withdraws) diagram:\r\n\r\n<img width=\"903\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-docs/assets/99738872/430f7ea8-2ef5-47d9-befd-a12e1a5b65ef\">\r\n\r\nAs well, I would say that changing the final node for `recipient` would be more appropriate,  with the connecting line indicating something like `ERC20-transfer`.","createdAt":"2023-07-11T15:42:56Z","labels":[],"number":61,"repository":"sablier-labs/docs","state":"closed","title":"Improve reference overview diagrams","type":"issue","updatedAt":"2023-07-15T17:11:39Z","url":"https://github.com/sablier-labs/docs/issues/61"},{"author":"PaulRBerg","body":"The screenshots in the \"Apps\" section are taking a while to load (on an okay-ish Internet connection):\r\n\r\nhttps://github.com/sablier-labs/v2-docs/assets/8782666/b71aac25-2128-46bf-b74b-a1aed0f9de00\r\n\r\n","createdAt":"2023-07-11T15:12:33Z","labels":["effort: medium","priority: 3","type: perf","work: clear"],"number":60,"repository":"sablier-labs/docs","state":"closed","title":"Reduce size of screenshot image files","type":"issue","updatedAt":"2024-12-03T12:36:45Z","url":"https://github.com/sablier-labs/docs/issues/60"},{"author":"PaulRBerg","body":"- [x] [NFT](https://github.com/sablier-labs/v2-docs/blob/d347970996070c6f641b6f938e9b832000cbe62e/docs/concepts/protocol/04-nft.mdx#L21-L26)\r\n- [x] [Fees](https://github.com/sablier-labs/v2-docs/blob/d347970996070c6f641b6f938e9b832000cbe62e/docs/concepts/protocol/06-fees.mdx#L46-L51)","createdAt":"2023-07-11T12:59:18Z","labels":[],"number":59,"repository":"sablier-labs/docs","state":"closed","title":"Reference Google form for new integrations","type":"issue","updatedAt":"2023-07-12T13:01:52Z","url":"https://github.com/sablier-labs/docs/issues/59"},{"author":"scorpion9979","body":"While reading the Sablier V2 docs, I noticed that the \"Create a Stream\" pagination link in [Guides / Configure Your Local Environment](https://docs.sablier.com/contracts/v2/guides/local-environment) is not clickable.\r\n\r\nScreenshot:\r\n\r\n![image](https://github.com/sablier-labs/v2-docs/assets/4002635/c99ff70c-8c56-476c-adba-00596553f384)\r\n","createdAt":"2023-07-09T03:48:03Z","labels":["priority: 3","type: bug","effort: low","work: clear"],"number":54,"repository":"sablier-labs/docs","state":"closed","title":"Fix issue in \"Create a Stream\" pagination link","type":"issue","updatedAt":"2024-05-12T06:43:32Z","url":"https://github.com/sablier-labs/docs/issues/54"},{"author":"PaulRBerg","body":"This task is contingent upon building the [front-end SDK](https://github.com/sablier-labs/v2-interfaces/discussions/454) first.\r\n\r\nI've put together a draft:\r\n\r\nhttps://github.com/sablier-labs/v2-docs/blob/8132195e5d5c678cdffc1b2fc0707a3417ffaac0/docs/contracts/v2/guides/05-frontend.md","createdAt":"2023-07-08T18:56:23Z","labels":["priority: 2","effort: high","type: feature","work: complicated","stale"],"number":51,"repository":"sablier-labs/docs","state":"closed","title":"Write \"Front-end Integrations\" guide","type":"issue","updatedAt":"2025-01-06T10:16:25Z","url":"https://github.com/sablier-labs/docs/issues/51"},{"author":"razgraf","body":"Suggestion to add a new section including non-code documentation such as:\r\n\r\n- tutorials (linking to youtube) \r\n- a quick list of app features\r\n- a \"branding\" section where we link the logo and other resources","createdAt":"2023-07-08T14:02:24Z","labels":[],"number":50,"repository":"sablier-labs/docs","state":"closed","title":"Add app/interfaces section","type":"issue","updatedAt":"2023-07-10T13:01:32Z","url":"https://github.com/sablier-labs/docs/issues/50"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n1. Go here: https://docs.sablier.com/contracts/v2/reference/core/contract.SablierV2NFTDescriptor\r\n2. Click on `ISablierV2NFTDescriptor`\r\n3. \"Page Not Found\"\r\n\r\n## Cause\r\n\r\nRunning `pnpm run build` in production produces the following warnings:\r\n\r\n```text\r\n[WARNING] Docs markdown link couldn't be resolved: (/docs/contracts/v2/reference/core/interfaces/interface.ISablierV2NFTDescriptor.md) in \"/vercel/path0/docs/contracts/v2/reference/core/contract.SablierV2NFTDescriptor.md\" for version current\r\n--\r\n17:41:44.685 | [WARNING] Docs markdown link couldn't be resolved: (/docs/contracts/v2/reference/core/interfaces/interface.ISablierV2NFTDescriptor.md) in \"/vercel/path0/docs/contracts/v2/reference/core/contract.SablierV2NFTDescriptor.md\" for version current\r\n17:41:52.983 | [WARNING] Docs markdown link couldn't be resolved: (/docs/contracts/v2/reference/core/interfaces/interface.ISablierV2NFTDescriptor.md) in \"/vercel/path0/docs/contracts/v2/reference/core/contract.SablierV2NFTDescriptor.md\" for version current\r\n17:41:52.983 | [WARNING] Docs markdown link couldn't be resolved: (/docs/contracts/v2/reference/core/interfaces/interface.ISablierV2NFTDescriptor.md) in \"/vercel/path0/docs/contracts/v2/reference/core/contract.SablierV2NFTDescriptor.md\" for version curren\r\n```\r\n\r\nSee, for example, this [Vercel deployment](https://vercel.com/sablier/v2-docs/C7R55jqPAmpHsz9WihD1xmkXNh5w).\r\n\r\nIt is a strange bug because:\r\n\r\n1. I cannot reproduce it locally on my machine - running `pnpm run build` generates no warnings and the `ISablierV2NFTDescriptor` hyperlink works.\r\n2. I've looked at the URLs themselves multiple times, and I've run out of ideas about what could go wrong. Might this be a bug in Docusaurus?\r\n3. The hyperlinks in the other contracts, e.g. `SablierV2LockupLinear`, are working just fine! and they are analogous.\r\n\r\n## Help Wanted\r\n\r\nCc @razgraf you said that you've gotten the same warnings locally - would you mind taking a quick look at this issue?\r\n\r\nHowever, if you cannot reproduce either, let's just mark this bug as \"backlog\" and move on.\r\n\r\n## Resources\r\n\r\nPotentially related: the Docusaurus docs on [Markdown links](https://docusaurus.io/docs/markdown-features/links).","createdAt":"2023-07-07T15:15:33Z","labels":["work: complex","effort: high","priority: 3","type: bug"],"number":46,"repository":"sablier-labs/docs","state":"closed","title":"\"ISablierV2NFTDescriptor\" hyperlink not working","type":"issue","updatedAt":"2024-04-30T11:46:05Z","url":"https://github.com/sablier-labs/docs/issues/46"},{"author":"maxdesalle","body":"Followed the steps outlined [here](https://docs.sablier.com/contracts/v2/guides/local-environment#start-from-scratch), and encountered the following issue with `forge` version `forge 0.2.0 (d8f2434 2023-01-20T00:19:01.043527Z)`.\r\n\r\n```sh\r\n➜  ~ forge init my-project\r\nInitializing /Users/mdesalle/my-project...\r\nInstalling forge-std in \"/Users/mdesalle/my-project/lib/forge-std\" (url: Some(\"https://github.com/foundry-rs/forge-std\"), tag: None)\r\n    Installed forge-std v1.5.6\r\n    Initialized forge project.\r\n➜  ~ cd my-project\r\n➜  my-project git:(main) forge install sablier-labs/v2-core sablier-labs/v2-periphery\r\nInstalling v2-core in \"/Users/mdesalle/my-project/lib/v2-core\" (url: Some(\"https://github.com/sablier-labs/v2-core\"), tag: None)\r\n    Installed v2-core v1.0.0\r\nInstalling v2-periphery in \"/Users/mdesalle/my-project/lib/v2-periphery\" (url: Some(\"https://github.com/sablier-labs/v2-periphery\"), tag: None)\r\n    Installed v2-periphery v1.0.0\r\n➜  my-project git:(main) echo \"@sablier/v2-core=lib/v2-core/src\" >> remappings.txt\r\n\r\n➜  my-project git:(main) echo \"@sablier/v2-periphery=lib/v2-periphery/src\" >> remappings.txt\r\n➜  my-project git:(main) rm src/Counter.sol\r\n➜  my-project git:(main) rm test/Counter.t.sol\r\n➜  my-project git:(main) touch test/StreamCreator.t.sol\r\n➜  my-project git:(main) vim src/StreamCreator.sol\r\n➜  my-project git:(main) forge build\r\nThe application panicked (crashed).\r\nMessage:  failed to extract foundry config:\r\nfoundry config error: Unknown evm version: paris for setting `evm_version`\r\n\r\nLocation: config/src/lib.rs:446\r\n\r\nThis is a bug. Consider reporting it at https://github.com/foundry-rs/foundry\r\n\r\nBacktrace omitted. Run with RUST_BACKTRACE=1 environment variable to display it.\r\nRun with RUST_BACKTRACE=full to include source snippets.\r\n[1]    44400 abort      forge build\r\n```","createdAt":"2023-07-07T14:39:31Z","labels":[],"number":43,"repository":"sablier-labs/docs","state":"closed","title":"Problem with local environment guide","type":"issue","updatedAt":"2023-07-08T13:43:16Z","url":"https://github.com/sablier-labs/docs/issues/43"},{"author":"PaulRBerg","body":"- [x] Add the V2 Periphery errors\r\n- [x] Sync the latest errors in V2 Core","createdAt":"2023-07-07T13:09:50Z","labels":[],"number":40,"repository":"sablier-labs/docs","state":"closed","title":"Update the errors page","type":"issue","updatedAt":"2023-07-08T12:36:56Z","url":"https://github.com/sablier-labs/docs/issues/40"},{"author":"PaulRBerg","body":"As reported by @razgraf, we're getting these warnings when building the app on Vercel:\r\n\r\n```text\r\n[WARNING] Docs markdown link couldn't be resolved\r\n```\r\n\r\nThe issue is definitely related to how the technical reference is generated by the `autogen.sh` script.","createdAt":"2023-07-07T06:11:54Z","labels":[],"number":38,"repository":"sablier-labs/docs","state":"closed","title":"Markdown links warning when building the app","type":"issue","updatedAt":"2023-07-07T15:15:41Z","url":"https://github.com/sablier-labs/docs/issues/38"},{"author":"PaulRBerg","body":"User flow:\r\n\r\n1. Select a token like aDAI that is not traded on Kyber\r\n2. Tap \"Buy aDAI\" button\r\n3. Kyber page not opened\r\n4. Go back, select a token that **does** have an exchange on Kyber, like DAI\r\n5. Kyber page still not opened\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-02-04 à 19 56 58\" src=\"https://user-images.githubusercontent.com/8782666/73772424-c71e5680-4788-11ea-8269-e4fa8eca6db9.png\">\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-02-04 à 19 57 43\" src=\"https://user-images.githubusercontent.com/8782666/73772429-c980b080-4788-11ea-9b56-778a604fed0a.png\">\r\n","createdAt":"2020-02-04T17:59:07Z","labels":["bug"],"number":110,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Kyber pair is not updated after token is changed","type":"issue","updatedAt":"2020-02-07T11:19:50Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/110"},{"author":"PaulRBerg","body":"@marczeller in [sablierhq/sablier](https://github.com/sablierhq/sablier/issues/32):\r\n\r\n```\r\nTo the best of my knowledge, the Sablier UI has an hardcoded Gaslimit on the web3 call of createSalary() of 500000 gas units.\r\n\r\nAt least in my tests that lead to outOfGas for aDAI streams as the gas used is higher.\r\n\r\nlink to failed tx :\r\n\r\nhttps://etherscan.io/tx/0x122b9a40225c31ab814f93a6d86f9a7c25652e11c56ee19951c5a2cac3f20862\r\n\r\nhttps://etherscan.io/tx/0xffb6b3e183ae14fa29aea148ba0521e07df1d91287798042942597ed5bea0950\r\n\r\nhttps://etherscan.io/tx/0x1d64a95d09da92d8c940806fbcca1f843a7a9f6cf215dc05ad7ca9808c2a253b\r\n\r\nLink to successful tx after increasing the GasLimit :\r\n\r\nhttps://etherscan.io/tx/0x9ab7e2dbbc75c168621f5e5b9e9685a716531f9d56e9eec6bb7e07e8377470a6\r\n\r\nHotfix suggested: increase the GasLimit hardcode to 1.1M gas Units.\r\n```","createdAt":"2020-02-04T16:24:25Z","labels":["bug"],"number":109,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Hardcoded gas limit not enough for aDAI","type":"issue","updatedAt":"2020-02-04T19:10:29Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/109"},{"author":"PaulRBerg","body":"This used to be the case, but one of the recent updates broke it. Ideally, the sidebar shouldn't even open when all money has been withdrawn.\r\n\r\nhttps://etherscan.io/tx/0x23892a9683886a6c077e713e65e3d9fb157e0d3ce360cf8f2665ed512023996f\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-01-25 à 20 30 34\" src=\"https://user-images.githubusercontent.com/8782666/73125640-caa82580-3fb1-11ea-895c-c1d5855c936c.png\">\r\n","createdAt":"2020-01-25T18:32:55Z","labels":["bug"],"number":106,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Transaction shouldn't be submittable after all money is withdrawn","type":"issue","updatedAt":"2020-02-06T10:49:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/106"},{"author":"PaulRBerg","body":"See this [tweet](https://twitter.com/PaulRBerg/status/1220102339224309760). The deposit should not be <0,001 cDAI LOL.\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-01-22 à 23 53 42\" src=\"https://user-images.githubusercontent.com/8782666/72939331-55501100-3d75-11ea-89f0-bea1e0b79206.png\">\r\n","createdAt":"2020-01-22T22:15:10Z","labels":["bug"],"number":105,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Deposit is wrongly calculated for cDAI streams","type":"issue","updatedAt":"2020-02-05T19:01:32Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/105"},{"author":"PaulRBerg","body":"This is somehow related to #97, but we should not use \"you\" in the Details page. It's not a given that the user who read that text is the recipient themselves.\r\n\r\nSee the warning I added in the withdrawal sidebar for this:\r\n\r\n<img width=\"545\" alt=\"Capture d’écran 2020-01-22 à 18 37 57\" src=\"https://user-images.githubusercontent.com/8782666/72913793-53bb2480-3d46-11ea-8a40-ad42950d5f63.png\">\r\n","createdAt":"2020-01-22T16:38:18Z","labels":["bug"],"number":104,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Replace \"you\" with address or ENS name in Details Page","type":"issue","updatedAt":"2020-01-24T18:22:13Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/104"},{"author":"PaulRBerg","body":"This is really a perfect place to use ENS. It's not currently displayed:\r\n\r\n<img width=\"618\" alt=\"Capture d’écran 2020-01-22 à 04 22 27\" src=\"https://user-images.githubusercontent.com/8782666/72860220-e324f100-3cce-11ea-8e61-9fbb29f275e8.png\">\r\n","createdAt":"2020-01-22T02:23:19Z","labels":["bug"],"number":103,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use ENS in Details Page","type":"issue","updatedAt":"2020-01-22T13:05:15Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/103"},{"author":"PaulRBerg","body":"While reviewing @razgraf's latest work on the Details Page, I noticed this:\r\n\r\n```javascript\r\nfunction DurationCard({ cancelledOn, forRecipient, status, timeLabels })\r\n```\r\n\r\nBut in a Hook-powered app like ours, we should NOT:\r\n\r\n1. Get the data as a Hook\r\n2. Pass it down to a component as a prop\r\n\r\n(Except for a few very isolated use cases).","createdAt":"2020-01-22T01:40:28Z","labels":["feature"],"number":102,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use Hooks and do NOT pass down components in DurationCard","type":"issue","updatedAt":"2020-01-24T18:21:53Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/102"},{"author":"PaulRBerg","body":"I've just noticed this while using Sablier on my iPhone. In the image below, \"How much do you want to stream?\" should NOT be visible.\r\n\r\n![IMG_7024](https://user-images.githubusercontent.com/8782666/72685609-840b8480-3af4-11ea-9920-d01a0b0a9d0e.PNG)\r\n","createdAt":"2020-01-19T17:48:23Z","labels":["bug"],"number":99,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Scrollbar in token dropdown doesn't have a solid background","type":"issue","updatedAt":"2020-02-06T00:08:16Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/99"},{"author":"PaulRBerg","body":"I saw this in the `GoToModal` component:\r\n\r\n```javascript\r\n<Description>\r\n  You&apos;re currently using <span data-type=\"recipient\">{links.app}</span> to withdraw from and view all\r\n  incoming streams. In order to pay someone or track all\r\n  <StyledArrowUpRight />\r\n  outgoing streams, visit <StyledLink href={links.pay}>{links.pay}</StyledLink>.\r\n</Description>\r\n```\r\n\r\nWe should use the [Trans](https://react.i18next.com/latest/trans-component) component instead of hardcoded English.\r\n\r\nPossibly helpful:\r\n\r\nhttps://stackoverflow.com/questions/43587838/react-i18next-interpolation-of-link-in-html-tag-in-the-middle-of-the-text","createdAt":"2020-01-11T14:59:27Z","labels":["feature"],"number":97,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use the Trans component instead of hardcoded English","type":"issue","updatedAt":"2020-01-25T00:59:49Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/97"},{"author":"PaulRBerg","body":"We should use only one naming system. `forRecipient` makes more sense.","createdAt":"2020-01-09T14:03:11Z","labels":["feature"],"number":95,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Rename \"isRecipient\" to \"forRecipient\"","type":"issue","updatedAt":"2020-01-11T01:42:58Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/95"},{"author":"PaulRBerg","body":"Logged in on mainnet with Argent:\r\n\r\n<img width=\"1212\" alt=\"Capture d’écran 2020-01-08 à 19 42 01\" src=\"https://user-images.githubusercontent.com/8782666/72001907-10918980-324f-11ea-80b8-9a9639c18c9d.png\">\r\n\r\nThe \"to\" address should be 0x0492b9170EC01D91f3aa721FF8AdA42dd33FBBb8.","createdAt":"2020-01-08T17:43:25Z","labels":["bug"],"number":94,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"ENS names don't work in Dashboard + Web3 Status","type":"issue","updatedAt":"2020-01-25T01:00:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/94"},{"author":"PaulRBerg","body":"I recently stumbled upon [Storybook](https://storybook.js.org) and it is so, so *awesome*.\r\n\r\nWe should start using it by creating a new package dedicated for it. Example integration:\r\n\r\nhttps://github.com/react-workspaces/react-workspaces-playground","createdAt":"2020-01-08T14:03:44Z","labels":["feature"],"number":93,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use Storybook","type":"issue","updatedAt":"2024-12-21T10:47:48Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/93"},{"author":"PaulRBerg","body":"We have the gas limits predefined for every interaction with the Sablier smart contract:\r\n\r\n```javascript\r\nexport const GAS_LIMITS = {\r\n  cancelSalary: 200000,\r\n  createSalary: 480000,\r\n  tokenApproval: 150000,\r\n  withdrawFromSalary: 175000,\r\n};\r\n```\r\n\r\nThe problem is that these are not enough for some users:\r\n\r\n+ https://etherscan.io/tx/0x36a66f0a4e7cfa586267ccf2dbea395dae95d1584c4b4316262b936ceaf53e2d\r\n+ https://etherscan.io/tx/0xb616eef6202ab888d71276712f4bf34a7f046b8d4a1190785a0ecac8e7d9bc8c\r\n\r\nTherefore, the ideal solution would be to let the wallet calculate the gas limit for each user. This is how contract calls on the Etherscan UI work.","createdAt":"2020-01-06T10:53:36Z","labels":["bug"],"number":92,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Let the wallet calculate the gas limit","type":"issue","updatedAt":"2022-03-24T15:30:55Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/92"},{"author":"razgraf","body":"When using special tokens (e.g. **Self Token**) the image is displayed correctly inside the Stream Profile, but the title doesn't match.\r\n\r\nExample: [Stream 192](https://pay.sablier.finance/stream/192)\r\n\r\n![image1](https://user-images.githubusercontent.com/15740806/71810748-c5734d00-307b-11ea-8099-141141e77752.png)\r\n![image0](https://user-images.githubusercontent.com/15740806/71810759-cd32f180-307b-11ea-97ad-69ac8ba4850b.png)\r\n\r\n\r\nThis issue was signaled by user dAAAb over Discord.","createdAt":"2020-01-06T09:57:41Z","labels":["bug"],"number":91,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"ERC-20 Token (custom) name not displayed correctly","type":"issue","updatedAt":"2020-02-05T13:27:26Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/91"},{"author":"PaulRBerg","body":"Take this user flow:\r\n\r\n1. Stream created\r\n2. Time passes\r\n3. Stream ends\r\n4. User withdraws everything\r\n\r\nAfter step no. 4, the user should NOT be able to open the withdrawal sidebar anymore.","createdAt":"2020-01-04T14:51:51Z","labels":["feature"],"number":90,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Don't open the sidebar when the stream is cancelled","type":"issue","updatedAt":"2020-02-05T19:57:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/90"},{"author":"PaulRBerg","body":"See this [tweet](https://twitter.com/intocryptoast/status/1213236701474304000) from @intocryptoast:\r\n\r\n<img width=\"549\" alt=\"Capture d’écran 2020-01-04 à 14 01 16\" src=\"https://user-images.githubusercontent.com/8782666/71765241-b31dd580-2efa-11ea-9719-f8882d8bab26.png\">","createdAt":"2020-01-04T12:02:49Z","labels":["bug"],"number":89,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Certain wallets don't work on Android mobile","type":"issue","updatedAt":"2024-12-21T10:47:48Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/89"},{"author":"PaulRBerg","body":"Reported by @CryptoParent and @bitcoinbae on Twitter.\r\n\r\n<img width=\"532\" alt=\"Capture d’écran 2020-01-03 à 23 35 24\" src=\"https://user-images.githubusercontent.com/8782666/71751276-b629af00-2e83-11ea-83ba-dcdc2b9d2d5c.png\">\r\n","createdAt":"2020-01-03T21:49:50Z","labels":["bug"],"number":88,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"WalletMiddleware - Invalid \"from\" address","type":"issue","updatedAt":"2024-12-21T10:47:48Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/88"},{"author":"razgraf","body":"Add Discord as a main chat on the landing page (replace Telegram)","createdAt":"2020-01-03T21:06:57Z","labels":["feature"],"number":87,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Telegram to Discord transition","type":"issue","updatedAt":"2020-01-22T01:43:24Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/87"},{"author":"PaulRBerg","body":"This is just a (biased) suggestion, feel free to close it if you think the payoff is not worth the effort.\r\n\r\nAfter ~3 years of development, I still have no idea what `flex: 1` does. But I do know what `flex-grow` and `flex-shrink` do, individually.\r\n\r\nUnpacking this into their own sub-properties would make it much easier to read, imho.","createdAt":"2020-01-02T23:34:10Z","labels":["feature"],"number":86,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Nuke \"flex: 1;\" from orbit","type":"issue","updatedAt":"2020-01-09T18:05:07Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/86"},{"author":"PaulRBerg","body":"Since we made a dichotomy between the mobile and the desktop versions, the \"isAnySidebarOpen\" nomenclature doesn't make sense anymore.","createdAt":"2020-01-02T22:35:56Z","labels":["feature"],"number":85,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Rename \"isAnySidebarOpen\" to \"isAnyStreamLogicComponentOpen\"","type":"issue","updatedAt":"2020-02-05T19:57:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/85"},{"author":"PaulRBerg","body":"After the latest changes done by @razgraf in #81, it makes sense now to merge the two different `DashboardPage` files into one in \"@sablier/components\". I didn't do it until now because of some quirky behaviour of react-table.\r\n\r\nHere's a [diff](https://www.diffchecker.com/E48g4o2M) for you.","createdAt":"2020-01-02T14:25:04Z","labels":["feature"],"number":84,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Use only one DashboardPage","type":"issue","updatedAt":"2024-12-21T10:47:48Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/84"},{"author":"PaulRBerg","body":"Here's what I see when I use WalletLink on Kovan:\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-01-02 à 15 29 46\" src=\"https://user-images.githubusercontent.com/8782666/71670278-221ef100-2d78-11ea-817d-fcabe90db76d.png\">\r\n\r\nBut what I should see is the big list of streams created by `0x4bcb303609F19e71Ab82A3A3393c46BfEa1e44Fc`.\r\n\r\nAnd now what I see when I use WalletLink on mainnet:\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2020-01-02 à 15 53 34\" src=\"https://user-images.githubusercontent.com/8782666/71670311-38c54800-2d78-11ea-865f-3cc24f3aa55f.png\">\r\n\r\nSo that's the correct list of streams, created by `0x0492b9170EC01D91f3aa721FF8AdA42dd33FBBb8`.\r\n\r\nThis is either a WalletLink or a @web3-react bug. Will investigate.","createdAt":"2020-01-02T14:01:19Z","labels":["bug"],"number":83,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Coinbase Wallet does not work on testnets","type":"issue","updatedAt":"2024-12-21T10:47:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/83"},{"author":"PaulRBerg","body":"In one of their recent updates, commitizen introduced the option to start a commit with \"improvement\", but our commitlint and husky rules don't allow for this. We should probably update to the latest versions.\r\n\r\nReported by @razgraf.","createdAt":"2020-01-02T13:42:07Z","labels":["bug"],"number":82,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Commitizen is out of sync with commitlink and husky","type":"issue","updatedAt":"2020-01-08T14:05:49Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/82"},{"author":"PaulRBerg","body":"We need a cookie consent popup for the following services:\r\n\r\n- Crisp\r\n- Google Analytics\r\n- Mixpanel\r\n- Rollbar\r\n\r\nZerion does a good job at this:\r\n\r\n<img width=\"1055\" alt=\"zerion-cookies-1\" src=\"https://user-images.githubusercontent.com/8782666/218770863-89798d25-5219-4723-92ca-4fb461112a0c.png\">\r\n\r\n<img width=\"388\" alt=\"zerion-cookies-2\" src=\"https://user-images.githubusercontent.com/8782666/218770889-4ed50144-9c1d-4b9e-9a14-3a839f1970ec.png\">\r\n","createdAt":"2019-12-31T14:42:23Z","labels":["feature"],"number":80,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Cookie consent system","type":"issue","updatedAt":"2023-07-06T15:16:02Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/80"},{"author":"PaulRBerg","body":"This is a weird one:\r\n\r\nhttps://rollbar.com/sablier/pay.sablier.finance/items/13/occurrences/110661694219/\r\n\r\nAccording to the traceback, the app sent a null error to Rollbar.","createdAt":"2019-12-31T12:43:20Z","labels":["bug"],"number":79,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Item sent with null or missing arguments","type":"issue","updatedAt":"2020-02-05T23:37:09Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/79"},{"author":"PaulRBerg","body":"This is probably the same issue as with the proxy streams from a few days ago. The history items are pulled from the core money streaming engine, instead of being routed through the dapp proxy.\r\n\r\n<img width=\"1196\" alt=\"Capture d’écran 2019-12-27 à 23 19 50\" src=\"https://user-images.githubusercontent.com/8782666/71533100-98969b80-28ff-11ea-8f37-792adbcd7302.png\">","createdAt":"2019-12-27T21:21:31Z","labels":["bug"],"number":78,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"History data is flawed","type":"issue","updatedAt":"2020-01-01T20:59:42Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/78"},{"author":"PaulRBerg","body":"Stacktrace:\r\n\r\n```\r\nSyntaxError: Unexpected token '<'\r\nFile https://pay.sablier.finance/static/js/5.aa8df5d8.chunk.js line 1 col 0 in [anonymous]\r\n```\r\n\r\n[See it on Rollbar](https://rollbar.com/sablier/pay.sablier.finance/items/9/).","createdAt":"2019-12-24T11:59:48Z","labels":["bug"],"number":76,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Unexpected token '<'","type":"issue","updatedAt":"2024-12-21T10:47:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/76"},{"author":"PaulRBerg","body":"This usually happens when the contract call has unsound parameters.\r\n\r\n[See it on Rollbar](https://rollbar.com/sablier/pay.sablier.finance/items/3/).","createdAt":"2019-12-23T09:57:12Z","labels":["bug"],"number":74,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Gas required exceeds allowance (9952996) or always failing transaction","type":"issue","updatedAt":"2019-12-27T12:48:03Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/74"},{"author":"PaulRBerg","body":"I suspect the problem here is some missing polyfill.\r\n\r\nThe traceback:\r\n\r\n```\r\nTypeError: Object.entries is not a function\r\n  File \"../../../node_modules/react-spring/web.js\", line 1030, in value\r\n            Object.entries(to).forEach(function (_ref2) {\r\n  File \"../../../node_modules/react-spring/web.js\", line 1685, in useTransition\r\n          ctrl.update(newProps);\r\n  File \"(native)\", line unknown, in Array.forEach\r\n  File \"../../../node_modules/react-spring/web.js\", line 1637, in useTransition\r\n        state.current.transitions.forEach(function (transition) {\r\n  File \"../../../packages/components/lib/Modal/index.js\", line 183, in Modal\r\n      var transitions = (0, _reactSpring.useTransition)(isOpen, null, {\r\n  File \"../../../node_modules/react-dom/cjs/react-dom.production.min.js\", line 3610, in da\r\n      b = c(d, e);\r\n  File \"../../../node_modules/react-dom/cjs/react-dom.production.min.js\", line 6609, in As\r\n          e = Ih(null, b, d, a, e, c);\r\n  File \"../../../node_modules/react-dom/cjs/react-dom.production.min.js\", line 5648, in Iu\r\n      var b = gk(a.alternate, a, W);\r\n  File \"../../../node_modules/react-dom/cjs/react-dom.production.min.js\", line 5637, in Pu\r\n        V = fk(V);\r\n  File \"../../../node_modules/react-dom/cjs/react-dom.production.min.js\", line 5393, in _u\r\n              Zj();\r\n```\r\n\r\n[See it on Rollbar](https://rollbar.com/sablier/pay.sablier.finance/items/4/).","createdAt":"2019-12-23T09:51:39Z","labels":["bug"],"number":73,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Object.entries is not a function","type":"issue","updatedAt":"2019-12-23T11:24:45Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/73"},{"author":"PaulRBerg","body":"This is a really common crash I've been seeing on Rollbar and before that on Sentry.\r\n\r\nI'm not sure what is the cause, because it never happened to me, neither in development or in production. But I suspect it has to do with the \"lazy()\" imports, such as in the \"App.js\" files.\r\n\r\n![C156BC1D-C8D2-4E19-BFA9-4B22CAAF0330](https://user-images.githubusercontent.com/8782666/71328486-9bb91280-2520-11ea-94dd-2ea074b4bb29.png)","createdAt":"2019-12-22T23:07:48Z","labels":["bug"],"number":72,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Loading chunk 5 failed","type":"issue","updatedAt":"2024-12-21T10:47:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/72"},{"author":"PaulRBerg","body":"I'm not sure exactly what causes this, but it seems that the `Error in \"Create Stream\" Sidebar` and `Error in \"CreateStream\"` events have more than 500K entries in Mixpanel. We don't have half a million users yet, so there's something wrong going on here.\r\n\r\n<img width=\"1327\" alt=\"Capture d’écran 2019-12-22 à 16 02 39\" src=\"https://user-images.githubusercontent.com/8782666/71322815-8ddda000-24d4-11ea-9a0d-700ec6aa418e.png\">\r\n\r\nNote that we recently started to use the \"isWalletError\" function to detect if the error is a user-denied signature (sent to Mixpanel) OR an actual form crash (sent to Rollbar) but nonetheless we should NOT ping Mixpanel so many times - it'll rapidly start eating our quota.\r\n\r\nPossible causes:\r\n\r\n- #44\r\n- Finite-state machine re-renders\r\n- A Hook that doesn't have the correct dependencies","createdAt":"2019-12-22T14:06:00Z","labels":["bug"],"number":71,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Stop pinging Mixpanel on every render","type":"issue","updatedAt":"2020-01-22T01:46:42Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/71"},{"author":"PaulRBerg","body":"This occurs in the sender app, when loading the Dashboard page with many streams.\r\n\r\nThe full log:\r\n\r\n```\r\nindex.js:1406 Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in AccountLabel (at DashboardPage/index.js:140)\r\n    in Cell (created by Table)\r\nconsole.<computed> @ index.js:1406\r\ne.<computed> @ rollbar.umd.min.js:2621\r\nr @ backend.js:6\r\nwarningWithoutStack @ react-dom.development.js:534\r\nwarnAboutUpdateOnUnmountedFiberInDEV @ react-dom.development.js:25681\r\nscheduleUpdateOnFiber @ react-dom.development.js:23619\r\ndispatchAction @ react-dom.development.js:17090\r\nlookupAddress$ @ index.js:104\r\ntryCatch @ runtime.js:45\r\ninvoke @ runtime.js:264\r\nprototype.<computed> @ runtime.js:98\r\ntryCatch @ runtime.js:45\r\ninvoke @ runtime.js:137\r\n(anonymous) @ runtime.js:149\r\nPromise.then (async)\r\ninvoke @ runtime.js:146\r\n(anonymous) @ runtime.js:172\r\ncallInvokeWithMethodAndArg @ runtime.js:171\r\nenqueue @ runtime.js:190\r\nprototype.<computed> @ runtime.js:98\r\nexports.async @ runtime.js:211\r\nlookupAddress @ index.js:69\r\n(anonymous) @ index.js:120\r\ncommitHookEffectList @ react-dom.development.js:21974\r\ncommitPassiveHookEffects @ react-dom.development.js:22007\r\ncallCallback @ react-dom.development.js:337\r\ninvokeGuardedCallbackDev @ react-dom.development.js:386\r\ninvokeGuardedCallback @ react-dom.development.js:439\r\nflushPassiveEffectsImpl @ react-dom.development.js:25334\r\nunstable_runWithPriority @ scheduler.development.js:821\r\nrunWithPriority$2 @ react-dom.development.js:12209\r\nflushPassiveEffects @ react-dom.development.js:25303\r\nperformSyncWorkOnRoot @ react-dom.development.js:24192\r\n(anonymous) @ react-dom.development.js:12263\r\nunstable_runWithPriority @ scheduler.development.js:821\r\nrunWithPriority$2 @ react-dom.development.js:12209\r\nflushSyncCallbackQueueImpl @ react-dom.development.js:12258\r\nflushSyncCallbackQueue @ react-dom.development.js:12246\r\nscheduleUpdateOnFiber @ react-dom.development.js:23649\r\ndispatchAction @ react-dom.development.js:17090\r\nnext @ react-hooks.esm.js:292\r\nnotifySubscription @ Observable.js:151\r\nonNotify @ Observable.js:195\r\nnext @ Observable.js:251\r\n(anonymous) @ bundle.esm.js:547\r\niterateObserversSafely @ bundle.esm.js:546\r\nnext @ bundle.esm.js:513\r\ninvoke @ bundle.esm.js:1538\r\n(anonymous) @ bundle.esm.js:1624\r\n(anonymous) @ bundle.esm.js:1992\r\n(anonymous) @ bundle.esm.js:1990\r\nQueryManager.broadcastQueries @ bundle.esm.js:1988\r\n(anonymous) @ bundle.esm.js:2115\r\nnext @ Observable.js:338\r\nnotifySubscription @ Observable.js:151\r\nonNotify @ Observable.js:195\r\nnext @ Observable.js:251\r\n(anonymous) @ bundle.esm.js:1122\r\nPromise.then (async)\r\nnext @ bundle.esm.js:1120\r\nnotifySubscription @ Observable.js:151\r\nonNotify @ Observable.js:195\r\nnext @ Observable.js:251\r\n(anonymous) @ bundle.esm.js:1085\r\nnext @ bundle.esm.js:1084\r\nnotifySubscription @ Observable.js:151\r\nonNotify @ Observable.js:195\r\nnext @ Observable.js:251\r\n(anonymous) @ bundle.esm.js:107\r\nPromise.then (async)\r\n(anonymous) @ bundle.esm.js:106\r\nSubscription @ Observable.js:213\r\nsubscribe @ Observable.js:295\r\n(anonymous) @ bundle.esm.js:1082\r\nSubscription @ Observable.js:213\r\nsubscribe @ Observable.js:295\r\nQueryManager.getObservableFromLink @ bundle.esm.js:2043\r\n(anonymous) @ bundle.esm.js:2090\r\nQueryManager.fetchRequest @ bundle.esm.js:2089\r\n(anonymous) @ bundle.esm.js:1449\r\nstep @ tslib.es6.js:196\r\n(anonymous) @ tslib.es6.js:127\r\n(anonymous) @ tslib.es6.js:100\r\n__awaiter @ tslib.es6.js:77\r\nQueryManager.fetchQuery @ bundle.esm.js:1387\r\nQueryManager.observeQuery @ bundle.esm.js:1846\r\nObservableQuery.setUpQuery @ bundle.esm.js:491\r\nObservableQuery.onSubscribe @ bundle.esm.js:455\r\n(anonymous) @ bundle.esm.js:121\r\nSubscription @ Observable.js:213\r\nsubscribe @ Observable.js:295\r\nQueryData.startQuerySubscription @ react-hooks.esm.js:281\r\nQueryData._this.getExecuteResult @ react-hooks.esm.js:92\r\nQueryData.execute @ react-hooks.esm.js:139\r\n(anonymous) @ react-hooks.esm.js:488\r\nuseDeepMemo @ react-hooks.esm.js:441\r\nuseBaseQuery @ react-hooks.esm.js:487\r\nuseQuery @ react-hooks.esm.js:505\r\nuseProxyStreams @ proxyStreams.js:63\r\nuseSenderProxyStreams @ proxyStreams.js:100\r\nDashboardPage @ index.js:103\r\nrenderWithHooks @ react-dom.development.js:16295\r\nupdateFunctionComponent @ react-dom.development.js:18341\r\nmountLazyComponent @ react-dom.development.js:18647\r\nbeginWork$1 @ react-dom.development.js:20127\r\nbeginWork$$1 @ react-dom.development.js:25699\r\nperformUnitOfWork @ react-dom.development.js:24646\r\nworkLoopSync @ react-dom.development.js:24622\r\nperformSyncWorkOnRoot @ react-dom.development.js:24211\r\n(anonymous) @ react-dom.development.js:12263\r\nunstable_runWithPriority @ scheduler.development.js:821\r\nrunWithPriority$2 @ react-dom.development.js:12209\r\nflushSyncCallbackQueueImpl @ react-dom.development.js:12258\r\nworkLoop @ scheduler.development.js:765\r\nflushWork @ scheduler.development.js:720\r\nperformWorkUntilDeadline @ scheduler.development.js:212\r\nShow 73 more frames\r\n```","createdAt":"2019-12-22T12:57:51Z","labels":["bug"],"number":70,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Can't perform a React state update on an unmounted component","type":"issue","updatedAt":"2024-12-21T10:47:46Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/70"},{"author":"PaulRBerg","body":"See these references to understand the `-webkit-overflow-scrolling` bug on iOS:\r\n\r\n- [Absolutely positioned container hides the content beyond the screen's height](https://stackoverflow.com/questions/58788423/absolutely-positioned-container-hides-the-content-beyond-the-screens-height)\r\n- [iOS not respecting z-index with -webkit-overflow-scrolling](https://stackoverflow.com/questions/37696746/ios-not-respecting-z-index-with-webkit-overflow-scrolling)\r\n- [Safari for iOS: z-index ordering bug](https://css-tricks.com/forums/topic/safari-for-ios-z-index-ordering-bug-while-scrolling-a-page-with-a-fixed-element/)\r\n\r\nOnly due to this fucking bug, we had to make a distinction between the mobile and the desktop version of the apps.\r\n\r\nOn mobile, we use routes (e.g. \"sablier.finance/stream/create\"), while on desktop we use sidebars. This is all nice and smooth, until you realise we have to maintain a non-trivial amount of (duplicated) code to handle this dimorphism. For instance:\r\n\r\n- apps/sender/src/components/CreateStream\r\n- apps/sender/src/pages/CreateStream\r\n- apps/sender/src/sidebars/CreateStream\r\n- all the places where we use the \"isOpen\" global property, part of \"CreateStreamContext\"\r\n\r\nFind a smarter way, while still enabling `-webkit-overflow-scrolling: touch` on iOS.","createdAt":"2019-12-21T19:46:43Z","labels":["feature"],"number":69,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Get rid of the stream logic dimorphism","type":"issue","updatedAt":"2024-12-21T10:47:46Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/69"},{"author":"PaulRBerg","body":"Vendors like Mixpanel and Sentry are currently kept in @sablier/utils, which is rather confusing, because vendors are not necessarily utilities. We should move them to their own bespoke package `@sablier/vendors`.","createdAt":"2019-12-21T19:30:47Z","labels":["feature"],"number":68,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Create \"vendors\" package","type":"issue","updatedAt":"2019-12-22T22:45:40Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/68"},{"author":"PaulRBerg","body":"The `@sablier/apollo` package has a lot of spaghetti code inside. We should refactor the queries such that there is a bespoke definition in each component, separating concerns in the process.\r\n\r\nAFAIK, this is how Facebook defines their queries and how GraphQL was envisaged to be used in the first place.","createdAt":"2019-12-21T19:29:14Z","labels":["feature"],"number":67,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Divide et impera on Apollo queries","type":"issue","updatedAt":"2024-12-21T10:47:46Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/67"},{"author":"PaulRBerg","body":"Errors are handled as strings pretty much everywhere, which makes it hard to know what error has been set when multiple could exist in the same place. E.g. see the `CreateStream` component.\r\n\r\nSolution: create a `@sablier/errors` package under `packages`.","createdAt":"2019-12-21T19:25:31Z","labels":["feature"],"number":66,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Create a package for centralizing errors","type":"issue","updatedAt":"2024-12-21T10:47:45Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/66"},{"author":"PaulRBerg","body":"To the extent possible, migrate all logic bits to finite-state machines.\r\n\r\nI fell in love with FSMs the moment I [discovered](https://twitter.com/PaulRBerg/status/1196076213577637888) David Kourshid's [xstate](xstate) library. The catch is that I stumbled upon it long after I started craft the web interfaces, so the codebase is only partially built with xstate and the [actor model](https://www.brianstorti.com/the-actor-model/). Such a shame!\r\n\r\nIt would be epic if we converted all contexts (modals, sidebars, ethereum, tokens, etc) to FSMs.","createdAt":"2019-12-21T19:24:18Z","labels":["feature"],"number":65,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Migrate to finite-state machines","type":"issue","updatedAt":"2020-01-10T22:46:05Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/65"},{"author":"PaulRBerg","body":"Our smart contracts enable the option to select a start time for a new stream, but we currently don't give users this option - we have a default delay time of around 6 minutes.\r\n\r\nThis feature has been requested by:\r\n\r\n- Jasper Gooijer from Flux Market\r\n- Alex Negru from Minutizer","createdAt":"2019-12-21T17:43:35Z","labels":["feature"],"number":64,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Select start time in stream creation form","type":"issue","updatedAt":"2019-12-23T11:29:25Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/64"},{"author":"PaulRBerg","body":"Oh boy, I finally found the **perfect** example for how our landing page tweed feed should look like. Unexpectedly, it's a design coming from the brilliant folks at Notion.\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2019-12-21 à 15 54 46\" src=\"https://user-images.githubusercontent.com/8782666/71308894-6ae6b980-240a-11ea-8c23-7b372f4ddc05.png\">\r\n\r\nGo [notion.so/mobile](https://notion.so/mobile).","createdAt":"2019-12-21T13:56:46Z","labels":["feature"],"number":63,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Make the \"What People Say\" section like Notion","type":"issue","updatedAt":"2020-01-22T01:45:08Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/63"},{"author":"razgraf","body":"I'd like to propose a re-do on the layout system of the stream UI, based on its behavior with very small values (or small increments). Ideas:\r\n1. Shorten the number of digits after the decimal point (10 should be more than enough, >10 are in 99% of cases redundant as the 10th digit (or in that vicinity) seems to always update per second)\r\nand/or\r\n2. Adapt the number of digits displayed on smalled devices (based on how narrow the device is). Lengthy numbers will break the responsiveness. If trimming (idea #1) is not wanted, there's also an option to measure the length of the number vs the width of the screen and adapt the UI with a quick css transform on scale().\r\n\r\nThoughts?","createdAt":"2019-12-21T12:46:41Z","labels":["feature"],"number":62,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Proposal for trimming the primary streamed amount from the UI","type":"issue","updatedAt":"2019-12-21T13:21:40Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/62"},{"author":"PaulRBerg","body":"For instance, Coinbase Wallet.\r\n\r\n![2019-12-21 12 50 55](https://user-images.githubusercontent.com/8782666/71306984-8ba21580-23f0-11ea-925a-0765e656da46.jpg)","createdAt":"2019-12-21T10:51:23Z","labels":["bug","wontfix"],"number":61,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Certain wallets don't handle the \"mailto\" protocol","type":"issue","updatedAt":"2020-01-02T16:30:58Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/61"},{"author":"PaulRBerg","body":"To avoid copy-pasting, go read this issue: https://github.com/Uniswap/uniswap-frontend/issues/562\r\n\r\nWe should really try to fix this bug, it causes business issues.\r\n\r\n<img width=\"938\" alt=\"Capture d’écran 2019-12-20 à 21 17 07\" src=\"https://user-images.githubusercontent.com/8782666/71285669-74224880-236e-11ea-953a-a9d9f72dc375.png\">","createdAt":"2019-12-20T19:20:04Z","labels":["bug"],"number":60,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Certain WalletConnect wallets don't broadcast transactions","type":"issue","updatedAt":"2024-12-21T10:47:45Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/60"},{"author":"razgraf","body":"Add the new Quantstamp badge provided through Keybase.","createdAt":"2019-12-20T17:54:26Z","labels":["feature"],"number":59,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Quantstamp badge ","type":"issue","updatedAt":"2019-12-27T23:24:01Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/59"},{"author":"PaulRBerg","body":"Kinda similar to https://github.com/sablierbot/sablier-frontend/issues/56.\r\n\r\nWe *really* should make a difference between the two web interfaces and colouring the recipient app in blue or something would solve this pretty easily.\r\n\r\nBonus: add some kind of label after the \"Sablier\" text in the logo, analogous to \"Overflow\" in \"Stack Overflow\".\r\n\r\n<img width=\"166\" alt=\"Capture d’écran 2019-12-20 à 01 31 02\" src=\"https://user-images.githubusercontent.com/8782666/71217969-69ad7380-22c8-11ea-8683-d66450d365da.png\">","createdAt":"2019-12-19T23:31:27Z","labels":["feature"],"number":58,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Different colors between the two web interfaces","type":"issue","updatedAt":"2019-12-23T14:07:17Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/58"},{"author":"PaulRBerg","body":"See the screenshot below, sent by Alex Negru on Telegram.\r\n\r\n<img width=\"491\" alt=\"Capture d’écran 2019-12-19 à 15 52 07\" src=\"https://user-images.githubusercontent.com/8782666/71179566-1a8c2200-2279-11ea-9029-9b6b440ca3e3.png\">","createdAt":"2019-12-19T14:03:46Z","labels":["bug","feature"],"number":57,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Withdrawal input not visible on OnePlus 5T","type":"issue","updatedAt":"2020-01-28T12:30:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/57"},{"author":"PaulRBerg","body":"A LOT of people have been confused by the dichotomy between the payer and the recipient web interface. This is really a tough UX though, we shouldn't be too hard on ourselves, but we should do something about it.\r\n\r\n<img width=\"933\" alt=\"Capture d’écran 2019-12-19 à 12 45 16\" src=\"https://user-images.githubusercontent.com/8782666/71167818-18689a00-225e-11ea-9742-5767f0ac6ace.png\">\r\n\r\nI propose the addition of a \"Copy Payee Link\" button in the Stream page. Not sure where it should be placed, nor how it should look.","createdAt":"2019-12-19T10:50:40Z","labels":["feature"],"number":56,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add a \"Copy Payee Link\" button","type":"issue","updatedAt":"2019-12-23T11:56:20Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/56"},{"author":"PaulRBerg","body":"Requested by a user via Crisp:\r\n\r\n\"Hi, quick question: If I have multiple incoming money streams, do I have to withdraw each separately? Or can I do it at once? Thanks\"\r\n\r\nHowever, the payoff for this is small and the effort is high, so it's not worth to do it anytime soon.","createdAt":"2019-12-18T10:29:49Z","labels":["feature"],"number":55,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Withdraw from multiple streams at once","type":"issue","updatedAt":"2019-12-23T14:22:11Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/55"},{"author":"PaulRBerg","body":"Most dapps provide some kind explanation for why users have to submit 2 or more transactions, but we currently don't talk about this at all.\r\n\r\nThe reason we do it is because we first have to approve the ERC20 balance to be spent by our [Sablier Proxy](https://etherscan.io/address/0xbd6a40bb904aea5a49c59050b5395f7484a4203d).","createdAt":"2019-12-18T02:14:15Z","labels":["feature"],"number":54,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Explain why there are two transactions to sign","type":"issue","updatedAt":"2020-02-05T23:30:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/54"},{"author":"PaulRBerg","body":"Here's what we do in [createStreamMachine](https://github.com/sablierbot/sablier-frontend/blob/develop/apps/sender/src/machines/createStreamMachine/index.js):\r\n\r\n```\r\nconst allowance = new BigNumber((await tokenContract.allowance(account, payrollContract.address)).toString());\r\nconst transactionCount = await library.getTransactionCount(account);\r\nconst gasPrices = await fetch(ETHERCHAIN_GAS_PRICE_ORACLE).then(response => response.json());\r\nconst fastGasPrice = typy(gasPrices, \"fast\").safeString;\r\nconst fastGasPriceGwei = new BigNumber(fastGasPrice).multipliedBy(1e9);\r\nconst evenFasterGasPriceGwei = fastGasPriceGwei.plus(2e9).plus(1e6);\r\n```\r\n\r\nWe should do it for withdrawals and cancellations too.","createdAt":"2019-12-18T02:11:45Z","labels":["feature"],"number":53,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Set intelligent gas prices for withdrawals & cancellations","type":"issue","updatedAt":"2020-02-04T19:12:48Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/53"},{"author":"PaulRBerg","body":"Requested by [@tehnlulz](https://twitter.com/tehnlulz):\r\n\r\n<img width=\"526\" alt=\"Capture d’écran 2019-12-18 à 03 06 44\" src=\"https://user-images.githubusercontent.com/8782666/71047221-93895d80-2143-11ea-994c-13c1d2a74199.png\">\r\n","createdAt":"2019-12-18T01:08:37Z","labels":["feature"],"number":52,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add \"months\" to duration picker","type":"issue","updatedAt":"2019-12-23T11:59:53Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/52"},{"author":"PaulRBerg","body":"This would be probably require us to switch to server-side rendering (see [next.js](https://nextjs.org/)), but the feature would be nice to have.\r\n\r\nDeFiDude indirectly requested this on Twitter:\r\n\r\nhttps://twitter.com/DeFiDude/status/1205900471019462657","createdAt":"2019-12-18T01:00:01Z","labels":["feature"],"number":51,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Preview image specific to each stream","type":"issue","updatedAt":"2019-12-23T14:02:33Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/51"},{"author":"razgraf","body":"Apply a smooth transition when going from e.g. Stream UI to the Details/History sub-screen. Re-implementing the panel animation would give the platform a more SPA feel but if that is not preferred, the modal-look of the sub-screens would at least have to be converted to something more stylish. Confirm with @PaulRBerg before starting to work on this.","createdAt":"2019-12-17T20:40:06Z","labels":["feature"],"number":50,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Create smooth transitions between screens and sub-screens","type":"issue","updatedAt":"2020-02-06T10:50:15Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/50"},{"author":"PaulRBerg","body":"The dashboard page looks like crap on mobile, but the real problem is that the \"Stream Money\" button is hidden in top-right corner. Nobody will ever find it there.\r\n\r\n![ezgif com-video-to-gif](https://user-images.githubusercontent.com/8782666/70984998-18cd2d80-20c4-11ea-8b98-fe54f39f03b5.gif)\r\n","createdAt":"2019-12-17T09:55:26Z","labels":["feature"],"number":49,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Make dashboard page responsive","type":"issue","updatedAt":"2019-12-23T14:16:41Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/49"},{"author":"PaulRBerg","body":"To avoid copy-pasting, go read this issue: https://github.com/Uniswap/uniswap-frontend/issues/565.\r\n\r\nWe have the exact same problem because we forked Uniswap's wallet system.","createdAt":"2019-12-16T18:32:57Z","labels":["bug"],"number":48,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Cipher Browser not working","type":"issue","updatedAt":"2019-12-16T19:34:18Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/48"},{"author":"PaulRBerg","body":"Steps:\r\n\r\n1. Go to app.sablier.finance\r\n2. Open a stream\r\n3. Open the withdraw sidebar\r\n4. Type an amount\r\n5. Click the submit box and release outside the sidebar - the sidebar should NOT close\r\n\r\nI mean I know it's a very small thing but we should cater for our users.\r\n\r\nFrom @DeFiDude on Twitter:\r\n\r\n\"The second thing I noticed when I highlighted the 5 to change it but let go of the mouse while it was on the left side of the interface, the pop-out panel closed on me, which would make sense if I was left clicking outside of the panel, but the click was started in the panel and released outside of it, if that makes sense lol\"","createdAt":"2019-12-16T13:36:41Z","labels":["bug"],"number":47,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Do not close the sidebar when releasing the click outside the Submit Box panel","type":"issue","updatedAt":"2020-01-02T16:55:02Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/47"},{"author":"PaulRBerg","body":"If the stream is being streamed, the real-time balance has the proper white background around it. If the stream goes from being created to being streamed, the white background is not added it (due to caching, perhaps).\r\n\r\n<img width=\"1171\" alt=\"Capture d’écran 2019-12-16 à 06 03 13\" src=\"https://user-images.githubusercontent.com/8782666/70878438-1edee380-1fca-11ea-8d10-0e6d960b5eb6.png\">\r\n","createdAt":"2019-12-16T04:06:06Z","labels":["bug"],"number":46,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"No border for stream balance when going from created->streaming","type":"issue","updatedAt":"2020-02-05T20:17:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/46"},{"author":"PaulRBerg","body":"See https://twitter.com/TrustlessState/status/1206359374731436032","createdAt":"2019-12-16T02:08:28Z","labels":["feature"],"number":45,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add button for \"Open in Argent\" or smth smarter","type":"issue","updatedAt":"2020-01-22T02:32:15Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/45"},{"author":"PaulRBerg","body":"This issue with @apollo/react-hooks is **cking annoying.\r\n\r\n[All child Apollo context consumers update unnecessarily every time Provider re-renders](https://github.com/apollographql/react-apollo/issues/3595).\r\n\r\nEspecially for us, a money streaming protocol, a gajillion UI updates is the last thing we want from a third-party library. They really should've read Kent Dodds' [How to optimize your context value](https://kentcdodds.com/blog/how-to-optimize-your-context-value) article.\r\n\r\nBut, not time for complaints. We'll figure this out by forking the library and publishing it under a different name.","createdAt":"2019-12-16T01:38:26Z","labels":["feature"],"number":44,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Fork @apollo/react-hooks to declutter the UI updates","type":"issue","updatedAt":"2022-03-24T15:35:37Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/44"},{"author":"PaulRBerg","body":"We generate the latest stream uri like this:\r\n\r\n1. Submit transaction\r\n2. If the response is successful, close the sidebar\r\n3. Refetch the streams array\r\n4. Get the id of the first stream in the list\r\n\r\nWhen the user has a lot of streams (>20), we start to see noticeable delays in step 3. They may rush to copying the link.\r\n\r\nFind a smarter way that doesn't rely on fetching an article list (a thing we have to do anyway). We probably have to use the `nextStreamId` contract property, even if this may result in racing conditions (we don't even have 100 users, so it's fine).","createdAt":"2019-12-16T01:35:42Z","labels":["bug","enhancement"],"number":43,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Find a smarter way to get the steam uri","type":"issue","updatedAt":"2021-07-29T13:13:45Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/43"},{"author":"PaulRBerg","body":"See pictures. The first one shows the UI glitch, while the second one shows how the UI should normally look like.\r\n\r\n![IMG_6926](https://user-images.githubusercontent.com/8782666/70872668-7c673600-1fb2-11ea-8eff-80dee0ebd10c.PNG)\r\n\r\n![IMG_6927](https://user-images.githubusercontent.com/8782666/70872669-7f622680-1fb2-11ea-8cf6-850624351f52.PNG)","createdAt":"2019-12-16T01:17:26Z","labels":["bug"],"number":42,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"UI glitch on mobile when using the duration picker","type":"issue","updatedAt":"2020-02-06T10:48:50Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/42"},{"author":"PaulRBerg","body":"Steps:\r\n\r\n1. Open sidebar\r\n2. Type an input for the amount and the recipient\r\n3. Submit and then reject the tex\r\n4. Close the sidebar\r\n5. Get this effin' error\r\n\r\n<img width=\"544\" alt=\"Capture d’écran 2019-12-16 à 02 21 08\" src=\"https://user-images.githubusercontent.com/8782666/70871725-bc2a1f80-1faa-11ea-8477-6ef6ac33e03d.png\">\r\n","createdAt":"2019-12-16T00:21:30Z","labels":["bug"],"number":41,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Input values are not cleared when closing the sidebar","type":"issue","updatedAt":"2024-12-21T10:47:45Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/41"},{"author":"PaulRBerg","body":"Steps to reproduce:\r\n\r\n1. Open pay.sablier.finance on MetaMask Mobile\r\n2. Create a stream from an account that has not pre-approved the Sablier contract with max approval\r\n3. Approve the contract\r\n4. Wait for the 2nd transaction, which never shows up!","createdAt":"2019-12-15T23:39:28Z","labels":["bug"],"number":40,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Second transaction is not shown to the user in Metamask Mobile and Frame.sh","type":"issue","updatedAt":"2022-03-24T16:19:11Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/40"},{"author":"PaulRBerg","body":"To avoid copy-pasting, go read this issue: https://github.com/Uniswap/uniswap-frontend/issues/560\r\n\r\nWe have the exact same problem because we forked Uniswap's wallet system.","createdAt":"2019-12-15T23:29:57Z","labels":["bug"],"number":39,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Coinbase wallet cannot be disconnected","type":"issue","updatedAt":"2024-12-21T10:47:44Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/39"},{"author":"PaulRBerg","body":"Throughout the app, we round balances that start with .999 (hint: most stream balances are like this), to make the user interface feel more palatable to the user.\r\n\r\nBut when the user inputs \"8\" in the withdraw sidebar, we parse that as number \"8\" instead of \"7.999\". This is not incorrect, but it's bad UX for users. What we need to do:\r\n\r\n1. Keep parsing the number as \"8\" firstly, check if the balance is sufficient\r\n2. If the balance is not sufficient, reverse-engineer the actual max amount (7.999) but *only* in the background, the user should still see \"8\"\r\n\r\nDeFiDude requested this on Twitter!\r\n\r\n![Enregistrement de l’écran 2019-12-15 à 16 32 50](https://user-images.githubusercontent.com/8782666/70864357-b526f100-1f59-11ea-957f-a16723f716f1.gif)\r\n","createdAt":"2019-12-15T14:41:46Z","labels":["bug"],"number":38,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Buggy input form in the withdrawal page","type":"issue","updatedAt":"2024-12-21T10:47:44Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/38"},{"author":"PaulRBerg","body":"CryptoDad reported this via Twitter DM:\r\n\r\n<img width=\"458\" alt=\"Capture d’écran 2019-12-15 à 16 09 33\" src=\"https://user-images.githubusercontent.com/8782666/70863898-b3f3c500-1f55-11ea-928e-f8afe12278fd.png\">\r\n\r\nWe should have a \"Disconnect\" button in the top-right corner, just like Uniswap has.\r\n\r\n![4a8Bh71K](https://user-images.githubusercontent.com/8782666/70863900-c110b400-1f55-11ea-8e70-8ecb3959a976.png)\r\n\r\n![x7sN9Gd-](https://user-images.githubusercontent.com/8782666/70863903-c3730e00-1f55-11ea-97a1-91e24ea80183.png)\r\n","createdAt":"2019-12-15T14:13:10Z","labels":["bug"],"number":37,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add missing \"Disconnect\" button for Wallet Connect","type":"issue","updatedAt":"2019-12-16T00:30:28Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/37"},{"author":"PaulRBerg","body":"It currently sits still, but it should have some grayed-out colors or smth.\r\n\r\nSimilarly, there isn't a lot of information about the time dimensions of each stream, except for the time label at the bottom.\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2019-12-15 à 07 33 57\" src=\"https://user-images.githubusercontent.com/8782666/70858602-8125de80-1f0d-11ea-8c6f-b4b45f57e3ee.png\">\r\n","createdAt":"2019-12-15T05:36:00Z","labels":["feature"],"number":36,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"We need better UX for the \"Cancelled\" state","type":"issue","updatedAt":"2019-12-27T21:30:46Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/36"},{"author":"PaulRBerg","body":"We currently load a lot of streams in the Dashboard tables:\r\n\r\nhttps://github.com/sablierbot/sablier-frontend/blob/develop/packages/apollo/src/queries/proxyStream.js#L21\r\n\r\nThe reason for this is ... well, #LeanStartup. It was very easy to do and unnecessary at the beginning.\r\n\r\nBut now the app feels really laggy for heavy-load users. Admittedly, the primary cause might be this [issue](https://github.com/apollographql/react-apollo/issues/3595) with Apollo, but we should still consider doing this at some point.\r\n\r\n","createdAt":"2019-12-15T04:20:19Z","labels":["feature"],"number":35,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add pagination to the Dashboard pages","type":"issue","updatedAt":"2019-12-23T14:14:35Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/35"},{"author":"PaulRBerg","body":"All apps (landing, recipient and sender) currently have the same preview image.\r\n\r\nhttp://sablier.finance/preview.png\r\n\r\nWhich is nice and slick, but I would rather use this one for the end-user products (recipient and sender).\r\n\r\n![AppsPreview](https://user-images.githubusercontent.com/8782666/70857275-f7b5e280-1ef3-11ea-925c-ea5618dbcf86.png)","createdAt":"2019-12-15T02:33:07Z","labels":["feature"],"number":34,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Different previews for apps","type":"issue","updatedAt":"2019-12-15T14:33:38Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/34"},{"author":"PaulRBerg","body":"I mean just look at this.\r\n\r\n\r\n[Janky Scrolling](https://imgur.com/a/iaVYXUl).","createdAt":"2019-12-14T19:09:01Z","labels":["feature"],"number":33,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Scrolling over the stream action toolbox looks janky","type":"issue","updatedAt":"2024-12-21T10:47:44Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/33"},{"author":"PaulRBerg","body":"See this tweet from Leo: https://twitter.com/LeoMorozovskii/status/1205567979037040640\r\n\r\n![ELsJrjGWsAAE6J6](https://user-images.githubusercontent.com/8782666/70852211-8bad8d00-1ea7-11ea-8479-744700ca07fd.jpeg)\r\n","createdAt":"2019-12-14T17:26:08Z","labels":["bug"],"number":32,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Sidebars cannot be scrolled up","type":"issue","updatedAt":"2024-12-21T10:47:43Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/32"},{"author":"PaulRBerg","body":"See this screenshot:\r\n\r\n![IMG_6919](https://user-images.githubusercontent.com/8782666/70852190-5b65ee80-1ea7-11ea-8364-fb94bf0ee47c.PNG)\r\n","createdAt":"2019-12-14T17:24:44Z","labels":["bug"],"number":31,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Sidebars shouldn't be scrollable on Trust Wallet","type":"issue","updatedAt":"2019-12-15T02:21:16Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/31"},{"author":"PaulRBerg","body":"See this tweet from Leo: https://twitter.com/LeoMorozovskii/status/1205570000993636359.\r\n\r\nAnd these messages from Luis:\r\n\r\n<img width=\"528\" alt=\"Capture d’écran 2019-12-14 à 16 18 58\" src=\"https://user-images.githubusercontent.com/8782666/70852166-e692b480-1ea6-11ea-9720-933333a33708.png\">\r\n","createdAt":"2019-12-14T17:21:32Z","labels":["bug"],"number":30,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Doesn't work on Opera, Cipher, imToken, MetaMask Mobile","type":"issue","updatedAt":"2019-12-15T02:21:16Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/30"},{"author":"PaulRBerg","body":"Here's a screenshot from viewing [sablier.finance](https://sablier.finance) on Trust Wallet.\r\n\r\n![Landing Page Screenshot](https://user-images.githubusercontent.com/8782666/70850079-03bb8900-1e8f-11ea-9bbe-c4dd23cee732.PNG)\r\n\r\n","createdAt":"2019-12-14T14:31:35Z","labels":["bug"],"number":29,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Tweets are cut off on landing page on mobile","type":"issue","updatedAt":"2019-12-23T21:38:20Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/29"},{"author":"PaulRBerg","body":"See screen capture below. Only happens on Brave, Chrome and Safari were fine.\r\n\r\n[Screen Capture on Imgur](https://imgur.com/a/m6NQTLo).","createdAt":"2019-12-10T19:49:31Z","labels":["bug"],"number":27,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"iPhone frame glitch in landing page","type":"issue","updatedAt":"2019-12-14T01:06:11Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/27"},{"author":"PaulRBerg","body":"Looks verbose at the moment. Some random ideas:\r\n\r\n- Drop the `href` and many other props by adding `...otherProps` to the end of the props deconstruction array  and then filling the other props in the top-most React element\r\n- Create individual React component for each themed button. Name-wise, this conflicts with @sablier/theme, but it would also just be easier to read 4 different buttons than nested css snippets inside other nested css snippets.\r\n- Potentially move it to @sablier/components, with time, if need be to use it in the other apps","createdAt":"2019-11-29T02:32:28Z","labels":["feature"],"number":26,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Enhance the Button component in the landing app","type":"issue","updatedAt":"2020-02-29T02:46:27Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/26"},{"author":"PaulRBerg","body":"As of commit [c318516224859ae91d521268dc3d435c184c7461](https://github.com/sablierbot/sablier-frontend/commit/c318516224859ae91d521268dc3d435c184c7461), there is a lot of duplicated code in a rather simple React app.\r\n\r\n<img width=\"1680\" alt=\"Capture d’écran 2019-11-29 à 04 22 38\" src=\"https://user-images.githubusercontent.com/8782666/69839402-0ea3d600-1260-11ea-8e0b-e6dd7b620e54.png\">\r\n\r\n(Results logged after running [jscpd](https://www.npmjs.com/package/jscpd) with a `--min-tokens` value of 24)\r\n\r\nAs an example, it seems that the `Wrapper` and the `Underlay` components in each Section have a lot of repetitive properties. Possible solutions:\r\n\r\n- Bro: define these components as either themed components or css snippets, either here or in @sablier/theme, depending on how important they are\r\n- Pro: \"Headless\" UI components via Hook (see [react-table](https://github.com/tannerlinsley/react-table/blob/master/docs/api.md))","createdAt":"2019-11-29T02:29:02Z","labels":["feature"],"number":25,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Reduce complexity in the landing app","type":"issue","updatedAt":"2020-01-02T17:00:47Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/25"},{"author":"PaulRBerg","body":"In [Principles of Design](https://www.w3.org/DesignIssues/Principles.html), Tim Berners-Lee argues that:\r\n\r\n> If the features can be broken into relatively loosely bound groups of relatively closely bound features, then that division is a good thing to be made a part of the design.\r\n\r\nLet's purge the slide animations from the codebase by making the `Details` and `History` pages bespoke pages with a back button to return to the home page.\r\n\r\n✅Smaller codebase (via negativa)\r\n✅Smaller chance of failure, since animations are known to be tricky on different devices\r\n✅Unpacking the component soup will make the codebase easier to reason about\r\n","createdAt":"2019-10-07T06:44:29Z","labels":["feature"],"number":18,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Turn the slide animations into bespoke pages","type":"issue","updatedAt":"2019-11-29T02:17:54Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/18"},{"author":"PaulRBerg","body":"In the same note as #12, but more focused on svg tags. I've seen many html blocks defined like this:\r\n\r\n```html\r\n<svg viewBox=\"0 0 100 6\">\r\n```\r\n\r\nMaybe it would be worth it to abstract this svg parts in a React component that takes props (x,y,z, whatever)? I'm not sure. Didn't work with svg much, so I don't know if it is easy to move it around.","createdAt":"2019-10-06T20:28:38Z","labels":["feature"],"number":17,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Consider abstracting svg","type":"issue","updatedAt":"2020-01-10T22:51:03Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/17"},{"author":"PaulRBerg","body":"I'm creating this issue after recently skimming through some articles on react hooks.\r\n\r\nI'm not convinced yet, but this might be one of the best things to happen to React in a long time. Functional programming beats object-oriented programming down to its knees. The way I think about it is that it asks developers to deeply **consider a lot, if not all, possible states and function flows upfront**, thus massively limiting the scope for error.\r\n\r\nHooks can feel a bit overwhelming, but these articles are great:\r\n\r\n1. [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html)\r\n2. [How to fetch data with React Hooks](https://www.robinwieruch.de/react-hooks-fetch-data/)\r\n3. [A complete guide to useEffect](https://overreacted.io/a-complete-guide-to-useeffect/)","createdAt":"2019-10-06T20:23:49Z","labels":["feature"],"number":16,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Long-term goal: switch to React Hooks","type":"issue","updatedAt":"2019-11-29T02:17:34Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/16"},{"author":"PaulRBerg","body":"Let's take a look at the `Icon` component:\r\n\r\n```javascript\r\nconst Icon = (props) => {\r\n  ...\r\n  let iconType = \"material-icons\";\r\n  if (props.round) {\r\n    iconType = \"material-icons-round\";\r\n  } else if (props.outline) {\r\n    iconType = \"material-icons-outlined\";\r\n  }\r\n  \r\n  element = (\r\n    <i style={{ overflow: \"hidden\" }} className={iconType}>\r\n       {props.source}\r\n     </i>\r\n  );\r\n  ...\r\n}\r\n```\r\n\r\nThe [classnames](https://github.com/JedWatson/classnames) library would make the component 2x as shorter and 10x more readable:\r\n\r\n```javascript\r\nconst Icon = (props) => {\r\n  element = (\r\n    <i style={{ overflow: \"hidden\" }} className={classnames(\"material-icons\", {\r\n      \"material-icons-round\": props.round,\r\n      \"material-icons-outlined\": props.outlined\r\n    })}>\r\n       {props.source}\r\n     </i>\r\n  );\r\n}\r\n```\r\n\r\nOf course, that's assuming the more specific classes ending in \"round\" and \"outlined\" are defined after the less specific classes - but this should be the case anyway.","createdAt":"2019-10-06T20:13:23Z","labels":["feature"],"number":15,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Consider using the `classnames` library","type":"issue","updatedAt":"2019-11-29T02:17:24Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/15"},{"author":"PaulRBerg","body":"Admittedly, this requires a fair amount of chore work, but I think it's worth it. We'll have to edit content anyway and sometimes finding strings in a large codebase can be like finding the needle in a haystack.\r\n\r\nA nice corollary is that it will also be easy to add translations, in time. But obviously this is not a concern for the foreseeable future.\r\n\r\nSee the [stale/frontend]() branch in the sablier monorepo. In the former frontend codebase, I had this [i18n.js](https://github.com/sablierhq/sablier/blob/stale/frontend/packages/frontend/src/i18n.js) file that loading translations from \"locales\" in the \"public\" folder. Then, in all components, you had this \"t\" object passed as a prop.","createdAt":"2019-10-06T20:02:28Z","labels":["feature"],"number":14,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Add i18n","type":"issue","updatedAt":"2019-11-29T02:16:23Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/14"},{"author":"PaulRBerg","body":"As per principle 3, a lot of code from `Helper.js` could be replaced with a community-vetted library such as [lodash](https://www.npmjs.com/package/lodash).\r\n\r\nLikewise, for Ethereum-related functions, I'm quite sure we can find alternative implementations in [ethers.js](https://docs.ethers.io/ethers.js/html/api-utils.html).\r\n\r\nPro tip: to quickly understand how a specific function from an external library works, head to [runkit](https://npm.runkit.com/lodash) or spin up your own [replit](https://repl.it).*","createdAt":"2019-10-06T19:57:32Z","labels":["feature"],"number":13,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Consider using community-vetted formatting libraries","type":"issue","updatedAt":"2019-12-14T14:12:36Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/13"},{"author":"PaulRBerg","body":"## Problem\r\nI spent the last few days analysing the project down to its fundamental bits and pieces. One notable code smell is the high number of nested blocks, both in jsx and scss files.\r\n\r\nIt is hard to plunge through all this complexity. While developing the [burner wallet](https://burner.sablier.app), I easily spent 5x more time deciphering the nestedness in our jsx and scss than the burner plugin docs.\r\n\r\n### Jsx\r\nThe tail section of the render function in `ContextCardDetails.js`:\r\n\r\n<img width=\"1291\" alt=\"Screen Shot 2019-10-07 at 04 21 28\" src=\"https://user-images.githubusercontent.com/8782666/66274463-fb0c6c80-e8b9-11e9-9b75-41f3eab5236e.png\">\r\n\r\n\r\n### Scss\r\n\r\nAnd now `ContextCardDetails.scss`:\r\n\r\n<img width=\"1291\" alt=\"Screen Shot 2019-10-07 at 04 25 40\" src=\"https://user-images.githubusercontent.com/8782666/66274548-e11f5980-e8ba-11e9-8a58-de46443eed4b.png\">\r\n\r\n## Possible Solution\r\n\r\nA combination of:\r\n\r\n- Writing more [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) code - for one, I apply DRY after I see some code used at least for a few days and in at least 3 instances\r\n- Move the nested code to their own independent functions or files - see my `renderXyz` function in the [Stream](https://github.com/sablierhq/sablier/blob/stale/frontend/packages/frontend/src/pages/Stream/index.jsx) page in the former frontend codebase\r\n- Make class names longer and more specific. On top of improving readability, they can also force you to write code on multiple lines, which may nudge you to move code around","createdAt":"2019-10-06T19:38:57Z","labels":["feature"],"number":12,"repository":"sablier-labs/legacy-interfaces","state":"closed","title":"Complexity is high, slows down shipping","type":"issue","updatedAt":"2019-11-29T02:17:04Z","url":"https://github.com/sablier-labs/legacy-interfaces/issues/12"},{"author":"PaulRBerg","body":"","createdAt":"2024-01-26T16:00:25Z","labels":["effort: low","priority: 3","type: test","work: clear","stale"],"number":266,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Allow `leafData` length to be 1 in merkle lockup fork tests","type":"issue","updatedAt":"2024-07-29T22:41:50Z","url":"https://github.com/sablier-labs/v2-periphery/issues/266"},{"author":"PaulRBerg","body":"See:\r\n\r\n- https://github.com/alexfertel/bulloak\r\n- https://prberg.com/presentations/solidity-summit-2023","createdAt":"2024-01-23T11:28:59Z","labels":["effort: epic","type: test","priority: 2","work: complicated"],"number":265,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Refactor all tests to use Bulloak","type":"issue","updatedAt":"2024-07-30T22:36:23Z","url":"https://github.com/sablier-labs/v2-periphery/issues/265"},{"author":"smol-ninja","body":"Related to https://github.com/sablier-labs/v2-core/issues/797","createdAt":"2024-01-22T10:15:45Z","labels":["priority: 1","effort: high","type: refactor","work: clear"],"number":263,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename the create functions to match V2 Core","type":"issue","updatedAt":"2024-01-26T12:05:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/263"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-periphery/discussions/255\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** January  4, 2024</sup>\r\nImplementing [LockupTranched](https://github.com/sablier-labs/company-discussions/discussions/19) means that the `MerkleStreamer` contract will not handle just streaming models, but also discrete, delineated ones.\r\n\r\nIn light of that, It makes most sense to rename `MerkleStreamer` to `MerkleLockup`.\r\n\r\nSide note - we've previously discussed this [here](https://github.com/sablier-labs/v2-periphery/discussions/222). But, at the time, we didn't know about LockupTranched.</div>","createdAt":"2024-01-12T10:22:30Z","labels":["priority: 1","effort: medium","type: refactor","work: clear"],"number":261,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename \"MerkleStreamer\" to \"MerkleLockup\"","type":"issue","updatedAt":"2024-02-01T21:39:26Z","url":"https://github.com/sablier-labs/v2-periphery/issues/261"},{"author":"PaulRBerg","body":"Replicate this workflow:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/main/.github/workflows/ci-slither.yml","createdAt":"2024-01-11T15:52:45Z","labels":["effort: medium","type: ci","priority: 3","work: clear"],"number":260,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Integrate Slither for continuous static analysis","type":"issue","updatedAt":"2024-07-31T06:59:23Z","url":"https://github.com/sablier-labs/v2-periphery/issues/260"},{"author":"PaulRBerg","body":"Remove these:\r\n\r\n- [`&& !protocolFee.gt(ud(0))`](https://github.com/sablier-labs/v2-periphery/blob/566deba675107ea88c87848fd9dea7769d4d4411/src/abstracts/SablierV2MerkleStreamer.sol#L101)\r\n- [if (protocolFee.gt(ud(0))) ](https://github.com/sablier-labs/v2-periphery/blob/566deba675107ea88c87848fd9dea7769d4d4411/src/abstracts/SablierV2MerkleStreamer.sol#L144-L146)\r\n\r\nAs per the rationale in https://github.com/sablier-labs/company-discussions/discussions/28.","createdAt":"2024-01-08T15:26:19Z","labels":["priority: 0","effort: medium","type: refactor","work: clear"],"number":256,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Remove fee checks in `MerkleStreamerLL`","type":"issue","updatedAt":"2024-01-10T16:51:56Z","url":"https://github.com/sablier-labs/v2-periphery/issues/256"},{"author":"PaulRBerg","body":"Implementing [LockupTranched](https://github.com/sablier-labs/company-discussions/discussions/19) means that the `MerkleStreamer` contract will not handle just streaming models, but also discrete, delineated ones.\r\n\r\nIn light of that, It makes most sense to rename `MerkleStreamer` to `MerkleLockup`.\r\n\r\nSide note - we've previously discussed this [here](https://github.com/sablier-labs/v2-periphery/discussions/222). But, at the time, we didn't know about LockupTranched.","createdAt":"2024-01-04T15:10:51Z","labels":["priority: 1","effort: medium","type: refactor","work: clear"],"number":252,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename \"MerkleStreamer\" to \"MerkleLockup\"","type":"issue","updatedAt":"2024-01-08T12:02:30Z","url":"https://github.com/sablier-labs/v2-periphery/issues/252"},{"author":"PaulRBerg","body":"We have received this feature request from a potential airstream user.","createdAt":"2023-12-28T12:05:51Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":247,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Support cliffs in MerkleStreamerLL","type":"issue","updatedAt":"2024-01-04T15:12:38Z","url":"https://github.com/sablier-labs/v2-periphery/issues/247"},{"author":"PaulRBerg","body":"PNPM's symbolic links are problematic. We should move away from PNPM. Possible solutions:\r\n\r\n1. Go back to Yarn\r\n2. NPM\r\n3. Explore [Bun](https://github.com/sablier-labs/v2-core/discussions/754)\r\n\r\nRefs:\r\n\r\n- https://twitter.com/PaulRBerg/status/1737169159052468479\r\n- https://github.com/foundry-rs/foundry/issues/3507#issuecomment-1864337892","createdAt":"2023-12-20T10:36:06Z","labels":[],"number":245,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Move away from PNPM","type":"issue","updatedAt":"2024-01-01T15:56:38Z","url":"https://github.com/sablier-labs/v2-periphery/issues/245"},{"author":"PaulRBerg","body":"Related: https://github.com/sablier-labs/v2-core/issues/756","createdAt":"2023-12-19T11:20:37Z","labels":[],"number":243,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Upgrade to Solidity v0.8.23","type":"issue","updatedAt":"2023-12-20T10:23:05Z","url":"https://github.com/sablier-labs/v2-periphery/issues/243"},{"author":"PaulRBerg","body":"Thanks to Solidity v0.8.22, we can say goodbye to the ugly \"unchecked { ++i; }\" syntax when using for loops.\r\n\r\nContext:\r\n\r\n- https://github.com/ethereum/solidity/releases/tag/v0.8.22\r\n- https://twitter.com/PaulRBerg/status/1717148805282296017\r\n","createdAt":"2023-12-19T11:19:32Z","labels":["effort: low","type: perf","priority: 3","work: clear"],"number":242,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Remove \"unchecked\" in for loop incrementors","type":"issue","updatedAt":"2024-01-10T10:53:18Z","url":"https://github.com/sablier-labs/v2-periphery/issues/242"},{"author":"PaulRBerg","body":"Depends upon this issue upstream:\r\n\r\nhttps://github.com/sablier-labs/v2-core/issues/756","createdAt":"2023-12-19T11:09:35Z","labels":[],"number":241,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Bump V2 Core to v1.1.2","type":"issue","updatedAt":"2023-12-20T10:05:36Z","url":"https://github.com/sablier-labs/v2-periphery/issues/241"},{"author":"smol-ninja","body":"[Deploy-multi-chains script](https://github.com/sablier-labs/v2-periphery/blob/554d0f5353288e9143b425452dcf39e6ba7456f7/shell/deploy-multi-chains.sh#L159) generates incorrect  command for deterministic deployment. Reason as mentioned in https://github.com/sablier-labs/v2-core/issues/750#issuecomment-1860622788\r\n\r\nCurrent command:\r\n```bash\r\n~ forge script script/DeployDeterministicPeriphery.s.sol --rpc-url https://sepolia.infura.io/v3/68967a55fb91488684a9c1000f321d7f --sig 'run(string)' '\\'\\''ChainID' 11155111, Version '1.1.0\\'\\''' -vvv --with-gas-price 15000000000\r\n```\r\n\r\nExpected command:\r\n\r\n```bash\r\n~ forge script script/DeployDeterministicPeriphery.s.sol --rpc-url https://sepolia.infura.io/v3/68967a55fb91488684a9c1000f321d7f --sig 'run(string)' 'ChainID 11155111, Version 1.1.0' -vvv --with-gas-price 15000000000\r\n```\r\n","createdAt":"2023-12-18T18:28:27Z","labels":[],"number":239,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Fix CREATE2 salt interpolation in multi-chain deployment script","type":"issue","updatedAt":"2023-12-24T11:23:41Z","url":"https://github.com/sablier-labs/v2-periphery/issues/239"},{"author":"PaulRBerg","body":"Write a deployment script that uses the V2 Core precompiles to deploy the entire Sablier V2 protocol (V2 Core + V2 Periphery).\r\n\r\nThis is possible to do now because the precompiles are part of the [`@sablier/v2-core`](https://www.npmjs.com/package/@sablier/v2-core?activeTab=code) npm package (in the `test/utils` package).\r\n\r\nNote: there is an appearance of misuse by importing production code from `test/utils.` As explained [here](https://github.com/sablier-labs/v2-core/discussions/662), we should consider moving the precompiles - perhaps in `script`, or in `artifacts`, or in `src.\r\n\r\nRelated: https://github.com/sablier-labs/v2-periphery/pull/91#issuecomment-1580391265","createdAt":"2023-12-17T16:39:06Z","labels":["effort: high","priority: 3","type: feature","work: complicated"],"number":238,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Use precompiles to write a protocol deployment script","type":"issue","updatedAt":"2024-03-14T08:37:26Z","url":"https://github.com/sablier-labs/v2-periphery/issues/238"},{"author":"PaulRBerg","body":"We should update the [`CONTRIBUTING`](https://github.com/sablier-labs/v2-periphery/blob/main/CONTRIBUTING.md) guide to explain what GitHub secrets contributors need to have set in order to make the CI pass in their forks.\r\n\r\nJust like https://github.com/sablier-labs/v2-core/issues/715 and https://github.com/sablier-labs/v2-core/pull/740.","createdAt":"2023-12-15T13:30:16Z","labels":[],"number":234,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Document the GitHub secrets required to make the CI work in PRs","type":"issue","updatedAt":"2023-12-15T19:12:35Z","url":"https://github.com/sablier-labs/v2-periphery/issues/234"},{"author":"PaulRBerg","body":"It would be helpful to allow users to specify an optional name when deploying a `MerkleStreamer` contract.\r\n\r\nThe use case is to enable users to personalize their campaigns - what happens if they make one accidental deployment, and then make another deployment? They will see two similar entries in the Airstreams dashboard:\r\n\r\n<img width=\"700\" alt=\"Screenshot 2023-12-14 at 12 46 23 PM\" src=\"https://github.com/sablier-labs/v2-periphery/assets/8782666/c2f4c999-5ef6-431f-811d-9b4db49fbdba\">\r\n\r\nInstead of \"DAI by 0xf31..c634\", it would be clearer to have a bespoke name.\r\n\r\nThe UI can default to passing the contract address as the name.\r\n\r\nCc @andreivladbrg, @razgraf.","createdAt":"2023-12-14T10:42:03Z","labels":["effort: medium","priority: 2","type: feature","work: complicated"],"number":233,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add a \"name\" constructor parameter in the MerkleStreamer contract","type":"issue","updatedAt":"2024-08-26T17:14:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/233"},{"author":"PaulRBerg","body":"We currently only have a `LockupLinear` flavor of `MerkleStreamer`.\r\n\r\nThe task is to implement a `LockupDynamic` flavor.\r\n\r\nJust received user validation for it.","createdAt":"2023-12-13T07:39:50Z","labels":["priority: 1","effort: epic","type: feature","work: complicated"],"number":232,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Implement MerkleStreamer for LockupDynamic","type":"issue","updatedAt":"2024-01-11T17:34:42Z","url":"https://github.com/sablier-labs/v2-periphery/issues/232"},{"author":"PaulRBerg","body":"The PR that implements this issue should target the `2.2` branch because the proxy targets are already audited and we should keep them in version control just in case we need to deploy them.\r\n\r\n- [x] Remove all proxy targets\r\n- [x] Remove all scripts associated with proxy targets\r\n- [x] Remove all tests associated with proxy targets","createdAt":"2023-11-26T15:37:51Z","labels":[],"number":224,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Nuke the proxy targets","type":"issue","updatedAt":"2023-12-15T23:06:07Z","url":"https://github.com/sablier-labs/v2-periphery/issues/224"},{"author":"PaulRBerg","body":"Reminder to review the NatSpec docs before releasing.","createdAt":"2023-11-26T15:13:23Z","labels":["effort: low","priority: 3","type: docs","work: clear"],"number":223,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Review latest NatSpec comments","type":"issue","updatedAt":"2024-04-11T14:57:31Z","url":"https://github.com/sablier-labs/v2-periphery/issues/223"},{"author":"PaulRBerg","body":"See the context in https://github.com/sablier-labs/v2-periphery/discussions/179.\r\n\r\nThe task is to implement a variant of `withdrawMultiple` that:\r\n\r\n1. Takes no `to` parameter\r\n2. Queries the `recipient` for each stream id, and pass that as `to`","createdAt":"2023-10-25T07:49:04Z","labels":[],"number":215,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write a variant of \"withdrawMultiple\" dedicated to senders","type":"issue","updatedAt":"2023-11-26T16:01:01Z","url":"https://github.com/sablier-labs/v2-periphery/issues/215"},{"author":"PaulRBerg","body":"Remove \"ProxyPlugin\" and \"Archive\".\r\n\r\nConsequence of https://github.com/sablier-labs/v2-core/pull/710.","createdAt":"2023-10-18T11:16:20Z","labels":[],"number":212,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Remove \"ProxyPlugin\" and \"Archive\"","type":"issue","updatedAt":"2023-10-19T11:16:48Z","url":"https://github.com/sablier-labs/v2-periphery/issues/212"},{"author":"PaulRBerg","body":"Just like https://github.com/sablier-labs/v2-core/issues/702 and https://github.com/sablier-labs/v2-core/pull/703.\r\n\r\nThis should be implemented on a new `2.2` branch.","createdAt":"2023-10-14T13:20:33Z","labels":["effort: high","priority: 2","type: build","work: complicated"],"number":211,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Upgrade to OpenZeppelin v5","type":"issue","updatedAt":"2024-03-04T10:29:11Z","url":"https://github.com/sablier-labs/v2-periphery/issues/211"},{"author":"PaulRBerg","body":"The [`Base_Test`](https://github.com/sablier-labs/v2-periphery/blob/db29e2034a99a2ffc665fcb14b2bfe516ffe51a4/test/Base.t.sol) contract is clogged up; it's got 569 lines of code at the time of posting this issue.\r\n\r\nIt might be worth exploring the possibility of moving some of the utils in a separate abstract contract, similar to [how we did in V2 Core](https://github.com/sablier-labs/v2-core/blob/8ca98d3ffad2dd75e0a705ffc0cd5e798acc8058/test/utils/Utils.sol).","createdAt":"2023-10-12T09:59:37Z","labels":[],"number":208,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Find a way to reduce the number of lines of code in the \"Base_Test\" contract","type":"issue","updatedAt":"2023-10-18T16:10:20Z","url":"https://github.com/sablier-labs/v2-periphery/issues/208"},{"author":"andreivladbrg","body":"We are currently testing the `MerklerStreamer` contract using a tree whose hashed data leaves are not in ascending order: \r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/db29e2034a99a2ffc665fcb14b2bfe516ffe51a4/test/utils/Defaults.sol#L73-L79\r\n\r\nThis isn’t ideal for our purposes. In a production environment, the Merkle tree will contain data leaves that are sorted in ascending order.\r\n\r\nI suggest we implement an algorithm for quick sorting an array of `bytes32`","createdAt":"2023-10-09T14:12:09Z","labels":[],"number":205,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Use Sorted Data Leaves in `MerklerStreamer` tests","type":"issue","updatedAt":"2023-10-14T10:12:45Z","url":"https://github.com/sablier-labs/v2-periphery/issues/205"},{"author":"razgraf","body":"In the MerkleStreamer campaign contract we use the following algorithm to construct our leaf:\r\n\r\n1. we tightly encode three values (index, address, amount)\r\n2. we create a keccak hash over them\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/4b27ec08637514719b21a7780832bfd0d41b1c84/src/SablierV2MerkleStreamerLL.sol#L78\r\n\r\nThis is consistent with Uniswap's [approach](https://github.com/Uniswap/merkle-distributor/blob/25a79e8ec8c22076a735b1a675b961c8184e7931/contracts/MerkleDistributor.sol#L47), which unfortunately does not look like standard OpenZeppelin as far as leaf construction goes. \r\n\r\nAs we had to replicate this algorithm outside of the contract (Javascript and Rust) we've bumped into some issues related to this choice:\r\n1. `abi.encodePacked` is [harder](https://github.com/ethers-io/ethers.js/issues/718) (and less safe) to reproduce than `abi.encode`\r\n2. the usage of a single keccak seems to go against security practices such as the ones against [second preimage attacks](https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/)\r\n3. all OpenZeppelin utilities, including the [JS library](https://github.com/OpenZeppelin/merkle-tree/#validating-a-proof-in-solidity) and the [Rust crate](https://lib.rs/crates/merkle-tree-rs) use `encode` and 2x `keccak` which makes compatibility not only a good argument for us but for external integrators as well \r\n\r\n---\r\n\r\n@andreivladbrg @gavriliumircea and I are currently testing a version of our Merkle Streamer periphery with the following structure for generating leafs:\r\n```solidity\r\nbytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(index, recipient, amount))));\r\n```\r\n\r\nIf successful, we propose swapping this algorithm in the `main` branch, inside the `claim` method.","createdAt":"2023-10-06T13:43:19Z","labels":[],"number":204,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Adapt leaf hashing algorithm for MerkleStreamer","type":"issue","updatedAt":"2023-10-12T12:49:56Z","url":"https://github.com/sablier-labs/v2-periphery/issues/204"},{"author":"PaulRBerg","body":"As per @razgraf's feedback provided on Slack, this event is missing the Merkle root:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/c970d08c746545d3bff000834b5e897f2fac8a14/src/interfaces/ISablierV2MerkleStreamerFactory.sol#L19C1-L31","createdAt":"2023-10-05T18:48:12Z","labels":[],"number":201,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add Merkle root in \"CreateMerkleStreamerLL\" event","type":"issue","updatedAt":"2023-10-06T14:47:35Z","url":"https://github.com/sablier-labs/v2-periphery/issues/201"},{"author":"PaulRBerg","body":"Immutable variables are constant at runtime, so they should be named like constants in `UPPERCASE_SNAKE_CASE`.\r\n\r\nSolhint has a rule for this, which is currently disabled in our Solhint config file. Activating it finds several occurrences:\r\n\r\nhttps://app.warp.dev/block/SeqReMKq5UCYkpi0rjOZuO\r\n\r\nWe should refactor and then activate the rule (by removing [this line](https://github.com/sablier-labs/v2-periphery/blob/c1acdfe9dd63e903a639de04727b64ffacd7da22/.solhint.json#L12) from the Solhint config).","createdAt":"2023-10-02T08:43:44Z","labels":[],"number":199,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Capitalize immutable variables","type":"issue","updatedAt":"2023-10-02T14:08:58Z","url":"https://github.com/sablier-labs/v2-periphery/issues/199"},{"author":"PaulRBerg","body":"Uniswap has finally merged my PR:\r\n\r\nhttps://github.com/Uniswap/permit2/pull/231\r\n\r\nThis means we can now install Permit2 from their GitHub repository.","createdAt":"2023-10-02T08:04:11Z","labels":[],"number":197,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Install Permit2 from Uniswap","type":"issue","updatedAt":"2023-10-02T10:16:36Z","url":"https://github.com/sablier-labs/v2-periphery/issues/197"},{"author":"PaulRBerg","body":"Context: https://github.com/alexfertel/bulloak/discussions/7#discussioncomment-7132221","createdAt":"2023-09-28T11:02:16Z","labels":[],"number":196,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Fix logical inconsistency in \"claim\" tests","type":"issue","updatedAt":"2023-12-08T10:33:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/196"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-periphery/pull/191","createdAt":"2023-09-28T10:16:58Z","labels":[],"number":193,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update the core contracts addresses in fork tests once deployed","type":"issue","updatedAt":"2023-12-20T10:05:36Z","url":"https://github.com/sablier-labs/v2-periphery/issues/193"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-periphery/pull/191","createdAt":"2023-09-28T10:16:08Z","labels":[],"number":192,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update `v2-core` package once released on npm","type":"issue","updatedAt":"2023-12-20T10:22:48Z","url":"https://github.com/sablier-labs/v2-periphery/issues/192"},{"author":"PaulRBerg","body":"The type returned by `getMerkleStreamers` should be `ISablierV2MerkleStreamer ` instead of `ISablierV2MerkleStreamer LL`:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/f8a14edb11cac2e0467f543d0a706dcc7d0010f6/src/SablierV2MerkleStreamerFactory.sol#L26-L34\r\n\r\n","createdAt":"2023-09-11T08:55:50Z","labels":[],"number":185,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Incorrect type returned by \"getMerkleStreamers\"","type":"issue","updatedAt":"2023-09-22T06:38:37Z","url":"https://github.com/sablier-labs/v2-periphery/issues/185"},{"author":"PaulRBerg","body":"Reimplement https://github.com/sablier-labs/v2-core/pull/681 in this repository.","createdAt":"2023-09-05T18:02:40Z","labels":[],"number":180,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Cache testing contracts in CI","type":"issue","updatedAt":"2023-09-07T10:08:08Z","url":"https://github.com/sablier-labs/v2-periphery/issues/180"},{"author":"PaulRBerg","body":"The [airstreams](https://github.com/sablier-labs/v2-periphery/pull/174) are a prime candidate for [differential testing](https://book.getfoundry.sh/forge/differential-ffi-testing?highlight=merkle#example-differential-testing-merkle-tree-implementations).\r\n\r\nThe idea is to check that the Merkle proofs generated by an off-chain library such as the [one written by OpenZeppelin](https://github.com/OpenZeppelin/merkle-tree#validating-a-proof-in-solidity) is compatible with our on-chain implementation.","createdAt":"2023-08-29T13:06:47Z","labels":[],"number":175,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write differential tests for airstreams","type":"issue","updatedAt":"2023-09-05T17:59:32Z","url":"https://github.com/sablier-labs/v2-periphery/issues/175"},{"author":"PaulRBerg","body":"The idea is:\r\n\r\n1. Have the user make a standard transfer to the proxy\r\n2. Call the updated proxy target\r\n3. Expect that the proxy has sufficient tokens to cover the `totalAmount`, otherwise, let the ERC-20 contract revert the transaction due to insufficient funding.\r\n\r\nDoing so would have two benefits:\r\n\r\n1. It would let us abstract away the proxy deployment by calling `deployAndExecuteInstallPlugin` in the Sablier UI (because with a push-based model, there is no need to call `_getOwner()`)\r\n2. It would mitigate the ERC-20 allowance issues reported by @tibbarytsur in https://github.com/cantinasec/review-pr-sablier/issues/1","createdAt":"2023-08-24T13:47:45Z","labels":[],"number":172,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Move to a push-based model in the standard ERC20 proxy target","type":"issue","updatedAt":"2023-08-25T11:58:38Z","url":"https://github.com/sablier-labs/v2-periphery/issues/172"},{"author":"PaulRBerg","body":"- [x] Abstract `SablierV2AirstreamCampaign`\r\n- [x] `SablierV2AirstreamCampaignFactory`\r\n- [x] `SablierV2AirstreamCampaignLL` (Lockup Linear)\r\n- [x] Tests","createdAt":"2023-08-23T07:49:25Z","labels":[],"number":169,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Airstreams","type":"issue","updatedAt":"2023-08-31T14:53:06Z","url":"https://github.com/sablier-labs/v2-periphery/issues/169"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAs discussed [here](https://github.com/sablier-labs/v2-interfaces/discussions/380#discussioncomment-6768799), it is not possible to abstract away the proxy deployment in the UI because the proxy owner is an immutable variable in PRBProxy:\r\n\r\nhttps://github.com/PaulRBerg/prb-proxy/blob/84ae9671d64023c0c21316392e11e33a2eaa2511/src/PRBProxy.sol#L27\r\n\r\nImmutable variables don't exist during construction, so any attempt to read the owner when using `deployAndExecute` will revert.\r\n\r\n## Solution\r\n\r\nImplement a contract that can batch-create streams without relying on the proxy.","createdAt":"2023-08-22T08:45:32Z","labels":[],"number":168,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Contract for batch creating streams without proxy","type":"issue","updatedAt":"2023-09-11T08:13:33Z","url":"https://github.com/sablier-labs/v2-periphery/issues/168"},{"author":"PaulRBerg","body":"References:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/621\r\n- https://github.com/sablier-labs/v2-core/discussions/647\r\n- https://github.com/sablier-labs/v2-core/pull/642","createdAt":"2023-08-21T09:57:39Z","labels":[],"number":167,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update branching trees to use \"given\" keyword","type":"issue","updatedAt":"2023-09-04T13:12:15Z","url":"https://github.com/sablier-labs/v2-periphery/issues/167"},{"author":"PaulRBerg","body":"Install the latest `@sablier/v2-core`, and then update the import paths to use `src/`.\r\n\r\nRefs:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/646\r\n- https://github.com/sablier-labs/v2-core/pull/648","createdAt":"2023-08-14T08:17:48Z","labels":[],"number":163,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Update \"@prb/proxy\" and \"@sablier/v2-core\" import paths to use \"src\"","type":"issue","updatedAt":"2023-08-21T09:56:33Z","url":"https://github.com/sablier-labs/v2-periphery/issues/163"},{"author":"PaulRBerg","body":"The nested mappings here are overkill:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/eb65a2862bd75fd856723d8293b0c8018352f88d/src/SablierV2AirstreamFactory.sol#L23-L41\r\n\r\n- It's bad UX to have to provide so many inputs to query a user's campaigns\r\n- There's no benefit in splitting the campaigns by type, i.e., `LockupLinear` and `LockupDynamic`. Users are interested in all of their airstream campaigns; the payment type is a low-level detail.\r\n- There's no point in storing the campaign details (expiration, Merkle tree) in the factory. What @razgraf suggested on the call was to emit these data in an event, not store them.\r\n- Should there be a need to obtain the campaign's details (expiration, Merkle tree) those can be queried from the subgraph or the `Airstream` contract itself.\r\n- Should there be a need for advanced filtering, the subgraph can help with that.\r\n\r\nGiven the feedback above, the solution is to rewrite the mappings like this:\r\n\r\n```solidity\r\nmapping(address user => ISablierV2Airstream[] contracts) internal _airstreams;\r\n```\r\n\r\nLet's please use `internal` over `private`. It would make testing easier.\r\n\r\nFurther corollaries:\r\n\r\n- There's no point in blocking users from creating similar campaigns, i.e., we can remove the `CampaignAlreadyDeployed` error and the associated checks in the `createAirstream` functions. The same Merkle tree can be used for multiple airdrops.\r\n- We can remove the `getAirstreamLockupDynamic` and `getAirstreamLockupLinear` getters, and replace them with a new getter `getAirstreams`, which returns all of the user's airstream campaigns.","createdAt":"2023-08-12T13:26:31Z","labels":[],"number":162,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Simplify mappings in airstream factory","type":"issue","updatedAt":"2023-08-21T12:24:34Z","url":"https://github.com/sablier-labs/v2-periphery/issues/162"},{"author":"gavriliumircea","body":"In the current form we can suport the withdraw action for both the sender and the recipient, but the withdrawMultiple functionality can be implemented just for recipients. If we add withdrawMultiple in the target we can implement withdrawMultiple for senders as well.","createdAt":"2023-08-02T09:20:14Z","labels":[],"number":159,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Support Withdraw Multiple at target level","type":"issue","updatedAt":"2023-08-02T18:11:06Z","url":"https://github.com/sablier-labs/v2-periphery/issues/159"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOne of the biggest pain points of using Permit2 with Safe is that [all signatories need to sign the permit in a round-robin process](https://twitter.com/PaulRBerg/status/1686395627372949505).\r\n\r\nWe had a call with Utopia today to discuss a potential integration, and they said that this is one of the biggest issues with our current periphery setup.\r\n\r\n## Solution\r\n\r\n[Allow the periphery to be used via standard ERC-20 approvals](https://twitter.com/PaulRBerg/status/1686458086528008211).\r\n\r\n## Proposal\r\n\r\nWe either:\r\n\r\n1. Extend the current `ProxyTarget` to accept standard ERC-20 approvals\r\n2. Turn the current `ProxyTarget` into an abstract with shared logic, and build two other `ProxyTargetPermit2` and `ProxyTargetERC20` to implement the Permit2 and ERC-20 variants.","createdAt":"2023-08-01T20:10:40Z","labels":[],"number":158,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Accept standard ERC-20 approvals in \"ProxyTarget\"","type":"issue","updatedAt":"2023-08-11T20:29:18Z","url":"https://github.com/sablier-labs/v2-periphery/issues/158"},{"author":"PaulRBerg","body":"Find a way to re-use GitHub workflows between this repository (V2 Periphery) and other similar repositories such as V2 Core.\r\n\r\nFor example, we could write a reusable workflow for the `lint` and the `build` jobs.","createdAt":"2023-07-24T17:25:47Z","labels":["effort: high","type: perf","priority: 3","work: complex"],"number":152,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Reuse GitHub workflows across repositories","type":"issue","updatedAt":"2024-01-12T18:52:36Z","url":"https://github.com/sablier-labs/v2-periphery/issues/152"},{"author":"PaulRBerg","body":"Context:\r\n\r\n- #143\r\n- https://github.com/solhint-community/solhint-community/pull/25","createdAt":"2023-07-15T16:30:59Z","labels":["good first issue","effort: low","priority: 3","type: style","work: clear"],"number":150,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Apply \"named-parameters-function\" Solhint rule","type":"issue","updatedAt":"2024-07-31T10:00:45Z","url":"https://github.com/sablier-labs/v2-periphery/issues/150"},{"author":"PaulRBerg","body":"Which contains the fix for https://github.com/sablier-labs/v2-core/issues/616","createdAt":"2023-07-13T13:49:00Z","labels":[],"number":148,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Upgrade to v2-core@v1.0.1 and ship v1.0.2","type":"issue","updatedAt":"2023-07-13T15:25:30Z","url":"https://github.com/sablier-labs/v2-periphery/issues/148"},{"author":"PaulRBerg","body":"The [GitHub Wiki](https://github.com/sablier-labs/v2-core/wiki) has gotten outdated.\r\n\r\nNote: let's do this post-package-tethering.","createdAt":"2024-09-13T15:11:22Z","labels":["type: docs","work: clear","priority: 3","effort: medium"],"number":1041,"repository":"sablier-labs/lockup","state":"closed","title":"Update wikis","type":"issue","updatedAt":"2025-02-11T12:40:18Z","url":"https://github.com/sablier-labs/lockup/issues/1041"},{"author":"PaulRBerg","body":"Due to our plans to introduce [Sablier Pro](https://github.com/sablier-labs/company-discussions/discussions/71), it would be helpful to implement a mechanism to override the default fee that gets set as immutable in the `MerkleLockup` campaign.\r\n\r\nSpec:\r\n\r\n- [x] Implement `feesByUser` mapping that maps `address` types to `uint256` types\r\n- [x] Implement `isUserSet` mapping that maps `address` types to `bool` types\r\n- [x] Allow the admin to set a special fee for some users\r\n- [x] Implement a mechanism that looks up the mappings to check if the user has a special fee and if yes, use that as the campaign fee instead of the default fee\r\n\r\nNote: the 'user' in this context refers to the campaign creator. You are welcome to find a better name.\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/1032\r\n- https://github.com/sablier-labs/v2-core/discussions/1039","createdAt":"2024-09-10T16:06:06Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":1040,"repository":"sablier-labs/lockup","state":"closed","title":"Override default fee in Airstreams with two mappings","type":"issue","updatedAt":"2024-10-24T21:04:41Z","url":"https://github.com/sablier-labs/lockup/issues/1040"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-core/discussions/506","createdAt":"2024-09-04T21:47:05Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1036,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `test` dir to `tests` (plural)","type":"issue","updatedAt":"2024-11-26T14:22:47Z","url":"https://github.com/sablier-labs/lockup/issues/1036"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\nMake it possible to charge protocol fees at withdrawal time. See https://github.com/sablier-labs/company-discussions/discussions/72.\r\n\r\nThere are two big advantages for charging fees at withdrawal time compared to deposit:\r\n\r\n- Incentivizes us to pursue more integrations for Lockup\r\n- Solves the nasty issues associated with airstreams campaign\r\n\r\n## Spec\r\n\r\nNote: this is similar to the historical functionality that used to be available in v1.1.0 and below, however, for simplicity purposes, this newer spec does not include a Comptroller.\r\n\r\n- [ ] Add `getProtocolFee` getter\r\n- [ ] Add `_protocolFees` mapping\r\n- [ ] Add `setProtocolFee` setter gated by admin function\r\n- [ ] When the protocol fee is not zero, charge a fee from the withdrawn amount","createdAt":"2024-09-04T12:23:27Z","labels":["type: feature","effort: epic","priority: 1","work: complicated"],"number":1034,"repository":"sablier-labs/lockup","state":"closed","title":"Add protocol fees in the withdraw function","type":"issue","updatedAt":"2024-11-06T16:29:47Z","url":"https://github.com/sablier-labs/lockup/issues/1034"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\nMake it possible to charge broker fees at withdrawal time. See https://github.com/sablier-labs/company-discussions/discussions/72.\r\n\r\nA nice benefit of this feature is that it also makes it easier to offer automated withdrawals. The relayer can insert its own broker address and a non-zero fee when performing the automated withdrawal.\r\n\r\n## Spec\r\n\r\n- [ ] Add `broker` parameter in all `withdraw` functions\r\n- [ ] Charge a fee from the withdrawn amount","createdAt":"2024-09-04T12:14:36Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":1033,"repository":"sablier-labs/lockup","state":"closed","title":"Add broker parameter to the withdraw function","type":"issue","updatedAt":"2024-09-05T11:44:33Z","url":"https://github.com/sablier-labs/lockup/issues/1033"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\nMonetize Airstreams. See https://github.com/sablier-labs/company-discussions/discussions/72.\r\n\r\nI have considered alternative designs whereby the fee is relayed to a Sablier pot, but the added gas cost does not seem worth it. The gas cost paid by users may be higher than the fee itself. Instead of making N transfers, we can just retroactively 'sweep up' the fees from the campaigns that have generated significant amounts.\r\n \r\n## Spec\r\n\r\n- [x] Modify the `claim` function\r\n  - [x] Add the `payable` modifier\r\n  - [x] Check that `msg.value` is at least `sablierFee`\r\n- [x] Introduce a new variable `sablierFee` of type `uint256` and a setter `setSablierFee` that is admin-gated\r\n- [x] Implement a `withdrawFees` function (check out [this example](https://www.contractreader.io/contract/mainnet/0xf310aC7d07B6d13885267170FB8Cf49a196056dF#genesisclaim-1-8-269))","createdAt":"2024-09-04T12:14:06Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":1032,"repository":"sablier-labs/lockup","state":"closed","title":"Modify \"claim\" function in MerkleLockup to charge an ETH fee","type":"issue","updatedAt":"2024-10-24T21:04:15Z","url":"https://github.com/sablier-labs/lockup/issues/1032"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/62#discussioncomment-10509265.\r\n\r\n@smol-ninja's idea:\r\n\r\n```solidity\r\nfunction _mintwithVesting(address account, uint256 value, params) internal {\r\n    _mint(address(this), value);\r\n    _approve(LOCKUP_LINEAR, value);\r\n    // few parameters will be hard coded\r\n    LOCKUP_LINEAR.createWithDurations(params);\r\n}\r\n```","createdAt":"2024-09-02T14:15:11Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":1031,"repository":"sablier-labs/lockup","state":"closed","title":"Create a Sablier-powered ERC-20 contract","type":"issue","updatedAt":"2025-02-18T15:41:16Z","url":"https://github.com/sablier-labs/lockup/issues/1031"},{"author":"andreivladbrg","body":"After reviewing the PR #1022, I realized how many modifiers are declared multiple times.\r\n\r\nFor example, the `givenNotNull` modifier is declared 23 times in different files: https://app.warp.dev/block/6GAXDA0EH90tdp6jocyZ20\r\n\r\nIMO this is _very_ redundant, so I suggest adding a common `Modifiers` contract in the `shared` dir that can be inherited in `Integration_Test`.\r\n\r\nAlso, aside from being redundant, this also makes refactoring and making changes to tests more difficult, resulting in higher maintenance costs.\r\n\r\nwdyt @sablier-labs/solidity  ?","createdAt":"2024-08-28T12:15:25Z","labels":["effort: epic","work: complex","priority: 2","type: test"],"number":1028,"repository":"sablier-labs/lockup","state":"closed","title":"Add a Shared `Modifiers` Contract","type":"issue","updatedAt":"2024-11-01T12:55:30Z","url":"https://github.com/sablier-labs/lockup/issues/1028"},{"author":"PaulRBerg","body":"As we perform deployments to more and more EVM chains, it's becoming clear to me that we will need to maintain parallel branches, e.g. for zkSync (due to zkEVM) and IoTeX (due to them not supporting Solidity v0.8.26).\r\n\r\nWe should name the branches in a standardized way so that we can see the chains at a glance.\r\n\r\n- [x] Rename `blast-l2` to `chain/blast`\r\n- [x] Rename `zkSync-l2` to `chain/zkSync`","createdAt":"2024-08-23T11:33:33Z","labels":["type: refactor","priority: 1","effort: low","work: clear"],"number":1023,"repository":"sablier-labs/lockup","state":"closed","title":"Standard naming for custom chain branches","type":"issue","updatedAt":"2024-08-23T12:00:34Z","url":"https://github.com/sablier-labs/lockup/issues/1023"},{"author":"andreivladbrg","body":"Include periphery [blast contracts](https://github.com/sablier-labs/v2-periphery/tree/blast-l2/) in `staging-blast`\r\n\r\nCreated an issue to track this, as it will likely take more time than expected.","createdAt":"2024-08-19T07:11:36Z","labels":["type: refactor","work: clear","priority: 3","effort: medium"],"number":1020,"repository":"sablier-labs/lockup","state":"closed","title":"Update blast staging branch","type":"issue","updatedAt":"2024-12-02T13:40:39Z","url":"https://github.com/sablier-labs/lockup/issues/1020"},{"author":"SeungjinPark2","body":"In `IAdminable.sol` file, transferAdmin has `external` function visibility.\r\nHowever, it can be seen that the function has `public` in implementation code in `Adminable.sol` file.\r\nI might think this is not intended and `external` is more desirable.","createdAt":"2024-08-12T04:43:54Z","labels":[],"number":1012,"repository":"sablier-labs/lockup","state":"closed","title":"transferAdmin function has different function visibility from interface","type":"issue","updatedAt":"2024-08-12T07:55:06Z","url":"https://github.com/sablier-labs/lockup/issues/1012"},{"author":"smol-ninja","body":"<sup>Originally proposed by @andreivladbrg: https://github.com/sablier-labs/v2-core/pull/999#pullrequestreview-2215170008</sup>\r\n\r\n### Problem\r\n\r\nEach Merkle contract implements its own `claim` function. However, given the similarities between these implementations, it would be a good idea to DRY'ify it by moving it to the parent contract.\r\n\r\n### Solution\r\n\r\n- Remove the return value from the `claim()` function.  Integrators can use `nextStreamId()` to achieve the same result.\r\n- Implement a `claim` function in the `MerkleBase` contract.\r\n- Define an internal virtual `_claim` function in the `MerkleBase` contract and override it in child contracts. In the case of `MerkleInstant`, it will transfer the asset, in the case of `MerkleLL` and `MerkleLT`, it will create the stream.\r\n- Include `Claim` event in `_claim` function\r\n\r\n### Cons\r\n\r\n- No return value.\r\n\r\n### Pros\r\n\r\n- Cleaner version\r\n\r\n- [x] Move `claim` tests in the shared folder.","createdAt":"2024-08-08T09:30:27Z","labels":["type: refactor","priority: 1","work: clear","effort: medium"],"number":1010,"repository":"sablier-labs/lockup","state":"closed","title":"DRY'ify the `claim` function in Merkle campaigns","type":"issue","updatedAt":"2024-08-14T14:10:40Z","url":"https://github.com/sablier-labs/lockup/issues/1010"},{"author":"smol-ninja","body":"There is no check if the sender is a zero address.\r\n\r\nAnybody can accidentally set sender as zero address when creating the streams. Now because other functions such as cancel, renounce etc. are sender only, the stream creator would not be able to use them.\r\n\r\nThus, the task is to add zero address check for sender.\r\n\r\n### References\r\n- https://github.com/sablier-labs/flow/issues/198\r\n- https://github.com/sablier-labs/v2-core/discussions/38#discussioncomment-10210887","createdAt":"2024-08-01T11:32:45Z","labels":["type: refactor","priority: 1","work: clear","effort: medium"],"number":1008,"repository":"sablier-labs/lockup","state":"closed","title":"Add zero address check for sender","type":"issue","updatedAt":"2024-08-19T14:05:50Z","url":"https://github.com/sablier-labs/lockup/issues/1008"},{"author":"andreivladbrg","body":"As mentioned in [slack](https://sablier.slack.com/archives/CSSNL10Q3/p1722349322054449), deploy to all EVM chains that Fjord are using.","createdAt":"2024-07-31T09:30:15Z","labels":["type: build","priority: 1","effort: low","work: clear"],"number":1003,"repository":"sablier-labs/lockup","state":"closed","title":"Add more endpoints in `foundry.toml`","type":"issue","updatedAt":"2024-08-02T08:59:13Z","url":"https://github.com/sablier-labs/lockup/issues/1003"},{"author":"PaulRBerg","body":"To align the NatSpec with the terminology used in our PR and documentation site, we should refactor all references to 'assets' to say 'tokens' instead.","createdAt":"2024-07-27T12:01:32Z","labels":["type: docs","effort: low","work: clear","priority: 3"],"number":991,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor asset terminology to tokens","type":"issue","updatedAt":"2024-11-26T16:53:48Z","url":"https://github.com/sablier-labs/lockup/issues/991"},{"author":"andreivladbrg","body":"We have implemented our own [methodology to benchmark](https://github.com/sablier-labs/v2-core/tree/main/benchmark) the relevant functions, so can remove the `gas_reports` field in `foundry.toml`\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/992638415445b0e93d0bb347c8ed1fd0872c9104/foundry.toml#L11-L16","createdAt":"2024-07-25T15:38:10Z","labels":["type: build","priority: 2","effort: low","work: clear"],"number":987,"repository":"sablier-labs/lockup","state":"closed","title":"Remove no longer needed gas `gas_reports` field in `foundry.toml`","type":"issue","updatedAt":"2024-08-02T14:21:18Z","url":"https://github.com/sablier-labs/lockup/issues/987"},{"author":"smol-ninja","body":"<sup> Refer to discussion https://github.com/sablier-labs/v2-periphery/discussions/369 for historical context.</sup>\r\n\r\n### Lockup Linear\r\n\r\nAllow end time to be in the past by removing [`if (blockTimestamp >= timestamps.end)` check](https://github.com/sablier-labs/v2-core/blob/main/src/libraries/Helpers.sol#L175-L179).\r\n\r\n### Lockup Dynamic\r\n\r\nAllow the timestamp of the last segment to be in the past by removing [`if (blockTimestamp >= currentSegmentTimestamp)` check](https://github.com/sablier-labs/v2-core/blob/main/src/libraries/Helpers.sol#L271-L274).\r\n\r\n### Lockup Tranched\r\n\r\nAllow the timestamp of the last tranche to be in the past by removing [`if (blockTimestamp >= currentTrancheTimestamp)` check](https://github.com/sablier-labs/v2-core/blob/main/src/libraries/Helpers.sol#L334-L337).","createdAt":"2024-07-24T21:56:56Z","labels":["type: feature","priority: 1","work: clear","effort: medium"],"number":982,"repository":"sablier-labs/lockup","state":"closed","title":"Allow end time of lockup streams to be in the past","type":"issue","updatedAt":"2024-08-14T17:11:33Z","url":"https://github.com/sablier-labs/lockup/issues/982"},{"author":"smol-ninja","body":"<sup> Refer to discussion https://github.com/sablier-labs/v2-core/discussions/997 for historical context.</sup>\r\n\r\n## Tasks\r\n\r\n### [SablierV2MerkleLL.sol](https://github.com/sablier-labs/v2-periphery/blob/main/src/SablierV2MerkleLL.sol)\r\n\r\n- [x] Replace `createWithDurations` with `createWithTimestamps` under [`claim`](https://github.com/sablier-labs/v2-periphery/blob/18d08400fa75194ac48c016e7913064eb63c32b1/src/SablierV2MerkleLL.sol#L80) function\r\n- [x] Define a struct in a new `MerkleLL` library:\r\n\r\n```solidity\r\nstruct Schedule {\r\n    uint40 startTime;\r\n    uint40 cliffDuration;\r\n    uint40 endDuration;\r\n}\r\n``` \r\n\r\n- [x] Use it to calculate `LockupLinear.Timestamps` as the following:\r\n\r\n```solidity\r\nif (MerkleLockup.Schedule.startTime == 0) {\r\n    LockupLinear.Timestamps.start = block.timestamp;\r\n} else {\r\n    LockupLinear.Timestamps.start = Schedule.startTime;\r\n}\r\nLockupLinear.Timestamps.cliff = LockupLinear.Timestamps.start + Schedule.cliffDuration;\r\nLockupLinear.Timestamps.end = LockupLinear.Timestamps.start + Schedule.endDuration;\r\n```\r\n\r\n### [SablierV2MerkleLT.sol](https://github.com/sablier-labs/v2-periphery/blob/main/src/SablierV2MerkleLT.sol)\r\n\r\n- [x] Replace `createWithDurations` with `createWithTimestamps` under [`claim`](https://github.com/sablier-labs/v2-periphery/blob/18d08400fa75194ac48c016e7913064eb63c32b1/src/SablierV2MerkleLT.sol#L112) function\r\n- [x] Define a new variable called `startTime` in [`SablierV2MerkleLT.sol`](https://github.com/sablier-labs/v2-periphery/blob/18d08400fa75194ac48c016e7913064eb63c32b1/src/SablierV2MerkleLT.sol). This plays the same role as `startTime` above.\r\n\r\n```solidity\r\nif (startTime == 0) {\r\n    CreateWithTimestamps.startTime = block.timestamp;\r\n} else {\r\n    CreateWithTimestamps.startTime = startTime;\r\n}\r\n```\r\n\r\n- [x] Construct `LockupTranched.Tranche` as the following:\r\n\r\n```solidity\r\nLockupTranched.Tranche.amount = f(MerkleLT.TrancheWithPercentage.unlockPercentage); // Calculations same as current\r\nLockupTranched.Tranche.timestamp = startTime + MerkleLT.TrancheWithPercentage.duration // recursively\r\n```","createdAt":"2024-07-24T15:46:05Z","labels":["type: feature","effort: high","priority: 2","work: complicated"],"number":996,"repository":"sablier-labs/lockup","state":"closed","title":"Replace `createWithDurations` with `createWithTimestamps` in claim function","type":"issue","updatedAt":"2024-08-28T11:24:41Z","url":"https://github.com/sablier-labs/lockup/issues/996"},{"author":"smol-ninja","body":"<sup>Refer to discussion #998 </sup>\r\n\r\nImplement a new contract called `SablierMerkleInstant.sol`.\r\n\r\n- Design somewhat similar to `MerkleLL` and `MerkleLT`.\r\n- Use factory to deploy the contract.\r\n- Have similar features such as clawback, grace period etc.","createdAt":"2024-07-24T13:06:16Z","labels":["type: feature","effort: epic","priority: 1","work: complicated"],"number":995,"repository":"sablier-labs/lockup","state":"closed","title":"Implement `SablierMerkleInstant` - A merkle lockup contract to facilitate instant airdrop campaigns","type":"issue","updatedAt":"2024-08-12T09:39:04Z","url":"https://github.com/sablier-labs/lockup/issues/995"},{"author":"smol-ninja","body":"Bump the solhint version to v5.0.3 and add the new rule to automatically order the imports in alphabetical order (PR [#587](https://github.com/protofire/solhint/pull/587)).\r\n\r\nRefer to https://github.com/sablier-labs/flow/pull/200.","createdAt":"2024-07-22T22:50:33Z","labels":["priority: 2","effort: low","work: clear","type: chore"],"number":978,"repository":"sablier-labs/lockup","state":"closed","title":"Bump solhint and add the new rule to order imports","type":"issue","updatedAt":"2024-09-09T15:23:50Z","url":"https://github.com/sablier-labs/lockup/issues/978"},{"author":"andreivladbrg","body":"In the current version of the common `Stream` struct, we declare the Amounts struct as:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/daeac7c23942ac465fd5da5d8291ecd433326e72/src/types/DataTypes.sol#L95\r\n\r\nThis is not needed as both of these structs are declared under `Lockup`.","createdAt":"2024-07-16T12:34:46Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":975,"repository":"sablier-labs/lockup","state":"closed","title":"Remove redundat `Lockup` \"namespace\" in `Stream` struct","type":"issue","updatedAt":"2024-08-19T03:40:08Z","url":"https://github.com/sablier-labs/lockup/issues/975"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/company-discussions/discussions/11</sup>\r\n\r\nImplement a mechanism to recover any surplus amount of assets from the core contract. The following approach has been discussed at length in the original discussion:\r\n\r\n1. Define a single variable to track down the amount of assets that the protocol owes to the users: `mapping (erc20 => amount)`. This variable should be updated whenever there is a transfer of asset into/out of the protocol.\r\n\r\n2. Declare a function to be used to manage the surplus amount, i.e. the difference between the token balance of the protocol minus the value stored. If called by admin, it can send surplus to the specified address. If called by a random address, it can only send the surplus amount to the admin address.","createdAt":"2024-07-16T11:56:58Z","labels":["good first issue","type: feature","effort: high","priority: 2","work: complicated"],"number":974,"repository":"sablier-labs/lockup","state":"closed","title":"Implement ERC-20 token recovery mechanism","type":"issue","updatedAt":"2025-02-21T11:14:23Z","url":"https://github.com/sablier-labs/lockup/issues/974"},{"author":"andreivladbrg","body":"We should include more endpoints in `foundry.toml` [here](https://github.com/sablier-labs/v2-core/blob/daeac7c23942ac465fd5da5d8291ecd433326e72/foundry.toml#L101-L112). Also, we should add them in `deploy-multi-chain` script\r\n\r\nList of sepolia endpoints from v2.1.:\r\n- arbitrum sepolia\r\n- base sepolia\r\n- blast sepolia (add to the dedicated branch)\r\n- optimism sepolia\r\n- taiko hekla (not sure if we want to add it)\r\n- zksync sepolia (add to the dedicated branch)","createdAt":"2024-07-15T12:58:04Z","labels":[],"number":972,"repository":"sablier-labs/lockup","state":"closed","title":"Add more sepolia endpoints","type":"issue","updatedAt":"2024-07-18T14:47:24Z","url":"https://github.com/sablier-labs/lockup/issues/972"},{"author":"andreivladbrg","body":"With the latest release, I had to use the deploy multi chain script, and there are some things that we can do to improve the DX for this:\r\n- don't exit the script execution if one chain's deployment fails, [ref](https://github.com/sablier-labs/v2-core/blob/daeac7c23942ac465fd5da5d8291ecd433326e72/shell/deploy-multi-chain.sh#L349-L352)\r\n- generate only one deployment file (push with a header the deployment)\r\n- don't delete the previous deployment (if already in file, copy it to a backup file)  \r\n- print what CLI has been used\r\n- mention in the deployment file if it is broadcasted or it is a simulation\r\n- add a `cp` command to copy the broadcast file from the current dir to deployments dir (ofc first check if the dir exists at that path, if not skip it)\r\n   - e.g. `cp broadcast/DeployDeterministicCore.s.sol/1/run-latest.json ../v2-deployments/core/v1.2.0/broadcasts/mainnet.json`\r\n\r\n@smol-ninja tagging to ask for objections","createdAt":"2024-07-15T12:02:59Z","labels":["work: complex","type: refactor","priority: 2","effort: medium"],"number":971,"repository":"sablier-labs/lockup","state":"closed","title":"Improve the deploy multi chain script","type":"issue","updatedAt":"2024-10-09T20:09:08Z","url":"https://github.com/sablier-labs/lockup/issues/971"},{"author":"PaulRBerg","body":"See the latest run: https://github.com/sablier-labs/v2-core/actions/runs/9924854793\r\n\r\n<img width=\"400\" alt=\"SCR-20240715-lscv\" src=\"https://github.com/user-attachments/assets/2d21abd6-7089-4fe7-b147-40c145474805\">\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/965\r\n- https://github.com/sablier-labs/v2-core/pull/968\r\n","createdAt":"2024-07-15T10:04:01Z","labels":["priority: 2","type: test","work: complicated"],"number":970,"repository":"sablier-labs/lockup","state":"closed","title":"Running the CI Deep template via cron job fails","type":"issue","updatedAt":"2024-08-04T11:28:02Z","url":"https://github.com/sablier-labs/lockup/issues/970"},{"author":"smol-ninja","body":"See below\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/fd8eb98f4f88dfbfda35f6605662d84cb885f9c1/script/Base.s.sol#L101-L103\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/fd8eb98f4f88dfbfda35f6605662d84cb885f9c1/benchmark/EstimateMaxCount.t.sol#L30\r\n\r\nThe correct chain ID is 81457, [source ↗](https://docs.blast.io/building/network-information).\r\n\r\nDo the same in [blast-l2](https://github.com/sablier-labs/v2-core/tree/blast-l2) branch.","createdAt":"2024-07-05T14:33:18Z","labels":["priority: 1","type: bug","effort: low","work: clear"],"number":967,"repository":"sablier-labs/lockup","state":"closed","title":"Fix chain ID for Blast network","type":"issue","updatedAt":"2024-07-12T10:16:16Z","url":"https://github.com/sablier-labs/lockup/issues/967"},{"author":"PaulRBerg","body":"See the recent run: https://github.com/sablier-labs/v2-core/actions/runs/9807405025\r\n\r\n<img width=\"500\" alt=\"SCR-20240705-mdqy\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/cd48180b-2eaa-4604-938d-4c6591408022\">\r\n","createdAt":"2024-07-05T11:37:10Z","labels":["priority: 1","type: test","effort: low","work: clear"],"number":965,"repository":"sablier-labs/lockup","state":"closed","title":"Running the CI Deep workflow manually results in errors","type":"issue","updatedAt":"2024-07-08T07:00:15Z","url":"https://github.com/sablier-labs/lockup/issues/965"},{"author":"andreivladbrg","body":"From Egis audit:\r\n\r\nContext: [SablierV2LockupLinear.sol](https://github.com/sablier-labs/v2-core/blob/3ee63dbeb570b133eb4095e211a5e736704c144c/src/SablierV2LockupLinear.sol#L195-L197)\r\n\r\nDescription: If `cliffTime == blockTimestamp` or `startTime == blockTimestamp`, the calculation\r\nfor `streamedAmountwill` be executed, which in the end will return 0. This is unnecessary as the function\r\nwill just waste more gas to return the same value in the end.\r\n\r\nRecommendation: Make the two checks >= instead of > like they are done in `SablierV2LockupDynamic`\r\n\r\n--- \r\n\r\nIMO, we should use  >= only for start time and not for cliff time because when current time equals cliff time, the calculation function returns a value > 0, @smol-ninja wdyt?\r\n\r\n```solidity\r\nif (cliffTime > blockTimestamp || startTime >= blockTimestamp) {\r\n     return 0;\r\n}\r\n```","createdAt":"2024-06-29T13:19:20Z","labels":["priority: 0","effort: low","work: clear","type: perf"],"number":958,"repository":"sablier-labs/lockup","state":"closed","title":"Change check operator in `SablierV2LockupLinear._calculateStreamedAmount()`","type":"issue","updatedAt":"2024-06-29T20:26:31Z","url":"https://github.com/sablier-labs/lockup/issues/958"},{"author":"DaniPopes","body":"Hey, we're trying to lower the default gas limit in foundry to a more reasonable amount in https://github.com/foundry-rs/foundry/pull/8274\r\n\r\nOnly one test is failing out of all our integration/external tests and it's `test_RevertWhen_LoopCalculationOverflowsBlockGasLimit`\r\n\r\nI'm not sure how to fix this because I don't know the internals, it can be reproduced currently like so: `forge t --gas-limit $((2**30-1)) --mt OverflowsBlock`","createdAt":"2024-06-28T23:01:05Z","labels":["priority: 2","type: test","work: complicated","effort: medium"],"number":956,"repository":"sablier-labs/lockup","state":"closed","title":"Reverting test when lowering gas limit","type":"issue","updatedAt":"2024-06-29T21:50:42Z","url":"https://github.com/sablier-labs/lockup/issues/956"},{"author":"andreivladbrg","body":"Recommendations made on the latest audit: https://cantina.xyz/code/9566f0dd-9be2-4f02-8135-aed3411902ba/findings/3\r\n\r\nPasting here OP:\r\n\r\n### Description\r\n`withdrawMax` and `withdrawMaxAndTransfer` do not return the withdrawn amount. In light of the need for improved integration with other Defi contracts it would be useful for them to have the withdrawn amount returned so as to not need an upfront call to `withdrawableAmountOf` in order for internal accounting to be correctly processed. In case Defi projects would stream to recipients the same applies to cancelMultiple and cancel where the amount refunded has to be queried with `refundableAmountOf` upfront.\r\n\r\n### Recommendation\r\nConsider returning the withdrawn amount for withdrawMax and withdrawMaxAndTransfer . The other withdraw don't need this as the amounts are specified as input. Also consider returning the refunded amount for cancelMultiple and cancel\r\n\r\n---\r\n\r\n@PaulRBerg tagging to ask for objections before starting working on this","createdAt":"2024-06-28T21:36:38Z","labels":["type: refactor","priority: 1","effort: low","work: clear"],"number":955,"repository":"sablier-labs/lockup","state":"closed","title":"Add return value in withdrawMax and withdrawMaxAndTransfer","type":"issue","updatedAt":"2024-07-01T16:02:35Z","url":"https://github.com/sablier-labs/lockup/issues/955"},{"author":"smol-ninja","body":"### Discussed in https://github.com/sablier-labs/v2-core/discussions/906\r\n\r\nAdd [newlines between tag types](https://github.com/coinbase/solidity-style-guide?tab=readme-ov-file#3-newlines-between-tag-types) to improve readability.\r\n\r\n```solidity\r\n/// @notice Creates a new MerkleLockup campaign with a LockupLinear distribution.\r\n/// @dev Emits a {CreateMerkleLL} event.\r\n/// @param baseParams Struct encapsulating the {SablierV2MerkleLockup} parameters, which are documented in\r\n/// {DataTypes}.\r\n/// @param lockupLinear The address of the {SablierV2LockupLinear} contract.\r\n/// @param streamDurations The durations for each stream.\r\n/// @param aggregateAmount The total amount of ERC-20 assets to be distributed to all recipients.\r\n/// @param recipientCount The total number of recipients who are eligible to claim.\r\n/// @return merkleLL The address of the newly created MerkleLockup contract.\r\n```\r\n\r\nbecomes \r\n\r\n```solidity\r\n/// @notice Creates a new MerkleLockup campaign with a LockupLinear distribution.\r\n///\r\n/// @dev Emits a {CreateMerkleLL} event.\r\n///\r\n/// @param baseParams Struct encapsulating the {SablierV2MerkleLockup} parameters, which are documented in\r\n/// {DataTypes}.\r\n/// @param lockupLinear The address of the {SablierV2LockupLinear} contract.\r\n/// @param streamDurations The durations for each stream.\r\n/// @param aggregateAmount The total amount of ERC-20 assets to be distributed to all recipients.\r\n/// @param recipientCount The total number of recipients who are eligible to claim.\r\n///\r\n/// @return merkleLL The address of the newly created MerkleLockup contract.\r\n```","createdAt":"2024-06-21T17:52:46Z","labels":["type: docs","effort: low","work: clear","priority: 3"],"number":953,"repository":"sablier-labs/lockup","state":"closed","title":"Add newlines between tag types","type":"issue","updatedAt":"2024-08-02T09:05:37Z","url":"https://github.com/sablier-labs/lockup/issues/953"},{"author":"PaulRBerg","body":"See L-01 finding in the CodeHawks report:\r\n\r\nhttps://www.codehawks.com/report/clvb9njmy00012dqjyaavpl44#L-01\r\n\r\nIt is worth noting that [OpenSea updates the SVG even without ERC-165 support](https://sablier.slack.com/archives/CT3NXSNMS/p1718629282396839). Still, for completeness' sake, we should implement ERC-4906 correctly by supporting ERC-165.","createdAt":"2024-06-17T13:59:05Z","labels":["type: refactor","priority: 2","effort: low","work: clear"],"number":947,"repository":"sablier-labs/lockup","state":"closed","title":"Lockup abstract is not fully ERC-4906 compliant","type":"issue","updatedAt":"2024-06-18T15:19:13Z","url":"https://github.com/sablier-labs/lockup/issues/947"},{"author":"smol-ninja","body":"[Release announcement](https://soliditylang.org/blog/2024/05/21/solidity-0.8.26-release-announcement/)\r\n\r\nThe latest version of solidity offers the following relevant optimisations:\r\n1. reverts without parameters\r\n2. faster Yul optimizer","createdAt":"2024-06-14T11:47:46Z","labels":["type: build","priority: 1","effort: low","work: clear"],"number":943,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to Solidity v0.8.26","type":"issue","updatedAt":"2024-06-14T18:52:35Z","url":"https://github.com/sablier-labs/lockup/issues/943"},{"author":"smol-ninja","body":"As reported during the Codehawk public audit, emitting events prior to the hook calls will reduce the impact of gas bomb attacks. Thus, all events should be emitted before the hooks are called. ","createdAt":"2024-06-06T23:56:53Z","labels":["priority: 1","effort: low","work: clear","type: perf"],"number":939,"repository":"sablier-labs/lockup","state":"closed","title":"Emit events prior to hook calls in `renounce` and `withdraw`","type":"issue","updatedAt":"2024-06-10T11:08:19Z","url":"https://github.com/sablier-labs/lockup/issues/939"},{"author":"andreivladbrg","body":"Now, since cliff time can be zero, this check is not enough in `SablierV2LockupLinear._calculateStreamedAmount`:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/cf246ef5199289539426ee19476f3ef9ebf0556d/src/SablierV2LockupLinear.sol#L191-L195\r\n\r\n<details><summary>Test to run</summary>\r\n<p>\r\n\r\nIt will revert with a PRB Math error since we use `unchecked`: https://app.warp.dev/block/OBorEzMLUvWOk9R8CmXlky\r\n\r\n```solidity\r\n    function test_Cancel_Pending_Linear() public {\r\n        vm.warp({ newTimestamp: defaults.START_TIME() - 100 });\r\n\r\n        LockupLinear.Timestamps memory timestamps = defaults.lockupLinearTimestamps();\r\n        timestamps.cliff = 0;\r\n\r\n        uint256 streamId = createDefaultStreamWithTimestamps(timestamps);\r\n\r\n        console2.log(\"Stream ID: %d status is %d\", streamId, uint8(lockup.statusOf(streamId)));\r\n\r\n        lockup.cancel(streamId);\r\n    }\r\n``` \r\n\r\n</p>\r\n</details> \r\n\r\nThus, we should also check if the start time is in the future.\r\n\r\nAlso, ref of the [issue here](https://www.codehawks.com/submissions/clvb9njmy00012dqjyaavpl44/99).","createdAt":"2024-06-06T22:10:29Z","labels":["priority: 1","type: bug","work: clear","effort: medium"],"number":938,"repository":"sablier-labs/lockup","state":"closed","title":"Check if the start time is in the future in linear contract","type":"issue","updatedAt":"2024-06-10T11:38:58Z","url":"https://github.com/sablier-labs/lockup/issues/938"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/v2-core/commit/56ce2b994519d327143784ef58546a401ce0507a#commitcomment-142404863","createdAt":"2024-05-28T18:39:33Z","labels":["type: build","priority: 2","effort: low","work: clear"],"number":935,"repository":"sablier-labs/lockup","state":"closed","title":"Exclude  `.t.sol` files from NPM package","type":"issue","updatedAt":"2024-06-14T13:09:35Z","url":"https://github.com/sablier-labs/lockup/issues/935"},{"author":"PaulRBerg","body":"- [x] Be more specific about what the function does on line 17; also, more explanations, e.g. that the table does NOT get put in the Solidity file\r\n- [x] Remove complicated chain ID formatting logic and use [`// forgefmt: disable-start`](https://github.com/foundry-rs/foundry/tree/master/crates/fmt#disable-line) in the Base Script\r\n- [x] Use [`sd`](https://github.com/chmln/sd) instead of `sed` for greater consistency; also `sd` is much more user-friendly than `sed`\r\n","createdAt":"2024-05-16T21:00:00Z","labels":["type: refactor","work: clear","priority: 3","effort: medium"],"number":929,"repository":"sablier-labs/lockup","state":"closed","title":"Changes to Updates Count script","type":"issue","updatedAt":"2024-05-20T10:35:28Z","url":"https://github.com/sablier-labs/lockup/issues/929"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/925, set `evm_version` to `Shanghai` since `PUSH0` is supported by all chains where the Sablier protocol exists","createdAt":"2024-05-15T15:42:55Z","labels":["work: complex","priority: 1","type: perf","effort: medium"],"number":926,"repository":"sablier-labs/lockup","state":"closed","title":"Update EVM Version to `Shanghai`","type":"issue","updatedAt":"2024-05-16T11:49:01Z","url":"https://github.com/sablier-labs/lockup/issues/926"},{"author":"smol-ninja","body":"Define two new mock assets with the following conditions:\r\n1. It does not miss the ERC-20 return value\r\n2. It does not have 18 decimals\r\n\r\nAND \r\n\r\n1. with 0 decimal\r\n\r\n## Context\r\nhttps://github.com/sablier-labs/v2-open-ended/blob/73c0dce45482b2b5e77ecec15a1b8db7e9513b52/test/Base.t.sol#L48-L49\r\nWe have two mock tokens defined:\r\n1. DAI: 18 decimals + does not miss the ERC20 return value\r\n2. USDT: miss the ERC20 return value\r\n\r\nHowever, we have three test branches. Even though USDT has 18 decimals but it does not follow our test technique.\r\n\r\nhttps://github.com/sablier-labs/v2-open-ended/blob/73c0dce45482b2b5e77ecec15a1b8db7e9513b52/test/integration/deposit/deposit.tree#L14-L26","createdAt":"2024-05-22T10:03:29Z","labels":["priority: 1","effort: low","work: clear","type: test"],"number":112,"repository":"sablier-labs/flow","state":"closed","title":"Add a new mock assets: `usdc` and `tokenWithoutDecimal`","type":"issue","updatedAt":"2024-05-24T12:45:51Z","url":"https://github.com/sablier-labs/flow/issues/112"},{"author":"smol-ninja","body":"","createdAt":"2024-05-21T19:50:32Z","labels":["type: refactor","effort: low","subtask"],"number":110,"repository":"sablier-labs/flow","state":"closed","title":"Rename `restartStreamAndDeposit` to `restartAndDeposit`","type":"issue","updatedAt":"2024-05-25T16:59:25Z","url":"https://github.com/sablier-labs/flow/issues/110"},{"author":"smol-ninja","body":"","createdAt":"2024-05-21T19:49:57Z","labels":["type: refactor","effort: low","subtask"],"number":109,"repository":"sablier-labs/flow","state":"closed","title":"Rename `restartStream` to `restart`","type":"issue","updatedAt":"2024-05-25T16:59:26Z","url":"https://github.com/sablier-labs/flow/issues/109"},{"author":"smol-ninja","body":"### Depends on\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/105","createdAt":"2024-05-21T19:45:58Z","labels":["effort: medium","type: test","subtask"],"number":108,"repository":"sablier-labs/flow","state":"closed","title":"Write tests for `withdrawableAmountAt`","type":"issue","updatedAt":"2024-05-28T21:43:37Z","url":"https://github.com/sablier-labs/flow/issues/108"},{"author":"smol-ninja","body":"### Depends on\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/104","createdAt":"2024-05-21T19:45:17Z","labels":["effort: medium","type: test","subtask"],"number":107,"repository":"sablier-labs/flow","state":"closed","title":"Write tests for `streamedAmountAt`","type":"issue","updatedAt":"2024-05-28T21:43:28Z","url":"https://github.com/sablier-labs/flow/issues/107"},{"author":"smol-ninja","body":"### Depends on:\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/103","createdAt":"2024-05-21T19:44:04Z","labels":["effort: medium","type: test","subtask"],"number":106,"repository":"sablier-labs/flow","state":"closed","title":"Write test for `refundableAmountAt`","type":"issue","updatedAt":"2024-05-28T21:45:04Z","url":"https://github.com/sablier-labs/flow/issues/106"},{"author":"smol-ninja","body":"The following `withdrawableAmountOf` should be renamed to `withdrawableAmountAt`.\r\n\r\n```solidity\r\n/// @notice Calculates the amount that the recipient can withdraw from the stream at `time`, denoted in 18 decimals.\r\n/// @dev Reverts if `streamId` references a null stream.\r\n/// @param streamId The stream ID for the query.\r\n/// @param time The Unix timestamp for the streamed amount calculation.\r\nfunction withdrawableAmountOf(uint256 streamId, uint40 time) external view returns (uint128 withdrawableAmount);\r\n```\r\n\r\nNote: we can also rename internal function to `_withdrawableAmountAt`.","createdAt":"2024-05-21T19:42:10Z","labels":["type: refactor","effort: low","subtask"],"number":105,"repository":"sablier-labs/flow","state":"closed","title":"Rename second `withdrawableAmountOf` to `withdrawableAmountAt`","type":"issue","updatedAt":"2024-05-28T21:42:48Z","url":"https://github.com/sablier-labs/flow/issues/105"},{"author":"smol-ninja","body":"The following `streamedAmountOf` should be renamed to `streamedAmountAt`.\r\n\r\n```solidity\r\n/// @notice Calculates the amount streamed to the recipient from the last time update to `time` passed as parameter,\r\n/// denoted in 18 decimals.\r\n/// @dev Reverts if `streamId` references a canceled or a null stream.\r\n/// @param streamId The stream ID for the query.\r\n/// @param time The Unix timestamp for the streamed amount calculation.\r\nfunction streamedAmountOf(uint256 streamId, uint40 time) external view returns (uint128 streamedAmount);\r\n```\r\n\r\nNote: we can also rename internal function to `_streamedAmountAt`.","createdAt":"2024-05-21T19:41:09Z","labels":["type: refactor","effort: low","subtask"],"number":104,"repository":"sablier-labs/flow","state":"closed","title":"Rename second `streamedAmountOf` to `streamedAmountAt`","type":"issue","updatedAt":"2024-05-28T21:42:57Z","url":"https://github.com/sablier-labs/flow/issues/104"},{"author":"smol-ninja","body":"```solidity\r\n/// @notice Calculates the amount that the sender can refund from stream at `time`, denoted in 18 decimals.\r\n/// @dev Reverts if `streamId` references a canceled or a null stream.\r\n/// @param streamId The stream ID for the query.\r\n/// @param time The Unix timestamp for the streamed amount calculation.\r\n/// @return refundableAmount The amount that the sender can refund.\r\nfunction refundableAmountOf(uint256 streamId, uint40 time) external view returns (uint128 refundableAmount);\r\n```\r\n\r\nNote: we can also rename internal function to `_refundableAmountAt`.","createdAt":"2024-05-21T19:39:13Z","labels":["type: refactor","effort: low","subtask"],"number":103,"repository":"sablier-labs/flow","state":"closed","title":"Rename second `refundableAmountOf` to `refundableAmountAt`","type":"issue","updatedAt":"2024-05-28T21:44:47Z","url":"https://github.com/sablier-labs/flow/issues/103"},{"author":"smol-ninja","body":"Missing test for `restartStreamAndDeposit`","createdAt":"2024-05-21T19:35:41Z","labels":["effort: medium","type: test","subtask"],"number":102,"repository":"sablier-labs/flow","state":"closed","title":"Write test for `restartStreamAndDeposit`","type":"issue","updatedAt":"2024-05-25T16:26:29Z","url":"https://github.com/sablier-labs/flow/issues/102"},{"author":"smol-ninja","body":"Missing tests for `createAndDeposit`","createdAt":"2024-05-21T19:33:17Z","labels":["effort: medium","type: test","subtask"],"number":101,"repository":"sablier-labs/flow","state":"closed","title":"Write test for `createAndDeposit`","type":"issue","updatedAt":"2024-06-07T15:31:35Z","url":"https://github.com/sablier-labs/flow/issues/101"},{"author":"smol-ninja","body":"","createdAt":"2024-05-21T16:19:34Z","labels":["effort: high","type: docs","priority: 3","work: complicated"],"number":99,"repository":"sablier-labs/flow","state":"closed","title":"Review all Natspecs","type":"issue","updatedAt":"2024-08-27T15:13:10Z","url":"https://github.com/sablier-labs/flow/issues/99"},{"author":"smol-ninja","body":"- [x] Replace StdUtils with PRBMathUtils\r\n- [x] Replace StdAssertions with PRBMathAssertions\r\n- [x] `Constants` `Defaults` and `Types` contracts. `Defaults` is inherited by `Base`.\r\n- [x] Add constructor test\r\n- [x] Alphabetical order in `Modifers.sol`","createdAt":"2024-05-21T15:25:02Z","labels":["priority: 0","effort: low","work: clear","type: test"],"number":96,"repository":"sablier-labs/flow","state":"closed","title":"Refine base tests","type":"issue","updatedAt":"2024-05-22T20:22:53Z","url":"https://github.com/sablier-labs/flow/issues/96"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/v2-open-ended/discussions/94","createdAt":"2024-05-20T18:37:42Z","labels":["priority: 1","type: refactor","effort: medium","work: clear"],"number":95,"repository":"sablier-labs/flow","state":"closed","title":"Rename `SablierV2OpenEnded` to `SablierFlow`","type":"issue","updatedAt":"2024-05-24T15:18:53Z","url":"https://github.com/sablier-labs/flow/issues/95"},{"author":"smol-ninja","body":"Currently we only check `sender` for zero address. We should also have similar check for `recipient` address. cc @andreivladbrg wdyt?","createdAt":"2024-05-20T17:22:58Z","labels":["priority: 1","effort: low","type: feature","work: clear"],"number":93,"repository":"sablier-labs/flow","state":"closed","title":"Check `recipient` is not 0 in `_create()`","type":"issue","updatedAt":"2024-05-20T17:24:50Z","url":"https://github.com/sablier-labs/flow/issues/93"},{"author":"smol-ninja","body":"Related discussion: https://github.com/sablier-labs/v2-open-ended/discussions/88#discussioncomment-9495164","createdAt":"2024-05-20T11:37:49Z","labels":["priority: 1","type: refactor","effort: low","work: complicated"],"number":92,"repository":"sablier-labs/flow","state":"closed","title":"Remove composite functions","type":"issue","updatedAt":"2024-12-24T03:05:24Z","url":"https://github.com/sablier-labs/flow/issues/92"},{"author":"smol-ninja","body":"As [discussed here](https://github.com/sablier-labs/v2-open-ended/discussions/86), the value of debt should be carried forward by including it in the value of `remainingAmount`. ","createdAt":"2024-05-20T10:53:02Z","labels":["effort: medium","type: feature","subtask"],"number":91,"repository":"sablier-labs/flow","state":"closed","title":"Carry forward the debt after the stream has been paused by storing it in `remainingAmount`","type":"issue","updatedAt":"2024-05-24T11:09:41Z","url":"https://github.com/sablier-labs/flow/issues/91"},{"author":"smol-ninja","body":"As discussed [here](https://github.com/sablier-labs/v2-open-ended/discussions/88), experiment with the implementaion of `batch` function to carry out actions that require calling 2 or more public functions.\r\n\r\nA mock implementation:\r\n\r\n```solidity\r\nfunction batch(bytes[] calldata calls, bool revertOnFail) external payable {\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n        (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n        if (!success && revertOnFail) {\r\n            _getRevertMsg(result);\r\n        }\r\n    }\r\n}\r\n```","createdAt":"2024-05-20T10:48:47Z","labels":["effort: high","priority: 1","work: complex","type: feature"],"number":90,"repository":"sablier-labs/flow","state":"closed","title":"Implement `batch` to execute an array of public calls","type":"issue","updatedAt":"2024-06-13T14:10:42Z","url":"https://github.com/sablier-labs/flow/issues/90"},{"author":"smol-ninja","body":"As discussed [here](https://github.com/sablier-labs/v2-open-ended/discussions/40), define the following function:\r\n\r\n```solidity\r\nfunction getDepletionTime(uint256 streamId) external view returns (uint40) {\r\n    uint40 solvencyPeriod = (getBalance(streamId) - withdrawableAmountOf(streamId)) / getRatePerSecond(streamId);\r\n    return block.timestamp + solvencyPeriod;\r\n}\r\n```\r\n\r\n`getDepletionTime` returns the timestamp when the stream will start to accumulate debt in the future. If the stream has already in debt, return the timestamp when it began.","createdAt":"2024-05-20T10:30:53Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":89,"repository":"sablier-labs/flow","state":"closed","title":"Implement `getDepletionTime()`","type":"issue","updatedAt":"2024-05-24T11:16:37Z","url":"https://github.com/sablier-labs/flow/issues/89"},{"author":"andreivladbrg","body":"Ref: https://github.com/sablier-labs/v2-open-ended/discussions/46\r\n\r\nWe would need to:\r\n- rename `cancel` to `pause`\r\n- rename `isCanceled` to `isPaused`\r\n- remove refund from `pause` function\r\n- carry debt after the `pause` (ref: https://github.com/sablier-labs/v2-open-ended/discussions/86)\r\n\r\n### Subtask:\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/91\r\n\r\nother relevant issues:\r\n- https://github.com/sablier-labs/v2-open-ended/issues/59\r\n- https://github.com/sablier-labs/v2-open-ended/issues/81 ","createdAt":"2024-05-17T11:38:32Z","labels":["effort: high","priority: 0","type: refactor","work: complex"],"number":85,"repository":"sablier-labs/flow","state":"closed","title":"Change `cancel` over `pause` function","type":"issue","updatedAt":"2024-05-24T11:09:40Z","url":"https://github.com/sablier-labs/flow/issues/85"},{"author":"smol-ninja","body":"Relevant discussion: https://github.com/sablier-labs/v2-open-ended/discussions/46\r\nRelated issue: https://github.com/sablier-labs/v2-open-ended/issues/59\r\n\r\n### Depends on\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/85","createdAt":"2024-05-16T11:57:39Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":81,"repository":"sablier-labs/flow","state":"closed","title":"Implement `refundAndPause` ","type":"issue","updatedAt":"2024-05-28T19:57:35Z","url":"https://github.com/sablier-labs/flow/issues/81"},{"author":"andreivladbrg","body":"Think of the best option, either we make it dynamically computed at the call time or we store it in the `Stream` struct. \r\n\r\nSimilar to: https://docs.sablier.com/concepts/protocol/statuses","createdAt":"2024-05-15T11:18:18Z","labels":["priority: 1","work: complex","effort: medium","type: feature"],"number":80,"repository":"sablier-labs/flow","state":"closed","title":"Implement a Status","type":"issue","updatedAt":"2024-06-25T13:56:56Z","url":"https://github.com/sablier-labs/flow/issues/80"},{"author":"smol-ninja","body":"The coverage is 88.24%, [src ↗](https://app.codecov.io/gh/sablier-labs/v2-open-ended). Thus, more tests are required to achive a target coverage of 100%.\r\n\r\n\r\n### Subtasks\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/101\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/102","createdAt":"2024-05-13T13:23:44Z","labels":["effort: epic","priority: 2","type: test","work: complicated"],"number":78,"repository":"sablier-labs/flow","state":"closed","title":"Write missing tests to increase coverage","type":"issue","updatedAt":"2024-06-07T15:36:26Z","url":"https://github.com/sablier-labs/flow/issues/78"},{"author":"smol-ninja","body":"The function will take an array of `streamId` and withdraw the maximum available amount on each stream.\r\n\r\n```solidity\r\nfunction withdrawMaxMultiple(uint256[] calldata streamIds) external;\r\n```\r\n\r\nRelevant:\r\n- https://github.com/sablier-labs/v2-open-ended/discussions/53","createdAt":"2024-05-10T09:33:59Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":73,"repository":"sablier-labs/flow","state":"closed","title":"Implement `withdrawMaxMultiple`","type":"issue","updatedAt":"2024-05-20T22:09:56Z","url":"https://github.com/sablier-labs/flow/issues/73"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-open-ended/discussions/54.","createdAt":"2024-05-10T09:31:21Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":72,"repository":"sablier-labs/flow","state":"closed","title":"Rename `withdraw` to `withdrawAt`","type":"issue","updatedAt":"2024-05-10T14:21:07Z","url":"https://github.com/sablier-labs/flow/issues/72"},{"author":"PaulRBerg","body":"We are pretty sure at this point that we will drop the `V2` prefix in the EVM product series.\r\n\r\nTherefore, let's remove the `V2` prefix from the contracts in this repo, i.e. from `SablierV2OpenEnded` to `SablierOpenEnded`.\r\n\r\nRelated: https://github.com/sablier-labs/v2-core/issues/808","createdAt":"2024-05-09T18:17:22Z","labels":["type: refactor","effort: low","priority: 2","work: clear"],"number":71,"repository":"sablier-labs/flow","state":"closed","title":"Drop the \"V2\" prefix","type":"issue","updatedAt":"2024-05-21T15:37:12Z","url":"https://github.com/sablier-labs/flow/issues/71"},{"author":"smol-ninja","body":"There are inconsistencies in the use of modifiers which makes it difficult to study the code. \r\n\r\n- Some of the internal functions such as `_restartStream` are marked with `noDelegateCall`, `notNull` etc.\r\n- Some of the public functions such as `adjustRatePerSecond` are marked with these modifiers.\r\n- Some of the batch public functions such as `depositMultiple` are marked with them.\r\n\r\nThis inconsistency can introduce technical errors where we accidentally can either overcheck a function or forget to add modifiers.\r\n\r\nThus, I would like to propose to use modifiers only in the internal function calls and only add to public functions where its absolute necessary.\r\n\r\nI would like to hear criticism against this, if any cc @andreivladbrg.","createdAt":"2024-05-01T18:48:07Z","labels":["priority: 1","type: refactor","effort: low","work: clear"],"number":66,"repository":"sablier-labs/flow","state":"closed","title":"Only use modifiers in public functions","type":"issue","updatedAt":"2024-05-20T22:10:10Z","url":"https://github.com/sablier-labs/flow/issues/66"},{"author":"smol-ninja","body":"Created this as a sub-issue of #47 because it could require more changes to implement.","createdAt":"2024-05-01T11:37:11Z","labels":["effort: high","priority: 1","type: feature","work: complicated"],"number":63,"repository":"sablier-labs/flow","state":"closed","title":"Abstract away recipient transfer from `cancel` and `adjustRatePerSecond`","type":"issue","updatedAt":"2024-05-20T22:10:13Z","url":"https://github.com/sablier-labs/flow/issues/63"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-open-ended/discussions/57#discussioncomment-9278998","createdAt":"2024-05-01T11:11:44Z","labels":["priority: 1","type: feature","type: docs","work: clear"],"number":62,"repository":"sablier-labs/flow","state":"closed","title":"Create a state-machine diagram","type":"issue","updatedAt":"2024-05-09T10:16:37Z","url":"https://github.com/sablier-labs/flow/issues/62"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-open-ended/discussions/57\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** April 30, 2024</sup>\r\n\r\nAdd a new function called `void` with the following **requirements**:\r\n\r\n- Can only be called by the recipient\r\n- Can only be called when the debt exceeds zero\r\n\r\nAnd the following **behavior**:\r\n\r\n- Sets the debt to zero\r\n- Stops the stream from accruing debt in the future\r\n\r\n### Depends on\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/85","createdAt":"2024-04-30T16:30:45Z","labels":["effort: high","priority: 1","type: feature","work: complicated"],"number":61,"repository":"sablier-labs/flow","state":"closed","title":"Voiding streams with negative debt for improved accounting","type":"issue","updatedAt":"2024-06-10T21:18:09Z","url":"https://github.com/sablier-labs/flow/issues/61"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-open-ended/discussions/58 and https://github.com/sablier-labs/v2-open-ended/issues/92#issuecomment-2122318361\r\n\r\n\r\n### Depends on\r\n\r\n- [x] https://github.com/sablier-labs/v2-open-ended/issues/85","createdAt":"2024-04-30T13:00:26Z","labels":["priority: 1","effort: medium","type: feature","work: clear"],"number":59,"repository":"sablier-labs/flow","state":"closed","title":"Add `depositAndPause` function ","type":"issue","updatedAt":"2024-05-28T19:57:34Z","url":"https://github.com/sablier-labs/flow/issues/59"},{"author":"PaulRBerg","body":"I had a cursory look at the [`Flow`](https://github.com/sablier-labs/v2-open-ended/blob/55ce73f238ab399830791ab29969c2b72d11db6e/src/interfaces/ISablierV2OpenEnded.sol) interface, and I noticed that the NatSpec comments lack a \"Notes\" section.\r\n\r\nIt would be helpful to add such a section just like we have in Lockup.","createdAt":"2024-04-30T12:06:20Z","labels":["effort: low","type: docs","work: clear","priority: 3"],"number":56,"repository":"sablier-labs/flow","state":"closed","title":"Add \"Notes\" in NatSpec comments","type":"issue","updatedAt":"2024-06-30T19:09:43Z","url":"https://github.com/sablier-labs/flow/issues/56"},{"author":"andreivladbrg","body":"It will require to:\r\n- inherit `ERC721` in `OE` contract\r\n- implement OpenZeppelin's `_update` hook\r\n- mint the NFT in `_create` and remove the no longer needed checks\r\n- remove `recipient` from stream storage struct\r\n- add `isTransferable` flag in the stream storage\r\n- `IERC4906` and update metadata modifier\r\n- remove `ERC20` transfer in `_cancel` see also [README](https://github.com/sablier-labs/v2-open-ended?tab=readme-ov-file#technical-decisions) - last point in technical-decisions\r\n-  add a new withdraw function (or add aditional logic to the current `withdraw` function) for the recipient for only when the stream is canceled which withdraws the balance at that moment in time \r\n    - analyze and test thoroughly for when the stream is restarted especially because: \"what happens if the recipient does not withdraw the assets after cancel, and then the stream is restarted\"\r\n- find a way to not make the ERC-20 transfer in `adjustRatePerSecond` function \r\n    - maybe a new amount variable in storage or some time variables for the moment when the adjusted rate happened\r\n    - same issue as for cancel, what happens if the stream is restarted\r\n\r\nAt this moment, it seems like the implementation is going to be tricky","createdAt":"2024-04-19T12:42:11Z","labels":["effort: high","priority: 1","type: feature","work: complicated"],"number":47,"repository":"sablier-labs/flow","state":"closed","title":"Implement NFT ","type":"issue","updatedAt":"2024-05-20T20:18:07Z","url":"https://github.com/sablier-labs/flow/issues/47"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-open-ended/discussions/33, add the following hooks to the Flow protocol:\r\n\r\n- `onStreamWithdrawn` on both Sender and Recipient\r\n- `onStreamPause` on Recipient\r\n- `onStreamRefund` on Recipient\r\n- `onAdjustRarePerSecond` on Recipient","createdAt":"2024-04-15T12:14:56Z","labels":["effort: medium","type: feature","priority: 3","work: complicated"],"number":45,"repository":"sablier-labs/flow","state":"open","title":"Add Sender and Recipient hooks","type":"issue","updatedAt":"2024-11-25T21:04:38Z","url":"https://github.com/sablier-labs/flow/issues/45"},{"author":"smol-ninja","body":"Required for codecov uploads","createdAt":"2024-04-10T13:55:59Z","labels":["priority: 0","effort: low","work: clear","type: test"],"number":41,"repository":"sablier-labs/flow","state":"closed","title":"Add `CODECOV_TOKEN` to secrets","type":"issue","updatedAt":"2024-04-10T14:00:16Z","url":"https://github.com/sablier-labs/flow/issues/41"},{"author":"andreivladbrg","body":"including foundry profiles.","createdAt":"2024-04-09T21:49:17Z","labels":["work: complex","effort: medium","priority: 2","type: ci"],"number":37,"repository":"sablier-labs/flow","state":"closed","title":"Update CI","type":"issue","updatedAt":"2024-04-18T17:09:19Z","url":"https://github.com/sablier-labs/flow/issues/37"},{"author":"andreivladbrg","body":"About this line:\r\n\r\nhttps://github.com/sablier-labs/v2-open-ended/blob/a7618de7bda7e9ffd157a498507c7aa0ea5559ec/src/SablierV2OpenEnded.sol#L606\r\n\r\nComment from Iaro:\r\n\"\r\nthis double-check does protect the other Streams from having their funds \"drained\", but doesn't protect the sender of this very Stream, who might have his \"refundable amount\" partially (or totally) drained\r\n\"","createdAt":"2024-04-09T21:46:17Z","labels":["effort: low","type: perf","work: clear","priority: 3"],"number":36,"repository":"sablier-labs/flow","state":"closed","title":"Investigate if we can enhance _checkCalculatedAmount in _withdraw","type":"issue","updatedAt":"2024-06-04T09:46:11Z","url":"https://github.com/sablier-labs/flow/issues/36"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-core/issues/799.","createdAt":"2024-04-05T14:56:11Z","labels":["effort: epic","priority: 2","type: test","work: complicated"],"number":32,"repository":"sablier-labs/flow","state":"closed","title":"Use Bulloak for tests","type":"issue","updatedAt":"2024-05-28T09:49:28Z","url":"https://github.com/sablier-labs/flow/issues/32"},{"author":"andreivladbrg","body":"","createdAt":"2024-04-05T14:01:41Z","labels":["effort: medium","priority: 2","type: feature","work: clear"],"number":31,"repository":"sablier-labs/flow","state":"closed","title":"Add withdrawMultiple function ","type":"issue","updatedAt":"2024-05-10T14:10:29Z","url":"https://github.com/sablier-labs/flow/issues/31"},{"author":"andreivladbrg","body":"","createdAt":"2024-04-05T12:56:54Z","labels":["effort: medium","priority: 2","type: feature","work: complicated"],"number":30,"repository":"sablier-labs/flow","state":"closed","title":"Make withdraw function callable by anyone","type":"issue","updatedAt":"2024-04-22T15:47:44Z","url":"https://github.com/sablier-labs/flow/issues/30"},{"author":"smol-ninja","body":"","createdAt":"2024-04-05T12:45:57Z","labels":["effort: high","priority: 2","type: feature","work: complicated"],"number":29,"repository":"sablier-labs/flow","state":"closed","title":"Add benchmarks dir","type":"issue","updatedAt":"2024-09-02T11:37:22Z","url":"https://github.com/sablier-labs/flow/issues/29"},{"author":"smol-ninja","body":"This should be done in parts. If you take it, I'd advise you to create smaller issues and create PR for them.\r\n\r\n### Subtasks\r\n- [x] https://github.com/sablier-labs/flow/issues/159","createdAt":"2024-04-05T12:45:39Z","labels":["work: complex","effort: epic","priority: 2","type: test"],"number":28,"repository":"sablier-labs/flow","state":"closed","title":"Write fuzz tests","type":"issue","updatedAt":"2024-06-25T13:45:58Z","url":"https://github.com/sablier-labs/flow/issues/28"},{"author":"andreivladbrg","body":"https://github.com/sablier-labs/v2-core/tree/staging/precompiles","createdAt":"2024-04-05T12:45:17Z","labels":["effort: medium","priority: 2","type: feature","work: complicated"],"number":27,"repository":"sablier-labs/flow","state":"closed","title":"Add precompiles dir","type":"issue","updatedAt":"2024-05-10T11:41:08Z","url":"https://github.com/sablier-labs/flow/issues/27"},{"author":"PaulRBerg","body":"See https://github.com/PaulRBerg/prb-math/pull/212","createdAt":"2023-12-15T13:33:55Z","labels":["effort: high","priority: 2","type: feature","work: complicated"],"number":15,"repository":"sablier-labs/flow","state":"closed","title":"Review PR about `UD21x18` and `SD21x18`","type":"issue","updatedAt":"2024-06-29T12:38:35Z","url":"https://github.com/sablier-labs/flow/issues/15"},{"author":"smol-ninja","body":"This should be done in parts. If you take it, I'd advise you to create smaller issues and create PR for them.","createdAt":"2023-12-10T22:47:33Z","labels":["effort: high","work: complex","priority: 2","type: test"],"number":12,"repository":"sablier-labs/flow","state":"closed","title":"Add fork testing","type":"issue","updatedAt":"2024-07-22T13:37:51Z","url":"https://github.com/sablier-labs/flow/issues/12"},{"author":"smol-ninja","body":"As discussed [here](https://github.com/sablier-labs/v2-open-ended/discussions/84), implement the following functions:\r\n\r\n- [x] `depositViaBroker`\r\n- [x] `createAndDepositViaBroker`","createdAt":"2023-12-10T22:44:02Z","labels":["effort: high","priority: 2","type: feature","work: complicated"],"number":11,"repository":"sablier-labs/flow","state":"closed","title":"Implement broker fee","type":"issue","updatedAt":"2024-05-24T12:45:50Z","url":"https://github.com/sablier-labs/flow/issues/11"},{"author":"PaulRBerg","body":"This should be put at the top. See how Uniswap has worded it:\r\n\r\nhttps://github.com/Uniswap/v3-periphery/blob/main/deploys.md","createdAt":"2023-07-06T17:23:49Z","labels":[],"number":36,"repository":"sablier-labs/docs","state":"closed","title":"Mention source of deployment in the \"Deployment Addresses\" page","type":"issue","updatedAt":"2023-07-08T10:37:35Z","url":"https://github.com/sablier-labs/docs/issues/36"},{"author":"PaulRBerg","body":"[Starting with React v17](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html), JSX can be used without importing React. No longer do we have to import React in the global scope, or add it as a dependency:\r\n\r\nhttps://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#removing-unused-react-imports\r\n","createdAt":"2023-07-06T16:39:44Z","labels":[],"number":35,"repository":"sablier-labs/docs","state":"closed","title":"Delete all unused \"import React from react\" statements","type":"issue","updatedAt":"2023-07-08T13:52:22Z","url":"https://github.com/sablier-labs/docs/issues/35"},{"author":"PaulRBerg","body":"It would be nice to add a pointing arrow next to hyperlinks, which don't have any special formatting at the moment besides being colored in orange.\r\n\r\nI like how [Balancer](https://docs.balancer.fi/reference/contracts/deployment-addresses/arbitrum.html) renders hyperlinks:\r\n\r\n<img width=\"906\" alt=\"SCR-20230706-qxkz\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/b5c994ca-a725-496b-a65f-5bf478bf993b\">\r\n","createdAt":"2023-07-06T16:24:55Z","labels":[],"number":34,"repository":"sablier-labs/docs","state":"closed","title":"Add pointing arrow icon next to hyperlinks","type":"issue","updatedAt":"2023-07-07T09:41:16Z","url":"https://github.com/sablier-labs/docs/issues/34"},{"author":"PaulRBerg","body":"Same issue as https://github.com/sablier-labs/v1-docs/issues/1.\r\n\r\n<img width=\"844\" alt=\"SCR-20230706-qtgk\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/015ce570-1b6d-407d-8acf-07678d704ec0\">\r\n","createdAt":"2023-07-06T16:13:20Z","labels":[],"number":33,"repository":"sablier-labs/docs","state":"closed","title":"Change the icon color for link previews when in dark mode","type":"issue","updatedAt":"2023-07-07T09:41:59Z","url":"https://github.com/sablier-labs/docs/issues/33"},{"author":"razgraf","body":"As per the [`on.workflow_dispatch`](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch) documentation it looks like there's no `branches` options for it.\r\n\r\nThe IDE (probably because of the [Github Actions](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-github-actions) extension) is warning about this incorrect configuration. Was there a reason for leaving this here? Maybe it was meant for the `pull_request` / `push` triggers?\r\n\r\n<img width=\"469\" alt=\"Screenshot 2023-07-04 at 13 19 21\" src=\"https://github.com/sablier-labs/v2-docs/assets/15740806/050926c0-f819-4ad2-a4e1-a20ed6ae5556\">\r\n","createdAt":"2023-07-04T10:21:30Z","labels":[],"number":29,"repository":"sablier-labs/docs","state":"closed","title":"CI warnings with branch configuration","type":"issue","updatedAt":"2023-07-06T09:09:10Z","url":"https://github.com/sablier-labs/docs/issues/29"},{"author":"PaulRBerg","body":"The \"Concepts\" guides should be updated to contain visual plots of the streaming functions. We could use something like [Desmos](https://desmos.com/) for this task.\r\n\r\nCreating plots for all the stream options available in the UI would be a good first start.\r\n\r\n<img width=\"250\" src=\"https://user-images.githubusercontent.com/8782666/228050797-55f6fbcd-a11d-4511-ad00-697674b307c4.jpg\"/>\r\n","createdAt":"2023-06-26T15:38:37Z","labels":[],"number":26,"repository":"sablier-labs/docs","state":"closed","title":"Plot streaming functions in \"Types of Streams\"","type":"issue","updatedAt":"2023-06-28T18:58:01Z","url":"https://github.com/sablier-labs/docs/issues/26"},{"author":"PaulRBerg","body":"- [ ] Install V2 Periphery as a git submodule\r\n- [ ] Update the `autogen.sh` script to pull V2 Periphery","createdAt":"2023-06-26T10:52:10Z","labels":[],"number":24,"repository":"sablier-labs/docs","state":"closed","title":"Add reference for V2 Periphery","type":"issue","updatedAt":"2023-06-26T15:33:26Z","url":"https://github.com/sablier-labs/docs/issues/24"},{"author":"PaulRBerg","body":"Once we publish the docs website, we will be able to index it by applying here:\r\n\r\nhttps://docsearch.algolia.com/apply/","createdAt":"2023-06-26T09:34:31Z","labels":[],"number":23,"repository":"sablier-labs/docs","state":"closed","title":"Set-up Algolia search","type":"issue","updatedAt":"2023-07-12T12:55:03Z","url":"https://github.com/sablier-labs/docs/issues/23"},{"author":"PaulRBerg","body":"- [x] Integrating contracts that accept NFT deposits need to account for potential withdrawals by the sender (ref https://github.com/cantinasec/review-sablier/issues/22)\r\n- [x] Recommend using `withdrawMaxAndTransfer` over `transferFrom` in this [guide](https://sablier-v2-docs.vercel.app/contracts/v2/guides/stream-management/transfer) (ref https://github.com/sablier-labs/v2-interfaces/issues/450)","createdAt":"2023-06-22T16:42:37Z","labels":[],"number":22,"repository":"sablier-labs/docs","state":"closed","title":"Document footguns","type":"issue","updatedAt":"2023-07-02T14:03:31Z","url":"https://github.com/sablier-labs/docs/issues/22"},{"author":"PaulRBerg","body":"Getting these console logs when trying to use it:\r\n\r\n<img width=\"424\" alt=\"Screenshot 2023-06-20 at 7 12 10 PM\" src=\"https://github.com/sablier-labs/v2-docs/assets/8782666/4eddfa9b-ddb6-4335-aa52-88c4e92e33dd\">\r\n","createdAt":"2023-06-20T16:12:24Z","labels":[],"number":21,"repository":"sablier-labs/docs","state":"closed","title":"Algolia not working anymore","type":"issue","updatedAt":"2023-06-26T09:34:43Z","url":"https://github.com/sablier-labs/docs/issues/21"},{"author":"PaulRBerg","body":"The [statuses](https://sablier-v2-docs.vercel.app/concepts/protocol/statuses) page is no longer up to date since this PR has been merged in V2 Core:\r\n\r\nhttps://github.com/sablier-labs/v2-core/pull/467","createdAt":"2023-06-20T16:11:55Z","labels":[],"number":20,"repository":"sablier-labs/docs","state":"closed","title":"Rewrite the statuses pages","type":"issue","updatedAt":"2023-07-08T13:42:58Z","url":"https://github.com/sablier-labs/docs/issues/20"},{"author":"PaulRBerg","body":"The \"Guides\" and \"Contracts\" sections on [docs.sablier.finance](https://docs.sablier.finance) should be dumped under the \"V1 Protocol\" entry in the sidebar.","createdAt":"2023-03-27T19:47:23Z","labels":[],"number":16,"repository":"sablier-labs/docs","state":"closed","title":"Dump the V1 docs under the \"V1 Protocol\" section in \"Contracts\"","type":"issue","updatedAt":"2023-06-26T10:35:41Z","url":"https://github.com/sablier-labs/docs/issues/16"},{"author":"IaroslavMazur","body":"On the [Access Control](https://sablier-v2-docs.vercel.app/contracts/v2/reference/access-control) page, the diagram for the **Withdraw** workflow appears incomplete.\r\n\r\nHere's how it looks with the Light Theme: \r\n![image](https://user-images.githubusercontent.com/22785348/227953774-84143b7d-f56c-4fe0-b1d4-417e00f5a6d7.png)\r\n\r\nAnd here's the Dark Theme look:\r\n![image](https://user-images.githubusercontent.com/22785348/227953826-8b912eb1-7f8b-496a-ab88-322d49e992dc.png)\r\n\r\nI've reproduced this issue in Brave (the browser I normally use) and Edge (the only other browser I have installed rn 😆)\r\n","createdAt":"2023-03-27T13:39:04Z","labels":["work: complex","effort: high","priority: 3","type: bug"],"number":15,"repository":"sablier-labs/docs","state":"closed","title":"The diagram for the access control of the withdraw function does not display correctly on Brave/ Windows","type":"issue","updatedAt":"2024-12-19T12:06:47Z","url":"https://github.com/sablier-labs/docs/issues/15"},{"author":"PaulRBerg","body":"I don't know how to do this. I'm waiting for a response here:\r\n\r\nhttps://github.com/facebook/docusaurus/discussions/8806","createdAt":"2023-03-22T18:48:25Z","labels":["work: complex","effort: high","priority: 3","type: perf"],"number":14,"repository":"sablier-labs/docs","state":"closed","title":"Make all Mermaid circle nodes the same size","type":"issue","updatedAt":"2024-12-19T09:27:08Z","url":"https://github.com/sablier-labs/docs/issues/14"},{"author":"PaulRBerg","body":"- [x] Access Control\r\n- [x] Lockup Linear\r\n- [x] Lockup Dynamic (emphasis on segments)\r\n- [x] Hooks\r\n- [x] Reference Overview (show how all contracts interact with one another)\r\n- [x] Status Transitions","createdAt":"2023-03-20T14:55:16Z","labels":[],"number":13,"repository":"sablier-labs/docs","state":"closed","title":"Mermaid.js diagrams","type":"issue","updatedAt":"2023-07-12T16:17:12Z","url":"https://github.com/sablier-labs/docs/issues/13"},{"author":"PaulRBerg","body":"","createdAt":"2023-03-19T22:55:43Z","labels":[],"number":12,"repository":"sablier-labs/docs","state":"closed","title":"Add links to Desmos plots in the \"Types of Streams\" page","type":"issue","updatedAt":"2023-06-26T15:38:27Z","url":"https://github.com/sablier-labs/docs/issues/12"},{"author":"PaulRBerg","body":"","createdAt":"2023-03-19T20:37:17Z","labels":[],"number":11,"repository":"sablier-labs/docs","state":"closed","title":"Add ESLint config","type":"issue","updatedAt":"2023-03-23T15:04:11Z","url":"https://github.com/sablier-labs/docs/issues/11"},{"author":"PaulRBerg","body":"Over the years, we have shared many references to the V1 docs website. It'd be overkill to try to identify all references, but at a minimum, we should make sure to add URL redirects for the following guides:\r\n\r\n- FAQ page: https://docs.sablier.finance/protocol/faq/basics\r\n- Guides: https://docs.sablier.finance/protocol/guides/getting-started\r\n- What is Sablier: https://docs.sablier.finance/protocol/introduction\r\n- Chains (deployment addresses): https://docs.sablier.finance/protocol/guides/chains\r\n- Subgraphs: https://docs.sablier.finance/protocol/subgraphs/endpoints\r\n\r\nSetting up redirects is easy with [`@docusaurus/plugin-client-redirects`](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-client-redirects). An example for how to use it can be found [here](https://github.com/Uniswap/docs/blob/81d2fe91efb5b9bde1b6e9f12a1b6d7b15b03cb5/docusaurus.config.js#L265).","createdAt":"2023-03-16T12:25:46Z","labels":[],"number":10,"repository":"sablier-labs/docs","state":"closed","title":"Redirects for V1 URLs","type":"issue","updatedAt":"2023-06-26T10:35:55Z","url":"https://github.com/sablier-labs/docs/issues/10"},{"author":"PaulRBerg","body":"Rewrite the V1 [FAQ](https://docs.sablier.finance/protocol/faq/basics) in light of Sablier V2.","createdAt":"2023-03-15T18:16:45Z","labels":[],"number":8,"repository":"sablier-labs/docs","state":"closed","title":"FAQ","type":"issue","updatedAt":"2023-06-26T10:35:11Z","url":"https://github.com/sablier-labs/docs/issues/8"},{"author":"PaulRBerg","body":"- [x] Subgraphs\r\n    - [x] Overview\r\n    - [x] GraphQL Entities\r\n    - [x] Sample Queries","createdAt":"2023-03-15T18:16:20Z","labels":[],"number":7,"repository":"sablier-labs/docs","state":"closed","title":"APIs","type":"issue","updatedAt":"2023-07-10T12:53:25Z","url":"https://github.com/sablier-labs/docs/issues/7"},{"author":"PaulRBerg","body":"- [x] Overview\r\n- [x] Deployment Addresses\r\n- [x] Guides\r\n    - [x] Configure Your Local Environment\r\n    - [x] Create a Stream\r\n        - [x] Lockup Linear\r\n        - [x] Lockup Dynamic\r\n    - [x] Stream Management\r\n        - [x] Set Up Your Contract\r\n        - [x] Withdraw from Stream\r\n        - [x] Cancel Stream\r\n        - [x] Renounce Stream\r\n        - [x] Transfer Ownership\r\n     - [x] Proxy architecture\r\n         - [x] Overview\r\n         - [x] Deploy\r\n         - [x] Single stream\r\n         - [x] Batch stream\r\n    - [x] Implement Hooks\r\n    - [x] Flash Loans\r\n- [x] Technical Reference\r\n    - [x] Overview\r\n    - [x] Core\r\n    - [x] Periphery\r\n    - [x] Access Control\r\n    - [x] Errors","createdAt":"2023-03-15T18:15:17Z","labels":[],"number":6,"repository":"sablier-labs/docs","state":"closed","title":"Contracts","type":"issue","updatedAt":"2023-08-02T21:20:27Z","url":"https://github.com/sablier-labs/docs/issues/6"},{"author":"PaulRBerg","body":"- [x] What is Sablier?\r\n- [x] Sablier Protocol\r\n- [x] Concepts\r\n    - [x] Streaming\r\n    - [x] Types of Streams\r\n    - [x] Segments\r\n    - [x] NFT\r\n    - [x] Statuses\r\n    - [x] Hooks\r\n    - [x] Fees\r\n    - [x] Flash Loans\r\n- [x] Governance\r\n- [x] Use Cases\r\n- [x] Glossary","createdAt":"2023-03-15T18:12:37Z","labels":[],"number":5,"repository":"sablier-labs/docs","state":"closed","title":"Concepts","type":"issue","updatedAt":"2023-06-29T10:00:33Z","url":"https://github.com/sablier-labs/docs/issues/5"},{"author":"PaulRBerg","body":"I got the `autogen.sh` script in a pretty good shape, but it still suffers from a number of bugs and missing features:\r\n\r\n- [x] See discussion below; ~Events are not hyperlinked, e.g. `{TransferAdmin} event` should be turned into `[TransferAdmin][URL] event`~\r\n- [x] Core references in Periphery are not hyperlinked, e.g. `{ISablierV2Lockup.cancel}` should be turned into `[ISablierV2Lockup.cancel][URL]#cancel`\r\n- [ ] There are many stale `_` italics that we don't want (for context, see https://github.com/foundry-rs/foundry/issues/4540)\r\n- [ ] Where it says \"See the documentation in ...\", we should put the actual referenced documentation (this might be easier to do once `@inheritdoc` becomes usable with contracts: https://github.com/ethereum/solidity/issues/14045)","createdAt":"2023-03-15T18:10:23Z","labels":["effort: high","priority: 3","type: perf","work: complicated","type: refactor"],"number":4,"repository":"sablier-labs/docs","state":"open","title":"Polish autogen script","type":"issue","updatedAt":"2024-12-16T16:06:40Z","url":"https://github.com/sablier-labs/docs/issues/4"},{"author":"PaulRBerg","body":"The `esas` variable in [this equation](https://github.com/sablierhq/v2-docs/blob/a50ea41d18239fef95cf67ec2860c35d8c39b6f1/docs/contracts/v2/reference/core/contract.SablierV2LockupPro.md#streamedamountof) in the `SablierV2LockupPro` contract should be rewritten to use [sigma summation](https://www.mathsisfun.com/algebra/sigma-notation.html) notation:\r\n\r\n<img width=\"742\" alt=\"Screenshot 2023-03-15 at 8 09 43 PM\" src=\"https://user-images.githubusercontent.com/8782666/225403533-51b5b5f3-e150-4722-8607-c66d63c6853f.png\">\r\n","createdAt":"2023-03-15T18:09:54Z","labels":[],"number":3,"repository":"sablier-labs/docs","state":"closed","title":"Use sigma sum notation for `esas`","type":"issue","updatedAt":"2023-03-17T20:44:25Z","url":"https://github.com/sablier-labs/docs/issues/3"},{"author":"PaulRBerg","body":"What we should do:\r\n\r\n- [ ] Design the landing page\r\n- [ ] Use our primary color less often (e.g. don't use it in hyperlinks anymore)\r\n\r\nPotential inspiration:\r\n\r\n- [Uniswap Docs](https://docs.uniswap.org/)\r\n- [Balancer Docs](https://docs.balancer.fi/)\r\n- [0x Docs](https://0x.org/docs/)","createdAt":"2023-03-15T18:05:35Z","labels":[],"number":2,"repository":"sablier-labs/docs","state":"closed","title":"Prettify the website","type":"issue","updatedAt":"2023-07-06T21:23:23Z","url":"https://github.com/sablier-labs/docs/issues/2"},{"author":"razgraf","body":"We added cliffs where cliff duration isn't coordinated to cliff amount for most of our cliff shapes, but missed the `dynamicCliffExponential` extension.","createdAt":"2025-02-15T12:34:21Z","labels":["priority: 2","effort: medium"],"number":1429,"repository":"sablier-labs/interfaces","state":"closed","title":"Add customized cliff to the cliff-exponential shape","type":"issue","updatedAt":"2025-03-24T12:28:19Z","url":"https://github.com/sablier-labs/interfaces/issues/1429"},{"author":"PaulRBerg","body":"Paying customer!\n\nThey'll pay the $200 base fee + PAYG\n\nhttps://etherscan.io/address/0x6f40d4a6237c257fff2db00fa0510deeecd303eb","createdAt":"2025-02-13T20:01:03Z","labels":["priority: 0","effort: low"],"number":1425,"repository":"sablier-labs/interfaces","state":"closed","title":"Exempt the Fluid token address from fees","type":"issue","updatedAt":"2025-02-14T15:28:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1425"},{"author":"PaulRBerg","body":"In https://github.com/sablier-labs/interfaces/issues/1115, we implemented different max group sizes for each chain.\n\nHowever, block gas limits are not static. They change depending upon demand for blockspace (because of EIP-1559), and other business reasons, e.g. Base pushing for higher TPS. The block gas limit on Base gets updated quite [frequently](https://x.com/base/status/1889783240342348113/photo/1) — at least once every month:\n\n<img width=\"500\" src=\"https://github.com/user-attachments/assets/5b484961-1b40-4093-8750-4708ddf8f845\"/>\n\nThus, to avoid manual updates of the gas limit and other potential inconveniences (e.g. reverting user txs), we should use an API/ RPC call to query the block gas limit.\n\nI imagine that there should be an RPC method for this, but I'm not sure.","createdAt":"2025-02-13T17:37:40Z","labels":["priority: 2","resolution required","effort: low","type: perf","work: clear"],"number":1424,"repository":"sablier-labs/interfaces","state":"closed","title":"Query block block gas limits from API/RPC","type":"issue","updatedAt":"2025-05-05T09:12:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1424"},{"author":"PaulRBerg","body":"We need a section with our pricing tiers for the sender subsidy billing model so that:\n\n1. Senders can get clarity on billing without having to reach out in private.\n2. Minimize the back-and-forth on Telegram (for Nick, Max, and I).\n\nNote that these tiers are different from the [product-based subscription model](https://github.com/sablier-labs/company-discussions/discussions/101), which would use Stripe and involve Sablier Pro features. It is possible that the sender subsidy tiers will get subsumed by the Sablier Pro tiers, i.e., the plans for the latter will include subsidies.\n\n- [ ] Copyright and pricing logic (@PaulRBerg will handle this)\n- [ ] Design and implementation (@razgraf and @gavriliumircea)\n\n<details><summary>Toggle to see inspiration from Dune</summary>\n<p>\n\nI really like [Dune's pricing page](https://dune.com/pricing):\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/5477f9bc-c413-4822-abab-71bf7c74ca06\"/>\n\n</p>\n</details> \n<details><summary>Toggle to see chat</summary>\n<p>\n\n![Image](https://github.com/user-attachments/assets/aefbab30-16bd-402a-8251-2b8aa2261f15)\n\n</p>\n</details> ","createdAt":"2025-02-12T15:57:28Z","labels":[],"number":1421,"repository":"sablier-labs/interfaces","state":"closed","title":"Pricing page for sender subsidies","type":"issue","updatedAt":"2025-02-17T13:56:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1421"},{"author":"PaulRBerg","body":"I agree with @sneg55 that we should consider adding support for SubQuery (indexer) so that we can sell the $30k deployments to more chains.\n\nNote: not a priority now\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d9b5e0ef-2ff6-4eeb-9a87-1b2273228f82\" />","createdAt":"2025-02-12T14:14:17Z","labels":["type: feature","priority: 3","effort: epic","work: complicated"],"number":1419,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for SubQuery indexers to be able to support more chains","type":"issue","updatedAt":"2025-02-12T16:14:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1419"},{"author":"PaulRBerg","body":"See Haseeb's [tweet](https://x.com/hosseeb/status/1889019797263839632?s=52):\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/6f112e66-6762-471b-9b85-0203c9b54251\"/>","createdAt":"2025-02-11T15:10:58Z","labels":["type: feature","priority: 3","resolution required","effort: high","work: clear"],"number":1417,"repository":"sablier-labs/interfaces","state":"closed","title":"Enable Dragonfly token vesting shape \"ramp\"","type":"issue","updatedAt":"2025-02-13T16:11:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1417"},{"author":"PaulRBerg","body":"No explanation needed. Our Treasury Safes:\n\n- Ethereum: 0x8b1dD8774373729B7755202079F52D8c7444D335\n- Arbitrum: 0x87f41e25144041a88B0f57BAb9101e89d50c2dB1","createdAt":"2025-02-06T16:33:50Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1412,"repository":"sablier-labs/interfaces","state":"closed","title":"Exclude Sablier sender addresses from being subject to paying Sablier fees","type":"issue","updatedAt":"2025-02-13T10:09:22Z","url":"https://github.com/sablier-labs/interfaces/issues/1412"},{"author":"PaulRBerg","body":"It is not the duty of the sender to withdraw on behalf of the recipient. Doing so allows the recipient to block the tx by e.g. sending it to a blacklisted USDC users.\n\nThis is just a matter of UX since the sender can simply Void, and Refund later (in a separate tx) without withdrawing.\n\nHowever, we shouldn't suggest this feature in the first place. So it should be refactored to \"Void and refund\" — and it should be available only when the refundable amount is non-zero. Otherwise, it should be grayed out — as explained here: https://github.com/sablier-labs/interfaces/issues/1410.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/8e720fcf-cab3-45e8-861f-727b7a16c962\" />\n\n","createdAt":"2025-02-06T16:22:52Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1411,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor \"Void, withdraw, and refund\" to just \"Void and refund\"","type":"issue","updatedAt":"2025-02-13T10:09:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1411"},{"author":"PaulRBerg","body":"Zero-amount refunds are not allowed:\n\nhttps://github.com/sablier-labs/flow/blob/e55cabae6971f8220c96fe1fc37cf2cc811ca49f/src/SablierFlow.sol#L704-L708\n\nDitto for zero-amount withdrawals:\n\nhttps://github.com/sablier-labs/flow/blob/e55cabae6971f8220c96fe1fc37cf2cc811ca49f/src/SablierFlow.sol#L802-L813\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/08e8ff13-09d9-488a-8294-73a46fef69a0\" />\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1d021546-a3e4-4597-82b9-7c77bda65e66\" />","createdAt":"2025-02-06T16:19:25Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1410,"repository":"sablier-labs/interfaces","state":"closed","title":"When either the refundable amount or the withdrawable amount is zero, the \"Void, withdraw, and refund\" option should be grayed out","type":"issue","updatedAt":"2025-02-13T10:09:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1410"},{"author":"PaulRBerg","body":"Using the [Metaverse](https://app.sablier.com/airdrops/campaign/0x58d32678f3b0ff0067c56eb13029083041a65fda-1/) campaign as an example.\n\n- [x] Say \"$HQ Airdrop\" instead of \"Distributing $HQ in\"\n    - Airdrop is clearer and more dopaminergic than \"Distributing\"\n    - Not all campaign names might fit the \"distributing TOKEN in ...\" syntax\n- [x] Say \"app.sablier.com\" instead of \"www.sablier.com\" (the app is a more actionable URL)\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/4c7c1bdb-1490-4e3e-8042-770b1a00ef7a\"/>","createdAt":"2025-02-05T20:18:00Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1406,"repository":"sablier-labs/interfaces","state":"closed","title":"Copyright suggestions for the social media preview for airdrops","type":"issue","updatedAt":"2025-02-13T10:09:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1406"},{"author":"PaulRBerg","body":"Similar to https://github.com/sablier-labs/interfaces/issues/1358 but for the HTML title\n\nI'm not sure if this is a caching issue, but the contract address still appears in the social media preview:\n\nhttps://metatags.io/?url=https%3A%2F%2Fapp.sablier.com%2Fairdrops%2Fcampaign%2F0x9f519f71d4c034d61a1e754d3a971e85614fdec2-1%2F\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/43a02fc8-886f-4ce9-af43-570bb8da0626\" />","createdAt":"2025-02-05T20:11:53Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1405,"repository":"sablier-labs/interfaces","state":"closed","title":"Use airdrop campaign name for the HTML title indexed by Google and socials","type":"issue","updatedAt":"2025-02-13T10:09:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1405"},{"author":"PaulRBerg","body":"As an alternative to the sender address exemption rule, it would be helpful to also exempt users by token address.\n\nSharing an excerpt from a conversation with Thrilok Kumar, from Fluid:\n\n<img width=\"1043\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f76c4baf-8f54-4f68-b685-9ee07310bbe3\" />","createdAt":"2025-02-05T16:25:01Z","labels":["type: feature","priority: 1","effort: medium"],"number":1404,"repository":"sablier-labs/interfaces","state":"closed","title":"Exempt fees by token address","type":"issue","updatedAt":"2025-02-06T16:35:52Z","url":"https://github.com/sablier-labs/interfaces/issues/1404"},{"author":"PaulRBerg","body":"The reason is simple — more dopamine.\n\n<img width=\"256\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/382108e6-eb0e-434e-bb5d-a33ce7573a8c\" />","createdAt":"2025-02-04T17:22:15Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1403,"repository":"sablier-labs/interfaces","state":"closed","title":"Say \"Airdrop\" instead of \"Campaign\" in browser tab title","type":"issue","updatedAt":"2025-02-13T10:09:21Z","url":"https://github.com/sablier-labs/interfaces/issues/1403"},{"author":"PaulRBerg","body":"## Problem\n\nWhen creating an airdrop, users have to scroll back to the top. This is especially problematic for users with small devices.\n\nIt's also a bit odd to have two \"Continue\" buttons in the same area (top-right corner). One of them would be much better suited at the bottom of the form.\n\nhttps://github.com/user-attachments/assets/3ae1a149-996d-46a0-93e2-f1d0cfb3c98a\n\n## Solution\n\nAdd the \"Continue\" button at the bottom of the airdrop creation form.\n\nPutting it there would enable a smooth and continuous UX.","createdAt":"2025-02-04T17:05:31Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1402,"repository":"sablier-labs/interfaces","state":"closed","title":"Display \"Continue\" button at the bottom of the airdrop creation form","type":"issue","updatedAt":"2025-02-13T10:09:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1402"},{"author":"PaulRBerg","body":"## Problem\n\nTwo words are used to refer to the campaign admin:\n\n1. Admin\n2. Manager\n\ne.g. in the Search Modal, it's called admin:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3d34b416-f73d-4c16-bc57-3fda6d83b000\" />\n\nbut in the airdrop profile, it's called manager:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ea19454c-63a7-4c42-a887-7f6a11ad7ea8\" />\n\n## Solution\n\nFor semantic consistency, we should use only one term. I've a slight preference for using admin since that's what the contracts use, but it's low preference.","createdAt":"2025-02-04T17:02:26Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1401,"repository":"sablier-labs/interfaces","state":"closed","title":"Consistent terminology for the airdrop campaign admin","type":"issue","updatedAt":"2025-02-18T08:36:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1401"},{"author":"PaulRBerg","body":"_Low-priority and low-preference, feel free to close if you disagree._\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9d45a1df-e1d1-427c-9bc9-2742ff5a9427\" />","createdAt":"2025-02-04T16:58:30Z","labels":["priority: 3","resolution required","effort: low","type: style","work: clear"],"number":1400,"repository":"sablier-labs/interfaces","state":"closed","title":"Highlight with a color the \"Show results\" button in the Search modal","type":"issue","updatedAt":"2025-02-18T16:11:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1400"},{"author":"PaulRBerg","body":"_Low-priority and low-preference, feel free to close if you disagree._\n\nI find the extra `0` unhelpful\n\n<img width=\"472\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4fe59f49-0ae5-42f2-9336-7c7895f171bf\" />","createdAt":"2025-02-04T15:58:19Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1398,"repository":"sablier-labs/interfaces","state":"closed","title":"Nitpick: remove the \"0\" from single-digit days in dates","type":"issue","updatedAt":"2025-02-13T15:50:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1398"},{"author":"PaulRBerg","body":"Smol QoL improvement in the airdrop creation form:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6cc03ed2-9cb5-498b-8643-46436717af9e\" />","createdAt":"2025-02-04T15:57:01Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1397,"repository":"sablier-labs/interfaces","state":"closed","title":"Do not destroy data even if user clicks on \"Replace import\"","type":"issue","updatedAt":"2025-02-10T13:51:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1397"},{"author":"razgraf","body":"https://x.com/solidintel_x/status/1886778799938793791?s=46&t=VYM6cpSayUkPRiVfjoKB-Q","createdAt":"2025-02-04T14:19:49Z","labels":[],"number":1395,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for Berachain (February 6)","type":"issue","updatedAt":"2025-02-10T12:12:38Z","url":"https://github.com/sablier-labs/interfaces/issues/1395"},{"author":"PaulRBerg","body":"I noticed that when the stream URL contains the contract address (as opposed to the `LK-*` alias), the browser tab gets set to the contract address.\n\nFor consistency and clarity, we should keep using the alias in the browser title.\n\n<img width=\"263\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4a984be3-2463-4b8a-a18f-82703a6b14f4\" />","createdAt":"2025-02-03T17:01:55Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1394,"repository":"sablier-labs/interfaces","state":"closed","title":"Use alias for the browser title in the stream profile page even when the contract address is used","type":"issue","updatedAt":"2025-02-18T08:36:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1394"},{"author":"PaulRBerg","body":"After https://github.com/sablier-labs/interfaces/issues/1390 gets implemented, we should add an explainer atop the duration field, which explains to users the 'relativity' of non-ranged airstreams.\n\ni.e. that the vesting is relative to the claim time of each user","createdAt":"2025-02-03T12:28:45Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1391,"repository":"sablier-labs/interfaces","state":"closed","title":"Non-ranged airstreams should be explained","type":"issue","updatedAt":"2025-02-10T13:51:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1391"},{"author":"PaulRBerg","body":"Simply put, ranged airstreams (same vesting schedule for everyone) make more sense.\n\nMany of our users have actually assumed that the vesting had been ranged — only to find out later the vesting is relative to each user's claim time.\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/48c80666-2a46-4575-be0b-a56f96291e65\" />","createdAt":"2025-02-03T12:27:52Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1390,"repository":"sablier-labs/interfaces","state":"closed","title":"Ranged airstreams should be the default","type":"issue","updatedAt":"2025-02-10T14:06:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1390"},{"author":"PaulRBerg","body":"Instant airdrops are self-explanatory. They don't need any tutorial — in fact, we don't have any tutorial for Instant airdrops. We only have a tutorial for Airstreams.\n\nSo let's remove this section from the claim page:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/858e9eac-a6b0-4a6a-8870-dbaca0e2eea7\" />","createdAt":"2025-02-03T12:18:51Z","labels":["priority: 0","effort: low","type: refactor","work: clear"],"number":1388,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove \"Watch Tutorial\" card from Instant airdrops","type":"issue","updatedAt":"2025-02-04T16:03:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1388"},{"author":"PaulRBerg","body":"I have to scroll to see the \"Report Problem\" button\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/76857e9d-eda3-43d1-8948-097816079b57\" />","createdAt":"2025-02-03T11:48:15Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1387,"repository":"sablier-labs/interfaces","state":"closed","title":"Make success and error icons smaller so that buttons can be seen on 13\" devices","type":"issue","updatedAt":"2025-02-13T10:09:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1387"},{"author":"PaulRBerg","body":"## Vesting\n\nSomething like:\n\n```text\nhttps://app.sablier.com/vesting/stream/LL3-42161-25038?sidebarWithdraw=true\n```\n\nWould open the stream profile with the withdraw sidebar preloaded.\n\n## Airdrops\n\nSomething like:\n\n```text\nhttps://app.sablier.com/airdrops/campaign/0xed46df4382624f307ae2a9fefdcc9806cf7384e7-8453?sidebarClaim=true\n```\n\nWould open the airdrop campaign with the claim sidebar preloaded.\n\n## Note\n\nI named the parameter `sidebarWithdraw` so that the same feature can later be used for preloading other sidebars.","createdAt":"2025-02-03T11:07:05Z","labels":["type: feature","priority: 3","effort: medium"],"number":1386,"repository":"sablier-labs/interfaces","state":"open","title":"Preload the withdraw and the claim sidebars through an URL param","type":"issue","updatedAt":"2025-02-03T12:33:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1386"},{"author":"PaulRBerg","body":"### As discussed in https://github.com/sablier-labs/interfaces/discussions/1381\n\nIn the withdraw and claim transaction contexts, do this:\n\n- Detect if a Safe multisig wallet is connected\n- If it is, recommend to the user to switch to the signer EOA for faster processing\n- For convenience, we should provide the user with a clickable button that redirects to the normal URL of the app (non-Safe), and with the withdraw sidebar opened\n- The ETH fee would be charged no matter what\n\nOn the copyright:\n\n- Be transparent about the Sablier fee and that processing via the Safe would require them to load the multisig with ETH\n- Explain that using the Signer EOA would benefit them, too. They will save time and even money by paying less in gas costs. And at least on Ethereum Mainnet, the Sablier fee should be smaller than what they pay for executing a multisig tx.\n","createdAt":"2025-02-03T11:03:15Z","labels":["type: feature","priority: 0","effort: high","work: complicated"],"number":1385,"repository":"sablier-labs/interfaces","state":"closed","title":"Recommend using signer EOA when Safe wallet is detected in withdraw/claim context","type":"issue","updatedAt":"2025-02-17T21:08:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1385"},{"author":"PaulRBerg","body":"To avoid confusions like this:\n\n![image](https://github.com/user-attachments/assets/c1eb9038-3bf7-4ceb-9c6e-2ba4a097993c)","createdAt":"2025-02-02T13:58:07Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1384,"repository":"sablier-labs/interfaces","state":"closed","title":"Hide start time in Timelock streams","type":"issue","updatedAt":"2025-02-10T13:51:58Z","url":"https://github.com/sablier-labs/interfaces/issues/1384"},{"author":"PaulRBerg","body":"<img width=\"350\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/45d40aec-0407-4bb8-98e4-f5b2f46c680d\" />","createdAt":"2025-02-02T12:40:23Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1380,"repository":"sablier-labs/interfaces","state":"closed","title":"Text overlays graphic when browser width is small-ish","type":"issue","updatedAt":"2025-02-13T10:09:22Z","url":"https://github.com/sablier-labs/interfaces/issues/1380"},{"author":"PaulRBerg","body":"\"Pick this\" is squeezed on the left-hand side.\n\n<img width=\"257\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3714b2b1-dae9-4fd9-ada8-a15f240c33c7\" />","createdAt":"2025-02-02T12:36:56Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1378,"repository":"sablier-labs/interfaces","state":"closed","title":"Weird text padding in \"Linear\" and \"Cliff\" shapes when browser width is small-ish","type":"issue","updatedAt":"2025-02-13T10:09:22Z","url":"https://github.com/sablier-labs/interfaces/issues/1378"},{"author":"PaulRBerg","body":"When the browser width is small-ish, a better place for the \"Upload CSV\" card would be at the top, above \"General Details\".\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/02fdcbdb-22e8-400f-bdd7-42e1a0c1aac3\" />","createdAt":"2025-02-02T12:35:54Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1377,"repository":"sablier-labs/interfaces","state":"closed","title":"Move \"Upload CSV\" card to the top when the screen width is small-ish","type":"issue","updatedAt":"2025-02-13T10:09:21Z","url":"https://github.com/sablier-labs/interfaces/issues/1377"},{"author":"PaulRBerg","body":"This code might be a vestige from the times when we had a different UI for single vs group stream creation.\n\nhttps://github.com/sablier-labs/interfaces/tree/58f41120ec88c3de999057486abbdef6d4d7086e/apps/client/src/components/organisms/Summary/Item\n\nIt's unhelpful — I wanted to modify something in the Summary card, and I bumped into this code, wondering why we still have it.\n\nAlso, I suggest renaming `Summary/Group` or getting rid of the `Group` classification.","createdAt":"2025-02-02T12:27:53Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1376,"repository":"sablier-labs/interfaces","state":"closed","title":"Delete unused \"Summary/Item\" code","type":"issue","updatedAt":"2025-02-05T12:50:09Z","url":"https://github.com/sablier-labs/interfaces/issues/1376"},{"author":"PaulRBerg","body":"<img width=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/845b6fe8-3f71-4580-902c-a9a1b5c11d7f\" />","createdAt":"2025-02-02T12:12:45Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1375,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor \"Stream details\" into \"Vesting details\" in airdrop creation form","type":"issue","updatedAt":"2025-02-13T10:09:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1375"},{"author":"PaulRBerg","body":"Base is our most popular chain for airdrops. We should display \"Explore Base\" here so that our users can look at more examples:\n\n<img width=\"635\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ed1743ab-d57e-409e-8ec0-a67845d1255c\" />\n\nThis is for Airdrops only. We can keep using Ethereum for Vesting and Payments.","createdAt":"2025-02-02T12:05:39Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1374,"repository":"sablier-labs/interfaces","state":"closed","title":"Change \"Explore Ethereum\" to \"Explore Base\"","type":"issue","updatedAt":"2025-02-18T08:36:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1374"},{"author":"PaulRBerg","body":"Make the \"Recipient\" field the first input in the Flow stream creation form\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/30f2b239-8c2e-4c1b-96f1-bce3226eebd9\" />","createdAt":"2025-02-02T12:03:03Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1373,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the \"Recipient\" field the first input in the Flow stream creation form","type":"issue","updatedAt":"2025-02-10T13:51:58Z","url":"https://github.com/sablier-labs/interfaces/issues/1373"},{"author":"PaulRBerg","body":"Locales structs are meant to be reusable in multiple contexts, and the name of the struct should correlate strongly with the content, e.g. `fooBar` should be `Foo is bar`.\n\nThese are non-structs:\n\n\nhttps://github.com/sablier-labs/interfaces/blob/035c70ded22dc85402e0aa45d233e659c9b4075d/packages/locales/src/client/en/common.json#L1606\n\nhttps://github.com/sablier-labs/interfaces/blob/035c70ded22dc85402e0aa45d233e659c9b4075d/packages/locales/src/client/en/common.json#L1612","createdAt":"2025-02-02T10:37:16Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1372,"repository":"sablier-labs/interfaces","state":"open","title":"Non-structs found in the \"structs\" object in locales","type":"issue","updatedAt":"2025-02-02T10:37:16Z","url":"https://github.com/sablier-labs/interfaces/issues/1372"},{"author":"PaulRBerg","body":"- [ ] Remove \"Excluding gas\" explainer tooltip because now we have the \"About fees\" card\n- [ ] In all transaction submission forms, add an estimate of the total fees paid by the user\n   - In withdrawals and claims, the fee line will be non-zero\n   - In all other txs, it will be zero\n\nUniswap's UI is perfect and exactly what we need (hover over the 'i' icon to see what I mean):\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0d7dc718-24bc-44dc-8a41-4752e34f7edf\" />\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/7533c1ef-3339-4ad2-8b90-be3756f8d9e1\" />","createdAt":"2025-02-01T15:35:23Z","labels":["type: feature","priority: 1","effort: high","type: style","work: clear"],"number":1371,"repository":"sablier-labs/interfaces","state":"open","title":"Include data about network fees in all transaction forms","type":"issue","updatedAt":"2025-02-01T15:42:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1371"},{"author":"PaulRBerg","body":"## Problem\n\nErrors are a fact of life in software and business, so it doesn't matter what we do and how many 10x devs we hire, our RPC servers and APIs will go down.\n\nIn this situation, users will be confused and annoyed.\n\n## Solution\n\nA simple informational banner (exactly where is placed I will leave it to design guru @razgraf to figure out) will go a long way toward:\n\n1. Assuaging users\n2. Lowering the mayhem in our Crisp Chat support channels, Telegram, etc.\n\nPotential inspiration from Alchemy:\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/b0abb22d-f33f-4a4b-a065-cf6a4d0ee023\"/>\n\nP.S. ideally, we would have an automated way of detecting if an RPC/chain is down. However, I imagine that that's complicated and not worth the development cost, so we can just do it manually to begin with.","createdAt":"2025-01-31T18:46:28Z","labels":["type: feature","priority: 2","effort: medium"],"number":1367,"repository":"sablier-labs/interfaces","state":"closed","title":"Banner for downtime and degraded performance","type":"issue","updatedAt":"2025-02-13T16:02:21Z","url":"https://github.com/sablier-labs/interfaces/issues/1367"},{"author":"PaulRBerg","body":"In a similar vein to https://github.com/sablier-labs/v2-interfaces/issues/1315, it'd be nice to allow airdrop creators to customize the social media preview displayed when users access their campaign URL.\n\nWe can make this be a paid feature just like the other one.\n\nAt the moment, the preview looks something like this:\n\n<img width=\"500\" src=\"https://github.com/user-attachments/assets/9a45d5cf-630f-477f-860c-6e2cdfa4d2d4\"/>\n\nI propose two things:\n\n- [ ] Allowing the image on the right half to be customized by the user\n- [ ] Adding \"Powered by\" before the Sablier logo\n\n","createdAt":"2025-01-31T13:54:24Z","labels":["type: feature","backlog","resolution required","effort: medium","work: clear"],"number":1363,"repository":"sablier-labs/interfaces","state":"open","title":"Ability to customize social media preview for airdrop campaigns","type":"issue","updatedAt":"2025-02-10T16:00:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1363"},{"author":"razgraf","body":"Since this error is so common (because of Wallet Connect) we should add a note when we can catch it about it probably being related to WC and suggest the user reconnects their wallet to the app or tried from a desktop browser/extension.\n\n![Image](https://github.com/user-attachments/assets/a7da7462-5862-4140-94ce-67e3085121f8)","createdAt":"2025-01-31T12:01:02Z","labels":["type: chore"],"number":1362,"repository":"sablier-labs/interfaces","state":"open","title":"Intercept `chain: undefined` error and mention the user reconnects","type":"issue","updatedAt":"2025-02-03T11:44:48Z","url":"https://github.com/sablier-labs/interfaces/issues/1362"},{"author":"PaulRBerg","body":"Unlike in Vesting, the first row in the airdrop CSV engine does not support comments:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3d84b82c-d56c-4565-b513-accaf248013d\" />","createdAt":"2025-01-31T11:41:34Z","labels":["type: feature","priority: 3","effort: high","work: clear"],"number":1361,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow first row to be comment in airdrop CSV template","type":"issue","updatedAt":"2025-01-31T14:50:34Z","url":"https://github.com/sablier-labs/interfaces/issues/1361"},{"author":"PaulRBerg","body":"Better UX and SEO by using the campaign name for the browser tab title:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9dc6a701-b8b8-47a2-a3c7-ef3d3c51b3dd\" />","createdAt":"2025-01-30T18:53:29Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1358,"repository":"sablier-labs/interfaces","state":"closed","title":"Use airdrop campaign name for browser tab title","type":"issue","updatedAt":"2025-02-01T11:45:06Z","url":"https://github.com/sablier-labs/interfaces/issues/1358"},{"author":"PaulRBerg","body":"Attempting to overfund an airdrop campaign displays an incorrect text in the warning:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/21d7d297-283d-4405-8c3c-b884bfb5c1ee\" />","createdAt":"2025-01-30T18:38:25Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1357,"repository":"sablier-labs/interfaces","state":"closed","title":"Incorrect text when overfunding campaign","type":"issue","updatedAt":"2025-01-31T18:11:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1357"},{"author":"PaulRBerg","body":"Smol QoL feature\n\n<img width=\"700\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/344cc325-979d-4b4b-b550-1fd631b3155d\" />\n\nSimilar to:\n\n<img width=\"201\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2dd94f5e-495f-4675-92ad-3ca34e31f2c7\" />","createdAt":"2025-01-30T17:25:02Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1356,"repository":"sablier-labs/interfaces","state":"closed","title":"Show status as \"Deployed\" after airdrop contract is deployed","type":"issue","updatedAt":"2025-02-10T13:51:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1356"},{"author":"PaulRBerg","body":"QoL feature\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6bda219c-286e-48d2-b2c5-fba8340291ac\" />","createdAt":"2025-01-30T17:18:56Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1355,"repository":"sablier-labs/interfaces","state":"closed","title":"Ability to copy airdrop contract address button after deployment","type":"issue","updatedAt":"2025-02-10T13:51:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1355"},{"author":"PaulRBerg","body":"https://github.com/user-attachments/assets/f3475d28-990b-4e4b-8d5c-2e38ee6148d7","createdAt":"2025-01-30T16:55:06Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1354,"repository":"sablier-labs/interfaces","state":"closed","title":"Clicking on \"Manual Setup\" should not destroy the parsed airdrop data","type":"issue","updatedAt":"2025-02-10T13:51:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1354"},{"author":"PaulRBerg","body":"_Low-priority and low-preference, feel free to close if you disagree._\n\nI think the notification popup could be:\n\n- Bigger\n- More contrasting with the rest of the design, i.e., the background color of the popup should differentiate more compared to the page's background color\n\n<img width=\"700\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d91c6c78-9952-417b-9bba-d1cf3b5e892e\" />","createdAt":"2025-01-30T16:33:41Z","labels":["priority: 3","effort: low","type: style","work: clear"],"number":1353,"repository":"sablier-labs/interfaces","state":"closed","title":"Make notification popup larger and increase the contrast between it and the rest of the page","type":"issue","updatedAt":"2025-02-13T16:22:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1353"},{"author":"PaulRBerg","body":"Refactor all of these references:\n\n```typescript\n_.capitalize(t(\"words.stream\"));\n```\n\nInto this:\n\n```typescript\nt(\"words.stream\", \"capitalized\");\n```\n\nPerhaps a regex would help here.\n\n<details><summary>See original proposal </summary>\n<p>\n\n## Problem\n\nWe are currently using Lodash to capitalize translations. There are many code snippets like this:\n\n```typescript\n<SomeComponent title={`Something Something ${_.capitalize(t(\"words.something\"))}`}>\n```\n\nThere are quite a few nested levels in this approach, and it's hard for humans to follow where each level starts and where it ends.\n\n## Solution\n\nIntroduce a new hook:\n\n```typescript\nimport { _ } from \"@sablier/mixins\";\nimport { useTranslation } from \"react-i18next\";\n\nexport function useTCapitalized() {\n  const { t } = useTranslation();\n  return (key, options) => _.capitalize(t(key, options));\n}\n```\n\nThat can then be imported and used like so:\n\n```typescript\nimport { useTCapitalized } from \"./i18n\";\n\nfunction MyComponent() {\n  const tc = useTCapitalized(); // alternatively: `tcap`\n\n  return (\n    <SomeComponent title={`Something Something ${tc(\"words.something\")}`}>\n      ...\n    </SomeComponent>\n  );\n}\n```\n\n</p>\n</details> ","createdAt":"2025-01-30T13:44:08Z","labels":["backlog","effort: high","type: perf","work: clear"],"number":1352,"repository":"sablier-labs/interfaces","state":"open","title":"Update capitalized translations formatting in client app","type":"issue","updatedAt":"2025-01-30T22:43:29Z","url":"https://github.com/sablier-labs/interfaces/issues/1352"},{"author":"PaulRBerg","body":"_I don't have a strong preference, so please feel free to close this if you don't like it._\n\nI feel like the `to ADDRESS` suffix is redundant here when the withdrawal address is identical with the transaction caller:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ee119414-d8d0-4b4f-8b8a-d553296ca318\" />","createdAt":"2025-01-30T12:57:17Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1351,"repository":"sablier-labs/interfaces","state":"closed","title":"Do not include redundant \"to\" in case of same withdrawal address (in Your Recent Activity)","type":"issue","updatedAt":"2025-02-10T13:51:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1351"},{"author":"PaulRBerg","body":"## Problem\n\nThe longer the list of supported chains grows, the harder it will be to maintain support for all of them.\n\nFor example, some chains will lag behind the EVM, and as a result, we won't be able to deploy our latest contracts.\n\n@andreivladbrg has [recently](https://sablier.slack.com/archives/CT3NXSNMS/p1738083563640949) bumped into this problem on IoTeX — they only support Solidity v0.8.23 and below, which generates a bytecode size that is over the contract size limit.\n\n## Solution\n\nImplement a mechanism for excluding some chains from any 'write' functionality, i.e., creating streams and airdrops.\n\nWhen a user is connected to an unsupported chain, and they open the create stream page:\n\n- All submit buttons should be grayed out\n- An explanatory model should describe the issue","createdAt":"2025-01-30T12:46:01Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1350,"repository":"sablier-labs/interfaces","state":"closed","title":"Ability to exclude some chains from the create functionality","type":"issue","updatedAt":"2025-01-31T14:22:45Z","url":"https://github.com/sablier-labs/interfaces/issues/1350"},{"author":"PaulRBerg","body":"It'd be nice to display a bespoke social media preview for these URLs:\n\n- `app.sablier.com/airdrops`\n- `app.sablier.com/airdrops/create`\n\n<img width=\"468\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f13b3d92-bb7c-482c-aff5-c6b308cb85f8\" />","createdAt":"2025-01-29T13:43:01Z","labels":["type: feature","backlog","work: clear"],"number":1349,"repository":"sablier-labs/interfaces","state":"open","title":"Bespoke social media preview for airdrop creation page","type":"issue","updatedAt":"2025-08-12T12:27:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1349"},{"author":"PaulRBerg","body":"We charge users in ETH and POL, but we want to charge fixed fees in USD.\n\nTo avoid using a third-party API (which may return incorrect information or may have rate limits), we could simply rely on Chainlink's [price feeds](https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=6). Doing so would not increase the backend complexity of the app.\n\nE.g. for Ethereum, we could query this contract [`0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419`](https://etherscan.io/address/0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419#readContract), specifically, the `latestAnswer` constant function.\n\nShould the RPC call fail, we can default to a hard-coded value.\n\nMaybe there's a way to include this call in a Multicall tx to lower the number of RPC interactions.","createdAt":"2025-01-29T11:02:30Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":1348,"repository":"sablier-labs/interfaces","state":"closed","title":"Use ChainLink as an oracle for ETH and POL price data","type":"issue","updatedAt":"2025-03-12T10:09:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1348"},{"author":"razgraf","body":"Right now the app considers any IFrame as being a Safe. This was the only way we could enable the Safe connector to take priority until now. As noticed by @gavriliumircea, wagmi updated the way they check if the interface is inside a Safe window. \n\nThe task is to update our own internal logic (specifically `isHostSafe`) to follow this new implementation. This would enable other users (e.g. Ultra) or apps (e.g. Impersonator) to access Sablier through an IFrame.","createdAt":"2025-01-28T17:14:36Z","labels":[],"number":1347,"repository":"sablier-labs/interfaces","state":"open","title":"Rewrite safe (`isHostSafe`) logic using the new wagmi standard","type":"issue","updatedAt":"2025-01-28T17:14:36Z","url":"https://github.com/sablier-labs/interfaces/issues/1347"},{"author":"PaulRBerg","body":"For maximum clarity, I suggest saying \"Vesting Duration\" here, instead of \"Stream Duration\":\n\n<img width=\"751\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5312ec63-790f-4362-a783-246fc613716e\" />\n\n1. Users may not know nor care what streams are.\n2. The duration can be misunderstood as the expiry of the campaign.","createdAt":"2025-01-27T14:36:09Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1345,"repository":"sablier-labs/interfaces","state":"closed","title":"Say \"Vesting Duration\" instead of \"Stream Duration\" in Airstream Other Details","type":"issue","updatedAt":"2025-01-28T13:16:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1345"},{"author":"razgraf","body":"I'm not sure I want to include all of them in the landing website (since it's too much ...we have like 6) so will do just one or two there, but maybe @smol-ninja we can include them in the README of the audits repository? Let me know if we can do it (it's an SVG with a link) and I'll send them over.\n\n\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1258\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **razgraf** December 17, 2024</sup>\n<img width=\"720\" alt=\"Screenshot 2024-12-17 at 01 46 41\" src=\"https://github.com/user-attachments/assets/3331b6ce-54e0-44b2-bfc7-49110864ba2f\" />\n</div>","createdAt":"2025-01-24T17:51:27Z","labels":[],"number":1344,"repository":"sablier-labs/interfaces","state":"closed","title":"Showcase Cantina's badge in our landing page","type":"issue","updatedAt":"2025-02-01T15:18:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1344"},{"author":"PaulRBerg","body":"Alphabetical ordering is great, but in this particular case, I think that testnets should appear at the bottom because the traffic on testnets is low + we're not generating any revenues from them.\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/56b79e8b-841c-4ae0-9b7a-8bef6acf50dc\" />","createdAt":"2025-01-24T14:46:44Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1342,"repository":"sablier-labs/interfaces","state":"closed","title":"Display testnets at the bottom of the chain dropdown","type":"issue","updatedAt":"2025-01-28T13:10:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1342"},{"author":"tukwan","body":"There have been some changes in Ahrefs IPs, and for the past few days it's encountering a [403 Forbidden error](https://app.ahrefs.com/site-audit/7006528/data-explorer?columns=pageRating%2Curl%2ChttpCode%2CpageType%2Crobots_error&filterId=b757391cf000af402fd4c24e9ff15149&issueId=91326507-26f0-4b4b-a680-bfdff5dd74c7&sorting=-pageRating).\n\n![Image](https://github.com/user-attachments/assets/c3b6cd83-c5a6-4367-bb03-606c38054826)\n\nI verified the urls in [Google Search Console](https://search.google.com/search-console/inspect?resource_id=sc-domain%3Asablier.com&id=tB_QsKVYiWGDFIncxakz6w&alt_id=3YouRuxxTKPi0WOQqetHTw&hl=en), and it's working properly.\n\n<details><summary>Details</summary>\n\n![Image](https://github.com/user-attachments/assets/8eded785-e5b9-42e7-b57b-c15abd6683b3)\n\n</details> \n\n\nThe issue is likely related to changes in Ahrefs IPs and our Cloudflare provider.\n<details><summary>Details</summary>\n\n![Image](https://github.com/user-attachments/assets/c455bc14-c375-4b8f-9607-7bcea549dd1b)\n\n</details> \n\nI don't have access to Cloudflare, so if someone can check it in their spare time, that would be helpful.\n  - https://help.ahrefs.com/en/articles/78658-what-is-the-list-of-your-ip-ranges\n  - https://help.ahrefs.com/en/articles/2515375-how-to-whitelist-ahrefs-ips-in-cloudflare\n\n\nIt's not urgent, as Google bots can still access the URLs. If Cloudflare isn't the issue, will investigate further or contact Ahrefs support.","createdAt":"2025-01-24T09:15:18Z","labels":["type: bug","priority: 3","topic: seo"],"number":1341,"repository":"sablier-labs/interfaces","state":"closed","title":"Ahrefs 403 Forbidden Error","type":"issue","updatedAt":"2025-02-01T15:31:30Z","url":"https://github.com/sablier-labs/interfaces/issues/1341"},{"author":"razgraf","body":"Since this is an important information for campaign creators we should include a note in the forms about claim fees being charged from recipients. This should point towards a page in our docs that further explains our own fee model (cc: @smol-ninja and @PaulRBerg would love to see a draft of this when you have the chance - I imagine there's going to be a page describing fees that can be taken e.g. broker etc. in general, and then a section on our own fee **values**).","createdAt":"2025-01-23T13:19:22Z","labels":[],"number":1339,"repository":"sablier-labs/interfaces","state":"closed","title":"Include fee explainer in the airdrop creation page","type":"issue","updatedAt":"2025-01-28T12:25:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1339"},{"author":"razgraf","body":"Before we merge and launch #1323 we need to update the stepper template.","createdAt":"2025-01-20T16:48:00Z","labels":[],"number":1334,"repository":"sablier-labs/interfaces","state":"closed","title":"Update `tranchedStepper` template to include `initial` before launch","type":"issue","updatedAt":"2025-01-30T17:57:09Z","url":"https://github.com/sablier-labs/interfaces/issues/1334"},{"author":"PaulRBerg","body":"## Problem\n\nWe lack a dashboard that aggregates metrics for particular token vesting campaigns, created by particular users.\n\n[There have been](https://github.com/sablier-labs/v2-interfaces/discussions/558) many feature requests for this.\n\n## Solution\n\n- [ ] Introduce a new dynamic page at the URL `/vesting/dashboard/CHAIN_ID/SENDER_ADDRESS/TOKEN_ADDRESS`\n- [ ] At the top of the page, the following informational cards are displayed:\n    - Active Streams (note: 'active' is equivalent to [warm](https://docs.sablier.com/concepts/lockup/statuses#temperature))\n    - Total Deposited\n    - Total Refundable\n    - Total Streamed\n    - Total Withdrawn\n    - Total Streamed but not Withdrawn\n- Each informational card contains a tooltip that provides additional explanations (on hover)\n- At the bottom of the page, there follows a dashboard (similar to the global dashboard under `/vesting`) that displays all the streams associated with this sender <> token pair\n\n### Notes\n\n- Naming can be settled later (the URL path doesn't have to be `/dashboard`)\n- Instead of including the `CHAIN_ID` in the URL, we could allow the user to toggle the chain. However, most tokens have unique addresses on each chain, so it would be a little redundant to ask users to manually pick the chain.\n\n## Inspiration\n\nHedgey offers this feature already. [Here's an example](https://app.hedgey.finance/grants/public/arbitrum/0x5a5c8da41220eef8e7f423f6e9028da5b9e70f8b/0x912ce59144191c1204e64559fe8253a0e49e6548).\n\n<img width=\"600\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d8d55941-b703-4b77-8300-023ab0b4e3e4\" />\n","createdAt":"2025-01-20T15:29:10Z","labels":["type: feature","priority: 1","effort: epic","work: clear"],"number":1332,"repository":"sablier-labs/interfaces","state":"open","title":"Analytics dashboard for basic aggregate metrics","type":"issue","updatedAt":"2025-06-19T11:49:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1332"},{"author":"PaulRBerg","body":"## Problem\n\nI was recently told by a potential user (Contango) that they have previously used the UI, but they missed the CSV feature. They also mentioned they were thinking to use TokenOps instead of our UI because of this reason (TokenOps supports CSV).\n\nI conjecture that Contango missed the CSV functionality because the UI is **displaying the current state instead of prompting the user to change to the other state**. There is no actionable button to prompt the user to change to CSV.\n\n## Solution\n\nIn the create stream forms:\n\n- [ ] Change `Mode: Manual` to `Use CSV` (or `Upload CSV`, copyright due to be decided later)\n- [ ] Change `Mode: CSV` to `Use Form`\n- [ ] Remove the `or` from the adjacent texts\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/283b8ea4-304c-4083-bd3a-0a29e3ef50b0\" />\n\nP.S. I have marked this as `priority: 1` because CSV users create many streams, and it'd be a shame to lose these users because of a lack of knowledge.\n\nP.P.S. I have also considered making the CSV the default stream creation option (to eliminate the risk of users missing this feature), but I then thought that most CSV users would first need to see what Sablier can do, and for demos the manual form works better.","createdAt":"2025-01-20T14:07:06Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1331,"repository":"sablier-labs/interfaces","state":"closed","title":"Make CSV switcher more actionable","type":"issue","updatedAt":"2025-01-28T13:10:20Z","url":"https://github.com/sablier-labs/interfaces/issues/1331"},{"author":"PaulRBerg","body":"## Problem\n\nI was looking at the _Attributes_ section of [this stream](https://app.sablier.com/vesting/stream/LL3-42161-24341/), specifically at the _Cliff (Ongoing)_ attribute:\n\n<img width=\"250\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4abff22c-8e0b-4401-b120-af829c6f6418\" />\n\nI find this unhelpful as it doesn't tell me when the cliff will be, and also confusing: \"6 months (24%)\"  can mean multiple things:\n\n1. How much of the cliff has elapsed already\n2. How much of the cliff is remaining until the cliff period is hit\n3. How much the cliff represents from the total duration\n\nMy initial guess was \"24%\" represented the 1st thing, but after checking, I noticed that it represents the 3rd thing.\n\nI conjecture that this will become even more confusing in Lockup v2.0, where the cliff will no longer be a linear function of time (it can be any amount whatsoever).\n\n## Solution\n\nInstead of letting the user calculate stuff, let's calculate the stuff for them. That is, display the cliff date — plain and simple. It's easy for a human to make mental calculations from bespoke dates to relative durations (from present time).\n\nSo, to continue with the example mentioned above, the task is to do this:\n\n- [ ] Display `Apr 15 '25 @ 5pm` instead of `6 months (24%)`\n- [ ] Remove `(Ongoing)` copyright","createdAt":"2025-01-20T12:45:50Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":1329,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove percentage for ongoing cliff in Attributes","type":"issue","updatedAt":"2025-01-28T12:27:52Z","url":"https://github.com/sablier-labs/interfaces/issues/1329"},{"author":"PaulRBerg","body":"Requested by Primex:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e68c9d65-ab26-438b-87bc-78efd5f71763\" />\n\nThis is a feature already supported by the contracts, so it's only a matter of implementing in the UI.\n\nP.S. it's nice to see that users having such an in-depth understanding of the product.","createdAt":"2025-01-20T11:44:01Z","labels":["type: feature","priority: 2","effort: high","work: clear"],"number":1328,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement cliff shape in Airstreams to allow airdrops with vesting period that starts at claim time","type":"issue","updatedAt":"2025-01-28T12:29:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1328"},{"author":"PaulRBerg","body":"A brilliant suggestion made by the Ultra.io team (a potential Sablier user interested in sponsoring a deployment to a new chain).\n\nI'll just paste the screenshot so that I don't have to re-explain it in my own words:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f8bf2f8d-7622-48b0-9ff5-4363df636c61\" />\n\nI have marked this as `priority: 1` because this particular seems quite adamant about being able to pre-select their chain, and I would like us to get paid for making the deployment 😅","createdAt":"2025-01-16T16:27:35Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1326,"repository":"sablier-labs/interfaces","state":"closed","title":"Make it possible to pre-select the chain using an URL param","type":"issue","updatedAt":"2025-01-27T15:56:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1326"},{"author":"smol-ninja","body":"If the stream duration is less than a day, the shape should display hourly legends on x-axis instead of daily. For example, a user created the following stream on 1 hr duration with 5 mins cliff.\n\n<img width=\"400\" alt=\"SCR-20250115-nsrn\" src=\"https://github.com/user-attachments/assets/ee4cc3e1-bfb5-4bea-8481-816b4cb0319b\" />","createdAt":"2025-01-16T11:33:21Z","labels":["type: bug","priority: 2","effort: medium","work: clear"],"number":1325,"repository":"sablier-labs/interfaces","state":"closed","title":"Issues with legends for streams with short duration","type":"issue","updatedAt":"2025-02-10T15:45:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1325"},{"author":"PaulRBerg","body":"We are not communicating the fact that a connected wallet is required to see stream data in the Dashboard.\n\nWhat if we added a similar informational card somewhere (maybe where it says, \"No results found?\", with a graphical asset), similar to the one in the create stream page? We don't need to make it a yellow warning—a simple black text would be helpful.\n\n<img width=\"300\" alt=\"SCR-20250115-nsrn\" src=\"https://github.com/user-attachments/assets/11963fc0-11b3-433b-9341-e258c1561ac6\" />\n\n\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1320","createdAt":"2025-01-16T11:04:29Z","labels":["type: feature","priority: 2","work: complicated"],"number":1324,"repository":"sablier-labs/interfaces","state":"closed","title":"Explain to users that a wallet connection is necessary to see data in the Dashboard","type":"issue","updatedAt":"2025-01-28T13:20:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1324"},{"author":"PaulRBerg","body":"Technically, this doesn't have to be done now, but since we [announced ](https://x.com/Sablier/status/1879564876122906829)that we will introduce fees on Feb 3, it'd be a good thing to remove any mention of \"free-to-use\" from our website/social media previews.\n\n<img width=\"554\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/82243c77-61e1-453d-8789-b28208da45d0\" />","createdAt":"2025-01-15T16:30:11Z","labels":["priority: 0","effort: low","type: refactor","work: clear"],"number":1322,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove \"free-to-use\" from social media previews","type":"issue","updatedAt":"2025-01-16T11:08:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1322"},{"author":"PaulRBerg","body":"When there is no wallet connected and the user clicks the \"Withdraw\" button on an older stream, this warning appears:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0980fdfa-f18c-43ff-af60-5ee4719c0539\" />\n\nThis is misleading/confusing because the person in front of the computer on which the Sablier UI is rendered might be either the sender or the recipient of the stream. They might just not have connected their wallet.\n\nThus, this warning should NOT take priority over the wallet connection warning. This should appear first:\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3d7aa320-839f-43ef-b89a-b18e1cd759ee\" />","createdAt":"2025-01-15T13:41:43Z","labels":["priority: 2","effort: low","type: perf","work: clear"],"number":1321,"repository":"sablier-labs/interfaces","state":"closed","title":"\"Missing account permissions\" warning should NOT take priority over wallet connection warning","type":"issue","updatedAt":"2025-01-28T12:26:02Z","url":"https://github.com/sablier-labs/interfaces/issues/1321"},{"author":"PaulRBerg","body":"The UI is currently displaying the _Create Streams_ button in the dashboard regardless of which tab is selected.\n\nPrompting the user to create streams when either the _All_ or the _Sender_ tab is selected makes perfect sense. However, when the _Recipient_ tab is selected and there is no wallet connected, it'd make more sense to **nudge the user to connect their web3 wallet** so that they can see their incoming streams.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2a8fde0f-6b93-415d-900d-790789c517c5\" />\n\nP.S. we have recently received this feedback from a user (Ultra), which is somewhat related to the task proposed here.\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f607ef7a-9afa-49fd-ad75-ead96db1aae0\" />","createdAt":"2025-01-15T13:29:31Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1319,"repository":"sablier-labs/interfaces","state":"closed","title":"Prompt users to connect wallet in the Recipient dashboard","type":"issue","updatedAt":"2025-01-28T12:24:50Z","url":"https://github.com/sablier-labs/interfaces/issues/1319"},{"author":"razgraf","body":"Since we have been (fortunate enough to have been) hit with a lot of usage, botting and endpoint spamming, we have introduced a ton of mechanisms to help against downtime and scale. The task here is to document all of them in a Github Discussion or on Notion.\n\nA (possibly incomplete) list to cover:\n\n1. App-logic (inline)\n   a. Obfuscating server routes (@sablier/services) through Vercel API routes\n   b. `api/merkle/eligibility/` Rate limiting using cached IP/interval (50000 unique IPs can perform a maximum of 200 requests every 15 minutes)  ([docs](https://github.com/vercel/next.js/tree/canary/examples/api-routes-rate-limit))\n   c. Preventing unknown referrers from accessing Vercel API routes (checking req.headers although these can be faked)\n2. Vercel-logic: [Vercel Firewall](https://vercel.com/docs/security/vercel-waf/rate-limiting) (hosting)\n   a. Rule added to `api/merkle/claimable` and `api/merkle/hidden` to prevent more than 20 requests per 60 seconds coming from the same IP\n3. App-server communication (end-to-end)\n  a. The route behind `api/merkle/eligibility` that calls for proof generation requires a valid Google Captcha token. The users solves the challenge in the app and sends the solution Captcha token to the server route for validation. It can only be used once.\n  b. Bearer tokens for `@sablier/services` and `@sablier/merkle-api`\n4. Server scaling\n  a. The merkle tree generation happens through the rust-server\n  b. Reading eligibility and campaign details happens through the `api` side of the `@sablier/services`\n  c. Writing updates to campaign managed details and processing campaigns (inserting eligibility details in the DB) happens through the `processor` side of the `@sablier/services` \n5. Server-database communication (hosting)\n  a. The read-server (@sablier/services, `api`) will read from the database through a Prisma Accelerate connection which adds caching and higher access limits.\n     <img width=\"1106\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/4e632ab9-5d41-4d0e-a357-cbbc4f17843b\" />\n\n    ","createdAt":"2025-01-14T15:36:32Z","labels":["type: docs"],"number":1317,"repository":"sablier-labs/interfaces","state":"closed","title":"Document rate-limiting rule, anti-DDOS protections and services enhancements (scaling)","type":"issue","updatedAt":"2025-01-22T21:46:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1317"},{"author":"PaulRBerg","body":"The fee structure has to be documented somewhere on the landing page.\n\nRelated: [Slack message](https://sablier.slack.com/archives/CNLTTEDKM/p1736860835249789), and this tweet from the announcement thread (currently on Typefully):\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/beb61187-b03f-4c25-8635-c0b90f5625aa\" />","createdAt":"2025-01-14T13:35:01Z","labels":["type: feature","priority: 0","effort: medium","work: clear"],"number":1316,"repository":"sablier-labs/interfaces","state":"closed","title":"Document fee structure somewhere on landing page","type":"issue","updatedAt":"2025-01-30T17:57:19Z","url":"https://github.com/sablier-labs/interfaces/issues/1316"},{"author":"PaulRBerg","body":"In response to the [overwhelming demand](https://github.com/sablier-labs/v2-interfaces/discussions/570) for this feature, I suggest making a first step toward providing white-labeled token claiming pages by making it possible to add a banner in the airdrop claim page.\n\nThis would be a paid feature, though payment would not be mediated via the UI. We would ask for payment manually via Telegram.\n\n<img width=\"500\" alt=\"SCR-20250114-nekp\" src=\"https://github.com/user-attachments/assets/8c0b4d79-6a15-4d97-bcb7-e70cc73c3fba\" />","createdAt":"2025-01-14T12:53:33Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1315,"repository":"sablier-labs/interfaces","state":"closed","title":"Ability to place custom banner in airdrop claiming pages","type":"issue","updatedAt":"2025-01-31T14:51:30Z","url":"https://github.com/sablier-labs/interfaces/issues/1315"},{"author":"PaulRBerg","body":"A common use case for sharing links to Sablier-based airdrops is reminding the community to claim before the expiration time.\n\nSo I suggest including the expiration in the social media preview.\n\n[Context here](https://x.com/deucesofweb3/status/1875860558878278022)","createdAt":"2025-01-13T15:13:34Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1313,"repository":"sablier-labs/interfaces","state":"closed","title":"Include expiration in social media preview for airdrop pages","type":"issue","updatedAt":"2025-01-29T15:02:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1313"},{"author":"PaulRBerg","body":"A common use case for sharing Sablier links is community transparency about the vesting status.\n\nThis means that whether a stream is cancelable or not is an important piece of information.\n\nSo I suggest including the cancelability status in the social media preview.\n\n[Context here](https://x.com/DegenToRich/status/1876798054931509321).","createdAt":"2025-01-13T15:11:16Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1312,"repository":"sablier-labs/interfaces","state":"closed","title":"Include cancelability status in social media preview for vesting streams","type":"issue","updatedAt":"2025-01-29T14:55:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1312"},{"author":"andreivladbrg","body":"![image](https://github.com/sablier-labs/v2-core/assets/99738872/c1ac203a-efdc-46b3-8784-549f6fc763d3)\r\n","createdAt":"2024-05-14T19:13:08Z","labels":["type: refactor","priority: 2","work: clear","effort: medium"],"number":922,"repository":"sablier-labs/lockup","state":"closed","title":"Remove Sphinx support","type":"issue","updatedAt":"2024-05-14T22:05:02Z","url":"https://github.com/sablier-labs/lockup/issues/922"},{"author":"smol-ninja","body":"A Codehawk auditor asked a really good question about the max value of `UD2x18`.\r\n\r\nSince its max value is capped by `type(uint64).max`, the exponent cannot represent a value bigger than `18.446744073709551615`. Thus, we should add this in the [Assumptions section](https://github.com/sablier-labs/v2-core/blob/staging/SECURITY.md#assumptions) of SECURITY.md:\r\n\r\n**In Lockup dynamic, the fixed-point representation of a segment's `exponent` does not exceed `18.446744073709551615`.**","createdAt":"2024-05-14T09:56:32Z","labels":["type: docs","priority: 2","effort: low","work: clear"],"number":921,"repository":"sablier-labs/lockup","state":"closed","title":"Add assumption about the max value of `exponent`","type":"issue","updatedAt":"2024-06-02T10:33:57Z","url":"https://github.com/sablier-labs/lockup/issues/921"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/main/SECURITY.md","createdAt":"2024-05-13T11:42:08Z","labels":["type: docs","effort: low","work: clear","priority: 3"],"number":920,"repository":"sablier-labs/lockup","state":"closed","title":"Exclude clickjacking in security disclosure","type":"issue","updatedAt":"2024-06-02T10:33:52Z","url":"https://github.com/sablier-labs/lockup/issues/920"},{"author":"andreivladbrg","body":"The `_update` hook implemented from `ERC721` is placed under `CONSTANT` header and it should be under `NON-CONSTANT`:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/350fcceddd60736193b71f576093b51f31d7b1e5/src/abstracts/SablierV2Lockup.sol#L459\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/350fcceddd60736193b71f576093b51f31d7b1e5/src/abstracts/SablierV2Lockup.sol#L522","createdAt":"2024-05-11T12:50:07Z","labels":["effort: low","type: style","work: clear"],"number":919,"repository":"sablier-labs/lockup","state":"closed","title":"Incorrect placement of the `_update` function","type":"issue","updatedAt":"2024-05-11T14:32:41Z","url":"https://github.com/sablier-labs/lockup/issues/919"},{"author":"smol-ninja","body":"As discussed [here](https://github.com/sablier-labs/v2-open-ended/discussions/69), batch functions such as `cancelMultiple` and `withdrawMultiple` should be allowed to continue execution if one of the stream IDs revert.\r\n\r\nA sample implementation would look like the following:\r\n\r\n```solidity\r\nevent InvalidStreamIDInBatch(uint256 id, string memory reason);\r\n\r\nfunction cancelMultiple(uint256[] calldata streamIds) external override {\r\n    for (uint256 i = 0; i < streamIds.length; ++i) {\r\n        try cancel(streamIds[i]) {\r\n        } catch Error(string memory reason){\r\n            emit InvalidStreamIDInBatch(streamIds[i], reason);\r\n        }\r\n    }\r\n}\r\n```","createdAt":"2024-05-08T16:36:52Z","labels":["type: feature","priority: 2","work: complicated","effort: medium"],"number":917,"repository":"sablier-labs/lockup","state":"closed","title":"Use `try...catch` in `cancelMultiple` and `withdrawMultiple` to handle invalid stream IDs","type":"issue","updatedAt":"2024-11-30T20:21:07Z","url":"https://github.com/sablier-labs/lockup/issues/917"},{"author":"andreivladbrg","body":"Ref https://github.com/sablier-labs/v2-core/issues/1000#issuecomment-2259313830\r\n\r\nThe idea is to do something similar to how core tests are structured: https://github.com/sablier-labs/v2-core/tree/staging/test/core/integration/concrete/lockup\r\n\r\n ","createdAt":"2024-05-07T20:00:15Z","labels":["type: test","work: clear","priority: 3","effort: medium"],"number":1001,"repository":"sablier-labs/lockup","state":"closed","title":"Add a `shared` dir in tests for common functions between merkle lockup contracts","type":"issue","updatedAt":"2024-07-30T22:35:03Z","url":"https://github.com/sablier-labs/lockup/issues/1001"},{"author":"PaulRBerg","body":"We no longer need the `TimestampStore` in the invariant tests since this PR was merged into Foundry:\r\n\r\nhttps://github.com/foundry-rs/foundry/pull/7819\r\n\r\nRelated:\r\n\r\nhttps://github.com/foundry-rs/foundry/issues/4994","createdAt":"2024-05-07T12:34:57Z","labels":["priority: 2","type: test","work: clear","effort: medium"],"number":916,"repository":"sablier-labs/lockup","state":"closed","title":"Remove \"TimestampStore\" in invariant tests","type":"issue","updatedAt":"2024-05-27T10:20:14Z","url":"https://github.com/sablier-labs/lockup/issues/916"},{"author":"smol-ninja","body":"The contract names in the `MerkleLockup` integration tests do not include the name of the Merkle Lockup that they run tests for. Take the following example:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/a97e5ae278e82a91533d42ae4df2cd3f95c14f81/test/periphery/integration/merkle-lockup/ll/clawback/clawback.t.sol#L9\r\n\r\nis same as \r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/a97e5ae278e82a91533d42ae4df2cd3f95c14f81/test/periphery/integration/merkle-lockup/lt/clawback/clawback.t.sol#L9\r\n\r\nI suggest to renaming them to include the name of the Merkle Lockup i.e.\r\n\r\n1. In `ll` folder -> `Clawback_MerkleLL_Integration_Test`\r\n2. In `lt` folder -> `Clawback_MerkleLT_Integration_Test`\r\n\r\nand so on.","createdAt":"2024-05-03T14:08:43Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":1000,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `MerkleLockup` integration tests to include Lockup type","type":"issue","updatedAt":"2024-08-12T10:43:57Z","url":"https://github.com/sablier-labs/lockup/issues/1000"},{"author":"andreivladbrg","body":"See changes in the scripts here: https://github.com/sablier-labs/v2-periphery/pull/341","createdAt":"2024-05-03T06:45:59Z","labels":["type: feature","effort: low","work: clear","priority: 3"],"number":914,"repository":"sablier-labs/lockup","state":"closed","title":"Configure the blast settings in scripts","type":"issue","updatedAt":"2024-12-02T13:39:25Z","url":"https://github.com/sablier-labs/lockup/issues/914"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/902.","createdAt":"2024-04-30T12:47:50Z","labels":["priority: 0","type: refactor","work: clear","effort: medium"],"number":911,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `Range` struct to `Timestamp` struct","type":"issue","updatedAt":"2024-05-03T16:36:06Z","url":"https://github.com/sablier-labs/lockup/issues/911"},{"author":"smol-ninja","body":"Similar to [v2-periphery](https://github.com/sablier-labs/v2-periphery/blob/staging/test/fork/Fork.t.sol):\r\n- Rename `ASSET` to `FORK_ASSET`\r\n- Rename `HOLDER` to `FORK_ASSET_HOLDER`","createdAt":"2024-04-13T17:53:49Z","labels":["good first issue","type: test","effort: low","work: clear","priority: 3"],"number":900,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `ASSET` to `FORK_ASSET` in `Fork.t.sol`","type":"issue","updatedAt":"2024-07-19T10:25:34Z","url":"https://github.com/sablier-labs/lockup/issues/900"},{"author":"smol-ninja","body":"Since [staging-blast](https://github.com/sablier-labs/v2-core/tree/staging-blast) branch contains 1 additional commit on top of the `staging` branch, a separate CI workflow should be added to the `staging-blast` branch that runs automatically everytime `staging-blast` branch is updated.","createdAt":"2024-04-12T14:24:25Z","labels":["priority: 1","work: clear","type: ci","effort: medium"],"number":897,"repository":"sablier-labs/lockup","state":"closed","title":"Create a separate CI workflow for `staging-blast` branch","type":"issue","updatedAt":"2024-04-14T16:49:02Z","url":"https://github.com/sablier-labs/lockup/issues/897"},{"author":"smol-ninja","body":"Depends on:\r\n- https://github.com/sablier-labs/v2-core/issues/893","createdAt":"2024-04-12T14:13:01Z","labels":["priority: 1","type: test","effort: low","work: clear"],"number":896,"repository":"sablier-labs/lockup","state":"closed","title":"Add fork tests for NFT Descriptor on the Blast branch","type":"issue","updatedAt":"2024-04-14T13:50:48Z","url":"https://github.com/sablier-labs/lockup/issues/896"},{"author":"PaulRBerg","body":"The following tests are identical between MerkleLL and MerkleTL:\r\n\r\n- `clawback`\r\n- `getFirstClaimTime`\r\n- `hasClaimed`\r\n- `hasExpired`\r\n\r\nThey could be DRY-ified similarly to how the Lockup tests are DRY-ified:\r\n\r\nhttps://github.com/sablier-labs/v2-core/tree/staging/test/core/integration/concrete/lockup","createdAt":"2024-04-11T08:28:40Z","labels":["effort: high","type: test","work: clear","priority: 3"],"number":1002,"repository":"sablier-labs/lockup","state":"closed","title":"DRY'fy tests for MerkleLL, MerkleLT and MerkleInstant","type":"issue","updatedAt":"2024-08-12T10:43:50Z","url":"https://github.com/sablier-labs/lockup/issues/1002"},{"author":"PaulRBerg","body":"As pointed out [here](https://github.com/sablier-labs/v2-core/pull/889/files#r1560494554), the following tests are incorrect:\r\n\r\n- [`testForkFuzz_TokenURI_LockupDynamic_V2_0`](https://github.com/sablier-labs/v2-core/blob/e57553507b3a388c4a7245e04f36bd1dc014cbc0/test/fork/NFTDescriptor.t.sol#L50)\r\n- [`testForkFuzz_TokenURI_LockupLinear_V2_0`](https://github.com/sablier-labs/v2-core/blob/e57553507b3a388c4a7245e04f36bd1dc014cbc0/test/fork/NFTDescriptor.t.sol#L84C14-L84C53)\r\n\r\nThe `tokenURIBefore` should NOT equal the `tokenURIAfter` because the latest NFT descriptor contains the note about transferability, whereas the previous NFTDescriptor (part of the V2.1 release) used by V2.0 doesn't contain such a note.\r\n\r\nWhat we have to do:\r\n\r\n1. Explain why the current test passes.\r\n2. Rewrite the test to check for an inequality instead of an equality.\r\n3. Decode the URI and look for the note about transferability (checking if the string contains the substring we're interested in).\r\n","createdAt":"2024-04-11T06:42:42Z","labels":["priority: 1","type: test","work: complicated","effort: medium"],"number":893,"repository":"sablier-labs/lockup","state":"closed","title":"Fix fork tests for NFT descriptor","type":"issue","updatedAt":"2024-04-14T13:26:57Z","url":"https://github.com/sablier-labs/lockup/issues/893"},{"author":"PaulRBerg","body":"As we realized [here](https://github.com/sablier-labs/v2-core/issues/881#issuecomment-2047764805), the new NFT Descriptor is incompatible with V2.0 streams.\r\n\r\nThe solution is to edit the current NFT Descriptor implementation so that this normal call is turned into a low-level call (or a try/catch):\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/c6f189cf92107d8cefb7d72fd0e450289387ba2b/src/SablierV2NFTDescriptor.sol#L96\r\n\r\nWhen the `isTransferable` function is undefined, the call will revert, and in this case, we should assume the NFT is transferable (since all V2.0 streams are transferable by default).","createdAt":"2024-04-10T14:54:41Z","labels":["priority: 1","effort: low","work: clear","type: perf"],"number":890,"repository":"sablier-labs/lockup","state":"closed","title":"Make NFTDescriptor compatible with V2.0 streams","type":"issue","updatedAt":"2024-04-10T23:16:57Z","url":"https://github.com/sablier-labs/lockup/issues/890"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-periphery/discussions/313#discussioncomment-9060175, the goal is to refactor memory structs to have parameters in alphabetical order throughout the codebase. ","createdAt":"2024-04-09T14:58:24Z","labels":["effort: high","type: refactor","work: clear","priority: 3"],"number":888,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor memory structs to have parameters in an alphabetical order","type":"issue","updatedAt":"2024-04-12T14:27:08Z","url":"https://github.com/sablier-labs/lockup/issues/888"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIt happens in CI when running the precompile tests:\r\n\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/8589580989/job/23536027804?pr=883\r\n\r\nIt also happens locally on recurring runs (first run is OK, subsequent runs aren't):\r\n\r\nhttps://app.warp.dev/block/3kXDAuwyHk2pQmupBp5V2r\r\n\r\nAs @smol-ninja pointed out, this may be related to [Sphinx](https://www.sphinx.dev/).\r\n\r\n## Solution\r\n\r\nAs per the advice received in the \"Foundry Support\" group on Telegram, one potential solution is to change the string paths passed to `vm.getCode`:\r\n\r\n<img width=\"400\" alt=\"SCR-20240408-kxzv\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/d3806ca6-573e-401a-96ba-28cb2c89a1e9\">\r\n","createdAt":"2024-04-08T11:07:09Z","labels":["priority: 1","type: bug","type: test","work: complicated","effort: medium"],"number":886,"repository":"sablier-labs/lockup","state":"closed","title":"FAIL. Reason: setup failed: Multiple matching artifacts found","type":"issue","updatedAt":"2024-04-09T11:13:52Z","url":"https://github.com/sablier-labs/lockup/issues/886"},{"author":"PaulRBerg","body":"As suggested by @smol-ninja [here](https://github.com/sablier-labs/v2-core/pull/883#discussion_r1554577281), maintaining the modifiers in the shared test files would be easier if we ordered them alphabetically, e.g. here:\r\n\r\n- [`createWithDurations`](https://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/test/integration/shared/lockup-linear/createWithDurations.t.sol)\r\n- [`createWithTimestamps`](https://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/test/integration/shared/lockup-linear/createWithTimestamps.t.sol)\r\n\r\nP.S. To whoever implements this: just feed the code to ChatGPT and ask it to re-order it alphabetically.","createdAt":"2024-04-07T10:37:16Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":884,"repository":"sablier-labs/lockup","state":"closed","title":"Order modifiers alphabetically","type":"issue","updatedAt":"2024-04-10T01:22:43Z","url":"https://github.com/sablier-labs/lockup/issues/884"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/v2-core/discussions/877), we will deploy a new NFTDescriptor contract for V2.2.\r\n\r\nWe will then use our admin account and call `setNFTDescriptor` on all V2.0 and V2.1 deployments.\r\n\r\nIt would be helpful to write a few fork tests to prove that this is a safe operation.","createdAt":"2024-04-05T12:26:44Z","labels":["priority: 2","type: test","work: clear","effort: medium"],"number":881,"repository":"sablier-labs/lockup","state":"closed","title":"Write backward compatibility tests for NFTDescriptor","type":"issue","updatedAt":"2024-04-10T23:16:52Z","url":"https://github.com/sablier-labs/lockup/issues/881"},{"author":"PaulRBerg","body":"PR https://github.com/sablier-labs/v2-core/pull/813 did not update the fork tests for LockupLinear to allow the cliff time to be zero:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/test/fork/LockupLinear.t.sol#L116","createdAt":"2024-04-05T11:00:44Z","labels":["type: test","effort: low","work: clear","priority: 3"],"number":880,"repository":"sablier-labs/lockup","state":"closed","title":"Allow cliff time zero in the fork tests for LockupLinear","type":"issue","updatedAt":"2024-04-10T01:23:21Z","url":"https://github.com/sablier-labs/lockup/issues/880"},{"author":"PaulRBerg","body":"All else being equal, a for loop is better than a while loop in a blockchain context. This is due to the risk of overflowing the block's gas limit. With a for loop, this risk is completely mitigated.\r\n\r\nIt is possible to turn the following while loop into a for loop:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/src/SablierV2LockupTranched.sol#L200-L207\r\n\r\nLike so:\r\n\r\n```solidity\r\nuint128 streamedAmount = tranches[0].amount;\r\nfor (uint256 i = 1; i < tranches.length; ++i) {\r\n    // If a tranche's timestamp is equal to the current time, it is considered vested.\r\n    if (tranches[i].timestamp > currentTime) {\r\n        break;\r\n    }\r\n    streamedAmount += tranches[i].amount;\r\n}\r\n```\r\n\r\n","createdAt":"2024-04-05T10:53:42Z","labels":["priority: 2","effort: low","work: clear","type: perf"],"number":879,"repository":"sablier-labs/lockup","state":"closed","title":"Use a for loop instead of a while loop in LockupTranched","type":"issue","updatedAt":"2024-04-10T01:23:17Z","url":"https://github.com/sablier-labs/lockup/issues/879"},{"author":"PaulRBerg","body":"When the cliff time is zero, the following check is redundant because the cliff time can never be greater than the end time (thanks to the if checks at the beginning of the function):\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/src/libraries/Helpers.sol#L105-L108\r\n\r\nIt just so happens that the [previous if](https://github.com/sablier-labs/v2-core/blob/76e29fee33befaeb54a82473c28cf182e6f8855d/src/libraries/Helpers.sol#L100-L103) checks the value of the cliff time. Thus, there's an opportunity to perform a gas optimization like this:\r\n\r\n```solidity\r\n// A cliff time of zero means there is no cliff, so we only perform the following checks if a cliff time is set.\r\nif (range.cliff > 0) {\r\n    // Check: the start time is strictly less than the cliff time.\r\n    if (range.start >= range.cliff) {\r\n        revert Errors.SablierV2LockupLinear_StartTimeNotLessThanCliffTime(range.start, range.cliff);\r\n    }\r\n\r\n    // Check: the cliff time is strictly less than the end time.\r\n    if (range.cliff >= range.end) {\r\n        revert Errors.SablierV2LockupLinear_CliffTimeNotLessThanEndTime(range.cliff, range.end);\r\n    }\r\n}\r\n```\r\n\r\nCc @sablier-labs/solidity.","createdAt":"2024-04-05T10:36:29Z","labels":["priority: 2","effort: low","work: clear","type: perf"],"number":878,"repository":"sablier-labs/lockup","state":"closed","title":"Slight optimization in {Helpers-checkCreateWithTimestamps} for LockupLinear","type":"issue","updatedAt":"2024-04-10T01:23:12Z","url":"https://github.com/sablier-labs/lockup/issues/878"},{"author":"andreivladbrg","body":"As discussed here: https://github.com/sablier-labs/v2-core/discussions/875\r\n\r\nWe should add gas benchmarks for all relevant functions.\r\n\r\nExamples of benchmark tests ([ref1](https://github.com/andreivladbrg/v2-tranched/blob/main/test/Benchmarks.t.sol), [ref2](https://gist.github.com/smol-ninja))\r\n \r\n","createdAt":"2024-04-04T14:09:20Z","labels":["effort: high","priority: 2","type: test","work: complicated"],"number":876,"repository":"sablier-labs/lockup","state":"closed","title":"Add benchmark dir in tests","type":"issue","updatedAt":"2024-05-14T11:11:37Z","url":"https://github.com/sablier-labs/lockup/issues/876"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWhile reviewing Shub's gas estimation script [here](https://github.com/sablier-labs/v2-core/discussions/823#discussioncomment-8945581), it dawned on me that we have been too lax about the values of `MAX_SEGMENT_COUNT` and `MAX_TRANCHE_COUNT`.\r\n\r\nBasically, we have relied on heuristics and quick-and-dirty scripts to obtain them.\r\n\r\nIt's about time to develop a robust shell script for estimating the max segment and the tranche counts. My rationale is thus:\r\n\r\n- We are deploying to 10+ chains, a number which will only increase over time\r\n- Chains can change their total gas limit, which may require us to be agile and redeploy the contracts with new max counts\r\n- There are nuances regarding the block gas limits on some chains such as [Avalanche](https://twitter.com/PaulRBerg/status/1773785345529704914)\r\n\r\n## Mechanism of Action\r\n\r\nThe script would work something like this:\r\n\r\n- Hard-code the (known) block gas limits for our deployment chains (until Forge Std implements my [feature request](https://github.com/foundry-rs/forge-std/issues/535))\r\n- Gas golf `createWithDurations` (which is always more expensive than `createWithTimestamps`) until the consumed gas is right below the block gas limit per chain\r\n- Allow the user to run the script for only one chain, or for all of them\r\n- Subtract 10 from the previously obtained value (as an additional precaution)\r\n- Do this for `LockupDynamic` and `LockupTranched` (separately)\r\n\r\nA related suggestion is that we may want to turn the [`maxCount`](https://github.com/sablier-labs/v2-core/blob/0a75661bc77f087620567265e1c7f973b1c504a8/script/Base.s.sol#L48-L53) variable into a mapping in `BaseScript`.","createdAt":"2024-03-29T19:41:56Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":872,"repository":"sablier-labs/lockup","state":"closed","title":"Robust script for estimating the max segment and the tranche counts","type":"issue","updatedAt":"2024-07-12T08:25:50Z","url":"https://github.com/sablier-labs/lockup/issues/872"},{"author":"PaulRBerg","body":"Just like https://github.com/sablier-labs/v2-core/issues/870, but for the `maxCount` variable in `BaseScript`:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/e080f20eafef0fc18049bcc77f1694db043860f1/script/Base.s.sol#L31","createdAt":"2024-03-29T18:30:38Z","labels":["priority: 2","type: test","work: clear","effort: medium"],"number":871,"repository":"sablier-labs/lockup","state":"closed","title":"Single \"maxCount\" variable in \"BaseScript\"","type":"issue","updatedAt":"2024-04-10T01:23:08Z","url":"https://github.com/sablier-labs/lockup/issues/871"},{"author":"PaulRBerg","body":"The `MAX_COUNT` default is used for both `MAX_SEGMENT_COUNT` and `MAX_TRANCHE_COUNT`:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/e080f20eafef0fc18049bcc77f1694db043860f1/test/utils/Defaults.sol#L26\r\n\r\nThis is not good because there can be more tranches than segments (as discussed [here](https://github.com/sablier-labs/v2-core/discussions/823#discussioncomment-8945581)).\r\n\r\nWe should have two different defaults.","createdAt":"2024-03-29T18:26:18Z","labels":["priority: 2","type: test","effort: low","work: clear"],"number":870,"repository":"sablier-labs/lockup","state":"closed","title":"Single test default used for two different constants","type":"issue","updatedAt":"2024-04-10T01:23:03Z","url":"https://github.com/sablier-labs/lockup/issues/870"},{"author":"razgraf","body":"Given we now have generic `createWithTimestamps` methods instead of the old variations (durations, deltas, ranges, milestones), shouldn't we rename the dedicated LockupLinear parameter for start / cliff / end from `range` to `timestamps` in the create method (and the `DataType` itself)?\r\n\r\nCC: @sablier-labs/solidity ","createdAt":"2024-03-29T18:16:25Z","labels":["type: refactor","work: complicated","priority: 3","effort: medium"],"number":869,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"range\" data types to \"timestamps\"","type":"issue","updatedAt":"2024-04-15T13:31:38Z","url":"https://github.com/sablier-labs/lockup/issues/869"},{"author":"smol-ninja","body":"The foundry cheatcode [`changePrank` has been deprecated](https://book.getfoundry.sh/reference/forge-std/change-prank) and will likely be removed in the future release.\r\n\r\nReplacing it with `vm.startPrank` seems like a straightforward solution but it has introduced a new requirement that [the prank must have been applied atleast once before overriding](https://github.com/foundry-rs/foundry/blob/88e09f6f24a771b8b37def2d437660b13146bef6/crates/cheatcodes/src/evm/prank.rs#L107C1-L107C85). This has also been raised by @PaulRBerg in https://github.com/foundry-rs/foundry/issues/4942 but a shame that they decided to close it in favour of the suggestion to handle it using [readCallers](https://book.getfoundry.sh/cheatcodes/read-callers).\r\n\r\nSince we decided to [update `forge-std`](https://github.com/sablier-labs/v2-core/issues/842), the tests now throw a deprecation warning. There are two solutions I can think of:\r\n1. Carefully replace it with `vm.startPrank`.\r\n2. Implement a `changePrank` function ourselves which calls `vm.stopPrank` followed by `vm.startPrank`.\r\n\r\nWdyt @PaulRBerg @andreivladbrg.\r\n### Related\r\n- https://github.com/foundry-rs/forge-std/pull/434","createdAt":"2024-03-24T15:06:44Z","labels":["work: complex","priority: 2","type: test","effort: medium"],"number":866,"repository":"sablier-labs/lockup","state":"closed","title":"Deprecate `changePrank`","type":"issue","updatedAt":"2024-03-28T17:44:36Z","url":"https://github.com/sablier-labs/lockup/issues/866"},{"author":"PaulRBerg","body":"The `CHANGELOG` file should be updated with the latest changes related to V2.2.","createdAt":"2024-03-20T19:21:07Z","labels":["type: docs","priority: 1","work: clear","effort: medium"],"number":861,"repository":"sablier-labs/lockup","state":"closed","title":"Update changelog","type":"issue","updatedAt":"2024-07-03T15:13:41Z","url":"https://github.com/sablier-labs/lockup/issues/861"},{"author":"smol-ninja","body":"Because of #840, forge script command now uses `runBroadcast()` instead of `run()`. The [deployments wiki](https://github.com/sablier-labs/v2-core/wiki/Deployments) should be updated with the new changes.","createdAt":"2024-03-20T18:34:01Z","labels":["type: docs","priority: 2","effort: low","work: clear"],"number":859,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `run` with `runBroadcast` in Deployments wiki","type":"issue","updatedAt":"2024-05-14T21:36:49Z","url":"https://github.com/sablier-labs/lockup/issues/859"},{"author":"smol-ninja","body":"Found this while reviewing contracts:\r\nhttps://github.com/sablier-labs/v2-core/blob/1b2ee6df156b156799a4e3bd680b726079b018fb/src/SablierV2LockupTranched.sol#L203-L211\r\n\r\nThe above code can be optimised to:\r\n```solidity\r\nuint256 index = 1;\r\nunchecked {\r\n    while (tranches[index].timestamp <= currentTime) {\r\n        streamedAmount += tranches[index].amount;\r\n        index += 1;\r\n    }\r\n}\r\n```\r\n\r\nLooping over 100 tranches, it saves ~800 gas.\r\n\r\n@andreivladbrg what do you think?","createdAt":"2024-03-20T14:14:00Z","labels":["priority: 0","effort: low","work: clear","type: perf"],"number":858,"repository":"sablier-labs/lockup","state":"closed","title":"Gas optimization in `_calculateStreamedAmount()` of Lockup Tranched","type":"issue","updatedAt":"2024-03-20T23:26:39Z","url":"https://github.com/sablier-labs/lockup/issues/858"},{"author":"smol-ninja","body":"There is only one place where we still use `assert` check. \r\nhttps://github.com/sablier-labs/v2-core/blob/be1dea483581eefa4a048369853db15404fe1e07/src/libraries/Helpers.sol#L42\r\n\r\nIntegration tests also don't cover this scenario where broker fee exceeds total amount. This seems to be safe because we already have a check above it \r\nhttps://github.com/sablier-labs/v2-core/blob/be1dea483581eefa4a048369853db15404fe1e07/src/libraries/Helpers.sol#L33-L35\r\n\r\nHowever, since we are re-checking whether broker amount is less than total amount, we should also cover this in tests and replae it it with `if`.\r\n\r\n```solidity\r\n  // Assert that the the broker fee amount is strictly less than the total amount.\r\n  if (amounts.brokerFee >= totalAmount) {\r\n      revert Errors.SablierV2Lockup_BrokerFeeExceedsTotalAmount(brokerFee, totalAmount);\r\n  }\r\n```\r\n\r\nThis will also increase branch coverage of Helpers.sol.\r\n\r\n<img width=\"901\" alt=\"Screenshot 2024-03-17 at 16 29 06\" src=\"https://github.com/sablier-labs/v2-core/assets/6676622/01b18a7a-05a0-4597-97f8-cd4f6151c791\">","createdAt":"2024-03-17T16:30:17Z","labels":["type: refactor","priority: 1","effort: low","work: clear"],"number":853,"repository":"sablier-labs/lockup","state":"closed","title":"Replace `assert` with `if` condition in `checkAndCalculateBrokerFee`","type":"issue","updatedAt":"2024-03-18T09:25:08Z","url":"https://github.com/sablier-labs/lockup/issues/853"},{"author":"andreivladbrg","body":"These functions include \"check\" in theirs name, but we don't actually check anything; we only calculate the segments/tranches.\r\n\r\nTherefore, should we rename it to `calculateSegmentTimestamps` and `calculateTrancheTimestamps` respectively?\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/cbe1c0d61d74217d6ad01599318d5551f3381b2b/src/libraries/Helpers.sol#L143\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/cbe1c0d61d74217d6ad01599318d5551f3381b2b/src/libraries/Helpers.sol#L176","createdAt":"2024-03-13T16:05:55Z","labels":["type: refactor","priority: 1","effort: low"],"number":847,"repository":"sablier-labs/lockup","state":"closed","title":"Rename Helpers functions","type":"issue","updatedAt":"2024-03-14T12:07:05Z","url":"https://github.com/sablier-labs/lockup/issues/847"},{"author":"andreivladbrg","body":"Since we no longer have comptroller contract, the `DeployCore3` script is just a copy of `DeployCore` - thus, we can remove it.","createdAt":"2024-03-12T16:07:46Z","labels":["priority: 1","effort: low","work: clear","type: chore"],"number":844,"repository":"sablier-labs/lockup","state":"closed","title":"Remove duplicated script","type":"issue","updatedAt":"2024-03-13T15:30:12Z","url":"https://github.com/sablier-labs/lockup/issues/844"},{"author":"PaulRBerg","body":"Since [v1.8.0](https://github.com/foundry-rs/forge-std/releases/tag/v1.8.0), Forge Std offers a `replace` cheatcode now:\r\n\r\nhttps://github.com/foundry-rs/forge-std/blob/b6a506db2262cad5ff982a87789ee6d1558ec861/src/Vm.sol#L745-L749\r\n\r\nIt would be nice to be able to get rid of Solady - I know we're also using `Base64`, but maybe for that, OpenZeppelin has something now.\r\n\r\nRelated: https://github.com/sablier-labs/v2-core/issues/842","createdAt":"2024-03-12T09:35:39Z","labels":["type: test","work: complicated","priority: 3","effort: medium"],"number":843,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"replace\" function from Forge Std","type":"issue","updatedAt":"2024-03-28T17:44:31Z","url":"https://github.com/sablier-labs/lockup/issues/843"},{"author":"PaulRBerg","body":"[Forge Std v1.8.0](https://github.com/foundry-rs/forge-std/releases/tag/v1.8.0) has been released recently.\r\n\r\nIt comes with a wonderful new feature: native Foundry assertions! They got rid of DSTest.\r\n\r\nThis has motivated me to [deprecate PRBTest](https://github.com/PaulRBerg/prb-test/issues/45), hence why I also opened this issue here to replace PRBTest with the native assertions available in Foundry now.\r\n\r\nRelated:\r\n\r\n- https://github.com/foundry-rs/forge-std/pull/503\r\n- https://github.com/foundry-rs/forge-std/pull/514","createdAt":"2024-03-12T09:31:31Z","labels":["effort: high","priority: 2","type: test","work: complicated"],"number":842,"repository":"sablier-labs/lockup","state":"closed","title":"Replace PRBTest with native Foundry assertions","type":"issue","updatedAt":"2024-03-28T17:44:23Z","url":"https://github.com/sablier-labs/lockup/issues/842"},{"author":"PaulRBerg","body":"They've recently added support for this feature in invariant tests - for a long time, `vm.assume` wasn't supported there, but it now is:\r\n\r\nhttps://github.com/foundry-rs/foundry/issues/4190#event-12013303104","createdAt":"2024-03-06T10:53:36Z","labels":["type: test","work: clear","priority: 3","effort: medium"],"number":837,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"vm.assume\" in invariant tests","type":"issue","updatedAt":"2024-09-09T07:33:26Z","url":"https://github.com/sablier-labs/lockup/issues/837"},{"author":"smol-ninja","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/582, remove precompiles tests from PR CIs and run them periodically alongside fork tests.","createdAt":"2024-03-04T22:50:08Z","labels":["priority: 2","effort: low","work: clear","type: ci"],"number":832,"repository":"sablier-labs/lockup","state":"closed","title":"Run precompiles tests along with fork tests periodically","type":"issue","updatedAt":"2024-03-06T11:31:47Z","url":"https://github.com/sablier-labs/lockup/issues/832"},{"author":"smol-ninja","body":"### As discussed in https://github.com/sablier-labs/v2-core/discussions/804\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **smol-ninja** January 26, 2024</sup>\r\nA note to the reader: **The following doesn't affect the deployed version of Sablier contracts**.\r\n\r\n## Context\r\nThe recent [PR: Make withdraw function callable by any account](https://github.com/sablier-labs/v2-core/issues/731) enables anyone to call `withdraw()` on any stream. Each withdrawal attempts to call `onLockupStreamWithdrawn()` on both sender and recipient if they are contracts.\r\n## Problem\r\nWe use the same function name `onLockupStreamWithdrawn()` in both `ISablierV2Recipient` and `ISablierV2Sender`. This leads to duplicate calls on this function when `withdraw()` is triggered by a third party and the sender and recipient are the same contract addresses.\r\n\r\n[SablierV2Lockup.sol#L278C1-L297C10](https://github.com/sablier-labs/v2-core/blob/staging/src/abstracts/SablierV2Lockup.sol#L278C1-L297C10)\r\n```solidity\r\nif (msg.sender != recipient && recipient.code.length > 0) {\r\n    try ISablierV2Recipient(recipient).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n\r\nif (msg.sender != sender && sender.code.length > 0) {\r\n    try ISablierV2Sender(sender).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n```\r\n\r\n## Solution\r\nAdd a a check whether sender and recipient are same.\r\n\r\n```solidity\r\nif (msg.sender != recipient && recipient.code.length > 0) {\r\n    try ISablierV2Recipient(recipient).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n\r\nif (sender != recipient && msg.sender != sender && sender.code.length > 0) {\r\n    try ISablierV2Sender(sender).onLockupStreamWithdrawn({.. /* snip */ ..}) { } catch { }\r\n}\r\n```","createdAt":"2024-02-10T12:34:43Z","labels":["priority: 1","type: bug","work: clear","effort: medium"],"number":822,"repository":"sablier-labs/lockup","state":"closed","title":"Avoid duplicate calls to `onLockupStreamWithdrawn()` hook when sender == recipient","type":"issue","updatedAt":"2024-02-20T16:00:03Z","url":"https://github.com/sablier-labs/lockup/issues/822"},{"author":"PaulRBerg","body":"This is a child issue of https://github.com/sablier-labs/v2-core/issues/808.\r\n\r\nThe task is to adjust the description generated in the NFT descriptor to account for the package tethering, i.e., say LockupLinear v1.1.2 instead of Sablier V2:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/d5aea835dfe32b6cffa1c8cb40a7ba458f4ab5ee/src/SablierV2NFTDescriptor.sol#L261-L279","createdAt":"2024-02-08T11:50:00Z","labels":["type: refactor","priority: 2","work: complicated","effort: medium"],"number":820,"repository":"sablier-labs/lockup","state":"closed","title":"Adjust versions in the NFT descriptor","type":"issue","updatedAt":"2024-02-12T12:14:53Z","url":"https://github.com/sablier-labs/lockup/issues/820"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOwners of non-transferable streams are confused about the current NFT-related texts. Specifically, the description that makes part of the token URI.\r\n\r\n## Solution\r\n\r\nAdjust the text when the stream NFT is non-transferable. I.e. instead of this:\r\n\r\n>⚠️ WARNING: Transferring the NFT makes the new owner the recipient of the stream. The funds are not automatically withdrawn for the previous recipient.\r\n\r\nSay something like this (final text to be decided during PR review):\r\n\r\n> NOTE: This is a non-transferable NFT. It is possible to list it on NFT marketplaces but the final sale cannot be performed.\r\n\r\n## Context\r\n\r\nSee this listing on OpenSea: https://opensea.io/assets/ethereum/0xafb979d9afad1ad27c5eff4e27226e3ab9e5dcc9/3408\r\n\r\n<img width=\"400\" alt=\"SCR-20240208-mdcd\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/883b7c27-429c-4dc1-9757-803a916c5a86\">","createdAt":"2024-02-08T11:39:13Z","labels":["type: refactor","priority: 2","work: clear","effort: medium"],"number":818,"repository":"sablier-labs/lockup","state":"closed","title":"Adjust transferability texts when the stream is non-transferable","type":"issue","updatedAt":"2024-02-12T13:19:02Z","url":"https://github.com/sablier-labs/lockup/issues/818"},{"author":"PaulRBerg","body":"These warnings pop up in the CI summary, e.g. https://github.com/sablier-labs/v2-core/actions/runs/7755374062\r\n\r\n<img width=\"400\" alt=\"SCR-20240202-muyf\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/f28a9b86-02be-439a-8c64-2ad382a79317\">\r\n","createdAt":"2024-02-02T12:25:27Z","labels":["effort: low","work: clear","type: chore","priority: 3"],"number":812,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade GitHub Actions to get rid of Node.js v16 warning","type":"issue","updatedAt":"2024-04-09T15:13:36Z","url":"https://github.com/sablier-labs/lockup/issues/812"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/25\n\n- [x] Move all the V2 Periphery contracts to an Airdrops rpeository\n- [x] Update all stale references (e.g. turn \"V2 Core\" into \"V2 Lockup\")\n- [x] Remove the \"V2\" from the contract names (note: for ASCII, you can use the \"Dark with Shadow\" font on this [tool](https://textfancy.com/text-art/))\n- [x] Don't forget about the related stuff, e.g. the [Wikis](https://github.com/sablier-labs/v2-core/wiki)\n- [x] Rename this repo to `lockup`\n","createdAt":"2024-01-30T11:15:29Z","labels":["effort: epic","work: complex","type: refactor","priority: 2"],"number":808,"repository":"sablier-labs/lockup","state":"closed","title":"Package tethering","type":"issue","updatedAt":"2025-01-29T16:59:02Z","url":"https://github.com/sablier-labs/lockup/issues/808"},{"author":"smol-ninja","body":"Based on the [discussion #802](https://github.com/sablier-labs/v2-core/discussions/802), make the necessary changes required to deploy on [Blast](https://blast.io/).\r\n\r\nSince it requires changes to the core contracts, the Blast version must be available through a new branch that mirrors all changes from the main branch.","createdAt":"2024-01-30T10:31:10Z","labels":["type: feature","effort: high","priority: 1","work: complicated"],"number":807,"repository":"sablier-labs/lockup","state":"closed","title":"Support Blast network","type":"issue","updatedAt":"2024-03-01T14:29:01Z","url":"https://github.com/sablier-labs/lockup/issues/807"},{"author":"andreivladbrg","body":"As discussed here https://github.com/sablier-labs/v2-core/discussions/800\r\n\r\nWe should get rid of the public<>internal and storage<>constants dichotomies for variables","createdAt":"2024-01-23T17:49:03Z","labels":["effort: low","type: style","work: clear","priority: 3"],"number":801,"repository":"sablier-labs/lockup","state":"closed","title":"Remove redundant headers","type":"issue","updatedAt":"2024-01-29T21:15:05Z","url":"https://github.com/sablier-labs/lockup/issues/801"},{"author":"PaulRBerg","body":"See:\r\n\r\n- https://github.com/alexfertel/bulloak\r\n- https://prberg.com/presentations/solidity-summit-2023","createdAt":"2024-01-23T11:28:43Z","labels":["effort: epic","priority: 2","type: test","work: complicated"],"number":799,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor all tests to use Bulloak","type":"issue","updatedAt":"2024-08-28T16:28:52Z","url":"https://github.com/sablier-labs/lockup/issues/799"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/20:\r\n\r\n- [x] Rename `createWithDeltas` to `createWithDurations`\r\n- [x] Rename `createWithMilestones` to `createWithTimestamps`\r\n- [x] Rename `createWithRange` to `createWithTimestamps`","createdAt":"2024-01-20T13:22:28Z","labels":["effort: high","type: refactor","priority: 1","work: complicated"],"number":797,"repository":"sablier-labs/lockup","state":"closed","title":"Standardize create functions","type":"issue","updatedAt":"2024-01-24T19:54:49Z","url":"https://github.com/sablier-labs/lockup/issues/797"},{"author":"PaulRBerg","body":"We're now running the fork tests against the Mainnet deployments, so the id of the first stream may not be 1 anymore.","createdAt":"2023-07-11T09:31:01Z","labels":[],"number":144,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Assumption that the first stream id is the 1 in the fork tests","type":"issue","updatedAt":"2023-07-11T14:09:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/144"},{"author":"PaulRBerg","body":"- [x] Add \"Notes\" in `cancel` to explain that assets are automatically refunded\r\n- [x] Explain in the proxy plugin NatSpec that the Core hooks are what make this design possible\r\n- [x] Remove the requirements [here](https://github.com/sablier-labs/v2-periphery/blob/4c603d1861a08316ec36c53b0287e66bfce1d64c/src/interfaces/ISablierV2ProxyPlugin.sol#L12-L14) (they are superfluous)","createdAt":"2023-07-08T18:49:28Z","labels":[],"number":137,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Documentation nitpicks","type":"issue","updatedAt":"2023-07-10T13:43:27Z","url":"https://github.com/sablier-labs/v2-periphery/issues/137"},{"author":"andreivladbrg","body":"In the latest [PR](https://github.com/sablier-labs/v2-periphery/pull/131) we added re-export types. However, this does not work for `permit2` due to the remappings we declared:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/76c5af55739c0447bff956ea6287be3ae8e8c22a/remappings.txt#L9-L10\r\n\r\nWhen attempting to import the `permit2` types from `v2-periphery`, the following error will appears:\r\n\r\n![image](https://github.com/sablier-labs/v2-periphery/assets/99738872/4438835e-0e5d-4017-95af-6d6e999c1d50)\r\n\r\nThe solution to this issue involves changing the remappings to:\r\n```\r\n@permit2/=lib/permit2/src/\r\n@permit2-test/=lib/permit2/test/\r\n```","createdAt":"2023-07-07T15:13:17Z","labels":[],"number":136,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Faulty Permit2 remappings due to lack of context-aware remappings in Foundry","type":"issue","updatedAt":"2023-07-10T11:11:04Z","url":"https://github.com/sablier-labs/v2-periphery/issues/136"},{"author":"PaulRBerg","body":"The goal is to not require end users to install third-party packages.\r\n\r\nSee `Tokens.sol` and `Math.sol` in V2 Core.","createdAt":"2023-07-06T18:52:14Z","labels":[],"number":130,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Re-export Permit2 and PRBProxy types","type":"issue","updatedAt":"2023-07-07T10:40:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/130"},{"author":"PaulRBerg","body":"This is an end-to-end test to ensure that the Periphery system is coupled correctly.","createdAt":"2023-07-06T09:26:26Z","labels":[],"number":129,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write a CI workflow scheduled to run weekly for checking that all known LockupLinear and LockupDynamic contracts are listed in the Archive","type":"issue","updatedAt":"2023-11-26T16:01:50Z","url":"https://github.com/sablier-labs/v2-periphery/issues/129"},{"author":"PaulRBerg","body":"The fork tests are currently run against a single chain.\r\n\r\nRef: https://github.com/foundry-rs/book/issues/872","createdAt":"2023-07-02T18:53:05Z","labels":["effort: epic","priority: 3","type: test","work: complicated"],"number":126,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Run fork tests on multiple chains","type":"issue","updatedAt":"2024-04-11T00:54:13Z","url":"https://github.com/sablier-labs/v2-periphery/issues/126"},{"author":"PaulRBerg","body":"Once V2 Core is published and deployed to Ethereum Mainnet, we should refactor the fork tests in this repo to use Ethereum Mainnet instead of Goerli.\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/v2-core/issues/577\r\n- https://github.com/sablier-labs/v2-periphery/issues/110","createdAt":"2023-06-30T12:56:35Z","labels":[],"number":118,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Run fork tests against Ethereum Mainnet","type":"issue","updatedAt":"2023-07-07T10:39:44Z","url":"https://github.com/sablier-labs/v2-periphery/issues/118"},{"author":"PaulRBerg","body":"- [x] Bump `@prb/proxy` to stable v4.0.0 (ref https://github.com/PaulRBerg/prb-proxy/issues/126)\r\n- [x] Double-check README and wikis\r\n- [x] Make the repo public\r\n    - [x] Remove the Codecov token\r\n- [x] Regenerate gas snapshot\r\n- [x] Run deep fuzzing in CI","createdAt":"2023-06-24T09:26:42Z","labels":[],"number":110,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Chores to do before mainnet","type":"issue","updatedAt":"2023-07-13T15:23:41Z","url":"https://github.com/sablier-labs/v2-periphery/issues/110"},{"author":"PaulRBerg","body":"Once we make this repo public, we will want to pass the `--verify` flag to all deployment scripts under `.github/workflows` so that their source code gets verified automatically on Etherscan.","createdAt":"2023-06-23T20:19:33Z","labels":[],"number":108,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add \"--verify\" flag to all deployment scripts","type":"issue","updatedAt":"2023-06-25T09:48:53Z","url":"https://github.com/sablier-labs/v2-periphery/issues/108"},{"author":"PaulRBerg","body":"Benefits:\r\n\r\n1. Prevent malicious envoys from misusing `SablierV2ProxyTarget`\r\n2. Less error-prone because there's no reliance on the front-end to pass the correct address\r\n\r\nRef https://github.com/cantinasec/review-sablier2/issues/3.","createdAt":"2023-06-14T20:59:43Z","labels":[],"number":101,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Hard-code Permit2 address in constructor","type":"issue","updatedAt":"2023-06-28T18:54:44Z","url":"https://github.com/sablier-labs/v2-periphery/issues/101"},{"author":"PaulRBerg","body":"Smth like:\r\n\r\n```solidity\r\nimport { IPRBProxy } from \"@prb/proxy/interfaces/IPRBProxy.sol\";\r\n\r\nfunction foo() external {\r\n    address owner = IPRBProxy(address(this)).owner();\r\n}\r\n```\r\n\r\nRefs:\r\n\r\n- https://github.com/PaulRBerg/prb-proxy/issues/108\r\n- https://github.com/cantinasec/review-sablier2/issues/2","createdAt":"2023-06-14T18:31:26Z","labels":[],"number":100,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Refactor proxy target to call `owner` method onto itself","type":"issue","updatedAt":"2023-07-01T05:58:33Z","url":"https://github.com/sablier-labs/v2-periphery/issues/100"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/solhint-community/solhint-community\r\n- https://github.com/PaulRBerg/foundry-template/pull/25\r\n- https://twitter.com/PaulRBerg/status/1666753482609553408","createdAt":"2023-06-14T10:59:18Z","labels":[],"number":95,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Switch to `solhint-community` to get warnings for unused imports","type":"issue","updatedAt":"2023-06-28T10:54:28Z","url":"https://github.com/sablier-labs/v2-periphery/issues/95"},{"author":"PaulRBerg","body":"See:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/cc9434f4f722ba259366cff6f437d5ee3df459cd/script/DeployPeriphery.s.sol#L11-L14","createdAt":"2023-05-31T17:45:24Z","labels":[],"number":87,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add missing `broadcaster` modifier in `DeployPeriphery`","type":"issue","updatedAt":"2023-05-31T18:14:56Z","url":"https://github.com/sablier-labs/v2-periphery/issues/87"},{"author":"PaulRBerg","body":"I removed the `batchCreate` fork tests from #73 due to the pressure to wrap up the repo for the audit. These tests were not working anymore, and I did not have the time to review them properly.\r\n\r\nHere's a GitHub Gist with @andreivladbrg's code:\r\n\r\nhttps://gist.github.com/PaulRBerg/156d2726b28e54510f89d9fdb99a294a\r\n\r\n","createdAt":"2023-05-31T13:07:27Z","labels":[],"number":85,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write `batchCreate` fork tests","type":"issue","updatedAt":"2023-06-23T20:22:02Z","url":"https://github.com/sablier-labs/v2-periphery/issues/85"},{"author":"PaulRBerg","body":"Just like https://github.com/sablier-labs/v2-core/issues/372.","createdAt":"2023-05-31T12:43:34Z","labels":[],"number":84,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Release package, branch and tag","type":"issue","updatedAt":"2023-07-01T16:20:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/84"},{"author":"PaulRBerg","body":"As per the rationale shared in https://github.com/sablier-labs/v2-periphery/discussions/59.","createdAt":"2023-05-30T18:24:08Z","labels":[],"number":81,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename `linear` to `lockupLinear` and `dynamic` to `lockupDynamic`","type":"issue","updatedAt":"2023-05-31T13:12:13Z","url":"https://github.com/sablier-labs/v2-periphery/issues/81"},{"author":"PaulRBerg","body":"Once we publish `@sablier/v2-core` as a package to the npm registry, we should install it as a Node.js dependency.","createdAt":"2023-05-30T17:43:13Z","labels":[],"number":79,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add `@sablier/v2-core` as a Node.js dependency","type":"issue","updatedAt":"2023-07-01T16:01:30Z","url":"https://github.com/sablier-labs/v2-periphery/issues/79"},{"author":"PaulRBerg","body":"We need to change all OpenZeppelin imports to be `@openzeppelin/contracts` instead of `@openzeppelin` because the Node.js package [`@openzeppelin/contracts`](https://www.npmjs.com/package/@openzeppelin/contracts) cannot be remapped.","createdAt":"2023-05-30T17:09:43Z","labels":[],"number":77,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Custom OpenZeppelin remapping is breaking for Node.js users","type":"issue","updatedAt":"2023-05-31T13:06:46Z","url":"https://github.com/sablier-labs/v2-periphery/issues/77"},{"author":"razgraf","body":"As of recently, the v2-periphery makes use of a `SablierV2Archive` registry contract to track Sablier deployment. \r\nFor a more seamless deployment experience we should attach deployment scrips to v2-periphery that can handle both v2-core instantiation and instance registration in the archive contract.","createdAt":"2023-05-30T10:43:38Z","labels":[],"number":76,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Provide end-to-end deployment scripts","type":"issue","updatedAt":"2023-06-15T13:58:47Z","url":"https://github.com/sablier-labs/v2-periphery/issues/76"},{"author":"PaulRBerg","body":"Analogous to https://github.com/sablierhq/v2-core/issues/445.","createdAt":"2023-05-19T09:07:09Z","labels":[],"number":67,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Provide utility to deploy bytecode precompiled with via IR","type":"issue","updatedAt":"2023-07-01T05:59:58Z","url":"https://github.com/sablier-labs/v2-periphery/issues/67"},{"author":"PaulRBerg","body":"Analogous to [`CONTRIBUTING.md`](https://github.com/sablierhq/v2-core/blob/c7cd293abe354e2e503b986bc78feab99a137aed/CONTRIBUTING.md) in V2 Core.","createdAt":"2023-05-18T20:31:24Z","labels":[],"number":66,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Add contributing guide","type":"issue","updatedAt":"2023-05-19T09:13:45Z","url":"https://github.com/sablier-labs/v2-periphery/issues/66"},{"author":"PaulRBerg","body":"Running `FOUNDRY_PROFILE=optimized forge build` generates contract artifacts in the `optimized-out` directory, many of which should not be part of the Node.js package that gets deployed on the npm registry.\r\n\r\nWe should write a script that filters Forge's output and keeps only those contracts that are not needed in production (e.g. not the scripts).\r\n","createdAt":"2023-05-18T20:23:21Z","labels":[],"number":64,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write a script that filters the contract artifacts for deployment to the npm registry","type":"issue","updatedAt":"2023-05-24T15:08:33Z","url":"https://github.com/sablier-labs/v2-periphery/issues/64"},{"author":"PaulRBerg","body":"To be able to publish a functional Node.js package, we need to install the following Node.js dependencies, and list them in `package.json`:\r\n\r\n- [`@openzeppelin/contracts`](https://www.npmjs.com/package/@openzeppelin/contracts)\r\n- [`@prb/math`](https://www.npmjs.com/package/@prb/math)\r\n- [`@prb/proxy`](https://www.npmjs.com/package/@prb/proxy)\r\n- [`permit2`](https://github.com/Uniswap/permit2)\r\n\r\nBlockers:\r\n\r\n- [x] PRBProxy v4 is not on npm just yet (I'll fix this shortly)\r\n- [x] ~Permit2 is not on npm https://github.com/Uniswap/permit2/issues/216~ **edit**: not a blocker, we can [install NPM packages from GitHub](https://www.pluralsight.com/guides/install-npm-packages-from-gitgithub)","createdAt":"2023-05-18T20:21:36Z","labels":[],"number":63,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Install missing Node.js dependencies","type":"issue","updatedAt":"2023-05-30T17:57:15Z","url":"https://github.com/sablier-labs/v2-periphery/issues/63"},{"author":"PaulRBerg","body":"Same as https://github.com/sablierhq/v2-core/issues/200.","createdAt":"2023-05-18T15:34:18Z","labels":[],"number":61,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Continuous deployment of contract ABIs to GitHub Actions","type":"issue","updatedAt":"2023-05-24T15:08:29Z","url":"https://github.com/sablier-labs/v2-periphery/issues/61"},{"author":"PaulRBerg","body":"- [x] `cancel`\r\n- [x] `renounce`\r\n- [x] `withdraw`\r\n- [x] `withdrawMax`","createdAt":"2023-05-15T19:16:07Z","labels":[],"number":57,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write unit tests for basic functions","type":"issue","updatedAt":"2023-05-18T18:58:01Z","url":"https://github.com/sablier-labs/v2-periphery/issues/57"},{"author":"PaulRBerg","body":"As discussed in #54, we should get rid of the requirement to keep the Permit2 params in synchrony by replacing our `Permit2Params` struct with `PermitSingle`:\r\n\r\nhttps://github.com/Uniswap/permit2/blob/bbbc92f895049ca45c4b25a450f9d3e907659284/src/interfaces/IAllowanceTransfer.sol#L55-L62\r\n\r\nThis way, the front-end client will have to manually pass the `PermitSingle` struct to the `ProxyTarget` contract.","createdAt":"2023-05-14T17:14:51Z","labels":[],"number":55,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Replace `Permit2Params` with `PermitSingle`","type":"issue","updatedAt":"2023-05-18T15:34:42Z","url":"https://github.com/sablier-labs/v2-periphery/issues/55"},{"author":"PaulRBerg","body":"Just like we do in [`ProxyPlugin`](https://github.com/sablierhq/v2-periphery/blob/b4921bc737fcf7c955c926e9a031528983a32b5d/src/SablierV2ProxyPlugin.sol#L37), we should inherit from the `OnlyDelegateCall` abstract in `ProxyTarget` to prevent accidental direct calls to `ProxyTarget`, and then apply the `onlyDelegateCall` modifier to all user-facing functions.","createdAt":"2023-05-12T19:04:49Z","labels":[],"number":51,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Prevent accidental direct calls to `ProxyTarget` with the `OnlyDelegateCall` abstract","type":"issue","updatedAt":"2023-05-18T15:34:38Z","url":"https://github.com/sablier-labs/v2-periphery/issues/51"},{"author":"PaulRBerg","body":"Same rationale as in https://github.com/sablierhq/v2-periphery/pull/29#issuecomment-1535996167\r\n\r\n- Inherit from `PRBProxyStorage` in `ProxyTarget`\r\n- Use `owner` instead of `msg.sender`","createdAt":"2023-05-12T18:51:39Z","labels":[],"number":50,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Inherit from `PRBProxyStorage` in `ProxyTarget`","type":"issue","updatedAt":"2023-05-18T15:34:35Z","url":"https://github.com/sablier-labs/v2-periphery/issues/50"},{"author":"PaulRBerg","body":"We can replace our local [`getPermit2Signature`](https://github.com/sablierhq/v2-periphery/blob/b4921bc737fcf7c955c926e9a031528983a32b5d/test/Base.t.sol#L271) helper with the utils in [`permit2/test/utils/PermitSignature.sol`](https://github.com/Uniswap/permit2/blob/bbbc92f895049ca45c4b25a450f9d3e907659284/test/utils/PermitSignature.sol).","createdAt":"2023-05-12T18:50:15Z","labels":[],"number":49,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Use the `PermitSignature` utils from the `permit2` repo","type":"issue","updatedAt":"2023-05-18T15:34:31Z","url":"https://github.com/sablier-labs/v2-periphery/issues/49"},{"author":"PaulRBerg","body":"As the recent saga with the Permit2 signatures in the front-end has shown, it would be a good idea to delete the hard-coded `Permit2` address, and make it a user-provided parameter.","createdAt":"2023-05-12T17:28:59Z","labels":[],"number":48,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Parameterize `permit2` address","type":"issue","updatedAt":"2023-05-18T14:09:40Z","url":"https://github.com/sablier-labs/v2-periphery/issues/48"},{"author":"PaulRBerg","body":"We need to find a new name for the `SablierV2ChainLog` contract:\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/main/src/SablierV2ChainLog.sol\r\n\r\nBecause this is the same name as used by Maker's [`dss-change-log`](https://github.com/makerdao/dss-chain-log), which is a versioned chain log system. Whereas our `ChainLog` is an unversioned \"dump\" of all Sablier addresses (see my comment [here](https://github.com/sablierhq/v2-periphery/issues/37#issuecomment-1539015529)).\r\n\r\nGiven that someday we may want to implement a similar versioned log, it would be prudent to avoid a potential name collision by renaming the current `ChainLog` to something else.","createdAt":"2023-05-12T13:28:05Z","labels":[],"number":46,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Rename `SablierV2ChainLog`","type":"issue","updatedAt":"2023-05-18T15:34:56Z","url":"https://github.com/sablier-labs/v2-periphery/issues/46"},{"author":"PaulRBerg","body":"See https://github.com/foundry-rs/foundry/pull/4826#issuecomment-1543962477.","createdAt":"2023-05-11T18:00:09Z","labels":[],"number":45,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Replace `changePrank` with `vm.startPrank`","type":"issue","updatedAt":"2023-05-15T20:50:36Z","url":"https://github.com/sablier-labs/v2-periphery/issues/45"},{"author":"PaulRBerg","body":"Same as https://github.com/sablierhq/v2-core/issues/483.","createdAt":"2023-05-11T17:42:37Z","labels":[],"number":44,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Upgrade to latest Solidity","type":"issue","updatedAt":"2023-09-20T09:21:57Z","url":"https://github.com/sablier-labs/v2-periphery/issues/44"},{"author":"PaulRBerg","body":"Tracking:\r\n\r\n- [x] `batchCreate` functions\r\n- [x] `cancelAndCreate`\r\n- [x] `cancelMultiple`\r\n- [x] `onStreamCanceled`\r\n- [x] `wrapAndCreate`\r\n\r\n@andreivladbrg started working on this on the [`andrei/fork-tests`](https://github.com/sablierhq/v2-periphery/tree/andrei/fork-tests) branch.","createdAt":"2023-05-11T14:52:14Z","labels":[],"number":43,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Write fork tests","type":"issue","updatedAt":"2023-05-31T13:06:30Z","url":"https://github.com/sablier-labs/v2-periphery/issues/43"},{"author":"PaulRBerg","body":"See https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4231 and the release notes for OpenZeppelin's [v4.9.0-rc.0](https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.0-rc.0).","createdAt":"2023-05-10T09:37:44Z","labels":[],"number":41,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Use `SafeERC20.forceApprove` instead of the standard `IERC20.approve`","type":"issue","updatedAt":"2023-05-12T18:35:47Z","url":"https://github.com/sablier-labs/v2-periphery/issues/41"},{"author":"PaulRBerg","body":"Note: all caveats mentioned [here](https://github.com/sablierhq/v2-core/issues/332) still apply to `forge coverage`.\r\n\r\n- [x] Generate coverage on every commit and PR on `main`\r\n- [x] Upload coverage report to a platform like [Codecov](https://codecov.io/)","createdAt":"2023-05-08T20:07:07Z","labels":[],"number":39,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Integrate coverage in CI pipeline","type":"issue","updatedAt":"2023-05-31T14:32:38Z","url":"https://github.com/sablier-labs/v2-periphery/issues/39"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n[While working](https://github.com/sablierhq/v2-periphery/pull/29) on the proxy plugin, we stumbled upon the issue described in https://github.com/sablierhq/v2-periphery/issues/36.\r\n\r\nThinking about a solution, I have discovered another problem - that we offer zero on-chain support to integrators in terms of the ability to fetch the Sablier V2 contract addresses in another smart contract.\r\n\r\n## Solution\r\n\r\nTo address this problem, as well as fix #36, we should build something similar to Maker's [`ChainLog`](https://github.com/makerdao/dss-chain-log#dss-chain-log) contract. The documentation for Maker's contract can be found [here](https://docs.makerdao.com/deployment-addresses/multi-collateral-dai-public-releases).","createdAt":"2023-05-08T08:18:53Z","labels":[],"number":37,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Chain log with all protocol deployments","type":"issue","updatedAt":"2023-05-11T09:31:15Z","url":"https://github.com/sablier-labs/v2-periphery/issues/37"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAs pointed out by @andreivladbrg in this [comment](https://github.com/sablierhq/v2-periphery/pull/29#issuecomment-1535482128), and as further explained by me in this [reply](https://github.com/sablierhq/v2-periphery/pull/29#issuecomment-1535996167), there is a low-risk security problem in our [current proxy plugin implementation](https://github.com/sablierhq/v2-periphery/blob/e62b768/src/SablierV2ProxyPlugin.sol#L36-L54).\r\n\r\nThe problem is that anyone can call the `onStreamCanceled` implementation on the plugin, like this:\r\n\r\n```solidity\r\nuint128 senderAmount = 10e18;\r\nuint128 recipientAmount = 0;\r\nISablierV2LockupSender(address(proxy)).onStreamCanceled(lockupContract, streamId, recipient, senderAmount, recipientAmount);\r\n```\r\n\r\nAnd thus, anyone can withdraw any amount of ERC-20 assets from the proxy contract to the proxy owner:\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/e62b768/src/SablierV2ProxyPlugin.sol#L53\r\n\r\nThis is a low-risk issue because, generally, there is no incentive to trigger random ERC-20 transfers on behalf of other accounts, but there may be cases when this is an undesirable state of affairs:\r\n\r\n1. Adversarial contexts. The proxy contract may perform a flash loan, and a competing flash borrower who sees their tx in the mempool could block it by withdrawing the assets to their EOA.\r\n2. Griefing: deliberately blocking someone's proxy contract transactions for no particular benefit.\r\n3. Tax implications. Withdrawing assets from the proxy contract might be interpreted as a taxable event.\r\n\r\n## Potential Solution\r\n\r\nThe `lockup` address is a user-provided function parameter:\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/e62b768026d5df52a3df340cd0df108bf455629e/src/SablierV2ProxyPlugin.sol#L37\r\n\r\nThis makes it difficult to mitigate the problem. The only solution I can think of now is to add an allowlist of Sablier contract addresses in `SablierV2ProxyPlugin` and cross-check `lockup` against it. However, implementing this would also require us to inherit from `Adminable` and write an admin-gated function for listing new contracts, i.e., `addSablierContract`, which would be demanding.","createdAt":"2023-05-05T10:00:32Z","labels":[],"number":36,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Figure out a way to prevent direct calls to the plugin","type":"issue","updatedAt":"2023-05-11T09:31:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/36"},{"author":"PaulRBerg","body":"The code still refers to Airdrops as Drops. For greater symmetry between the source code and what's shown in the UI, Drops should be refactored to Airdrops.\n\nNote: I performed this change in PR https://github.com/sablier-labs/v2-interfaces/pull/1301, but it now has a lot of git conflicts relative to `staging`.\n","createdAt":"2025-01-13T14:22:11Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1310,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor \"drops\" to \"airdrops\"","type":"issue","updatedAt":"2025-01-28T12:25:31Z","url":"https://github.com/sablier-labs/interfaces/issues/1310"},{"author":"PaulRBerg","body":"One of the changes I included in https://github.com/sablier-labs/v2-interfaces/pull/1279 (a closed PR) was to provide a clearer nesting structure in the link constants.\n\n<details><summary>Toggle to see updated links file</summary>\n<p>\n\n```typescript\nconst links = {\n  article: {\n    free: \"https://blog.sablier.com/why-and-how-sablier-is-free-to-use/\",\n  },\n  blog: \"https://blog.sablier.com\",\n  captcha: \"https://www.google.com/recaptcha/api/siteverify\",\n  canny: \"https://sablier.canny.io/feature-requests\",\n  client: {\n    airstreams: \"https://app.sablier.com/airstreams\",\n    app: \"https://app.sablier.com/\",\n    demo: {\n      airstream:\n        \"https://app.sablier.com/airstream/0x7a4e9da9250512929a6fcba79ea2fd62c39232c9-11155111/\",\n      payments: \"https://app.sablier.com/payments/stream/FL-42161-1\",\n      vesting: \"https://app.sablier.com/vesting/stream/LL-1-273/\",\n    },\n    localhost: \"http://localhost:4001\",\n    safe: \"https://app.safe.global/share/safe-app?appUrl=https%3A%2F%2Fapp.sablier.com%2F\",\n  },\n  customers: {\n    astaria: \"https://twitter.com/AstariaXYZ\",\n    exactly: \"https://blog.sablier.com/case-study-exactly-protocol/\",\n    fjord: \"https://x.com/FjordFoundry/status/1795564491251609912\",\n    maple: \"https://blog.sablier.com/case-study-maple/\",\n    nouns: \"https://nouns.wtf/vote/143\",\n    reflexer: \"https://reflexer.finance/\",\n    rook: \"https://blog.sablier.com/how-rook-labs-uses-sablier-for-payroll/\",\n    shapeshift: \"https://blog.sablier.com/case-study-shapeshift/\",\n    steakhut: \"https://twitter.com/steakhut_fi\",\n    tokensight:\n      \"https://blog.sablier.com/how-tokensight-leverages-sabliers-vesting-solution/\",\n    uniswap: \"https://www.tally.xyz/gov/uniswap/proposal/63\",\n  },\n  docs: {\n    airstreamClaim:\n      \"https://docs.sablier.com/apps/guides/how-to#how-to-claim-from-an-airstream-campaign\",\n    airstreamCreate:\n      \"https://docs.sablier.com/apps/guides/how-to#how-to-create-an-airstream-campaign\",\n    csvGuides:\n      \"https://docs.sablier.com/apps/guides/csv-support#columns-and-caveats\",\n    fees: \"https://docs.sablier.com/concepts/fees\",\n    guides: \"https://docs.sablier.com/apps/guides/how-to\",\n    protocol: \"https://docs.sablier.com\",\n    streamCreateCSV:\n      \"https://docs.sablier.com/apps/guides/how-to#how-to-create-an-airstream-campaign\",\n    streaming: \"https://docs.sablier.com/concepts/streaming\",\n  },\n  email: {\n    contact: \"contact@sablier.com\",\n    legal: \"legal@sablier.com\",\n    sales: \"tech@sablier.com\",\n    tech: \"tech@sablier.com\",\n  },\n  forms: {\n    call: \"https://forms.gle/6z3XyfSLXDoRghG99\",\n    frens: \"https://frenreviews.com/project/sablier/431\",\n  },\n  github: {\n    communityList: \"https://github.com/sablier-labs/community-token-list\",\n    merkle: \"https://github.com/sablier-labs/merkle-api\",\n    organization: \"https://github.com/sablier-labs\",\n    raw: {\n      chains:\n        \"https://raw.githubusercontent.com/sablier-labs/assets/main/chains/\",\n    },\n  },\n  ipfs: {\n    gateway: {\n      cloudflare: \"https://cloudflare-ipfs.com/ipfs/\",\n      ipfs_io: \"https://ipfs.io/ipfs/\",\n      get primary() {\n        return this.ipfs_io;\n      },\n    },\n  },\n  landing: \"https://sablier.com\",\n  landingLabs: \"https://sablierlabs.co.uk\",\n  legal: {\n    privacy: \"https://files.sablier.com/privacy-policy.pdf\",\n    risk: \"https://files.sablier.com/risk-notice.pdf\",\n    terms: \"https://files.sablier.com/terms-of-service.pdf\",\n  },\n  investor: {\n    a16zcrypto: \"https://a16zcrypto.com\",\n    acapital: \"https://acapital.com\",\n    charles: \"https://linkedin.com/in/charlessonghurst\",\n    danielbar: \"https://x.com/danieltbar\",\n    evanvanness: \"https://x.com/evan_van_ness\",\n    factor: \"https://f.actor\",\n    fenbushi: \"https://fenbushi.vc\",\n    gd1: \"https://gd1.vc/gd1-crypto\",\n    litocoen: \"https://x.com/litocoen\",\n  },\n  legacy: {\n    landing: \"https://legacy-landing.sablier.com\",\n    recipient: \"https://legacy-recipient.sablier.com\",\n    safe: \"https://app.safe.global/share/safe-app?appUrl=https%3A%2F%2Fapp.sablier.com%2F\",\n    sender: \"https://legacy-sender.sablier.com\",\n  },\n  logo: {\n    icon: \"https://files.sablier.com/icon-256x256.png\",\n    full: \"https://files.sablier.com/logo.png\",\n  },\n  nft: {\n    opensea: (\n      chain: string | undefined,\n      contract: string | undefined,\n      id: string | undefined,\n    ) => `https://opensea.io/assets/${chain}/${contract}/${id}`,\n  },\n  security: {\n    audits: \"https://github.com/sablier-labs/audits\",\n    bounty: \"https://github.com/sablier-labs/v2-core/blob/main/SECURITY.md\",\n    code: \"https://github.com/sablier-labs/v2-core\",\n  },\n  social: {\n    crunchbase: \"https://www.crunchbase.com/organization/sablier-7297\",\n    discord: \"https://discord.gg/bSwRCwWRsT\",\n    linkedin: \"https://linkedin.com/company/sablier-labs\",\n    linktree: \"https://linktr.ee/SablierLabs\",\n    twitter: {\n      dropPhaver: \"https://x.com/Sablier/status/1838589415423139961\",\n      grantUniswap: \"https://x.com/PaulRBerg/status/1798013231493161194\",\n      product: \"https://x.com/Sablier\",\n      username: \"@Sablier\",\n    },\n    youtube: \"https://www.youtube.com/@sablier-labs\",\n  },\n  templates: {\n    airstream: \"https://files.sablier.com/templates/airstream-template.csv\",\n    flow: \"https://files.sablier.com/templates/flow-template.csv\",\n    lockup: {\n      cliff: {\n        duration:\n          \"https://files.sablier.com/templates/cliff-duration-template.csv\",\n        range: \"https://files.sablier.com/templates/cliff-range-template.csv\",\n      },\n      linear: {\n        duration:\n          \"https://files.sablier.com/templates/linear-duration-template.csv\",\n        range: \"https://files.sablier.com/templates/linear-range-template.csv\",\n      },\n      dynamicCliffExponential: {\n        duration:\n          \"https://files.sablier.com/templates/exponentialCliff-duration-template.csv\",\n        range:\n          \"https://files.sablier.com/templates/exponentialCliff-range-template.csv\",\n      },\n      dynamicExponential: {\n        duration:\n          \"https://files.sablier.com/templates/exponential-duration-template.csv\",\n        range:\n          \"https://files.sablier.com/templates/exponential-range-template.csv\",\n      },\n      dynamicUnlockCliff: {\n        duration:\n          \"https://files.sablier.com/templates/unlockCliff-duration-template.csv\",\n        range:\n          \"https://files.sablier.com/templates/unlockCliff-range-template.csv\",\n      },\n      dynamicUnlockLinear: {\n        duration:\n          \"https://files.sablier.com/templates/unlockLinear-duration-template.csv\",\n        range:\n          \"https://files.sablier.com/templates/unlockLinear-range-template.csv\",\n      },\n      tranchedBackweighted: {\n        duration:\n          \"https://files.sablier.com/templates/backWeighted-range-template.csv\",\n        range:\n          \"https://files.sablier.com/templates/backWeighted-range-template.csv\",\n      },\n      tranchedMonthly: {\n        duration:\n          \"https://files.sablier.com/templates/monthly-range-template.csv\",\n        range: \"https://files.sablier.com/templates/monthly-range-template.csv\",\n      },\n      tranchedTimelock: {\n        duration:\n          \"https://files.sablier.com/templates/timelock-duration-template.csv\",\n        range:\n          \"https://files.sablier.com/templates/timelock-range-template.csv\",\n      },\n      tranchedStepper: {\n        duration:\n          \"https://files.sablier.com/templates/stepper-duration-template.csv\",\n        range: \"https://files.sablier.com/templates/stepper-range-template.csv\",\n      },\n    },\n  },\n  tools: {\n    swissKnife: {\n      calldata: (value: string) =>\n        `https://calldata.swiss-knife.xyz/decoder?calldata=${value}`,\n    },\n    tenderly: {\n      dashboard: (params: string) =>\n        `https://dashboard.tenderly.co/Sablier/project/simulator/new?${params}`,\n    },\n  },\n  trm: {\n    addressScreening: \"https://api.trmlabs.com/public/v2/screening/addresses\",\n    bannedScreening: \"https://api.trmlabs.com/public/v1/sanctions/screening\",\n  },\n  vendor: {\n    crisp: \"https://crisp.chat/en/\",\n    mixpanel: \"https://mixpanel.com/\",\n    sentry: \"https://sentry.io/welcome/\",\n    unstable_connector:\n      \"https://wagmi.sh/react/api/transports/unstable_connector\",\n    vercel: \"https://vercel.com/docs/concepts/analytics/privacy-policy\",\n    walletConnect: \"https://walletconnect.network/\",\n  },\n  video: {\n    intro: \"https://youtu.be/0XvJ112Jf1k\",\n  },\n};\n\nexport default links;\n```\n\n</p>\n</details> ","createdAt":"2025-01-13T14:17:08Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1309,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor links for clearer nesting structure","type":"issue","updatedAt":"2025-01-28T12:26:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1309"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-interfaces/issues/1291#issuecomment-2586870590, the task is to implement some sort of informational modal when the user uploads a correct CSV for vesting that has too many recipients (more than the allowed group limits).\n\nThe goal is to educate the user that in this case, a Merkle distribution would be a better fit than the Vesting streams. However, let's also note that it's possible to create batches of vested streams if the user is happy to upload 2, 3, etc., CSV files separately, and create the streams in different Ethereum transactions.","createdAt":"2025-01-13T11:56:43Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":1308,"repository":"sablier-labs/interfaces","state":"closed","title":"Educate users about Airdrops when the number of recipients is higher than the group limits","type":"issue","updatedAt":"2025-01-28T12:24:45Z","url":"https://github.com/sablier-labs/interfaces/issues/1308"},{"author":"razgraf","body":"From slack\n\n> I also thought a while ago about adding a small list of tokens + small tags (what they used us for) in the home-page of the app. While that’s lower priority, it works towards the same goal as the idea above: social proofing.\n","createdAt":"2025-01-13T09:12:42Z","labels":[],"number":1307,"repository":"sablier-labs/interfaces","state":"closed","title":"Social proofing for the home page","type":"issue","updatedAt":"2025-01-28T12:26:50Z","url":"https://github.com/sablier-labs/interfaces/issues/1307"},{"author":"IaroslavMazur","body":"There is an issue with centering the contents of the **Timeline** and **Amounts** when presenting the Voided Payment Streams in our app:\n![Image](https://github.com/user-attachments/assets/4c3df70c-5489-4889-b2e0-cd1c78991f4b)\n\nHere's an example [search query](https://app.sablier.com/payments/?t=search&c=42161) illustrating the above.\n\ncc @sablier-labs/frontend","createdAt":"2025-01-08T06:24:39Z","labels":["type: bug"],"number":1302,"repository":"sablier-labs/interfaces","state":"closed","title":"Content centering issue when listing Payment Streams","type":"issue","updatedAt":"2025-01-28T12:27:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1302"},{"author":"razgraf","body":"Some DAOs (e.g. Fluid) asked for a safer custom allowance system. We're currently defaulting to infinte allowance for simplicity, but we could design a system where the user picks if they want to use infinte vs. based on some amount.\n\nCould be custom amount e.g. we ask them to input a number when they click on the allowance button, or taken from the UI, although this last version is susceptible to race-conditions since adding a new stream (or modifying a deposit) would change that required amount.","createdAt":"2025-01-06T16:14:26Z","labels":["type: feature","backlog","priority: 2","work: clear"],"number":1300,"repository":"sablier-labs/interfaces","state":"open","title":"Toggle to switch between infinite allowance and strictly-necessary","type":"issue","updatedAt":"2025-07-09T18:55:54Z","url":"https://github.com/sablier-labs/interfaces/issues/1300"},{"author":"razgraf","body":"- https://docs.abs.xyz/ecosystem/indexers#the-graph\n- https://docs.sablier.com/guides/lockup/deployments#abstract\n\nTasks\n\n- [ ] App\n    - [ ] When the RPC becomes public, make sure the configuration is corect\n    - Later, update with the official wagmi defintion \n- [x] Subgraph\n- [x] Services\n- [x] Token list and icons\n   - [ ] When the RPC becomes public, add it to the `decimals` github action","createdAt":"2025-01-06T13:45:07Z","labels":[],"number":1297,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for Abstract L2","type":"issue","updatedAt":"2025-01-27T15:56:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1297"},{"author":"PaulRBerg","body":"See this [link](https://app.safe.global/apps/open?safe=arb1:0x5Bb50dE2b5dFe514FfcAa1a94fc132cb59918C6a&appUrl=https%3A%2F%2Fapp.sablier.com%2F).\n\nI was connected with my signer 0x87f41e25144041a88B0f57BAb9101e89d50c2dB1.\n\nI did NOT use WalletConnect.\n\n**Edit**: after further testing with Chrome and Brave, it appears that the bug occurs only in the Arc browser.\n\n<img width=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/9dc2357f-a68a-4223-a9f8-6af9818a1db6\" />\n","createdAt":"2025-01-04T16:52:02Z","labels":["type: bug","priority: 0","work: complicated"],"number":1296,"repository":"sablier-labs/interfaces","state":"closed","title":"Signer address connected instead of Safe wallet address in Arc/ Chrome","type":"issue","updatedAt":"2025-01-13T11:29:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1296"},{"author":"PaulRBerg","body":"The `/ month` suffix is not visible:\n\n<img width=\"423\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d174ad54-2cbb-4538-a4c7-1cbde5bf12b2\" />\n\n","createdAt":"2025-01-04T16:19:13Z","labels":["priority: 3","effort: low","work: clear"],"number":1295,"repository":"sablier-labs/interfaces","state":"closed","title":"Truncate to 2 decimals the Flow rate in the Summary card","type":"issue","updatedAt":"2025-01-28T12:25:54Z","url":"https://github.com/sablier-labs/interfaces/issues/1295"},{"author":"PaulRBerg","body":"An initial deposit is not required when creating Flow streams, so it'd be helpful if the field could be left empty. At the moment, this is not possible:\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/dd7ab5f0-c5c7-48b3-8d50-7525cc31ac5e\"/>\n\nAlso, I wonder if it would be helpful to switch the order of the fields — the recipient address to come before the initial deposit, since the latter is optional. I know that this would break consistency with Lockup, but maybe we can rearrange the fields there, too.","createdAt":"2025-01-04T16:10:15Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1294,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow empty deposit field in Flow stream creation","type":"issue","updatedAt":"2025-01-28T12:25:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1294"},{"author":"PaulRBerg","body":"\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1290\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **PaulRBerg** December 23, 2024</sup>\nWe've recently encountered a user who wanted to create an airdrop but was using the Vesting tab:\n\n<img width=\"400\" alt=\"SCR-20241223-nsbc\" src=\"https://github.com/user-attachments/assets/a8dd2fc9-b693-422d-8bdb-6f979f6c9408\" />\n\nGiven that airdrops drive so much usage to the app, we need to ensure that we're losing as few users as possible.\n\nThus, I suggest implementing a handler in the CSV uploader in Lockup and Flow that detects if the CSV file is meant for airdrops, and informs the user that they need to navigate to the _Airdrops_ tab.","createdAt":"2024-12-23T13:36:21Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1291,"repository":"sablier-labs/interfaces","state":"closed","title":"Prompt user to switch to Airdrops tab when they are uploading an airdrop CSV","type":"issue","updatedAt":"2025-01-28T12:26:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1291"},{"author":"PaulRBerg","body":"It'd be handy to see at a glance what vendors are used in the client app.","createdAt":"2024-12-21T12:10:28Z","labels":["priority: 3","effort: low","type: docs","work: clear"],"number":1280,"repository":"sablier-labs/interfaces","state":"closed","title":"Mention vendors on README page","type":"issue","updatedAt":"2025-01-13T09:02:16Z","url":"https://github.com/sablier-labs/interfaces/issues/1280"},{"author":"PaulRBerg","body":"I got this on localhost. Nothing broke but I saw it in the console.\n\n```hydration-error-info.js:63 Warning: Prop `className` did not match. Server: \"Notification__Box-sc-a6443804-3 RgRYW\" Client: \"Notification__Box-sc-8e231766-3 jJnTqA\"```\n\n<details>\n    <summary>Full Error</summary>\n\n\n```text\nhydration-error-info.js:63 Warning: Prop `className` did not match. Server: \"Notification__Box-sc-a6443804-3 RgRYW\" Client: \"Notification__Box-sc-8e231766-3 jJnTqA\"\n    at div\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at a\n    at LinkComponent (webpack-internal:///../../node_modules/next/dist/client/link.js:125:19)\n    at Internal (webpack-internal:///../../packages/components/src/atoms/Internal/index.tsx:33:11)\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at div\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at div\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at Notification (webpack-internal:///./src/pages/Dashboard/Notification/index.tsx:101:73)\n    at div\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at div\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at Page (webpack-internal:///./src/components/organisms/Page/index.tsx:32:11)\n    at P (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:19658)\n    at Dashboard (webpack-internal:///./src/pages/Dashboard/index.tsx:107:80)\n    at WatcherProvider (webpack-internal:///./src/contexts/Watcher/index.tsx:25:11)\n    at AutoConnectProvider (webpack-internal:///./src/contexts/Web3/index.tsx:71:11)\n    at Web3StateProvider (webpack-internal:///./src/contexts/Web3/index.tsx:52:11)\n    at div\n    at ModalProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:6258:26)\n    at ShowBalanceProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:1053:32)\n    at TransactionStoreProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:1549:3)\n    at ModalSizeProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:1746:3)\n    at I18nProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:812:23)\n    at WalletButtonProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:1720:33)\n    at RainbowKitChainProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:1015:3)\n    at RainbowKitProvider (webpack-internal:///../../node_modules/@rainbow-me/rainbowkit/dist/index.js:2558:3)\n    at Web3ChainProvider (webpack-internal:///./src/contexts/Web3/index.tsx:102:11)\n    at Hydrate (webpack-internal:///../../node_modules/wagmi/dist/esm/hydrate.js:11:13)\n    at WagmiProvider (webpack-internal:///../../node_modules/wagmi/dist/esm/context.js:13:13)\n    at Web3Provider (webpack-internal:///./src/contexts/Web3/index.tsx:138:11)\n    at HydrationBoundary (webpack-internal:///../../node_modules/@tanstack/react-query/build/modern/HydrationBoundary.js:15:3)\n    at QueryClientProvider (webpack-internal:///../../node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js:28:3)\n    at PersistQueryClientProvider (webpack-internal:///../../node_modules/@tanstack/react-query-persist-client/build/modern/PersistQueryClientProvider.js:17:3)\n    at ReactQueryProvider (webpack-internal:///./src/contexts/ReactQuery/index.tsx:23:11)\n    at Le (webpack-internal:///../../node_modules/styled-components/dist/styled-components.browser.esm.js:31:17336)\n    at ThemeProvider (webpack-internal:///../../packages/themes/src/index.tsx:89:11)\n    at Wrapper (webpack-internal:///./pages/_app.tsx:34:11)\n    at App (webpack-internal:///./pages/_app.tsx:64:11)\n    at I18nProvider (webpack-internal:///../../node_modules/next-translate/lib/esm/I18nProvider.js:31:18)\n    at AppWithTranslations (webpack-internal:///../../node_modules/next-translate/lib/esm/appWithI18n.js:68:152)\n    at PathnameContextProviderAdapter (webpack-internal:///../../node_modules/next/dist/shared/lib/router/adapters.js:85:11)\n    at ErrorBoundary (webpack-internal:///../../node_modules/next/dist/client/components/react-dev-overlay/pages/ErrorBoundary.js:41:9)\n    at ReactDevOverlay (webpack-internal:///../../node_modules/next/dist/client/components/react-dev-overlay/pages/ReactDevOverlay.js:33:11)\n    at Container (webpack-internal:///../../node_modules/next/dist/client/index.js:83:1)\n    at AppContainer (webpack-internal:///../../node_modules/next/dist/client/index.js:214:11)\n    at Root (webpack-internal:///../../node_modules/next/dist/client/index.js:436:11) \nSee more info here: https://nextjs.org/docs/messages/react-hydration-error\n```    \n\n</details>\n","createdAt":"2024-12-21T11:19:32Z","labels":["type: bug","priority: 3","effort: low"],"number":1278,"repository":"sablier-labs/interfaces","state":"closed","title":"React hydration error","type":"issue","updatedAt":"2025-03-30T13:46:37Z","url":"https://github.com/sablier-labs/interfaces/issues/1278"},{"author":"PaulRBerg","body":"Either:\n\n1. Remove \"because it\", or ...\n2. Add \"cannot be used\" before \"before\"\n\n<img width=\"350\" src=\"https://github.com/user-attachments/assets/7c272972-ca65-4203-ac26-a31dc7804d3c\"/>\n","createdAt":"2024-12-20T18:12:48Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1277,"repository":"sablier-labs/interfaces","state":"closed","title":"Polish text in TRM modal","type":"issue","updatedAt":"2025-01-28T12:25:42Z","url":"https://github.com/sablier-labs/interfaces/issues/1277"},{"author":"PaulRBerg","body":"Phishing scams on zkSync targeting Sablier — we have to put these campaigns on an internal blacklist and always hide them:\n\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/786afe3d-c44b-4ffd-8b38-0869401738cb\"/>\n","createdAt":"2024-12-20T12:33:32Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":1276,"repository":"sablier-labs/interfaces","state":"closed","title":"Internal blacklist for scam campaigns","type":"issue","updatedAt":"2025-01-28T12:26:28Z","url":"https://github.com/sablier-labs/interfaces/issues/1276"},{"author":"PaulRBerg","body":"In the Flow stream profile, the _Top Up_ button should be highlighted in orange, just like the _Withdraw_ button is for recipients:\n\n<img width=\"500\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5a757e6c-2c15-4646-b846-f81c88394180\" />\n","createdAt":"2024-12-20T08:12:58Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1274,"repository":"sablier-labs/interfaces","state":"closed","title":"Highlight the \"Top Up\" button","type":"issue","updatedAt":"2025-01-28T12:27:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1274"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11625648).","createdAt":"2024-12-20T07:48:12Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1273,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove commas in numbers from 1000 to 9990","type":"issue","updatedAt":"2025-01-28T12:27:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1273"},{"author":"PaulRBerg","body":"It currently says \"Total value\" but that is not quite alright. That's just the initial deposit.\n\n<img width=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b511975f-a574-42e8-8183-10b7ef38f87b\" />","createdAt":"2024-12-19T16:29:26Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1272,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor wording in create modal for Flow streams","type":"issue","updatedAt":"2025-01-28T12:24:57Z","url":"https://github.com/sablier-labs/interfaces/issues/1272"},{"author":"PaulRBerg","body":"As per @smol-ninja's findings [here](https://github.com/sablier-labs/v2-core/discussions/1114#discussioncomment-11616372), the latest Lockup contracts can support up to 150 streams in one batch on Ethereum Mainnet. So the tasks are:\n\n- [ ] Change the default group size to 150\n- [ ] As per Shub's other findings [here](https://sablier.slack.com/archives/CT3NXSNMS/p1734845648220889?thread_ts=1734714585.197319&cid=CT3NXSNMS), increase the group size to 280 on Arbitrum\n\nRelated: #1115","createdAt":"2024-12-19T11:53:41Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1271,"repository":"sablier-labs/interfaces","state":"closed","title":"Increase max group size for Lockup Linear streams","type":"issue","updatedAt":"2025-01-13T11:30:17Z","url":"https://github.com/sablier-labs/interfaces/issues/1271"},{"author":"PaulRBerg","body":"Requested by Micah, see context [here](https://github.com/sablier-labs/flow/discussions/352).\n\nI think it's self-evident why this feature would be beneficial for senders.\n\nImplementation-wise, I imagine that this can be incorporated in the existing multiple stream picker, whereby streams can be selected from the dashboard.\n\nThe `batch` function in Flow can be used for batch-calling the `deposit` function.","createdAt":"2024-12-19T10:02:01Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1268,"repository":"sablier-labs/interfaces","state":"closed","title":"Top up multiple streams","type":"issue","updatedAt":"2024-12-19T11:31:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1268"},{"author":"PaulRBerg","body":"Fow now:\n\n- [ ] Fluid\n- [ ] Polynomial\n\nMaybe Fuel, too.","createdAt":"2024-12-18T13:19:15Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1265,"repository":"sablier-labs/interfaces","state":"closed","title":"Mention new top-tier users on landing page","type":"issue","updatedAt":"2025-02-03T15:40:43Z","url":"https://github.com/sablier-labs/interfaces/issues/1265"},{"author":"razgraf","body":"Had the chance to play with Privy and Dynamic in some instances and have to say the UX is unparalleled. They onboard non-crypto users in < 1 minute, it's great. We should look into integrating them in our app, alongside #1102.\r\n\r\nFor Privy, found a guide using rainbow-kit (not supported in the default wallet list of rainbow): \r\n- https://github.com/privy-io/cross-app-connect-demo\r\n- https://docs.privy.io/guide/react/cross-app/cross-app-connect","createdAt":"2024-12-18T06:06:55Z","labels":[],"number":1264,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate Privy","type":"issue","updatedAt":"2025-02-24T16:26:36Z","url":"https://github.com/sablier-labs/interfaces/issues/1264"},{"author":"IaroslavMazur","body":"On the page presenting a list of Payment Streams, the 2nd half of the 3rd column currently displays the \"Total **Withdrawable** + **Debt**\" amount, while, I believe, it'd be more appropriate to display the \"Total **Streamed** + **Debt**\" amount.\r\n\r\nAs an example demonstrating the issue with the current design, in case of a Stream with a rate of, say, 10k tokens/mo, the \"Rate/Total\" will (currently) display \"10k/**0**\" after every (depleting) withdrawal - no matter how many months the Stream has already been active for.\r\n\r\n<details>\r\n\r\n![image](https://github.com/user-attachments/assets/25bd0561-be43-41ec-ba83-d6257af789e8)\r\n\r\n</details>\r\n","createdAt":"2024-12-17T19:26:54Z","labels":[],"number":1263,"repository":"sablier-labs/interfaces","state":"closed","title":"Display Streamed+Debt, instead of Withdrawable+Debt, when presenting Payment Streams","type":"issue","updatedAt":"2024-12-20T12:12:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1263"},{"author":"PaulRBerg","body":"Reported by a user:\r\n\r\n![IMG_2339](https://github.com/user-attachments/assets/13fc8c10-6446-4e4a-a59b-d625f0e2f95f)\r\n","createdAt":"2024-12-17T16:33:30Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1262,"repository":"sablier-labs/interfaces","state":"closed","title":"Example campaign for Airdrops leads to dummy page","type":"issue","updatedAt":"2025-01-28T12:26:55Z","url":"https://github.com/sablier-labs/interfaces/issues/1262"},{"author":"tukwan","body":"Cloudflare loads extra JS scripts on the page (`rocket-loader.min.js`, `email-decode.min.js`), but since we use Next.js and Vercel, that should already provide sufficient optimization. I don’t have access to Cloudflare, so someone else please handle this. I think the relevant rules are `Email Obfuscation` and `Disable Performance` in the left `Rules/Page Rules` menu. I'll monitor the performance using Speed Insights afterward. If any issues arise, we'll revert the changes. \r\n\r\n\r\n![cloudflare](https://github.com/user-attachments/assets/efd377f7-7d0a-420d-ab8a-430fb3dc8bcc)\r\n\r\n\r\n\r\n---\r\n**Reference**:\r\n- https://developers.cloudflare.com/speed/optimization/content/rocket-loader/\r\n- https://developers.cloudflare.com/waf/tools/scrape-shield/email-address-obfuscation/\r\n- https://stackoverflow.com/questions/52557607/how-to-remove-cloudflare-s-javascripts-slowing-my-site/\r\n- https://stackoverflow.com/questions/4098408/is-it-worth-obfuscating-email-addresses-on-the-web-these-days/4098594#4098594\r\n- https://superuser.com/questions/235937/does-e-mail-address-obfuscation-actually-work/236152#236152\r\n\r\ncc: @PaulRBerg, @razgraf \r\n","createdAt":"2024-12-17T09:46:34Z","labels":["topic: seo"],"number":1260,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove loading Cloudflare scripts from the landing app","type":"issue","updatedAt":"2024-12-17T13:46:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1260"},{"author":"razgraf","body":"https://www.loom.com/share/00a42cef78c44a39813c62dd3ca8e72c\r\n\r\n<img width=\"699\" alt=\"Screenshot 2024-12-17 at 11 22 34\" src=\"https://github.com/user-attachments/assets/c9bc1c65-0cbf-410b-961a-4b25e7b19d9d\" />\r\n","createdAt":"2024-12-17T09:22:44Z","labels":["type: bug"],"number":1259,"repository":"sablier-labs/interfaces","state":"closed","title":"Token list custom token pointing to Ethereum","type":"issue","updatedAt":"2025-01-28T12:25:39Z","url":"https://github.com/sablier-labs/interfaces/issues/1259"},{"author":"maxdesalle","body":"\"Payroll\" or \"Vesting\" isn't very descriptive.\r\n\r\nLet me know what you think of the following @tukwan:\r\n\r\n\"Token Vesting: Battle-Tested Onchain Vesting for Web3 Organizations\"\r\n\"Onchain Payroll: All-in-One Payroll for Web3 Organizations\"\r\n\"Airdrops: Battle-Tested Onchain Airdrops up to +1M recipients\"\r\n\"Grants: Battle-Tested Onchain Grants for Web3 Organizations\"","createdAt":"2024-12-16T15:53:35Z","labels":[],"number":1256,"repository":"sablier-labs/interfaces","state":"closed","title":"Update Page Titles","type":"issue","updatedAt":"2025-01-29T14:56:00Z","url":"https://github.com/sablier-labs/interfaces/issues/1256"},{"author":"maxdesalle","body":"","createdAt":"2024-12-16T12:36:14Z","labels":["backlog"],"number":1255,"repository":"sablier-labs/interfaces","state":"open","title":"Show eligible airdrops on homepage","type":"issue","updatedAt":"2025-04-10T15:04:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1255"},{"author":"PaulRBerg","body":"","createdAt":"2024-12-13T13:21:12Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":1251,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename repo to \"interfaces\"","type":"issue","updatedAt":"2025-02-01T12:25:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1251"},{"author":"PaulRBerg","body":"Post-Flow launch, the product has new features that deserve to be front-loaded on the landing page, e.g. maybe we should rewrite the _Product_section:\r\n\r\n<img width=\"500\" src=\"https://github.com/user-attachments/assets/b6eff648-4daf-4c02-92cf-bea205f03c4d\"/>\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/discussions/880","createdAt":"2024-12-13T12:50:21Z","labels":["priority: 2","effort: high","type: refactor","work: clear"],"number":1250,"repository":"sablier-labs/interfaces","state":"open","title":"Update landing page in light of use-case-centric","type":"issue","updatedAt":"2025-06-22T03:29:10Z","url":"https://github.com/sablier-labs/interfaces/issues/1250"},{"author":"razgraf","body":"In #1176 we implemented the UTC toggle discussed in #1152. Problem is, we disable it for shapes where we also disable timing (the switch from range to duration) since this only works with range options.\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/3801bcfba6a27b14de266c6c431ded428d5e919f/apps/client/src/pages/Vesting/Create/CSV/Form/General/index.tsx#L157-L168\r\n\r\nThat needs to be fixed since the Monthly shape doesn't include timing but is by default \"ranged\". Other similar shapes, like Backweighted need to implement the same thing, to support this timezone change on the start date.\r\n\r\n| Linear (with timezone) | Monthly |\r\n| --- | --- |\r\n| ![Screenshot 2024-12-13 at 12 14 56](https://github.com/user-attachments/assets/6f27671f-0c4d-45cd-821b-c4f91feddd73) | ![Screenshot 2024-12-13 at 12 15 06](https://github.com/user-attachments/assets/e00e60fd-f1d5-4838-9637-1910183d3123) |\r\n","createdAt":"2024-12-13T10:21:22Z","labels":[],"number":1247,"repository":"sablier-labs/interfaces","state":"closed","title":"Show timezone/UTC toggle for Monthly (+ no timing) shape","type":"issue","updatedAt":"2024-12-13T12:18:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1247"},{"author":"razgraf","body":"Since the top-up action entails depositing tokens, and given it's a public function (anyone can deposit) there are cases when the depositor has not previously approved the token for spending. \r\n\r\nAn allowance system needs to be added to top-up, similar to the one we have in the create-stream forms.\r\n\r\n![Screenshot 2024-12-11 at 15 18 28](https://github.com/user-attachments/assets/a90a0acb-1d7a-4cd5-844e-8100e461f158)\r\n","createdAt":"2024-12-11T13:19:52Z","labels":["type: bug"],"number":1241,"repository":"sablier-labs/interfaces","state":"closed","title":"Allowance mechanism for flow top-ups","type":"issue","updatedAt":"2024-12-11T19:51:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1241"},{"author":"razgraf","body":"@sneg55 suggested a password protection on top of staging. This makes sense since we don't want our competitors to have access to it - while at the same time being able to share a hosted staging link for demos.\r\n\r\nI believe we can do this using Vercel's built in password protection https://vercel.com/docs/security/deployment-protection/methods-to-protect-deployments/password-protection.\r\n","createdAt":"2024-12-11T11:53:16Z","labels":["type: feature","priority: 1","effort: low"],"number":1239,"repository":"sablier-labs/interfaces","state":"closed","title":"Password protection for staging.sablier.com","type":"issue","updatedAt":"2025-02-12T16:15:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1239"},{"author":"PaulRBerg","body":"In light of Flow and the decision to start charging fees in Q1 2025\r\n\r\n<img width=\"558\" alt=\"SCR-20241210-nunc\" src=\"https://github.com/user-attachments/assets/2f498d36-5b39-44cb-a219-6087dee34c6a\">\r\n","createdAt":"2024-12-10T13:38:07Z","labels":["type: refactor"],"number":1238,"repository":"sablier-labs/interfaces","state":"closed","title":"Update social media previews","type":"issue","updatedAt":"2025-01-28T12:27:22Z","url":"https://github.com/sablier-labs/interfaces/issues/1238"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1226\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December  5, 2024</sup>\r\n</div>","createdAt":"2024-12-09T08:40:42Z","labels":[],"number":1233,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove \"expected streams\" feature","type":"issue","updatedAt":"2024-12-09T10:31:34Z","url":"https://github.com/sablier-labs/interfaces/issues/1233"},{"author":"smol-ninja","body":"## Motivation\r\n1. They are all airstream campaigns so there is no need to be explicit.\r\n2. They fall under \"Airstreams\" section in the current version and under \"Airdrops\" section in the new version.\r\n3. The campaign name prefixed with \"Airstream\" can be confused with the actual campaign name which does not contain \"Airstream\" keyword.\r\n4. If the campaign name contains \"Airstream\", user would see two \"Airstream\" keywords in the title.\r\n\r\n### Take the example below ↴\r\n\r\n### 1. Campaign screen\r\n\r\nUser sees \"Airstream $OP in Polynomial TradeFest - Week #1\" as the campaign name.\r\n\r\n<img width=\"300\" alt=\"Screenshot 2024-12-09 at 11 49 08\" src=\"https://github.com/user-attachments/assets/86eb022b-a63c-4792-81a9-c428da0cb564\">\r\n\r\n### 2. Search modal\r\n\r\nUser searches for \"Airstream $OP in Polynomial TradeFest - Week #1\" as the campaign name.\r\n\r\n<img width=\"300\" alt=\"Screenshot 2024-12-09 at 11 47 29\" src=\"https://github.com/user-attachments/assets/82cc3f71-2ff3-49b7-8ae1-0ca1e8cdbe90\">\r\n\r\n### 3. Results screen\r\n\r\nUser sees 0 results and gets confused as to why its not showing up.\r\n\r\n<img width=\"300\" alt=\"Screenshot 2024-12-09 at 11 47 33\" src=\"https://github.com/user-attachments/assets/1f035141-a3b5-4a4c-8953-e42c3c016038\">","createdAt":"2024-12-09T06:28:19Z","labels":["type: bug"],"number":1232,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove \"Airstream\" keyword from the campaign title","type":"issue","updatedAt":"2024-12-09T10:32:09Z","url":"https://github.com/sablier-labs/interfaces/issues/1232"},{"author":"IaroslavMazur","body":"When creating Flow Streams, only one of the invalid fields is included in the warning message.\r\n\r\nThis, potentially, leads to a worse UX, as the user is able to fix just one (invalid) field at a time, instead of all at once.\r\n\r\n![image](https://github.com/user-attachments/assets/7436baec-1dab-4e6c-96a6-ead6531d22d6)\r\n","createdAt":"2024-12-06T16:08:48Z","labels":["backlog"],"number":1231,"repository":"sablier-labs/interfaces","state":"open","title":"Just one of the invalid fields included in the warning at Flow creation ","type":"issue","updatedAt":"2025-06-16T12:16:19Z","url":"https://github.com/sablier-labs/interfaces/issues/1231"},{"author":"PaulRBerg","body":"As reported by @IaroslavMazur in point 28 [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11418220).\r\n","createdAt":"2024-12-05T12:42:02Z","labels":["type: bug","priority: 3","effort: low"],"number":1225,"repository":"sablier-labs/interfaces","state":"closed","title":"Incorrect \"You: \" prefix in Flow streams","type":"issue","updatedAt":"2024-12-06T14:26:06Z","url":"https://github.com/sablier-labs/interfaces/issues/1225"},{"author":"PaulRBerg","body":"As reported by @IaroslavMazur in point 27 [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11418220).","createdAt":"2024-12-05T12:39:47Z","labels":["type: bug","priority: 2","effort: low"],"number":1224,"repository":"sablier-labs/interfaces","state":"closed","title":"The withdrawn amount arch in Flow displays only 0% and 100% states","type":"issue","updatedAt":"2024-12-06T14:26:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1224"},{"author":"PaulRBerg","body":"As suggested by @IaroslavMazur in point 17 [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11417830).\r\n\r\nI have also encountered this issue multiple times, and I imagine it's relatively common for users to switch tabs and obtain the token they want to stream after opening Sablier.\r\n\r\nAFAIK, this is standard behavior in DEXes. The balances get refreshed automatically.","createdAt":"2024-12-05T12:21:22Z","labels":["backlog","effort: high","type: perf"],"number":1223,"repository":"sablier-labs/interfaces","state":"open","title":"Refresh token balances dynamically when creating streams","type":"issue","updatedAt":"2025-07-19T15:22:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1223"},{"author":"PaulRBerg","body":"As reported by @IaroslavMazur [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11417830).\r\n\r\n- [ ] Add \"By\" prefix to indicate that those are search filters\r\n- [ ] \"Streams\" should be \"Stream IDs\"","createdAt":"2024-12-05T12:17:10Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1222,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve terminology in search modal","type":"issue","updatedAt":"2024-12-05T15:13:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1222"},{"author":"PaulRBerg","body":"Searching for `SALD` yields results, whereas `sald` doesn't.\r\n\r\nAs reported by @IaroslavMazur [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11417830).","createdAt":"2024-12-05T12:16:04Z","labels":["priority: 2","effort: low","type: perf","work: clear"],"number":1221,"repository":"sablier-labs/interfaces","state":"closed","title":"Make search case-insensitive in campaign search","type":"issue","updatedAt":"2024-12-06T14:26:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1221"},{"author":"PaulRBerg","body":"As reported by @IaroslavMazur [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11417034), the navigation bar is static even when switching between the All/Sender/Recipient tabs in the dashboard.","createdAt":"2024-12-05T11:59:04Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1220,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the navigation bar say \"Recipient\" and \"Sender\" instead of \"All\"","type":"issue","updatedAt":"2024-12-06T14:26:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1220"},{"author":"PaulRBerg","body":"As reported by @IaroslavMazur [here](https://github.com/sablier-labs/v2-interfaces/discussions/1203#discussioncomment-11417034).\r\n","createdAt":"2024-12-05T11:57:53Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1219,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove \"Check Eligibility\" from Payments and Drops guides","type":"issue","updatedAt":"2024-12-06T14:26:53Z","url":"https://github.com/sablier-labs/interfaces/issues/1219"},{"author":"PaulRBerg","body":"Adding the \" Streams\" suffix is redundant.\r\n\r\n<img width=\"300\" alt=\"SCR-20241204-ptlh\" src=\"https://github.com/user-attachments/assets/aaeb7441-32eb-4894-b8ae-3fee79a1b2f3\">\r\n\r\n<img width=\"300\" alt=\"SCR-20241204-ptno\" src=\"https://github.com/user-attachments/assets/2657f170-8489-47b1-906a-7dff666f86ec\">\r\n","createdAt":"2024-12-04T18:01:08Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":1216,"repository":"sablier-labs/interfaces","state":"closed","title":"Say just \"Flow\" instead of \"Flow Streams\" in the shape card","type":"issue","updatedAt":"2024-12-06T15:10:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1216"},{"author":"razgraf","body":"There's an issue specific to zkSync where you can't really do stuff from a Safe. I'll go into more details over the following days, but here's some initial [context](https://sablier.slack.com/archives/CT3NXSNMS/p1733005976499839?thread_ts=1732885238.108509&cid=CT3NXSNMS) from @smol-ninja's research.","createdAt":"2024-12-02T19:56:00Z","labels":["type: bug","priority: 1","effort: high"],"number":1213,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix zkSync issue with Safe","type":"issue","updatedAt":"2024-12-06T14:27:32Z","url":"https://github.com/sablier-labs/interfaces/issues/1213"},{"author":"razgraf","body":"Related to #1046\r\n\r\n![Screenshot 2024-12-02 at 16 33 46](https://github.com/user-attachments/assets/398b3da8-2449-4f90-8eda-42ab2f4febbc)","createdAt":"2024-12-02T14:34:22Z","labels":["type: feature","priority: 2"],"number":1210,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"copy error\" button in the transaction modal","type":"issue","updatedAt":"2025-01-28T12:25:34Z","url":"https://github.com/sablier-labs/interfaces/issues/1210"},{"author":"PaulRBerg","body":"I was trying to transfer a stream that has the same sender and recipient, and realized that I am unable to do that. The transfer button is grayed out.\r\n\r\n<img width=\"400\" alt=\"SCR-20241128-ryzw\" src=\"https://github.com/user-attachments/assets/42911bd7-1bd5-4aa3-ad41-de2698ac7056\">\r\n\r\n","createdAt":"2024-11-28T20:42:55Z","labels":["type: bug","priority: 2","effort: low","work: clear"],"number":1208,"repository":"sablier-labs/interfaces","state":"closed","title":"Cannot transfer a stream that has the same sender and recipient","type":"issue","updatedAt":"2024-12-05T11:33:43Z","url":"https://github.com/sablier-labs/interfaces/issues/1208"},{"author":"PaulRBerg","body":"I was trying to cancel a stream that has the same sender and recipient, and realized that I am unable to do that. The cancel button is grayed out.\r\n\r\n<img width=\"400\" alt=\"SCR-20241128-ryja\" src=\"https://github.com/user-attachments/assets/c763910d-3d9c-4765-b032-e22bf063cfa7\">\r\n","createdAt":"2024-11-28T20:41:53Z","labels":["type: bug","priority: 3","effort: low","work: clear"],"number":1207,"repository":"sablier-labs/interfaces","state":"closed","title":"Cannot cancel a stream that has the same sender and recipient","type":"issue","updatedAt":"2024-12-05T11:33:38Z","url":"https://github.com/sablier-labs/interfaces/issues/1207"},{"author":"PaulRBerg","body":"Feedback shared by Lito Coen:\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/b5afd079-d429-462b-bddd-a65cf3bf752c\"/>\r\n","createdAt":"2024-11-28T19:39:08Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1206,"repository":"sablier-labs/interfaces","state":"open","title":"Notification popup for airdrop eligibility","type":"issue","updatedAt":"2025-07-20T12:25:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1206"},{"author":"gavriliumircea","body":"The task is to add a docs button inside the create airstream form.","createdAt":"2024-11-18T20:16:15Z","labels":[],"number":1200,"repository":"sablier-labs/interfaces","state":"closed","title":"Add docs button in airstream create page","type":"issue","updatedAt":"2024-12-06T14:28:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1200"},{"author":"PaulRBerg","body":"## Task\n\nImplement ETH fee by passing a non-zero amount in the `value` field of the Ethereum transactions for the following operations:\n\n- [x] Claim drop\n- [x] Withdraw (either Lockup or Flow)\n- [x] Transfer NFT (either Lockup or Flow)\n\nAlso:\n\n- [x] Update all references about Sablier being free\n\n## Features\n\n- Full transparency about how much is charged in both ETH and USD value\n- Show the fees in the receipt displayed before sending the tx\n\n### Notes\n\n- 'ETH' means the gas token. On Polygon, this is POL.\n- This feature will only be available in the next Lockup and Flow releases. We can make a test deployment now to allow you to interact with the contracts.\n- For drops, the UI should also query the [`SABLIER_FEE`](https://github.com/sablier-labs/v2-core/blob/6a8ec1318f598c351606eb196b9ccebed7dedbab/src/periphery/abstracts/SablierMerkleBase.sol#L42) value to ensure that the `value` is greater than or equal to `SABLIER_FEE`\n\n## References\n\n- https://github.com/sablier-labs/company-discussions/discussions/72\n- https://github.com/sablier-labs/company-discussions/discussions/71\n- https://github.com/sablier-labs/v2-core/issues/1076\n- https://github.com/sablier-labs/v2-core/issues/1032\n- https://github.com/sablier-labs/flow/issues/328","createdAt":"2024-11-17T15:41:34Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":1198,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement ETH fees","type":"issue","updatedAt":"2025-01-28T12:27:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1198"},{"author":"razgraf","body":"![image](https://github.com/user-attachments/assets/7377ddda-8d7f-4531-8480-9513aa8cf4de)\n\nThis is definitely important for 1 second drops now, but makes sense for vested ones too: users may not know there's a two step process so an explainer would go a long way. Could be similar to the last step of the create airstream form, but static and inside the transaction modal for claims.","createdAt":"2024-11-17T09:56:05Z","labels":[],"number":1197,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve transaction modal for drops","type":"issue","updatedAt":"2024-12-06T14:28:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1197"},{"author":"razgraf","body":"Since some people may be using the CSV uploads to create their streams, we should offer them a way to simulate each stream like we do in the manual forms.\r\n\r\nWe could add a button here in the preview forms (note: flow doesn't have an expandable table, so if we add buttons we should probably do it in the base form).\r\n\r\n| Base | Expanded |\r\n| --- | --- |\r\n| <img width=\"943\" alt=\"Screenshot 2024-11-14 at 15 53 04\" src=\"https://github.com/user-attachments/assets/024c51ff-e920-4267-bcc1-17d81dafdf2b\"> | <img width=\"1372\" alt=\"Screenshot 2024-11-14 at 15 51 35\" src=\"https://github.com/user-attachments/assets/fa94d221-3a03-4a3a-ac1a-3cbc57652baa\"> |\r\n","createdAt":"2024-11-14T13:54:51Z","labels":["type: feature"],"number":1190,"repository":"sablier-labs/interfaces","state":"closed","title":"Add simulations to CSV streams","type":"issue","updatedAt":"2025-02-10T13:51:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1190"},{"author":"PaulRBerg","body":"Feedback from user:\n\n![image](https://github.com/user-attachments/assets/c3ded8c7-b420-4100-a7f0-1e0adc7207c9)","createdAt":"2024-11-13T15:58:56Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1186,"repository":"sablier-labs/interfaces","state":"closed","title":"Make entire area in  Airstream claim button clickable","type":"issue","updatedAt":"2024-11-14T16:03:05Z","url":"https://github.com/sablier-labs/interfaces/issues/1186"},{"author":"PaulRBerg","body":"The CI workflows in https://github.com/sablierhq/v2-periphery/pull/31 have failed because of the `test_BatchCancelMultiple` test.\r\n\r\nI did a little bit of investigation, and the issue is related to V2 Core, specifically the precompiled version of it. Switching to normal deployments makes the tests pass again.","createdAt":"2023-04-29T19:10:40Z","labels":[],"number":32,"repository":"sablier-labs/v2-periphery","state":"closed","title":"\"batchCancelMultiple\" test failing with precompiled V2 core","type":"issue","updatedAt":"2023-05-01T16:38:03Z","url":"https://github.com/sablier-labs/v2-periphery/issues/32"},{"author":"PaulRBerg","body":"See:\r\n\r\n- https://github.com/foundry-rs/foundry/pull/4833\r\n- https://github.com/foundry-rs/forge-std/releases/tag/v1.5.4?utm_source=substack&utm_medium=email\r\n\r\nWe have to bump PRBTest and switch to using the new `expectCall` overload with a `count` parameter.","createdAt":"2023-04-29T14:45:57Z","labels":[],"number":30,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Refactor multiple expect calls to use the new \"count\" parameter","type":"issue","updatedAt":"2023-05-01T16:38:21Z","url":"https://github.com/sablier-labs/v2-periphery/issues/30"},{"author":"PaulRBerg","body":"@andreivladbrg, since you handled our Permit2 integration, you have context. It would be nice to document each field in the `Permit2Params`:\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/abc39da26be9a3db49266770494dc50fba41570e/src/types/DataTypes.sol#L57-L63\r\n\r\nJust like we do with all structs in V2 Core:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/6362f84642debc4d48109605db800e54163e726b/src/types/DataTypes.sol","createdAt":"2023-04-16T19:36:36Z","labels":[],"number":22,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Document each field in the `Permit2Params` struct","type":"issue","updatedAt":"2023-04-29T14:56:29Z","url":"https://github.com/sablier-labs/v2-periphery/issues/22"},{"author":"andreivladbrg","body":"As discussed [here](https://github.com/sablierhq/v2-periphery/discussions/16), to handle cancellations triggered by recipients, we need to implement a proxy plugin for the `onStreamCanceled` hook. In this scenario, the funds would be withdrawn to the proxy, and we want to automatically redirect them to the sender.\r\n\r\nFor context, see [`IPRBProxyPlugin`](https://github.com/PaulRBerg/prb-proxy/blob/main/src/interfaces/IPRBProxyPlugin.sol).","createdAt":"2023-03-21T13:39:49Z","labels":[],"number":19,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Handle recipient cancelations with a proxy plugin","type":"issue","updatedAt":"2023-05-11T09:31:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/19"},{"author":"andreivladbrg","body":"We are currently using the try/catch statement to call the `create`  functions from the core contracts.\r\n\r\nThis is a problem because we are transferring a total amount of assets (user --> periphery) before making the external call\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/180d5dc194c30cc95db9578a18b9db3b9598300c/src/BatchStream.sol#L94-L95\r\n\r\nIf a stream creation fails(create multiple will not revert) the amount that should have been transferred (periphery --> core) will remain in our periphery contract.","createdAt":"2023-02-01T11:54:38Z","labels":[],"number":9,"repository":"sablier-labs/v2-periphery","state":"closed","title":"Try catch for external call","type":"issue","updatedAt":"2023-02-01T12:12:14Z","url":"https://github.com/sablier-labs/v2-periphery/issues/9"},{"author":"smol-ninja","body":"Gas costs are relevant not only on Ethereum but on L2s as well. It can even influence the choice of the protocol by users. There is already an [ongoing discussion](https://github.com/sablier-labs/v2-core/discussions/767) for ideas on optimising contracts for gas.\r\n\r\nYul, being an intermediate language, offers more efficient gas management while interacting with smart contracts. Investigate functions and subroutines where Yul can be used to substitute Solidity without affecting the functionalities. Some of the areas that can be looked at:\r\n\r\n- Mathematical operations\r\n- Low-level calls\r\n- Dynamic memory allocation. Ex. [how Seaport returns contract name](https://github.com/ProjectOpenSea/seaport/blob/fb1c3bf4c25a32ae90f776652a8b2b07d5df52cf/contracts/Seaport.sol#L101-L108)\r\n- Storage management","createdAt":"2024-01-16T08:10:08Z","labels":["effort: epic","work: complex","priority: 3","type: perf","stale"],"number":795,"repository":"sablier-labs/lockup","state":"closed","title":"Research on re-writing some functions in Yul to optimize for gas","type":"issue","updatedAt":"2025-05-25T15:45:45Z","url":"https://github.com/sablier-labs/lockup/issues/795"},{"author":"PaulRBerg","body":"See https://github.com/foundry-rs/foundry/issues/6694.","createdAt":"2024-01-13T12:38:11Z","labels":["effort: high","work: complex","priority: 2","type: test","stale"],"number":793,"repository":"sablier-labs/lockup","state":"closed","title":"Investigate whether invariant tests work after this Foundry bug is fixed","type":"issue","updatedAt":"2024-07-14T06:55:59Z","url":"https://github.com/sablier-labs/lockup/issues/793"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nDuring periods of intense development, we frequently bump into a 429 error in the Alchemy RPC server:\r\n\r\n> Server returned an error response: ErrorPayload code 429, message: \"Your app has exceeded its compute units per second capacity. If you have retries enabled, you can safely ignore this message.\r\n\r\nHere's an example of a CI workflow that failed because of this: \r\n\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/7491298593/job/20392413461\r\n\r\n## Solutions\r\n\r\nOne solution is to switch to a more expensive developer plan on Alchemy, but that would be overkill.\r\n\r\nWe don't get much value from these continuous CI fork test checks. Most of the value of CI comes from linting, building, and the basic tests (unit + integration).\r\n\r\nA much simpler solution is to create a new workflow for the fork tests, which is run daily.\r\n\r\n## Related\r\n\r\nThis issue might become irrelevant once [Foundry adds support for retries](https://github.com/foundry-rs/foundry/issues/4958).","createdAt":"2024-01-11T16:38:29Z","labels":["priority: 2","work: complicated","type: ci","effort: medium"],"number":790,"repository":"sablier-labs/lockup","state":"closed","title":"Run the fork tests on a daily cron schedule","type":"issue","updatedAt":"2024-02-14T19:29:04Z","url":"https://github.com/sablier-labs/lockup/issues/790"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/v2-periphery/issues/238), it would be helpful to ship the precompiles so that we can write a protocol deployment script that spans V2 Core and V2 Periphery.\r\n\r\nTask:\r\n\r\n- [x] Move the precompiles in the `precompiles` directory\r\n- [x] Include the `precompiles` in the npm package\r\n- [ ] ~Include the `script/Precompiles.s.sol` file in the npm package (via `files`)~\r\n\r\nFood for thought: or maybe we shouldn't include the precompiles in `script`? How about another directory, e.g., `precompiles`?\r\n\r\nI will let you @andreivladbrg and @smol-ninja self-organize and assign this.","createdAt":"2024-01-10T15:32:39Z","labels":["type: refactor","priority: 2","work: clear","effort: medium"],"number":789,"repository":"sablier-labs/lockup","state":"closed","title":"Move the precompiles to a new directory that is shipped to npm","type":"issue","updatedAt":"2024-03-28T18:13:59Z","url":"https://github.com/sablier-labs/lockup/issues/789"},{"author":"PaulRBerg","body":"As discussed here: https://github.com/sablier-labs/company-discussions/discussions/19\r\n\r\nTasks:\r\n\r\n- [x] Build a PoC implementation\r\n- [x] Benchmark the PoC against `LockupDynamic`:\r\n    - Compare the creation of Unlock in Steps streams, e.g. [this](https://docs.sablier.com/concepts/protocol/stream-types#unlock-in-steps)\r\n    - Compare withdrawals from standard streams with one segment, i.e., how much more gas efficient will the `withdraw` function in `LockupTranched` be\r\n- [x] Decide if `LockupTranched` is worth it\r\n- [ ] Proceed with writing tests for it (using [Bulloak](https://github.com/alexfertel/bulloak))\r\n\r\nNote: we will keep using the same terminology, i.e., `streams` and `streamedAmountOf`. Related: https://github.com/sablier-labs/v2-core/discussions/708#discussioncomment-8082942","createdAt":"2024-01-09T17:07:20Z","labels":["type: feature","effort: epic","priority: 0","work: complicated"],"number":787,"repository":"sablier-labs/lockup","state":"closed","title":"LockupTranched: a new Lockup contract with sharply delineated chunks","type":"issue","updatedAt":"2024-03-06T13:54:15Z","url":"https://github.com/sablier-labs/lockup/issues/787"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/773, the goal is to refactor the [`withdrawMultiple`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/abstracts/SablierV2Lockup.sol#L328) function not to have a `to` parameter anymore, and query the recipient for each stream provided in the `streamIds` array.","createdAt":"2023-12-29T13:53:47Z","labels":["type: feature","priority: 1","work: complicated","effort: medium"],"number":774,"repository":"sablier-labs/lockup","state":"closed","title":"Make \"withdrawMultiple\" query the recipient for each stream","type":"issue","updatedAt":"2024-01-23T20:49:47Z","url":"https://github.com/sablier-labs/lockup/issues/774"},{"author":"PaulRBerg","body":"Two-pronged task:\r\n\r\n- [ ] Investigate whether the current order in the parameter structs (e.g. [`CreateWithDurations`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/types/DataTypes.sol#L199-L208)) saves gas\r\n- [ ] If not, rewrite all parameter structs to follow a consistent order:\r\n\r\nI.e. this order:\r\n\r\n- Sender\r\n- Recipient\r\n- Total Amount\r\n- Asset\r\n- Cancelable\r\n- Transferable\r\n- Time-related variables\r\n- Broker","createdAt":"2023-12-29T12:57:09Z","labels":["type: refactor","work: clear","priority: 3","effort: medium"],"number":772,"repository":"sablier-labs/lockup","state":"closed","title":"Consistent order in the parameter structs","type":"issue","updatedAt":"2024-01-04T13:05:38Z","url":"https://github.com/sablier-labs/lockup/issues/772"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nBecause [Solidity does not have anything equivalent to Rust traits](https://twitter.com/PaulRBerg/status/1531652974161838082), we are forced to duplicate any logic that touches upon different structs despite the logic being completely identical.\r\n\r\n- [ ] [`_cancel`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/SablierV2LockupLinear.sol#L385-L446)\r\n- [ ] [`_renounce`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/SablierV2LockupLinear.sol#L520-L528)\r\n- [ ] [`_withdraw`](https://github.com/sablier-labs/v2-core/blob/98d5281360c9e2d4c0cac7cc8d979e8dec571de9/src/SablierV2LockupLinear.sol#L531-L556)\r\n\r\nTechnically speaking, there is a way out, but it's ugly and not worth it. We could implement a setter for every struct field (e.g., `setIsCancelable`, `setWasCanceled`, etc.), but:\r\n\r\n1. Doing so would double the number of lines of code written for implementing the cancel and withdraw functionality\r\n2. The gas cost would increase (there would be more internal calls, some of which may not be inlined)\r\n3. There would still be a lot of duplicated code.\r\n\r\n## Solution\r\n\r\nIntroduce a new class of tests, i.e. differential tests, that perform the following checks:\r\n\r\n1. Read the `LockupLinear` and the `LockupDynamic` contracts (and potentially [`LockupTranched`](https://github.com/sablier-labs/private-discussions/discussions/19) in the future)\r\n2. Compare the implementations of the `_cancel` and the `_withdraw` functions. They should be 100% identical, down to the English comments.\r\n    - The [`awk` utility](https://www.geeksforgeeks.org/awk-command-unixlinux-examples/) might be helpful here\r\n\r\nThe tests would use Bash scripting and the [`ffi`](https://book.getfoundry.sh/cheatcodes/ffi?highlight=ffi#ffi) cheat code to read the file contents.\r\n\r\nAlternatively, if implementing this in Forge is too complicated, we can write a CI check. There should be GitHub Actions for performing diffs between files.\r\n\r\n## References\r\n\r\n- https://book.getfoundry.sh/forge/differential-ffi-testing\r\n- https://twitter.com/PaulRBerg/status/1531652974161838082\r\n- https://github.com/sablier-labs/v2-core/pull/664#issuecomment-1689815366","createdAt":"2023-12-28T15:34:02Z","labels":["priority: 1","type: test","work: complicated","effort: medium"],"number":771,"repository":"sablier-labs/lockup","state":"closed","title":"Test the code identity between the Lockup contracts","type":"issue","updatedAt":"2024-02-10T16:05:14Z","url":"https://github.com/sablier-labs/lockup/issues/771"},{"author":"PaulRBerg","body":"We shipped V2.1 with the same BUSL Change Date as V2.0.\r\n\r\nWhen we ship V2.2, we should remember to increase it so that it's `ship date + 4 years`.\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/main/LICENSE.md","createdAt":"2023-12-28T12:20:11Z","labels":["type: docs","priority: 1","effort: low","work: clear"],"number":770,"repository":"sablier-labs/lockup","state":"closed","title":"Increase the Change Date in BUSL when shipping V2.2","type":"issue","updatedAt":"2024-07-03T15:13:37Z","url":"https://github.com/sablier-labs/lockup/issues/770"},{"author":"PaulRBerg","body":"The task is to rename the `renounce` functionality (the function name, the event, etc.) to `disableCancelability`.\r\n\r\nThe rationale is two-fold:\r\n\r\n1. Since the introduction of the `transferable` flag in V2.1, there are now multiple properties of the stream that could be \"renounced\" by the sender.\r\n2. \"disable cancelability\" is infinitely clearer than \"renounce\". The latter could be interpreted to mean that the sender gives up on paying the recipient.\r\n","createdAt":"2023-12-22T19:02:27Z","labels":[],"number":766,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"renounce\" to \"disableCancelability\"","type":"issue","updatedAt":"2024-01-01T16:13:04Z","url":"https://github.com/sablier-labs/lockup/issues/766"},{"author":"PaulRBerg","body":"Due to a recent change in Foundry, the `GenerateSVG` script does not produce a properly formatted anymore.\r\n\r\nThe issue appears to be that Foundry adds an extra backslash before any double quotes character (`\"`).\r\n\r\n<img width=\"481\" alt=\"SCR-20231221-mnhv\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/9195e1c4-db7b-4d32-aa16-1d8fa451511f\">\r\n","createdAt":"2023-12-21T12:03:57Z","labels":[],"number":764,"repository":"sablier-labs/lockup","state":"closed","title":"Fix the \"GenerateSVG \"script","type":"issue","updatedAt":"2023-12-21T12:31:40Z","url":"https://github.com/sablier-labs/lockup/issues/764"},{"author":"PaulRBerg","body":"The NFT descriptor should be queryable via a user-facing method since the NFT descriptors change between releases (e.g., V2.0 vs V2.1).\r\n\r\nAlso, this is useful information in the general case. How else can users know what the NFT descriptor is?\r\n\r\nI can't remember what the rationale was for defining it as `internal`.\r\n\r\nHere:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/5e2f91c68f697cd570617b2a232a01716b8ccb57/src/abstracts/SablierV2Lockup.sol#L36","createdAt":"2023-12-21T11:42:52Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":763,"repository":"sablier-labs/lockup","state":"closed","title":"Make the NFT descriptor publicly queryable","type":"issue","updatedAt":"2024-01-16T14:43:51Z","url":"https://github.com/sablier-labs/lockup/issues/763"},{"author":"PaulRBerg","body":"It would be clearer if the ASCII differentiated the releases:\r\n\r\n<img width=\"500\" alt=\"SCR-20231221-lxhh\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/a7c7cdf2-c588-4955-9037-ff18976dc135\">\r\n","createdAt":"2023-12-21T11:18:32Z","labels":["good first issue","type: docs","effort: low","work: clear","priority: 3"],"number":761,"repository":"sablier-labs/lockup","state":"closed","title":"Change ASCII to say \"Sablier V2.2\"","type":"issue","updatedAt":"2024-01-04T15:18:47Z","url":"https://github.com/sablier-labs/lockup/issues/761"},{"author":"PaulRBerg","body":"PNPM's symbolic links are problematic. We should move away from PNPM. Possible solutions:\r\n\r\n1. Go back to Yarn\r\n2. NPM\r\n3. Explore [Bun](https://github.com/sablier-labs/v2-core/discussions/754)\r\n\r\nRefs:\r\n\r\n- https://twitter.com/PaulRBerg/status/1737169159052468479\r\n- https://github.com/foundry-rs/foundry/issues/3507#issuecomment-1864337892","createdAt":"2023-12-20T10:35:55Z","labels":[],"number":759,"repository":"sablier-labs/lockup","state":"closed","title":"Move away from PNPM","type":"issue","updatedAt":"2024-01-04T15:18:47Z","url":"https://github.com/sablier-labs/lockup/issues/759"},{"author":"PaulRBerg","body":"Thanks to Solidity v0.8.22, we can say goodbye to the ugly \"unchecked { ++i; }\" syntax when using for loops.\r\n\r\nContext:\r\n\r\n- https://github.com/ethereum/solidity/releases/tag/v0.8.22\r\n- https://twitter.com/PaulRBerg/status/1717148805282296017\r\n","createdAt":"2023-12-19T11:17:50Z","labels":["effort: low","work: clear","priority: 3","type: perf"],"number":757,"repository":"sablier-labs/lockup","state":"closed","title":"Remove \"unchecked\" in for loop incrementors","type":"issue","updatedAt":"2024-01-10T11:24:43Z","url":"https://github.com/sablier-labs/lockup/issues/757"},{"author":"PaulRBerg","body":"## Context\n\nSome contracts compiled with v0.8.21 cannot be verified on Etherscan because of this bug related to viaIR, which was patched in [Solidity v0.8.22](https://github.com/ethereum/solidity/releases/tag/v0.8.22):\n\n> Code Generator: Fix output from via-IR code generator being dependent on which files were discovered by import callback. In some cases, a different AST ID assignment would alter the order of functions in internal dispatch, resulting in superficially different but semantically equivalent bytecode.\n\nI will write a detailed post on Twitter later.\n\n## Task\n\n- [x] Bump Solidity to v0.8.23\n- [x] Ship package and GitHub release v1.1.2","createdAt":"2023-12-19T11:06:03Z","labels":[],"number":756,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to Solidity v0.8.23","type":"issue","updatedAt":"2025-04-25T17:15:52Z","url":"https://github.com/sablier-labs/lockup/issues/756"},{"author":"PaulRBerg","body":"Write a shell script that takes a single input (a chain name) and outputs the full `forge script` command that can be used for deploying the protocol on that chain.\r\n\r\nE.g. `./shell/generate-deployment-command.sh avalanche` would generate this:\r\n\r\n```sh\r\nforge script script/DeployDeterministicCore3.s.sol --rpc-url RPC_URL --sig \"run(string,address,address,uint256)\" \"ChainID 43114, Version 1.1.1\" 0x4735517616373c5137dE8bcCDc887637B8ac85Ce 0x66F5431B0765D984f82A4fc4551b2c9ccF7eAC9C 300 -vvv --broadcast --verify --etherscan-api-key SNOWTRACE_API_KEY\r\n```\r\n\r\nWhere:\r\n\r\n- 0x4735517616373c5137dE8bcCDc887637B8ac85Ce is the protocol admin\r\n- 0x66F5431B0765D984f82A4fc4551b2c9ccF7eAC9C is the comptroller","createdAt":"2023-12-17T17:30:17Z","labels":["type: feature","priority: 2","work: complicated","effort: medium"],"number":751,"repository":"sablier-labs/lockup","state":"closed","title":"Write a script that output the correct \"forge script\" command for deployment","type":"issue","updatedAt":"2024-01-21T12:23:23Z","url":"https://github.com/sablier-labs/lockup/issues/751"},{"author":"PaulRBerg","body":"Here: https://github.com/sablier-labs/v2-core/blob/79aa953330c00fdb5a8a588cf65526008567df0f/shell/deploy-multi-chain.sh#L178\r\n\r\nI've tried all of the following approaches. None worked:\r\n\r\n| Approach | Result in Terminal |\r\n|--------|--------|\r\n| Surround with `\\\"` | `'\"ChainID' 43114, Version '1.1.1\"'` |\r\n| Surround with `\\'` | `'\\'\\''ChainID' 43114, Version '1.1.1\\'\\'''` |\r\n| Surround with `'` | `''\\''ChainID' 43114, Version '1.1.1'\\'''` | \r\n| Surround with `'` | Broken script | \r\n\r\nWhat should be generated is this:\r\n\r\n```\r\n\"ChainID 43114, Version 1.1.1\"\r\n```\r\n\r\nOr this:\r\n\r\n```\r\n'ChainID 43114, Version 1.1.1'\r\n```\r\n\r\nNote: this is best debugged by adding the `-x` flag here:\r\n\r\n```sh\r\n$ set -euxo pipefail\r\n```","createdAt":"2023-12-17T17:26:26Z","labels":[],"number":750,"repository":"sablier-labs/lockup","state":"closed","title":"Fix CREATE2 salt interpolation in multi-chain deployment script","type":"issue","updatedAt":"2023-12-23T18:29:47Z","url":"https://github.com/sablier-labs/lockup/issues/750"},{"author":"PaulRBerg","body":"Similar to the multi-chain deployment script written by @andreivladbrg and polished by @smol-ninja, we should also write a multi-chain verification script.\r\n\r\nIt is often the case that the verification part fails in a `forge script` command (example [here](https://github.com/foundry-rs/foundry/issues/6050#issuecomment-1859224976)).\r\n\r\nHaving to manually verify each contract is a chore.","createdAt":"2023-12-17T17:15:48Z","labels":[],"number":749,"repository":"sablier-labs/lockup","state":"closed","title":"Write a multi-chain source code verify script","type":"issue","updatedAt":"2023-12-24T13:58:17Z","url":"https://github.com/sablier-labs/lockup/issues/749"},{"author":"PaulRBerg","body":"- [x] Forge Std 1.7.4\r\n- [x] PRBMath v4.0.3 (I am due to release this)\r\n- [x] Other dependencies listed in `package.json`","createdAt":"2023-12-17T11:58:20Z","labels":["type: build","effort: low","work: clear","priority: 3"],"number":747,"repository":"sablier-labs/lockup","state":"closed","title":"Bump dependencies","type":"issue","updatedAt":"2024-06-29T21:26:12Z","url":"https://github.com/sablier-labs/lockup/issues/747"},{"author":"smol-ninja","body":"Context\r\n------\r\nFork testing fails on a PR raised by external contributors despite them setting up the correct Github Secrets in their local repo. This is because Secrets are not passed from the source branch to the workflows. [Source ↗](https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#using-secrets-in-a-workflow).\r\n\r\nThere is an alternate approach to using `pull_request_target` instead of the `pull_request` event in GitHub Actions to enable the workflow to operate within the context of the contributor's secrets. The risk involved is that it can lead to the repo's GitHub secrets. [More info ↗](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/#:%7E:text=of%20the%20PR.-,Having%20said%20that,-%2C%20mixing%20pull_request_target%20with)\r\n\r\nInvestigate if there is a safer way to enable fork testing for external PRs.\r\n\r\nSome references: [#1](https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks#about-workflow-runs-from-public-forks) [#2](https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/\r\n) [#3](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target)","createdAt":"2023-12-15T13:42:56Z","labels":["effort: high","work: complex","type: test","priority: 3"],"number":745,"repository":"sablier-labs/lockup","state":"closed","title":"CI: Investigate fork tests for PRs by external contributors","type":"issue","updatedAt":"2024-03-04T11:34:08Z","url":"https://github.com/sablier-labs/lockup/issues/745"},{"author":"smol-ninja","body":"Branch: https://github.com/sablier-labs/v2-core/tree/build/multi-chain-script\r\nRef: https://github.com/sablier-labs/v2-periphery/pull/229#issuecomment-1853988823","createdAt":"2023-12-13T14:21:38Z","labels":[],"number":743,"repository":"sablier-labs/lockup","state":"closed","title":"Update multi chain script","type":"issue","updatedAt":"2023-12-14T13:07:31Z","url":"https://github.com/sablier-labs/lockup/issues/743"},{"author":"andreivladbrg","body":"## Context\r\n\r\nA user has asked us about how to automatically `cancel` a stream after it has been withdrawn a certain number of times by the recipient. \r\n\r\nCurrently, this functionality is not possible at the contract level. Our implementation runs the hook only on the recipient's side:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/63204c9ab44e6f5efcb0c38249f229f7d4affe73/src/abstracts/SablierV2Lockup.sol#L283-L293\r\n\r\nTo address this we should  add a `ISablierV2LockupSender(sender).onStreamWithdrawn()` hook. This hook would be triggered when the caller is either the recipient or an approved operator.","createdAt":"2023-12-12T23:50:31Z","labels":["type: feature","priority: 2","work: clear","effort: medium"],"number":742,"repository":"sablier-labs/lockup","state":"closed","title":"Add hooks for the sender side in `withdraw` function","type":"issue","updatedAt":"2024-01-11T14:42:51Z","url":"https://github.com/sablier-labs/lockup/issues/742"},{"author":"lapnd","body":"Hi,\nDoes Sablier support multiple streams with the same payer and payee address?\nLet say, a service provider like google provides multiple services such as gmail, google docs, google sheet. And let assume that user has to pay to use these services. User may user multiple services or may be single service but multiple instances(like pay for gmail services with different domains).\nIn these case, user has to establish multiple stream. Each stream/service , or each stream/service instance. In both cases, it is the same payer and payee addreess. I wonder if Salbier support these cases","createdAt":"2023-12-08T14:29:26Z","labels":[],"number":737,"repository":"sablier-labs/lockup","state":"closed","title":"Multiple streams with the same payer and payee","type":"issue","updatedAt":"2023-12-08T15:45:22Z","url":"https://github.com/sablier-labs/lockup/issues/737"},{"author":"andreivladbrg","body":"As discussed [here](https://github.com/sablier-labs/v2-core/discussions/595), we should rename the hook interface and functions like this:\r\n\r\n```solidity\r\ninterface ISablierV2Recipient {\r\n     function onLockupStreamCanceled(uint256 streamId, address sender, uint128 senderAmount, uint128 recipientAmount) external;\r\n     function onLockupStreamRenounced(uint256 streamId) external;\r\n     function onLockupStreamWithdrawn(uint256 streamId, address caller, address to, uint128 amount) external;\r\n}\r\n```","createdAt":"2023-12-08T11:33:49Z","labels":["type: refactor","priority: 1","work: complicated","effort: medium"],"number":736,"repository":"sablier-labs/lockup","state":"closed","title":"Rename hook interface and functions","type":"issue","updatedAt":"2024-01-11T14:43:00Z","url":"https://github.com/sablier-labs/lockup/issues/736"},{"author":"PaulRBerg","body":"In light of:\r\n\r\n1. Our recent [decision](https://github.com/sablier-labs/v2-periphery/issues/224) to remove the proxy targets from V2 Periphery\r\n2. The fact that implementing them would be a [faff](https://github.com/sablier-labs/v2-interfaces/discussions/233)\r\n3. The fact that they would act as a [deterrent](https://github.com/sablier-labs/v2-core/discussions/278) for vesting users\r\n4. The reality that we have many other priorities\r\n\r\nWe should remove the flash loan logic from this repository; it increases the maintenance cost without adding any value.","createdAt":"2023-12-04T11:11:33Z","labels":["effort: high","type: refactor","priority: 1","work: complicated"],"number":733,"repository":"sablier-labs/lockup","state":"closed","title":"Remove flash loans","type":"issue","updatedAt":"2024-01-10T15:53:18Z","url":"https://github.com/sablier-labs/lockup/issues/733"},{"author":"PaulRBerg","body":"The task is to allow the `withdraw` function to be callable by anyone so that third-party accounts can claim on behalf of recipients.\r\n\r\nSee the rationale in https://github.com/sablier-labs/v2-core/discussions/110 (especially towards the bottom).","createdAt":"2023-11-28T12:03:06Z","labels":["type: feature","effort: epic","priority: 1","work: complicated"],"number":731,"repository":"sablier-labs/lockup","state":"closed","title":"Make withdraw function callable by any account","type":"issue","updatedAt":"2024-01-23T20:49:37Z","url":"https://github.com/sablier-labs/lockup/issues/731"},{"author":"andreivladbrg","body":"We should have a consistent order of parameter structs:\r\n\r\n- Sender\r\n- Recipient\r\n- Total Amount\r\n- Asset\r\n- Cancelable\r\n- Transferable\r\n- Time-related variables\r\n- Broker\r\n\r\nLD:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/e1a53b4c839912573996c313d447aeeed6eb434c/src/types/DataTypes.sol#L111-L121\r\n\r\nLL:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/e1a53b4c839912573996c313d447aeeed6eb434c/src/types/DataTypes.sol#L223-L232","createdAt":"2023-11-24T13:54:58Z","labels":["type: refactor","work: clear","priority: 3","effort: medium"],"number":728,"repository":"sablier-labs/lockup","state":"closed","title":"Inconsistency in the order of parameters in structs between LockupLinear and LockupDynamic","type":"issue","updatedAt":"2024-01-12T12:58:19Z","url":"https://github.com/sablier-labs/lockup/issues/728"},{"author":"PaulRBerg","body":"Two recent users have bumped into a really nasty integration issue where they were installing V2 Core as a git submodule on the `main` branch, which has the `transferable` flag, which consequently leads to an `EvmError` when trying to create a stream as a test:\r\n\r\nhttps://app.warp.dev/block/c559JRxdKQeAKIUDKhr7iN\r\n\r\nThe solution is to install from the `release` branch but this is non-obvious and can lead to long and painful debugging sessions.","createdAt":"2023-11-04T20:06:37Z","labels":[],"number":722,"repository":"sablier-labs/lockup","state":"closed","title":"Update \"main\" branch to not contain the latest breaking changes","type":"issue","updatedAt":"2023-11-04T20:37:00Z","url":"https://github.com/sablier-labs/lockup/issues/722"},{"author":"andreivladbrg","body":"In the latest PR, we added the slither job to our CI.\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/3883dc3f3b2d33c7519292404e4942969a4dd2f2/.github/workflows/ci.yml#L289-L317\r\n\r\nAfter it ran twice, I realized it might take significantly longer compared to other jobs:\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/6654049027\r\n\r\nI believe it would be more efficient to move the slither job to a separate workflow, similar to the [deep job](https://github.com/sablier-labs/v2-core/blob/main/.github/workflows/ci-deep.yml) that runs weekly. We could schedule the slither job to run daily or weekly.\r\n","createdAt":"2023-10-26T14:12:36Z","labels":["type: test","work: complicated","priority: 3","effort: medium"],"number":719,"repository":"sablier-labs/lockup","state":"closed","title":"Run slither job periodically ","type":"issue","updatedAt":"2024-01-01T16:15:44Z","url":"https://github.com/sablier-labs/lockup/issues/719"},{"author":"PaulRBerg","body":"The events should be emitted before the hooks are called:\r\n\r\n- https://github.com/sablier-labs/v2-core/blob/91887daff5872c7fa83fe3644b6f7582e9bffc0d/src/abstracts/SablierV2Lockup.sol#L213C31-L213C51\r\n- https://github.com/sablier-labs/v2-core/blob/91887daff5872c7fa83fe3644b6f7582e9bffc0d/src/SablierV2LockupLinear.sol#L442","createdAt":"2023-10-25T17:17:31Z","labels":[],"number":717,"repository":"sablier-labs/lockup","state":"closed","title":"Emit the events before the hooks","type":"issue","updatedAt":"2023-10-27T15:33:02Z","url":"https://github.com/sablier-labs/lockup/issues/717"},{"author":"PaulRBerg","body":"We should update the [`CONTRIBUTING`](https://github.com/sablier-labs/v2-core/blob/main/CONTRIBUTING.md) guide to explain what GitHub secrets contributors need to have set in order to make the CI pass in their forks.\r\n\r\nRef https://github.com/sablier-labs/v2-core/pull/714#issuecomment-1776954027","createdAt":"2023-10-24T10:39:01Z","labels":[],"number":715,"repository":"sablier-labs/lockup","state":"closed","title":"Document the GitHub secrets required to make the CI work in PRs","type":"issue","updatedAt":"2023-12-15T13:29:59Z","url":"https://github.com/sablier-labs/lockup/issues/715"},{"author":"andreivladbrg","body":"We should add `DeployOptimized` contract in the `test/utils/` path and move there the precompiled functions from `Base_Test` contract.\r\n\r\nRef https://github.com/sablier-labs/v2-periphery/pull/209#issuecomment-1768722908","createdAt":"2023-10-18T15:38:52Z","labels":[],"number":711,"repository":"sablier-labs/lockup","state":"closed","title":"Add `DeployOptimized` utils testing contract ","type":"issue","updatedAt":"2023-10-19T11:17:54Z","url":"https://github.com/sablier-labs/lockup/issues/711"},{"author":"PaulRBerg","body":"## Context\r\n\r\nWe keep getting requests for timelocks - e.g. see this recent tag on Twitter:\r\n\r\nhttps://twitter.com/Arr00c/status/1712559004814381308\r\n\r\nThis mention has resulted in two LockupDynamic streams with one segment and a duration of 1 second:\r\n\r\n- https://app.sablier.com/stream/LD-1-7\r\n- https://app.sablier.com/stream/LD-1-8\r\n\r\nThis is how the release curve looks like:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-10-13 at 11 26 33 AM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/d3a6ceb3-ca8c-46b6-8cbb-aaf1d9fabfcf\">\r\n\r\n## Task\r\n\r\nThe context above is sufficient proof that there's a need for timelocks in web3. We should build a bespoke contract focused on this use case.\r\n\r\nBuilding this feature entails a soft pivot from \"streaming-only\" to \"token distribution\", but that's ok. See the related discussions [here](https://github.com/sablier-labs/v2-interfaces/discussions/568) and  [here](https://github.com/sablier-labs/private-discussions/discussions/4).","createdAt":"2023-10-13T10:30:13Z","labels":[],"number":706,"repository":"sablier-labs/lockup","state":"closed","title":"Bespoke timelock contract","type":"issue","updatedAt":"2023-11-23T15:50:55Z","url":"https://github.com/sablier-labs/lockup/issues/706"},{"author":"PaulRBerg","body":"Investigate why it is failing:\r\n\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/6213048327","createdAt":"2023-10-12T13:16:31Z","labels":["effort: high","work: complex","type: test","priority: 3","stale"],"number":704,"repository":"sablier-labs/lockup","state":"closed","title":"Regenerate SMTChecker report","type":"issue","updatedAt":"2025-01-13T09:00:39Z","url":"https://github.com/sablier-labs/lockup/issues/704"},{"author":"PaulRBerg","body":"They released V5 a few days ago:\r\n\r\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v5.0.0\r\n\r\nWe should be particularly interested about their new `ERC721` implementation, which uses custom errors, and thus reduces the bytecode size of our contracts.","createdAt":"2023-10-09T09:23:02Z","labels":["effort: high","type: refactor","priority: 2","work: complicated"],"number":702,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to OpenZeppelin V5","type":"issue","updatedAt":"2024-02-05T12:24:34Z","url":"https://github.com/sablier-labs/lockup/issues/702"},{"author":"PaulRBerg","body":"Immutable variables are constant at runtime, so they should be named like constants in `UPPERCASE_SNAKE_CASE`.\r\n\r\nSolhint has a rule for this, which is currently disabled in our Solhint config file. Activating it finds several occurrences:\r\n\r\nhttps://app.warp.dev/block/782axtYGfdaPdIxf8mHIAY\r\n\r\nWe should refactor and then activate the rule (by removing [this line](https://github.com/sablier-labs/v2-core/blob/924df9779412fcd0abb599eae78f325b7b5c07ef/.solhint.json#L10) from the Solhint config).","createdAt":"2023-10-02T08:46:53Z","labels":[],"number":699,"repository":"sablier-labs/lockup","state":"closed","title":"Capitalize immutable variables","type":"issue","updatedAt":"2023-10-02T12:08:30Z","url":"https://github.com/sablier-labs/lockup/issues/699"},{"author":"PaulRBerg","body":"Requested by user on Crisp:\r\n\r\n<img width=\"410\" alt=\"Screenshot 2023-09-11 at 4 55 53 PM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/1b0054e8-2e33-4808-8473-2215886b3e81\">\r\n","createdAt":"2023-09-11T13:56:30Z","labels":[],"number":687,"repository":"sablier-labs/lockup","state":"closed","title":"Deploy to zkSync Era","type":"issue","updatedAt":"2023-09-15T12:31:36Z","url":"https://github.com/sablier-labs/lockup/issues/687"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/666, as well as reported by Cantina in https://github.com/cantinasec/review-sablier/issues/22.","createdAt":"2023-08-31T15:31:02Z","labels":[],"number":674,"repository":"sablier-labs/lockup","state":"closed","title":"Disable the ability of the sender to withdraw","type":"issue","updatedAt":"2023-09-25T08:45:54Z","url":"https://github.com/sablier-labs/lockup/issues/674"},{"author":"PaulRBerg","body":"The goal is to refresh the NFT SVG on platforms like OpenSea whenever the NFT is transferred around.","createdAt":"2023-08-28T18:58:29Z","labels":[],"number":670,"repository":"sablier-labs/lockup","state":"closed","title":"Emit ERC-4906 metadata updates in \"transferFrom\"","type":"issue","updatedAt":"2023-09-18T09:07:24Z","url":"https://github.com/sablier-labs/lockup/issues/670"},{"author":"razgraf","body":"Tapioca DAO wants to stream funds biweekly, and was looking for a way to distribute the first chunk at the start of the stream. This is similar to our monthly setup where the user picks the time of the first payment (start date vs. end of first month).\r\n\r\n<img width=\"1141\" alt=\"Screenshot 2024-11-11 at 17 17 01\" src=\"https://github.com/user-attachments/assets/1c1fba16-0d55-4b80-8005-178c0f729e9a\">\r\n\r\nP.S. This, as we advised Tapioca, can also be achieved with a backdated start date (e.g. you set it 2 weeks in the past), but a bespoke flag would make for nicer UX.\r\n\r\nP.S.S. Since weeks are fixed in time, I don't think there's much of a reason to implement a bespoke Biweekly shape. Maybe update the description of Unlock in steps to mention \"biweekly\" as an example of a stepper stream?","createdAt":"2024-11-11T15:19:07Z","labels":[],"number":1181,"repository":"sablier-labs/interfaces","state":"closed","title":"Initial unlock flag for Stepper","type":"issue","updatedAt":"2025-01-28T12:25:47Z","url":"https://github.com/sablier-labs/interfaces/issues/1181"},{"author":"PaulRBerg","body":"https://app.sablier.com/stream/LT3-1-481/\r\n\r\nReported by a user (VitaDAO):\r\n\r\n<img width=\"400\" alt=\"SCR-20241108-pmit\" src=\"https://github.com/user-attachments/assets/74d5a861-c49d-49f0-b167-bf5772bd7f1a\">\r\n","createdAt":"2024-11-08T17:44:20Z","labels":["type: bug","priority: 2","work: clear"],"number":1178,"repository":"sablier-labs/interfaces","state":"closed","title":"Stepper stream showing up as Monthly Unlocks","type":"issue","updatedAt":"2025-01-13T11:21:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1178"},{"author":"razgraf","body":"Following up on https://github.com/sablier-labs/v2-interfaces/pull/1163#issue-2632194871 we should update Sentry to its latest version and enable source-maps [deletion](https://docs.sentry.io/platforms/javascript/sourcemaps/uploading/webpack/) after [upload](https://www.npmjs.com/package/@sentry/webpack-plugin#sourcemapsfilestodeleteafterupload).\n\nSentry's SDK v8 contains a new flag `deleteSourcemapsAfterUpload ` for removing source maps.\n\n- [ ] Upgrade Sentry SDK\n- [ ] Delete `webpack-delete-sourcemaps-plugin` package","createdAt":"2024-11-05T07:47:44Z","labels":[],"number":1170,"repository":"sablier-labs/interfaces","state":"closed","title":"Bump sentry and refactor sourcemap management","type":"issue","updatedAt":"2025-01-30T17:56:58Z","url":"https://github.com/sablier-labs/interfaces/issues/1170"},{"author":"PaulRBerg","body":"Since https://github.com/sablier-labs/v2-interfaces/issues/999 was implemented, the new date format is `YYYY-MM-DD`.\r\n\r\nI have just tried to use an older CSV template that was using `DD/MM/YYYY` and I got this error:\r\n\r\n<img width=\"400\" alt=\"SCR-20241104-lrby\" src=\"https://github.com/user-attachments/assets/2a49dd13-0513-4895-8ae4-2b433be1ba6a\">\r\n\r\nI spent 5 minutes debugging this — I imagine some users would give up. A clearer and more specific error message would have helped a lot.\r\n\r\nThis is particularly problematic for older users who were accustomed to the `DD/MM/YYYY` format.","createdAt":"2024-11-04T13:02:31Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1168,"repository":"sablier-labs/interfaces","state":"closed","title":"Specific error when dates don't follow the expected format YYYY-MM-DD","type":"issue","updatedAt":"2024-11-04T13:06:17Z","url":"https://github.com/sablier-labs/interfaces/issues/1168"},{"author":"razgraf","body":"","createdAt":"2024-11-04T13:00:59Z","labels":[],"number":1167,"repository":"sablier-labs/interfaces","state":"closed","title":"Cleanup cypress","type":"issue","updatedAt":"2024-11-12T13:25:07Z","url":"https://github.com/sablier-labs/interfaces/issues/1167"},{"author":"razgraf","body":"Would get rid of `antd` which is quite heavy in size, doesn't have good tree shaking and has some issues in their latest versions. \r\n\r\n```\r\n/**\r\n * Make sure the child component accepts all the necessary props.\r\n * It's best to introduce a normal `div` as a child wrapper to make sure the tooltip appears.\r\n *\r\n * https://ant.design/components/tooltip#why-sometime-not-work-on-hoc\r\n */\r\n```","createdAt":"2024-11-04T12:37:09Z","labels":["backlog","type: refactor"],"number":1166,"repository":"sablier-labs/interfaces","state":"open","title":"Refactor antd tooltip and calendar to another library","type":"issue","updatedAt":"2025-01-30T17:54:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1166"},{"author":"razgraf","body":"Pre flow launch we'll do an OG Image sprint which will include:\r\n- designs for a flow OG Image (including designs for the NFT)\r\n- designs for a drop(s) OG Image #1002 \r\n- the use-case centric refactor of the lockup OG Image\r\n- try #1031\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1160\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** November  2, 2024</sup>\r\nIn line with the [use-case centric navigation](https://github.com/sablier-labs/v2-interfaces/discussions/880) and our ongoing development on Sablier Flow, I would like to also suggest a use-case centric social media preview card.\r\n\r\nTake, for instance, this recent user $XP. They have [announced](https://x.com/xpdotfun/status/1849515750417105381) their vesting plan on social media, and the preview card looks like this:\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/f16abaa7-be36-4cc4-84ee-4dfec7d53df4\"/>\r\n\r\nNotice the dissonance between what they say in the tweet and what's immediately visible in the preview:\r\n\r\n- They say: \"locked and vested for 18 months\"\r\n- We say: \"Lockup Stream\"\r\n\r\nWe should say something more use-case specific, such as \"Vesting XP 1M\". And the same for Flow streams and airdrop campaigns.\r\n</div>","createdAt":"2024-11-02T17:41:45Z","labels":[],"number":1161,"repository":"sablier-labs/interfaces","state":"closed","title":" OpenGraph preview images for flow, use-case centric refactor","type":"issue","updatedAt":"2024-11-12T13:25:42Z","url":"https://github.com/sablier-labs/interfaces/issues/1161"},{"author":"razgraf","body":"We've uncovered an issue with TS where a star import from `viem/chains` was causing a depth-parsing issue through abitype and typescript. We've had a similar problem with our `@sablier/v2-contracts/../framework/interpret` methods but managed to get rid of it at the time.\r\n\r\nThe task would be to manually tree shake these star imports when the source files become too large, esp. with `viem/chains`.","createdAt":"2024-10-31T13:09:12Z","labels":["priority: 2"],"number":1158,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove `import * from viem` if any to prevent TS depth issues","type":"issue","updatedAt":"2024-10-31T14:34:12Z","url":"https://github.com/sablier-labs/interfaces/issues/1158"},{"author":"razgraf","body":"We have some security warnings from dependabot based on a few compromised libraries. We should check that bump packages where possible.\r\n\r\nLet's maybe do it in the staging sprint for updating packages.\r\n\r\n@smol-ninja also shared https://socket.dev/ so we should do some research and decide if it's worth adding to our CI/CD pipes.","createdAt":"2024-10-31T10:12:11Z","labels":["priority: 1"],"number":1157,"repository":"sablier-labs/interfaces","state":"open","title":"Bump dependencies and clear dependabot errors","type":"issue","updatedAt":"2025-05-05T09:30:40Z","url":"https://github.com/sablier-labs/interfaces/issues/1157"},{"author":"maxdesalle","body":"Add the ability to change the amount unlocked at the end of the cliff for distribution curves with cliffs.","createdAt":"2024-10-30T20:17:15Z","labels":["backlog"],"number":1155,"repository":"sablier-labs/interfaces","state":"closed","title":"Add the ability to adjust the amount unlocked in the cliff","type":"issue","updatedAt":"2025-01-28T12:27:47Z","url":"https://github.com/sablier-labs/interfaces/issues/1155"},{"author":"razgraf","body":"Stemming from #995, a proposal for a UTC toggle has emerged.\r\n\r\nThe task would be to add a \"timezone\" toggle:\r\n- On: Local Timezone (UTC+X)\r\n- Off: UTC+0 (no DST)\r\n\r\nAn explanation about Daylight Savings Time being accounted for in the (On) Local Timezone case will be useful.\r\n \r\nIf set to (Off) UTC+0, inside the [sanitized](https://github.com/sablier-labs/v2-interfaces/blob/1d98da76f12dc673ebb563917b6dd29d1442db5a/apps/client/src/pages/Stream/Create/CSV/interpret.ts#L68) transformer we instruct [dayjs](https://day.js.org/docs/en/parse/utc) to not take into account any DST and local timezones.\r\n\r\n\r\nSide quest: update the docs to mention this setting","createdAt":"2024-10-30T12:37:25Z","labels":["type: feature"],"number":1152,"repository":"sablier-labs/interfaces","state":"closed","title":"Add UTC toggle inside CSV forms","type":"issue","updatedAt":"2024-11-12T13:24:59Z","url":"https://github.com/sablier-labs/interfaces/issues/1152"},{"author":"razgraf","body":"The stream cart is growing in complexity with the addition of flow.\r\n\r\nThis also means that stale streams could start to become an issue. For context, the cart only relies on cached stream data (browser storage) and doesn't update stream definitions when the data becomes stale, after a while.\r\n\r\nThe task is to check the cart for stale data (could be on every user session) and perform a query the first time our user opens the cart to fetch selected streams again. This would be a per-chain, per-flavor (lockup/flow) query.\r\n\r\n\r\n![Screenshot 2024-10-29 at 01 01 21](https://github.com/user-attachments/assets/6b5f1652-34fb-4c75-845d-8e3938519868)\r\n","createdAt":"2024-10-28T23:02:03Z","labels":[],"number":1148,"repository":"sablier-labs/interfaces","state":"closed","title":"Refresh stale data in the stream cart","type":"issue","updatedAt":"2024-11-12T13:24:55Z","url":"https://github.com/sablier-labs/interfaces/issues/1148"},{"author":"tukwan","body":"**Keywords (Meta)**\r\n\r\nThey don't help with ranking web pages anymore, and competitors can easily spy on them. I checked Ahrefs pages, and they don’t use meta keywords, same with eg apple.com.\r\n\r\nMore info:\r\n- https://ahrefs.com/blog/meta-keywords","createdAt":"2024-10-28T14:08:03Z","labels":["topic: seo"],"number":1146,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove meta keywords","type":"issue","updatedAt":"2024-10-30T07:17:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1146"},{"author":"PaulRBerg","body":"<img src=\"https://github.com/user-attachments/assets/2da59a43-e88f-4952-a09b-077c43755e9c\"/>\r\n\r\n<img width=\"321\" alt=\"SCR-20241028-jkhu\" src=\"https://github.com/user-attachments/assets/8e98a908-38d6-45cc-8af9-3babc26856d9\">","createdAt":"2024-10-28T10:19:15Z","labels":["type: feature","priority: 3","work: clear"],"number":1144,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow streams to start at the beginning of the month in CSV for Monthly Unlocks","type":"issue","updatedAt":"2024-11-12T13:26:50Z","url":"https://github.com/sablier-labs/interfaces/issues/1144"},{"author":"maxdesalle","body":"Sablier V2.2 is already deployed on both [Morph](https://docs.sablier.com/contracts/v2/deployments#morph), and [Mode](https://docs.sablier.com/contracts/v2/deployments#mode). It would be great to add support for both of these via our interface as well.","createdAt":"2024-10-23T23:09:19Z","labels":[],"number":1138,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for Morph & Mode","type":"issue","updatedAt":"2024-10-31T14:34:12Z","url":"https://github.com/sablier-labs/interfaces/issues/1138"},{"author":"razgraf","body":"As discussed in #1131, two optional columns may help users navigate a CSVs. For payroll, this means attaching a \"name\" to each employee/address and a possible note (e.g. \"This month the amount includes a bonus\").\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1131","createdAt":"2024-10-21T10:30:17Z","labels":["priority: 3"],"number":1134,"repository":"sablier-labs/interfaces","state":"closed","title":"Add optional \"Name\" and \"Notes\" columns in the Group Stream CSVs","type":"issue","updatedAt":"2024-11-12T13:25:37Z","url":"https://github.com/sablier-labs/interfaces/issues/1134"},{"author":"razgraf","body":"The task is to find a proper set of [keywords](https://www.highervisibility.com/seo/learn/meta-tags/) *for each dedicated page* and match them with the content / description on every page.\r\n\r\n","createdAt":"2024-10-21T09:19:10Z","labels":["topic: seo"],"number":1133,"repository":"sablier-labs/interfaces","state":"closed","title":"Find proper keywords and match with content for landing pages","type":"issue","updatedAt":"2024-10-28T15:27:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1133"},{"author":"razgraf","body":"There's an edge-case with the allowance button in our forms. Scenario:\r\n\r\n- user fills in the form for two streams\r\n- user clicks to trigger an allowance transaction\r\n- the transaction is pending\r\n- user changes an amount somewhere in the form, or clicks to add another stream entry\r\n- the allowance system will `reset`, even though the transaction is still pending\r\n- the UI will ask the user to allow again\r\n\r\nUsers who aren't paying extra attention (not that we can expect them to) may click to allow again and again, especially if the transaction is taking a while (e.g. mainnet, low gas price).\r\n\r\nThe fix here should make the allowance button persist its state when an allowance is triggered. Or.. prevent the forms from being altered while the transaction is on-going, but that would make for bad UX.\r\n\r\n","createdAt":"2024-10-21T07:58:57Z","labels":["type: bug","priority: 2","effort: high"],"number":1132,"repository":"sablier-labs/interfaces","state":"closed","title":"Persist allowance button during allowance tx","type":"issue","updatedAt":"2024-11-12T13:24:50Z","url":"https://github.com/sablier-labs/interfaces/issues/1132"},{"author":"PaulRBerg","body":"User Sarah George has been confused by the name of the `unlockDuration` column in the Unlock Cliff CSV template — it does appear as if the name of this column has been accidentally left to `unlockDuration`. I think the intended name was `cliffDuration`?\r\n\r\nWhatever the case, I suggest renaming it to `cliffDuration`. An unlock is instant — it doesn't have any duration.\r\n\r\n[unlockCliff-duration-template.csv](https://github.com/user-attachments/files/17451476/unlockCliff-duration-template.csv)\r\n\r\n<img width=\"400\" alt=\"SCR-20241020-qhqq\" src=\"https://github.com/user-attachments/assets/8dee6a9f-0aad-4ddb-a246-393259065c5d\">\r\n\r\n<img width=\"400\" alt=\"SCR-20241020-qhsk\" src=\"https://github.com/user-attachments/assets/782714ee-6e32-444a-b47b-941bafeb9fc6\">\r\n\r\n","createdAt":"2024-10-20T17:40:46Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1130,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"unlockDuration\" to \"cliffDuration\" CSV column in Unlock Cliff shape","type":"issue","updatedAt":"2024-10-30T12:26:30Z","url":"https://github.com/sablier-labs/interfaces/issues/1130"},{"author":"razgraf","body":"Task is to add a no-index meta tag to the client app **when** the domain is not app.sablier.com (sourced from `packages/constants/../links`).\r\n\r\nExample\r\n```tsx\r\n\r\nconst isNoIndex = _.isWindow() &&  location.hostname.indexOf(\"app.sablier.com\") !== -1;\r\n\r\n<>\r\n{ isNoIndex && <meta name=\"robots\" content=\"noindex\"> }\r\n</>\r\n\r\n```\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1079\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** September 23, 2024</sup>\r\nGoogle has correctly inferred that `app.sablier.com` is the canonical URL for `beta.sablier.com` and `staging.sablier.com`.\r\n\r\n<img width=\"400\" alt=\"SCR-20240923-mqdy\" src=\"https://github.com/user-attachments/assets/193917d7-77a4-49b1-9e22-f6fa0723a131\">\r\n\r\nHowever, it would be better for us (the user) to explicitly define them as non-canonical by adding a `robots.txt` file with the following contents:\r\n\r\n```txt\r\nUser-agent: *\r\nDisallow: /\r\n```\r\n\r\nOr, alternatively, this HTML tag:\r\n\r\n```html\r\n<meta name=\"robots\" content=\"noindex, nofollow\">\r\n```\r\n\r\nOr maybe we don't even need these URLs? Maybe we could simply use Vercel URLs, i.e., `sablier-beta.vercel.app`?\r\n\r\ncc @sablier-labs/frontend\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/1078, https://github.com/sablier-labs/v2-interfaces/issues/1073</div>","createdAt":"2024-10-17T11:43:08Z","labels":["topic: seo"],"number":1128,"repository":"sablier-labs/interfaces","state":"closed","title":"Make non-app subdomains like staging non-canonical","type":"issue","updatedAt":"2024-11-06T14:15:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1128"},{"author":"PaulRBerg","body":"Many users will be clueless about what streams mean, so displaying this on the landing page may not play to our advantage.\r\n\r\nIt would be better and clearer to display [the number of all-time users](https://dune.com/queries/3078530/5131228).\r\n\r\nThis issue is also relevant to https://github.com/sablier-labs/v2-interfaces/pull/1117.\r\n\r\n<img width=\"300\" alt=\"SCR-20241015-lqek\" src=\"https://github.com/user-attachments/assets/bcb62f76-84c4-497d-bcf7-68447defd761\">\r\n","createdAt":"2024-10-15T11:59:26Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1125,"repository":"sablier-labs/interfaces","state":"closed","title":"Display all-time user count instead of all-time stream count","type":"issue","updatedAt":"2024-10-17T12:24:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1125"},{"author":"razgraf","body":"To announce special behavior on some tokens we should add a warning somewhere at the top of the stream page - similar to what Coingecko does.\r\n\r\n### From Slack\r\n\r\nOkay so we've encountered a weird problem today.\r\n\r\nThere are a few streams with the [NAI](https://app.sablier.com/stream/LD2-43114-871/) token (Nuklai) which were reverting on withdraw due to 0 tokens being in  our contract. After some investigation @gavriliumircea and I figured out they have a burnFrom admin functionality [they used to burn tokens](https://snowtrace.io/tx/0x7df8c166771f5ece6836cce38406adc321c509e2d4e0859bba1975527375358f?chainid=43114) that were stored in our vesting contracts.\r\n\r\nThis is where things are annoying: are internal accounting shows the correct values (e.g. still +10% more to withdraw from the stream) but there are no actual tokens to withdraw. Meaning users bumped into a rejected transaction.\r\n\r\nMaybe this informs some interesting test-cases for our contracts, as an invariant is broken between virtual balances and actual ERC20.balanceOf\r\nWe cannot really preempt cases like this, but we've decided to add a warning in to the app in one of our future sprints for tokens with special circumstances. Similar to what Coingecko displays as warnings (2nd picture, the yellow box). This is to at least let people know something is wrong, offer a link or suggest they get in touch with the token team itself, instead of spamming our support chat.\r\n\r\n| | |\r\n| - | - |\r\n| ![Screenshot 2024-10-15 at 12 25 23](https://github.com/user-attachments/assets/2ef306dc-521d-458c-a29f-77141fe14107) | ![Screenshot 2024-10-15 at 12 28 23](https://github.com/user-attachments/assets/e6bcbe7f-bd48-4b02-8e2b-e7b7f5acf53c) |\r\n","createdAt":"2024-10-15T09:33:33Z","labels":[],"number":1124,"repository":"sablier-labs/interfaces","state":"closed","title":"Add warning box (per token) to the stream profile for specific caveats","type":"issue","updatedAt":"2024-11-12T13:25:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1124"},{"author":"PaulRBerg","body":"Context from Slack:\r\n\r\n<img width=\"400\" alt=\"SCR-20241014-mqmo\" src=\"https://github.com/user-attachments/assets/5c5b9a7a-e77e-483f-86b5-19c11407bf10\">\r\n\r\n<img width=\"300\" alt=\"SCR-20241014-mqhm\" src=\"https://github.com/user-attachments/assets/e987c6d2-d4dd-444c-9ee9-d9303c4c461c\">\r\n","createdAt":"2024-10-14T13:12:27Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1122,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove warning about 100K recipient limit","type":"issue","updatedAt":"2024-10-17T12:24:13Z","url":"https://github.com/sablier-labs/interfaces/issues/1122"},{"author":"razgraf","body":"The task is to add some context to the errors.\r\n\r\nE.g. instead of saying the \"start column doesn't match\" we can attempt to say \"... doesn't match, please make sure the format is x\". \r\n\r\nWe should also add a link to the docs page explaining CSVs in those error boxes.\r\n\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1109\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** October  8, 2024</sup>\r\nOpen-ended discussion, but I wonder if the following support inquiries couldn't have been prevented if we had displayed more specific errors when parsing the CSV files?\r\n\r\n@sablier-labs/frontend, is there any way to:\r\n\r\n1. Detect that the numbers are formatted as strings instead of numbers in the CSV, and indicate to the user that they should use a number format?\r\n2. Detect that the date format is incorrect, i.e. not `YYYY-MM-DD`, and let the user know about this?\r\n\r\n<img width=\"300\" alt=\"CSV - Double Quotes\" src=\"https://github.com/user-attachments/assets/08977663-c93c-4488-83de-937bfd04c567\">\r\n\r\n<img width=\"300\" alt=\"CSV - Date Format\" src=\"https://github.com/user-attachments/assets/c5d9b939-98ea-47d2-b019-2e8bef3e2e07\"></div>","createdAt":"2024-10-09T10:40:37Z","labels":["priority: 2"],"number":1116,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve CSV parsing errors and explain data formats","type":"issue","updatedAt":"2024-10-30T12:39:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1116"},{"author":"PaulRBerg","body":"Some chains have higher gas limits than Ethereum, e.g. Base has 60M, so it can support up to ~220 streams.\r\n\r\n[We have recently encountered a situation](https://github.com/sablier-labs/v2-interfaces/pull/1112) with a user who needed to create many batches of streams using the CSV upload feature. They couldn't use Airstreams.\r\n\r\nTo improve the UX for users like this, we should change this constant into a per-chain mapping with different values according to the block gas limit on each chain:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/9c329bf73ac471cb91f91dbbe0c6f47478af0753/packages/constants/src/macros.ts#L50","createdAt":"2024-10-08T22:54:54Z","labels":["priority: 1","effort: medium","type: perf","work: complicated"],"number":1115,"repository":"sablier-labs/interfaces","state":"closed","title":"Different hard-coded max batch size limits per chain","type":"issue","updatedAt":"2025-03-05T19:35:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1115"},{"author":"PaulRBerg","body":"We should write a new CI workflow that skips the lint job, since this is what appears to be the most time-consuming of the bunch.\r\n\r\nFor cases like this: https://github.com/sablier-labs/v2-interfaces/pull/1112\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/823\r\n- https://github.com/sablier-labs/v2-interfaces/discussions/561\r\n","createdAt":"2024-10-08T22:46:19Z","labels":["priority: 2","effort: low","type: ci"],"number":1114,"repository":"sablier-labs/interfaces","state":"closed","title":"Lint-free CI workflow for rapidly deploying a staging update to Vercel","type":"issue","updatedAt":"2024-11-12T13:25:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1114"},{"author":"PaulRBerg","body":"I don't see any reason not to ignore the empty lines in CSV.\r\n\r\nA user (Zap) encountered an issue whereby the CSV editor he used turned empty rows into empty CSV lines, which led the UI to mistakenly assumes that those empty lines should become streams.\r\n\r\n<img width=\"400\" alt=\"SCR-20241007-oerp\" src=\"https://github.com/user-attachments/assets/a88cc125-818b-4b03-bedf-9d41a44f568e\">\r\n\r\n<img width=\"400\" src=\"https://github.com/user-attachments/assets/1c61513a-da86-486d-a704-0758659f12a4\"/>\r\n","createdAt":"2024-10-07T13:08:04Z","labels":["priority: 1","effort: medium","type: perf","work: clear"],"number":1107,"repository":"sablier-labs/interfaces","state":"closed","title":"Ignore empty lines in CSV imports","type":"issue","updatedAt":"2024-10-30T12:39:30Z","url":"https://github.com/sablier-labs/interfaces/issues/1107"},{"author":"PaulRBerg","body":"I'm not sure how to do this, but we absolutely have to strengthen the wording in the Airstreams flow to better explain that Sablier provides only vested airdrops at the moment.\r\n\r\nTwo recent cases of confused users:\r\n\r\n<img width=\"506\" alt=\"SCR-20241007-mozf\" src=\"https://github.com/user-attachments/assets/7471d3b6-acf3-4c74-b14f-e542fedc5bbb\">\r\n<img width=\"454\" alt=\"SCR-20241007-mpaj\" src=\"https://github.com/user-attachments/assets/8645336f-ae06-459c-b938-d329a7d13d67\">\r\n\r\nEven Phaver, the large airdrop with 30k+ recipients, were confused by the 'limbo state':\r\n\r\n<img width=\"400\" alt=\"SCR-20241007-nfdg\" src=\"https://github.com/user-attachments/assets/1797a537-9510-4b81-a3c9-0cd76355c986\">\r\n","createdAt":"2024-10-07T11:53:39Z","labels":["priority: 1","effort: medium","type: refactor","work: complicated"],"number":1105,"repository":"sablier-labs/interfaces","state":"closed","title":"Clarify that Airstreams are vested and require multiple transactions","type":"issue","updatedAt":"2024-10-07T12:01:27Z","url":"https://github.com/sablier-labs/interfaces/issues/1105"},{"author":"PaulRBerg","body":"When the connected wallet is not the recipient, the UI displays the _History_ button in the stream profile.\r\n\r\nThis design made sense in older versions of Lockup, when only the sender or the recipient could withdraw streams. However, starting Lockup v1.2.0, withdrawals have become public. Anyone can withdraw from any stream.\r\n\r\nThus, we should bring the orange-colored _Withdraw_ button to the front and display it instead of _History_, regardless of what the connected wallet is. The only exception is the sender, in which case, the _Cancel_ button should be displayed instead.\r\n\r\ncc @sablier-labs/frontend\r\n\r\n<img width=\"350\" alt=\"SCR-20241007-lpqp\" src=\"https://github.com/user-attachments/assets/2f6341bc-cb85-4138-b60f-5850cd965286\">\r\n","createdAt":"2024-10-07T09:56:57Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1103,"repository":"sablier-labs/interfaces","state":"closed","title":"Always-on Withdraw button in the stream profile","type":"issue","updatedAt":"2024-10-07T12:10:53Z","url":"https://github.com/sablier-labs/interfaces/issues/1103"},{"author":"razgraf","body":"User asked us to support https://web3auth.io/docs/guides/rainbowkit-guide as they rely on social wallets for their recipients. Should be easy enough to integrate through Rainbow Kit.","createdAt":"2024-10-04T18:28:26Z","labels":["type: feature","priority: 3","effort: low","work: clear"],"number":1102,"repository":"sablier-labs/interfaces","state":"closed","title":"Support Web3Auth","type":"issue","updatedAt":"2025-02-04T22:07:00Z","url":"https://github.com/sablier-labs/interfaces/issues/1102"},{"author":"PaulRBerg","body":"Steps to reproduce:\r\n\r\n1. Go to a stream created with Lockup v1.2.0 or later, e.g. [#LL3-42161-435](https://app.sablier.com/stream/LL3-42161-435/)\r\n2. Connect a wallet that is neither the sender nor the recipient\r\n3. Notice that the `to` address shown in the withdraw sidebar is incorrectly set to the connected wallet, where it should be the recipient\r\n4. Notice that the user is allowed to edit the `to` address - **this shouldn't be possible**\r\n5. The withdrawal is nonetheless made to the recipient's wallet (as it should be).","createdAt":"2024-10-04T13:39:15Z","labels":["type: bug","priority: 1","work: clear"],"number":1101,"repository":"sablier-labs/interfaces","state":"closed","title":"Bugs in withdraw when the connected wallet is not the recipient","type":"issue","updatedAt":"2024-10-07T12:10:53Z","url":"https://github.com/sablier-labs/interfaces/issues/1101"},{"author":"razgraf","body":"As Paul [mentioned](https://github.com/sablier-labs/v2-interfaces/discussions/976#discussioncomment-10830960) here and in that thread as a whole, there's a bit of unwanted cognitive load between the two chain switches: the app-wide one and the search-specific one.\r\n\r\nWhile, as explained, they each serve different purposes, we could \"catch\" this special case and improve the UX a bit: \r\n- a user is already in a search tab (be it lockup, flow or drops/airstreams search)\r\n- they're searching on chain X\r\n- they change the app-wide chain to chain Y\r\n- a modal or notification (could be an action-loaded Toast) shows up asking if they want to switch their search to chain Y\r\n- if yes, the page updates to search items on chain Y","createdAt":"2024-10-03T11:26:39Z","labels":[],"number":1100,"repository":"sablier-labs/interfaces","state":"closed","title":"Show contextual modal when changing chains inside the search tab","type":"issue","updatedAt":"2024-11-12T13:31:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1100"},{"author":"razgraf","body":"For conditional rendering we started by using `condition && <Component />` in our codebase.\r\n\r\nAt some point, due to values leaking in the DOM when `condition` was assigned non-boolean values (could be from bugs or run-time particularities that escaped our TS checks) we resorted to using a more explicit `condition ? <Component /> : false` [^1]. \r\n\r\nAt some point, given @PaulRBerg pointed out some advantages e.g. more readable code with the initial version, we've reverted back to using the shorter `&&` version. But there's still the issue of non-boolean values leaking code (e.g. `0 && \"no\"` will render `0`).\r\n\r\n---\r\n\r\nRecently found an interesting thread regarding this very issue: https://x.com/tkdodo/status/1839308203861200916?s=46\r\n\r\nThe [solution](https://x.com/tkdodo/status/1839913920984678890?s=46) to these edge-cases seems to be the [no-leaked-conditional-rendering](https://eslint-react.xyz/docs/rules/no-leaked-conditional-rendering) eslint rule which enforces stricter syntax, while still allowing for the basic usage of `&&`.\r\n\r\nWe should take a moment to investigate its merits and add it to our own codebase if valuable.\r\n\r\n---\r\n\r\n[^1]: Note: `false` because of [this](https://medium.com/@ajy9581/returning-false-vs-returning-null-in-react-making-the-right-choice-9028126202f2) / [this](https://medium.com/@davidkelley87/stop-using-return-null-in-react-a2ebf08fc9cd)","createdAt":"2024-09-28T13:46:34Z","labels":[],"number":1095,"repository":"sablier-labs/interfaces","state":"open","title":"Linting rule to prevent values leaking from `value && <JSX />`","type":"issue","updatedAt":"2025-03-30T09:58:04Z","url":"https://github.com/sablier-labs/interfaces/issues/1095"},{"author":"PaulRBerg","body":"So that we can more quickly test SEO improvements, we could add a file named `bktz7fn1h3qp74aehx2cmu5kqtftvsbs.txt` at the root of the website (`sablier.com`), with the name as its content:\r\n\r\n```txt\r\nbktz7fn1h3qp74aehx2cmu5kqtftvsbs\r\n```","createdAt":"2024-09-27T17:46:43Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1092,"repository":"sablier-labs/interfaces","state":"closed","title":"Add Ahrefs file for IndexNow","type":"issue","updatedAt":"2024-10-17T12:24:14Z","url":"https://github.com/sablier-labs/interfaces/issues/1092"},{"author":"PaulRBerg","body":"It's currently low for `app.sablier.com` and many other URLs:\r\n\r\n<img width=\"300\" alt=\"SCR-20240927-lynj\" src=\"https://github.com/user-attachments/assets/d5e14e71-b39e-4292-b2fa-6269f013b1bd\">\r\n<img width=\"300\" alt=\"SCR-20240927-lyye\" src=\"https://github.com/user-attachments/assets/e5a2b6ad-4742-4786-9d34-65b582ae1afd\">\r\n\r\nSee the [PageSpeed report](https://pagespeed.web.dev/analysis/https-app-sablier-com/nsdv9kxoud?form_factor=mobile).\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/1089","createdAt":"2024-09-27T17:23:40Z","labels":["priority: 1","effort: epic","type: perf","work: complex","topic: seo"],"number":1090,"repository":"sablier-labs/interfaces","state":"open","title":"Improve Core Web Vitals score","type":"issue","updatedAt":"2025-05-18T10:43:39Z","url":"https://github.com/sablier-labs/interfaces/issues/1090"},{"author":"PaulRBerg","body":"It's possible that the recent switch to Cloudflare has caused our [Core Web Vitals score](https://search.google.com/search-console/core-web-vitals/drilldown?resource_id=sc-domain%3Asablier.com&item_key=CAMQARgD) to go down:\r\n\r\n<img width=\"870\" alt=\"SCR-20240927-lmjc\" src=\"https://github.com/user-attachments/assets/1b980623-394f-4bb4-9689-03c88c7ebba4\">\r\n","createdAt":"2024-09-27T16:48:10Z","labels":["priority: 1","effort: high","type: perf","work: complex","topic: seo"],"number":1089,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate why our Core Web Vitals scored went down","type":"issue","updatedAt":"2024-11-12T13:29:43Z","url":"https://github.com/sablier-labs/interfaces/issues/1089"},{"author":"PaulRBerg","body":"- [ ] Apply an `alt` attribute\r\n- [ ] Reduce image sizes\r\n- [ ] Use the WebP format instead of PNG\r\n\r\nSee the report generated by Ahrefs: [Image file size too large](https://app.ahrefs.com/site-audit/7006528/data-explorer?columns=pageRating%2Curl%2ChttpCode%2CcontentType%2Csize%2CloadingTime%2CincomingImage&current=26-09-2024T120143M0400&filterId=ad5863095a819f761d42b32931a29649&issueId=c64d8113-d0f4-11e7-8ed1-001e67ed4656&sorting=-size).\r\n\r\nIt appears that most of the high-res images are on the blog.\r\n\r\nP.S. this is not urgent, so @maxdesalle no need to start working on it now.","createdAt":"2024-09-27T16:44:22Z","labels":["priority: 3","effort: medium","type: perf","work: clear","topic: seo"],"number":1088,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve SEO by optimizing images","type":"issue","updatedAt":"2024-11-01T11:39:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1088"},{"author":"PaulRBerg","body":"To improve SEO, the shape creation URLs, e.g., [app.sablier.com/create](https://app.sablier.com/create/?shape=linear), should have different values in the `<h1/>` tags:\r\n\r\n<img width=\"737\" alt=\"SCR-20240927-lhtp\" src=\"https://github.com/user-attachments/assets/28ce397d-5516-4477-a764-ebc288375f9f\">\r\n\r\nThe Open Graph content and the h1 tags are all the same, which makes Google treat all URLs identically.\r\n\r\nSee the reported generated by Ahrefs: [Duplicate pages without canonical](https://app.ahrefs.com/site-audit/7006528/data-explorer?columns=pageRating%2Curl%2Ctraffic%2Cdepth%2Ccompliant%2Ccanonical%2CincomingCanonical%2ChashContent%2CduplicateContent%2Ctitle%2CmetaDescription%2Ch1&current=26-09-2024T120143M0400&filterId=f0b94dd8f12b3de78caad15a13b864b1&issueId=c64d5626-d0f4-11e7-8ed1-001e67ed4656&sorting=-hashContent).","createdAt":"2024-09-27T16:35:27Z","labels":["priority: 2","effort: low","type: perf","work: clear","topic: seo"],"number":1087,"repository":"sablier-labs/interfaces","state":"closed","title":"Differentiate shape URLs by including the shape in the H1 heading","type":"issue","updatedAt":"2024-11-12T13:27:51Z","url":"https://github.com/sablier-labs/interfaces/issues/1087"},{"author":"maxdesalle","body":"For some reason the graph of [a random Phaver stream](https://app.sablier.com/stream/LL3-8453-46397/) on Base that I took doesn't look straight.\r\n![CleanShot 2024-09-25 at 20 51 40@2x](https://github.com/user-attachments/assets/d908f2a8-44e1-40b2-80fa-5715c14e743b)\r\n","createdAt":"2024-09-26T14:27:59Z","labels":["type: bug","priority: 2"],"number":1085,"repository":"sablier-labs/interfaces","state":"closed","title":"Stream graph doesn't look straight","type":"issue","updatedAt":"2024-11-12T13:27:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1085"},{"author":"PaulRBerg","body":"To improve the UX for users who have already claimed their airstream.\r\n\r\nEspecially useful for one-time drops.","createdAt":"2024-09-24T18:47:34Z","labels":["type: feature","priority: 1","effort: low","work: clear"],"number":1083,"repository":"sablier-labs/interfaces","state":"closed","title":"Add link to stream in the airstream claim page when the result is “claim already made”.","type":"issue","updatedAt":"2024-11-12T13:27:26Z","url":"https://github.com/sablier-labs/interfaces/issues/1083"},{"author":"PaulRBerg","body":"As discussed on Slack:\r\n\r\n<img width=\"334\" alt=\"SCR-20240924-nvnx\" src=\"https://github.com/user-attachments/assets/a3ef3c91-3367-4c7a-8ee1-23ba7bbf52c1\">\r\n","createdAt":"2024-09-24T14:41:08Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1082,"repository":"sablier-labs/interfaces","state":"closed","title":"Change displayed limit to 100k recipients","type":"issue","updatedAt":"2024-09-30T08:42:38Z","url":"https://github.com/sablier-labs/interfaces/issues/1082"},{"author":"PaulRBerg","body":"Many of our pages are not getting indexed on Google. I'm not sure why. Perhaps related to the recent switch to Cloudflare, #1074, and #1073.\r\n\r\n<img width=\"500\" alt=\"SCR-20240923-jpku\" src=\"https://github.com/user-attachments/assets/51c37ada-1662-4c06-8ee0-8da9fb19695a\">.\r\n\r\n<img width=\"500\" alt=\"SCR-20240923-jpke\" src=\"https://github.com/user-attachments/assets/1016aa1c-1ead-4316-9e9e-80098b343ccd\">\r\n","createdAt":"2024-09-23T09:30:55Z","labels":["type: bug","priority: 1","stale","effort: medium","work: complicated","topic: seo"],"number":1078,"repository":"sablier-labs/interfaces","state":"closed","title":"Poor page indexing on Google","type":"issue","updatedAt":"2025-03-31T11:45:01Z","url":"https://github.com/sablier-labs/interfaces/issues/1078"},{"author":"PaulRBerg","body":"As explained on [Slack](https://sablier.slack.com/archives/CT3NXSNMS/p1726747965777579?thread_ts=1726688400.266269&cid=CT3NXSNMS), using JSON-LD schema data to treat the `blog.sablier.com` the same as `sablier.com` could improve SEO.\r\n\r\nFrom the report provided by [seositecheckup.com](https://seositecheckup.com/seo-audit/sablier.com):\r\n\r\n<img width=\"600\" alt=\"SCR-20240919-nmku\" src=\"https://github.com/user-attachments/assets/041ba5bc-1331-455d-8874-58d5904acb18\">\r\n\r\nCheck out Google's guide for [getting started with structured data](https://developers.google.com/structured-data/schema-org?hl=en).\r\n\r\nSee the docs in [NextJS](https://nextjs.org/docs/app/building-your-application/optimizing/metadata#json-ld).\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/1073","createdAt":"2024-09-19T12:16:02Z","labels":["type: feature","priority: 1","effort: medium","work: clear","topic: seo"],"number":1074,"repository":"sablier-labs/interfaces","state":"closed","title":"Structured data markup with JSON-LD schemas","type":"issue","updatedAt":"2024-11-12T13:34:38Z","url":"https://github.com/sablier-labs/interfaces/issues/1074"},{"author":"PaulRBerg","body":"As discussed on [Slack](https://sablier.slack.com/archives/C0322QL7KT9/p1726740927365249) — we want to improve SEO by using more use-case-specific terms like vesting, airdrops, payroll, etc.\r\n\r\n- [ ] Distribute keywords across important HTML tags; words from the H1 heading are rarely used in the text\r\n- [x] Update descriptions\r\n- [ ] Update keywords\r\n\r\nCheck the SEO audit report on [seositecheckup.com](https://seositecheckup.com/seo-audit/sablier.com)\r\n\r\n","createdAt":"2024-09-19T11:27:14Z","labels":["priority: 1","effort: medium","type: perf","work: complicated","topic: seo"],"number":1073,"repository":"sablier-labs/interfaces","state":"closed","title":"Further SEO improvements","type":"issue","updatedAt":"2024-11-12T13:34:11Z","url":"https://github.com/sablier-labs/interfaces/issues/1073"},{"author":"razgraf","body":"As discussed in #1064, we should:\r\n- update the [copy](https://github.com/sablier-labs/v2-interfaces/discussions/1064#discussioncomment-10658845) to \"cross multiple Sablier releases\" instead of versions\r\n- ~(pending feedback) remove the line entirely when a single version/release is selected~","createdAt":"2024-09-16T14:46:08Z","labels":[],"number":1070,"repository":"sablier-labs/interfaces","state":"closed","title":"Change details in the \"Manage List\" cover for multiple streams select","type":"issue","updatedAt":"2024-11-12T13:32:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1070"},{"author":"PaulRBerg","body":"It may be useful for simplifying our Snapshot strategies.\r\n\r\nSee [this](https://github.com/hedgey-finance/Locked_VestingTokenPlans/blob/2fdebf08ae8a453e1c7227b44bdfd9133ab4970b/contracts/LockupPlans/TokenLockupPlans.sol#L348-L361).\r\n\r\nImplementing https://github.com/sablier-labs/v2-core/issues/644 would be a prerequisite.","createdAt":"2023-08-23T08:38:00Z","labels":["type: feature","effort: epic","work: complex","priority: 3"],"number":663,"repository":"sablier-labs/lockup","state":"open","title":"Getter that aggregates the withdrawable amount across all streams","type":"issue","updatedAt":"2025-05-28T15:07:53Z","url":"https://github.com/sablier-labs/lockup/issues/663"},{"author":"waynehoover","body":"After adding `@sablier/core-v2` to my package.json I'm getting this error when I compile my contract:\r\n\r\n`File @prb/math/SD59x18.sol, imported from @sablier/v2-core/src/types/Math.sol, not found.`\r\n\r\nMy contract imports look like this:\r\n```\r\nimport { ISablierV2LockupLinear } from \"@sablier/v2-core/src/interfaces/ISablierV2LockupLinear.sol\";\r\nimport { ud60x18 } from \"@sablier/v2-core/src/types/Math.sol\";\r\nimport { Broker, LockupLinear } from \"@sablier/v2-core/src/types/DataTypes.sol\";\r\nimport { IERC20 } from \"@sablier/v2-core/src/types/Tokens.sol\";\r\n```\r\n\r\npackage.json:\r\n```\r\n...\r\n\"@sablier/v2-core\": \"^1.0.1\",\r\n...\r\n```\r\n\r\nThis is because the contracts when deployed to the @prb/math npm package are in the `src` folder as you can see here: https://www.npmjs.com/package/@prb/math?activeTab=code\r\n\r\n(the same is true for the @sablier/v2-core repo, but that's okay because I can manually add the src/ directory to imports there)\r\n\r\nSo I suppose a solution would be to move the contracts out of the src folder when deploying the package to npm, this would be backwards compatible with forge, but not with anyone including @prb/math with npm and referencing it from the src directory.\r\n\r\nIf there is a way to manually map the src folder in npm (like you can with forge's remappings.txt) that would also work, but I didn't find any solutions like that with a quick google.\r\n\r\n-Update-\r\nI was able to get this working using the [hardhat-foundry](https://hardhat.org/hardhat-runner/docs/advanced/hardhat-and-foundry) plugin and installing @prb/math the foundry way. But ideally, users should be able to use this repo without foundry.","createdAt":"2023-08-04T01:47:04Z","labels":[],"number":646,"repository":"sablier-labs/lockup","state":"closed","title":"Error when importing @prb/math packages when installed via npm","type":"issue","updatedAt":"2023-08-14T17:10:18Z","url":"https://github.com/sablier-labs/lockup/issues/646"},{"author":"waynehoover","body":"I don't see any sepolia deployment addresses in [the docs](https://docs.sablier.com/contracts/v2/deployments). Do you plan to deploy to Sepolia? Goreli has gotten expensive, and its EOL is the end of this year.","createdAt":"2023-08-02T23:10:07Z","labels":[],"number":645,"repository":"sablier-labs/lockup","state":"closed","title":"Deploy to Sepolia?","type":"issue","updatedAt":"2023-08-11T13:17:21Z","url":"https://github.com/sablier-labs/lockup/issues/645"},{"author":"PaulRBerg","body":"## Task\r\n\r\nIt may be helpful for all kinds of integration purposes to read all stream ids belonging to specific addresses. In principle, this is how this could be done:\r\n\r\n1. Add a new mapping in `LockupLinear` and `LockupDynamic` called `_streamsByUser`\r\n2. Implement a new getter `getStreamsByUser`\r\n3. When a stream is created, update both the default `_streams` mapping, as well as the `_streamsByUser` mapping\r\n4. Update all tests that check the `_streams` mapping to also check the `_streamsByUser` mapping\r\n\r\nThis feature wouldn't classify streams by status, but it would still be helpful.\r\n\r\n## Notes\r\n\r\n- It might be worth looking at OpenZeppelin's [`ERC721Enumerable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8186c07a83c09046c6fbaa90a035ee47e4d7d785/contracts/token/ERC721/extensions/ERC721Enumerable.sol#L17C19-L17C35) in case their [`tokenOfOwnerByIndex`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8186c07a83c09046c6fbaa90a035ee47e4d7d785/contracts/token/ERC721/extensions/ERC721Enumerable.sol#L46) function would help\r\n- @andreivladbrg has implemented something similar in our [Allo V2 integration](https://github.com/allo-protocol/allo-v2/blob/7d83ff18cb052d1e1b19dfba2c207ebae600adfe/contracts/strategies/sablier-v2/LockupLinearStrategy.sol#L54).","createdAt":"2023-08-02T18:14:26Z","labels":[],"number":644,"repository":"sablier-labs/lockup","state":"closed","title":"Reverse mapping that indexes stream ids by user address","type":"issue","updatedAt":"2023-09-15T08:08:45Z","url":"https://github.com/sablier-labs/lockup/issues/644"},{"author":"PaulRBerg","body":"## Task\r\n\r\nEdit the sidelines to add the total amount next to the token currency.\r\n\r\nThat is, instead of \"EXA\", it should say \"1.2k EXA\".\r\n\r\n## Context\r\n\r\nRequested by Exactly Protocol:\r\n\r\n<img width=\"300\" alt=\"SCR-20230725-qlmr\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/985c6b58-dda8-4a76-a27d-f4b09d670763\">\r\n","createdAt":"2023-07-25T15:53:52Z","labels":[],"number":638,"repository":"sablier-labs/lockup","state":"closed","title":"Add total amount in NFT descriptor cards","type":"issue","updatedAt":"2023-09-25T08:46:23Z","url":"https://github.com/sablier-labs/lockup/issues/638"},{"author":"sambacha","body":"https://github.com/sablier-labs/v2-core/blob/e7d427378582779c9b7a5ede44176323928e9571/test/utils/Utils.sol#L58-L61\r\n\r\nfoundry-rs codebase treats default config as “default” not an empty string.\r\n\r\n","createdAt":"2023-07-25T07:08:51Z","labels":[],"number":636,"repository":"sablier-labs/lockup","state":"closed","title":"Foundry Profile with Empty String should be “true” ","type":"issue","updatedAt":"2023-07-25T18:05:13Z","url":"https://github.com/sablier-labs/lockup/issues/636"},{"author":"PaulRBerg","body":"Requiring users to install OpenZeppelin v4.9.2 may clash with the user's installation of OpenZeppelin.\r\n\r\nWe technically only depend upon the `IERC20` interface, which should be the same across all OpenZeppelin V4/ V5 releases? 🧐","createdAt":"2023-07-23T17:45:13Z","labels":[],"number":635,"repository":"sablier-labs/lockup","state":"closed","title":"Check if OpenZeppelin can be removed from peer dependencies","type":"issue","updatedAt":"2023-10-02T12:24:30Z","url":"https://github.com/sablier-labs/lockup/issues/635"},{"author":"PaulRBerg","body":"Some users may prefer the stream NFTs to not be transferrable.\r\n\r\nTo enable this functionality, we need to add `transferrable` boolean flag in the create stream parameter structs in [`DataTypes`](https://github.com/sablier-labs/v2-core/blob/3df030516c7e9044742313c7cf17f15fdc1e9b05/src/types/DataTypes.sol).\r\n\r\nRelated: [Gabriel Shapiro's tweet](https://twitter.com/lex_node/status/1537840850377449472).","createdAt":"2023-07-21T21:41:56Z","labels":[],"number":630,"repository":"sablier-labs/lockup","state":"closed","title":"Add \"transferrable\" boolean flag in create stream parameter structs","type":"issue","updatedAt":"2023-08-31T09:57:22Z","url":"https://github.com/sablier-labs/lockup/issues/630"},{"author":"PaulRBerg","body":"Add a new function called `withdrawMultipleMax` that loops over a user-provided array of streams and calls [`withdrawMax`](https://github.com/sablier-labs/v2-core/blob/3df030516c7e9044742313c7cf17f15fdc1e9b05/src/abstracts/SablierV2Lockup.sol#L248) on each stream.\r\n\r\nThe goal is to enable recipients to exit all of their current streams. Particularly useful for integrations with aggregators like Zapper.","createdAt":"2023-07-21T21:35:34Z","labels":["type: feature","effort: high","work: clear","priority: 3"],"number":629,"repository":"sablier-labs/lockup","state":"closed","title":"Add \"withdrawMultipleMax\" function","type":"issue","updatedAt":"2024-01-09T16:53:07Z","url":"https://github.com/sablier-labs/lockup/issues/629"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/foundry-rs/forge-std/pull/400\r\n- https://github.com/foundry-rs/foundry/pull/4884\r\n- https://github.com/foundry-rs/foundry/issues/4875\r\n- https://github.com/foundry-rs/foundry/pull/4884#issuecomment-1536569879\r\n","createdAt":"2023-07-20T17:25:19Z","labels":["good first issue","type: test","effort: low","work: clear","priority: 3"],"number":628,"repository":"sablier-labs/lockup","state":"closed","title":"Add utility for changing the protocol fee which uses the newly introduced \"readCallers\" cheat","type":"issue","updatedAt":"2024-03-08T11:17:32Z","url":"https://github.com/sablier-labs/lockup/issues/628"},{"author":"allwin199","body":"Creating an `issue template` will give directions while reporting an issue.\r\n\r\nI would like to create this `issue_template` if it is necessary.\r\n\r\n","createdAt":"2023-07-17T06:22:10Z","labels":[],"number":623,"repository":"sablier-labs/lockup","state":"closed","title":"Create Issue Template","type":"issue","updatedAt":"2023-07-19T17:22:55Z","url":"https://github.com/sablier-labs/lockup/issues/623"},{"author":"allwin199","body":"`CONTRIBUTING.md` file should be mentioned in `README.md` to give directions for contributions.\r\n\r\nIf this has to be added, I would like to work on this.","createdAt":"2023-07-17T06:11:53Z","labels":[],"number":622,"repository":"sablier-labs/lockup","state":"closed","title":"No info about contribution in README.md","type":"issue","updatedAt":"2023-07-20T08:11:19Z","url":"https://github.com/sablier-labs/lockup/issues/622"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nCopy-pasting @DrakeEvans's feedback from a private chat on Telegram:\r\n\r\n> I mostly see the \"when\" keyword on the branching tree here, do you differentiate between a given state and action in the `.tree` files?  I typically think of tests in the Arrange, Act, Assert phases which correlate to Given, When, Then in Cucumber style notation.  But it looks like you are combining the current state of the system and the current action into a single statement like \"when the admin is not the same as the current admin\" (line 8).  I think this is a little confusing (or at least it was to me on the first read) because it's not clear in which instances we are talking about function arguments and where we are talking about the state of the system without context clues.  And admittedly this situation wasn't too hard to parse.\r\n>\r\n> Looking at [`transferAdmin`](https://github.com/sablier-labs/v2-core/blob/main/test/unit/concrete/adminable/transfer-admin/transferAdmin.tree):\r\n>\r\n> - On line 2, \"the admin\" refers to the currently set admin (state of the system)\r\n> - On line 8, \"the admin\" refers to the function parameter, and \"current admin\" is referring to the state of the system\r\n>\r\n> To be clear I really like the branching idea for keeping the information DRY, but I wonder if there is a way to make it slightly more explicit without the need for a full description of the prior state which can be verbose.  Some way to delineate between how the action takes place and the current state prior to an action\r\n\r\nDrake is absolutely right - our tree terminology commingles the current state (contract state) with the current action (function arguments). It would be helpful to draw a distinction between the two\r\n\r\n## Potential Solution\r\n\r\nFollow Cucumber's [Gherkin](https://cucumber.io/docs/gherkin/) syntax and replace \"when\" with \"given\" for the tree nodes that refer to the contract state.\r\n\r\n## Related\r\n\r\n- ETHDenver talk: [Better Smart Contracts with Behavior-Driven Development](https://www.youtube.com/watch?v=T70txXsSxig)","createdAt":"2023-07-15T19:52:29Z","labels":[],"number":621,"repository":"sablier-labs/lockup","state":"closed","title":"Separate current state from current action in Branching Trees","type":"issue","updatedAt":"2023-08-23T19:52:41Z","url":"https://github.com/sablier-labs/lockup/issues/621"},{"author":"PaulRBerg","body":"As per the discussion with Matt in https://github.com/sablier-labs/v2-core/discussions/603.\r\n\r\n- [x] [`flashFee`](https://github.com/sablier-labs/v2-core/blob/f742cf602d9adee31942f64d1cbab2dc51c405eb/test/integration/concrete/comptroller/flash-fee/flashFee.t.sol)\r\n- [x] [`setFlashFee`](https://github.com/sablier-labs/v2-core/blob/main/test/integration/concrete/comptroller/set-flash-fee/setFlashFee.t.sol)","createdAt":"2023-07-15T16:27:34Z","labels":[],"number":620,"repository":"sablier-labs/lockup","state":"closed","title":"Convert integration tests to unit tests","type":"issue","updatedAt":"2023-07-23T10:07:23Z","url":"https://github.com/sablier-labs/lockup/issues/620"},{"author":"maxdesalle","body":"One thing which would really help with integrations on Arbitrum, a potential one being with DeFrag, would be to have the protocol on the Arbitrum Goerli testnet.","createdAt":"2023-07-14T20:44:40Z","labels":[],"number":619,"repository":"sablier-labs/lockup","state":"closed","title":"Deploy Sablier V2 on the Arbitrum Goerli testnet","type":"issue","updatedAt":"2023-07-15T16:27:47Z","url":"https://github.com/sablier-labs/lockup/issues/619"},{"author":"PaulRBerg","body":"See this CI workflow run:\r\n\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/5521040705/jobs/10068674893\r\n\r\nThe error was:\r\n\r\n> Expected an emit, but the call reverted instead. Ensure you're testing the happy path when using the `expectEmit` cheatcode\r\n\r\nThe issue is probably related to the recent breaking changes in Foundry.\r\n","createdAt":"2023-07-13T21:09:11Z","labels":[],"number":618,"repository":"sablier-labs/lockup","state":"closed","title":"Fix \"expectEmit\" in fork tests","type":"issue","updatedAt":"2023-08-23T17:29:52Z","url":"https://github.com/sablier-labs/lockup/issues/618"},{"author":"PaulRBerg","body":"The `tokenURI` should return a base64-encoded string prefixed by the following here, but it doesn't:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/4b0e06328462e6dfc867b2a342c8c0d811ed48a0/src/SablierV2NFTDescriptor.sol#L105\r\n\r\nOur implementation includes the data URI syntax in the base64-encode string itself.\r\n\r\nUniswap does it correctly:\r\n\r\nhttps://github.com/Uniswap/v3-periphery/blob/6cce88e63e176af1ddb6cc56e029110289622317/contracts/libraries/NFTDescriptor.sol#L62-L83\r\n\r\nFor more detail, see https://en.wikipedia.org/wiki/Data_URI_scheme","createdAt":"2023-07-13T13:16:48Z","labels":[],"number":616,"repository":"sablier-labs/lockup","state":"closed","title":"Token URI not compliant with data URI scheme","type":"issue","updatedAt":"2023-07-13T14:23:00Z","url":"https://github.com/sablier-labs/lockup/issues/616"},{"author":"PaulRBerg","body":"As per Matt's recommendation in https://github.com/sablier-labs/v2-core/discussions/604.","createdAt":"2023-07-11T13:49:44Z","labels":[],"number":613,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"unit\" to \"concrete\"","type":"issue","updatedAt":"2023-07-13T11:11:43Z","url":"https://github.com/sablier-labs/lockup/issues/613"},{"author":"PaulRBerg","body":"Foundry V1 will get shipped soon:\r\n\r\n<img width=\"340\" alt=\"SCR-20230711-osxv\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/0e9e7418-e24d-472c-949c-8c6521989821\">\r\n\r\nOnce that is done, we should freeze the version to V1 in the CI workflows.","createdAt":"2023-07-11T13:45:45Z","labels":[],"number":612,"repository":"sablier-labs/lockup","state":"closed","title":"Freeze Foundry V1 in CI","type":"issue","updatedAt":"2023-11-23T15:58:25Z","url":"https://github.com/sablier-labs/lockup/issues/612"},{"author":"PaulRBerg","body":"- [x] Add missing backtick [here](https://github.com/sablier-labs/v2-core/blob/3df030516c7e9044742313c7cf17f15fdc1e9b05/src/interfaces/ISablierV2LockupLinear.sol#L87)\r\n- [x] Capitalize \"lockup\" in \"lockup streaming\" and \"lockup streams\", i.e., say \"Lockup Streaming\" and \"Lockup Streams\"","createdAt":"2023-07-08T18:40:14Z","labels":[],"number":611,"repository":"sablier-labs/lockup","state":"closed","title":"Documentation nitpicks","type":"issue","updatedAt":"2023-08-23T09:01:13Z","url":"https://github.com/sablier-labs/lockup/issues/611"},{"author":"PaulRBerg","body":"This is @IaroslavMazur's recommendation:\r\n\r\n>  the `isCold()` function definition could be moved up the hierarchy tree to `SablierV2Lockup`.\r\n\r\nContext:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/412ec3d3998a766507de96afdb26c797d2ae491d/src/SablierV2LockupLinear.sol#L172-L176\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/412ec3d3998a766507de96afdb26c797d2ae491d/src/SablierV2LockupLinear.sol#L194-L198","createdAt":"2023-07-07T15:45:27Z","labels":[],"number":610,"repository":"sablier-labs/lockup","state":"closed","title":"Move \"isWarm\" and \"isCold\" to \"SablierV2Lockup\"","type":"issue","updatedAt":"2023-08-23T17:28:45Z","url":"https://github.com/sablier-labs/lockup/issues/610"},{"author":"PaulRBerg","body":"As noted by @IaroslavMazur:\r\n\r\n> `vars.asset` is converted from address to `IERC20Metadata` at its initialization, and back to `address` - each time it’s accessed afterwards. The `asset` member could just be kept as an `address` to simplify things.\r\n\r\nContext:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/412ec3d3998a766507de96afdb26c797d2ae491d/src/SablierV2NFTDescriptor.sol#L50","createdAt":"2023-07-07T15:25:32Z","labels":[],"number":608,"repository":"sablier-labs/lockup","state":"closed","title":"Define \"vars.asset\" as \"address\" in NFT descriptor","type":"issue","updatedAt":"2023-07-13T14:23:00Z","url":"https://github.com/sablier-labs/lockup/issues/608"},{"author":"PaulRBerg","body":"As noted by @IaroslavMazur:\r\n\r\n> `vars.sablierAddress` isn’t used after its definition, even though there are 2 places further in the function where this would be very suitable.\r\n\r\nContext:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/412ec3d3998a766507de96afdb26c797d2ae491d/src/SablierV2NFTDescriptor.sol#L49","createdAt":"2023-07-07T15:21:11Z","labels":[],"number":607,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"vars.sablierAddress\" in NFT descriptor","type":"issue","updatedAt":"2023-07-13T14:23:01Z","url":"https://github.com/sablier-labs/lockup/issues/607"},{"author":"PaulRBerg","body":"The fork tests are currently run against a single chain.\r\n\r\nRef: https://github.com/foundry-rs/book/issues/872","createdAt":"2023-07-02T18:52:44Z","labels":["effort: epic","type: test","work: complicated","priority: 3"],"number":599,"repository":"sablier-labs/lockup","state":"closed","title":"Run fork tests on multiple chains","type":"issue","updatedAt":"2024-04-10T14:26:21Z","url":"https://github.com/sablier-labs/lockup/issues/599"},{"author":"PaulRBerg","body":"During a recent [deployment](https://github.com/sablier-labs/v2-core/actions/runs/5422199478), I noticed that the \"Settings\" section on Etherscan reports a lot of remappings that have nothing to do with V2 Core:\r\n\r\n<img width=\"618\" alt=\"Screenshot 2023-08-23 at 10 29 57 AM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/5c5323da-b155-4ef7-980a-6070198c9cde\">\r\n\r\nThis is strange because some of those remappings reference dependencies that are not longer used by V2 Core (e.g. `@prb/contracts`), and others whichthat have never been part of V2 Core (e.g. `@prb/proxy`).\r\n\r\nPotential explanations:\r\n\r\n1. Etherscan caching bug\r\n2. Forge caching bug (Forge's state is somehow persistent across different workflow runs, including across different repos)","createdAt":"2023-06-30T11:19:45Z","labels":["work: complex","type: chore","priority: 3","effort: medium"],"number":585,"repository":"sablier-labs/lockup","state":"closed","title":"Investigate why these remappings appear on the Etherscan verification reports","type":"issue","updatedAt":"2024-03-08T11:17:19Z","url":"https://github.com/sablier-labs/lockup/issues/585"},{"author":"PaulRBerg","body":"- [x] Double-check README and wikis\r\n- [x] Make the repo public\r\n- [x] Regenerate gas snapshot\r\n- [x] Run deep fuzzing in CI","createdAt":"2023-06-24T09:26:13Z","labels":[],"number":577,"repository":"sablier-labs/lockup","state":"closed","title":"Chores to do before mainnet","type":"issue","updatedAt":"2023-06-30T15:32:05Z","url":"https://github.com/sablier-labs/lockup/issues/577"},{"author":"PaulRBerg","body":"Once we make this repo public, we will want to pass the `--verify` flag to all deployment scripts under `.github/workflows` so that their source code gets verified automatically on Etherscan.","createdAt":"2023-06-23T20:19:11Z","labels":[],"number":576,"repository":"sablier-labs/lockup","state":"closed","title":"Add \"--verify\" flag to all deployment scripts","type":"issue","updatedAt":"2023-06-24T22:15:21Z","url":"https://github.com/sablier-labs/lockup/issues/576"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n- Run one of the GitHub Actions workflow for deploying a contract\r\n- Want to use a different deployer from the current `MNEMONIC` stored in the repo secrets\r\n\r\n## Solution\r\n\r\nModify the CI workflows to accept a `mnemonic` argument that takes priority over the GitHub secrets (the latter would become the default).","createdAt":"2023-06-23T20:16:23Z","labels":[],"number":575,"repository":"sablier-labs/lockup","state":"closed","title":"Rewrite CI workflows to accept a \"mnemonic\" argument that takes priority over GitHub secrets","type":"issue","updatedAt":"2023-06-29T18:34:17Z","url":"https://github.com/sablier-labs/lockup/issues/575"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nPR #560 has increased the size of the `NFTDescriptor` contract over the limit allowed by Ethereum:\r\n\r\n> `SablierV2NFTDescriptor` is above the EIP-170 contract size limit (24798 > 24576).\r\n\r\nSee this CI run:\r\n\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/5359095389/jobs/9722240961\r\n\r\n## Solution\r\n\r\nLower the number of optimizer runs.","createdAt":"2023-06-23T17:54:42Z","labels":[],"number":570,"repository":"sablier-labs/lockup","state":"closed","title":"Lower size of NFT descriptor","type":"issue","updatedAt":"2023-06-28T04:37:33Z","url":"https://github.com/sablier-labs/lockup/issues/570"},{"author":"PaulRBerg","body":"Unit tests are failing locally (after merging, but they are \"passing\" in CI because of a misconfigured path passed to `--match-path`:\r\n\r\n```text\r\nNo tests match the provided pattern:\r\n\tmatch-path: `test/unit`\r\n```\r\n\r\nSee, for example, this CI run:\r\n\r\nhttps://github.com/sablier-labs/v2-core/actions/runs/5356164761/jobs/9715422247\r\n\r\nThe solution is to change the path to:\r\n\r\n```text\r\ntest/unit/**/*.sol\r\n```","createdAt":"2023-06-23T15:59:05Z","labels":[],"number":566,"repository":"sablier-labs/lockup","state":"closed","title":"Unit tests are not running in CI","type":"issue","updatedAt":"2023-06-23T16:29:41Z","url":"https://github.com/sablier-labs/lockup/issues/566"},{"author":"PaulRBerg","body":"The \"asset\" is a more helpful filter than \"funder\":\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/492e400d6f04eb523ef8b78522323f69f4ede105/src/interfaces/ISablierV2LockupLinear.sol#L28-L38","createdAt":"2023-06-23T15:35:00Z","labels":[],"number":565,"repository":"sablier-labs/lockup","state":"closed","title":"Make the \"asset\" the \"indexed\" parameter in the create events","type":"issue","updatedAt":"2023-06-27T06:07:26Z","url":"https://github.com/sablier-labs/lockup/issues/565"},{"author":"PaulRBerg","body":"We merged https://github.com/sablier-labs/v2-core/pull/560 without adding a new unit test here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/492e400d6f04eb523ef8b78522323f69f4ede105/test/unit/basic/nft-descriptor/generateSVG.t.sol","createdAt":"2023-06-23T14:03:29Z","labels":[],"number":563,"repository":"sablier-labs/lockup","state":"closed","title":"Add unit tests \"generateSVG\" when the status is \"DEPLETED\"","type":"issue","updatedAt":"2023-06-23T17:44:24Z","url":"https://github.com/sablier-labs/lockup/issues/563"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-core/discussions/558.","createdAt":"2023-06-21T20:32:31Z","labels":[],"number":559,"repository":"sablier-labs/lockup","state":"closed","title":"Provide \"withdrawMaxAndTransferFrom\" functionality","type":"issue","updatedAt":"2023-06-27T09:18:45Z","url":"https://github.com/sablier-labs/lockup/issues/559"},{"author":"odyslam","body":"https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/wiki/Tests.md#L3-L4","createdAt":"2023-06-18T12:12:54Z","labels":[],"number":553,"repository":"sablier-labs/lockup","state":"closed","title":"Wording: There are 4 categories of tests","type":"issue","updatedAt":"2023-06-18T13:06:15Z","url":"https://github.com/sablier-labs/lockup/issues/553"},{"author":"PaulRBerg","body":"We should emit [ERC-4906](https://eips.ethereum.org/EIPS/eip-4906) events to provide on-chain updates for the critical state-changing milestones that Sablier streams go through:\r\n\r\n1. Depletions (on last withdrawal)\r\n2. Cancelations\r\n\r\nAgain: this would not fully address the problem at hand (having to update the NFT metadata continuously), but it would provide signals to all NFT marketplaces that something important happened to the NFT image, forcing them to update the SVG.","createdAt":"2023-06-14T12:58:41Z","labels":[],"number":549,"repository":"sablier-labs/lockup","state":"closed","title":"Emit ERC-4906 events to refresh NFT metadata","type":"issue","updatedAt":"2023-06-28T12:49:08Z","url":"https://github.com/sablier-labs/lockup/issues/549"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/solhint-community/solhint-community\r\n- https://github.com/PaulRBerg/foundry-template/pull/25\r\n- https://twitter.com/PaulRBerg/status/1666753482609553408","createdAt":"2023-06-14T10:34:11Z","labels":[],"number":548,"repository":"sablier-labs/lockup","state":"closed","title":"Switch to `solhint-community` to get warnings for unused imports","type":"issue","updatedAt":"2023-06-28T10:50:29Z","url":"https://github.com/sablier-labs/lockup/issues/548"},{"author":"PaulRBerg","body":"We should limit the number of characters we accept in the ERC-20 asset symbols loaded in the SVG so that the possibility of cross-site scripting (XSS) is avoided:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/src/SablierV2NFTDescriptor.sol#L316-L325\r\n\r\nIt remains to be decided what a good value would be for this limit. We wouldn't want to degrade the user experience for LP tokens, e.g. [`yvmusd3CRV`](https://etherscan.io/token/0x0fcdaedfb8a7dfda2e9838564c5a1665d856afdf).\r\n\r\nA good compromise might be to truncate the first ~10 characters.","createdAt":"2023-06-13T08:14:47Z","labels":[],"number":546,"repository":"sablier-labs/lockup","state":"closed","title":"Limit number of characters allowed in `safeAssetSymbol`","type":"issue","updatedAt":"2023-06-28T10:04:44Z","url":"https://github.com/sablier-labs/lockup/issues/546"},{"author":"PaulRBerg","body":"We are currently disclosing the custom chain deployments as messages in Telegram chat groups. We lack a professional pricing page. I think it would be helpful to provide one — so that the pricing is clearer and more transparent to users.\r\n\r\ncc @sablier-labs/business","createdAt":"2024-09-12T15:21:12Z","labels":["type: feature","priority: 1","effort: high","work: clear"],"number":1065,"repository":"sablier-labs/interfaces","state":"closed","title":"Pricing page for custom chain deployments","type":"issue","updatedAt":"2024-09-12T15:58:45Z","url":"https://github.com/sablier-labs/interfaces/issues/1065"},{"author":"PaulRBerg","body":"We now have a trademark for the Sablier logo. We should mention this on our landing pages.\r\n\r\n<img width=\"400\" alt=\"SCR-20240902-olrt\" src=\"https://github.com/user-attachments/assets/4eda0d33-607b-40b9-8985-9988217238c3\">\r\n","createdAt":"2024-09-02T13:48:00Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1059,"repository":"sablier-labs/interfaces","state":"closed","title":"Mention trademark on landing page","type":"issue","updatedAt":"2024-11-12T13:44:25Z","url":"https://github.com/sablier-labs/interfaces/issues/1059"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1038\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** August  2, 2024</sup>\r\nHere:\r\n\r\n<img width=\"300\" alt=\"SCR-20240802-rzet\" src=\"https://github.com/user-attachments/assets/fb807af6-f13b-430d-8f0a-ffe5712dfecd\">\r\n\r\nIt's not like the users will know what to do with the IDs.\r\n\r\ncc @sablier-labs/frontend</div>","createdAt":"2024-09-02T11:11:35Z","labels":["priority: 2","effort: low","type: style"],"number":1058,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove stream identifiers from group confirmation message","type":"issue","updatedAt":"2024-11-12T13:36:56Z","url":"https://github.com/sablier-labs/interfaces/issues/1058"},{"author":"PaulRBerg","body":"The task is to add support for IoTeX in our chain list. \r\n\r\n- [x] Deploy subgraph\r\n- [x] Add tracking in the backend\r\n- [x] Add the network to the app","createdAt":"2024-08-26T11:52:16Z","labels":["type: feature","priority: 0"],"number":1055,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for IoTeX in the client app (paid customer)","type":"issue","updatedAt":"2024-08-28T09:11:18Z","url":"https://github.com/sablier-labs/interfaces/issues/1055"},{"author":"razgraf","body":"Task is to add support for Linea in our chain list. \r\n- [x] deploy subgraph\r\n- [x] add tracking in the backend\r\n- [x] add the network to the app","createdAt":"2024-08-21T11:01:25Z","labels":[],"number":1051,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for Linea in the client app","type":"issue","updatedAt":"2024-08-28T09:11:08Z","url":"https://github.com/sablier-labs/interfaces/issues/1051"},{"author":"razgraf","body":"Context: https://x.com/mattpocockuk/status/1821926395380986219?s=46","createdAt":"2024-08-21T09:14:09Z","labels":[],"number":1050,"repository":"sablier-labs/interfaces","state":"closed","title":"Look for places to use the `string & {}` TS hack","type":"issue","updatedAt":"2024-11-04T12:41:03Z","url":"https://github.com/sablier-labs/interfaces/issues/1050"},{"author":"razgraf","body":"Add a note in the CSV upload areas (group and airstreams) about amounts being in humanized notations (no decimal padding required).","createdAt":"2024-08-20T16:31:59Z","labels":["type: docs"],"number":1048,"repository":"sablier-labs/interfaces","state":"closed","title":"Add note about amounts being in normal/humanized notation in CSVs","type":"issue","updatedAt":"2024-11-04T12:41:48Z","url":"https://github.com/sablier-labs/interfaces/issues/1048"},{"author":"razgraf","body":"Looks like RainbowKit is stopping development on their web3 wallet wrapper?\r\n\r\n<img width=\"862\" alt=\"Screenshot 2024-08-15 at 13 56 26\" src=\"https://github.com/user-attachments/assets/80c64462-e8f2-49ec-b124-77c51a95032b\">\r\n","createdAt":"2024-08-15T10:57:30Z","labels":["backlog","priority: 2","effort: medium","type: refactor","work: complex"],"number":1047,"repository":"sablier-labs/interfaces","state":"open","title":"Switch RainbowKit to Web3Modal","type":"issue","updatedAt":"2025-05-12T08:40:15Z","url":"https://github.com/sablier-labs/interfaces/issues/1047"},{"author":"razgraf","body":"Viem is not wonderful when it comes to explaining why transactions fail. We usually get a stack-trace that we have to plug into Tenderly manually and simulate the transaction with it.\r\n\r\n![Screenshot 2024-08-15 at 11 48 49](https://github.com/user-attachments/assets/88dd683a-44cc-4513-b876-dba65cba20ad)\r\n\r\nWe should research ways to improve the debugging UX for us and our users.\r\n\r\nOne solution would be to check the [Signature Database](https://openchain.xyz/signatures?query=0xfd428661), but that's usually not working (signatures are missing for custom errors on newer contracts).\r\n\r\nAnother would be to integrate the Tenderly Simulation API directly in the app. It could be as a button or as a link (visual and in our logs) users could share with us on Discord. The link would probably also show up on Sentry, making debugging a little bit easier.\r\n\r\nhttps://docs.tenderly.co/simulations/single-simulations#simulate-via-api\r\n\r\n... or figure out the URL schema for the Tenderly Dashboard to make it easier for us to open the URL with pre-filled params\r\n","createdAt":"2024-08-15T08:54:57Z","labels":["type: feature","priority: 2","effort: medium"],"number":1046,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate Tenderly simulations into the app","type":"issue","updatedAt":"2024-08-30T14:54:34Z","url":"https://github.com/sablier-labs/interfaces/issues/1046"},{"author":"razgraf","body":"For the zkSync demo, temporary support for zkSync Sepolia would be helpful.\r\n\r\nThe task is to:\r\n- [x] create and deploy a zkSync Sepolia subgraph\r\n- [x] add support for zkSync Sepolia in the merkle-tracker\r\n- [x] add zkSync Sepolia in the app","createdAt":"2024-08-12T08:13:59Z","labels":["type: feature","effort: medium"],"number":1044,"repository":"sablier-labs/interfaces","state":"closed","title":"Add temporary support to zkSync Sepolia","type":"issue","updatedAt":"2024-08-30T15:00:09Z","url":"https://github.com/sablier-labs/interfaces/issues/1044"},{"author":"razgraf","body":"The task is to add a link to our docs and a few words about the possible templates we offer for the streams-CSV upload. A potential implementation was suggested in[ this comment](https://github.com/sablier-labs/v2-interfaces/discussions/1030#discussioncomment-10230221) (using the first row of the CSV, pushing the header and contents below).\r\n\r\nNote: the new system should be backwards compatible with the old templates (meaning we should also digest templates without the note on the first line)\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1030","createdAt":"2024-08-04T11:09:24Z","labels":[],"number":1039,"repository":"sablier-labs/interfaces","state":"closed","title":"Add link to docs in the CSV templates","type":"issue","updatedAt":"2024-08-30T14:54:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1039"},{"author":"PaulRBerg","body":"This happens in the create stream group via CSV - notice how the first row does not show up depending on the scrolling position:\r\n\r\nhttps://github.com/user-attachments/assets/6cf4a6b0-c59b-4367-bd68-0995d07cf6ac\r\n\r\n","createdAt":"2024-08-02T17:39:52Z","labels":["type: bug","priority: 2"],"number":1037,"repository":"sablier-labs/interfaces","state":"closed","title":"First stream loaded via CSV does not show up depending on the scrolling position","type":"issue","updatedAt":"2024-08-27T19:18:42Z","url":"https://github.com/sablier-labs/interfaces/issues/1037"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/1034\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** August  2, 2024</sup>\r\nThis label possibly creates confusion:\r\n\r\n<img width=\"350\" alt=\"SCR-20240802-mbnt\" src=\"https://github.com/user-attachments/assets/1f70024b-f6ff-4e76-8d03-cc2a3a07de53\">\r\n\r\nIt should be added only when the number of streams >= 2\r\n\r\ncc @sablier-labs/frontend</div>","createdAt":"2024-08-02T14:52:01Z","labels":[],"number":1036,"repository":"sablier-labs/interfaces","state":"closed","title":"Hide \"Group of 1\" for single streams","type":"issue","updatedAt":"2024-08-27T19:18:42Z","url":"https://github.com/sablier-labs/interfaces/issues/1036"},{"author":"PaulRBerg","body":"## Bug\r\n\r\nI don't have any injected wallet (MetaMask, Rabby, etc.) and the Sablier UI doesn't provide me with any wallet connection option, not even WalletConnect:\r\n\r\n<img width=\"400\" alt=\"SCR-20240802-mdyw\" src=\"https://github.com/user-attachments/assets/f12a93a9-5202-4ee8-a39e-a9448372438c\">\r\n\r\n## Environment\r\n\r\n- macOS 14.5\r\n- Arc v1.15.3","createdAt":"2024-08-02T10:40:29Z","labels":["type: bug","priority: 0"],"number":1035,"repository":"sablier-labs/interfaces","state":"closed","title":"Zero wallet connection options","type":"issue","updatedAt":"2024-08-02T14:25:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1035"},{"author":"razgraf","body":"Weave reported a weird bug a couple of days ago, which we haven't been able to reproduce:\r\n\r\n| 1 | 2 | \r\n| -- | -- | \r\n|  ![IMG_0985](https://github.com/user-attachments/assets/3e591bf4-8669-4f64-9a83-c322a9789f7a) | ![IMG_0983](https://github.com/user-attachments/assets/5be1c588-b677-446e-99db-316051f8c0f9) |\r\n\r\nRecently PRB had this problem himself:\r\n\r\n- https://www.loom.com/share/76279775f31b4c37bbb65b9d15ec2830\r\n- | 1 | 2 | 3 |\r\n  | --- | --- | --- |\r\n  | ![SCR-20240802-ltul](https://github.com/user-attachments/assets/4a7681d0-2f33-4f3c-b985-59c989701b65) | ![SCR-20240802-lufm](https://github.com/user-attachments/assets/3ad916a2-d06a-4622-9c98-4aa28150c36c) | ![Screenshot 2024-08-02 at 13 16 32](https://github.com/user-attachments/assets/5c48a813-af4d-499c-9fc8-ea185bcaa463) |\r\n\r\nIt looks like instead of using the Safe connector, wagmi connects to the in-browser wallet - in Paul's case the address he connected with in the safe-sablier interface is his EOA not the Safe.\r\n\r\n","createdAt":"2024-08-02T10:25:02Z","labels":["type: bug","priority: 0"],"number":1033,"repository":"sablier-labs/interfaces","state":"closed","title":"Safe connector not prioritized in Safe (EOA connects instead)","type":"issue","updatedAt":"2024-08-02T14:25:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1033"},{"author":"PaulRBerg","body":"The current UX for uploading a CSV file that uses ranges isn't great:\r\n\r\n- User leaves the timing set to \"Duration\" (default)\r\n- User sets ranges in the CSV\r\n- User uploads CSV\r\n- User gets this error\r\n\r\n> Warning: the number of columns (4) isn't correct (expected 3)\r\n>\r\n> The provided data isn't valid. Please check the template and fix the errors.\r\n\r\nThe error is misleading because:\r\n\r\n1. The number of columns is correct *for the ranged timing type*\r\n2. The user is not informed that they have to toggle the timing type from \"Duration\" to \"Range\"\r\n\r\nTo improve the UX, we should either:\r\n\r\n1. Automatically toggle the timing type to \"Range\" (and vice versa)\r\n2. Change the error to be more specific and guide the user to toggle the timing type|\r\n\r\nOption 1 is clearly better, and I would go with it if it's not super difficult to implement.\r\n\r\n<img width=\"400\" alt=\"SCR-20240802-lrhz\" src=\"https://github.com/user-attachments/assets/7e11958c-8239-437f-b949-8c203ae64f59\">\r\n","createdAt":"2024-08-02T10:05:28Z","labels":["priority: 1","effort: medium","type: perf","work: clear"],"number":1032,"repository":"sablier-labs/interfaces","state":"closed","title":"Detect timing type in CSV and set it for the user automatically","type":"issue","updatedAt":"2024-08-30T14:54:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1032"},{"author":"PaulRBerg","body":"As the title says.\r\n\r\n- Go here: https://app.sablier.com/create/csv/?shape=linear\r\n- Click on \"Guide\"\r\n\r\nNothing will open.","createdAt":"2024-08-02T09:07:54Z","labels":["type: bug","priority: 1","effort: low","work: clear"],"number":1028,"repository":"sablier-labs/interfaces","state":"closed","title":"The \"Guide\" button does not work in the \"Create Streams from CSV\" page","type":"issue","updatedAt":"2024-08-02T10:17:23Z","url":"https://github.com/sablier-labs/interfaces/issues/1028"},{"author":"razgraf","body":"Speed Insights started working post #865, next step is to optimize the app based on these metrics.\r\n\r\n<img width=\"1707\" alt=\"Screenshot 2024-07-24 at 19 03 01\" src=\"https://github.com/user-attachments/assets/886f7682-ecec-4931-9d4b-ba94851e79c8\">\r\n","createdAt":"2024-07-24T16:04:41Z","labels":["backlog","priority: 3","type: perf","work: complex","topic: seo"],"number":1026,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve app based on Speed Insights","type":"issue","updatedAt":"2025-04-06T09:43:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1026"},{"author":"PaulRBerg","body":"Got this report from Google via email:\r\n\r\n<img width=\"633\" alt=\"SCR-20240722-nqeh\" src=\"https://github.com/user-attachments/assets/8e071df1-b06e-4bfb-9313-c2ae13db03f5\">\r\n\r\nHere's the indexing report:\r\n\r\nhttps://search.google.com/search-console/index?resource_id=sc-domain:sablier.com&utm_source=wnc_20237597&utm_medium=gamma&utm_campaign=wnc_20237597&utm_content=msg_110624660&hl=en","createdAt":"2024-07-22T12:25:30Z","labels":["priority: 3","type: chore","topic: seo"],"number":1024,"repository":"sablier-labs/interfaces","state":"closed","title":"New reason preventing your pages from being indexed","type":"issue","updatedAt":"2024-11-12T13:46:49Z","url":"https://github.com/sablier-labs/interfaces/issues/1024"},{"author":"razgraf","body":"Infura now supports zkSync. Alchemy does Blast and zkSync (including eth_getFilterChanges). We should update the RPC endpoints in the app:\r\n- `https://zksync-mainnet.infura.io/v3` / `https://zksync-mainnet.g.alchemy.com/v2/`\r\n- `https://blast-mainnet.g.alchemy.com/v2/`","createdAt":"2024-07-19T13:46:47Z","labels":["priority: 2","effort: low","type: chore","work: clear"],"number":1022,"repository":"sablier-labs/interfaces","state":"closed","title":"Update RPC endpoint for zkSync, Blast","type":"issue","updatedAt":"2024-08-30T14:54:33Z","url":"https://github.com/sablier-labs/interfaces/issues/1022"},{"author":"razgraf","body":"We've explored this previously in #243 but we should figure out a way to disable unsupported dependencies and deploy a cleaner version of the app to IPFS. \r\n\r\n\r\n> [!NOTE]\r\n> \r\n> Another advantage of having historical versions deployed on IPFS is that we can point v2.0 people to that version, while the main app deployment can drop support for the proxy.","createdAt":"2024-07-19T12:17:20Z","labels":["type: feature","priority: 3","effort: epic","work: chaotic"],"number":1021,"repository":"sablier-labs/interfaces","state":"open","title":"Figure out a way to deploy the app to IPFS","type":"issue","updatedAt":"2025-04-09T17:45:43Z","url":"https://github.com/sablier-labs/interfaces/issues/1021"},{"author":"razgraf","body":"The https://www.impersonator.xyz/ endpoint should be whitelisted in our CSP headers list (next.config.base.js).\r\n\r\nAnd Lightlink's safe!","createdAt":"2024-07-15T17:56:24Z","labels":["type: feature","priority: 2","effort: low","work: clear"],"number":1017,"repository":"sablier-labs/interfaces","state":"closed","title":"Whitelist impersonator.xyz, safe.lightlink.io for usage with iframes","type":"issue","updatedAt":"2024-07-24T10:34:10Z","url":"https://github.com/sablier-labs/interfaces/issues/1017"},{"author":"razgraf","body":"We have received enough feedback (online and in-person at ETHCC) to include this update in our next sprint. Some users seem like the idea of a monthly shape with an initial unlock at the start.\r\n\r\nAs discussed with @gavriliumircea, a potential toggle may help here (e.g. another input in the form to toggle between first unlock on `start date` or first unlock on `start date + 1mo`) rather than implementing a new shape.\r\n\r\n---\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/998\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **razgraf** June 30, 2024</sup>","createdAt":"2024-07-15T12:48:48Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":1015,"repository":"sablier-labs/interfaces","state":"closed","title":"Considerations for the first unlock for the monthly shape","type":"issue","updatedAt":"2024-08-29T12:21:02Z","url":"https://github.com/sablier-labs/interfaces/issues/1015"},{"author":"razgraf","body":"There seems to be an issue creating a stream towards an ENS. Full feedback below.\r\n\r\n\r\n<img width=\"954\" alt=\"Screenshot 2024-07-15 at 15 44 17\" src=\"https://github.com/user-attachments/assets/6a2e7c3a-1b96-4e0c-96d8-f772b5412972\">\r\n\r\n![CleanShot 2024-07-07 at 10 57 01@2x](https://github.com/user-attachments/assets/330c1f79-2ea2-48be-aa8c-16b77af571c2)\r\n","createdAt":"2024-07-15T12:44:50Z","labels":["type: bug","priority: 2","effort: medium","work: complicated"],"number":1014,"repository":"sablier-labs/interfaces","state":"closed","title":"Issue with ENS in the create-stream form","type":"issue","updatedAt":"2024-07-17T13:14:53Z","url":"https://github.com/sablier-labs/interfaces/issues/1014"},{"author":"IaroslavMazur","body":"Bug report, for the following workflow:\r\n\r\n1. Select the Stream\r\n2. Click on \"Manage\" for the Stream Selection\r\n3. Click on \"Withdraw Multiple\"\r\n4. Click on \"Withdraw All\"\r\n\r\nAs a result, the withdrawal tx confirmation fails, having failed to \"estimate the gas arguments\". Withdrawing all of the remained amount from the same Stream right after having received the aforementioned error worked flawlessly.\r\n\r\nTried the above for both Settled and Streaming Streams.\r\n\r\nLastly, here are several suggestions for improving the UX of the above workflow for our users:\r\n- Change \"withdraw all\" (which can give a false impression of actually allowing the recipient to withdraw all - and not just the streamed part) to \"withdraw all of the streamed amounts\" (or smth along these lines)\r\n- Offer (via a new button) to \"retry the tx\", following a tx failure (e.g. after MetaMask or the user themselves has rejected the tx)","createdAt":"2024-07-14T17:09:38Z","labels":[],"number":1012,"repository":"sablier-labs/interfaces","state":"closed","title":"Withdrawing Multiple fails to estimate gas arguments","type":"issue","updatedAt":"2024-07-17T13:14:53Z","url":"https://github.com/sablier-labs/interfaces/issues/1012"},{"author":"razgraf","body":"To access all the latest icons, as they seem to have added some to the [set](https://heroicons.com/): https://x.com/steveschoger/status/1811102092578410795?s=46\r\n\r\nTask is to bump their package.","createdAt":"2024-07-11T13:43:29Z","labels":["priority: 3","effort: low","type: chore","work: clear"],"number":1011,"repository":"sablier-labs/interfaces","state":"closed","title":"Bump heroicons","type":"issue","updatedAt":"2024-08-27T19:18:41Z","url":"https://github.com/sablier-labs/interfaces/issues/1011"},{"author":"PaulRBerg","body":"I loaded https://app.sablier.com/stream/LL-1-273/ on iPhone and noticed that the NFT doesn't load (in the \"Details\" page):\r\n\r\n<img width=\"200\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ae239578-832b-46fe-9a2d-afde4a98c56c\"/>\r\n\r\nEnvironment: iOS@17.5.1","createdAt":"2024-07-08T19:41:22Z","labels":["type: bug","priority: 1"],"number":1009,"repository":"sablier-labs/interfaces","state":"closed","title":"NFT not loading on Safari on iOS","type":"issue","updatedAt":"2024-12-06T15:38:39Z","url":"https://github.com/sablier-labs/interfaces/issues/1009"},{"author":"PaulRBerg","body":"As discussed on Slack:\r\n\r\n<img width=\"500\" alt=\"SCR-20240706-ppdc\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/904da63d-8c3e-41ea-bff0-97d036a81107\">\r\n","createdAt":"2024-07-06T15:48:49Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":1007,"repository":"sablier-labs/interfaces","state":"closed","title":"Reduce TRM API consumption by using the free API when claiming an airstream","type":"issue","updatedAt":"2024-07-13T11:55:35Z","url":"https://github.com/sablier-labs/interfaces/issues/1007"},{"author":"PaulRBerg","body":"I'm sorry if this is already the case and I misunderstood Cryptopia, but it seems to me that it wasn't clear to them that the complexity of their group of streams consumed so much gas that it went above the block gas limit.\r\n\r\n<img width=\"400\" alt=\"SCR-20240706-jhae\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e716cf17-9db3-458e-9fe1-697c8f1bd627\">\r\n\r\nIf we don't already display a highly specific error about this, I think it would be helpful to do so.\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/891#issuecomment-1941166103","createdAt":"2024-07-06T08:11:20Z","labels":["priority: 1","effort: medium","type: perf","work: clear"],"number":1006,"repository":"sablier-labs/interfaces","state":"closed","title":"Show more user-friendly error when error block gas limit is hit","type":"issue","updatedAt":"2024-08-30T14:54:32Z","url":"https://github.com/sablier-labs/interfaces/issues/1006"},{"author":"razgraf","body":"<img width=\"967\" alt=\"Screenshot 2024-07-05 at 19 48 38\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/6f9cb2c4-0a3c-4013-b729-61660decbd9d\">\r\n<img width=\"804\" alt=\"Screenshot 2024-07-05 at 19 48 44\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/0db994f3-6d83-4af9-8e9a-fb1f0dd4ea70\">\r\n","createdAt":"2024-07-05T16:49:01Z","labels":["type: bug","priority: 1"],"number":1005,"repository":"sablier-labs/interfaces","state":"closed","title":"Make sure decimal points in CSVs work","type":"issue","updatedAt":"2024-07-17T13:14:53Z","url":"https://github.com/sablier-labs/interfaces/issues/1005"},{"author":"PaulRBerg","body":"This is a no-brainer given the recent growth of Airstreams:\r\n\r\n<img width=\"450\" alt=\"SCR-20240703-nuqo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e5a84308-4150-4f04-988b-ecbb7f170bd3\">\r\n","createdAt":"2024-07-03T12:37:59Z","labels":["type: feature","priority: 2","effort: high","work: clear","topic: seo"],"number":1002,"repository":"sablier-labs/interfaces","state":"closed","title":"OpenGraph preview images for airstream campaigns","type":"issue","updatedAt":"2024-11-12T13:25:32Z","url":"https://github.com/sablier-labs/interfaces/issues/1002"},{"author":"razgraf","body":"<img width=\"979\" alt=\"Screenshot 2024-07-01 at 13 15 28\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/456a68ed-8f58-4ae4-9877-7155db641cdb\">\r\n\r\nSome text needed. Oh and should we actually extend it to say we're around for the entire week (beside the booth dates which we probably want to include)? @maxdesalle ","createdAt":"2024-07-01T10:17:15Z","labels":["priority: 1"],"number":1001,"repository":"sablier-labs/interfaces","state":"closed","title":"Banner for ETHCC 2024 (July 7-14)","type":"issue","updatedAt":"2024-07-05T15:50:46Z","url":"https://github.com/sablier-labs/interfaces/issues/1001"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/993\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 29, 2024</sup>\r\nThe CSV format currently uses DD/MM/YYYY.\r\n\r\n<img width=\"500\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/31638d6d-811f-436f-847c-b04f73ecd8ff\"/>\r\n\r\nThis format is objectively less clear than YYYY-MM-DD, given that two digits are dynamic and can reflect either months or days, whereas years are static. It's easier and more 'hierarchical' to have something static at the beginning.\r\n\r\nCC @sablier-labs/frontend.\r\n\r\nhttps://chatgpt.com/share/e5026fcb-9b5b-4718-bc76-50df1c83f6e2</div>","createdAt":"2024-07-01T09:32:21Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":1000,"repository":"sablier-labs/interfaces","state":"closed","title":"Change date format to YYYY-MM-DD","type":"issue","updatedAt":"2024-07-01T09:43:02Z","url":"https://github.com/sablier-labs/interfaces/issues/1000"},{"author":"razgraf","body":"Task is to \r\n1. change the accepted and parsed date formats in the app for group-CSV to \"YYYY-MM-DD\" (worth checking if we can change the CSV parser globally as we don't use dates in airstreams)\r\n2. modify the templates (maybe include a version in their name to improve experience if users download the new template in the same directory)\r\n---\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/993\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 29, 2024</sup>\r\nThe CSV format currently uses DD/MM/YYYY.\r\n\r\n<img width=\"500\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/31638d6d-811f-436f-847c-b04f73ecd8ff\"/>\r\n\r\nThis format is objectively less clear than YYYY-MM-DD, given that two digits are dynamic and can reflect either months or days, whereas years are static. It's easier and more 'hierarchical' to have something static at the beginning.\r\n\r\nCC @sablier-labs/frontend.\r\n\r\nhttps://chatgpt.com/share/e5026fcb-9b5b-4718-bc76-50df1c83f6e2</div>","createdAt":"2024-07-01T09:30:53Z","labels":["priority: 2","effort: medium","type: refactor","work: clear"],"number":999,"repository":"sablier-labs/interfaces","state":"closed","title":"Change date format to YYYY-MM-DD in create-group CSV","type":"issue","updatedAt":"2024-08-02T09:17:38Z","url":"https://github.com/sablier-labs/interfaces/issues/999"},{"author":"smol-ninja","body":"<sup>Originally discussed in https://github.com/sablier-labs/company-discussions/discussions/55#discussioncomment-9906092</sup>\r\n\r\nThe objective is to build a custom UI navigation for Airstreams that are fully vested at the time of claim.\r\n\r\n### Typical flow\r\n1. User Claims an Airstream\r\n2. Check if the newly created stream has a stream duration of 1 second; if yes proceed to the next step\r\n3. Show a withdrawal popup to guide the user to click the `withdraw` button without leaving the screen; OR automatically trigger a wallet request to withdraw the amount from the stream.\r\n\r\n### Benefit\r\n- Improves the UX for instantly claimable Airstreams","createdAt":"2024-06-29T23:42:34Z","labels":["backlog"],"number":997,"repository":"sablier-labs/interfaces","state":"closed","title":"Improves the UX for instantly claimable Airstreams","type":"issue","updatedAt":"2025-01-13T09:40:12Z","url":"https://github.com/sablier-labs/interfaces/issues/997"},{"author":"PaulRBerg","body":"To prevent issues like this:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e670d6a5-f1d5-480a-99aa-4494ac566dff\"/>","createdAt":"2024-06-29T08:25:08Z","labels":[],"number":994,"repository":"sablier-labs/interfaces","state":"closed","title":"Disallow single digits in date format in CSV","type":"issue","updatedAt":"2024-07-17T13:14:52Z","url":"https://github.com/sablier-labs/interfaces/issues/994"},{"author":"razgraf","body":"As suggested [here](https://github.com/sablier-labs/v2-interfaces/discussions/839#discussioncomment-9903918): \r\n\r\n> 1. Download the Coingecko token-list by default, alongisde our own.   \r\n>    - This means that we'll have access to the 5000 tokens listed in the Coingecko list every time the user opens the app.\r\n>    - We'll prioritize our own list (for manual adds or situations when we want a higher quality asset)\r\n>    - We'll probably cache Coingecko for a few days (given it has a size of 1.2Mb) - our list will still be fresh and crispy with every visit\r\n> \r\n>  2. Add a new button when using custom tokens that prompts the user to add an icon and list it in our github page.\r\n>        \r\n>     - I think it would be best to link to a docs page describing the process of creating an issue to help the less-technical users, instead of linking to github directly\r\n>      - | Listed token | Unlisted token |\r\n>         | --- | --- |\r\n>        | <img alt=\"Screenshot 2024-06-28 at 14 03 46\" width=\"839\" src=\"https://private-user-images.githubusercontent.com/15740806/344142002-bd55f005-9112-49a3-a921-fdc24941204b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTk1NzM4MjQsIm5iZiI6MTcxOTU3MzUyNCwicGF0aCI6Ii8xNTc0MDgwNi8zNDQxNDIwMDItYmQ1NWYwMDUtOTExMi00OWEzLWE5MjEtZmRjMjQ5NDEyMDRiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjI4VDExMTg0NFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWE2NGU5YjcyM2UyMmJkMzRlYzdmNjgxYmRkNGU1OGEyNTNlNmJlY2JlNzliZWRiM2IyYzc5NDEyZjQxN2VlMGUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.sGt6flGGYLAKRn68VQdPX5H687by4ou9bD74fiZIWGc\">|  <img alt=\"Screenshot 2024-06-28 at 14 03 35\" width=\"835\" src=\"https://private-user-images.githubusercontent.com/15740806/344142004-f614832e-f7d8-4947-ac3d-d526df3926a7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTk1NzM4MjQsIm5iZiI6MTcxOTU3MzUyNCwicGF0aCI6Ii8xNTc0MDgwNi8zNDQxNDIwMDQtZjYxNDgzMmUtZjdkOC00OTQ3LWFjM2QtZDUyNmRmMzkyNmE3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjI4VDExMTg0NFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWRmY2MwMmJiNmEwYjU4YWQ1MTFlMDE2NGVhMzg3YTg1NmQzM2JmM2QwODU3NWNiMzIyMDViZTllYWJkYTM2YWEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.gtumnFtSib5Y58rJ6bC7L4IzxUKibw7wR71gMMdASdI\"> |\r\n\r\n\r\n> [!NOTE]  \r\n> This will be dealt with in a sprint after the v2.2 launch.\r\n\r\n---\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/839\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** February  1, 2024</sup>\r\n</div>","createdAt":"2024-06-28T11:23:18Z","labels":["type: feature","priority: 2","effort: medium","work: complicated"],"number":992,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve token-icon/name success rate with a new button and Coingecko's list","type":"issue","updatedAt":"2024-08-30T14:54:32Z","url":"https://github.com/sablier-labs/interfaces/issues/992"},{"author":"razgraf","body":"Now that we have our own backend solution ready, we might as well implement this feature using our new infrastructure.\r\n\r\nThe task is to add a new editable field where the campaign admin can provide a link to the eligibility criteria. This link will be showcased in the claim panel, with a button near the \"watch tutorial\" one.\r\n\r\n> [!WARNING]  \r\n> This may introduce a risk in the form of bad links, phishing or hacks (e.g. if we link to a website of ToS page with links that aren't vetted regularly). This is still an issue.\r\n\r\nThis will be a shared task between v2-interfaces and [merkle-tracker](https://github.com/sablier-labs/merkle-tracker/).\r\n\r\n<img width=\"1722\" alt=\"Screenshot 2024-06-28 at 13 46 54\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/1d6f9b3a-51af-4057-87d8-cfd72a8be15e\">\r\n\r\n\r\n\r\n> [!NOTE]  \r\n> This will be dealt with in a sprint after the v2.2 launch.\r\n\r\n---\r\n\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/871\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** February  8, 2024</sup>\r\n</div>","createdAt":"2024-06-28T10:50:33Z","labels":["type: feature","priority: 2","effort: medium","work: clear"],"number":991,"repository":"sablier-labs/interfaces","state":"closed","title":"Add eligibility-link in the edit campaign modal","type":"issue","updatedAt":"2024-08-05T08:41:33Z","url":"https://github.com/sablier-labs/interfaces/issues/991"},{"author":"razgraf","body":"The task is to implement a shape that unlocks in increments: 10% in year 1, 20% in year 2, ...\r\n\r\nShould the system have: \r\n\r\n1. a set number of years with set percentages: 10%, 20%, 30%, 40%\r\n2. a set number of years with adjustable percentages: 4 years with percentage-box for each (prefilled)\r\n3. an adjustable number of years, with adjustable percentages: list with >1 items with pairs of [duration, unlock]\r\n   - 3.1. empty at start\r\n   - 3.2. prefilled values (4)\r\n\r\nI think the preferred solution in #787 was 3.2. Can you guys confirm @PaulRBerg @smol-ninja ?\r\n\r\n> [!NOTE]  \r\n> This will be dealt with in a sprint after the v2.2 launch.\r\n\r\n---\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/787\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December 29, 2023</sup>\r\n[...] we could attempt to \"bridge the gap\" by offering **pre-fabricated custom LockupDynamic curves** based on successful vesting models already put in practice by specific companies. For example, we could look at what Safe or CowSwap did, or we could offer a \"Snapchat\" back-weighted vesting schedule, which works like this:\r\n\r\n- 10% in the first year\r\n- 20% in the second year\r\n- 30% in the 3rd year\r\n- 40% in the 4th year\r\n</div>","createdAt":"2024-06-28T10:24:07Z","labels":["type: feature","priority: 3","effort: medium","work: complicated"],"number":990,"repository":"sablier-labs/interfaces","state":"closed","title":"New shape: percentage stepper (back-weighted)","type":"issue","updatedAt":"2024-08-28T14:58:54Z","url":"https://github.com/sablier-labs/interfaces/issues/990"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/919\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** April  2, 2024</sup>\r\nThe idea is to display a hint/ popup when the CSV files contain 10 recipients or fewer.\r\n\r\nThe main benefit would be cleansing the airstreams dashboard from campaigns with a low number of recipients, such as these:\r\n\r\n<img width=\"400\" alt=\"SCR-20240402-kney\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/69f1e8f0-8001-4bb4-a610-362620bffc14\">\r\n\r\nCc @razgraf @gavriliumircea.\r\n</div>","createdAt":"2024-06-27T15:28:08Z","labels":[],"number":988,"repository":"sablier-labs/interfaces","state":"closed","title":"Nudge users towards stream when the recipient count is less than <10","type":"issue","updatedAt":"2024-08-30T14:54:32Z","url":"https://github.com/sablier-labs/interfaces/issues/988"},{"author":"razgraf","body":"On each page serve we get an annoying warning:\r\n```\r\nTimeoutOverflowWarning: 2592000000 does not fit into a 32-bit signed integer.\r\n```\r\n\r\nIt's usually caused by a `setInterval` or `setTimeout` being given a wait-time > `MAX_INT`. We don't have those in our app so it's very probable that a dependency is causing this issue.\r\n\r\nI've managed to narrow it down to something inside https://github.com/rainbow-me/rainbowkit. If we comment out providers one-by-one, the warnings goes away when the rainbowkit provider gets hidden. Still not 100% sure it's caused by it nor have I found the source code that's responsible. Will keep digging.","createdAt":"2024-06-26T11:22:03Z","labels":["type: bug","priority: 3","effort: high","work: chaotic"],"number":985,"repository":"sablier-labs/interfaces","state":"open","title":"Hunt down TimeoutOverflowWarning","type":"issue","updatedAt":"2025-07-14T08:34:11Z","url":"https://github.com/sablier-labs/interfaces/issues/985"},{"author":"maxdesalle","body":"The current \"Pricing\" link located in the footer of our website is broken, it leads to \"https://sablier.com/#pricing\" which doesn't exist.\r\n\r\n![CleanShot 2024-06-24 at 11 01 50@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/c81f34ec-af44-4fb4-b327-ee85afce4fe1)\r\n","createdAt":"2024-06-24T09:03:03Z","labels":["priority: 0","effort: low"],"number":982,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix pricing footer link","type":"issue","updatedAt":"2024-06-24T11:02:42Z","url":"https://github.com/sablier-labs/interfaces/issues/982"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/949\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** May  7, 2024</sup>\r\nSeeing this message on Telegram makes me think that we are not engaging with users who wish to have more than 50k recipients in their airstream campaign:\r\n\r\n<img width=\"450\" alt=\"SCR-20240507-lgkm\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/dd3d3c7a-195c-4d19-9ec4-083947e690be\">\r\n\r\nI propose adding a CTA:\r\n\r\n> More than 50k recipients? Contact us HERE\r\n\r\nAnd HERE would be a Google form or something, or @maxdesalle's Telegram handle.\r\n\r\ncc @sablier-labs/frontend</div>","createdAt":"2024-06-21T15:42:02Z","labels":[],"number":981,"repository":"sablier-labs/interfaces","state":"closed","title":"Update airstreams note and add call-to-action","type":"issue","updatedAt":"2024-08-30T14:54:31Z","url":"https://github.com/sablier-labs/interfaces/issues/981"},{"author":"razgraf","body":"Reference: https://jscrambler.com/blog/implementing-google-recaptcha-v2-next-js","createdAt":"2024-06-19T10:49:20Z","labels":[],"number":979,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement reCaptcha in eligibility/claim form","type":"issue","updatedAt":"2024-07-05T16:13:49Z","url":"https://github.com/sablier-labs/interfaces/issues/979"},{"author":"razgraf","body":"Sometimes disconnect doesn't work from the first try. It happens only when multiple accounts are connected to the app (address1, address2, ...). On refresh, the disconnect takes effect, but in that same session it doesn't (only on the second click).\r\n\r\nSuggested fix (h/t @gavriliumircea): loop through all connectors manually and disconnect each one.","createdAt":"2024-06-19T10:39:17Z","labels":[],"number":978,"repository":"sablier-labs/interfaces","state":"closed","title":"Disconnect sometimes requires multiple clicks","type":"issue","updatedAt":"2024-07-05T16:16:59Z","url":"https://github.com/sablier-labs/interfaces/issues/978"},{"author":"PaulRBerg","body":"See the latest messages here:\r\n\r\nhttps://github.com/sablier-labs/company-discussions/discussions/55\r\n\r\nWe have significant usage with campaigns that set the duration to 1 hour.\r\n\r\nThe catch is that the campaign creators want to run a one-time drop. They set 1 hour because that's the shortest duration allowed by the UI.\r\n\r\nWe should cater to what user needs and allow 1-second airstreams.","createdAt":"2024-06-18T18:45:28Z","labels":["type: feature","priority: 1","effort: medium","work: clear"],"number":977,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow seconds in the duration picker in airstreams","type":"issue","updatedAt":"2024-07-05T16:14:39Z","url":"https://github.com/sablier-labs/interfaces/issues/977"},{"author":"PaulRBerg","body":"Two decimals would suffice here:\r\n\r\n<img width=\"300\" alt=\"SCR-20240617-ocpc\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/25867a0c-ca36-422a-a85a-0443f808a9a5\">\r\n","createdAt":"2024-06-18T18:28:56Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":975,"repository":"sablier-labs/interfaces","state":"closed","title":"Abbreviate amounts for brevity","type":"issue","updatedAt":"2024-07-05T15:50:47Z","url":"https://github.com/sablier-labs/interfaces/issues/975"},{"author":"razgraf","body":"With the new 7 day grace window (starting with v2.2) the clawback functionality became a bit more complex. We should add an explainer in the airstream form (step #1, on the right side above the buttons) that goes over when clawback is enabled.","createdAt":"2024-06-17T15:50:56Z","labels":["priority: 1","effort: low","type: docs","work: clear"],"number":973,"repository":"sablier-labs/interfaces","state":"closed","title":"Add clawback explainer in the create-airstream form","type":"issue","updatedAt":"2024-07-05T16:14:43Z","url":"https://github.com/sablier-labs/interfaces/issues/973"},{"author":"PaulRBerg","body":"To address some of the findings reported by CodeHawks, we are going to switch back to CREATE2 for deploying the airstream campaigns:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/issues/353\r\n\r\nThis means that counterfactual deployments are possible now.\r\n\r\nThe catch is that the deployment of the contract is not guaranteed for LT campaigns - there may have been an error in the tranche percentages. If they don't add up to 100%, the creation call would revert. This issue was reported by Rusty during the private audit:\r\n\r\nhttps://github.com/cantinasec/review-sablier-3/issues/1\r\n\r\nTo prevent accidents of this sort, the UI should inform campaign creators of the dangers of counterfactual funding. Basically, we should add a warning/ info tooltip somewhere in the campaign creation form (towards the end).","createdAt":"2024-06-17T15:11:15Z","labels":["priority: 1","resolution required","effort: low","type: perf","work: clear"],"number":972,"repository":"sablier-labs/interfaces","state":"closed","title":"Add warning that the airstream campaign should not be funded counterfactually","type":"issue","updatedAt":"2024-08-20T14:15:11Z","url":"https://github.com/sablier-labs/interfaces/issues/972"},{"author":"razgraf","body":"Subgraph queries benefit from a fallback architecture is queries fail.\r\n\r\nFor the stream profile, if (let's say immediately after stream creation) the item is not found, the query will not fail, but simply return 0 results. In this case we employ a manual [`jump`](https://github.com/sablier-labs/v2-interfaces/blob/17ffdb4afd487409a2acbb0a0a603aeb71abf2ed/packages/subgraphs/src/client/index.ts#L103) that makes sure the query is retried with the fallback endpoint (e.g. envio) when certain conditions are met (e.g. query fails or doesn't return results).\r\n\r\nFor the create group feature, after #970 the user will keep getting redirected to the dashboard search after creating >1 stream. The dashboard doesn't benefit from this jump architecture yet, meaning that for a slow subgraph the query will yield no results.\r\n\r\nThe task is to:\r\n1. add a `jump` condition in the dashboard search tab, based on a URL flag (e.g. ?retry=true)\r\n2. use this flag in the URL generated for the transaction modal \"see streams\" button\r\n3. based on this flag, show some \"special text\" if the table is empty (instead of \"No result found\" use something like \"No results found. The subgraphs may be slow to index new streams so try again in a few minutes\").","createdAt":"2024-06-17T12:10:32Z","labels":[],"number":971,"repository":"sablier-labs/interfaces","state":"closed","title":"Add flag for query re-try in the dashboard search after create-group","type":"issue","updatedAt":"2024-07-05T15:50:48Z","url":"https://github.com/sablier-labs/interfaces/issues/971"},{"author":"razgraf","body":"After users create a group of streams we show them a \"See streams\" button (in the final transaction modal). This sends them to the dashboard (search tab) showcasing the recently created streams.\r\n\r\nFor cases when there's a **single** stream created, bypass this and send the user directly to the Stream Profile page (similar to what we used to do in the `createSingle` machine).","createdAt":"2024-06-17T12:02:55Z","labels":[],"number":970,"repository":"sablier-labs/interfaces","state":"closed","title":"Send user directly to stream profile instead of search if create-group(1)","type":"issue","updatedAt":"2024-07-05T16:14:46Z","url":"https://github.com/sablier-labs/interfaces/issues/970"},{"author":"razgraf","body":"This issue develops #806 into a more granular list of tasks. We decided to remove the \"Create Single\" page in the following way:\n\n- [x] Remove the single page from the UI\n- [x] [Redirect](https://nextjs.org/docs/app/building-your-application/routing/redirecting#redirects-in-nextconfigjs) `/create/single` to `/create/group` and `/gallery/group` to `/gallery`\n- [x] Move group to the `/gallery` route (both in `constants/../routes` and in the app's pages folder)\n- [x] Remove single/group pill in gallery\n- [x] Remove single fields and single form logic (if any) in extensions\n- [x] Remove the `createSingle` machine\n- [x] Remove the autofill functionality (modal, store, hooks, tests) from the app and ⚠️ from the docs ⚠️ \n- [x] Do a copy-sweep for texts that refer to much to \"group of streams\" to make sure they also work for the single-stream creation \n- Keep the `processSingle` and `processGroup` methods due to how well they separate concerns and make code much more readable\n\n### Notes\n\n**Autofill**: we can start suggesting integrators generate a CSV file for the user to upload in the sablier app with the streams they want filled in, instead\n\n### Related \n\n#970, #971\n","createdAt":"2024-06-17T12:00:01Z","labels":[],"number":969,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove create-single page and auxiliary code","type":"issue","updatedAt":"2024-07-05T16:15:58Z","url":"https://github.com/sablier-labs/interfaces/issues/969"},{"author":"razgraf","body":"As the title preempts, if a chain of server functions reaches a call to another API, the call might have a different `origin`.\r\n\r\n### Report \r\n\r\n<img width=\"874\" alt=\"Screenshot 2024-06-15 at 19 43 44\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/4fbe3c70-0202-4d16-ab86-3c69863fc988\">\r\n\r\nThe resulted image was the default/fallback (32 ETH) because the subgraph query was failing.\r\n\r\n### Problem\r\n\r\nIn our case:\r\n-  the `/meta/stream/by_id` route (meta image generator) will make a call towards `/stream/by_id` (stream entity fetcher) which in turn needs to make a GraphQL call towards the subgraphs. \r\n- we notice the last call failing ([this](https://sablier-labs.sentry.io/issues/5145134578/?project=4504854258450432&query=is%3Aunresolved+issue.priority%3A%5Bhigh%2C+medium%5D&referrer=issue-stream&statsPeriod=1h&stream_index=0) fallback to envio caused by [this](https://sablier-labs.sentry.io/issues/5145134578/events/24e755e6b51641cbb3061dc948268bed/?project=4504854258450432) fail of the-graph)\r\n- the fail being caused by the `origin` domain not being whitelisted for the subgraph API Key\r\n\r\nWe know that sablier.com is actually a whitelisted `origin` for our API Key, which means it somehow doesn't get passed down correctly. \r\n\r\n\r\n\r\n### References\r\n\r\n- https://github.com/vercel/next.js/discussions/47496\r\n- https://github.com/vercel/next.js/issues/37536\r\n\r\nI believe [#47496](https://github.com/vercel/next.js/discussions/47496) might actually be someone experiencing the same subgraph problem.\r\n\r\n### Solution\r\n\r\nThe fix in the end was to \"fake\" the origin through a custom request header passed to the GraphQL client (`{Origin: \"https://app.sablier.com\"}`).","createdAt":"2024-06-15T16:32:38Z","labels":[],"number":968,"repository":"sablier-labs/interfaces","state":"closed","title":"Middleware server functions don't have the same origin","type":"issue","updatedAt":"2024-06-15T22:07:14Z","url":"https://github.com/sablier-labs/interfaces/issues/968"},{"author":"smol-ninja","body":"Isn't the information that \"Timelocks are non-cancelable\" redundant as it depends on the `cancelability` value? \r\n\r\n<img width=\"600\" alt=\"Screenshot 2024-06-13 at 20 22 56\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/fe4f28cc-aa90-433b-9959-e3887d12b336\">\r\n","createdAt":"2024-06-13T20:01:25Z","labels":[],"number":967,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove note about cancelability from Timelock shapes","type":"issue","updatedAt":"2024-06-17T12:20:45Z","url":"https://github.com/sablier-labs/interfaces/issues/967"},{"author":"PaulRBerg","body":"A smol, quality-of-life improvement.\r\n\r\nAdd an \"Add $TKN\" button in the details panel or the token modal so allow users to add the streamed token to their wallet.\r\n\r\ne.g. how TokenTable does it (and many other apps):\r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/f9d60537-63ef-429a-b88a-fcadbda3eaa5\"/>\r\n","createdAt":"2024-05-31T10:03:24Z","labels":["type: feature","priority: 3","effort: medium","work: clear"],"number":962,"repository":"sablier-labs/interfaces","state":"closed","title":"Button to add token to wallet","type":"issue","updatedAt":"2024-07-05T16:15:02Z","url":"https://github.com/sablier-labs/interfaces/issues/962"},{"author":"PaulRBerg","body":"As brainstormed with @gavriliumircea on Slack, we should _not_ have any default value for the expiration field, and instead we should force the user to choose between _zero_ expiration and _some_ expiration. By default, the expiration field would have a null-ish value.\r\n\r\nThe goal is to prevent human errors like these:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a0ed85ac-dfa1-47c0-848c-be83ec0bffc9\"/>\r\n\r\nSeparately, I suggest having a more prominent warning when the user disables the expiration.\r\n\r\nP.S the rationale is Popperian: there will 100% be more users who will make errors and overlook the importance of the expiration time if set to a default value.","createdAt":"2024-05-24T10:24:24Z","labels":["priority: 1","effort: medium","type: refactor","work: clear"],"number":961,"repository":"sablier-labs/interfaces","state":"closed","title":"Force the user to choose between zero expiration and some expiration in airstreams","type":"issue","updatedAt":"2024-05-28T16:02:42Z","url":"https://github.com/sablier-labs/interfaces/issues/961"},{"author":"PaulRBerg","body":"Implement a default expiration time, e.g. 3 months, with the goal of preventing human errors like these:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a0ed85ac-dfa1-47c0-848c-be83ec0bffc9\"/>\r\n\r\nI also suggest having a more prominent warning when the user disables the expiration.\r\n\r\nThe rationale is Popperian: there will 100% be more users who will make errors and overlook the importance of the expiration time.","createdAt":"2024-05-24T10:10:46Z","labels":["priority: 1","effort: low","type: refactor","work: clear"],"number":959,"repository":"sablier-labs/interfaces","state":"closed","title":"Provide an expiration time by default for airstreams","type":"issue","updatedAt":"2024-05-24T10:20:48Z","url":"https://github.com/sablier-labs/interfaces/issues/959"},{"author":"PaulRBerg","body":"The transaction modal for the create stream actions should provide a modicum of information to the user, who is primarily interested in whether their stream has been successfully validated on the blockchain.\r\n\r\nHowever, the current modal goes well beyond that: it includes details about the streaming model (Lockup) and the shape (e.g. Monthly Unlocks).\r\n\r\nI propose removing them on the basis that:\r\n\r\n1. They are low-level technical details.\r\n2. It is unlikely for the user to forget the choices they have made a few seconds ago before this modal appears.\r\n\r\n<img width=\"300\" alt=\"Receipt 2\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/98d2a4fa-fe1f-4372-86b5-b27eb55ba7e9\">\r\n\r\n","createdAt":"2024-05-17T17:50:19Z","labels":["priority: 2","effort: low","type: refactor","work: clear"],"number":955,"repository":"sablier-labs/interfaces","state":"closed","title":"Create stream transaction modal is unnecessarily verbose","type":"issue","updatedAt":"2024-05-28T12:51:09Z","url":"https://github.com/sablier-labs/interfaces/issues/955"},{"author":"PaulRBerg","body":"What I did:\r\n\r\n- I was on the Create Stream page\r\n- I was connected to Arbitrum\r\n- I switched to Optimism\r\n- I picked USDC from the token list\r\n- I got this error\r\n\r\n<img width=\"500\" alt=\"SCR-20240516-qmwi\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/aac27c24-24d1-491e-9482-2ea580e295bb\">\r\n","createdAt":"2024-05-16T17:59:10Z","labels":["type: bug","priority: 1"],"number":954,"repository":"sablier-labs/interfaces","state":"closed","title":"Chain switch does not work","type":"issue","updatedAt":"2024-07-06T08:13:44Z","url":"https://github.com/sablier-labs/interfaces/issues/954"},{"author":"razgraf","body":"We have a custom system for Token balances. While for allowances it might be worth having it, for balances we should rely on wagmi's. One of the main reasons is the `resetter` methods currently doesn't subscribe to dynamic state for balances, meaning resetting the balance data (`Token.reset()`) doesn't trigger an update - which it should.\r\n\r\nTask is therefore to re-engineer the `useTokenBalance` hook(s).","createdAt":"2024-05-15T14:08:09Z","labels":[],"number":953,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-engineer token balance hook to use wagmi","type":"issue","updatedAt":"2024-07-05T16:16:45Z","url":"https://github.com/sablier-labs/interfaces/issues/953"},{"author":"PaulRBerg","body":"Feature request from user - it seems like a very useful distribution model!\r\n\r\nThis is basically \"Unlock Each Month\" with one extra step - an initial Unlock.\r\n\r\n<img width=\"450\" alt=\"SCR-20240507-loyo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c642c52b-e811-422e-95d0-99e6883bb3ca\">\r\n\r\nAlternatively, instead of adding a new shape in the UI, we could bake this into \"Unlock Each Month\" by enabling users to frontload a portion of their deposits.\r\n\r\nRFC @sablier-labs/frontend\r\n\r\nRelated: https://github.com/sablier-labs/v2-core/discussions/912\r\n\r\nP.S. the name is TBD","createdAt":"2024-05-07T11:58:14Z","labels":["type: feature","priority: 2","effort: high","work: clear"],"number":950,"repository":"sablier-labs/interfaces","state":"closed","title":"New Unlock-Monthly shape","type":"issue","updatedAt":"2024-06-12T11:07:24Z","url":"https://github.com/sablier-labs/interfaces/issues/950"},{"author":"PaulRBerg","body":"I have heard from several users that they don't know how to obtain testnet DAI on Sepolia. Adding a \"Mint\" button in the UI would improve the UX.","createdAt":"2024-05-03T14:13:06Z","labels":["type: feature","priority: 3","effort: high","work: clear"],"number":947,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a \"Mint DAI\" button on Sepolia to improve UX","type":"issue","updatedAt":"2024-05-29T09:57:22Z","url":"https://github.com/sablier-labs/interfaces/issues/947"},{"author":"maxdesalle","body":"Change the placement of the \"free to use\" section, which is currently at the end of the [Organizations page](https://sablier.com/organizations). Too many people ask me on calls how much it costs, it seems like very few of them make the effort to scroll down the whole page and read that specific section. I would also add a \"And we cannot charge retroactively.\" phrase to this section, so it's clear to them that if they create their streams now, they will be doing so for free, forever.\r\n","createdAt":"2024-05-03T12:29:40Z","labels":["effort: low"],"number":945,"repository":"sablier-labs/interfaces","state":"closed","title":"Change the placement of the \"free to use\" section on the Organizations page","type":"issue","updatedAt":"2024-07-05T16:17:03Z","url":"https://github.com/sablier-labs/interfaces/issues/945"},{"author":"maxdesalle","body":"Change the text for the \"contact sales\" button on the [Organizations](https://sablier.com/organizations/) page. People get confused by it, thinking that we charge a fee because of the \"sales\" in the text. I think \"Schedule a call\" would be better. We can still first let them fill in the form as a filter.","createdAt":"2024-05-03T12:28:44Z","labels":["effort: low"],"number":944,"repository":"sablier-labs/interfaces","state":"closed","title":"Change the text for the \"contact sales\" button on the Organizations page","type":"issue","updatedAt":"2024-05-28T12:51:59Z","url":"https://github.com/sablier-labs/interfaces/issues/944"},{"author":"razgraf","body":"The task is to add a `max-gas` limit for contract actions. We already have `min-gas` ones in the configuration constants (where we adapt the limit to that minimum if the RPC under-evaluates it) - the `max-gas` could:\r\n- either act the same and perform a hot-swap if the gas estimation over-evaluates\r\n- or simply throw an error and not allow the user to perform this action (which is safer for most user to be honest)\r\n\r\nA good limit e.g. 0.2-0.5 ETH worth of gas units could be conjectured here.\r\n\r\nThe point of this task is to prevent https://github.com/cantinasec/review-sablier-3/issues/7.\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2024-05-01 at 15 15 55\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/f4a426ad-5ec4-441c-b68b-8dcd52f8f3dc\">\r\n","createdAt":"2024-05-01T14:15:43Z","labels":[],"number":943,"repository":"sablier-labs/interfaces","state":"closed","title":"Include max-gas limits for cancel/withdraw to prevent gas bombs","type":"issue","updatedAt":"2024-07-05T16:14:51Z","url":"https://github.com/sablier-labs/interfaces/issues/943"},{"author":"andreivladbrg","body":"As disscused with @razgraf. Based on the issue found by Rusty https://github.com/cantinasec/review-sablier-3/issues/9","createdAt":"2024-05-01T12:28:47Z","labels":[],"number":942,"repository":"sablier-labs/interfaces","state":"closed","title":"Show warning for when no expiration is chosen for the Airstream campaign","type":"issue","updatedAt":"2024-07-05T16:15:05Z","url":"https://github.com/sablier-labs/interfaces/issues/942"},{"author":"PaulRBerg","body":"The label of the \"Create group of streams\" button is unnecessarily verbose, and it's also confusing when the user creates a single stream.\r\n\r\nSaying just \"Create\" or \"Create streams\" would be enough.\r\n\r\n<img width=\"422\" alt=\"SCR-20240428-klfx\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/8287e3a8-06ac-44c4-a5c9-e975f298ec96\">\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/discussions/678","createdAt":"2024-04-28T10:31:13Z","labels":["priority: 3","effort: low","type: perf","work: clear"],"number":941,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"Create group of streams\" button to \"Create\"","type":"issue","updatedAt":"2024-05-28T12:50:40Z","url":"https://github.com/sablier-labs/interfaces/issues/941"},{"author":"PaulRBerg","body":"They've rebranded to [BNB Chain](https://www.bnbchain.org/en) and the current name is also taking quite a bit of undue attention in the modal wallet by being the only chain that spans two lines:\r\n\r\n<img width=\"423\" alt=\"SCR-20240428-kkaa\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/8de7a59a-7f3b-4000-aa5d-e7eee1aab5a0\">\r\n","createdAt":"2024-04-28T10:27:52Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":940,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"Binance Smart Chain\" to \"BNB Chain\"","type":"issue","updatedAt":"2024-05-06T19:42:34Z","url":"https://github.com/sablier-labs/interfaces/issues/940"},{"author":"razgraf","body":"Add a name field in #918 to allow for searches using the name field of campaigns. Special handling may be required for <V2.2 campaigns (or a default name may have to be assigned by the subgraph).","createdAt":"2024-04-26T12:43:43Z","labels":[],"number":939,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"name\" field to Airstreams search ","type":"issue","updatedAt":"2024-07-05T16:15:52Z","url":"https://github.com/sablier-labs/interfaces/issues/939"},{"author":"razgraf","body":"Cc @smol-ninja what should the max size be?","createdAt":"2024-04-25T15:38:52Z","labels":[],"number":938,"repository":"sablier-labs/interfaces","state":"closed","title":"Limit name length for Airstream campaigns","type":"issue","updatedAt":"2024-07-05T16:16:13Z","url":"https://github.com/sablier-labs/interfaces/issues/938"},{"author":"PaulRBerg","body":"Aave tokens and Compound V3 tokens don't work on Sablier Lockup because the interest is accrued in the Sablier contract tiself and not by the users.\r\n\r\nTo prevent accidental loss, the UI should not allow users to create streams with these tokens.\r\n\r\nContext on Slack:\r\n\r\nhttps://app.sablier.com/stream/LL2-42161-12314/","createdAt":"2024-04-25T13:11:39Z","labels":["type: feature","priority: 1","effort: medium"],"number":937,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable deposits with Aave Tokens and Compound V3 tokens","type":"issue","updatedAt":"2024-07-05T16:14:55Z","url":"https://github.com/sablier-labs/interfaces/issues/937"},{"author":"PaulRBerg","body":"This button in the Airstreams UI would be better called \"Filter\":\r\n\r\n<img width=\"1219\" alt=\"SCR-20240425-mnlu\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/27f6c164-a81e-4656-b1ca-b2f7dd4f40b8\">\r\n","createdAt":"2024-04-25T13:04:20Z","labels":["priority: 3","effort: low","type: refactor","work: clear"],"number":936,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"Search\" button to \"Filter\" in Airstreams","type":"issue","updatedAt":"2024-04-26T12:48:06Z","url":"https://github.com/sablier-labs/interfaces/issues/936"},{"author":"PaulRBerg","body":"Spotted by @razgraf. It should say \"to the right\" instead of \"to the risk\":\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/0e5079f1e7651209d8d8648b19c93e64a94ab03e/src/SablierV2NFTDescriptor.sol#L213","createdAt":"2023-05-31T14:51:17Z","labels":[],"number":533,"repository":"sablier-labs/lockup","state":"closed","title":"Typo in comment in `generateAccentColor`","type":"issue","updatedAt":"2023-05-31T15:37:14Z","url":"https://github.com/sablier-labs/lockup/issues/533"},{"author":"PaulRBerg","body":"We need to change all OpenZeppelin imports to be `@openzeppelin/contracts` instead of `@openzeppelin` because the Node.js package [`@openzeppelin/contracts`](https://www.npmjs.com/package/@openzeppelin/contracts) cannot be remapped.","createdAt":"2023-05-30T17:09:30Z","labels":[],"number":525,"repository":"sablier-labs/lockup","state":"closed","title":"Custom OpenZeppelin remapping is breaking for Node.js users","type":"issue","updatedAt":"2023-05-30T17:28:40Z","url":"https://github.com/sablier-labs/lockup/issues/525"},{"author":"PaulRBerg","body":"The upper bulb of the SVG hourglass should be hidden when the stream's status is `SETTLED`. This is not currently the case.","createdAt":"2023-05-30T16:55:59Z","labels":[],"number":524,"repository":"sablier-labs/lockup","state":"closed","title":"Hide upper bulb in SVG on `SETTLED`","type":"issue","updatedAt":"2023-05-30T21:21:34Z","url":"https://github.com/sablier-labs/lockup/issues/524"},{"author":"PaulRBerg","body":"## Idea\r\n\r\nIt would be nice to add an invariant test for the `tokenURI` implemented in https://github.com/sablier-labs/v2-core/pull/440.\r\n\r\nWe could do it like this:\r\n\r\n- Install [`svglint`](https://github.com/birjj/svglint) as a Node.js dev dependency\r\n- Use [`vm.ffi`](https://book.getfoundry.sh/cheatcodes/ffi) to run `pnpm svglint` from within Solidity\r\n- Define an invariant test like the one in the code snippet below\r\n- Use Foundry's recently introduced [inline test configuration](https://book.getfoundry.sh/reference/config/inline-test-config) to override the default number of runs - as this would be a heavy-load test, which would read and write content to files.\r\n\r\nI have tried to write it myself now, but I encountered [this bug in Foundry](https://github.com/foundry-rs/foundry/issues/5080), so I will just mark this as \"backlog\" for the time being.\r\n\r\n## Code Snippet\r\n\r\n```solidity\r\nimport { Base64 } from \"solady/utils/Base64.sol\";\r\nimport { LibString } from \"solady/utils/LibString.sol\";\r\n\r\n/// @dev Extracts the SVG from a base-64 encoded token URI.\r\nfunction extractSVG(string memory uri) internal returns (string memory) {\r\n    string memory decodedURI = string(Base64.decode(uri));\r\n    string memory sanitizedURI = decodedURI.replace({ search: \"data:application/json;base64,\", replacement: \"\" });\r\n    string memory image = vm.parseJsonString(sanitizedURI, \".image\");\r\n    string memory sanitizedImage = image.replace({ search: \"data:image/svg+xml;base64,\", replacement: \"\" });\r\n    string memory svg = string(Base64.decode(sanitizedImage));\r\n    return svg;\r\n}\r\n\r\n/// forge-config: default.invariant.depth = 1\r\n/// forge-config: default.invariant.runs = 1\r\nfunction invariant_TokenURI() external useCurrentTimestamp {\r\n    uint256 lastStreamId = lockupStore.lastStreamId();\r\n    for (uint256 i = 0; i < lastStreamId; ++i) {\r\n        uint256 streamId = lockupStore.streamIds(i);\r\n\r\n        // Skip burned NFTs.\r\n        if (lockup.getRecipient(streamId) == address(0)) {\r\n            continue;\r\n        }\r\n\r\n        string memory uri = lockup.tokenURI(streamId);\r\n        string memory svg = extractSVG(uri);\r\n        string memory filePath = \"test/nft.svg\";\r\n        vm.writeFile(filePath, svg);\r\n\r\n        string[] memory inputs = new string[](3);\r\n        inputs[0] = \"pnpm\";\r\n        inputs[1] = \"svglint\";\r\n        inputs[2] = filePath;\r\n\r\n        // TODO: check result\r\n        bytes memory response = vm.ffi(inputs);\r\n        console2.logBytes(response);\r\n    }\r\n}\r\n```","createdAt":"2023-05-30T12:16:13Z","labels":["effort: high","type: test","work: complicated","priority: 3"],"number":519,"repository":"sablier-labs/lockup","state":"closed","title":"Write invariant test for `tokenURI`","type":"issue","updatedAt":"2024-07-10T19:02:46Z","url":"https://github.com/sablier-labs/lockup/issues/519"},{"author":"PaulRBerg","body":"Starting v0.096, they have apparently fixed the [`evm_version` issue](https://github.com/sablier-labs/v2-core/pull/510).\r\n\r\nRef https://github.com/Vectorized/solady/issues/430.","createdAt":"2023-05-29T08:00:24Z","labels":[],"number":517,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to Solady 0.098","type":"issue","updatedAt":"2023-05-30T15:33:51Z","url":"https://github.com/sablier-labs/lockup/issues/517"},{"author":"PaulRBerg","body":"The goal is to purposefully differentiate certain deployments by passing a salt.","createdAt":"2023-05-28T19:38:11Z","labels":[],"number":516,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor deterministic deployment scripts to accept the salt as an optional input","type":"issue","updatedAt":"2023-05-30T22:08:05Z","url":"https://github.com/sablier-labs/lockup/issues/516"},{"author":"PaulRBerg","body":"This is an exceptional edge case, but the idea is that if an ERC-20 asset contains a double quote sign (`\"`) in its symbol, this would break the NFT JSON generated here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/18b7177350a54205c6242a7598c9ca640d8f4f41/src/SablierV2NFTDescriptor.sol#L81-L104\r\n\r\nAs per my findings shared [here](https://github.com/Uniswap/v3-periphery/pull/104#issuecomment-1566185565), almost no ERC-20 token contains double quotes in its symbol. Therefore, I don't find it worth it to implement a subroutine for handling this special case now (like Uniswap did in [`escapeQuotes`](https://github.com/Uniswap/v3-periphery/blob/6cce88e63e176af1ddb6cc56e029110289622317/contracts/libraries/NFTDescriptor.sol#L85-L105)).\r\n\r\nHowever, I created this issue to acknowledge the existence of the possibility of breaking the NFT JSON in this way, and to track the implementation for a potential fix later down the line.","createdAt":"2023-05-28T16:20:42Z","labels":[],"number":514,"repository":"sablier-labs/lockup","state":"closed","title":"Escape double quotes in ERC-20 symbols","type":"issue","updatedAt":"2023-11-23T15:58:57Z","url":"https://github.com/sablier-labs/lockup/issues/514"},{"author":"PaulRBerg","body":"As per @andreivladbrg's [findings](https://www.notion.so/sablier/Investigate-how-high-MAX_SEGMENT_COUNT-can-be-c92db3bebae1483aa6e7eb5d47334dd7?pvs=4), some chains (e.g. Avalanche) have much smaller block gas limits compared to Ethereum (8M on Avalanche versus 30M on Ethereum).\r\n\r\nBecause of this, we should preemptively lower the `MAX_SEGMENT_COUNT` from 1,000 to a value like 300.","createdAt":"2023-05-19T12:48:29Z","labels":[],"number":505,"repository":"sablier-labs/lockup","state":"closed","title":"Update default `MAX_SEGMENT_COUNT`","type":"issue","updatedAt":"2023-05-24T09:47:31Z","url":"https://github.com/sablier-labs/lockup/issues/505"},{"author":"PaulRBerg","body":"See https://app.warp.dev/block/vzGRlZXYp5PjZj6uRDpLeF\r\n\r\nThe other problem is that we are not running the `Precompiles_Test` tests in CI:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/133f878dd95232a9e48047edc81b3ec601d8459b/.github/workflows/ci.yml#L121","createdAt":"2023-05-19T11:56:52Z","labels":[],"number":503,"repository":"sablier-labs/lockup","state":"closed","title":"Precompiles tests are failing","type":"issue","updatedAt":"2023-05-24T14:10:41Z","url":"https://github.com/sablier-labs/lockup/issues/503"},{"author":"PaulRBerg","body":"The new directory tree in `test` should look like this:\r\n\r\n```tree\r\ntest/\r\n└── integration/\r\n    ├── basic/\r\n    ├── fuzz/\r\n    └── shared/\r\n```\r\n\r\nRefs:\r\n\r\n- https://github.com/sablier-labs/v2-core/discussions/468\r\n- https://twitter.com/PaulRBerg/status/1347884079421812737","createdAt":"2023-05-18T12:09:35Z","labels":[],"number":500,"repository":"sablier-labs/lockup","state":"closed","title":"Unify the \"unit\" and \"test\" tests under an \"integration\" directory","type":"issue","updatedAt":"2023-05-24T14:10:50Z","url":"https://github.com/sablier-labs/lockup/issues/500"},{"author":"PaulRBerg","body":"I just realized that a neat way to address the problem described in https://github.com/sablierhq/v2-core/discussions/486 would be to modify the `isCancelable` field of the stream entity by setting it to `false` when the stream is settled.\r\n\r\nDoing so would resolve the issue that the `isCancelable` function returns `false` while the `getStream` function returns a struct that has `isCancelable` set to `true`.","createdAt":"2023-05-17T17:43:04Z","labels":[],"number":497,"repository":"sablier-labs/lockup","state":"closed","title":"Set `isCancelable` to `false` in `getStream` for settled streams","type":"issue","updatedAt":"2023-05-21T14:58:00Z","url":"https://github.com/sablier-labs/lockup/issues/497"},{"author":"PaulRBerg","body":"The `warp` handler method I added in https://github.com/sablierhq/v2-core/pull/471 is not working because Foundry does not preserve state between invariant runs:\r\n\r\nhttps://github.com/foundry-rs/foundry/issues/3005\r\n\r\nTo fix this, we need to save a timestamp variable in storage, and apply a modifier to all handler target functions, just like Maple does:\r\n\r\nhttps://github.com/maple-labs/maple-core-v2/blob/00f01ae7175885f8d49ac201a1c72465e320b2f6/tests/invariants/BaseInvariants.t.sol#L34-L37\r\n\r\nRelated discussion: https://github.com/foundry-rs/forge-std/issues/376","createdAt":"2023-05-16T14:00:06Z","labels":[],"number":494,"repository":"sablier-labs/lockup","state":"closed","title":"Fix warp in invariant tests","type":"issue","updatedAt":"2023-05-21T14:26:58Z","url":"https://github.com/sablier-labs/lockup/issues/494"},{"author":"PaulRBerg","body":"The invariant tests for the `LockupDynamic` contract are stalling:\r\n\r\nhttps://github.com/sablierhq/v2-core/actions/runs/4984576283/jobs/8923448033?pr=492","createdAt":"2023-05-15T20:40:42Z","labels":[],"number":493,"repository":"sablier-labs/lockup","state":"closed","title":"Invariant tests for `LockupDynamic` are stalling","type":"issue","updatedAt":"2023-05-16T13:52:38Z","url":"https://github.com/sablier-labs/lockup/issues/493"},{"author":"razgraf","body":"As a result of the various discussions re. Flash Loans, Sablier V2 will not implement them by default in every deployment. Deployers/integrators may choose to use it only for specialized instances (e.g. contracts targeted towards non-governance tokens, stablecoins etc.).\r\n\r\nAt the moment, Flash Loans support exists in the codebase but is not implemented by the core contracts.\r\n\r\nRegardless of the explanations provided in the documentation website, I suggest adding some context closer to the code itself. This way, someone `CMD+F`-ing the repository can quickly find why the abstract is present, but not used in the current setup. Even a simple but explicit reference to the docs would suffice.","createdAt":"2023-05-15T14:49:30Z","labels":[],"number":489,"repository":"sablier-labs/lockup","state":"closed","title":"Document the logic for conditionally extending `SablierV2FlashLoan.sol`","type":"issue","updatedAt":"2023-05-17T17:26:35Z","url":"https://github.com/sablier-labs/lockup/issues/489"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/foundry-rs/book/pull/895\r\n- https://github.com/foundry-rs/foundry/pull/4912","createdAt":"2023-05-12T14:01:48Z","labels":[],"number":487,"repository":"sablier-labs/lockup","state":"closed","title":"Re-enable `expectCall` tests in `cancelMultiple` and `withdrawMultiple`","type":"issue","updatedAt":"2023-05-14T17:12:30Z","url":"https://github.com/sablier-labs/lockup/issues/487"},{"author":"PaulRBerg","body":"See https://github.com/foundry-rs/foundry/pull/4826#issuecomment-1543962477.","createdAt":"2023-05-11T18:00:11Z","labels":[],"number":484,"repository":"sablier-labs/lockup","state":"closed","title":"Replace `changePrank` with `vm.startPrank`","type":"issue","updatedAt":"2023-05-15T20:50:24Z","url":"https://github.com/sablier-labs/lockup/issues/484"},{"author":"PaulRBerg","body":"See the release notes for v0.8.20: https://github.com/ethereum/solidity/releases/tag/v0.8.20\r\n\r\nWhat's relevant for Sablier:\r\n\r\n- New default EVM version Shanghai (see my [tweet](https://twitter.com/PaulRBerg/status/1656699945817194508))\r\n- Performance improvements for via IR\r\n- NatSpec support for structs and events\r\n- Fixes the [events defined in libraries bug](https://github.com/sablierhq/v2-core/issues/215), in case we ever want to switch back to the `libraries/Events.sol` approach\r\n\r\nTodos:\r\n\r\n- [ ] Change the `solc` version in `foundry.toml` (ref: https://github.com/foundry-rs/foundry/issues/4916)\r\n- [ ] Figure out a way to selectively specify the EVM version depending on the deployment chain (see my [tweet](https://twitter.com/PaulRBerg/status/1656715246851981335))\r\n- [ ] Regenerate SMTChecker report","createdAt":"2023-05-11T17:42:03Z","labels":[],"number":483,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to latest Solidity","type":"issue","updatedAt":"2023-09-21T07:44:06Z","url":"https://github.com/sablier-labs/lockup/issues/483"},{"author":"PaulRBerg","body":"In the tests, the default start time is equal to the current time:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/021362b4953e19d227611278a3e0c225d458e170/test/utils/Defaults.sol#L50\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/021362b4953e19d227611278a3e0c225d458e170/test/Base.t.sol#L90\r\n\r\nThis is not great because it is not a realistic scenario - in the real world, very few streams created via `createWithMilestones` and `createWithRange` will have a start time that matches exactly the current `block.timestamp`.\r\n\r\nWe should adjust the default start time to be in the future.","createdAt":"2023-05-10T19:33:21Z","labels":[],"number":481,"repository":"sablier-labs/lockup","state":"closed","title":"Adjust the default start time to be in the future","type":"issue","updatedAt":"2023-05-16T11:48:32Z","url":"https://github.com/sablier-labs/lockup/issues/481"},{"author":"PaulRBerg","body":"## Error Name\r\n\r\nThe issue with the current name of [this error](https://github.com/sablierhq/v2-core/blob/11a57870cf603895b5d70a950fead68651d35e2b/src/libraries/Errors.sol#L54) is that it is misleading when the `endTime` provided by the user is equal to `block.timestamp`, i.e. the end time is exactly in the present. To clear up any doubt, we should rename the error to `EndTimeNotInTheFuture`.\r\n\r\n```solidity\r\n/// @notice Thrown when trying to create a stream with an end time not in the future.\r\nerror SablierV2Lockup_EndTimeNotInTheFuture(uint40 currentTime, uint40 endTime);\r\n```\r\n\r\n## State Trees\r\n\r\nSeparately, I have realized that some of our state tree branches are confusing and/ or incomplete. For example, the `streamedAmountOf` unit test for `LockupLinear`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/7b4d237e99ecbaf15848ab15a4122be40e8fe4e6/test/unit/lockup-linear/streamed-amount-of/streamedAmountOf.tree\r\n\r\nA branch is missing in this tree - the branch when the cliff time is in the present. The tree should be refactored to something like this:\r\n\r\n```tree\r\n└── when the stream's status is \"STREAMING\"\r\n   ├── when the cliff time is in the past\r\n   │  └── it should return zero\r\n   ├── when the cliff time is in the present\r\n   │  └── it should return the correct streamed amount\r\n   └── when the cliff time is not in the future\r\n      └── it should return the correct streamed amount\r\n```","createdAt":"2023-05-10T14:33:29Z","labels":[],"number":479,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `EndTimeInThePast` to `EndTimeNotInTheFuture`","type":"issue","updatedAt":"2023-05-15T21:02:29Z","url":"https://github.com/sablier-labs/lockup/issues/479"},{"author":"PaulRBerg","body":"@andreivladbrg has discovered three mistakes in the \"inherited components\" comments:\r\n\r\n- https://github.com/sablierhq/v2-core/blob/83e8641e6a74b302dd2d23d58668f127d9d07269/src/abstracts/SablierV2Base.sol#L18\r\n- https://github.com/sablierhq/v2-core/blob/83e8641e6a74b302dd2d23d58668f127d9d07269/src/interfaces/ISablierV2Lockup.sol#L14\r\n- https://github.com/sablierhq/v2-core/blob/83e8641e6a74b302dd2d23d58668f127d9d07269/src/SablierV2LockupLinear.sol#L41\r\n\r\nThe first should say \"1 inherited component, and the second \"4 inherited components\".","createdAt":"2023-05-09T15:49:42Z","labels":[],"number":475,"repository":"sablier-labs/lockup","state":"closed","title":"Fix number of inherited components","type":"issue","updatedAt":"2023-05-09T16:04:56Z","url":"https://github.com/sablier-labs/lockup/issues/475"},{"author":"PaulRBerg","body":"In #444, we started passing the address of the Sablier contract as a parameter to the hook function. However, I now realize that we should remove it. I made the following realizations during my work on the proxy plugin (see https://github.com/sablierhq/v2-periphery/pull/29):\r\n\r\n1. The original purpose for which we implemented the hook was a misconception. We used to think that the `lockup` parameter is needed because there is no other way to obtain it in a delegate call context, but that is wrong because `msg.sender` is the Sablier contract.\r\n2. `lockup` is a user-provided parameter, so it can be gamed and hook implementors must find another way to fend malicious callers off (see https://github.com/sablierhq/v2-periphery/issues/37). Also, in all legitimate use cases, `msg.sender == address(lockup)`, so `lockup` does not provide any information that is not already provided by the call.","createdAt":"2023-05-08T09:14:15Z","labels":[],"number":470,"repository":"sablier-labs/lockup","state":"closed","title":"Remove `lockup` parameter from hooks","type":"issue","updatedAt":"2023-05-15T20:05:36Z","url":"https://github.com/sablier-labs/lockup/issues/470"},{"author":"PaulRBerg","body":"See https://github.com/foundry-rs/forge-std/issues/349 and https://github.com/foundry-rs/forge-std/pull/350.","createdAt":"2023-05-08T08:13:11Z","labels":[],"number":469,"repository":"sablier-labs/lockup","state":"closed","title":"Switch to silent bound","type":"issue","updatedAt":"2023-05-15T20:05:59Z","url":"https://github.com/sablier-labs/lockup/issues/469"},{"author":"PaulRBerg","body":"I just realized that almost no withdrawals are made in the invariant tests because of the lack of `vm.warp` cheatcodes.\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/83e8641e6a74b302dd2d23d58668f127d9d07269/test/invariant/handlers/LockupHandler.t.sol#L149-L228\r\n\r\nWithdrawals can be made only when `range.start == range.cliff`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/83e8641e6a74b302dd2d23d58668f127d9d07269/test/invariant/handlers/LockupLinearCreateHandler.t.sol#L90\r\n\r\nOne possible way to address this issue would be to add a new function in `LockupHandler` called `warp` (or a variation thereof) that warps at a random future timestamp (the warping would be forwards in time, always).","createdAt":"2023-05-02T16:51:30Z","labels":[],"number":466,"repository":"sablier-labs/lockup","state":"closed","title":"Hardly any withdrawals are performed in the invariant tests","type":"issue","updatedAt":"2023-05-15T20:04:09Z","url":"https://github.com/sablier-labs/lockup/issues/466"},{"author":"PaulRBerg","body":"I just noticed that the comment on this line is incorrect:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0d37b4b11f7fec6d47ecc1e6d7ca4bf36479778b/test/unit/lockup-linear/Linear.t.sol#L47-L48\r\n\r\n`Base_Test.setUp()` is actually run twice: once in `Unit_Test.setUp()`, and once in `Linear_Shared_Test.setUp()`.\r\n\r\nTurns out that we don't actually need to call `Base_Test.setUp()` in `Lockup_Shared_Test`; we can delete this line:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0d37b4b11f7fec6d47ecc1e6d7ca4bf36479778b/test/shared/lockup/Lockup.t.sol#L34","createdAt":"2023-05-01T21:05:23Z","labels":[],"number":464,"repository":"sablier-labs/lockup","state":"closed","title":"`Base_Test.setUp()` is run twice in shared tests","type":"issue","updatedAt":"2023-05-02T10:01:51Z","url":"https://github.com/sablier-labs/lockup/issues/464"},{"author":"PaulRBerg","body":"We have written fuzz tests for `cancelMultiple` but we are not running them:\r\n\r\n- https://github.com/sablierhq/v2-core/blob/b595323039e0a9674a31261ee8402e693538fbbc/test/fuzz/lockup/linear/Linear.t.sol\r\n- https://github.com/sablierhq/v2-core/blob/b595323039e0a9674a31261ee8402e693538fbbc/test/fuzz/lockup/dynamic/Dynamic.t.sol","createdAt":"2023-05-01T14:00:26Z","labels":[],"number":463,"repository":"sablier-labs/lockup","state":"closed","title":"Fuzz tests for `cancelMultiple` are not run","type":"issue","updatedAt":"2023-05-14T15:57:06Z","url":"https://github.com/sablier-labs/lockup/issues/463"},{"author":"PaulRBerg","body":"See:\r\n\r\n- https://github.com/foundry-rs/foundry/pull/4833\r\n- https://github.com/foundry-rs/forge-std/releases/tag/v1.5.4?utm_source=substack&utm_medium=email\r\n\r\nWe have to bump PRBTest and switch to using the new `expectCall` overload with a `count` parameter.","createdAt":"2023-04-29T07:58:18Z","labels":[],"number":461,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor multiple expect calls to use the new \"count\" parameter","type":"issue","updatedAt":"2023-05-01T11:16:59Z","url":"https://github.com/sablier-labs/lockup/issues/461"},{"author":"PaulRBerg","body":"The name of the `protocolRevenues` mapping is unnecessarily long because there is no other on-chain source of revenues. The fact that the revenues go to the protocol is implicit in the fact that Sablier V2 is a smart contract-based system.","createdAt":"2023-04-27T10:35:10Z","labels":[],"number":460,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor `protocolRevenues` to just `revenues`","type":"issue","updatedAt":"2023-05-09T10:27:09Z","url":"https://github.com/sablier-labs/lockup/issues/460"},{"author":"PaulRBerg","body":"## Problem\r\n\r\n@saxenism provided insightful feedback in finding [`[I-2]`](https://hackmd.io/@95mVoV38TzWVdIV1iEYrag/ByHZdARxh) from his audit report:\r\n\r\n> Consider the time when the `block.timestamp` is past the `endTime` for the stream and the recipient hasn’t removed all of their money. The stream would still be in `ACTIVE` state, even though it is past the `endTime`, this could be confusing for end users or developers who build on top of Sablier.\r\n\r\nHe correctly pointed out that the `ACTIVE` enum value is misleading when the end time is in the past. Furthermore, the enum is also confusing when the start time is in the future, as the stream is not actively streaming. Essentially, the `Status` enum is overly simplistic and fails to accurately represent the nuances of lockup streaming.\r\n\r\nThe introduction of the pseudo-status \"settled\" in #422 has only exacerbated this confusion. In that discussion, I referred to \"settled\" as a \"sub-status\" of the `ACTIVE` status. However, upon further reflection, this classification seems nonsensical. Instead, \"settled\" should be considered a separate status altogether.\r\n\r\n## Solution\r\n\r\n- Extend the `Status` enum\r\n    - Delete `ACTIVE`\r\n    - Add `PENDING`: status when start time in the future\r\n    - Add `STREAMING`: status when the start time in the past and the refundable amount is not zero\r\n    - Add `SETTLED`: status when the refundable amount is zero\r\n- Delete the `status` field from stream structs\r\n- Add three new flags in the stream structs: `isStream` (for checking nullness), `isCanceled`, and `isDepleted`\r\n- Rewrite the `getStatus` function to compute the status dynamically (based on `block.timestamp`)\r\n\r\nHere's the new enum:\r\n\r\n```solidity\r\nenum Status {\r\n    PENDING,\r\n    STREAMING,\r\n    SETTLED,\r\n    CANCELED,\r\n    DEPLETED\r\n}\r\n```\r\n\r\n## Diagrams\r\n\r\n|    Before    |     After    |\r\n| :----------: | :----------: |\r\n|  ![Before](https://i.imgur.com/n9LXrGN.png)  |  ![After](https://i.postimg.cc/sfHsBkWB/mermaid-diagram-2023-04-25-190035.png)  |","createdAt":"2023-04-25T16:05:35Z","labels":[],"number":459,"repository":"sablier-labs/lockup","state":"closed","title":"Status enum is overly simplistic","type":"issue","updatedAt":"2023-05-14T17:12:56Z","url":"https://github.com/sablier-labs/lockup/issues/459"},{"author":"PaulRBerg","body":"As @IaroslavMazur pointed out in his audit report conducted in March 2023, the name of this custom error is long:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/2b71d0762706ad04cdad58e37d2c6db0b6274496/src/libraries/Errors.sol#L82-L84\r\n\r\nHe suggested renaming the error to `AmountTooBig`, but I did not like this wording because it can easily be confused with something else, e.g. an overflow, so I ended up brushing the issue aside.\r\n\r\nIn the meantime, I have stumbled upon the term \"overdraw\", which is perfect given the context of the withdraw function; let me show you the definition from [Cambridge Dictionary](https://www.merriam-webster.com/dictionary/overdraw):\r\n\r\n> to take more money out of your bank account than the account contains\r\n\r\nTherefore, we should rename the error like this:\r\n\r\n```solidity\r\nerror SablierV2Lockup_Overdraw\r\n```","createdAt":"2023-04-25T11:58:00Z","labels":[],"number":458,"repository":"sablier-labs/lockup","state":"closed","title":"Shorten name of `WithdrawAmountGreaterThanWithdrawableAmount` error","type":"issue","updatedAt":"2023-05-14T15:57:06Z","url":"https://github.com/sablier-labs/lockup/issues/458"},{"author":"PaulRBerg","body":"The `renounce` functions allows settled streams to be renounced:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/2b71d0762706ad04cdad58e37d2c6db0b6274496/src/abstracts/SablierV2Lockup.sol#L147-L155\r\n\r\nBut this is a pointless operation, because settled streams cannot be canceled anymore:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/2b71d0762706ad04cdad58e37d2c6db0b6274496/src/SablierV2LockupLinear.sol#L370-L372","createdAt":"2023-04-24T13:37:33Z","labels":[],"number":457,"repository":"sablier-labs/lockup","state":"closed","title":"Settled streams should not be renounceable","type":"issue","updatedAt":"2023-05-14T16:03:50Z","url":"https://github.com/sablier-labs/lockup/issues/457"},{"author":"PaulRBerg","body":"The `_withdrawableAmountOf` implementations in `SablierV2LockupLinear` and `SablierV2LockupDynamic` can be moved to the `SablierV2Lockup` abstract.","createdAt":"2023-04-24T08:45:35Z","labels":[],"number":455,"repository":"sablier-labs/lockup","state":"closed","title":"Dedup `_withdrawableAmountOf`","type":"issue","updatedAt":"2023-05-14T16:03:46Z","url":"https://github.com/sablier-labs/lockup/issues/455"},{"author":"PaulRBerg","body":"Since https://github.com/sablierhq/v2-core/pull/451, our number of external dependencies has grown to *nine*. This is a lot, and it is a problematic state of affairs due to two reasons:\r\n\r\n1. **Slow installation times**. The longer it takes for someone to install our repo, the less likely it is that they will have the patience to wait til the process finishes.\r\n1. **Security**. All else being equal, the fewer external dependencies a project has, the better.\r\n\r\nTherefore, I suggest we hardcode the logic we need from the following libraries:\r\n\r\n- [x] `ERC3156`, because since https://github.com/sablierhq/v2-core/pull/429, this code is not even used anymore (on `main`, at least). We could copy the `IERC3156FlashBorrower` and the `IERC3156FlashLender` interfaces.\r\n- [x] `prb-contracts`; we only need `NonCompliantERC20`\r\n- [x] `solidity-generators`; the only function we need from here is `arange`.","createdAt":"2023-04-21T18:20:06Z","labels":[],"number":452,"repository":"sablier-labs/lockup","state":"closed","title":"Hard code logic from `lib` to reduce number of external dependencies","type":"issue","updatedAt":"2023-05-15T20:12:57Z","url":"https://github.com/sablier-labs/lockup/issues/452"},{"author":"PaulRBerg","body":"The `deployProtocol` test helper runs the `DeployProtocol` script like this:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0b71ea456e8817975cda9460ec5b77b56d3e5cf6/test/Base.t.sol#L175-L179\r\n\r\nThe problem with this approach is that the `setUp` function in the `BaseScript` does not get run:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0b71ea456e8817975cda9460ec5b77b56d3e5cf6/script/shared/Base.s.sol#L11-L14\r\n\r\nThis can be easily shown by adding a `console2.log` in the `broadcaster` modifier. Doing will produce the following console logs:\r\n\r\n```text\r\nLogs:\r\n  deployer is:  0x0000000000000000000000000000000000000000\r\n  deployer is:  0x0000000000000000000000000000000000000000\r\n  deployer is:  0x0000000000000000000000000000000000000000\r\n```\r\n\r\nNow, it just so happens that for the tests in V2 Core, this doesn't have any relevance because the `deployer` is not actually used anywhere (it is only used in `BootstrapProtocol`, which is not imported in the tests).\r\n\r\nHowever, integrating projects may depend upon the `BaseScript`, and they may assume that the `deployer` has a particular value (i.e. the first account as per the mnemonic they set).\r\n\r\nThus, we should update the `BaseScript` to use a constructor instead of a `setUp` function, like this:\r\n\r\n```solidity\r\nconstructor() {\r\n    mnemonic = vm.envString(\"MNEMONIC\");\r\n    (deployer, ) = deriveRememberKey({ mnemonic: mnemonic, index: 0 });\r\n}\r\n```","createdAt":"2023-04-19T20:16:20Z","labels":[],"number":447,"repository":"sablier-labs/lockup","state":"closed","title":"Zero deployer address when running scripts in tests","type":"issue","updatedAt":"2023-04-20T08:47:06Z","url":"https://github.com/sablier-labs/lockup/issues/447"},{"author":"PaulRBerg","body":"External repos integrating V2 Core may want to run their tests against the real version of the protocol, i.e. the one compiled with via IR.\r\n\r\nIt is currently not possible to do this unless the integrators (i) use the exact same Solidity compiler settings as we do and (ii) write a subroutine that deploys conditionally from precompiled source (similar to our [`deployProtocol`](https://github.com/sablierhq/v2-core/blob/f18ff7/test/Base.t.sol#L154)). These are obviously unrealistic expectations.\r\n\r\nThe solution is to provide a utility similar to Permit2's [`deployPermit2`](https://github.com/Uniswap/permit2/blob/db96e06278b78123970183d28f502217bef156f4/test/utils/DeployPermit2.sol#L12). It remains to be seen, however, how we will cater for our constructor arguments (we may need to use [`deployCode`](https://github.com/foundry-rs/forge-std/blob/f06ad8944e436e639bce09cfccc55466d99e79d8/src/StdCheats.sol#L366), but I'm not sure).","createdAt":"2023-04-19T14:37:32Z","labels":[],"number":445,"repository":"sablier-labs/lockup","state":"closed","title":"Provide utility to deploy bytecode precompiled with via IR","type":"issue","updatedAt":"2023-05-01T10:58:06Z","url":"https://github.com/sablier-labs/lockup/issues/445"},{"author":"andreivladbrg","body":"**Later edit:** the proxy fallback function uses [delegatecall](https://github.com/PaulRBerg/prb-proxy/blob/7a3a764323dcc45b177bc3401dfadf5913ff7cc8/src/PRBProxy.sol#L59), so the `msg.sender` remains the same, i.e. the Sablier contract. Although the Sablier contract is not explicitly required in this scenario, it may still be helpful to add the `lockup` parameter.\r\n\r\nWhile attempting to resolve [issue #19](https://github.com/sablierhq/v2-periphery/issues/19) in the periphery repository, I faced the problem of being unable to retrieve the asset used for the stream. \r\n\r\nIn the [plugin](https://github.com/PaulRBerg/prb-proxy/blob/main/src/interfaces/IPRBProxyPlugin.sol) scenario, the traditional flow where the `msg.sender` in the hook implementation is the Sablier contract itself (caller --> lockup --> hook) is not applicable. \r\n\r\nInstead, the flow will be:\r\n- Recipient calls `cancel` function\r\n- Sablier contract calls `onStreamCanceled` on the proxy contract\r\n- No implementation in the proxy, so the fallback plugin is called\r\n- ~~In the plugin implementation the `msg.sender` will be the proxy contract~~\r\n\r\nThe solution to this issue is to add a new parameter in the hooks for the `ISablierV2Lockup` contract.\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0eadb004f3d4410cf2e4d2a8e83a6112bb475ff5/src/interfaces/hooks/ISablierV2LockupSender.sol#L22-L27\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0eadb004f3d4410cf2e4d2a8e83a6112bb475ff5/src/SablierV2LockupLinear.sol#L394-L399","createdAt":"2023-04-19T13:46:06Z","labels":[],"number":443,"repository":"sablier-labs/lockup","state":"closed","title":"Add lockup parameter in hooks","type":"issue","updatedAt":"2023-04-20T17:52:36Z","url":"https://github.com/sablier-labs/lockup/issues/443"},{"author":"PaulRBerg","body":"To be able to publish a functional Node.js package, we need to install the following Node.js dependencies, and list them in `package.json`:\r\n\r\n- [`@prb/math`](https://www.npmjs.com/package/@prb/math)\r\n- [`@openzeppelin/contracts`](https://www.npmjs.com/package/@openzeppelin/contracts)\r\n","createdAt":"2023-04-17T15:02:10Z","labels":[],"number":439,"repository":"sablier-labs/lockup","state":"closed","title":"Install missing Node.js dependencies ","type":"issue","updatedAt":"2023-05-15T20:25:43Z","url":"https://github.com/sablier-labs/lockup/issues/439"},{"author":"PaulRBerg","body":"Refactor the `Constants` and the `defaultParams` to follow the approach we have taken in the periphery repo:\r\n\r\nhttps://github.com/sablierhq/v2-periphery/blob/main/test/helpers/Defaults.t.sol\r\n\r\nKudos to @andreivladbrg for coming up with this design.","createdAt":"2023-04-17T14:39:21Z","labels":[],"number":438,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor the default constant and params in the tests","type":"issue","updatedAt":"2023-05-14T16:03:40Z","url":"https://github.com/sablier-labs/lockup/issues/438"},{"author":"PaulRBerg","body":"Our current CI workflow is rather wasteful. We run the fuzz tests 50k times on every commit:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/6362f84642debc4d48109605db800e54163e726b/.github/workflows/ci.yml#L132\r\n\r\nTo optimize both cost and developer experience, it would be more effective to perform deep fuzz testing only when required. We can achieve this by:\r\n\r\n1. Allowing Sablier team members to initiate the deep fuzz testing manually.\r\n2. Scheduling the deep fuzz testing to run automatically on a weekly basis.","createdAt":"2023-04-16T11:54:18Z","labels":[],"number":437,"repository":"sablier-labs/lockup","state":"closed","title":"Tone down fuzzing in CI","type":"issue","updatedAt":"2023-05-15T09:07:06Z","url":"https://github.com/sablier-labs/lockup/issues/437"},{"author":"PaulRBerg","body":"Once we fix https://github.com/cantinasec/sablier/issues/2, we should write a fuzz test that shows that `streamedAmountOf` is a monotonic function, i.e. the amount streamed over time never goes down.","createdAt":"2023-04-06T13:39:11Z","labels":[],"number":421,"repository":"sablier-labs/lockup","state":"closed","title":"Write fuzz test that shows `streamedAmountOf` is a monotonic function","type":"issue","updatedAt":"2023-04-13T20:21:43Z","url":"https://github.com/sablier-labs/lockup/issues/421"},{"author":"PaulRBerg","body":"This is a follow-up issue to #243.\r\n\r\nSlither v0.9.3 supports user-defined value types, so we can now configure it to run in CI as described [here](https://github.com/ScopeLift/foundry-template#slither).","createdAt":"2023-04-03T13:55:35Z","labels":[],"number":418,"repository":"sablier-labs/lockup","state":"closed","title":"Integrate Slither for continuous static analysis","type":"issue","updatedAt":"2023-11-23T15:59:47Z","url":"https://github.com/sablier-labs/lockup/issues/418"},{"author":"PaulRBerg","body":"The `invariant_NullStatus` invariants are never actually run, because the function iterates over a list of created streams. Created streams are never null.\r\n\r\nThese functions should be refactored to only check the non-null cases:\r\n\r\n- https://github.com/sablierhq/v2-core/blob/1dab515ca33fac11c0378c3c4cd17b4b6e1ca6a5/test/invariant/lockup/linear/Linear.t.sol#L75\r\n- https://github.com/sablierhq/v2-core/blob/1dab515ca33fac11c0378c3c4cd17b4b6e1ca6a5/test/invariant/lockup/dynamic/Dynamic.t.sol#L76\r\n\r\nSimilarly, the null status check [here](https://github.com/sablierhq/v2-core/blob/1dab515ca33fac11c0378c3c4cd17b4b6e1ca6a5/test/invariant/lockup/dynamic/Dynamic.t.sol#L113) should be removed.\r\n\r\nKeeping the null status checks will not be possible anymore, because we decided to address https://github.com/cantinasec/sablier/issues/14, and the `_streams` mapping is private. That is fine, however, since a consequence of reverting invalid inputs is that all getter tests will contain bespoke checks for the null case.","createdAt":"2023-04-02T10:29:22Z","labels":[],"number":411,"repository":"sablier-labs/lockup","state":"closed","title":"Null status invariants are never actually run","type":"issue","updatedAt":"2023-04-04T07:32:57Z","url":"https://github.com/sablier-labs/lockup/issues/411"},{"author":"scorpion9979","body":"The \"lib\" directory contains vendored code and should be [marked as such in Linguist](https://github.com/github/linguist/blob/master/docs/overrides.md#vendored-code). Additionally, the \"wiki\" directory contains documentation and should be [marked as documentation in Linguist](https://github.com/github/linguist/blob/master/docs/overrides.md#documentation). Also, it would be helpful to exclude the \"lib\" directory from the \"NPM Scripts\" section in the VSCode Explorer.\r\n\r\nThe proposed changes are the following:\r\n\r\n1- Add a `.gitattributes` file in the project root with the following lines:\r\n\r\n```gitattributes\r\nlib/** linguist-vendored\r\nwiki/** linguist-documentation\r\n```\r\n\r\n2- Add the following line to `.vscode/settings.json`:\r\n\r\n```json\r\n\"npm.exclude\": \"**/lib/**\"\r\n```","createdAt":"2023-04-02T00:09:27Z","labels":[],"number":409,"repository":"sablier-labs/lockup","state":"closed","title":"Miscellaneous improvements","type":"issue","updatedAt":"2023-04-02T08:12:29Z","url":"https://github.com/sablier-labs/lockup/issues/409"},{"author":"PaulRBerg","body":"One of the downstream effects of addressing both https://github.com/cantinasec/sablier/issues/14 and https://github.com/cantinasec/sablier/issues/9 is that we cannot ignore invalid inputs in the array passed to `cancelMultiple` anymore. We will have to revert if any input leads to a stream id that is not cancelable, and update the following NatSpec comments:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/3f86d6a7ffa7536c3dd1e326fc5435382cccf9f5/src/interfaces/ISablierV2Lockup.sol#L160-L161\r\n\r\nHowever, this approach makes sense to me, since it is consistent with our new approach to fail early and fast.\r\n\r\nIf we do this, we may also want to refactor the `withdrawMultiple` function to also revert if any input is invalid, and update this NatSpec:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/3f86d6a7ffa7536c3dd1e326fc5435382cccf9f5/src/interfaces/ISablierV2Lockup.sol#L239","createdAt":"2023-04-01T14:05:02Z","labels":[],"number":407,"repository":"sablier-labs/lockup","state":"closed","title":"Fail early, fail fast in `cancelMultiple` and `withdrawMultiple`","type":"issue","updatedAt":"2023-04-04T07:32:47Z","url":"https://github.com/sablier-labs/lockup/issues/407"},{"author":"PaulRBerg","body":"We will be able to do this once I ship PRBMath v3.4.0 and we install it in this repo.\r\n\r\nReferences:\r\n\r\n- https://github.com/PaulRBerg/prb-contracts/issues/40\r\n- https://github.com/foundry-rs/foundry/issues/1855\r\n- https://github.com/foundry-rs/foundry/issues/4659","createdAt":"2023-04-01T10:57:10Z","labels":[],"number":406,"repository":"sablier-labs/lockup","state":"closed","title":"Remove problematic \"src/=src/\" remapping","type":"issue","updatedAt":"2023-04-13T20:21:50Z","url":"https://github.com/sablier-labs/lockup/issues/406"},{"author":"PaulRBerg","body":"The script should use `--match-path` instead of `--no-match-patch`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/047978f14bf0fa0cf46cd1db04a12ba4b0efa2f7/package.json#L50","createdAt":"2023-03-31T13:47:11Z","labels":[],"number":401,"repository":"sablier-labs/lockup","state":"closed","title":"Error in the `gas:report` script","type":"issue","updatedAt":"2023-03-31T13:52:52Z","url":"https://github.com/sablier-labs/lockup/issues/401"},{"author":"PaulRBerg","body":"The fuzz tests in `test/fuzz/**/*.sol` don't contain the latest modifier `whenNoDelegateCall`.","createdAt":"2023-03-30T19:39:04Z","labels":[],"number":398,"repository":"sablier-labs/lockup","state":"closed","title":"Update modifiers in the fuzz tests","type":"issue","updatedAt":"2023-04-03T09:42:46Z","url":"https://github.com/sablier-labs/lockup/issues/398"},{"author":"PaulRBerg","body":"- https://github.com/sablierhq/v2-core/blob/8bd57ebb31fddf6ef262477e5a378027db8b85d8/src/abstracts/SablierV2Lockup.sol#L4\r\n- https://github.com/sablierhq/v2-core/blob/8bd57ebb31fddf6ef262477e5a378027db8b85d8/src/interfaces/ISablierV2Lockup.sol#L9\r\n- https://github.com/sablierhq/v2-core/blob/8bd57ebb31fddf6ef262477e5a378027db8b85d8/src/SablierV2LockupDynamic.sol#L10\r\n","createdAt":"2023-03-25T21:13:15Z","labels":[],"number":395,"repository":"sablier-labs/lockup","state":"closed","title":"Delete unused imports","type":"issue","updatedAt":"2023-04-03T09:42:54Z","url":"https://github.com/sablier-labs/lockup/issues/395"},{"author":"PaulRBerg","body":"## Todos\r\n\r\n- [x] Cancel Multiple\r\n- [x] Create with Deltas\r\n- [x] Create with Milestones\r\n- [x] Status Enum\r\n- [x] Withdraw Multiple\r\n\r\n## Cancel Multiple\r\n\r\nInstead of this:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/8bd57e/src/interfaces/ISablierV2Lockup.sol#L166\r\n\r\nIt would be better to say:\r\n\r\n> The caller must be either the sender or the recipient of each stream\r\n\r\n## Create with Deltas\r\n\r\n1. We should add comments with box-drawing characters to `asset` and `cancelable`\r\n2. We should explain how the segment milestones are calculated from the deltas\r\n3. We should consider defining the segments first so that the declaration order in the struct matches that of `LockupDynamic.CreateWithMilestones`\r\n\r\n## Create with Milestones\r\n\r\nDouble white space:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/8bd57e/src/types/DataTypes.sol#L79\r\n\r\n## Status Enum\r\n\r\nInstead of:\r\n\r\n> meaning assets are being streamed\r\n\r\nWe should say something like:\r\n\r\n> indicating that assets are either in the process of being streamed or have yet to be claimed\r\n\r\n## Withdraw Multiple\r\n\r\nInstead of this:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/8bd57e/src/interfaces/ISablierV2Lockup.sol#L245\r\n\r\nIt would be better to say:\r\n\r\n> The caller must be either the recipient or an approved operator of each stream","createdAt":"2023-03-22T14:00:52Z","labels":[],"number":394,"repository":"sablier-labs/lockup","state":"closed","title":"Improve writing in documentation","type":"issue","updatedAt":"2023-04-02T13:16:45Z","url":"https://github.com/sablier-labs/lockup/issues/394"},{"author":"PaulRBerg","body":"To fix:\r\n\r\n- [x] https://github.com/sablierhq/v2-core/blob/8bd57e/src/SablierV2LockupLinear.sol#L210-L211\r\n- [x] https://github.com/sablierhq/v2-core/blob/8bd57e/src/SablierV2LockupLinear.sol#L502\r\n- [x] https://github.com/sablierhq/v2-core/blob/8bd57e/src/SablierV2LockupDynamic.sol#L219-L220\r\n- [x] https://github.com/sablierhq/v2-core/blob/8bd57e/src/SablierV2LockupDynamic.sol#L584","createdAt":"2023-03-21T17:45:49Z","labels":[],"number":393,"repository":"sablier-labs/lockup","state":"closed","title":"Fix misleading comments","type":"issue","updatedAt":"2023-04-02T13:16:38Z","url":"https://github.com/sablier-labs/lockup/issues/393"},{"author":"PaulRBerg","body":"Running `FOUNDRY_PROFILE=optimized forge build` generates contract artifacts in the `optimized-out` directory, many of which should not be part of the Node.js package that gets deployed on the npm registry.\r\n\r\nWe should write a script that filters Forge's output and keeps only those contracts that we want in production (e.g. not the scripts).\r\n\r\nDoing this would also make it possible to simplify [this step](https://github.com/sablierhq/v2-core/blob/88c58505488953bac78cf7867a39a3379c1a71a2/.github/workflows/ci.yml#L74) in our CI workflow.","createdAt":"2023-03-19T15:16:34Z","labels":[],"number":389,"repository":"sablier-labs/lockup","state":"closed","title":"Write a script that filters the contract artifacts for deployment to the npm registry","type":"issue","updatedAt":"2023-05-15T20:25:43Z","url":"https://github.com/sablier-labs/lockup/issues/389"},{"author":"PaulRBerg","body":"The [current contract](https://github.com/sablierhq/v2-core/blob/main/src/SablierV2NFTDescriptor.sol) is a stub used only for demonstrational purposes.\r\n\r\nTo implement this, we first need to obtain the hourglass asset from the designer we have engaged to work on this, and then we will have to transform his designs into an on-chain SVG generator algorithm.\r\n\r\nUniswap V3's [`NFTSVG.sol`](https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/NFTSVG.sol) will serve as inspiration for this.","createdAt":"2023-03-19T12:59:09Z","labels":[],"number":388,"repository":"sablier-labs/lockup","state":"closed","title":"Implement NFT descriptor","type":"issue","updatedAt":"2023-05-30T14:33:22Z","url":"https://github.com/sablier-labs/lockup/issues/388"},{"author":"PaulRBerg","body":"Some files in the repo (e.g. `src/interfaces` and `src/types`) have a lower pragma to enable as much compatibility as possible. We should check that they can be compiled with the whole gamut of ranges supported.","createdAt":"2023-03-19T11:06:22Z","labels":[],"number":387,"repository":"sablier-labs/lockup","state":"closed","title":"Check that contracts can be compiled with all Solidity versions (`0.8.13` to `0.8.19`)","type":"issue","updatedAt":"2023-03-19T11:29:29Z","url":"https://github.com/sablier-labs/lockup/issues/387"},{"author":"PaulRBerg","body":"","createdAt":"2023-03-18T15:45:22Z","labels":[],"number":383,"repository":"sablier-labs/lockup","state":"closed","title":"Add fork tests for tokens with very low number of decimals","type":"issue","updatedAt":"2023-03-18T17:32:30Z","url":"https://github.com/sablier-labs/lockup/issues/383"},{"author":"PaulRBerg","body":"See inspiration [here](https://github.com/Uniswap/v3-core/blob/main/bug-bounty.md).","createdAt":"2023-03-17T22:14:59Z","labels":[],"number":378,"repository":"sablier-labs/lockup","state":"closed","title":"Write bug bounty","type":"issue","updatedAt":"2023-03-18T21:27:45Z","url":"https://github.com/sablier-labs/lockup/issues/378"},{"author":"PaulRBerg","body":"As suggested by @andreivladbrg [here](https://github.com/sablierhq/v2-core/discussions/370#discussioncomment-5345746).\r\n\r\nThe rationale is that since Solidity v0.8.18 it is possible to have [named mapping parameters](https://twitter.com/PaulRBerg/status/1621949932608360453), which means that the mapping itself offers context now. Etherscan will pick the named parameters and display them as keys for the auto-generated getters.","createdAt":"2023-03-17T13:17:27Z","labels":[],"number":374,"repository":"sablier-labs/lockup","state":"closed","title":"Replace `getProtocolRevenues` with public mapping `protocolRevenues` ","type":"issue","updatedAt":"2023-03-17T17:19:54Z","url":"https://github.com/sablier-labs/lockup/issues/374"},{"author":"andreivladbrg","body":"**Later edit**: the error \"1721eb65\" is `SablierV2Lockup_WithdrawSenderUnauthorized`, so my assumption about the error was incorrect., see this [comment](https://github.com/sablierhq/v2-core/issues/373#issuecomment-1493975332). \r\n\r\nIt looks like in these two workflows the invariant tests failed: \r\n- https://github.com/sablierhq/v2-core/actions/runs/4442064927\r\n- https://github.com/sablierhq/v2-core/actions/runs/4442489228\r\n\r\nI did some debugging, and the error that is being reverted with in all fails is \"1721eb65\" followed by 3 arguments (address, uint256, uint256). The only error that would match is `SablierV2FlashLoan_InsufficientAssetLiquidity(IERC20 asset, uint256 amountAvailable, uint256 amountRequested)`. But the `amountAvailable` is greater than `amountRequested` as you can see in the photo, which is weird.\r\n\r\n<img width=\"961\" alt=\"Screenshot 2023-03-17 at 12 20 34 PM\" src=\"https://user-images.githubusercontent.com/99738872/225888941-17a5d667-3a99-48ea-9811-75290129e1ad.png\">\r\n\r\nThe issue might be caused by these lines(I am not sure, more debugging needs to be done):\r\n https://github.com/sablierhq/v2-core/blob/c34c846f7f3fab866b2b19e99ddb63a1f3c74fe7/test/invariant/handlers/FlashLoanHandler.t.sol#L46-L47\r\n\r\nA possible solution to this problem would be to add the following if statement before bounding:\r\n```solidity\r\n    uint256 balance = asset.balanceOf(address(this));\r\n     if (balance > type(uint128).max) {\r\n          return;\r\n      }\r\n    amount = boundUint128(amount, 0, uint128(balance));\r\n```","createdAt":"2023-03-17T12:03:38Z","labels":[],"number":373,"repository":"sablier-labs/lockup","state":"closed","title":"Invariants failing due to `SablierV2Lockup_WithdrawSenderUnauthorized`","type":"issue","updatedAt":"2023-04-03T16:38:28Z","url":"https://github.com/sablier-labs/lockup/issues/373"},{"author":"PaulRBerg","body":"The name of the tag is obvious: `v1.0.0`\r\n\r\nBut the branch's name isn't. My ideas are:\r\n\r\n- `release-v1.0` (following OpenZeppelin's [approach](https://github.com/OpenZeppelin/openzeppelin-contracts/tree/release-v4.9))\r\n- `release-v1.0.0`\r\n- `release-1.0`\r\n- `release-1.0.0`\r\n- `1.0` (following Seaport's [approach](https://github.com/ProjectOpenSea/seaport/tree/1.5))\r\n- `1.0.0`\r\n\r\nNote: we need a branch name because [tags cannot be used with git submodules](https://stackoverflow.com/q/1777854/3873510) (submodules are needed for Foundry integrations).","createdAt":"2023-03-16T17:04:13Z","labels":[],"number":372,"repository":"sablier-labs/lockup","state":"closed","title":"Release package, branch and tag","type":"issue","updatedAt":"2023-07-01T15:19:31Z","url":"https://github.com/sablier-labs/lockup/issues/372"},{"author":"andreivladbrg","body":"We chose to use BUSL for our source code to mitigate the risk of vampire attacks. However, it's still possible for our functions to be used via `delegateCall`.\r\n\r\nThat being said we should implement additional logic for this, as [uniswap ](https://github.com/Uniswap/v3-core/blob/main/contracts/NoDelegateCall.sol) did.\r\n\r\nWhere do you suggest to place that logic? Is it ok in the `SablierV2Config` contract?","createdAt":"2023-03-13T23:11:52Z","labels":[],"number":367,"repository":"sablier-labs/lockup","state":"closed","title":"No delegate call","type":"issue","updatedAt":"2023-03-17T15:32:56Z","url":"https://github.com/sablier-labs/lockup/issues/367"},{"author":"PaulRBerg","body":"We're passing the `ISablierV2Lockup` as one of the parameters of the `tokenURI` function in `ISablierV2NFTDescriptor`, but this doesn't seem like a good choice:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/876456a685722b80504e4b36396819003fa0dfb7/src/interfaces/ISablierV2NftDescriptor.sol#L14\r\n\r\nFuture Sablier contracts may not inherit from `ISablierV2Lockup` but may still be ERC-721 NFTs. It'd be a shame if we couldn't use the same `ISablierV2NFTDescriptor` interface for these future contracts.\r\n\r\nThus, I suggest we use the `IERC721Metadata` instead, so that future contracts remain compatible with the descriptor interface.","createdAt":"2023-03-13T12:01:12Z","labels":[],"number":365,"repository":"sablier-labs/lockup","state":"closed","title":"Use the `IERC721Metadata` interface instead of `ISablierV2Lockup` in the NFT descriptor","type":"issue","updatedAt":"2023-03-14T14:08:55Z","url":"https://github.com/sablier-labs/lockup/issues/365"},{"author":"PaulRBerg","body":"List all the chains that we are interested in deploying to.","createdAt":"2023-02-28T19:49:22Z","labels":[],"number":352,"repository":"sablier-labs/lockup","state":"closed","title":"List more chains in Foundry config","type":"issue","updatedAt":"2023-03-01T12:23:17Z","url":"https://github.com/sablier-labs/lockup/issues/352"},{"author":"PaulRBerg","body":"Just bumped into this fail of the `invariant_ContractBalance` invariant (locally):\r\n\r\n<details>\r\n<summary> Click to toggle test traces </summary>\r\n\r\n```text\r\nFailing tests:\r\nEncountered 1 failing test in test/invariant/lockup/linear/Linear.t.sol:Linear_Invariant_Test\r\n[FAIL. Reason: Assertion failed.]\r\n\t[Sequence]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b636fe6 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(), args=[]\r\n\t\tsender=0x000000000000000000000000000000000000315c addr=[test/invariant/handlers/LockupProHandler.t.sol:LockupProHandler]0x03a6a84cd762d9707a21605b548aaab891562aab calldata=cancel(uint256), args=[400082106698277373272204083653185993077964913481370207777503478]\r\n\t\tsender=0x4cb119c0f2c11804e8e9f188bc6d9b860f5cd6c4 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256))), args=[(0xD99a769bB88AF0CC3f8008efd1eCA811DfD6fEF1, 0xc7f2402E2026Bf3D17d1240f964FBF995ce2b056, 2, 0x62506b8dbeD534393435B29774A67dD6A46F9eD0, false, (3, 0), (0xfCE80310973cfE79Ab27C6E7E0D9418DdA670228, 1))]\r\n\t\tsender=0x0d9f60077f6af931a8bbf590da0223dacf75ca2e addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[340282366920938463463374607431768211455]\r\n\t\tsender=0x0000000000000000000000000000000000001705 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[110349606679412691172957834289542550319383271247755660854362242977991410020124]\r\n\t\tsender=0x000000000000000000000000000000000020756c addr=[test/invariant/handlers/LockupProHandler.t.sol:LockupProHandler]0x03a6a84cd762d9707a21605b548aaab891562aab calldata=withdraw(uint256,address,uint128), args=[311292305724142502004307646, 0x8D1B93926e88a451291c26F309Ce5AF4bA26D737, 340282366920938463463374607431768211453]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/LockupProHandler.t.sol:LockupProHandler]0x03a6a84cd762d9707a21605b548aaab891562aab calldata=transferNFT(uint256,address), args=[115792089237316195423570985008687907853269984665640564039457584007913129639933, 0x59625E60a20E78e97e8B5419DE7Cc33Cca594A68]\r\n\t\tsender=0x1d3ba6c83af38b5e632c1a597daedf6a99e1f154 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[22635]\r\n\t\tsender=0x00000000000000000000000000000000000002b6 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[5281]\r\n\t\tsender=0x2b34996cb82f971a62b76d657531808b13dc0a14 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[12309]\r\n\t\tsender=0x2311bcb65cdd7424575f910c0e4fb34d8a1baea9 addr=[test/invariant/handlers/LockupProHandler.t.sol:LockupProHandler]0x03a6a84cd762d9707a21605b548aaab891562aab calldata=cancel(uint256), args=[115792089237316195423570985008687907853269984665640564039457584007913129639932]\r\n\t\tsender=0xc552315cffb73da35cfd60570b7b777f98036f9f addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[110349606679412691172957834289542550319383271247755660854362242977991410020995]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256))), args=[(0x0000000000000000000000000000000000000000, 0x00000000000000000000000000000000000004CF, 885, 0x00000000000000000000000000000000000001d1, false, (939783473375, 13672), (0x0d9F60077f6af931A8Bbf590dA0223dAcF75c864, 10866585269168700145435737236758610658126233034367243741822976))]\r\n\t\tsender=0x00000000000000000000000000000000000020a6 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[115792089237316195423570985008687907853269984665640564039457584007913129639932]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b637067 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256))), args=[(0xc7Fcdb5d0684a1FBd2c06b351f527350EdBaf0E4, 0xBEBF4D1d4ab9162EF6A022a60A5E8743D7e10887, 10, 0x3BACC2d9fE7ADdA62fE47316D292e658cC12E544, true, (0, 0, 2), (0x5B290738Af586a67AE20935A82A9431fBB264577, 352964072213))]\r\n\t\tsender=0x00000000000000000000000000000000000076b1 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256))), args=[(0x849F9300f63511cAfa316377c6E3a38f681555c5, 0xe31e457727C89311360212f9C8CC0D65A18bB43d, 340282366920938463463374607431768211455, 0xa8eF33b2cbAAbc72894B82EcBc4B999dBE7b1DF9, true, (44, 1099511627772, 79242), (0xD23A5096B6F3a8248efa4348AB258E6b6B247349, 8))]\r\n\t\tsender=0x0d9f60077f6af931a8bbf590da0223dacf75c7c3 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256))), args=[(0x0000000000000000000000000000000000000189, 0x0A3214154F22a0a2b415b23A84c8169E8b6371Df, 22644, 0x4D4f000000000000000000008AC7230489e80000, false, (549276340643, 186426608283), (0x4D4f000000000000000000008AC7230489e80000, 16641518865724446448164663506109663760940400043274155493687296))]\r\n\t\tsender=0x08072a7b5c54b34913ff80c60433c99e5a5cb89c addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[12]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[1378]\r\n\t\tsender=0x00000000000000000000000000000000000001de addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(uint256), args=[115792089237316195423570985008687907853269984665640564039457584007913129639933]\r\n\t\tsender=0x00000000000000000000000000000000000040ae addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[70]\r\n\t\tsender=0x9951cb2c94fbf5af2c894ee5bb10d4befd461695 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[49566272293997417712157339690412528346710513661204124473700709207642]\r\n\t\tsender=0x2e56dd0bb391a48ea4445fdc353d348bacb0c538 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[3]\r\n\t\tsender=0x0000000000000000000000000000000000004443 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256))), args=[(0x293CfEa5D3cC5359E0db7C82BE3AcC2FB8D409a5, 0xe99a01A5674C52d2bFCC77bE0A48A596B51F1520, 1143494677178889970178959, 0x2EF59C88FF0Ab64210Ca2c2C77c6Bc6DA63461b9, false, (1099511627774, 1), (0x65413c36C6662559937E8d4FbAeA71159BC41da6, 115792089237316195423570985008687907853269984665640564039457584007913129639934))]\r\n\t\tsender=0x0d9f60077f6af931a8bbf590da0223dacf75c7bd addr=[test/invariant/handlers/LockupProHandler.t.sol:LockupProHandler]0x03a6a84cd762d9707a21605b548aaab891562aab calldata=claimProtocolRevenues(), args=[]\r\n\t\tsender=0x6065c3a44e2e3999c233571320a68ab0f04ff787 addr=[test/invariant/handlers/LockupProHandler.t.sol:LockupProHandler]0x03a6a84cd762d9707a21605b548aaab891562aab calldata=renounce(uint256), args=[0]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(uint256), args=[12735]\r\n\t\tsender=0x000000000000000000000000000000000000120c addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(uint256), args=[110349606679412691172957834289542550319383271247755660854362242977991410020736]\r\n\t\tsender=0x00000000000000000000000000000000000038e6 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256))), args=[(0xe6a55884aad8F0c7F4d787680f7Df1f18Ea4d57B, 0xc7Bc269b61b901b695005dfe4E1BAd67Deb30E01, 340282366920938463463374607431768211453, 0x476731A0Cd747Ff2679584EEab5c097976322aF2, true, (56, 1099511627775), (0x35a47b765F54DE8590F32EB98ab8F208c0920f99, 17139823125675))]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(), args=[]\r\n\t\tsender=0x0000000000000000000000000000000000003101 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256))), args=[(0x8de7f39C756A7e661d84d3BbCbD2c818801DD365, 0xF3A8911faA53427eCCA462688F02fd3d96C39823, 11285, 0x790F0b94E1907541FD0161B4910f5ebaB6E76030, false, (3457507997, 2, 1099511627772), (0xc84A3bF132488E80A2700ccCe558A3F5737B6C40, 52584014252986725999672221293253544264972508077760))]\r\n\t\tsender=0x0000000000000000000000000000000000000afe addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=flashLoan(uint128), args=[340282366920938463463374607431768211452]\r\n\t\tsender=0x3d252f4bfa9fc11c900bdd7d913148b28e72c8c3 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(uint256), args=[351384664706229367312224279602]\r\n\t\tsender=0x00000000000000000000000000000000000012e4 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256))), args=[(0x5a443704dd4B594B382c22a083e2BD3090A6feF3, 0x00000000000000000000000000000000000011C1, 169367393186080990482378348967323093279, 0xc4f8092689E1E04080EB9CBb077ca38A14D7E384, false, (2719, 465495235527, 274), (0x0d9F60077f6af931a8BBF590da0223DAcf75c8c5, 49972929080627721304132705343342372430443907453378178757165056))]\r\n```\r\n\r\n</details>","createdAt":"2023-02-27T19:20:49Z","labels":[],"number":350,"repository":"sablier-labs/lockup","state":"closed","title":"Investigate failing contract balance invariant","type":"issue","updatedAt":"2023-03-01T16:50:35Z","url":"https://github.com/sablier-labs/lockup/issues/350"},{"author":"PaulRBerg","body":"Presently, the `streamedAmountOf` function is documented in the ISablierV2Lockup interface file, resulting in the same NatSpec documentation being shared by both the linear and pro contracts for this specific function.\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/d1c11e0f798dcf76285e8963f21880b169848a21/src/interfaces/ISablierV2Lockup.sol#L68-L69\r\n\r\nBut, since the calculations in the linear contracts differ significantly from those in the pro contract, it would be best to create customized NatSpec for each contract.\r\n\r\n","createdAt":"2023-02-20T12:19:09Z","labels":[],"number":347,"repository":"sablier-labs/lockup","state":"closed","title":"Document the `streamedAmountOf` function bespokely","type":"issue","updatedAt":"2023-02-20T16:11:29Z","url":"https://github.com/sablier-labs/lockup/issues/347"},{"author":"IaroslavMazur","body":"In .github\\workflows\\ci.yml, there's a job that defines the `FOUNDRY_FUZZ_SEED` environment variable as depending on the number of weeks that have passed since the Epoch date:\r\n![image](https://user-images.githubusercontent.com/22785348/219898837-440b1ac1-36ed-4533-9c5d-7fb62e6ce695.png)\r\n\r\nThe expression for the variable could be simplified to just `$(echo $(($EPOCHSECONDS / 604800)))`, without undermining the benefits from the \"only change the FOUNDRY_FUZZ_SEED value weekly\" strategy.","createdAt":"2023-02-18T20:52:53Z","labels":[],"number":346,"repository":"sablier-labs/lockup","state":"closed","title":"The definition formula for `FOUNDRY_FUZZ_SEED` could be simplified ","type":"issue","updatedAt":"2023-02-19T18:54:15Z","url":"https://github.com/sablier-labs/lockup/issues/346"},{"author":"PaulRBerg","body":"Running the `gas:snapshot:optimized` command results into a command that hangs forever.","createdAt":"2023-02-16T19:47:52Z","labels":[],"number":345,"repository":"sablier-labs/lockup","state":"closed","title":"Investigate why the gas snapshot cannot be generated anymore","type":"issue","updatedAt":"2023-03-01T14:32:02Z","url":"https://github.com/sablier-labs/lockup/issues/345"},{"author":"PaulRBerg","body":"As we have reached a soft agreement to use the proxy approach (https://github.com/sablierhq/v2-periphery/discussions/11), we can now delete the `cancelMultiple` function from this repository. It should be moved to the periphery (`v2-periphery`).","createdAt":"2023-02-16T17:17:35Z","labels":[],"number":343,"repository":"sablier-labs/lockup","state":"closed","title":"Delete `cancelMultiple`","type":"issue","updatedAt":"2023-02-17T13:32:33Z","url":"https://github.com/sablier-labs/lockup/issues/343"},{"author":"PaulRBerg","body":"The `withdrawMultiple` should do nothing when the length of the input array is zero - it shouldn't revert.\r\n\r\nAs discussed in https://github.com/sablierhq/v2-core/discussions/50#discussioncomment-4921204.","createdAt":"2023-02-16T17:08:50Z","labels":[],"number":342,"repository":"sablier-labs/lockup","state":"closed","title":"Add a test for when the length of the input array is zero in `cancelMultiple` and `withdrawMultiple`","type":"issue","updatedAt":"2023-02-20T13:14:40Z","url":"https://github.com/sablier-labs/lockup/issues/342"},{"author":"PaulRBerg","body":"As mentioned [here](https://github.com/sablierhq/v2-core/pull/322#issuecomment-1430087085), invariant tests currently take hours on end to run in CI:\r\n\r\n<img width=\"826\" alt=\"Screenshot 2023-02-14 at 5 26 31 PM\" src=\"https://user-images.githubusercontent.com/8782666/218807597-951a7414-24a2-4ddb-ac17-60da5c1f8876.png\">\r\n\r\nThis may be related to the `invariant_call_summary` functions, as discussed [here](https://github.com/foundry-rs/foundry/issues/3607#issuecomment-1407366588).\r\n","createdAt":"2023-02-14T17:08:19Z","labels":[],"number":338,"repository":"sablier-labs/lockup","state":"closed","title":"Lower the invariant test run times","type":"issue","updatedAt":"2023-02-21T19:29:12Z","url":"https://github.com/sablier-labs/lockup/issues/338"},{"author":"PaulRBerg","body":"In #306, @andreivladbrg added a commit that made the base handler inherit from `Base_Test`. But now I realize that this wasn't a good thing.\r\n\r\nBenefits of not inheriting from `Base_Test`:\r\n\r\n1. More logical fitness-for-purpose - the handlers aren't really test contracts, they are middleware.\r\n2. Cleaner separation between tests and handlers.\r\n3. Smaller error surface, e.g. accidentally using the `DEFAULT_ASSET` (which would have a different address from the actual asset's address used by the invariant test contracts)\r\n ","createdAt":"2023-02-10T19:31:26Z","labels":[],"number":336,"repository":"sablier-labs/lockup","state":"closed","title":"Switch back to not inherit from `Base_Test` in the `BaseHandler`","type":"issue","updatedAt":"2023-02-15T09:26:41Z","url":"https://github.com/sablier-labs/lockup/issues/336"},{"author":"PaulRBerg","body":"As mentioned [here](https://github.com/sablierhq/v2-core/commit/fa5c007af048ec7b9a840f4b70fcd6d78650cb60#r100162600) @andreivladbrg introduced a bug in the testing flash loan handler on this line:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/test/invariant/handlers/FlashLoanHandler.t.sol#L38\r\n","createdAt":"2023-02-10T19:28:27Z","labels":[],"number":335,"repository":"sablier-labs/lockup","state":"closed","title":"Bug in testing flash loan handler","type":"issue","updatedAt":"2023-02-14T21:05:53Z","url":"https://github.com/sablier-labs/lockup/issues/335"},{"author":"PaulRBerg","body":"As suggested by @andreivladbrg in #310.","createdAt":"2023-02-09T18:20:19Z","labels":[],"number":333,"repository":"sablier-labs/lockup","state":"closed","title":"Unpack the `Range` structs in the stream structs","type":"issue","updatedAt":"2023-02-15T09:26:27Z","url":"https://github.com/sablier-labs/lockup/issues/333"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe coverage report we get from Foundry is mostly incorrect, and this messes up the branch coverage % reported on [Codecov](https://app.codecov.io/gh/sablierhq/v2-core).\r\n\r\nI spent days investigating what's going on, and based on my findings, I think that the real test coverage we have is 100%.\r\n\r\n## Incorrect Reports\r\n\r\n### Assertions appear as partially covered\r\n\r\nSee https://github.com/foundry-rs/foundry/issues/4294 for context.\r\n\r\n- [SablierV2LockupLinear#219](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupLinear.sol#L219)\r\n- [SablierV2LockupLinear#493](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupLinear.sol#L493)\r\n- [SablierV2LockupDynamic#333](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupDynamic.sol#L333)\r\n- [SablierV2LockupDynamic#358](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupDynamic.sol)\r\n- [SablierV2LockupDynamic#576](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupDynamic.sol#L576)\r\n- [Helpers#53](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/libraries/Helpers.sol#L53)\r\n\r\n### Other incorrect partials\r\n\r\n- [Helpers#160](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/libraries/Helpers.sol#L160) - we do have tests that cover the full gamut of possibilities (`>`, `==`, and `<`)\r\n- [SablierV2FlashLoan.sol#83](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/abstracts/SablierV2FlashLoan.sol#L83) - we do cover the case when `isFlashLoanable` returns `true`, and when it returns `false`.\r\n- [SablierV2Lockup#248](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/abstracts/SablierV2Lockup.sol#L248) - we do have tests for when the status of a stream is not `ACTIVE` in the for loop in `withdrawMultiple`.\r\n- [SablierV2LockupLinear#496](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupLinear.sol#L496) - we do cover the case when `stream.amounts.deposit == stream.amounts.withdrawn` and when they are not equal (`!=`).\r\n- [SablierV2LockupDynamic#579](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupDynamic.sol#L579) - ditto as above.\r\n- [SablierV2LockupDynamic#315](https://app.codecov.io/gh/sablierhq/v2-core/commit/ec79767d270f9410be71bf09adf3dd4e11c08c44/blob/src/SablierV2LockupDynamic.sol#L315) - we do cover the case when `index > 1` and when `index <= 1`.\r\n\r\n## Related Foundry Issues\r\n\r\n- https://github.com/foundry-rs/foundry/issues/3497\r\n- https://github.com/foundry-rs/foundry/issues/3600\r\n- https://github.com/foundry-rs/foundry/issues/4294\r\n- https://github.com/foundry-rs/foundry/issues/4305\r\n- https://github.com/foundry-rs/foundry/issues/4310\r\n- https://github.com/foundry-rs/foundry/issues/4311\r\n- https://github.com/foundry-rs/foundry/issues/4314\r\n- https://github.com/foundry-rs/foundry/issues/4315\r\n- https://github.com/foundry-rs/foundry/issues/4316","createdAt":"2023-02-09T17:05:53Z","labels":[],"number":332,"repository":"sablier-labs/lockup","state":"closed","title":"Foundry coverage report is inaccurate","type":"issue","updatedAt":"2023-06-30T14:53:13Z","url":"https://github.com/sablier-labs/lockup/issues/332"},{"author":"PaulRBerg","body":"As suggested by @razgraf in #325.","createdAt":"2023-02-09T15:00:47Z","labels":[],"number":330,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `broker.addr` to `broker.account`","type":"issue","updatedAt":"2023-02-15T09:25:15Z","url":"https://github.com/sablier-labs/lockup/issues/330"},{"author":"PaulRBerg","body":"As suggested by @razgraf in #327, change from:\r\n\r\n```text\r\nsender, recipient, total, [...special...], asset, cancelable, [...special...], broker\r\n```\r\n\r\nTo:\r\n\r\n```text\r\nsender, recipient, total, asset, cancelable, [...special...], [...special...], broker\r\n```","createdAt":"2023-02-09T12:31:14Z","labels":[],"number":329,"repository":"sablier-labs/lockup","state":"closed","title":"Change the order of parameters in the create functions","type":"issue","updatedAt":"2023-02-15T09:25:07Z","url":"https://github.com/sablier-labs/lockup/issues/329"},{"author":"PaulRBerg","body":"As suggested by @razgraf in #327.","createdAt":"2023-02-09T12:29:30Z","labels":[],"number":328,"repository":"sablier-labs/lockup","state":"closed","title":"Create a new struct for the `createWithDeltas` function","type":"issue","updatedAt":"2023-02-15T09:24:33Z","url":"https://github.com/sablier-labs/lockup/issues/328"},{"author":"PaulRBerg","body":"[The coverage report](https://app.codecov.io/gh/sablierhq/v2-core/blob/main/src/SablierV2LockupPro.sol#L333) has revealed that we are not covering the path when `index > 1` in the `_calculateStreamedAmountForMultipleSegments` function:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/b23b0654e71849b2a6fd30181e3621b4bb81842d/src/SablierV2LockupPro.sol#L333\r\n\r\nThe issue is that we're not fuzzing the segments in the withdraw tests.","createdAt":"2023-02-09T08:25:47Z","labels":[],"number":326,"repository":"sablier-labs/lockup","state":"closed","title":"Cover the case when `index > 1` in the `_calculateStreamedAmountForMultipleSegments` function","type":"issue","updatedAt":"2023-02-10T21:42:28Z","url":"https://github.com/sablier-labs/lockup/issues/326"},{"author":"PaulRBerg","body":"As shown by Codecov [here](https://app.codecov.io/gh/sablierhq/v2-core/blob/f3d8b175112cfed2709cc508ea5c6502476c600d/src/libraries/Helpers.sol#L141), the following if statement is only partially covered:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/f3d8b175112cfed2709cc508ea5c6502476c600d/src/libraries/Helpers.sol#L141\r\n\r\nWhat we're not testing is the case when the `startTime` is greater than the first segment milestone:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/f3d8b175112cfed2709cc508ea5c6502476c600d/test/unit/lockup/pro/create-with-milestones/createWithMilestones.t.sol#L97-L108","createdAt":"2023-02-07T14:40:33Z","labels":[],"number":321,"repository":"sablier-labs/lockup","state":"closed","title":"Write a unit test when the `startTime` is greater than the first segment milestone","type":"issue","updatedAt":"2023-02-07T14:43:07Z","url":"https://github.com/sablier-labs/lockup/issues/321"},{"author":"PaulRBerg","body":"As shown by Codecov [here](https://app.codecov.io/gh/sablierhq/v2-core/blob/f3d8b175112cfed2709cc508ea5c6502476c600d/src/abstracts/SablierV2FlashLoan.sol#L60), the following if is not properly covered by our tests:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/f3d8b175112cfed2709cc508ea5c6502476c600d/src/abstracts/SablierV2FlashLoan.sol#L60\r\n\r\nThe test is not properly written:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/f3d8b175112cfed2709cc508ea5c6502476c600d/test/unit/flash-loan/max-flash-loan/maxFlashLoan.t.sol#L13-L17","createdAt":"2023-02-07T12:20:03Z","labels":[],"number":320,"repository":"sablier-labs/lockup","state":"closed","title":"Fix `maxFlashLoan` test","type":"issue","updatedAt":"2023-02-07T15:26:37Z","url":"https://github.com/sablier-labs/lockup/issues/320"},{"author":"PaulRBerg","body":"@andreivladbrg stumbled upon a potential invariant fail:\r\n\r\n<details>\r\n<summary>See test traces</summary>\r\n[FAIL. Reason: Assertion failed.]\r\n\t[Sequence]\r\n\t\tsender=0x000000004f22a0a2b415b23a84c8169e8b636f37 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[230396291506782626910723625727912298437]\r\n\t\tsender=0x49389ef8e18794627f4fca880c644d0c01f9b87b addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=burn(uint256), args=[2447920394135075484]\r\n\t\tsender=0x000000000000000000000000000000007ffff8f7 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0xbc28cEddA292AFc622cE2A7Ed5116959f0eb42e6, 1), false, (429845, 1099511627772, 217), 0x61e4915E7B7A362185B082158889c970cAe507D5, 0xa8A530d6851b216545648895dd3C0b527964D862, 1)]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b6370c0 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x0a3214154f22a0A2b415B23A84c8169e8b637063, 4450), false, (1058533353355, 549276340673), 0xbab09ED3C9259b4344Ed1468E4d6F8cf2e7DD122, 0x18B18fF291B736451E89774a7198C258c171Dc94, 217648681982940311057722812091666109091)]\r\n\t\tsender=0x04ff63d23a22e30f6684041dbf5af6f70c34f3fb addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=withdrawMax(uint256,address), args=[75276140696391174450305814049576319106646922510300487059720162673006384433353, 0x000000000000000000000000000000000047F026]\r\n\t\tsender=0x0000000000000000000000000000000000005f24 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x7bb2D3D1312EEAa7477B6BcCd2a58C48B2ABDe43]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[105188807836430980547628365285345685229]\r\n\t\tsender=0x403d8a327ea3bbc1df3964b0d9d34bae53a5a8f1 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x6367B8051064cFD1307C2E120bb680E95fB4a6BC, 4710401747781562413168387224619432370596866429648145), true, (3, 261858016, 81108), 0xdF671f58882F3Ad3E5386f1E2cB4f8C457353e11, 0xD0f80142A753bb2F8A3a10Bd2a18148d66831ab5, 7584022344998)]\r\n\t\tsender=0x0000000000000000000000000000000000001097 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x00A403baB6d2D2819FD32C181D9d8116126e4683, 115792089237316195423570985008687907853269984665640564039457584007913129639934), false, (1099511627773, 0), 0xfbF60f54b74648Df4C48c488a5DEd33f413f06aC, 0x3DD54C38494D216B598eD4e34800076616d85d88, 1)]\r\n\t\tsender=0x000000000000000000000000000000000000059d addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[114047451330]\r\n\t\tsender=0x2b73732d5d37b58805c76ac94b7bb49e050c7bc7 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0xC5D6D3C9D64A148cB3582848bFe9D2Cd2c5496Cf, 115792089237316195423570985008687907853269984665640564039457584007913129639934]\r\n\t\tsender=0x2a40b92dd9de1711a32927a9f0278f1e988247e7 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=withdraw(uint256,address,uint128), args=[53796, 0x0A3214154f22A0A2b415b23a84c8169E8B6370D9, 244165572329067506025632611045284956264]\r\n\t\tsender=0xe48daf5cbd34b2332a8f3d1bf99212e3f8ca7859 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x4D4f000000000000000000008AC7230489e80000]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b63723a addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[113830069252509081920426719]\r\n\t\tsender=0x2035313439303338393633393533000000000000 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0xD706BE779aC55a7F34a62018C1190293a4c2f873, 133450225492568065781011053166281851565542918360]\r\n\t\tsender=0x79cb678f5d9bd1ed0ad574389461e255f95170ed addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[236380246825784392788351198651204110076]\r\n\t\tsender=0x2954155ab7b0942694bea4ce44661d9a8736c8cd addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[1012]\r\n\t\tsender=0x0000000000000000000000000000000000005579 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0xe267216f691746127cd57961d74D78ADBB302792, 442), false, (680943382437, 663693478324, 663693478422), 0x9ff1a73D53e7BBa36dF0224747611A10A9E4e2ad, 0x0000000000000000000000000000009E8B636f7b, 260113451161997637824464798459440947479)]\r\n\t\tsender=0x2d4f9db5e8eb9f3e08510637fdfa6d5c77a225ae addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x56F157807d0f191e5AEaF21Ee63ec26B1a7681Fb, 115792089237316195423570985008687907853269984665640564039457584007913129639933), false, (1099511627772, 55714226184, 118368), 0xda88c8fB0c9Bb5bD8559BFC07bb29E09bbcf3452, 0xA3d0403FF4a8443b340872f8420a85392e722A6D, 2)]\r\n\t\tsender=0x0000000000000000000000000000000000002c70 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x3880170f78B1885107C99748b212C1ECC91B6BdD, 0), true, (1099511627772, 0, 47994), 0x401A19F48e58C7EC3BDeaA6602733FB4a6a7Febe, 0x09cCDfC05404ca23769D37F0cE377f3fCC08a6Dd, 114235038922567563489359636407672)]\r\n\t\tsender=0x2032393100000000000000000000000000000000 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0xfB73Da50aC673D565059Fca94eE79b4FC69326A9]\r\n\t\tsender=0x2038353031353434313235303139333030363700 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=claimProtocolRevenues(), args=[]\r\n\t\tsender=0x0000000000000000000000000000000000000300 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0xC0A5317031E8a781e4e2E3031A4121E2861045Da]\r\n\t\tsender=0xa614a5bd5608644510169e71f76fb04f81fb518f addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[115792089237316195423570985008687907853269984665640564039457584007913129639935]\r\n\t\tsender=0x729fc934e49713691ab94a8f686b348caeeb5da7 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[1868]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b6370f8 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[9035500735695468289185114831114]\r\n\t\tsender=0x0000000000000000000000000000000000000da0 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[10000000000000000000]\r\n\t\tsender=0xe0e3010319c129a800217ba03d12912420c4964c addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[16324, 0x5b71a925155B0E61e4afA5a2672b60Fa2Ca1a7aa]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b6370a6 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[137665090675801219662832514021248568]\r\n\t\tsender=0x00000000000000000000000000000000c2e15904 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[11725]\r\n\t\tsender=0x2020202020202020200000000000000000000000 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[145006]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b637278 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[340282366920938463463374607431768211453]\r\n\t\tsender=0x2032313437343833313032000000000000000000 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x8a4cA1D65C82249A84646E8DDd02C76Ff1685343, 15009840129223113334550036405833002973664), false, (0, 1, 2), 0xc20C40C9c889C9ef8d278d2a385aD0a3Cf03Ca2a, 0x4548f9EEA3CA6460756931e86616e09d40F3c55E, 4199426254196871559)]\r\n\t\tsender=0x5e9e0af3c89d537c2e8b0010d24cfb52621b7f7d addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x685f734B984d5CEBdA917B94598c3fcde9807990]\r\n\t\tsender=0x0000000000000000266f025f4c67fa5bf1f633e5 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[105188807836430980547628365285345685719]\r\n\t\tsender=0x008168d820d615a9d3f70bfb0cad8b858b529a61 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=claimProtocolRevenues(), args=[]\r\n\t\tsender=0xb70ce7983c1f560dbb4c3267da6d2e3241652fbd addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[7995]\r\n\t\tsender=0x0d91fddc6ee98ed2d5d6a1f417e2c7951e6d7960 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[3, 0xB0bE606FE38a804E1351a32c72327980afa42235]\r\n\t\tsender=0x4648c524eed43e6e9979574a579e91ce785bbd69 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x459754BD2A573441261701649e1C8dbbcf210C63, 115792089237316195423570985008687907853269984665640564039457584007913129639933]\r\n\t\tsender=0x00000000498b4da9833ce8e409e4387cb9bb091f addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=renounce(uint256), args=[2402600863]\r\n\t\tsender=0x15cf0b60ec1f9fbc542a1325e38347fd66ced786 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x0000000000000000000000000000000000007215]\r\n\t\tsender=0xfbf60f54b74648df4c48c488a5ded33f413f06ac addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[1]\r\n\t\tsender=0x0000000000000000000000000000000000003aa9 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x0A3214154F22a0a2B415B23a84C8169E8B6370ea, 100412156484480734209902298767406292621070765398826899980499611410060156994463), false, (680943382629, 18370), 0x00000000000000000000000000000000000021C4, 0x66657220616D6F756E7420657863656564732062, 244165572329067506025632611045284956017)]\r\n\t\tsender=0xa80bc71b07774533a4afded377addf22efeb522a addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[59836693286154064924223951714870304470]\r\n\t\tsender=0x0000000000000000000000000000000000002364 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0xE14EaD7C2201Ee43AFEf4aBE0a0d7ABEfc1e1fBF, 115792089237316195423570985008687907853269984665640564039457584007913129639932), true, (1099511627773, 1099511627775), 0x2bF6ef1D75b98a6ac716dEDb00d0bB4d96284e65, 0xB0a760b6cc64Ddb7CfCb1F0Be659CEc8A94904fC, 340282366920938463463374607431768211454)]\r\n\t\tsender=0x52b51f1bd0f7ca7d7cd770ff2f8995856f4e9187 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[214109070832057260384428961273164152193]\r\n\t\tsender=0x3d5d1962013e8f9fdec53908763855c8b2150bd9 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x2954155Ab7b0942694Bea4CE44661D9A8736c7C7]\r\n\t\tsender=0x0000000000000000000000000000000000000935 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[56764492981770342715339218433140013911537257797758815129574756886696880652598]\r\n\t\tsender=0x00000000ffffffffffffffffffffffffffffffff addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0xD70946fEE0BaeC08008f5ae856d3F4882988c52C, 515168788675286371050382935412991480384451302335543]\r\n\t\tsender=0x07879790999dee5496d96d56bc82c0c172b67b31 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[24859913286633257700980511261229966935841, 0x90948e6d65BD21c22E5f0739F2a0c39694609107]\r\n\t\tsender=0x2034333038343031343338313734373037350000 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x9c852a877c0448bf81A503a23790a7bB0104FF9f, 115792089237316195423570985008687907853269984665640564039457584007913129639932), true, (1, 146015984), 0x6C635F1d75F5fB1FeEA980708425095b2E1645AF, 0x24B6424B39130da161Cbee3a8AA80fF4F7E4aa55, 2420977740)]\r\n\t\tsender=0x0000000000000000000000000000000000000673 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[4191989157735637247524777061944]\r\n\t\tsender=0x0000000000000000000000000000000000004b4b addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0xdf7F28a1b1Cd372C52cBC4e3e70a6A9a323Ad883]\r\n\t\tsender=0x5bd219240f1ce6b19505f2616893a8b95e68edc2 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x60b886D06b59b17613C17977092147Bf7BcB72bB, 115792089237316195423570985008687907853269984665640564039457584007913129639932]\r\n\t\tsender=0x84ab569c64d6182a18893dcd163f0f1c2090733a addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0xF4146fc623b53B8b6D49B6A19deE37E92EEa1463, 115792089237316195423570985008687907853269984665640564039457584007913129639932]\r\n\t\tsender=0x00000000000000000000000000000000000001e9 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[26263491]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b6371eb addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x0000000000000000126795C29eBbBd33d9ac317D]\r\n\t\tsender=0x000000000000000006633ad006f8eb86b76672bd addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[2197253385777879525709524]\r\n\t\tsender=0xa15518de6b192f9c7c273af498808a3c6bc0567a addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[2016033415808150401775976447446960553456665094306]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b636fd6 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x2E71646c1d8C4F5849d48354338ba0477019939c]\r\n\t\tsender=0x3029e94fd7c2b59a1d7d237bf57258d819c835f1 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=cancel(uint256), args=[844617117037146688591390307]\r\n\t\tsender=0xb12a56250d3ceff668802662a0bdad2cafae38d0 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x0a3214154f22A0a2b415B23A84c8169E8B6370df, 110349606679412691172957834289542550319383271247755660854362242977991410020333]\r\n\t\tsender=0x2032323430333130343737353838343834310000 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x80e063814bAE6194b5B3011035fa77107DCd9Df0, 115792089237316195423570985008687907853269984665640564039457584007913129639933]\r\n\t\tsender=0x0000000000000000000000000000000000000e64 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[23269318611815569193]\r\n\t\tsender=0xcc1fd7e1d0a4d8d55d17f1743de044f510534704 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[110349606679412691172957834289542550319383271247755660854362242977991410020956]\r\n\t\tsender=0x0000000000000000000000000000000000001184 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=cancel(uint256), args=[4379247871810924035811760948656857243917603909011408814401694015671932]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b63728a addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x000000000000000000000000000000000001B7FE, 88053265839102647479523938528033245184154517880247382676929417491323627241472), false, (765, 1, 1475), 0x1A95933Aee2c6Fa3f74B61Ab44aa75B2F69b594C, 0x0000000000000000000000000000000000001D27, 244165572329067506025632611045284956306)]\r\n\t\tsender=0x0000000000000000000000000000000000004d04 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=burn(uint256), args=[6527409346910]\r\n\t\tsender=0xa3116a3727f15eb9f34702e46f41357a1bbc79a4 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[249541639502095293528805787733739683209]\r\n\t\tsender=0x00000000000000000000000000349fcd8dc1eb95 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[1]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b63725f addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0xC79a2E21DCAe562F5EcfB523c4E386e421091020, 3]\r\n\t\tsender=0x5f9f8fbde4680a3c1447b96f7620fe7c4ce3f1a1 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=withdraw(uint256,address,uint128), args=[5149038963953, 0x00000000000000000000000000000000180Ccc1D, 191269779]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b637127 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x00000000000000000000000000000000000018Cd, 8046), false, (0, 2504, 19493552128), 0x6f772d6c6576656c2063616C6c206661696c6564, 0xd67ce799B3Ba1Bd17e27dDf5240E29c284EBdf9B, 80783130563415399)]\r\n\t\tsender=0x7f8e715db87de790360818e7b09108c6c36d656f addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x22B4A5c531eb3B5CeF7Abd9EA99518f0c100da77, 115792089237316195423570985008687907853269984665640564039457584007913129639932]\r\n\t\tsender=0x2015b2b9d7037817e6d8096c93b51bd5397a7435 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[391355, 0xF7C1f3F9585388eCf807489DaC3c728D49129Ab5]\r\n\t\tsender=0xdeafd932a4b79f8d7f2c1b7d60a6b1efacd472c8 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=renounce(uint256), args=[1]\r\n\t\tsender=0x68689d36188a45777717872e207fdebb36fcfac3 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=cancel(uint256), args=[3]\r\n\t\tsender=0xb06957cc80b67f0e5f1182eaee88568073990744 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[115792089237316195423570985008687907853269984665640564039457584007913129639935, 0xb89C669225Edc4a97515fBeE9477318a1DbC31F1]\r\n\t\tsender=0x10e09cb572409a29f268ab14fb21d4e6bed76502 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[2579163262944926960456618268151813434239, 0xC00A401962f1a119501344b62D77CD1C09A2742d]\r\n\t\tsender=0x03b55caccc848be8dc4e4f96937ce9398c19bbde addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[340282366920938463463374607431768211455]\r\n\t\tsender=0x72c2d97ef4391daac19febcaaf62e35afc2c519d addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=renounce(uint256), args=[104506752144312624200328372674822329719283640710016265911605561514981367]\r\n\t\tsender=0x5894854febbbcf9271e4d7c91fa8be37da191335 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x9cbCCa398BaE7138727704e278c7320629a29cbb, 1), true, (3, 3, 2), 0x30730ED6397AeA0F8Bb2f2d6B2F9355084048b91, 0x232Fbcc5af60658CcD80bCbb1bf8e6DDafB697e7, 340282366920938463463374607431768211453)]\r\n\t\tsender=0xb5687ebb8cd5e2c1c04eb8faa3f74b0f87283648 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x0000000000000000000000000000000000000AF0, 298), false, (45412, 1085970866583, 355), 0xa690ebB54f199F57094374e2E37A8aff5adeE325, 0x2954155ab7B0942694bEA4ce44661D9a8736c99a, 66461399789245793645190353014017228800)]\r\n\t\tsender=0x0000000000000000000000000000000000003c8e addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=withdrawMax(uint256,address), args=[1418964694750068602750425620138915731957919222671340251181, 0x57140b79287eFF73acE791CE5F9f41a46d3b2C28]\r\n\t\tsender=0x00000000000000000000000000000000000006fc addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[28558]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b63714c addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x4D4f000000000000000000008AC7230489e80000, 20533321941664188521742852948498416938923860418841856891682816), false, (100801, 0, 1415), 0x00000000000000000000000000000000000006fC, 0x57865504b6E1664144cE3E6D246a51A35a30aB6C, 244165572329067506025632611045284956190)]\r\n\t\tsender=0x0000000000000000000000000000000000006ebc addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=burn(uint256), args=[2735845068969056037010598264832]\r\n\t\tsender=0x73d1c972f9fc9bd6307aaabbabe5e32ab3b328c0 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=renounce(uint256), args=[3]\r\n\t\tsender=0x0000000000000000000000000000000000003017 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=withdrawMax(uint256,address), args=[3802920628970505031032857195289966522840875720975964440, 0x8411aA7176704CD0484B12b9Cb287E91D385Ac13]\r\n\t\tsender=0xe3d074e54bdde9f0a53c25c40510693503d938b8 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x6ee174ad305c9A5Fc50C55A28839C25a3751bd07]\r\n\t\tsender=0x000000000000000000120000000011000000000e addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[115792089237316195423570985008687907853269984665640564039457584007913129639933]\r\n\t\tsender=0xd67ce799b3ba1bd17e27ddf5240e29c284ebdf9b addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=claimProtocolRevenues(), args=[]\r\n\t\tsender=0x0000000000000000000000000000009a8736c954 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x4D4f000000000000000000008AC7230489e80000]\r\n\t\tsender=0x00000000000000000000000000000000000020c5 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=withdrawMax(uint256,address), args=[60455688978723478179738473680099175345334841045633116393701376, 0x000000000000000000000000000000000000017E]\r\n\t\tsender=0x4d4f000000000000000000008ac7230489e80000 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[5194816019681655106251]\r\n\t\tsender=0x000000000000000033477b9799a58f018d477858 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=transferNFT(uint256,address), args=[30049578511147215784808879450479950515410803173828260292222444478224034430976, 0x0000000000002fC8FAC2000000018700000000A8]\r\n\t\tsender=0x00000000000000000000000000000000000004e3 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x2b1db7e92b3E6dB91A2b217953551606a2e6723F, 3443215857041959714624870072), true, (1099511627774, 8), 0xc9648638132fFE66e58BDFBEA913AA8F71CCC0a1, 0x656C781B9DB75Bec7686026DE76CD47f4606fd9c, 2)]\r\n\t\tsender=0x29b2929fd90d8bd91dd2debac2b732fa91d1db47 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x4D4f000000000000000000008AC7230489e80000, 60594162877364555266064940209109887555155378938331479282262212986885237920453), false, (1241, 19493552128), 0x000000000000000001B3765ccF7251fa2a86eaDb, 0x302E976e7b5C7eB79a0D39a4dE270f3366269329, 10000000000000000000)]\r\n\t\tsender=0x5c75ffd0f39f34316a776561f26a76bcabf9f17e addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0xfA6ceCE101670737e796780CE090Da0c161B4fdD]\r\n\t\tsender=0xae012dfad2352b53fd2c9cd7868d2063f5e81f81 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x00000000000000000000000000e7e2BCe40D646C, 75276140696391174450305814049576319106646922510300487059720162673006384433031]\r\n\t\tsender=0xebb122842a6c2552b69d764568c85ccaff523045 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[135795452]\r\n\t\tsender=0x422e81261fbb0f187711347c603fa316413bbefd addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithRange(((address,uint256),bool,(uint40,uint40,uint40),address,address,uint128)), args=[((0x34Ce68267803439721F62686baE5DEB2E780F6F8, 179893795414458922352212571801830157533669153166422220), false, (10, 1099511627773, 3), 0xf020a901e5F217798A831C291349FC0Cf04D261b, 0x4fCb3E6086ca7550c7F04De3eec22e0ecD930B18, 5924075147861)]\r\n\t\tsender=0xc69b3863a07006e9432c394b9cff093a41f8dcd8 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=toggleFlashAsset(address), args=[0x5991A2dF15A8F6A256D3Ec51E99254Cd3fb576A9]\r\n\t\tsender=0x2037373734303232313734393734313732380000 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x7b077271737aa3FD447BD54491Af3FF84E483327, 73768580415979300788661794392), false, (0, 13118339696), 0xFF139e9e882Ee3136523727d88899BDCC48d76cF, 0x1c8e60db02B1eF38F3f772C60094fe3d035b7aaa, 932709734018582263680757)]\r\n\t\tsender=0x0a3214154f22a0a2b415b23a84c8169e8b637297 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=cancel(uint256), args=[224759]\r\n\t\tsender=0xe21c6f45a7153bd9d83474925066ab44b1bc7c0a addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0x0000000000000000000000000000000000001bE2, 9050428386312552676166298847), false, (21854, 191241671), 0x1903BbF7E871E7C1da2593f684cB788Ba153D419, 0xAE8447EB7756d6544a74010360D96dad00b11339, 9849709916039266568221032655)]\r\n\t\tsender=0x2031343037323639353333343831303730343100 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[340282366920938463463374607431768211455]\r\n\t\tsender=0xedf150678ca9738d4e270bb8ed10522c3c1abdc2 addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setFlashFee(uint256), args=[939066394931231432124679]\r\n\t\tsender=0x8c9e62c44e38d48c407c2ffa1349cd4d0babbf73 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[1218120750435878493718721921416]\r\n\t\tsender=0x1d37399ea0cf4b1e3e201960edbc6bdd113e78f2 addr=[test/invariant/handlers/LockupLinearCreateHandler.t.sol:LockupLinearCreateHandler]0x15cf58144ef33af1e14b5208015d11f9143e27b9 calldata=createWithDurations(((address,uint256),bool,(uint40,uint40),address,address,uint128)), args=[((0xA262253eC513FC36D89865FfCEaf163FC9d42b22, 25654692634022372978952755431413430143064574673273523763843927648022367891574), false, (146350233864, 680943382705), 0x0000000000000000000000000000000000001324, 0x0000000000000000000000000000000000000000, 295551205055248022230069351171020567430)]\r\n\t\tsender=0x000000000000000023c859b6fba7d640e01f182d addr=[test/invariant/handlers/ComptrollerHandler.t.sol:ComptrollerHandler]0x1d1499e622d69689cdf9004d05ec547d650ff211 calldata=setProtocolFee(address,uint256), args=[0x0000000000000000000000000000000000000393, 375861893471176265021791791741539940594198495653813]\r\n\t\tsender=0x0000000000000000000000000000000000005424 addr=[test/invariant/handlers/LockupLinearHandler.t.sol:LockupLinearHandler]0xd6bbde9174b1cdaa358d2cf4d57d1a9f7178fbff calldata=cancel(uint256), args=[1399]\r\n\t\tsender=0x2033373434000000000000000000000000000000 addr=[test/invariant/handlers/FlashLoanHandler.t.sol:FlashLoanHandler]0x212224d2f2d262cd093ee13240ca4873fccbba3c calldata=flashLoanFunction(uint128), args=[35]\r\ninvariant_ContractBalance() (runs: 256, calls: 51113, reverts: 0)\r\n</details>\r\n\r\nFoundry doesn't currently have corpus saving and replay, so we can't just re-ran the invariants based on these traces .. the only way to identify what went awry is to infer it from the traces manually. We should work our way backward from the last call in the sequence.","createdAt":"2023-02-05T14:26:01Z","labels":[],"number":318,"repository":"sablier-labs/lockup","state":"closed","title":"Potential invariant fail","type":"issue","updatedAt":"2023-02-07T13:20:43Z","url":"https://github.com/sablier-labs/lockup/issues/318"},{"author":"PaulRBerg","body":"USDC has a built-in black listing mechanism, and once every so often our end-to-end tests fails because of this revert reason:\r\n\r\n> Blacklistable: account is blacklisted\r\n\r\nWhat happens is that Foundry fuzzes a user that has been blacklisted. We should exclude this edge case and do not fail the tests.","createdAt":"2023-02-04T20:21:08Z","labels":[],"number":317,"repository":"sablier-labs/lockup","state":"closed","title":"Fix the e2e tests failure due to \"Blacklistable: account is blacklisted\"","type":"issue","updatedAt":"2023-02-20T13:13:28Z","url":"https://github.com/sablier-labs/lockup/issues/317"},{"author":"PaulRBerg","body":"","createdAt":"2023-02-03T14:18:58Z","labels":[],"number":314,"repository":"sablier-labs/lockup","state":"closed","title":"Upgrade to Solidity v0.8.18","type":"issue","updatedAt":"2023-02-11T14:49:30Z","url":"https://github.com/sablier-labs/lockup/issues/314"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablierhq/v2-core/issues/311#issuecomment-1415178828).","createdAt":"2023-02-03T07:06:14Z","labels":[],"number":312,"repository":"sablier-labs/lockup","state":"closed","title":"Disallow \"startTime == cliffTime == endTime\" in linear contract","type":"issue","updatedAt":"2023-02-05T15:15:27Z","url":"https://github.com/sablier-labs/lockup/issues/312"},{"author":"PaulRBerg","body":"This check:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/261c4b00bf2933e352b425f707038db70c625ae2/src/libraries/Helpers.sol#L137\r\n\r\nShould be rewritten to use the `>=` comparison operator, to keep it in line with the check we make in the for loop:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/261c4b00bf2933e352b425f707038db70c625ae2/src/libraries/Helpers.sol#L155","createdAt":"2023-02-02T17:31:02Z","labels":[],"number":311,"repository":"sablier-labs/lockup","state":"closed","title":"Minor inconsistency in the `_checkProSegments` function","type":"issue","updatedAt":"2023-02-05T15:15:01Z","url":"https://github.com/sablier-labs/lockup/issues/311"},{"author":"razgraf","body":"### Context\r\n\r\nA user has been asking about time formats used in the app and noticed it wasn't really clear how we convert them.\r\n\r\n<img width=\"513\" alt=\"Screenshot 2024-04-18 at 13 22 22\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/220d269c-efb6-42e3-bcee-b88baa99bd0e\">\r\n\r\n### Solution A. Add on-hover tooltips\r\n\r\nSimilar to the tooltips we use for the `<Address />` component, we could design a small `<Date />` component that renders a paragraph and a tooltip with its value converted to UTC.\r\n\r\n<img width=\"568\" alt=\"Screenshot 2024-04-18 at 13 27 30\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/b7154e82-c723-4e51-b862-42c86f3e8b88\">\r\n\r\n### Solution B. Explain the formats in the CSV forms and in the `<MomentPicker/>` Modal\r\n\r\nSelf-explanatory.\r\n\r\nNote: both solutions should be considered (non-exclusively).\r\n\r\n","createdAt":"2024-04-18T12:29:09Z","labels":[],"number":933,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a UTC helper on top of the most important dates","type":"issue","updatedAt":"2024-07-05T16:15:10Z","url":"https://github.com/sablier-labs/interfaces/issues/933"},{"author":"PaulRBerg","body":"<img width=\"599\" alt=\"SCR-20240418-lzzf\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/adff8876-e2d5-44a6-ba65-d683c443d4ab\">\r\n","createdAt":"2024-04-18T12:26:34Z","labels":["type: feature","priority: 2"],"number":931,"repository":"sablier-labs/interfaces","state":"closed","title":"Clarify timezone in CSV upload","type":"issue","updatedAt":"2024-04-18T12:33:18Z","url":"https://github.com/sablier-labs/interfaces/issues/931"},{"author":"PaulRBerg","body":"For obvious reasons\r\n\r\n<img width=\"400\" alt=\"SCR-20240409-scrc\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/35c4b294-2f50-41fe-acf9-ddece71b6a54\">\r\n","createdAt":"2024-04-09T19:52:40Z","labels":["type: feature","priority: 0","work: clear"],"number":924,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable the Crisp chat for high-risk addresses","type":"issue","updatedAt":"2024-04-14T14:04:28Z","url":"https://github.com/sablier-labs/interfaces/issues/924"},{"author":"maxdesalle","body":"Not sure if this is a good idea, but we should consider adding our investors, like we add some of our users, on our website.\r\n![CleanShot 2024-03-26 at 09 36 41@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/82eab5ca-7fb8-4a5e-b01f-ca2d9d380d4c)\r\n","createdAt":"2024-03-27T01:11:36Z","labels":[],"number":917,"repository":"sablier-labs/interfaces","state":"closed","title":"Add investors on website","type":"issue","updatedAt":"2024-07-05T16:14:35Z","url":"https://github.com/sablier-labs/interfaces/issues/917"},{"author":"PaulRBerg","body":"Reported by Twitter user [andreiashu](https://twitter.com/andreiashu):\r\n\r\n> was playing with the new airstream functionality and the loading of the csv file doesn't seem to work - basically a blocker for anyone trying to test this. I am on Sepolia and used the csv template (removed the last line, see screenshot) but the UI still says something is wrong\r\n\r\n<img width=\"700\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/90191c3c-778f-4a0f-b296-fb0201425442\"/>\r\n\r\n","createdAt":"2024-03-22T12:15:23Z","labels":["type: bug","priority: 0"],"number":915,"repository":"sablier-labs/interfaces","state":"closed","title":"CSV loading does not work","type":"issue","updatedAt":"2024-03-26T12:37:33Z","url":"https://github.com/sablier-labs/interfaces/issues/915"},{"author":"razgraf","body":"Once in a while we get an email from someone regarding clickjacking among other common types of pseudo-hacks used as scams (e.g. vercel subdomain takeover etc.).\r\n\r\nThe task is to investigate Click-hijacking and the usage of the [`CSP: frame-ancestors`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) header to prevent this. The allowed hosts should mirror those approved in the Safe SDK [connector](https://github.com/sablier-labs/v2-interfaces/blob/2465f4aa7c59a7f7219bd2f8a80d0f8debe646c7/apps/client/src/contexts/Web3/connectors/safe.ts).\r\n\r\n---\r\n\r\nOn this report in particular (see picture), I've mentioned over email:\r\n\r\n> [MDN article on X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options)\r\n>\r\n> Safe apps are embedded as IFrames. X-Frame-Options only enabled denying everything or using same-origin (so [sablier.com](http://sablier.com/)) so it doesn't work in the context of Safe(s).\r\n>\r\n> Maybe we could use \"frame-ancestors\" as [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) suggests but more research is needed. Will open an issue.\r\n>\r\n> Anyhow, the user would have to open the website using the wrong URL for them to be susceptible to this attack. If they do that, there's a high chance of them getting scammed anyway. Not that it's not worth finding a fix for this, but ..\r\n> \r\n> <img src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/f99eb448-fd7c-4478-82f5-2f012e6ab0d4\" width=\"400\" />\r\n","createdAt":"2024-03-22T11:47:58Z","labels":["type: feature","priority: 2","effort: medium","work: complicated"],"number":914,"repository":"sablier-labs/interfaces","state":"closed","title":"Clickjacking prevention","type":"issue","updatedAt":"2024-07-05T16:15:28Z","url":"https://github.com/sablier-labs/interfaces/issues/914"},{"author":"maxdesalle","body":"We currently display the \"volume\" on our website, though it's unclear where it actually comes from. Is it based on our 2021 historic peak TVL? In that case, it should be \"Peak TVL\".\r\n\r\nIMO it would be better to replace it altogether with a metric like our TVL each month, would be happy to update the website once a month with the TVL according to DefiLlama that month.\r\n![CleanShot 2024-03-21 at 14 20 06@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/8ae7e002-7e37-4b28-8c39-db63bd4e276a)\r\n\r\n","createdAt":"2024-03-21T18:19:49Z","labels":[],"number":913,"repository":"sablier-labs/interfaces","state":"closed","title":"Replace meaningless volume metric with something else","type":"issue","updatedAt":"2024-07-05T16:14:31Z","url":"https://github.com/sablier-labs/interfaces/issues/913"},{"author":"razgraf","body":"Context: \r\n- https://github.com/sablier-labs/v2-interfaces/actions/runs/8144486264/job/22258675680\r\n\r\nPossible cause: we've had similar issues due to imports of various packages not being handled well by cypress. The solution might be to double-check the dependency tree and minimize it again.","createdAt":"2024-03-05T12:58:29Z","labels":["type: bug","priority: 2","work: complex"],"number":910,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate failing availability test","type":"issue","updatedAt":"2024-07-05T15:50:48Z","url":"https://github.com/sablier-labs/interfaces/issues/910"},{"author":"PaulRBerg","body":"I cannot see all the available chains on my MacBook Air 13\"\r\n\r\n<img width=\"400\" alt=\"SCR-20240301-lawo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/bfefd272-7b76-45f2-8be3-5f1b21eb8e5f\">\r\n","createdAt":"2024-03-01T10:15:51Z","labels":["type: feature"],"number":909,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a search box in the chain picker","type":"issue","updatedAt":"2024-03-04T12:03:12Z","url":"https://github.com/sablier-labs/interfaces/issues/909"},{"author":"maxdesalle","body":"When choosing the cliff duration for a stream with cliff, there is a message displayed that mentions when the stream ends based on the cliff duration, which is mistaken, as the stream duration is based on the date/duration picked in the duration picker, not the cliff duration picker.\r\n\r\n![CleanShot 2024-02-25 at 12 22 54@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/4fe54b6b-8818-47ad-ad8e-93d865a65f08)\r\n","createdAt":"2024-02-25T17:37:10Z","labels":[],"number":904,"repository":"sablier-labs/interfaces","state":"closed","title":"Wrong message for cliff duration picker","type":"issue","updatedAt":"2024-03-05T12:52:03Z","url":"https://github.com/sablier-labs/interfaces/issues/904"},{"author":"razgraf","body":"Looks like it's not working anymore","createdAt":"2024-02-20T19:36:23Z","labels":[],"number":901,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate ENS in recipient fields","type":"issue","updatedAt":"2024-02-21T11:16:14Z","url":"https://github.com/sablier-labs/interfaces/issues/901"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/705\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **razgraf** December 13, 2023</sup>\r\nOne thing worth considering re. Airstreams and claiming tokens through our interface is ToS of each campaign.\r\n\r\nSome campaign owners would probably want to geoblock claiming from the US. The fact that we provide a claiming interface for every airstream campaign means users can circumvent their official UI to claim tokens from us.\r\n\r\nOf course the same can be said about claiming from Etherescan.\r\n\r\nA solution for this could be using the recent middleware utility implemented for the UK disclaimer. We'd \"blacklist\" the required countries on a per-use-case basis.\r\n\r\nAnother solution would be simply disabling claims from our UI (again, on a per-campaign case), leaving it up to the customer to build their external UI that conforms with whatever legal requirements they have.\r\n\r\nLater edit: we already have one potential customer asking for this.\r\n\r\nSeparate point: another user mentioned custom ToS approvals before claiming. While this could also make sense, I'm afraid that too much \"manual management\" of these things in the canonical app would turn against us. TBD.</div>","createdAt":"2024-02-20T15:21:04Z","labels":["type: feature","priority: 2","effort: high","work: complex"],"number":900,"repository":"sablier-labs/interfaces","state":"closed","title":"Research Geoblocking for Airstreams and how to save this setting","type":"issue","updatedAt":"2024-07-05T16:16:17Z","url":"https://github.com/sablier-labs/interfaces/issues/900"},{"author":"razgraf","body":"The task is to check https://github.com/wevm/wagmi/pull/3492 as it does affect us too. There's an issue and that PR open, so we should bump our wagmi version after it gets merged.\r\n\r\n> [!IMPORTANT]\r\n> This only happens in development, so the production environment is safe.\r\n\r\nInitially tracked in https://github.com/sablier-labs/v2-interfaces/pull/893.","createdAt":"2024-02-15T17:58:54Z","labels":["type: bug","backlog","effort: low","work: chaotic"],"number":896,"repository":"sablier-labs/interfaces","state":"open","title":"Hot-reload issues with wagmi's connected stated, in development (wagmi)","type":"issue","updatedAt":"2025-07-14T08:34:01Z","url":"https://github.com/sablier-labs/interfaces/issues/896"},{"author":"razgraf","body":"The task is to check the `mock` connector [implementation](https://github.com/wevm/wagmi/blob/main/packages/core/src/connectors/mock.ts) and try to attach a signer/walletClient to it somehow. Right now, because of this, we cannot run the cypress tests.\r\n\r\nThere's an open discussion about it here: https://github.com/wevm/wagmi/discussions/3597 so let's subscribe to it and hopefully get some clarifications.\r\n\r\nInitially tracked in https://github.com/sablier-labs/v2-interfaces/pull/893.\r\n","createdAt":"2024-02-15T17:57:12Z","labels":["type: bug","priority: 3","effort: low","work: chaotic"],"number":895,"repository":"sablier-labs/interfaces","state":"closed","title":"Mock connnector doesn't get an attached signer (wagmi)","type":"issue","updatedAt":"2024-07-05T15:50:48Z","url":"https://github.com/sablier-labs/interfaces/issues/895"},{"author":"PaulRBerg","body":"We should put it somewhere at the top of the page. The rationale is simple - better visibility, more claims.\r\n\r\nUsers shouldn't have to scroll to see the \"Check eligibility\" button:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/assets/8782666/aa8b9dcc-2c9f-4d21-9fbc-725183ccfd2c\r\n\r\n---\r\n\r\nIt is worth noting that we have 2x as many mobile users as desktop users.\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/75dd57a3-7070-473c-9a1f-9afae2b62019\"/>","createdAt":"2024-02-15T10:45:59Z","labels":["priority: 2"],"number":894,"repository":"sablier-labs/interfaces","state":"closed","title":"Better visibility for the \"Check eligibility\" button on mobile","type":"issue","updatedAt":"2024-03-05T12:52:03Z","url":"https://github.com/sablier-labs/interfaces/issues/894"},{"author":"PaulRBerg","body":"## Tasks\r\n\r\n- [ ] Allow up to 300 segments for single streams, since the gas consumption in that case is 7.5M, which fits within all known block gas limits on every blockchain\r\n- [ ] Keep the limit to 30 segments for group streams - we can tweak this later based on user feedback\r\n    - Note: 30 segments should consume ~1M gas\r\n- [ ] Gracefully handle the error when the number of streams in a group overflows the gas limit\r\n\r\n## Context\r\n\r\n<img width=\"400\" alt=\"SCR-20240213-lcyg\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e116f428-f30c-4a4e-be50-07cf3557d4e5\">\r\n\r\n<img width=\"400\" alt=\"SCR-20240213-lfcw\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/84c5ade2-3724-4edf-9d7b-32bfb3505481\">\r\n\r\nBasically, a user wanted to create more an Unlock in Steps stream with more than 20 segments. From the smart contracts' point of view, this is totally doable - LD supports up to 300 segments.\r\n\r\nNote: I have created this issue because I have optimistically assumed that there's no technical blocker for allowing more than 20 segments.\r\n\r\n## Gas Estimations\r\n\r\nSee Andrei's work [here](https://www.notion.so/sablier/Investigate-how-high-MAX_SEGMENT_COUNT-can-be-c92db3bebae1483aa6e7eb5d47334dd7).","createdAt":"2024-02-13T10:29:35Z","labels":["type: feature","priority: 1"],"number":891,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow more than 20 segments in Unlock in Steps","type":"issue","updatedAt":"2024-02-16T15:55:42Z","url":"https://github.com/sablier-labs/interfaces/issues/891"},{"author":"PaulRBerg","body":"The lawyer I have engaged to update our legal policies advised me today to mention the \"Privacy Policy\" here:\r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/687fd0fc-9c1f-44ad-a56d-dd2a749ed163\"/>","createdAt":"2024-02-12T17:32:09Z","labels":["type: feature","priority: 2"],"number":888,"repository":"sablier-labs/interfaces","state":"closed","title":"Mention Privacy Policy in the wallet connection modal","type":"issue","updatedAt":"2024-02-16T17:07:49Z","url":"https://github.com/sablier-labs/interfaces/issues/888"},{"author":"razgraf","body":"Add \"View on Opensea\" button to the bottom right actions panel, as per the latest comments in the original discussion.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/571\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** August 30, 2023</sup>\r\n## Problem\r\n\r\nOur PR marketing campaign with NFTFi was a [success](https://twitter.com/NFTfi/status/1696523033442443552).\r\n\r\nNFTFI followed up with this question:\r\n\r\n> Sablier team, we got fantastic feedback from various fronts. Are there other non-cancellable streams that we could collab on?\r\n\r\nThe problem is that we don't know who our users are (pseudo-anonymity FTW). Manually scraping the web for identities that sit behind specific Ethereum addresses would involve quite a bit of drudgery. And using a platform like TRM Labs would be out of line.\r\n\r\n## Solution\r\n\r\nAdd a \"Lend\" button in the \"Actions\" tab of the stream profile page. When the button is clicked, a tiny modal appears that shows the user what NFT lending platforms are available (NFTFI and DeFrag at the moment):\r\n\r\n<img width=\"350\" alt=\"Screenshot 2023-08-30 at 7 19 59 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ced7e24f-3f6c-4b28-9b30-658605c8e3ec\">\r\n</div>","createdAt":"2024-02-12T16:35:55Z","labels":[],"number":887,"repository":"sablier-labs/interfaces","state":"closed","title":"Add another \"View on Opensea\" button in the main Stream profile page","type":"issue","updatedAt":"2024-03-05T12:52:04Z","url":"https://github.com/sablier-labs/interfaces/issues/887"},{"author":"razgraf","body":"See [this](https://github.com/sablier-labs/v2-interfaces/discussions/792#discussioncomment-8442657) comment for context.\r\n\r\nFor v2.0 and v2.1, instead of using `withdrawMultiple` we could choose to batch `withdraw` calls to circumvent [this bug](https://github.com/sablier-labs/v2-core/discussions/773).","createdAt":"2024-02-12T14:55:34Z","labels":[],"number":885,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve `cancelMultiple` and `withdrawMultiple` experience for Safe's using batches","type":"issue","updatedAt":"2024-03-04T17:05:58Z","url":"https://github.com/sablier-labs/interfaces/issues/885"},{"author":"razgraf","body":"The Wallet Connect link we create when a user logs in with their mobile wallet is sometimes unstable.\r\n\r\nFrom initial research conducted by @gavriliumircea the `signer` (or `walletClient`) isn't passed down correctly which causes configurations like the network (chain) or signer itself to lack functionality and crash on attempted transactions. It leads to users reporting things such as the \"grayed\" Claim button in the Eligibility cover (or various other transaction errors):\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/843\r\n- #857\r\n- `network undefined (chainId: 1)`\r\n\r\nUnfortunately we haven't been able to reproduce this issue on any of our current devices.","createdAt":"2024-02-12T11:55:02Z","labels":[],"number":883,"repository":"sablier-labs/interfaces","state":"closed","title":"Research fix for Wallet Connect creating unstable connections","type":"issue","updatedAt":"2024-02-15T16:22:47Z","url":"https://github.com/sablier-labs/interfaces/issues/883"},{"author":"razgraf","body":"A user reported our DeBank integration is showing streams in their dashboard even if they got canceled.\n\nOn the topic of integrations with portfolio management apps we also have a Zapper integration started by Mircea a while ago, still pending review (sorry for the delay).\n\nThe task is to:\n- [ ] Have a look at DeBank and fix the issue\n- [ ] Review the existing WIP integration with Zapper and launch it","createdAt":"2024-02-10T10:01:17Z","labels":["type: feature","priority: 2","effort: medium","work: complicated"],"number":881,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix or launch portfolio-app integrations","type":"issue","updatedAt":"2024-08-20T13:03:11Z","url":"https://github.com/sablier-labs/interfaces/issues/881"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/842\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** February  1, 2024</sup>\r\n## Idea\r\n\r\nSince we've introduced airstreams, it is natural to worry that users have to claim before the end date (for normal streams).\r\n\r\nIt would be helpful to add an info box in the withdraw side bar (or edit the existing info box) to clarify that withdrawals can be made any time, even long after the end date.\r\n\r\n<img width=\"400\" alt=\"SCR-20240201-qczt\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5912b65a-2c27-495a-a87b-14c7fdd3490d\">\r\n\r\n## Customer Support\r\n\r\nWe have received several questions like this:\r\n\r\n<img width=\"400\" alt=\"sablier-confusion-foo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9c4861af-ca7f-4de5-9ca3-16dc1ad98114\">\r\n</div>","createdAt":"2024-02-09T12:45:13Z","labels":[],"number":879,"repository":"sablier-labs/interfaces","state":"closed","title":"Explain that it is possible to withdraw after the end date","type":"issue","updatedAt":"2024-02-16T17:17:37Z","url":"https://github.com/sablier-labs/interfaces/issues/879"},{"author":"PaulRBerg","body":"Not sure where this user saw that error, but he shouldn't have seen it in the first place:\r\n\r\n<img width=\"400\" alt=\"SCR-20240208-nric\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/129a4ab0-b6c8-4895-8488-b1035c2762c3\">\r\n\r\nhttps://app.crisp.chat/website/9a5f90f6-0b3a-4503-9b93-96c497b81ec3/inbox/session_2a8d47cf-9d57-4168-a87a-c3128b51448a/","createdAt":"2024-02-08T13:30:27Z","labels":["priority: 3"],"number":877,"repository":"sablier-labs/interfaces","state":"closed","title":"Airstream recipients should not see error messages meant for campaign creators","type":"issue","updatedAt":"2024-02-08T13:50:12Z","url":"https://github.com/sablier-labs/interfaces/issues/877"},{"author":"PaulRBerg","body":"The following policies should be referenced in the landing page:\r\n\r\n- [Terms of Service](https://files.sablier.com/terms-of-service.pdf)\r\n- [Privacy Policy](https://files.sablier.com/privacy-policy.pdf)\r\n- [Risk Notice](https://files.sablier.com/risk-notice.pdf)\r\n\r\nWe've recently received this (worrisome) message on Crisp:\r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/667bb6c6-ddbc-4907-b816-cd7b53088044\"/>\r\n\r\nFrom a user who was blacklisted by TokenSight.\r\n","createdAt":"2024-02-08T12:52:14Z","labels":["type: feature","priority: 0"],"number":876,"repository":"sablier-labs/interfaces","state":"closed","title":"Link to legal policies in the footer of the landing page","type":"issue","updatedAt":"2024-02-12T17:32:36Z","url":"https://github.com/sablier-labs/interfaces/issues/876"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOwners of non-transferable streams are confused about the NFT-related texts that appear in the UI. Specifically, the text above the NFT render in the \"Details\" panel.\r\n\r\n## Solution\r\n\r\nDisplay a different text when the NFT is non-transferable, i.e., remove the note about transferring the stream, and replace it with a caveat that the stream cannot be transferred.\r\n\r\nNote: I'm not sure if this is the only place where there are NFT-related texts. I will let you @razgraf @gavriliumircea handle this.\r\n\r\n## Context\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1c86b5e9-d318-4419-a77c-e5c00acf45a0\"/>\r\n","createdAt":"2024-02-08T11:33:25Z","labels":["priority: 2"],"number":874,"repository":"sablier-labs/interfaces","state":"closed","title":"Adjust transferability texts when the stream is non-transferable","type":"issue","updatedAt":"2024-02-16T17:07:48Z","url":"https://github.com/sablier-labs/interfaces/issues/874"},{"author":"razgraf","body":"Contracts: https://docs.sablier.com/contracts/v2/deployments#lightlink\r\nSubgraphs: https://github.com/sablier-labs/v2-subgraphs/blob/main/apps/protocol/src/constants/chains/lightlink.ts\r\nHomepage: https://www.lightlink.io/","createdAt":"2024-02-08T09:57:49Z","labels":[],"number":870,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for Lightlink mainnet","type":"issue","updatedAt":"2024-02-08T13:38:35Z","url":"https://github.com/sablier-labs/interfaces/issues/870"},{"author":"PaulRBerg","body":"Creating a stream does not work on Arbitrum:\r\n\r\n- Single stream\r\n- I selected USDC\r\n- Made the stream non-transferable\r\n- I used an account that has previously created Sablier streams (i.e., 0x0298F4332e3857631385b39766325058a93e249f)\r\n\r\nSee the screenshots and the video:\r\n\r\n<img width=\"500\" alt=\"SCR-20240207-myul\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/29011d0c-8693-4ad9-af83-5138e94ff849\">\r\n\r\n<img width=\"365\" alt=\"SCR-20240207-mywq\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/cafc650e-1b1c-4ef6-98b6-f3262bcc5152\">\r\n\r\nhttps://www.loom.com/share/39098d8809c34f07bfc99c456abda283\r\n\r\ncc @razgraf @gavriliumircea\r\n","createdAt":"2024-02-07T12:37:21Z","labels":["type: bug","priority: 0"],"number":868,"repository":"sablier-labs/interfaces","state":"closed","title":"Error: Allowed amount has to be greater than 0","type":"issue","updatedAt":"2024-03-05T12:51:56Z","url":"https://github.com/sablier-labs/interfaces/issues/868"},{"author":"PaulRBerg","body":"- [ ] Hide completed campaigns (e.g. all users claimed)\r\n- [x] Hide expired campaigns","createdAt":"2024-02-06T21:33:53Z","labels":["type: feature"],"number":867,"repository":"sablier-labs/interfaces","state":"closed","title":"More filtering options for airstreams search","type":"issue","updatedAt":"2024-02-13T12:18:48Z","url":"https://github.com/sablier-labs/interfaces/issues/867"},{"author":"razgraf","body":"We've implemented Vercel's SpeedInsights in #861 but had to comment it out due to a hydration bug. We should keep an eye on this issue: https://github.com/vercel/speed-insights/issues/35 and re-enable the API once the bug is fixed.","createdAt":"2024-02-06T16:53:29Z","labels":["type: bug","priority: 3","effort: low","work: complicated"],"number":865,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-enable SpeedInsights once the hydration bug is fixed","type":"issue","updatedAt":"2024-07-05T16:16:20Z","url":"https://github.com/sablier-labs/interfaces/issues/865"},{"author":"PaulRBerg","body":"Shub's realization in https://github.com/sablier-labs/v2-interfaces/issues/860 made me realize that that tooltip warning (about not using exchange addresses) should be added in the Transfer Stream sidebar, i.e. here:\r\n\r\n<img width=\"400\" alt=\"SCR-20240206-owpe\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/171fbd2a-636d-4ac0-87ae-b9082ae49b72\">\r\n\r\nFor maximum clarity, this is the tooltip warning that I'm referring to:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/60746123-dc62-4105-a513-e3deb1abd5a6\"/>\r\n","createdAt":"2024-02-06T14:56:25Z","labels":["priority: 3"],"number":863,"repository":"sablier-labs/interfaces","state":"closed","title":"Add tooltip warning about new recipient address in Transfer Stream sidebar","type":"issue","updatedAt":"2024-02-16T17:17:27Z","url":"https://github.com/sablier-labs/interfaces/issues/863"},{"author":"PaulRBerg","body":"@smol-ninja is correct - there's no need for that warning in the withdraw form.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/844\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **smol-ninja** February  1, 2024</sup>\r\n## Context\r\nWhen withdrawing from a stream, if `msg.sender` is the recipient, `to` could be any address ([source code](https://github.com/sablier-labs/v2-core/blob/84758a40077bf3ccb1c8f7bb8d00278e672fbfef/src/interfaces/ISablierV2Lockup.sol#L240C1-L259C78)).\r\n\r\n## Problem\r\nIn the UI, if the recipient tries to withdraw to a different address, the tooltip displays the requirement for `to` address to be able to interact with the Sablier protocol and that is not true. It would simply transfer tokens to the `to` address.\r\n\r\n\r\n<img width=\"613\" alt=\"Screenshot 2024-02-01 at 23 27 51\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/ec7f733d-8541-41e1-8ba9-2fe9059199b0\">\r\n\r\n<img width=\"613\" alt=\"Screenshot 2024-02-01 at 23 27 51\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/e7a100fa-fb7b-4350-af8b-6dfa1aa515f4\">\r\n\r\n## Solution\r\nWe should not display this tooltip message if `msg.sender` is the stream recipient.</div>","createdAt":"2024-02-06T09:40:21Z","labels":["priority: 3"],"number":860,"repository":"sablier-labs/interfaces","state":"closed","title":"Inaccurate tooltip message when withdrawing to a different address","type":"issue","updatedAt":"2024-02-17T21:43:25Z","url":"https://github.com/sablier-labs/interfaces/issues/860"},{"author":"PaulRBerg","body":"## Steps to Reproduce\r\n\r\n1. Use the \"Search\" tab in Airstreams\r\n2. Click on any campaign\r\n3. Click on the back arrow\r\n4. The UI redirects the user back to \"Created\" instead of \"Search\"\r\n\r\n## Video\r\n\r\nhttps://www.loom.com/share/6b211715c38845d6928c89ad083c8d9b\r\n","createdAt":"2024-02-06T08:46:03Z","labels":["priority: 2","effort: medium","type: chore","work: complicated"],"number":859,"repository":"sablier-labs/interfaces","state":"closed","title":"Navigating back from an airstream campaign should get me back to \"Search\"","type":"issue","updatedAt":"2024-07-05T15:50:47Z","url":"https://github.com/sablier-labs/interfaces/issues/859"},{"author":"maxdesalle","body":"It appears the user had already claimed, and then tried to claim again, which caused the error? It's not 100% clear to me.\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/70470326/2d1a7404-a3e7-4553-b594-b4cf6ea5a214\"/>\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/70470326/ca72eac0-e8d9-4f1b-8333-a1baef509102\"/>\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/70470326/2d7aaf6e-6bc8-498c-a2a6-9d051ee2a2cb\"/>\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/70470326/51e13e37-1450-43d8-90b1-c74682f59cde\"/>\r\n","createdAt":"2024-02-05T21:35:16Z","labels":["type: bug","backlog","effort: epic","work: chaotic"],"number":857,"repository":"sablier-labs/interfaces","state":"closed","title":"Transaction failed error (\"unknown bug\") - Wallet Connect","type":"issue","updatedAt":"2024-07-05T16:16:50Z","url":"https://github.com/sablier-labs/interfaces/issues/857"},{"author":"PaulRBerg","body":"The UI should hide the following feature when a blacklisted user is detected. Blacklisted means that the token contract implements a `blacklisted` or `blackListed` function. If the user address is found on this black list, the UI should not make it possible to withdraw to third-party addresses here:\r\n\r\n<img width=\"623\" alt=\"SCR-20240205-mnbi\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c1ca32ef-2437-42a3-9c65-3a2b34f7057c\">\r\n\r\nRelated:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/854\r\n- https://github.com/sablier-labs/v2-interfaces/issues/840","createdAt":"2024-02-05T12:02:52Z","labels":["type: feature","priority: 1","resolution required"],"number":855,"repository":"sablier-labs/interfaces","state":"closed","title":"Blacklisted users should not be able to access the \"to\" parameter in the withdraw side bar","type":"issue","updatedAt":"2024-03-06T17:14:09Z","url":"https://github.com/sablier-labs/interfaces/issues/855"},{"author":"PaulRBerg","body":"There's a blacklisted USDC user that has received a Sablier stream:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/32f82b57-18b5-42b6-9772-6fab7596da96\"/>\r\n\r\nThese users should not be able to use the Sablier UI.\r\n\r\nNote: this issue is similar to https://github.com/sablier-labs/v2-interfaces/issues/840. Using the paid TRMLabs API would automatically ban the USDC and USDT blacklists, but it would still be helpful to implement this feature separately to reduce our API consumption.","createdAt":"2024-02-05T11:11:44Z","labels":["type: feature","priority: 2","resolution required"],"number":854,"repository":"sablier-labs/interfaces","state":"closed","title":"Users blacklisted by popular tokens should not be able to access the UI","type":"issue","updatedAt":"2024-06-17T10:34:51Z","url":"https://github.com/sablier-labs/interfaces/issues/854"},{"author":"PaulRBerg","body":"The goal is to separate the fork testing RPCs from the product RPCs to prevent accidental downtime during periods of high growth.\r\n\r\nI've recently signed up on QuickNode - you can find the credentials on 1Password.","createdAt":"2024-02-01T22:08:35Z","labels":[],"number":851,"repository":"sablier-labs/interfaces","state":"closed","title":"Replace Alchemy with QuickNode","type":"issue","updatedAt":"2024-02-02T21:18:11Z","url":"https://github.com/sablier-labs/interfaces/issues/851"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/company-discussions/discussions/25\n\n- [ ] Rename this repo to `interfaces` or `sablier-interfaces`\n- [x] Remove \"V2\" from all copyright references\n\nRelated:\n\n- https://github.com/sablier-labs/v2-core/issues/808\n- https://github.com/sablier-labs/v2-periphery/issues/269","createdAt":"2024-02-01T21:01:38Z","labels":["effort: epic","type: refactor","work: clear"],"number":850,"repository":"sablier-labs/interfaces","state":"closed","title":"Versioning with package tethering","type":"issue","updatedAt":"2025-01-28T12:25:28Z","url":"https://github.com/sablier-labs/interfaces/issues/850"},{"author":"PaulRBerg","body":"See https://docs.infura.io/networks/ethereum/how-to/make-batch-requests","createdAt":"2024-02-01T20:30:43Z","labels":["type: feature","priority: 2"],"number":848,"repository":"sablier-labs/interfaces","state":"closed","title":"Optimize RPC requests by batching them","type":"issue","updatedAt":"2024-02-07T16:14:46Z","url":"https://github.com/sablier-labs/interfaces/issues/848"},{"author":"PaulRBerg","body":"We need a checkbox in the airstreams claim page for two reasons:\r\n\r\n1. Legal defensibility.\r\n2. Fewer dumb customer support inquiries (hopefully)\r\n\r\nRelated: https://github.com/sablier-labs/policies/issues/6. Since it will take time to produce that document, I suggest we do the following in the meantime - we adapt the text found in the wallet modal, and say something like:\r\n\r\n> By claiming from this airstream, you acknoledge that Sablier is an independent platform and is NOT affiliated with $TOKEN, and you confirm that you have read and understand the [Risk Notice](https://files.sablier.com/risk-notice.pdf) and that you agree to our [Terms of Service](https://files.sablier.com/terms-of-service.pdf).","createdAt":"2024-02-01T20:24:28Z","labels":["type: feature","priority: 0"],"number":847,"repository":"sablier-labs/interfaces","state":"closed","title":"Legal checkbox in airstream claim page","type":"issue","updatedAt":"2024-02-08T13:51:56Z","url":"https://github.com/sablier-labs/interfaces/issues/847"},{"author":"PaulRBerg","body":"Requested by user on Crisp:\r\n\r\n<img width=\"328\" alt=\"SCR-20240201-sror\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/cec8af31-c4d6-4985-bbe4-1a24da041a41\">\r\n","createdAt":"2024-02-01T19:48:07Z","labels":["type: feature","priority: 3"],"number":846,"repository":"sablier-labs/interfaces","state":"closed","title":"Support Phantom wallet","type":"issue","updatedAt":"2024-02-02T11:11:34Z","url":"https://github.com/sablier-labs/interfaces/issues/846"},{"author":"PaulRBerg","body":"Following the user growth triggered by PondCoin, we noticed that our API consumption on Alchemy has grown commensurately with Infura.\r\n\r\nInfura was expected since that's what we're using for Mainnet, but Alchemy shouldn't have been triggered.\r\n\r\nhttps://dashboard.alchemy.com/apps/b72krosifiyik6gu\r\n\r\nIt looks like the app makes continuous requests to Base even if users are not connected to Base:\r\n\r\n<img width=\"500\" alt=\"SCR-20240201-sqih\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/312ac111-a71b-4ede-be0c-5c51a501c5fc\">\r\n\r\n<img width=\"500\" alt=\"SCR-20240201-spce\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/fe119815-4d53-4ed8-b302-d6e5fd3fb734\">","createdAt":"2024-02-01T19:32:27Z","labels":["type: bug","priority: 2"],"number":845,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate why the app makes requests to Alchemy RPC","type":"issue","updatedAt":"2024-02-02T12:05:24Z","url":"https://github.com/sablier-labs/interfaces/issues/845"},{"author":"PaulRBerg","body":"Not sure if this is an RPC error or a wallet error or whatever, but this user says that the \"Claim\" button is grayed out, despite the UI telling him that he is eligible for the airstream.\r\n\r\n<img width=\"400\" alt=\"SCR-20240201-qipy\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4df3eef6-3049-4620-9622-c397b3bbdb25\">\r\n\r\n<img width=\"200\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/6b4421ed-9e0d-4888-9a09-08ebe299b8f8\"/>\r\n","createdAt":"2024-02-01T16:46:58Z","labels":["type: bug","priority: 0"],"number":843,"repository":"sablier-labs/interfaces","state":"closed","title":"Grayed out \"Claim\" button","type":"issue","updatedAt":"2024-02-16T17:19:08Z","url":"https://github.com/sablier-labs/interfaces/issues/843"},{"author":"PaulRBerg","body":"## Context\r\n\r\nDuring the (decisive) call I've had with our lead investor's legal team prior to closing the deal, I have been asked what API we're using for banning risky addresses. I answered that we're using TRM Labs' API, and then they asked me which one - the free, basic API or the paid version. I've answered that we're currently using the former, but that we will look into the latter once we complete the fundraising round.\r\n\r\n## Task\r\n\r\n- [ ] Upgrade to paid API (I will handle this myself)\r\n- [ ] Integrate it in the UI\r\n- [ ] Fallback to the free API when the paid version malfunctions (e.g. because we got rate-limited)\r\n\r\nIt is worth noting that we have previously attempted to integrate the paid API in the V1 UI:\r\n\r\nhttps://github.com/sablier-labs/v1-interfaces/pull/257\r\n\r\nLooking at what has been done there may be helpful for the integration into the V2 UI.\r\n\r\n## Risk Management\r\n\r\nWe will need to decide the level of risk management we are willing to tolerate. AFAIK, TRM Labs offers multiple levels.\r\n\r\nWe should hop on a call to explore their API dashboard together, and subsequently make an informed decision that doesn't compromise a significant portion of our user base.","createdAt":"2024-02-01T13:14:01Z","labels":["type: feature","priority: 0","effort: high","work: complex"],"number":840,"repository":"sablier-labs/interfaces","state":"closed","title":"Use paid TRMLabs API","type":"issue","updatedAt":"2024-03-14T11:25:25Z","url":"https://github.com/sablier-labs/interfaces/issues/840"},{"author":"PaulRBerg","body":"Like https://github.com/sablier-labs/v2-interfaces/issues/784 and https://github.com/sablier-labs/v2-interfaces/issues/831, but for the social media preview (Open Graph).","createdAt":"2024-01-30T18:32:53Z","labels":["priority: 1","resolution required"],"number":838,"repository":"sablier-labs/interfaces","state":"closed","title":"Clarify that Sablier is free to use in the social media preview","type":"issue","updatedAt":"2024-03-05T12:52:05Z","url":"https://github.com/sablier-labs/interfaces/issues/838"},{"author":"razgraf","body":"While this isn't even a regular usecase of Airstreams, lots of users are testing the campaign creator using a single address. There's a problem with generating a tree with a single node, so the action will fail.\r\n\r\nWe should add a warning if we see CSVs with a single row (outside of the header) and prevent these from being sent to the server.","createdAt":"2024-01-25T10:22:19Z","labels":["type: bug"],"number":834,"repository":"sablier-labs/interfaces","state":"closed","title":"Add warnings for airstream campaigns with one row","type":"issue","updatedAt":"2024-02-06T18:08:06Z","url":"https://github.com/sablier-labs/interfaces/issues/834"},{"author":"PaulRBerg","body":"Like https://github.com/sablier-labs/v2-interfaces/issues/784 but for the create stream receipt.\r\n\r\nHere's what this user had to say:\r\n\r\n<img width=\"500\" alt=\"Screenshot 2024-01-19 at 1 28 53 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/01f55422-822f-4f7f-8992-72046c8e10bc\">\r\n","createdAt":"2024-01-19T11:31:05Z","labels":["priority: 1"],"number":831,"repository":"sablier-labs/interfaces","state":"closed","title":"Clarify that Sablier is free to use in the create stream receipt","type":"issue","updatedAt":"2024-02-21T10:55:28Z","url":"https://github.com/sablier-labs/interfaces/issues/831"},{"author":"PaulRBerg","body":"As explained [here](https://github.com/sablier-labs/v2-interfaces/issues/715#issuecomment-1892616386), checksumming is not helpful when the user does not see the checksummed addresses.\r\n\r\nUnless I'm mistaken again and the addresses are actually shown on the screen, we should remove the checksum parsing because it doesn't achieve anything (besides slowing down the app).\r\n\r\nI'm sorry for this. My bad.","createdAt":"2024-01-15T18:24:38Z","labels":[],"number":830,"repository":"sablier-labs/interfaces","state":"closed","title":"Undo checksum parsing","type":"issue","updatedAt":"2024-01-18T18:33:27Z","url":"https://github.com/sablier-labs/interfaces/issues/830"},{"author":"PaulRBerg","body":"## Task\r\n\r\nMake it possible to batch transactions in the Safe UI. Currently, only the Sablier V1 app supports this feature.\r\n\r\n<img width=\"400\" alt=\"SCR-20240115-mdym\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b335b252-7e54-4528-ae10-3a9d3da216e0\">\r\n\r\n## Context\r\n\r\nThe \"Add to batch\" button is initially grayed out but then disappears from the Safe UI.\r\n\r\nHere's my trying to batch-withdraw:\r\n\r\nhttps://www.loom.com/share/dc098c7b11034f1a9f1c44adeb855f71","createdAt":"2024-01-15T12:10:27Z","labels":["type: feature","priority: 1"],"number":828,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow batch transactions in Safe UI","type":"issue","updatedAt":"2024-02-13T10:29:33Z","url":"https://github.com/sablier-labs/interfaces/issues/828"},{"author":"razgraf","body":"As per this discussion: https://github.com/sablier-labs/v2-interfaces/discussions/676#discussioncomment-8109456 the gray stream circle explanation (from both the legend and the modal) should be hidden for Lockup Linear streams (only for linear ones, as cliff streams are one of the use-cases of the gray line, esp. after the removal of the animation will be implemented).","createdAt":"2024-01-15T08:56:01Z","labels":[],"number":827,"repository":"sablier-labs/interfaces","state":"closed","title":"Show streaming circle legend conditionally based on stream category","type":"issue","updatedAt":"2024-02-16T17:17:42Z","url":"https://github.com/sablier-labs/interfaces/issues/827"},{"author":"PaulRBerg","body":"According to this user report, the import button on the Airstreams page is not working in Brave:\r\n\r\n<img width=\"400\" alt=\"SCR-20240112-mmtt\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/6cb9ff1e-31d6-4315-85df-6539ff2fde63\">\r\n\r\nI will ask the user to confirm their OS, but I suspect that it is Windows.\r\n\r\nSide note - besides Cypress, are we running the UI through some cross-OS checks? i.e. that the UI loads on all major platforms, devices, etc.","createdAt":"2024-01-12T12:04:03Z","labels":["type: bug","priority: 2"],"number":825,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate whether the import button in Airstreams works in Brave","type":"issue","updatedAt":"2024-02-06T09:41:44Z","url":"https://github.com/sablier-labs/interfaces/issues/825"},{"author":"PaulRBerg","body":"Looks like Yarn has moved to a new major release:\r\n\r\nhttps://github.com/yarnpkg/berry/releases\r\n\r\nFrom what I understand, the `.yarn` directory is now optional.","createdAt":"2024-01-11T17:02:28Z","labels":["backlog","effort: high","type: build","work: chaotic"],"number":820,"repository":"sablier-labs/interfaces","state":"closed","title":"Upgrade to Yarn v4","type":"issue","updatedAt":"2025-03-24T12:48:21Z","url":"https://github.com/sablier-labs/interfaces/issues/820"},{"author":"razgraf","body":"- https://wagmi.sh/react/guides/migrate-from-v1-to-v2\r\n- https://tanstack.com/query/v5/docs/react/guides/migrating-to-v5","createdAt":"2024-01-09T15:10:03Z","labels":["backlog"],"number":818,"repository":"sablier-labs/interfaces","state":"closed","title":"Upgrade to wagmi `v2`","type":"issue","updatedAt":"2024-02-20T15:23:14Z","url":"https://github.com/sablier-labs/interfaces/issues/818"},{"author":"razgraf","body":"The task is to add better links to the \"Guide\" and \"Tutorial\" actions in the Airstream forms.\r\n\r\n---\r\n\r\n### Context from #685\r\n\r\n> * [ ]  Replace the docs URL with a tutorial video in this \"Tutorial\" button:\r\n> \r\n> \r\n> <img alt=\"SCR-20231213-osdp\" width=\"300\" src=\"https://private-user-images.githubusercontent.com/8782666/290227051-1b45b273-5df4-49ff-8885-57213359e105.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDQ3MjA1MTgsIm5iZiI6MTcwNDcyMDIxOCwicGF0aCI6Ii84NzgyNjY2LzI5MDIyNzA1MS0xYjQ1YjI3My01ZGY0LTQ5ZmYtODg4NS01NzIxMzM1OWUxMDUucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDEwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDAxMDhUMTMyMzM4WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9MmZmYmE3ODhhMjVlNzc0YjhlZDNkODI2YjI2MGVjMmFmYzY0MTgwMTMxNDEyZTI0MGZmM2Y1NjE3ODNlMTBjYSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.O9bjKOFmxG64Y5TeNoadtL_hXqLgv7Mj6UziTjsCaWM\">\r\n\r\n> * [ ]  Have this button be a tooltip not an URL:\r\n> \r\n> \r\n> <img alt=\"SCR-20231213-oslc\" width=\"437\" src=\"https://private-user-images.githubusercontent.com/8782666/290227325-5d8d9ad8-80e5-41a1-9bc7-517bd743222e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDQ3MjA1MTgsIm5iZiI6MTcwNDcyMDIxOCwicGF0aCI6Ii84NzgyNjY2LzI5MDIyNzMyNS01ZDhkOWFkOC04MGU1LTQxYTEtOWJjNy01MTdiZDc0MzIyMmUucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDEwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDAxMDhUMTMyMzM4WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODlmMzgzYWM2NDE2OTgyNDM3Mzc2YmZmNmRiNzE2NjRiMGIzYTg4ODU4MDQyMjY2ZTY2MTI3N2YzYjZhZWFkOSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.urxxFOJnpYVZA4VxsxeusvMxkWtI49_4vTCqjwXQTxA\">\r\n\r\n","createdAt":"2024-01-08T13:27:30Z","labels":[],"number":816,"repository":"sablier-labs/interfaces","state":"closed","title":"Point Airstream guide and tutorial to actual resources","type":"issue","updatedAt":"2024-02-16T17:17:59Z","url":"https://github.com/sablier-labs/interfaces/issues/816"},{"author":"razgraf","body":"The task is to re-enable (update, deploy and point) the decentralized subgraphs for V2 (mainnet, aribtrum and polygon). See #685 for the initial task.","createdAt":"2024-01-08T13:26:00Z","labels":["priority: 2","effort: low","type: chore","work: clear"],"number":815,"repository":"sablier-labs/interfaces","state":"closed","title":"Configure decentralized subgraphs for V2","type":"issue","updatedAt":"2024-06-17T10:36:12Z","url":"https://github.com/sablier-labs/interfaces/issues/815"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/770\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December 22, 2023</sup>\r\nI don't see why the deposited amount is appended to the \"Shape\" entry on the \"Details\" page:\r\n\r\n<img width=\"500\" alt=\"SCR-20231222-odlo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/17b6f4e5-c51f-4d2c-82f2-9936c32dcdc0\">\r\n\r\nI suggest we do one of the two following things:\r\n\r\n1. Replace \"Shape\" by \"Deposited Amount\"\r\n2. Keep \"Shape\" and add \"Deposited Amount\"\r\n\r\ncc @razgraf @gavriliumircea</div>","createdAt":"2024-01-08T11:48:02Z","labels":[],"number":814,"repository":"sablier-labs/interfaces","state":"closed","title":"Split \"Shape\" into two rows (shape and deposit) in the Stream Details cover","type":"issue","updatedAt":"2024-01-19T09:40:44Z","url":"https://github.com/sablier-labs/interfaces/issues/814"},{"author":"razgraf","body":"As discussed in private and also brought up [here](https://github.com/sablier-labs/v2-interfaces/discussions/480#discussioncomment-8036929) in #480, the search/select functionality could benefit from an upgrade. \r\n\r\n### How it works right now\r\n\r\nUsers have to filter by sender, recipient, token address or most useful (in this context) by stream identifiers to create a custom list of streams. Using this list they can later choose to perform some batch actions like cancel-multiple or withdraw-multiple.\r\n\r\n### How it could work\r\n\r\n1. Users will be given a new button, probably in the contextual menu to select or deselect a stream item\r\n  \r\n   ![Screenshot 2024-01-07 at 15 34 32](https://github.com/sablier-labs/v2-interfaces/assets/15740806/03400c7a-d111-4a24-a1d4-b796575da1fa)\r\n\r\n2. A pop-up **checkout/cart** box will be appended to the bottom of the screen\r\n\r\n   - Idea 1: A small overlay saying \"selected streams: n\" which will open a \"select cover\"\r\n   - Idea 2: A footer with a list of selected stream chips, which will open a \"select cover\"\r\n   \r\n3. From that checkout cover (linked through step 2) the user will refine their selection/**bundle** and be given the opportunity to:\r\n\r\n   - Search that complete list of streams\r\n   - [Bonus] Generate a search URL for the list of streams\r\n   - Withdraw from that list of streams (if possible) or be given the chance to refine their search by removing non-compatible streams\r\n   - Cancel from that list of streams (if possible) - same rationale as for withdraw\r\n   \r\n    ![C](https://cdn.dribbble.com/userupload/2907598/file/original-4c292f47099af4a0de0a5e7cfbde02d7.jpg?resize=2048x1536)\r\n","createdAt":"2024-01-07T13:44:07Z","labels":[],"number":813,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve UX for stream search/select and bundle actions","type":"issue","updatedAt":"2024-03-04T17:05:57Z","url":"https://github.com/sablier-labs/interfaces/issues/813"},{"author":"razgraf","body":"The task is to improve visibility of the custom token / by-address features of the token modal. Possible solutions:\r\n\r\n1. Add a row after search results with a call-to-action for \"Use a custom token by address\" (after results, see picture below)\r\n2. Change the name of the \"Search\" button to \"Custom\" or \"Other Tokens\"\r\n3. Change the placeholder from \"Name, symbol or address...\" or \"Name, symbol or paste address...\"\r\n\r\n![Screenshot 2024-01-07 at 15 26 44](https://github.com/sablier-labs/v2-interfaces/assets/15740806/6372c223-3cef-48c6-bbee-7dca55344b6c)\r\n\r\n\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/765\r\n\r\n<div type='discussions-op-text'>\r\n\r\n\r\n\r\n<sup>Originally posted by **PaulRBerg** December 21, 2023</sup>\r\nLito Coen thought that the token has to be listed:\r\n\r\n<img width=\"511\" alt=\"SCR-20231221-kplh\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/69efcba0-43fc-42dd-bbfa-cc069b0bcf81\">\r\n\r\nIt might be just that it was late in Australia, and he was tired. But still. Looking at the token picker, the only indication that custom addresses can be pasted is the grayed-out \"or address\" label.\r\n\r\nI'm opening this discussion with the purpose of brainstorming a UI/UX improvement that communicates the address-pasting functionality somehow more clearly.</div>","createdAt":"2024-01-07T13:29:29Z","labels":[],"number":812,"repository":"sablier-labs/interfaces","state":"closed","title":"Make it clearer that users can paste custom addresses","type":"issue","updatedAt":"2024-01-19T09:40:43Z","url":"https://github.com/sablier-labs/interfaces/issues/812"},{"author":"razgraf","body":"The task is to \"dim\" the color set for the stream shape card, such that the only highlighted element from the top part of the profile is the check eligibility component. Additionally, we could animate or highlight the component even more, but this remains under consideration for after we implement the first change.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/797\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** January  2, 2024</sup>\r\nWe've just received this question from a potential airstreams user:\r\n\r\n<img width=\"300\" alt=\"SCR-20240102-mefz\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/c0dcec69-287e-4f83-840a-f81631a23cd0\">\r\n\r\nWhat happened here is that Victor did not see the \"Check eligibility\" button in the top-right corner.\r\n\r\nThis has made me realize that we are putting an undue amount of emphasis on the streaming shape - look how prominent the \"Linear streams\" curve is in the current UI:\r\n\r\n<img width=\"300\" alt=\"SCR-20240102-mdyo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9096ba4f-7f2b-4451-8844-6b06cc2af5f0\">\r\n\r\nWhat is infinitely more important for recipients (>99% of all airstream users) is to be able to check their eligibility. Therefore, I suggest redesigning the UI to put more emphasis on eligibility checks.\r\n\r\nWDYT, @maxdesalle, @razgraf?</div>","createdAt":"2024-01-07T13:21:56Z","labels":[],"number":811,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to redesign the \"Check eligibility\" button to look more prominent","type":"issue","updatedAt":"2024-01-22T13:58:54Z","url":"https://github.com/sablier-labs/interfaces/issues/811"},{"author":"razgraf","body":"At the moment, the \"Transferability\" field is hidden under the advanced features modal. Based on #659 it should be [moved](https://github.com/sablier-labs/v2-interfaces/discussions/659#discussioncomment-7930419) directly in the main stream forms as a permanently-visible field.\r\n\r\n![Screenshot 2024-01-07 at 15 04 59](https://github.com/sablier-labs/v2-interfaces/assets/15740806/81389b72-57a4-4ea2-8a2c-8d610fb964ed)\r\n","createdAt":"2024-01-07T13:06:20Z","labels":[],"number":810,"repository":"sablier-labs/interfaces","state":"closed","title":"Move \"Transferability\" to the main forms","type":"issue","updatedAt":"2024-01-19T13:52:41Z","url":"https://github.com/sablier-labs/interfaces/issues/810"},{"author":"razgraf","body":"The list of minutes should be generated in increments of 5 (0-55).\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/712\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December 14, 2023</sup>\r\nI can't think of any use case for going so granular with the minutes (besides airdrop farmers, which we need not care about):\r\n\r\nIncrements of 5 should be enough.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-14 at 2 42 58 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4180df8e-aeda-4bea-b179-705eb578c056\"></div>","createdAt":"2024-01-07T12:55:26Z","labels":[],"number":809,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow minutes to be selected only in increments of 5","type":"issue","updatedAt":"2024-01-19T13:52:40Z","url":"https://github.com/sablier-labs/interfaces/issues/809"},{"author":"razgraf","body":"This is mainly a copyright task but, as seen in the OP (#689) we should refer to the concept of shapes/streaming-models with a single \"label\", for consistency and clarity.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/689\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December  9, 2023</sup>\r\nThe UI uses two terms to refer to the same concept:\r\n\r\n1. Shape\r\n2. Streaming model\r\n\r\nIt's easier to use only one term. But even besides that, \"streaming model\" should be used only as a distinctor between Lockup Linear and Lockup Dynamic, not between the payment types/ shapes that can be created with each.\r\n\r\nE.g. this should be called \"Shape\":\r\n\r\n<img width=\"400\" alt=\"SCR-20231209-npmm\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e2e1cc24-9bd1-434a-8bac-654036880c2d\"></div>","createdAt":"2024-01-07T12:51:45Z","labels":[],"number":808,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix misalignment between \"shape\" and \"streaming model\" concepts","type":"issue","updatedAt":"2024-01-08T11:49:18Z","url":"https://github.com/sablier-labs/interfaces/issues/808"},{"author":"razgraf","body":"### The task\r\n\r\nThe task is to create a CSV export feature, following the requests discussed in #564 . It will mainly be used and serve as an answer to primitive accounting support for Sablier. \r\n\r\nThe things we should allow exports for:\r\n- stream history\r\n- airstream history\r\n- account history\r\n\r\n### Suggestion for a possible UX\r\n\r\n1. The user will choose an entity: a stream by id, an airstream by id or an account. There will be calls to action in each stream/airstream profile, which redirect the user to the \"Exports\" page (which expects URL parameters to identify the type of export and entity id).\r\n\r\n2. The user will choose a range: between date A and date B. We'll use these to filter results from the subgraph queries.\r\n\r\nClicking export will perform a query towards the subgraph and generate a CSV (maybe PDF, unsure if helpful) with the results.\r\n\r\n#### Caveats\r\n\r\n- Pagination [Long Term]: subgraphs allow pagination up to ~ 1000 results so in the future we may want to provide sequenced queries for when results >= 1000 for each request\r\n- Ordering: results should be ordered by date\r\n- Post-processing: some data items (e.g. calendar dates) will be provided in raw formats (e.g. timestamps in ms, or amounts in non-decimal format) so we may have to do some post-processing for these results\r\n\r\n#### Notes\r\n\r\n1. Backend [Long Term]: if, for accounts/cases with a large number of results, the load becomes to heavy for client-side CSV generation, we may consider switching to a hosted, backend driven solution.","createdAt":"2024-01-07T12:49:16Z","labels":["type: feature","priority: 1","effort: high","work: complex"],"number":807,"repository":"sablier-labs/interfaces","state":"open","title":"Export to CSV feature","type":"issue","updatedAt":"2025-06-22T07:35:40Z","url":"https://github.com/sablier-labs/interfaces/issues/807"},{"author":"PaulRBerg","body":"This issue is analogous to #209.\r\n\r\nWe have tests that check that the stream can be canceled and withdrawn from even when the sender and/ or the recipient revert or do not implement the interface, but we don't have any tests that use the [`vm.expectCall`](https://book.getfoundry.sh/cheatcodes/expect-call) cheatcode to ensure that the calls are performed as expected to the hook contracts.","createdAt":"2023-02-01T14:39:06Z","labels":[],"number":308,"repository":"sablier-labs/lockup","state":"closed","title":"Write tests for expecting calls to the hook contracts","type":"issue","updatedAt":"2023-02-04T20:04:01Z","url":"https://github.com/sablier-labs/lockup/issues/308"},{"author":"PaulRBerg","body":"The `test-unit`, `test-fuzz`, `test-invariant`, and `test-e2e` jobs in the CI workflow re-build the contracts from scratch. This ain't a big issue, since we only compile the `src` directory, and not the tests. However, the CI workflows take some time to run now, and it would be nice to lower their run times in those cases when we can.\r\n\r\nWe should be able to use either [`actions/cache`](https://github.com/actions/cache) or [`actions/download-artifact`](https://github.com/actions/download-artifact) to do this.","createdAt":"2023-02-01T11:24:48Z","labels":[],"number":307,"repository":"sablier-labs/lockup","state":"closed","title":"Cache the built artifacts between test jobs","type":"issue","updatedAt":"2023-02-07T20:49:25Z","url":"https://github.com/sablier-labs/lockup/issues/307"},{"author":"PaulRBerg","body":"## Proposal\r\n\r\nThe names of the structs have become rather verbose, e.g. `LockupLinearStream` and `LockupProStream`, and it has also become difficult to come up with good struct names as we add them over time, because some structs are shared across all streaming contracts, while others are specific.\r\n\r\nSolidity doesn't have namespaces, unfortunately, but we can instead use [libraries](https://stackoverflow.com/q/71231369/3873510) to achieve a simple parent<> child relationship. Therefore, my proposal is to use libraries to group the structs according to the contract where they are needed.\r\n\r\n### Structs\r\n\r\n- [x] Group `Amounts` and `CreateAmounts` under a `Lockup` library\r\n- [x] Group `Durations`, `LockupLinear`, and `Range` under a `LockupLinear` library\r\n- [x] Group `LockupPro` and `Segment` under `LockupPro`\r\n    - [x] Also add a `Range` struct to encapsulate the `startTime` and the `endTime` in the pro struct\r\n\r\n### Enum Problem\r\n\r\nThe plan above works well for structs, but what about the the `Status` enum?\r\n\r\nIn an ideal world, we would be able to define it under another `Lockup` library, like this:\r\n\r\n```solidity\r\nlibrary Lockup {\r\n    enum Status {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nObviously, we can't do this because there would be a naming collision with the `Lockup` structs' library. We also can't have a \"grandparent\" namespace with Solidity libraries:\r\n\r\n```solidity\r\nlibrary Enums {\r\n    library Lockup {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nBecause nested libraries are not allowed in Solidity.\r\n\r\nTherefore, we are left with a couple of solutions:\r\n\r\n1. Define the `Status` enum under `Lockup`, and rename the `Structs.sol` file to `StructsAndEnums.sol` or `Types.sol` or `DataTypes.sol`. This is exactly what Aave V3 [did](https://github.com/aave/aave-v3-core/blob/b007d1ee29ad2e6d9f2eb7459acb98a40855dbd5/contracts/protocol/libraries/types/DataTypes.sol).\r\n2. Rename the `Lockup` library above to `LockupStructs`, and add a new library `LockupEnums`.\r\n3. Keep the `Status` enum outside of a library, but rename it to something like `LockupStatus`.\r\n\r\nI am tentatively considering to go with the first solution, because it seems the most robust - it would keep the API clean and consistent (i.e. use libraries for both structs and enums). ","createdAt":"2023-01-28T11:09:49Z","labels":[],"number":302,"repository":"sablier-labs/lockup","state":"closed","title":"Namespace structs and enums","type":"issue","updatedAt":"2023-02-03T09:54:53Z","url":"https://github.com/sablier-labs/lockup/issues/302"},{"author":"PaulRBerg","body":"Based on my suggestion [here](https://github.com/sablierhq/v2-core/pull/284#discussion_r1089043644), which I arrived at after reading @andreivladbrg's comment [here](https://github.com/sablierhq/v2-core/pull/284#discussion_r1088889783).\r\n\r\nBenefits:\r\n\r\n- Ability to use the `DeployProtocol` script in the tests\r\n- Less maintenance cost\r\n- Greater confidence that the other scripts work as expected","createdAt":"2023-01-27T14:57:00Z","labels":[],"number":300,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor the `DeployProtocol` to use the other deployment scripts","type":"issue","updatedAt":"2023-02-01T12:44:40Z","url":"https://github.com/sablier-labs/lockup/issues/300"},{"author":"PaulRBerg","body":"Based on the feedback left by @razgraf on Slack, and ChatGPT's take:\r\n\r\n![ChatGPT convo](https://user-images.githubusercontent.com/8782666/215061406-57ad13b0-2303-46b3-8542-1e92660ba320.png)\r\n","createdAt":"2023-01-27T10:12:14Z","labels":[],"number":297,"repository":"sablier-labs/lockup","state":"closed","title":"Rename `stopTime` to `endTime`","type":"issue","updatedAt":"2023-02-01T12:44:21Z","url":"https://github.com/sablier-labs/lockup/issues/297"},{"author":"PaulRBerg","body":"Based on the discussion in #287.\r\n\r\n- [x] Rename `getStreamedAmount` to `streamedAmountOf`\r\n- [x] Rename `getReturnableAmount` to `returnableAmountOf`\r\n- [x] Rename `getWithdrawableAmount` to `withdrawableAmountOf`","createdAt":"2023-01-26T14:16:33Z","labels":[],"number":295,"repository":"sablier-labs/lockup","state":"closed","title":"Rename the dynamic amount calculation functions","type":"issue","updatedAt":"2023-02-01T12:37:23Z","url":"https://github.com/sablier-labs/lockup/issues/295"},{"author":"PaulRBerg","body":"Benefits of using the OpenZeppelin implementations:\r\n\r\n- Audit-proof\r\n- Better support across the ecosystem (as discussed in #147)\r\n\r\nThe only con is the increased contract size due to OpenZeppelin (still) using revert reason strings, but this should be an acceptable price to pay for the benefits mentioned above. As convened in #279, particularly in [this comment](https://github.com/sablierhq/v2-core/discussions/279#discussioncomment-4769245), we will decrease the number of optimizer runs to lower the size of the `SablierV2LockupPro` contract.\r\n\r\nI'm not sure why I believed that it matters that PRBContracts has an ERC-20 implementation that uses custom errors - that ERC-20 contract is not used in our production contracts, only in the tests, where it's fine to use OpenZeppelin's bytecode-heavy version of ERC-20.","createdAt":"2023-01-24T19:37:57Z","labels":[],"number":293,"repository":"sablier-labs/lockup","state":"closed","title":"Switch to use ERC-20 implementations from OpenZeppelin","type":"issue","updatedAt":"2023-01-31T07:42:30Z","url":"https://github.com/sablier-labs/lockup/issues/293"},{"author":"PaulRBerg","body":"As pointed out by @andreivladbrg in https://github.com/sablierhq/v2-core/pull/271#pullrequestreview-1264618297, we are not yet testing all the values that gets set at construction time.\r\n\r\nWe should update the constructor tests for the `SablierV2LockupLinear` and `SablierV2LockupPro` contracts to run the following checks:\r\n\r\n- [x] `initialAdmin` gets set to the correct value\r\n- [x] `comptroller` gets set to the correct value\r\n- [x] `maxFee` gets set to the correct value","createdAt":"2023-01-24T12:33:45Z","labels":[],"number":291,"repository":"sablier-labs/lockup","state":"closed","title":"Test all values initialized at construction time","type":"issue","updatedAt":"2023-01-27T14:59:48Z","url":"https://github.com/sablier-labs/lockup/issues/291"},{"author":"PaulRBerg","body":"I have left this as a suggestion in https://github.com/sablierhq/v2-core/discussions/279, but now I realize that we should definitely do this, due to the following reason:\r\n\r\nThere is a \"namespace collision\" with the `renounce` function that lets senders to make a stream non-cancelable. The `renounce` function will appear next to the `renounceAdmin` function on Etherscan, even if these are totally unrelated functions:\r\n\r\n<img width=\"276\" alt=\"Screenshot 2023-01-24 at 12 06 41 PM\" src=\"https://user-images.githubusercontent.com/8782666/214264026-3dbd8c27-3fc4-4cb2-a309-9d4906a60c7d.png\">\r\n\r\nCoupled with the fact that getting rid of this function will reduce the size of the pro contract, doing this sounds like a really good idea.\r\n\r\nIn practice, we can implement this by bringing the [`Adminable`](https://github.com/PaulRBerg/prb-contracts/blob/1b1693930274cf9806832bbd376412b7ccbe1769/src/access/Adminable.sol) contract in the `v2-core` repository (or in another Sablier repository).\r\n\r\nAnother benefit of implementing the adminable contract ourselves is that we would be able to get rid of the `_transferAdmin({ newAdmin: msg.sender });` call in the constructor - we don't need it because we are now passing the admin as a constructor arg (this is a requiremenet for [deterministic deployments](https://github.com/sablierhq/v2-core/pull/262)).","createdAt":"2023-01-24T10:12:01Z","labels":[],"number":289,"repository":"sablier-labs/lockup","state":"closed","title":"Replace the `Adminable` contract with a local implementation that does not have the `renounceAdmin` function","type":"issue","updatedAt":"2023-01-30T14:09:40Z","url":"https://github.com/sablier-labs/lockup/issues/289"},{"author":"PaulRBerg","body":"E.g. how [Maple](https://github.com/maple-labs/globals-v2/blob/d19dca070918d07c37b93bebd45c95c76250d27d/contracts/MapleGlobals.sol) did it:\r\n\r\n```text\r\n/*\r\n    ███╗   ███╗ █████╗ ██████╗ ██╗     ███████╗     ██████╗ ██╗      ██████╗ ██████╗  █████╗ ██╗     ███████╗\r\n    ████╗ ████║██╔══██╗██╔══██╗██║     ██╔════╝    ██╔════╝ ██║     ██╔═══██╗██╔══██╗██╔══██╗██║     ██╔════╝\r\n    ██╔████╔██║███████║██████╔╝██║     █████╗      ██║  ███╗██║     ██║   ██║██████╔╝███████║██║     ███████╗\r\n    ██║╚██╔╝██║██╔══██║██╔═══╝ ██║     ██╔══╝      ██║   ██║██║     ██║   ██║██╔══██╗██╔══██║██║     ╚════██║\r\n    ██║ ╚═╝ ██║██║  ██║██║     ███████╗███████╗    ╚██████╔╝███████╗╚██████╔╝██████╔╝██║  ██║███████╗███████║\r\n    ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝     ╚══════╝╚══════╝     ╚═════╝ ╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝\r\n*/\r\n```","createdAt":"2023-01-24T10:10:21Z","labels":[],"number":288,"repository":"sablier-labs/lockup","state":"closed","title":"Add ASCII art in the core contracts","type":"issue","updatedAt":"2023-02-02T09:56:36Z","url":"https://github.com/sablier-labs/lockup/issues/288"},{"author":"PaulRBerg","body":"It just dawned on me that we have overlooked an important use case - the need to react to a renunciation (i.e. a call to `renounce`).\r\n\r\nThis is especially important for NFT lending projects, since non-cancelable streams have different trust assumptions to cancelable streams.\r\n\r\nThe proposal is to add a new hook in the `ISablierV2LockupRecipient` interface called `onStreamRenounced`, and call the hook in the `renounce` function.","createdAt":"2023-01-21T09:08:58Z","labels":[],"number":283,"repository":"sablier-labs/lockup","state":"closed","title":"Recipient hook for renouncing a stream","type":"issue","updatedAt":"2023-02-04T20:04:15Z","url":"https://github.com/sablier-labs/lockup/issues/283"},{"author":"PaulRBerg","body":"In #220 I have replaced all basic tests with fuzz tests, which is good, but I now realize that I should have kept those basic tests.\r\n\r\nFor clarity, basic tests = tests that have no fuzzed arguments and that rely upon hard-coded values.\r\n\r\nThe proposal is to split the current tests in two directories:\r\n\r\n- `fuzz`\r\n- `unit`\r\n\r\nAnd move the fuzz tests over in the `fuzz` directory, while keeping the basic tests in the `unit` directory, and also re-writing some of the older tests that had hard-coded values (take a look at the repo before #220).","createdAt":"2023-01-20T10:52:14Z","labels":[],"number":281,"repository":"sablier-labs/lockup","state":"closed","title":"Separate \"unit\" tests in \"unit\" and \"fuzz\" tests","type":"issue","updatedAt":"2023-01-27T14:59:48Z","url":"https://github.com/sablier-labs/lockup/issues/281"},{"author":"PaulRBerg","body":"While working on #174 and #175, I stumbled upon a bug in the create functions of both contracts.\r\n\r\nThe bug is that the protocol fee amount is not pulled from the user:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/4918aca82c552a62619e2c71f2241abf1e877f72/src/SablierV2Linear.sol#L405\r\n\r\nThe amount should actually be `params.amounts.netDeposit + params.amounts.protocolFee`.\r\n\r\nThis wasn't caught before because the bug unveils itself only when checking the ERC-20 balances, and we are not doing this in the unit tests. Only in the integration tests we're making queries to the `balanceOf` function.\r\n\r\nFootnote: this is what integration tests are great for - catching nasty, subtle bugs like this.","createdAt":"2023-01-19T22:26:25Z","labels":[],"number":280,"repository":"sablier-labs/lockup","state":"closed","title":"Bug in the create functions: protocol fee amount not charged","type":"issue","updatedAt":"2023-01-25T21:14:11Z","url":"https://github.com/sablier-labs/lockup/issues/280"},{"author":"PaulRBerg","body":"[Forge Std v1.3.0](https://twitter.com/msolomon44/status/1615733591677493248) comes with a `IMulticall3` interface and a `getTokenBalance` utility:\r\n\r\nhttps://github.com/foundry-rs/forge-std/pull/271\r\n\r\nI will do this once we merge all current open PRs, to minimize the number of conflicts and rebases.","createdAt":"2023-01-18T15:52:26Z","labels":[],"number":276,"repository":"sablier-labs/lockup","state":"closed","title":"Use `IMulticall3` interface and `getTokenBalances` function from Forge Std","type":"issue","updatedAt":"2023-01-27T14:59:49Z","url":"https://github.com/sablier-labs/lockup/issues/276"},{"author":"PaulRBerg","body":"As suggested by @razgraf in #273, the proposal is to rename the `token` field of the stream structs to `assets`. There are two deliverables for this refactor:\r\n\r\n- [ ] Rename the `token` struct field to `asset` \r\n- [ ] Rename the `getERC20Token` function to `getAsset`\r\n","createdAt":"2023-01-16T20:16:03Z","labels":[],"number":274,"repository":"sablier-labs/lockup","state":"closed","title":"Rename the ERC-20 `token` property of the stream to `asset`","type":"issue","updatedAt":"2023-01-24T18:28:42Z","url":"https://github.com/sablier-labs/lockup/issues/274"},{"author":"PaulRBerg","body":"See [`forge snapshot`](https://book.getfoundry.sh/reference/forge/forge-snapshot).","createdAt":"2023-01-15T21:20:37Z","labels":[],"number":272,"repository":"sablier-labs/lockup","state":"closed","title":"Take a gas snapshot and store it in version control","type":"issue","updatedAt":"2023-01-31T15:51:07Z","url":"https://github.com/sablier-labs/lockup/issues/272"},{"author":"PaulRBerg","body":"## Proposal\r\n\r\nDefine the following enum:\r\n\r\n```solidity\r\nenum Status {\r\n    NULL,\r\n    ACTIVE,\r\n    CANCELED,\r\n    FINISHED\r\n}\r\n```\r\n\r\nAnd change the protocol in the following way:\r\n\r\n- Replace the `isEntity` bool with the `Status` enum\r\n- After successfully creating a stream, set its status to `ACTIVE`\r\n- Instead of deleting the stream in `_cancel`, set its status to `CANCELED`\r\n- Instead of deleting the stream in `_withdraw`, set its status to `FINISHED`\r\n- Allow the cancel, renounce, and withdrawal functions to be called only if the status of the stream is `ACTIVE`\r\n- Allow the burn function to be called only if the status of the stream is either `CANCELED` or `FINISHED`\r\n\r\nA nice little benefit of using an enum is that it won't increase the gas storage costs, because an enum is ABI-encoded as an `uint8`, which takes as much byte space as a `bool`.\r\n\r\n### Discussed in https://github.com/sablierhq/v2-core/discussions/258\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** January  8, 2023</sup>\r\nThis is an open-ended question addressed to @razgraf and @gavriliumircea - would it help you guys if we did not delete the struct entity on cancel or when the stream is fully withdrawn?\r\n\r\n- https://github.com/sablierhq/v2-core/blob/d9fffa978da342785be2bd3b5899a803e6b0a212/src/SablierV2Linear.sol#L288\r\n- https://github.com/sablierhq/v2-core/blob/d9fffa978da342785be2bd3b5899a803e6b0a212/src/SablierV2Linear.sol#L432\r\n\r\nThe way I see it, this would be useful for two purposes:\r\n\r\n1. Better data support in the light app.\r\n2. Better data support for the web3 community who might prefer to query the data from the smart contracts directly, rather than the subgraphs.\r\n\r\nBut please do let me know if you envisage more use cases!\r\n\r\nIn terms of implementation, this would't be easy, since we would have to refactor the `streamExists` modifier into a `streamExistsAndNotEnded` modifier, and then add a slew of new tests that ensure that ended streams cannot be interacted with.\r\n\r\nThere would also be two additional implications:\r\n\r\n1. The gas cost for canceling and withdrawing would increase a bit, because there would be no storage erase refund anymore.\r\n2. Long term, we might incur additional costs on smart contract storage rent. It is known that ETH2 is going to update the current model, because it is unsustainable. It is not feasible to keep increasing the storage of the blockchain forever.</div>","createdAt":"2023-01-14T18:31:09Z","labels":[],"number":269,"repository":"sablier-labs/lockup","state":"closed","title":"Stream statuses","type":"issue","updatedAt":"2023-01-24T18:29:40Z","url":"https://github.com/sablier-labs/lockup/issues/269"},{"author":"PaulRBerg","body":"The title of the issue says it all. The pro contract reverts on the following line:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/702e361a4b5ff5dafacba91890cc3c0b17e24d4e/src/SablierV2Pro.sol#L288\r\n\r\nWhen the `block.timestamp` is greater than the stop time of the stream.\r\n\r\nI take full responsibility for this bug. It is who implemented that function.\r\n\r\nWe really have to fuzz segments in our tests (#256).","createdAt":"2023-01-13T20:45:18Z","labels":[],"number":265,"repository":"sablier-labs/lockup","state":"closed","title":"Bug in `SablierV2Pro`: index out of bounds when `block.timestamp > stopTime`","type":"issue","updatedAt":"2023-01-14T09:48:29Z","url":"https://github.com/sablier-labs/lockup/issues/265"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablierhq/v2-core/discussions/232\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December 31, 2022</sup>\r\nDuring one of our latest meetings in person, we have agreed that it would be clearer to rename the `SablierV2Linear` and the `SablierV2Pro` contracts differently to signal the fact that these contracts enabled closed-ended streaming with capital lockups.\r\n\r\nWe haven't, however, agreed upon a final new prefix. These are the idea we had:\r\n\r\n- `Lockup`\r\n- `CapitalLockup`\r\n- `ClosedEnded`\r\n- `ClosedEndedLockup`\r\n- `CE` (as in, \"Closed Ended\")\r\n- `Closed`\r\n- `Vesting` (though I know @razgraf doesn't like to reference any particular use case in the contract name)\r\n\r\nThe `Linear` and the `Pro` suffixes could be optionally shortened to `L` and `P`, respectively.\r\n\r\nAt the moment, the variant I like the most is `Lockup` because it captures the current logic of creating streams quite accurately. \"Lockup\" as a term [is used in traditional finance in vesting contexts](https://www.lawinsider.com/clause/lock-up-vesting), as well as in crypto (see [Near's post](https://wiki.near.org/getting-started/near-token/lockups)).\r\n\r\nBy contrast, the issue with `ClosedEnded` is that it doesn't indicate to users that they have to make a one-time deposit in order for the stream to start. In principle, a stream could be closed-ended while being lockup-free, allowing users to top up.\r\n\r\nOn the flip side, an open-ended stream must necessarily be lockup-free, because a payment rate per second cannot be calculated from a fixed deposit without a stop time. From this perspective, `ClosedEnded` would be a better prefix, because it would mirror the `OpenEnded` prefix we would presumably use for what we currently call [`SablierV2Payroll`](https://github.com/sablierhq/v2-payroll/).\r\n\r\nTo sum up, I tend to favor `Lockup`, but if we agree that we will never build a closed-ended contract that is lockup-free and has top ups, then `ClosedEnded` would also be a good fit.</div>","createdAt":"2023-01-12T11:20:03Z","labels":[],"number":261,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"SablierV2Linear\" to \"SablierV2LockupLinear\" and \"SablierV2Pro\" to \"SablierV2LockupPro\"","type":"issue","updatedAt":"2023-01-24T18:29:02Z","url":"https://github.com/sablier-labs/lockup/issues/261"},{"author":"PaulRBerg","body":"The current scripts produce non-deterministic contracts addresses between different chains.\n\nBut it would be nice to have the contracts deployed at the same addresses on all chains.\n\nFor that, we can use Micah's [deterministic-deployment-proxy](https://github.com/Zoltu/deterministic-deployment-proxy), which is like a universal factory contract that uses CREATE2.","createdAt":"2023-01-11T08:15:56Z","labels":[],"number":260,"repository":"sablier-labs/lockup","state":"closed","title":"Update scripts to use the deterministic-deployment-proxy","type":"issue","updatedAt":"2023-01-18T10:01:58Z","url":"https://github.com/sablier-labs/lockup/issues/260"},{"author":"PaulRBerg","body":"## Bug Report\r\n\r\nOne of the protocol invariants is that it is not possible to withdraw more than has been deposited in a stream, but this invariant can be currently broken by passing a low-enough negative exponent in one of the segments used for creating a pro stream.\r\n\r\nI wrote a test that proves this - you can add the following in the [`GetWithdrawableAmount__ProTest`](https://github.com/sablierhq/v2-core/blob/d9fffa978da342785be2bd3b5899a803e6b0a212/test/unit/sablier-v2/pro/get-withdrawable-amount/getWithdrawableAmount.t.sol) test contract and see that the test fails:\r\n\r\n```solidity\r\nfunction test_NegativeExponent() external {\r\n    Segment[] memory segments = DEFAULT_SEGMENTS;\r\n    SD1x18 exponent = SD1x18.wrap(type(int64).min);\r\n    segments[0].exponent = exponent;\r\n\r\n    uint256 streamId = createDefaultStreamWithSegments(segments);\r\n\r\n    vm.warp({ timestamp: DEFAULT_START_TIME + DEFAULT_TIME_WARP / 2 });\r\n\r\n    uint128 withdrawableAmount = pro.getWithdrawableAmount(streamId);\r\n    assertLte(withdrawableAmount, DEFAULT_NET_DEPOSIT_AMOUNT);\r\n}\r\n```\r\n\r\nI added logs and this is what I saw:\r\n\r\n```text\r\nmultiplier           416300391087773904283\r\ncurrentSegmentAmount 2500000000000000000000\r\nproRataAmount        1040750977719434760707500\r\nstreamedAmount       1040750977719434760707500\r\nwithdrawableAmount   1040750977719434760707500\r\n```\r\n\r\nIn English, the above means that the calculated `withdrawableAmount` is ~1,040,750.97 tokens, whereas the current segment deposit is ~2,500 tokens (and, for that matter, the deposit amount is 10,000 tokens).\r\n\r\nInterestingly, I have recently added an [assert](https://github.com/sablierhq/v2-core/blob/d9fffa978da342785be2bd3b5899a803e6b0a212/src/SablierV2Pro.sol#L519) in the `_withdraw` function that prevented an attacker from exploiting this. However, there was no such assertion in the cancel function, so the attacker could have just canceled the stream and walk away with *all* the money from the pro contract.\r\n\r\n## Mathematical Explanation\r\n\r\nI will refer to the `_calculateWithdrawableAmountForOneSegment` function in this section, but the same rationale applies to the calculations made in the `_calculateWithdrawableAmountForMultipleSegments`.\r\n\r\nThe idea is simple - when raising a sub-unitary base to a *negative* sub-unitary exponent, the result is always supra-unitary (greater than 1).\r\n\r\nIn our code, we have the following (castings removed for brevity):\r\n\r\n```solidity\r\nSD59x18 elapsedTimePercentage = elapsedTime.div(totalTime);\r\nSD59x18 multiplier = elapsedTimePercentage.pow(exponent);\r\nSD59x18 streamedAmount = multiplier.mul(depositAmount);\r\n```\r\n\r\nWhere:\r\n\r\n- `elapsedTimePercentage` is always sub-unitary, since it's the result of dividing a number (`elapsedTime`) that is always smaller than the divisor (`totalTime`)\r\n- `exponent` is a user input and so it can be made negative by the user. Maximum exploiting benefits can be derived by setting it to `type(int64).min).\r\n\r\nTherefore, `multiplier` ends up being supra-unitary, and `streamedAmount` greater than `depositAmount`.\r\n\r\n## Solutions\r\n\r\nThere are two ways to fix this bug:\r\n\r\n1. We switch to the [`UD2x18`](https://github.com/paulrberg/prb-math/blob/dae7d325eaf97b2bc5364e8e9977f399ef4f63bc/src/UD2x18.sol) type instead of `SD1x18`, which would automatically forbid negative values.\r\n2. We keep `SD1x18` but add a `>= 0` check.\r\n\r\nI'm in favor of the first solution since it would involve writing less code - we wouldn't have to add tests that checks that no segment is negative. The only cost is that we will have to allow bigger exponents (up to 18.446744073709551615), but this shouldn't be a problem.\r\n\r\n## Future Prevention\r\n\r\nFirst, we should add more assertions in the code. They might seem superfluous (they increase the gas cost a little bit), but they serve as a good last wall of defense against vulnerabilities like this. Writing assertions would also make it possible to use [SMTChecker](https://github.com/sablierhq/v2-core/issues/250).\r\n\r\nSecond, there is no better cure to segment-related bugs than to fuzz them in the pro contract tests. Though it is a difficult task, I have opened an issue to track it: https://github.com/sablierhq/v2-core/issues/256.","createdAt":"2023-01-08T09:57:20Z","labels":[],"number":257,"repository":"sablier-labs/lockup","state":"closed","title":"Bug in `SablierV2Pro`: negative exponents should not be allowed","type":"issue","updatedAt":"2023-01-17T16:36:00Z","url":"https://github.com/sablier-labs/lockup/issues/257"},{"author":"PaulRBerg","body":"As explained [here](https://github.com/foundry-rs/foundry/discussions/3948), fuzzing arrays is quite difficult in Solidity.\r\n\r\nHowever, given our business logic, it would be extremely beneficial to have a suite of tests that fuzz the segments, testing different values for the amounts, milestones, and exponents.\r\n\r\nThe difficulty lies in the fact that our segments have special constraints - they can't be just any random sequence of data. Specifically, in the successful function execution paths, both of the following conditions must pass:\r\n\r\n1. The amounts must add up to the net deposit amount.\r\n2. The milestones must be ordered.\r\n\r\nWhen I attempted to fuzz the arrays during the development of #220, I ended up giving up because I was getting too many test rejects, and also the test runs were unbearably slow (though I can't remember if that was, in part, caused by the activation of via IR).\r\n\r\nHere's a GitHub Gist with quick sort algorithm I wrote back then, which might be handy when we pick this task up again:\r\n\r\nhttps://gist.github.com/paulrberg/61e5a90434bd4bad31d9dbe9dd0c500e","createdAt":"2023-01-07T22:08:08Z","labels":[],"number":256,"repository":"sablier-labs/lockup","state":"closed","title":"Fuzz segments in pro tests","type":"issue","updatedAt":"2023-02-10T21:42:14Z","url":"https://github.com/sablier-labs/lockup/issues/256"},{"author":"PaulRBerg","body":"The idea is to take the `getWithdrawableAmount` function and rename it to `getStreamedAmount`, and then write up a new `getWithdrawableAmount` that simply calls `getStreamedAmount` and subtracts the withdrawn amount.\r\n\r\nBenefits:\r\n\r\n1. Consistency with the marketing approach. We're marketing ourselves as a streaming protocol, yet we don't have any function that returns the amount streamed so far.\r\n2. Solve the naming issues discussed in #227 (at least in part)\r\n3. We would be able to simplify the implementation for the `getReturnableAmount` function, since we could call `getStreamedAmount` instead of `getWithdrawableAmount`, and not subtract the withdrawn amount. This should save a little bit of gas.\r\n\r\nObviously, there's a contract size concern regarding `SablierV2Pro`. Thus, if we implement the proposal herein, we may have to move the `_calculateWithdrawableAmountForMultipleSegments` and the `_calculateWithdrawableAmountForOneSegment` functions in the `Helpers` library - but, as discussed in #220, I was open to this anyway.","createdAt":"2023-01-07T18:04:00Z","labels":[],"number":255,"repository":"sablier-labs/lockup","state":"closed","title":"Implement a \"getStreamedAmount\" function","type":"issue","updatedAt":"2023-01-18T09:53:25Z","url":"https://github.com/sablier-labs/lockup/issues/255"},{"author":"PaulRBerg","body":"See:\r\n\r\n- [Solidity Docs](https://docs.soliditylang.org/en/v0.8.17/smtchecker.html)\r\n- [Foundry Model Checker settings](https://github.com/foundry-rs/foundry/tree/master/config#additional-model-checker-settings)\r\n- [What is SMTChecker used for in Solidity?](https://ethereum.stackexchange.com/questions/74447/what-is-smtchecker-used-for-in-solidity)","createdAt":"2023-01-06T15:53:22Z","labels":[],"number":250,"repository":"sablier-labs/lockup","state":"closed","title":"Enable SMTChecker to see if we get any warnings","type":"issue","updatedAt":"2023-02-14T21:06:05Z","url":"https://github.com/sablier-labs/lockup/issues/250"},{"author":"PaulRBerg","body":"These bindings will be useful in [v2-interfaces](https://github.com/sablierhq/v2-interfaces) repo.\r\n\r\nFoundry has the [`forge bind`](https://book.getfoundry.sh/reference/forge/forge-bind?highlight=forge%20bind#forge-bind) command, though it only generates Rust bindings.","createdAt":"2023-01-06T10:42:41Z","labels":[],"number":247,"repository":"sablier-labs/lockup","state":"closed","title":"Generate TypeScript bindings","type":"issue","updatedAt":"2023-01-23T11:55:32Z","url":"https://github.com/sablier-labs/lockup/issues/247"},{"author":"PaulRBerg","body":"- Should be based on [EIP-3156](https://eips.ethereum.org/EIPS/eip-3156)\r\n- There should be a per-token mapping for enabling and disabling the flash loanability of any given token\r\n- The said mapping should be implemented in the `SablierV2Comptroller` contract\r\n- The per-token configuration should be analogous to the system I devised for the [protocol fees](https://github.com/sablierhq/v2-core/issues/207)\r\n- There should be a global percentage fee applied to all tokens that are activated","createdAt":"2023-01-05T22:10:03Z","labels":[],"number":246,"repository":"sablier-labs/lockup","state":"closed","title":"Implement flash loans that are per-asset configurable","type":"issue","updatedAt":"2023-01-31T15:50:01Z","url":"https://github.com/sablier-labs/lockup/issues/246"},{"author":"PaulRBerg","body":"See:\r\n\r\n- https://book.getfoundry.sh/forge/invariant-testing\r\n- https://github.com/lucas-manuel/invariant-example/\r\n- https://github.com/maple-labs/maple-core-v2\r\n- https://github.com/foundry-rs/book/pull/760\r\n- https://github.com/foundry-rs/foundry/issues/3412\r\n- [Twitter thread on invariant testing with Foundry](https://twitter.com/0xasp_/status/1617624362441670658)","createdAt":"2023-01-05T20:42:21Z","labels":[],"number":244,"repository":"sablier-labs/lockup","state":"closed","title":"Write invariant tests","type":"issue","updatedAt":"2023-04-21T08:36:38Z","url":"https://github.com/sablier-labs/lockup/issues/244"},{"author":"PaulRBerg","body":"See the [Static Analyzers](https://book.getfoundry.sh/config/static-analyzers) section of the Foundry Book.","createdAt":"2023-01-05T18:12:51Z","labels":[],"number":243,"repository":"sablier-labs/lockup","state":"closed","title":"Run Slither for static analysis","type":"issue","updatedAt":"2023-03-18T17:08:37Z","url":"https://github.com/sablier-labs/lockup/issues/243"},{"author":"PaulRBerg","body":"One of the most common bugs encountered in the V1 app was related to the \"max\" button in the withdraw form.\n\nWe made several implementation errors back then, but, in our defense, it is not easy to keep a frontend in sync with the blockchain, especially when The Graph sits in the middle as a data provider.\n\nWe would do our frontend team a solid if we implemented a `withdrawMax` function, which would accept only a `streamId` parameter. The withdraw amount would be calculated on-chain by calling the `getWithdrawableAmount` function.\n\nOptionally, we could also implement a `withdrawMaxMultiple` function (or `withdrawMultipleMax`), which would do the same thing but for multiple streams at once.","createdAt":"2023-01-04T18:02:03Z","labels":[],"number":239,"repository":"sablier-labs/lockup","state":"closed","title":"Add a `withdrawMax` function that withdraws the maximum withdrawable amount","type":"issue","updatedAt":"2023-01-20T12:52:39Z","url":"https://github.com/sablier-labs/lockup/issues/239"},{"author":"PaulRBerg","body":"After implementing #207 and #208 , I have struggled to find a good order for the parameters of the create events. Even as they are today, I don't like it much.\r\n\r\nThen, there is the perennial StackTooDeep issue that we need to be wary of.\r\n\r\nEmitting a single `CreateAmounts` struct instead of `netDepositAmount`, protocolFeeAmount`, and `operatorFeeAmount`, would address both of the concerns above.","createdAt":"2023-01-04T17:52:28Z","labels":[],"number":238,"repository":"sablier-labs/lockup","state":"closed","title":"Emit a \"CreateAmounts\" struct instead of individual params in the create events","type":"issue","updatedAt":"2023-01-05T13:26:36Z","url":"https://github.com/sablier-labs/lockup/issues/238"},{"author":"PaulRBerg","body":"As discussed in #234, using the term \"operator\" in the create functions can be confusing, since the term is already used by ERC-721 to refer to an approved address that can spend the NFT.\r\n\r\nTo solve this, and also reduce the number of parameters in the create function, we should bundle the `operator` and the `operatorFee` into a `Broker` struct that looks something like this:\r\n\r\n```solidity\r\nstruct Broker {\r\n    address addr;\r\n    UD60x18 fee;\r\n}\r\n```\r\n\r\n`addr` is just a suggestion - other options are `account` and `pot`.","createdAt":"2023-01-04T17:38:54Z","labels":[],"number":237,"repository":"sablier-labs/lockup","state":"closed","title":"Bundle \"operator\" and \"operatorFee\" into a \"Broker\" struct","type":"issue","updatedAt":"2023-01-05T13:27:27Z","url":"https://github.com/sablier-labs/lockup/issues/237"},{"author":"PaulRBerg","body":"The goal is to mirror the recently added `Range` struct used in the `createWithRange` function.\n\nWe could also consider renaming `createWithDuration` to `createWithDurations`, since there are two durations among the function parameters, technically speaking.","createdAt":"2023-01-04T17:26:01Z","labels":[],"number":236,"repository":"sablier-labs/lockup","state":"closed","title":"Add a \"Durations\" struct and use it in \"createWithDuration\"","type":"issue","updatedAt":"2023-01-05T13:27:27Z","url":"https://github.com/sablier-labs/lockup/issues/236"},{"author":"PaulRBerg","body":"I just realized that we don't have a getter for the `token` field of the stream structs.","createdAt":"2023-01-02T21:26:14Z","labels":[],"number":235,"repository":"sablier-labs/lockup","state":"closed","title":"Add a getter for the ERC-20 token used for streaming","type":"issue","updatedAt":"2023-01-10T09:52:09Z","url":"https://github.com/sablier-labs/lockup/issues/235"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIf we are to merge #220 as is today, the average time it would take to run the tests in CI would be a whopping ~30 minutes. See, for instance, the most recent CI run:\r\n\r\nhttps://github.com/sablierhq/v2-core/actions/runs/3812969761/jobs/6486455094\r\n\r\nThere are multiple reason for why this happens, but these are the major ones:\r\n\r\n- I have refactored the tests to fuzz many input arguments\r\n- The integration tests take the lion's share of the run time with about ~7 minutes on average for each integration test (note: Foundry parallelizes tests)\r\n\r\nCI run time is not the only issue, unfortunately. The other problem is that this eats into our Alchemy bill, which means that the current set-up is not sustainable at all.\r\n\r\n## Solution\r\n\r\nThe integration tests are the culprit - the core problem must be the fact that there are a lot of API queries made to Alchemy. The cache implemented in #182 doesn't help much because of the fuzzing. Therefore, what we have to do is follow the following advice from the Foundry Book's [Best Practices](https://book.getfoundry.sh/tutorials/best-practices#fork-tests):\r\n\r\n> Be careful with with fuzz tests on a fork to avoid burning through RPC requests with non-deterministic fuzzing. If the input to your fork fuzz test is some parameter which is used in an RPC call to fetch data (e.g. querying the token balance of an address), each run of a fuzz test uses at least 1 RPC request, so you'll quickly hit rate limits or usage limits. Solutions to consider:\r\n> - Replace multiple RPC calls with a single [multicall](https://github.com/mds1/multicall).\r\n> - Specify a fuzz/invariant [seed](https://book.getfoundry.sh/src/reference/config/testing.html#seed): this makes sure each forge test invocation uses the same fuzz inputs. RPC results are cached locally, so you'll only query the node the first time.\r\n> - Structure your tests so the data you are fuzzing over is computed locally by your contract, and not data that is used in an RPC call (may or may not be feasible based on what you're doing).\r\n> - Lastly, you can of course always run a local node or bump your RPC plan.","createdAt":"2022-12-31T18:26:15Z","labels":[],"number":233,"repository":"sablier-labs/lockup","state":"closed","title":"Lower the CI run times","type":"issue","updatedAt":"2023-02-14T17:06:28Z","url":"https://github.com/sablier-labs/lockup/issues/233"},{"author":"PaulRBerg","body":"Just like #230 but for `SD59x18.wrap` and `toSD59x18` in the `SablierV2Pro` contract.","createdAt":"2022-12-31T12:23:37Z","labels":[],"number":231,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"SD59x18.wrap\" instead of \"toSD59x18\" in \"getWithdrawableAmount\"","type":"issue","updatedAt":"2023-01-05T13:27:27Z","url":"https://github.com/sablier-labs/lockup/issues/231"},{"author":"PaulRBerg","body":"We are currently scaling up the `elapsedTime` and the `totalTime` to have 18 decimals by using the `toUD60x18` conversion function from PRBMath:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/aeb6f4c1ff2102753cd898c015b7480aa9b9bff2/src/SablierV2Linear.sol#L117-L119\r\n\r\nBut this is not necessary. If we used `UD60x18.wrap` instead, like this:\r\n\r\n```solidity\r\nUD60x18 elapsedTime = UD60x18.wrap(currentTime - startTime);\r\nUD60x18 totalTime = UD60x18.wrap(stopTime - startTime);\r\nUD60x18 elapsedTimePercentage = elapsedTime.div(totalTime);\r\n```\r\n\r\nThe calculations would be completely equivalent, i.e. `elapsedTimePercentage` would have the exact same value. The reason is arithmetics - even if `elapsedTime` and `totalTime` are not scaled up to have 18 decimals, the `div` calculation would still work, thanks to the laws of arithmetics.\r\n\r\nIt is easier to see why with an example:\r\n\r\n```solidity\r\n\r\nfunction foo(\r\n    uint40 currentTime,\r\n    uint40 startTime,\r\n    uint40 stopTime\r\n) external pure returns (UD60x18 elapsedTime, UD60x18 totalTime, UD60x18 elapsedTimePercentage) {\r\n    elapsedTime = toUD60x18(currentTime - startTime);\r\n    totalTime = toUD60x18(stopTime - startTime);\r\n    elapsedTimePercentage = elapsedTime.div(totalTime);\r\n}\r\n\r\nfunction bar(\r\n    uint40 currentTime,\r\n    uint40 startTime,\r\n    uint40 stopTime\r\n) external pure returns (UD60x18 elapsedTime, UD60x18 totalTime, UD60x18 elapsedTimePercentage) {\r\n    elapsedTime = UD60x18.wrap(currentTime - startTime);\r\n    totalTime = UD60x18.wrap(stopTime - startTime);\r\n    elapsedTimePercentage = elapsedTime.div(totalTime);\r\n}\r\n```\r\n\r\nIf you pass the following input to this function:\r\n\r\n- `currentTime`: 1672488200\r\n- `startTime`: 1672448200\r\n- `stopTime`: 1672568200\r\n\r\nYou would get the same result in either case, i.e. 333333333333333333, which in natural numbers is 0.333333333333333333. The only thing different would be the raw values of `elapsedTime` and `totalTime`, which would be the following in the first case:\r\n\r\n- `elapsedTime`: 40000 (0.00000000000004 in natural numbers)\r\n- `totalTime`: 120000 (0.00000000000012 in natural numbers)\r\n\r\nAnd the following in the second case:\r\n\r\n- `elapsedTime`: 40000000000000000000000 (40000 in natural numbers)\r\n- `totalTime`: 120000000000000000000000 (120000 in natural numbers)\r\n\r\nFinally, if you are to check the following equation on [Wolfram Alpha](https://www.wolframalpha.com/):\r\n\r\n```\r\n(0.00000000000004 / 0.00000000000012) == 40000 / 120000\r\n```\r\n\r\nYou would see that it returns \"True\".","createdAt":"2022-12-31T12:22:14Z","labels":[],"number":230,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"UD60x18.wrap\" instead of \"toUD60x18\" in \"getWithdrawableAmount\"","type":"issue","updatedAt":"2023-01-05T13:27:26Z","url":"https://github.com/sablier-labs/lockup/issues/230"},{"author":"PaulRBerg","body":"The currents tests for the `cancel` function don't include the case when there have been withdrawals. This should be covered because the `_cancel` function calls the `getWithdrawableAmount` function and subtracts the `withdrawnAmount`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/aeb6f4c1ff2102753cd898c015b7480aa9b9bff2/src/SablierV2Linear.sol#L225","createdAt":"2022-12-31T12:13:00Z","labels":[],"number":229,"repository":"sablier-labs/lockup","state":"closed","title":"Test cancelations after there have been withdrawals","type":"issue","updatedAt":"2023-01-12T11:21:35Z","url":"https://github.com/sablier-labs/lockup/issues/229"},{"author":"PaulRBerg","body":"Forge offers now a [formatter](https://book.getfoundry.sh/reference/config/formatter?highlight=fmt#formatter).","createdAt":"2022-12-31T12:06:44Z","labels":[],"number":228,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"forge fmt\" instead of Prettier","type":"issue","updatedAt":"2023-01-03T21:42:43Z","url":"https://github.com/sablier-labs/lockup/issues/228"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablierhq/v2-core/discussions/222\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **paulrberg** December 30, 2022</sup>\r\nThe current names are a bit misleading because, technically, even the returned amount is withdrawn.\r\n\r\nIf we rename `withdrawAmount` to `recipientAmount`, and `returnAmount` to `senderAmount`, we would give a hint about the fact that a cancelation marks the ending of the streaming relationship between the sender and the recipient. After all, it is a one-time event.</div>","createdAt":"2022-12-31T11:14:22Z","labels":[],"number":226,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"withdrawAmount\" to \"recipientAmount\", and \"returnAmount\" to \"senderAmount\"","type":"issue","updatedAt":"2023-01-05T13:27:26Z","url":"https://github.com/sablier-labs/lockup/issues/226"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablierhq/v2-core/discussions/221\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **paulrberg** December 30, 2022</sup>\r\nThe `stopTime` property is redundant because the same information can be gleaned from the last segment milestone.\r\n\r\nThe only place where it is needed is the [`getWithdrawableAmount`](https://github.com/sablierhq/v2-core/blob/aeb6f4c1ff2102753cd898c015b7480aa9b9bff2/src/SablierV2Pro.sol#L135). It might be slightly more gas efficient to keep it as is in the `getWithdrawableAmount`, but this comes at a cost of 20,000 gas for committing this property in storage and, more importantly, at the cost of making it difficult to avoid the [StackTooDeep issue](https://soliditydeveloper.com/stacktoodeep).\r\n\r\nFinally, I should clarify that this proposal is strictly about the `stopTime` storage property - the `getStopTime` getter is still helpful, and I am happy to keep it.</div>","createdAt":"2022-12-31T11:14:07Z","labels":[],"number":225,"repository":"sablier-labs/lockup","state":"closed","title":"Get rid of the \"stopTime\" storage property in the pro contract","type":"issue","updatedAt":"2023-01-05T13:27:25Z","url":"https://github.com/sablier-labs/lockup/issues/225"},{"author":"PaulRBerg","body":"See point 2 in [General Contract Guidance](https://book.getfoundry.sh/tutorials/best-practices#general-contract-guidance) (part of the Foundry Best Practices).","createdAt":"2022-12-30T19:12:56Z","labels":[],"number":224,"repository":"sablier-labs/lockup","state":"closed","title":"Order imports alphabetically by path","type":"issue","updatedAt":"2023-01-10T15:35:09Z","url":"https://github.com/sablier-labs/lockup/issues/224"},{"author":"PaulRBerg","body":"It is true that it is not currently possible to copy an in-memory array to storage:\r\n\r\n- https://stackoverflow.com/q/49345903/3873510\r\n- https://ethereum.stackexchange.com/q/117658/24693\r\n- https://github.com/ethereum/solidity/issues/3446\r\n- https://github.com/ethereum/solidity/issues/12783\r\n\r\nThis means that we can't simply assign the `segments` function argument in a declarative way. If we do that, we would get the following error:\r\n\r\n> UnimplementedFeatureError: Copying of type struct Segment memory[] memory to storage not yet supported.\r\n\r\nHowever, there is a solution, and that is to iterate over the in-memory array elements and use the `push` function to push each element, one-by-one, to the storage array:\r\n\r\n```solidity\r\nProStream storage stream = _streams[streamId];\r\n// other assignments of struct properties\r\nuint256 segmentCount = args.segments.length;\r\nfor (uint256 i = 0; i < segmentCount; ++i) {\r\n    stream.segments.push(args.segments[i]);\r\n}\r\n```\r\n\r\nThere are several benefits in switching to an array of structs:\r\n\r\n1. Fewer function arguments, which helps with alleviating the StackTooDeep problem (re #220).\r\n2. Nicer, more encapsulated, less verbose API; `segments` is more succinct than `segmentAmounts`, `segmentExponents`, and `segmentMilestones`.\r\n3. Fewer errors to check in the `checkCreateProArgs` function, because we no longer have to ensure that the segment arrays are equal.\r\n    - Consequently, fewer tests to write.","createdAt":"2022-12-30T12:56:46Z","labels":[],"number":223,"repository":"sablier-labs/lockup","state":"closed","title":"Bundle \"segmentAmounts\", \"segmentExponents\" and \"segmentMilestones\" into a single array of structs","type":"issue","updatedAt":"2023-01-05T13:27:25Z","url":"https://github.com/sablier-labs/lockup/issues/223"},{"author":"PaulRBerg","body":"See discussion in https://github.com/sablierhq/v2-core/discussions/212.","createdAt":"2022-12-28T10:58:04Z","labels":[],"number":219,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"cancelAll\" to \"cancelMultiple\" and \"withdrawAll\" to \"withdrawMultiple\"","type":"issue","updatedAt":"2023-01-05T13:27:25Z","url":"https://github.com/sablier-labs/lockup/issues/219"},{"author":"PaulRBerg","body":"The following tests should be DRY-ified:\r\n\r\n- [x] `burn`\r\n- [x] `cancel`\r\n- [x] `cancelMultiple`\r\n- [x] `claim-protocol-revenues`\r\n- [x] `getDepositAmount`\r\n- [x] `getRecipient`\r\n- [x] `getReturnableAmount`\r\n- [x] `getSender`\r\n- [x] `getStartTime`\r\n- [x] `getStopTime`\r\n- [x] `getWithdrawnAmount`\r\n- [x] `isCancelable`\r\n- [x] `isEntity`\r\n- [x] `get-protocol-revenues`\r\n- [x] `renounce`\r\n- [x] `withdraw`\r\n- [x] `withdrawMultiple`\r\n\r\nOne idea is to make an abstract contract like this:\r\n\r\n```solidity\r\ninterface ISablierV2ProtocolRevenues {\r\n    function getProtocolRevenues(address token) external view returns (uint128 protocolRevenues);\r\n    function claimProtocolRevenues(address token) external;\r\n}\r\n\r\nabstract contract ReusableTest {\r\n    ISablierV2ProtocolRevenues instance;\r\n\r\n    constructor(ISablierV2ProtocolRevenues instance_) {\r\n        instance = instance_;\r\n    }\r\n\r\n    // TESTS HERE\r\n}\r\n```\r\n\r\nSee the [shared setups](https://book.getfoundry.sh/forge/writing-tests?highlight=abstract#shared-setups) section of the Foundry Book.","createdAt":"2022-12-27T20:32:14Z","labels":[],"number":218,"repository":"sablier-labs/lockup","state":"closed","title":"DRY-ify the tests","type":"issue","updatedAt":"2023-01-05T13:27:24Z","url":"https://github.com/sablier-labs/lockup/issues/218"},{"author":"PaulRBerg","body":"I have recently enabled [`--via-ir`](https://twitter.com/PaulRBerg/status/1543538470760726533) and the test runs are much slower now, unfortunately.\r\n\r\nSeaport has come up with a clever solution, however. See this discussion: \r\n\r\nhttps://github.com/ProjectOpenSea/seaport/discussions/808\r\n\r\nIn short, the idea is to have different profiles for compiling the production code (with `--via-ir`) vs the tests (without `--via-ir`), conditionally deploying the precompiled bytecode in the tests.","createdAt":"2022-12-26T16:05:41Z","labels":[],"number":217,"repository":"sablier-labs/lockup","state":"closed","title":"Follow Seaport's Foundry set-up to enable \"--via-ir\" but avoid it when running tests","type":"issue","updatedAt":"2023-01-05T13:27:24Z","url":"https://github.com/sablier-labs/lockup/issues/217"},{"author":"PaulRBerg","body":"See point 2 in [General Test Guidance](https://book.getfoundry.sh/tutorials/best-practices#general-test-guidance) section.\r\n\r\nI was initially hesitant, but after further discussion with one of the Foundry contributors [here](https://github.com/foundry-rs/book/pull/740), I am now in favor of using the `test_Revert_Description` pattern instead of `testCannot`, and also `testFuzz` for the fuzzing tests.\r\n\r\nThe rationale is twofold:\r\n\r\n1. They are working on a Foundry-friendly drop-in replacement for solhint called [scopelint](https://github.com/ScopeLift/scopelint), which will by default check for the names as per the best practices.\r\n2. `testCannot` doesn't actually revert if the test doesn't revert - I used to believe that this was the case.","createdAt":"2022-12-26T08:23:27Z","labels":[],"number":216,"repository":"sablier-labs/lockup","state":"closed","title":"Rename the test functions to conform with Foundry's best practices","type":"issue","updatedAt":"2023-01-11T13:44:10Z","url":"https://github.com/sablier-labs/lockup/issues/216"},{"author":"PaulRBerg","body":"There is currently a bug in Solidity (up to v0.8.17, at least) with errors and events sourced from libraries - they are not included in the final contract ABI, as @razgraf pointed out on Slack recently. See this issue and PR in the Solidity repo:\r\n\r\n- https://github.com/ethereum/solidity/issues/13086\r\n- https://github.com/ethereum/solidity/pull/10996\r\n\r\nIt looks like this is a WIP, so hopefully Solidity v0.8.18 will fix this. But if it will not, we may have to find an alternative solution, such as:\r\n\r\n1. Move the errors and the events back in the contract interface files\r\n2. Write a CI script that merges the errors and the events into the contract ABIs\r\n\r\nThe current approach is to manually paste the errors/ events, but this is not a sustainable solution.\r\n\r\nSide note - it looks like Lens Protocol had bumped into the same issue. The error ABIs in the [`LensHub`](https://github.com/protofire/lens-protocol-subgraph/blob/c4d5760661f3bae94ba544745b120f4a43d03b20/abis/LensHub.json) seem to be hardcoded.","createdAt":"2022-12-24T21:12:39Z","labels":[],"number":215,"repository":"sablier-labs/lockup","state":"closed","title":"Library events are not included in contract ABIs","type":"issue","updatedAt":"2023-03-12T19:18:43Z","url":"https://github.com/sablier-labs/lockup/issues/215"},{"author":"PaulRBerg","body":"See discussion in https://github.com/sablierhq/v2-core/discussions/213#discussioncomment-4486165.","createdAt":"2022-12-23T15:19:57Z","labels":[],"number":214,"repository":"sablier-labs/lockup","state":"closed","title":"Rename \"cancelable\" to \"isCancelable\" in the \"Stream\" struct","type":"issue","updatedAt":"2023-01-05T13:27:24Z","url":"https://github.com/sablier-labs/lockup/issues/214"},{"author":"PaulRBerg","body":"See https://github.com/evmcheb/solarray.","createdAt":"2022-12-22T12:23:57Z","labels":[],"number":211,"repository":"sablier-labs/lockup","state":"closed","title":"Ditch the \"createDynamicArray\" helpers in favor of the \"solarray\" library","type":"issue","updatedAt":"2023-01-05T13:27:23Z","url":"https://github.com/sablier-labs/lockup/issues/211"},{"author":"PaulRBerg","body":"- [x] Generate coverage on every commit and PR on `main`\r\n- [x] Upload coverage report to a platform like [Coveralls](https://coveralls.io/)","createdAt":"2022-12-20T17:40:40Z","labels":[],"number":210,"repository":"sablier-labs/lockup","state":"closed","title":"Integrate coverage in CI pipeline","type":"issue","updatedAt":"2023-01-08T19:27:05Z","url":"https://github.com/sablier-labs/lockup/issues/210"},{"author":"PaulRBerg","body":"We don't currently have any tests that use the Forge cheatcode [`expectCall`](https://book.getfoundry.sh/cheatcodes/expect-call?highlight=expectCall#expectcall) to check if the ERC-20 contracts are properly called by the Sablier V2 contracts.","createdAt":"2022-12-19T10:34:11Z","labels":[],"number":209,"repository":"sablier-labs/lockup","state":"closed","title":"Write tests that expect calls to ERC-20 contracts","type":"issue","updatedAt":"2023-01-05T13:27:22Z","url":"https://github.com/sablier-labs/lockup/issues/209"},{"author":"PaulRBerg","body":"## Description\r\n\r\nAs discussed https://github.com/sablierhq/v2-core/discussions/145, we should implement operator fees. The idea is to extend the create functions with two new arguments:\r\n\r\n- `operatorFee` (of type [`UD60x18`](https://github.com/paulrberg/prb-math#usage))\r\n- `operator` (of type `address`)\r\n\r\nAnd, of course, update the implementation of the internal function `_create` to calculate the operator fee amount. The operator fee should be cumulative with the [protocol fees](https://github.com/paulrberg/prb-math#usage).\r\n\r\n## Design Choice\r\n\r\nThere is a choice to be made regarding the logic of `operatorFee` argument. It can be either (i) a percentage fee (as I have proposed above) or (ii) an actual token amount, due to be calculated by the client.\r\n\r\nI have decided to go with the former (option (i)) because of the following reasons:\r\n\r\n1. The gas costs are similar anyway, because there would still have to be a check for the fee amount to not be greater than some pre-defined value. Dividing the fee amount by the deposit amount and then checking against some value is equivalent to checking that the fee percentage is smaller than that value and then calculating the fee amount based on the percentage.\r\n2. Using a percentage fee is consistent with the logic of the [protocol fees](https://github.com/paulrberg/prb-math#usage), which are also percentages.\r\n3. Using a percentage fee is a bit more scalable, because we are demanding less from the caller. Calculating the fee amount is trivial for a front-end client, but not so for another Ethereum smart contract, e.g. a governance proposal.","createdAt":"2022-12-18T15:12:12Z","labels":[],"number":208,"repository":"sablier-labs/lockup","state":"closed","title":"Implement operator fees","type":"issue","updatedAt":"2023-01-05T13:27:22Z","url":"https://github.com/sablier-labs/lockup/issues/208"},{"author":"PaulRBerg","body":"As agreed in https://github.com/sablierhq/v2-core/discussions/145, we should implement protocol fees. The idea is to have a mapping that maps token addresses to [`UD60x18`](https://github.com/paulrberg/prb-math#usage) numbers , which would be used in the create functions to calculate a fee amount that gets accrued as protocol revenues. Consequently, there will also have to be a new mapping for storing the protocol revenues (mapping token addresses to revenue amounts), and another function that permits the contract owner to claim the revenues. Speaking of which, the owner should be implemented via the PRBContracts implementation of [`Ownable`](https://github.com/paulrberg/prb-contracts/blob/321a346bfcbc6d77f85a0bdab4348f06a206d7ff/src/access/Ownable.sol), because this implementation is faster than OpenZeppelin's (it doesn't inherit from `Context` and it uses custom errors instead of revert reason strings).\r\n\r\nNote that the protocol fees should be stored in the [comptroller](https://github.com/sablierhq/v2-core/issues/206).","createdAt":"2022-12-18T15:02:27Z","labels":[],"number":207,"repository":"sablier-labs/lockup","state":"closed","title":"Implement protocol fees","type":"issue","updatedAt":"2023-01-05T13:27:22Z","url":"https://github.com/sablier-labs/lockup/issues/207"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablierhq/v2-payroll/discussions/1, we are preparing to expand the scope of the Sablier V2 protocol. We are considering implementing different \"species\" of streams in the future, a decision that challenges some of the assumptions we've had when we started working on this repository (v2-core).\r\n\r\nEven if there will be different species of streams, it is likely that some configuration values will be common across all contracts (a great insight that @razgraf had during our latest in-person meeting). The initial values that are common today are the (i) protocol fees and (ii) the flash loan configuration, but there may be more in the future.\r\n\r\nTherefore, we should implement a \"comptroller\" contract in charge of the protocol configuration, which would be connected to all Sablier V2 contracts by a storage value that can be edited by the contract owner. By making the value editable, we make it possible to extend the comptroller in a backward compatible manner.","createdAt":"2022-12-18T14:57:01Z","labels":[],"number":206,"repository":"sablier-labs/lockup","state":"closed","title":"Implement a comptroller","type":"issue","updatedAt":"2023-01-05T13:27:21Z","url":"https://github.com/sablier-labs/lockup/issues/206"},{"author":"PaulRBerg","body":"Based on @razgraf's feedback during our latest in-person meeting - his idea is to reorganize the parameters of the create functions such that all common parameters are at the beginning. For instance, the `cancelable` parameter is the same between the `create` and the `createWithDuration` functions, but it is last.\r\n\r\nThe proposal is to re-position the `cancelable` parameter right after the `token` argument, in order to keep the common parameters at the beginning.","createdAt":"2022-12-16T14:15:32Z","labels":[],"number":203,"repository":"sablier-labs/lockup","state":"closed","title":"Cluster common parameters in the create functions","type":"issue","updatedAt":"2023-01-05T13:27:21Z","url":"https://github.com/sablier-labs/lockup/issues/203"},{"author":"PaulRBerg","body":"@razgraf made an excellent proposal during our latest in-person meeting - to re-export all relevant PRBMath types in a `Types.sol` file that can be imported from the Sablier V2 repo itself. The logic of this is to not have to ask users to also install the PRBMath repo on top of the Sablier V2 repo.\r\n\r\nThe types that should be re-exported are:\r\n\r\n- SD1x18 (used in exponents)\r\n- SD59x18 (used in the `getWithdrawableAmount` calculations in `SablierV2Pro`)\r\n- UD60x18 (used in the `getWithdrawableAmount` calculations in `SablierV2Linear`, and also in the fees' calculations)","createdAt":"2022-12-16T14:10:59Z","labels":[],"number":202,"repository":"sablier-labs/lockup","state":"closed","title":"Re-export PRBMath types","type":"issue","updatedAt":"2023-01-05T13:28:09Z","url":"https://github.com/sablier-labs/lockup/issues/202"},{"author":"PaulRBerg","body":"This is a feature request by @razgraf - to have a GitHub Actions workflow that continuously deploys the smart contract ABIs to an artifactory like [JFrog](https://jfrog.com/).","createdAt":"2022-12-15T14:21:36Z","labels":[],"number":200,"repository":"sablier-labs/lockup","state":"closed","title":"Continuous deployment of smart contract ABIs to an artifactory","type":"issue","updatedAt":"2023-01-09T16:45:36Z","url":"https://github.com/sablier-labs/lockup/issues/200"},{"author":"PaulRBerg","body":"The code on lines 58-62 in the `Validations` library is unused:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/9637a848f3fd54c1e0c06e35e9ca62eeaf52d48b/src/libraries/Validations.sol#L58-L62","createdAt":"2022-12-13T14:43:51Z","labels":[],"number":195,"repository":"sablier-labs/lockup","state":"closed","title":"Delete superfluous \"stopTime\" in \"checkCreateProArgs\"","type":"issue","updatedAt":"2022-12-14T13:55:32Z","url":"https://github.com/sablier-labs/lockup/issues/195"},{"author":"PaulRBerg","body":"We are currently relying upon the value of the `sender` member of the Stream structs to check for the existence of a stream in the `_streams` mapping. The current protocol logic is the following:\r\n\r\n- If `sender` is `address(0)`, stream does not exist for the given `streamId`\r\n- If `sender` is not `address(0)`, stream exists for the given `streamId`\r\n\r\nThe rationale for this was to save gas by not having another boolean property in the structs, but, as per the recent optimizations we've made, it just so happens that 8 bits have become available. We could make add a new boolean after `cancelable` and the gas cost wouldn't change (at least it would definitely not change significantly).\r\n\r\nThe benefits of doing this would be:\r\n\r\n1. The implementation would be more logical and more intuitive, by virtue of the explicit name of the boolean property that signals the existence of the stream (rather than assuming that the developer reading the smart contract knows about the assumption made by the protocol about the value of the `sender` address)\r\n2. We might be able to remove all `address(0)` checks, as discussed in https://github.com/sablierhq/v2-core/discussions/38, because the protocol would no longer rely on the `sender` being the zero address to check for the non-existence of a stream.\r\n\r\nSuggested names for this boolean:\r\n\r\n- `isEntity` (recommended by Rob Hitchens in this [post](https://ethereum.stackexchange.com/q/13167/24693))\r\n- `exists`","createdAt":"2022-12-06T12:09:56Z","labels":[],"number":188,"repository":"sablier-labs/lockup","state":"closed","title":"Add a boolean in the Stream structs to signal the existence of the stream","type":"issue","updatedAt":"2022-12-14T13:55:57Z","url":"https://github.com/sablier-labs/lockup/issues/188"},{"author":"razgraf","body":"Stemming from [this](https://github.com/sablier-labs/v2-interfaces/discussions/678#discussioncomment-8026384) reply from #678, in case #805 isn't informative enough, we should merge the single and group forms into a single one.\r\n\r\nIt should:\r\n1. Adapt between single and group to prevent (or beautify) \"Group of 1\" and keep a clean UX for single-streams\r\n2. Remove or re-implement the autofill functionality (currently available in single forms, unavailable in groups due to our effect-driven architecture)\r\n3. Refactor the code to only allow for processing groups (in `machines`, `extensions` and everywhere else, where the dichotomy applies)\r\n\r\nThis issue should only be tackled after #805 is implemented and tested in production.","createdAt":"2024-01-07T12:38:21Z","labels":["backlog","effort: epic","type: refactor","work: complicated"],"number":806,"repository":"sablier-labs/interfaces","state":"closed","title":"Merge Single <> Group layouts to promote creating multiple streams [678-B]","type":"issue","updatedAt":"2024-08-20T13:08:19Z","url":"https://github.com/sablier-labs/interfaces/issues/806"},{"author":"razgraf","body":"Stemming from [this](https://github.com/sablier-labs/v2-interfaces/discussions/678#discussioncomment-8026384) reply from #678, we should implement a few surface changes to promote the creation of multiple streams.\r\n\r\n1. Swap the order between group and single in the gallery (make groups the default view)\r\n2. Add a new call to action \"add-another-stream\" in the single form (it will open the group form in a new tab)\r\n3. [Bonus] Remove the \"Airstreams\" pill to fix classification issues between streams and airstreams.","createdAt":"2024-01-07T12:33:43Z","labels":[],"number":805,"repository":"sablier-labs/interfaces","state":"closed","title":"Swap Single <> Group layouts to promote creating multiple streams [678-A]","type":"issue","updatedAt":"2024-01-19T09:40:43Z","url":"https://github.com/sablier-labs/interfaces/issues/805"},{"author":"razgraf","body":"The task is to research how programmable Safe's Transaction Builder is and **if** we could build our own bundles for Safe users from the UI.\r\n\r\nPossible bundles:\r\n- Approve and Create\r\n- Cancel Multiple or Withdraw Multiple (over different versions of lockup contracts at once)\r\n\r\nTo keep in mind:\r\n\r\n- #792 \r\n- #573\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/668\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** November 30, 2023</sup>\r\nAs discussed in https://github.com/sablier-labs/v2-interfaces/discussions/573:\r\n\r\n> For Safe users (we can identify them in the app, that's not a problem) isn't there a way to take advantage of the transaction builder and simply chain [approve, deploy-proxy] or [approve, deploy-proxy, create-stream] with a custom Safe Proxy Target?\r\n\r\nReference: https://help.safe.global/en/articles/40841-transaction-builder</div>","createdAt":"2024-01-05T13:08:34Z","labels":["priority: 1"],"number":803,"repository":"sablier-labs/interfaces","state":"closed","title":"Research \"TransactionBuilder\" to improve UX for Safe users","type":"issue","updatedAt":"2024-02-13T10:29:32Z","url":"https://github.com/sablier-labs/interfaces/issues/803"},{"author":"razgraf","body":"For the next re-design sprint of the Landing website, here are some features which should be included\n\n- [ ] https://github.com/sablier-labs/v2-interfaces/discussions/572 - An ecosystem page featuring our integrators\n- [x] https://github.com/sablier-labs/v2-interfaces/issues/556 - A templated set of pages for our main use-cases, to be used for targeted marketing\n- [ ] https://github.com/sablier-labs/v2-interfaces/issues/589\n- [x] (Possibly) https://github.com/sablier-labs/v2-interfaces/issues/784","createdAt":"2024-01-05T12:11:35Z","labels":["type: feature","priority: 3","effort: epic","work: complicated"],"number":802,"repository":"sablier-labs/interfaces","state":"closed","title":"Features for the Landing website","type":"issue","updatedAt":"2025-01-13T09:40:53Z","url":"https://github.com/sablier-labs/interfaces/issues/802"},{"author":"PaulRBerg","body":"## Error\r\n\r\nJust got this error in the UI:\r\n\r\n```text\r\nError: service is overloaded and can not run the query right now. Please try again in a few minutes: {\"response\":{\"errors\":[{\"message\":\"service is overloaded and can not run the query right now. Please try again in a few minutes\"}],\"status\":200,\"headers\":{\"map\":{\"content-type\":\"application/json\"}}},\"request\":{\"query\":\"query getStreams_ByToken($first: Int!, $skip: Int!, $token: String!, $subgraphId: BigInt!) {\\n  streams(\\n    first: $first\\n    skip: $skip\\n    orderBy: subgraphId\\n    orderDirection: desc\\n    where: {asset: $token, subgraphId_lt: $subgraphId}\\n  ) {\\n    ...StreamFragment\\n  }\\n}\\n\\nfragment AssetFragment on Asset {\\n  id\\n  address\\n  chainId\\n  decimals\\n  name\\n  symbol\\n}\\n\\nfragment BatchFragment on Batch {\\n  id\\n  label\\n  size\\n}\\n\\nfragment ContractFragment on Contract {\\n  id\\n  address\\n  category\\n  version\\n}\\n\\nfragment SegmentFragment on Segment {\\n  id\\n  position\\n  amount\\n  exponent\\n  milestone\\n  endTime\\n  startTime\\n  startAmount\\n  endAmount\\n}\\n\\nfragment StreamFragment on Stream {\\n  id\\n  tokenId\\n  subgraphId\\n  chainId\\n  alias\\n  category\\n  funder\\n  sender\\n  recipient\\n  hash\\n  timestamp\\n  depositAmount\\n  startTime\\n  endTime\\n  cliff\\n  cliffTime\\n  cliffAmount\\n  cancelable\\n  renounceTime\\n  canceled\\n  canceledTime\\n  withdrawnAmount\\n  intactAmount\\n  position\\n  proxied\\n  proxender\\n  transferable\\n  version\\n  asset {\\n    ...AssetFragment\\n  }\\n  batch {\\n    ...BatchFragment\\n  }\\n  contract {\\n    ...ContractFragment\\n  }\\n  segments {\\n    ...SegmentFragment\\n  }\\n}\",\"variables\":{\"chainId\":1,\"first\":31,\"skip\":0,\"subgraphId\":\"1000000000\",\"token\":\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"}}}\r\n```\r\n\r\nIt looks like The Graph is down or something.\r\n\r\nIt would be nice if we could handle this error more gracefully and let the user know what happened via a banner at the top part of the screen.\r\n\r\n## Screenshot\r\n\r\n<img width=\"500\" alt=\"Screenshot 2024-01-04 at 5 27 41 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/efebc0e1-f219-496b-b815-fca1c93f0551\">\r\n","createdAt":"2024-01-04T15:32:08Z","labels":["type: bug","priority: 0"],"number":801,"repository":"sablier-labs/interfaces","state":"closed","title":"Handle overloaded subgraph error more gracefully","type":"issue","updatedAt":"2024-01-05T19:30:17Z","url":"https://github.com/sablier-labs/interfaces/issues/801"},{"author":"gavriliumircea","body":"The most occurrences for bugs reported in sentry are:\n\n- [x] WebAssembly Range Error: https://sablier-labs.sentry.io/issues/4782045892/?\\project=4504854258450432&query=is%3Aunresolved&referrer=issue-stream&stream_index=1\n- [ ] Cannot read property of undefined https://sablier-labs.sentry.io/issues/4798667444/?project=4504854258450432&referrer=issue-stream&stream_index=3\n","createdAt":"2024-01-04T12:52:00Z","labels":["priority: 3"],"number":800,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate Sentry reported errors","type":"issue","updatedAt":"2024-07-05T16:13:55Z","url":"https://github.com/sablier-labs/interfaces/issues/800"},{"author":"PaulRBerg","body":"See the rationale for the new GitHub label system here:\r\n\r\nhttps://github.com/orgs/sablier-labs/discussions/6\r\n\r\nAs an example repo where the new labels are already used, you can look at [V2 Core](https://github.com/sablier-labs/v2-core).","createdAt":"2024-01-01T16:28:14Z","labels":["priority: 3","effort: low","type: docs","work: clear"],"number":796,"repository":"sablier-labs/interfaces","state":"closed","title":"Switch to the new GitHub label system","type":"issue","updatedAt":"2024-03-14T11:21:41Z","url":"https://github.com/sablier-labs/interfaces/issues/796"},{"author":"PaulRBerg","body":"I've noticed that the following curves do not work in the [URL builder](http://docs.sablier.com/apps/url-schemes#building-the-url-1):\r\n\r\n- [ ] Timelock\r\n- [ ] Unlock Each Month\r\n- [ ] Unlock Linear\r\n- [ ] Unlock Cliff\r\n- [ ] Dynamic Exponential Cliff (should we just disregarding this for the time being?)","createdAt":"2023-12-30T12:13:31Z","labels":["type: feature","priority: 3"],"number":794,"repository":"sablier-labs/interfaces","state":"closed","title":"Support all shapes in the URL builder","type":"issue","updatedAt":"2024-01-08T10:56:41Z","url":"https://github.com/sablier-labs/interfaces/issues/794"},{"author":"PaulRBerg","body":"In the URL builder and anywhere else where users interact with this distribution curve:\r\n\r\nhttps://app.sablier.com/create/single/?shape=dynamicStepper&chainId=1&duration=86400","createdAt":"2023-12-30T12:12:52Z","labels":["priority: 3","resolution required"],"number":793,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"dynamicStepper\" to \"unlockInSteps\"","type":"issue","updatedAt":"2024-01-05T13:31:37Z","url":"https://github.com/sablier-labs/interfaces/issues/793"},{"author":"PaulRBerg","body":"## Bug Report\r\n\r\nTo reproduce:\r\n\r\n1. Connect to Arbitrum\r\n2. Go to \"Search\"\r\n3. Add the following stream ids: `LL-42161-62` and `LL2-42161-11`\r\n4. Click on \"Cancel All\"\r\n\r\nYou will get this error:\r\n\r\n> Warnings found on some items\r\n> For all the selected you should have the same role (sender or recipient). Remove items with warnings from the search before proceeding.\r\n\r\nBut in fact, the problem is that the stream belongs to two different releases (V2.0 and V2.1).\r\n\r\n### Link\r\n\r\nhttps://app.sablier.com/?t=search&c=42161&i=LL-42161-62,LL2-42161-11\r\n\r\n## Fix\r\n\r\nWithout a proxy, it is impossible to cancel multiple streams belonging to different protocol releases, so the only possible fix is to handle the error more gracefully and explain to the user that all stream IDS must start with _either_ `LL` or `LL2` (comingling is not allowed).\r\n\r\nThankfully, this shouldn't be a biggy. The \"Cancel All\" functionality is useful mostly for groups, which are created using the same contract.","createdAt":"2023-12-29T16:38:54Z","labels":["type: bug","priority: 1"],"number":791,"repository":"sablier-labs/interfaces","state":"closed","title":"\"Cancel All\" does not work between V2.0 and V2.1 streams","type":"issue","updatedAt":"2024-01-19T13:52:40Z","url":"https://github.com/sablier-labs/interfaces/issues/791"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\nIt would be helpful to (i) see the withdraw sidebar as a sender and (ii) see the cancel sidebar as a recipient.\r\n\r\nHere are some scenarios:\r\n\r\n- I am a sender and I would like to see how much the recipient can withdraw at the moment, and how much is remaining\r\n- I am an NFT lender and I would like to see how much can be withdrawn by the recipient\r\n    - Technically, this information can be gleaned from the \"Details\" tab by subtracting the withdrawn amount from the streamed amount. But this involves math. It would be much more convenient to be able to see the \"Withdrawable\" amount in the Withdraw sidebar.\r\n- I am a recipient and suspect the sender may cancel my stream. I would like to see how much the sender would be refunded.\r\n- I (PRB) am making a product demo, and the user asks me to demo the withdraw functionality, but I only have sender streams.\r\n\r\nYet another benefit is that displaying all buttons at all times should be easier to maintain (the diff in the PR closing this issue should have more removed lines than added lines).\r\n\r\n## Task\r\n\r\n- Always display \"Withdraw\" and \"Cancel\" in the \"Actions\" section, and allow any user to click on them\r\n- Display a warning when the connected wallet does not have sufficient permission to withdraw or to cancel (I think this is already the case, isn't it?)\r\n- Keep the current behavior as far as the colorful \"Withdraw\" button, and the \"Cancel Stream\" button, which appear underneath the streaming circle","createdAt":"2023-12-29T16:16:55Z","labels":["type: feature","priority: 2"],"number":790,"repository":"sablier-labs/interfaces","state":"closed","title":"Show both \"Cancel\" and \"Withdraw\" buttons at all times in the \"Actions\" section","type":"issue","updatedAt":"2024-02-16T17:17:54Z","url":"https://github.com/sablier-labs/interfaces/issues/790"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\n- End users do not care that some Sablier streams are powered by two different contracts (LockupLinear and LockupDynamic). Nor should they care about it.\r\n- Many users will not understand the terms, or if they do understand them, they will assume that there's some business-related reason for creating a dichotomy between LockupLinear and LockupDynamic. But there isn't. There's just a purely technical reason for doing so.\r\n- LockupDynamic is increasingly becoming a \"catch-all\" for multiple streaming curves (we've recently [introduced](https://blog.sablier.com/dynamic-streams-in-the-sablier-ui/) several new curves: timelocks, unlock-linear, and unlock-cliff); a bajillion LockupDynamic curves but only two LockupLinear curves look visually off in the Gallery \r\n- This classification will become more difficult to uphold with the introduction of other streaming contracts (e.g. [`LockupTranched`](https://github.com/sablier-labs/private-discussions/discussions/19) and [`OpenEnded`](https://github.com/sablier-labs/v2-open-ended))\r\n\r\n## Tasks\r\n\r\n- [x] Remove the dichotomy in the Gallery\r\n- [ ] Remove the \"Lockup Linear\" and \"Lockup Dynamic\" terms in situations where they aren't strictly necessary\r\n    - In the transaction confirmation modal\r\n    - In the dashboard \"Value\" column (ref https://github.com/sablier-labs/v2-interfaces/discussions/693)\r\n    - In the social media preview; say just \"Lockup\" instead of \"Lockup Linear\"/ \"Lockup Dynamic\"","createdAt":"2023-12-29T09:08:32Z","labels":["priority: 1"],"number":786,"repository":"sablier-labs/interfaces","state":"closed","title":"Letting go of the dichotomy between streaming models","type":"issue","updatedAt":"2024-01-19T13:38:48Z","url":"https://github.com/sablier-labs/interfaces/issues/786"},{"author":"PaulRBerg","body":"The current default year values loaded in the date picker are in the past (2016-2023):\r\n\r\n<img width=\"500\" alt=\"SCR-20231229-jzrx\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9cf33874-952e-47a4-b693-79f089037523\">\r\n\r\nIt would be more helpful if the UI displayed future years as default values, i.e, 2023-2030.","createdAt":"2023-12-29T08:59:22Z","labels":["priority: 3"],"number":785,"repository":"sablier-labs/interfaces","state":"closed","title":"The default year values loaded in the date picker should be in the future not in the past","type":"issue","updatedAt":"2024-01-19T15:38:23Z","url":"https://github.com/sablier-labs/interfaces/issues/785"},{"author":"PaulRBerg","body":"Not just in the \"For Organizations\" page.\r\n\r\nWe keep receiving questions about this:\r\n\r\n<img width=\"298\" alt=\"SCR-20231229-jtbf\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a55b281d-7d4d-4172-9b86-83c36f505c5c\">\r\n","createdAt":"2023-12-28T12:41:51Z","labels":["type: feature","priority: 3"],"number":784,"repository":"sablier-labs/interfaces","state":"closed","title":"Clarify that Sablier is free to use in the landing page","type":"issue","updatedAt":"2024-02-21T10:55:27Z","url":"https://github.com/sablier-labs/interfaces/issues/784"},{"author":"PaulRBerg","body":"It should be a pretty helpful feature to be able to export the transaction history of a stream in CSV/PDF form:\r\n\r\n<img width=\"500\" alt=\"SCR-20231228-mnbi\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0613b5c3-4007-4b49-aaa4-4af3bc60bfa1\">\r\n","createdAt":"2023-12-28T12:02:51Z","labels":["type: feature","priority: 3"],"number":782,"repository":"sablier-labs/interfaces","state":"closed","title":"Export transaction history as CSV/PDF","type":"issue","updatedAt":"2024-01-05T11:54:47Z","url":"https://github.com/sablier-labs/interfaces/issues/782"},{"author":"PaulRBerg","body":"The \"Unlock-Cliff\" curve does not allow the \"Initial unlocked amount\" to be zero:\r\n\r\n<img width=\"500\" alt=\"SCR-20231227-tdpa\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e436f8d2-b100-4ff3-9c01-14a0d2162e0a\">\r\n\r\nBut I don't see why this has to be the case. People may want to have a zero cliff.\r\n\r\nNote: this feature was requested by the 5ire team on the call today.","createdAt":"2023-12-27T20:09:36Z","labels":["type: feature","priority: 3"],"number":781,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow zero in the \"Initial unlocked amount\" field in \"Unlock-Cliff\" curve","type":"issue","updatedAt":"2024-01-04T15:45:02Z","url":"https://github.com/sablier-labs/interfaces/issues/781"},{"author":"PaulRBerg","body":"The 5ire team has suggested to add a \"Months\" slider in the durations picker: \r\n\r\n<img width=\"423\" alt=\"SCR-20231227-tbct\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/740cd540-5e95-41c4-ba85-9fa0ffac5abc\">\r\n\r\nI tend to agree with them that a \"Months\" slider would be helpful, and the obvious candidate for removal is the \"Hours\" slider.\r\n\r\nRelated:\r\n\r\n- #675\r\n- #422","createdAt":"2023-12-27T20:02:51Z","labels":["priority: 3"],"number":780,"repository":"sablier-labs/interfaces","state":"closed","title":"Replace \"Hours\" with \"Months\" in durations picker","type":"issue","updatedAt":"2024-02-12T15:52:22Z","url":"https://github.com/sablier-labs/interfaces/issues/780"},{"author":"PaulRBerg","body":"I agree with the assessment of the 5ire team. The only thing that passes before the cliff is time. No tokens are actually streamed.\r\n\r\n<img width=\"500\" alt=\"SCR-20231227-olga\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b61f7310-3104-4957-b22a-5abf961c67c5\">\r\n\r\n\r\n\r\n\r\n","createdAt":"2023-12-27T14:26:14Z","labels":["priority: 2"],"number":779,"repository":"sablier-labs/interfaces","state":"closed","title":"Streamed amount should not increase before the cliff","type":"issue","updatedAt":"2024-03-23T14:04:48Z","url":"https://github.com/sablier-labs/interfaces/issues/779"},{"author":"PaulRBerg","body":"The \"Withdraw All\" and \"Cancel All\" buttons are available only in the \"Search\" tabs. It would be helpful for them to be available directly in the sender and the recipient tabs.","createdAt":"2023-12-27T14:10:01Z","labels":["type: feature","priority: 3"],"number":778,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the \"Withdraw All\" and \"Cancel All\" buttons available in the standard sender and recipient tabs","type":"issue","updatedAt":"2024-01-07T14:25:22Z","url":"https://github.com/sablier-labs/interfaces/issues/778"},{"author":"PaulRBerg","body":"Take the following context:\r\n\r\n- Address: 0xF94957A1D7982fCF0F1Dfff9EA56a11E918c7122\r\n- Chain: Sepolia\r\n\r\nThis address is both the sender and the recipient for some streams on Sepolia, e.g.\r\n\r\nhttps://app.sablier.com/stream/LL2-11155111-32/\r\n\r\nThis stream correctly appears in the \"Recipient\" tab. But in the \"Sender\" tab, the label is \"Incoming\", whereas it should be \"Outgoing\":\r\n\r\n<img width=\"400\" alt=\"SCR-20231227-odxb\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2e2efb56-e6ad-4a4c-bafe-0b74f3680f8a\">\r\n","createdAt":"2023-12-27T14:03:27Z","labels":["type: bug","priority: 3"],"number":777,"repository":"sablier-labs/interfaces","state":"closed","title":"Self-streams appear as \"Incoming\" instead of \"Outgoing\" in the \"Sender\" tab","type":"issue","updatedAt":"2024-01-19T13:52:39Z","url":"https://github.com/sablier-labs/interfaces/issues/777"},{"author":"PaulRBerg","body":"https://www.loom.com/share/e48d3376fa4a4c95b0284364850d8e52?sid=2afc9093-5ba0-493e-92ba-79b9063dad8c","createdAt":"2023-12-22T18:54:21Z","labels":["type: bug","priority: 3"],"number":773,"repository":"sablier-labs/interfaces","state":"closed","title":"Clicking on \"Expected Streams→Check\" opens the \"Cookies Policy\" modal","type":"issue","updatedAt":"2024-01-19T13:52:39Z","url":"https://github.com/sablier-labs/interfaces/issues/773"},{"author":"PaulRBerg","body":"The version is written as \"Version 21\" (instead of \"Version 2.1\") in the \"Details\" page:\r\n\r\n<img width=\"400\" alt=\"SCR-20231222-odlo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/8c5ebed1-97b5-43f5-b0d5-088f03890a26\">\r\n\r\nDitto for \"Version 20\"\r\n\r\n---\r\n\r\nLet's hope that we will get to V20 someday 🫡","createdAt":"2023-12-22T14:14:58Z","labels":["priority: 3"],"number":771,"repository":"sablier-labs/interfaces","state":"closed","title":"Say \"Version 2.1\" instead of \"Version 21\"","type":"issue","updatedAt":"2024-01-19T13:52:38Z","url":"https://github.com/sablier-labs/interfaces/issues/771"},{"author":"PaulRBerg","body":"I have just been in a situation in which I wanted to copy the contract address of the token belonging to a stream, and I noticed that there's no way to do this directly through the UI.\r\n\r\nThe \"Details\" tab does not contain a reference to the token address:\r\n\r\n<img width=\"500\" alt=\"SCR-20231222-odlo\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/39de8201-dda6-4472-b2d0-715ba84f1966\">\r\n\r\nWe should add a new \"Token\" entry.\r\n","createdAt":"2023-12-22T14:09:44Z","labels":["type: feature","priority: 2"],"number":769,"repository":"sablier-labs/interfaces","state":"closed","title":"Token contract address is missing from the \"Details\" page","type":"issue","updatedAt":"2024-01-19T09:40:42Z","url":"https://github.com/sablier-labs/interfaces/issues/769"},{"author":"PaulRBerg","body":"Related to https://github.com/sablier-labs/v2-interfaces/issues/639\r\n\r\nI noticed this bug on Mainnet: filtering for USDC does not, in fact, filter the streams. Other streams appear:\r\n\r\n<img width=\"600\" alt=\"Filter Bug (UDSC)\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/504cc423-da63-4edc-85a8-1f8d82e905a2\">\r\n\r\nThis was the URL:\r\n\r\nhttps://app.sablier.com/?t=search&c=1&s=0x0aaef7bbc21c627f14cad904e283e199ca2b72cc\r\n\r\nAlso, wouldn't it be nicer if instead of \"involving 0x0aae..72cc\", it said \"involving USDC\"?","createdAt":"2023-12-22T13:42:30Z","labels":["type: bug","priority: 2"],"number":768,"repository":"sablier-labs/interfaces","state":"closed","title":"Bug in token filter functionality","type":"issue","updatedAt":"2024-01-19T13:52:38Z","url":"https://github.com/sablier-labs/interfaces/issues/768"},{"author":"PaulRBerg","body":"## Current Behavior\r\n\r\n1. Go to https://app.sablier.com/create/group/?shape=linear\r\n2. Click on \"+ Add new stream\"\r\n3. Leave one of the duration fields unfilled\r\n4. Click on \"Create group of streams\"\r\n5. Nothing happens\r\n\r\n### Empirical Support\r\n\r\nA user bumped into this issue last night.\r\n\r\nSee https://github.com/sablier-labs/v2-interfaces/discussions/674#discussioncomment-7926453\r\n\r\n### Better Behavior\r\n\r\nDisplay a warning atop the \"Create\" button that explains to the user that the form is incomplete.\r\n\r\n<img width=\"400\" alt=\"SCR-20231222-lfbl\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/83c2c4ce-6688-4739-b66a-566528538993\">\r\n\r\n## Prioritization\r\n\r\nI have marked this as `priority1` because groups of streams are critical for the rapid growth of Sablier (as argued in https://github.com/sablier-labs/v2-interfaces/discussions/678, ideally this should become the default view).\r\n\r\n## Side note\r\n\r\nAllowing users to upload CSV files (ref https://github.com/sablier-labs/v2-interfaces/issues/629) for creating normal streams would also address this UX issue. However, it would still help to implement this improvement.","createdAt":"2023-12-22T10:27:35Z","labels":["priority: 1"],"number":767,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve UX when not all duration fields are provided","type":"issue","updatedAt":"2024-02-16T17:19:17Z","url":"https://github.com/sablier-labs/interfaces/issues/767"},{"author":"razgraf","body":"This may be caused by the `@sablier/v2-constants` import (old issue, now resurfaced).\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/actions/runs/7279259213/job/19835205011","createdAt":"2023-12-21T11:45:50Z","labels":[],"number":766,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix availability test in Cypress","type":"issue","updatedAt":"2024-01-19T13:52:38Z","url":"https://github.com/sablier-labs/interfaces/issues/766"},{"author":"PaulRBerg","body":"All these buttons lead me back to the \"Streams\" home page, but they should get me back to the \"Airstreams\" home page:\r\n\r\n<img width=\"700\" alt=\"SCR-20231220-toct\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/6b97a13f-12fb-4fe7-8996-6f72505a3a27\">\r\n\r\n<img width=\"700\" alt=\"SCR-20231220-togh\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a4d3edca-e008-415c-b018-1944789434af\">\r\n","createdAt":"2023-12-20T20:39:05Z","labels":["priority: 3"],"number":764,"repository":"sablier-labs/interfaces","state":"closed","title":"Clicking on the back arrow, the \"Dashboard\", and on the Sablier logo should redirect me back to the Airstreams home page","type":"issue","updatedAt":"2024-01-19T09:40:42Z","url":"https://github.com/sablier-labs/interfaces/issues/764"},{"author":"PaulRBerg","body":"## Issue\r\n\r\nI was on \"Step 3\" in the airstream creation flow, and for a moment I thought that there was a bug in the \"Deploy contract\" button. I was clicking on it and nothing happened.\r\n\r\nIt turned out that I was not on the correct chain (campaign was Sepolia, but I was connected to Ethereum).\r\n\r\nAs you can see in these screenshots, the \"Chain change required\" warning does not show up on my 13\" MacBook Air:\r\n\r\n<img width=\"600\" alt=\"SCR-20231220-tgcs\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b477135d-6a15-4458-bb5e-16733230c4c6\">\r\n\r\n## Improvement\r\n\r\nA better UX would be to have the \"Deploy contract\" button be clickable by default, and simply prompt the user to change to the correct chain when the user clicks on it.","createdAt":"2023-12-20T20:20:12Z","labels":["priority: 3"],"number":763,"repository":"sablier-labs/interfaces","state":"closed","title":"Clicking on \"Deploy contract\" should prompt the user to change the chain","type":"issue","updatedAt":"2024-02-16T17:07:27Z","url":"https://github.com/sablier-labs/interfaces/issues/763"},{"author":"razgraf","body":"On click, tooltips remain visible in the UI when interacting with the interface from a mobile device. These should stay hidden on small screens to avoid the forced overlay. \r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/04ea53f8-8e93-4540-b8dc-3a4bb8f4a7c7\" width=\"300px\"/>\r\n","createdAt":"2023-12-20T00:21:17Z","labels":[],"number":757,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable tooltips on mobile","type":"issue","updatedAt":"2023-12-20T12:24:17Z","url":"https://github.com/sablier-labs/interfaces/issues/757"},{"author":"PaulRBerg","body":"The tokens are not showing up anymore - neither in the dashboard nor in the stream profile.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-19 at 11 45 06 AM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0a20e90c-092c-492d-bd4c-041c9f3b2b5b\">\r\n\r\nNotes:\r\n\r\n- Tested on two machines and two browsers.\r\n- This is on production not experimental.\r\n","createdAt":"2023-12-19T09:47:17Z","labels":["type: bug","priority: 1"],"number":752,"repository":"sablier-labs/interfaces","state":"closed","title":"Tokens are not showing up","type":"issue","updatedAt":"2023-12-19T13:06:24Z","url":"https://github.com/sablier-labs/interfaces/issues/752"},{"author":"razgraf","body":"The task is to add a new detail into the Airstream profile to depict the remaining time for campaigns that are yet to expire.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/748\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **smol-ninja** December 17, 2023</sup>\r\nSender\r\n-------\r\nConsider multiple Airstreams that have the same claim window but started at different point in time. Seeing remaining claim period for each Airstream might be more useful info for Senders than knowing the total claim time.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-17 at 13 15 24\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/c903b4ea-492f-4403-8b87-38e6c9453deb\">\r\n\r\nRecipients\r\n----------\r\nEven though we display \"Claims end time\" under **Other details**, knowing how much time is left to claim could be more useful info for recipients. \r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-17 at 13 15 19\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/981259b9-0a61-4147-979b-de5fce4a6ed8\">\r\n</div>","createdAt":"2023-12-18T22:52:25Z","labels":[],"number":751,"repository":"sablier-labs/interfaces","state":"closed","title":"Add remaining time in the Airstream profile for expiring campaigns","type":"issue","updatedAt":"2023-12-19T23:19:18Z","url":"https://github.com/sablier-labs/interfaces/issues/751"},{"author":"PaulRBerg","body":"## Issue\r\n\r\nLooks like a TypeScript-related bug. You can reproduce it by running this:\r\n\r\n```sh\r\n$ cd packages/components\r\n$ yarn build-package\r\n```\r\n\r\nOn the latest commit on the `experimental` branch:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/commit/e9fa6e4fb6797c8632d44c12e640ec4d870834c9\r\n\r\n## Error Log\r\n\r\nFull error log:\r\n\r\n```text\r\nsrc/organisms/Input/Duration/index.tsx:40:22 - error TS2345: Argument of type '\"form.placeholder.durationBase\"' is not assignable to parameter of type 'Locale'.\r\n\r\n40       placeholder: t(\"form.placeholder.durationBase\"),\r\n                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n\r\nFound 1 error in src/organisms/Input/Duration/index.tsx:40\r\n```\r\n\r\n## Investigation\r\n\r\nUnfortunately, I couldn't figure out a solution. But I've conducted a little bit of investigation on Google and it looks related to TypeScript.\r\n\r\nInterestingly, changing the key to any other key available in `common.json` makes the error go away.","createdAt":"2023-12-18T19:39:21Z","labels":["type: bug","priority: 3"],"number":747,"repository":"sablier-labs/interfaces","state":"closed","title":" Argument of type ...' is not assignable to parameter of type 'Locale'","type":"issue","updatedAt":"2023-12-19T15:59:27Z","url":"https://github.com/sablier-labs/interfaces/issues/747"},{"author":"PaulRBerg","body":"As discussed on [Slack](https://sablier.slack.com/archives/CNLTTEDKM/p1702880369481789?thread_ts=1702848977.624839&cid=CNLTTEDKM), there are cases when we can't deploy the latest contracts on a chain that a historical deployment used to be available on. For example, we've recently [bumped](https://twitter.com/PaulRBerg/status/1736442737098924366) into extraordinarily high gas fees on Avalanche, and that has led us to avoid deploying V2.1 on Avalanche at this time.\r\n\r\nThe UI should be capable of:\r\n\r\n1. Block stream creations on the versions not supported\r\n    - Alternatively, allow stream creations using the previous version available (V2.0 for Avalanche);\r\n2. Allow users to cancel and withdraw from previous deployments","createdAt":"2023-12-18T10:07:45Z","labels":["type: feature","priority: 2"],"number":743,"repository":"sablier-labs/interfaces","state":"closed","title":"Chains on which streams cannot be created on","type":"issue","updatedAt":"2023-12-20T12:55:58Z","url":"https://github.com/sablier-labs/interfaces/issues/743"},{"author":"gavriliumircea","body":"This should happen only for the create single/group/airstream actions.","createdAt":"2023-12-18T09:34:26Z","labels":[],"number":742,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove support for Avalanche ","type":"issue","updatedAt":"2023-12-18T22:15:26Z","url":"https://github.com/sablier-labs/interfaces/issues/742"},{"author":"gavriliumircea","body":"In the transaction modal after the airstream claim action we should mention the fact that slow indexing might happen due to the subgraph.","createdAt":"2023-12-18T09:33:31Z","labels":[],"number":741,"repository":"sablier-labs/interfaces","state":"closed","title":"Update claim  transaction modal","type":"issue","updatedAt":"2023-12-19T23:19:14Z","url":"https://github.com/sablier-labs/interfaces/issues/741"},{"author":"gavriliumircea","body":"While investigating #737 we discovered that Vercel doesn't allow requests with bodies over 4.5 MB.( https://vercel.com/guides/how-to-bypass-vercel-body-size-limit-serverless-functions) Note this is not the case for the local environment of vercel( `vercel dev`). For now we want to limit the file size at client level to 4 MB. And we should display a text that says that the app is optimised for 50k users and if a client wants to create a bigger campaign, he should contact us and we will acomodate his needs.","createdAt":"2023-12-18T09:25:46Z","labels":[],"number":740,"repository":"sablier-labs/interfaces","state":"closed","title":"Update guard to limit campaign csvs to 4 MB","type":"issue","updatedAt":"2023-12-19T23:19:09Z","url":"https://github.com/sablier-labs/interfaces/issues/740"},{"author":"smol-ninja","body":"While funding the campaign, there is a btn displaying **Necessary: 1,000**\r\n\r\nMy understanding is that it displays the amount required to fund the campaign (a.k.a. necessary for airdrop, 24.95M here) but the value that it displays is the funder's token balance (1,000 here).\r\n\r\nTwo suggestions:\r\n1. Either we display **Necessary** amount that is required to fund: `Necessary: 24.95M` here; OR\r\n2. We replace the Necessary keyword with **Maximum** and that would mean the maximum user can fund based on his wallet balance: `Max: 1000` here.\r\n3. We show both: `Necessary: 24.95M` as well as provide a maximum btn that fills the input with the maximum user can fund.\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-12-17 at 13 31 21\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/8b7ab818-0246-437e-bada-70a9fd0ced50\">\r\n","createdAt":"2023-12-17T13:41:12Z","labels":[],"number":739,"repository":"sablier-labs/interfaces","state":"closed","title":"Necessary button could be confusing for depositors","type":"issue","updatedAt":"2023-12-18T22:34:24Z","url":"https://github.com/sablier-labs/interfaces/issues/739"},{"author":"smol-ninja","body":"Sender\r\n-------\r\nConsider multiple Airstreams that have the same claim window but started at different point in time. Seeing remaining claim period for each Airstream might be more useful info for Senders than knowing the total claim time.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-17 at 13 15 24\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/c903b4ea-492f-4403-8b87-38e6c9453deb\">\r\n\r\nRecipients\r\n----------\r\nEven though we display \"Claims end time\" under **Other details**, knowing how much time is left to claim could be more useful info for recipients. \r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-17 at 13 15 19\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/981259b9-0a61-4147-979b-de5fce4a6ed8\">\r\n","createdAt":"2023-12-17T13:23:11Z","labels":[],"number":738,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion: \"Claim ends in\" instead of \"Claim window\"?","type":"issue","updatedAt":"2023-12-18T19:45:45Z","url":"https://github.com/sablier-labs/interfaces/issues/738"},{"author":"smol-ninja","body":"Fails to upload a csv file with large data.\r\n\r\nAPI: https://v2-services.vercel.app/api/create?decimals=18\r\nError code: 413 Payload Too Large\r\n\r\nSeems like an issue with maximum size limit on vercel. \r\n\r\nSample file (~7.2 MB, 150k recipients): [ethereum_data.csv](https://github.com/sablier-labs/v2-interfaces/files/13696150/ethereum_data.csv)\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-12-17 at 12 55 47\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/d3593717-712a-4132-9727-568c9580ea23\">\r\n","createdAt":"2023-12-17T12:58:53Z","labels":["type: bug"],"number":737,"repository":"sablier-labs/interfaces","state":"closed","title":"Fails to upload a csv file with large data","type":"issue","updatedAt":"2023-12-18T23:31:31Z","url":"https://github.com/sablier-labs/interfaces/issues/737"},{"author":"smol-ninja","body":"Issue 1\r\n------\r\nDo we allow sender to deposit more than necessary? When funding campaign initially, I tried to deposit more than necessary and it showed that excess is not allowed. But after I funded it 100%, it allows me to deposit more.\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/assets/6676622/c2e56179-adf2-47b0-8442-42d34509c3ee\r\n\r\nIssue 2\r\n-------\r\n\r\nTotal deposit: 345 DAI\r\nExpected deposit: 145 DAI\r\nIn excess: DAI 200 (0.01%)\r\n\r\nShould have been 137% = ${total deposit} / {expected deposit} - 1$\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-12-17 at 01 43 54\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/85b1b03a-d788-4e60-910a-06cfa6c1efa1\">\r\n\r\n","createdAt":"2023-12-17T01:44:15Z","labels":["type: bug"],"number":736,"repository":"sablier-labs/interfaces","state":"closed","title":"Bug in displaying percentage for excess deposit amount","type":"issue","updatedAt":"2023-12-19T22:06:27Z","url":"https://github.com/sablier-labs/interfaces/issues/736"},{"author":"smol-ninja","body":"Shouldn't we show deposit history as well?\r\n\r\n<img width=\"785\" alt=\"Screenshot 2023-12-17 at 01 38 26\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/04bec05b-b32b-4072-af3d-4492649cbccf\">\r\n<img width=\"832\" alt=\"Screenshot 2023-12-17 at 01 38 30\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/6676622/8b1fd83b-5cf8-4ad6-aee4-c64c7c9af27f\">\r\n","createdAt":"2023-12-17T01:39:21Z","labels":[],"number":735,"repository":"sablier-labs/interfaces","state":"closed","title":"Deposit history is missing in the history section","type":"issue","updatedAt":"2023-12-17T10:59:38Z","url":"https://github.com/sablier-labs/interfaces/issues/735"},{"author":"PaulRBerg","body":"I understand why this code exists but I find it verbose and difficult to maintain:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/b568517533c2f974f11d660bc7de01bb1284d8ea/.github/workflows/ci-client.yml#L35-L58\r\n\r\nSurely, there must be a way to abstract away that logic, e.g., by building a Sablier GitHub Action used internally by our front-end repositories.","createdAt":"2023-12-15T11:26:45Z","labels":["backlog","priority: 3"],"number":732,"repository":"sablier-labs/interfaces","state":"closed","title":"Simplify CI cache implementation without changing the logic","type":"issue","updatedAt":"2024-01-17T09:10:51Z","url":"https://github.com/sablier-labs/interfaces/issues/732"},{"author":"razgraf","body":"As suggested [here](https://github.com/sablier-labs/v2-interfaces/discussions/722#discussioncomment-7856578)  in #722, the top-level cards could become:\r\n\r\n1. Shape (still important and cool because of the graphical element)\r\n2. Contract balance(s) - we could consider showing both the available balance and the total aggregated balance\r\n3. (Optional) A special card for permanent airstream campaigns\r\n\r\nThe only issue with card number 2. is that the available balance will go down with each claim and the user might find it unclear to see one value that's huge (the aggregated amount, probably around millions) and an available balance (slowly going into the tens of thousands with time). Best case we'd have to add a tooltip/helper to explain what each one means and why the latter is changing rapidly.","createdAt":"2023-12-14T22:42:48Z","labels":[],"number":731,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve the top-level preview cards in the Airstream Profile","type":"issue","updatedAt":"2023-12-19T23:20:28Z","url":"https://github.com/sablier-labs/interfaces/issues/731"},{"author":"razgraf","body":"As discussed in #722, we should expand the label action to take effect on the entire component.\r\n\r\n<img width=\"913\" alt=\"Screenshot 2023-12-15 at 00 34 27\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/8957be53-81c8-43af-987e-4ff7035b49d2\">\r\n","createdAt":"2023-12-14T22:35:08Z","labels":[],"number":730,"repository":"sablier-labs/interfaces","state":"closed","title":"Expand label actions to entire component in the Airstream Profile","type":"issue","updatedAt":"2023-12-19T23:20:31Z","url":"https://github.com/sablier-labs/interfaces/issues/730"},{"author":"razgraf","body":"There might be a bug in the chain switch feature of the airstreams table, especially when the user is not connected to the app. ","createdAt":"2023-12-14T22:30:24Z","labels":["type: bug","priority: 1"],"number":729,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate stream search feature with regards to chain switching","type":"issue","updatedAt":"2023-12-19T23:26:00Z","url":"https://github.com/sablier-labs/interfaces/issues/729"},{"author":"PaulRBerg","body":"Happened after making a partial deposit in an airstream campaign:\r\n\r\n```text\r\ninstrument.js:111 TypeError: Cannot read properties of undefined (reading 'expectedAmount')\r\n    at logic.ts:69:38\r\n    at Object.aQ [as useMemo] (react-dom.production.min.js:179:117)\r\n    at n.useMemo (react.production.min.js:25:191)\r\n    at C (logic.ts:66:22)\r\n    at K (logic.ts:26:22)\r\n    at ab (react-dom.production.min.js:167:135)\r\n    at ud (react-dom.production.min.js:197:256)\r\n    at i (react-dom.production.min.js:292:18)\r\n    at oO (react-dom.production.min.js:280:383)\r\n    at react-dom.production.min.js:280:319\r\n    at oF (react-dom.production.min.js:280:319)\r\n    at ox (react-dom.production.min.js:271:86)\r\n    at oC (react-dom.production.min.js:273:286)\r\n    at r4 (react-dom.production.min.js:127:100)\r\n    at react-dom.production.min.js:267:262\r\n```\r\n\r\nAnd a screenshot:\r\n\r\n<img width=\"700\" alt=\"Screenshot 2023-12-14 at 8 58 49 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/8b735ba9-ab03-413f-990d-45b75ac7023d\">\r\n\r\nRelated: https://github.com/sablier-labs/v2-subgraphs/discussions/19","createdAt":"2023-12-14T19:00:16Z","labels":["type: bug","priority: 3"],"number":727,"repository":"sablier-labs/interfaces","state":"closed","title":"TypeError: Cannot read properties of undefined (reading 'expectedAmount')","type":"issue","updatedAt":"2023-12-19T23:19:34Z","url":"https://github.com/sablier-labs/interfaces/issues/727"},{"author":"PaulRBerg","body":"I claimed an airstream from a campaign with 2 total recipients, and I saw this:\r\n\r\n<img width=\"400\" alt=\"SCR-20231214-rxfc\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a875ebde-f025-47f6-a202-5a388bc593d4\">\r\n\r\nMy expectation was that the percentage would refer to the amounts claimed, not the amounts of recipients.\r\n\r\nLet's see why the amount is more relevant and it should take priority using some back-of-the-envelope calculations:\r\n\r\n- 99 recipients have 1 $WALNUT each\r\n- 1 recipient has 1 billion $WALNUT\r\n\r\nEverybody will care about whether that whale claims their 1 billion $WALNUT allocation. The other 99 shrimps are irrelevant metrics-wise.","createdAt":"2023-12-14T18:39:16Z","labels":["priority: 3"],"number":726,"repository":"sablier-labs/interfaces","state":"closed","title":"Claimed percentage based on amounts not on recipients","type":"issue","updatedAt":"2023-12-19T23:19:24Z","url":"https://github.com/sablier-labs/interfaces/issues/726"},{"author":"PaulRBerg","body":"Claiming an airstream is a fairly confusing experience at the moment. The UI makes the following assertions:\n\n| State | Assertion |\n|--------|--------|\n| Pending | Claim DAl 121.25 to 0xf94.7122 from campaign contract. |\n| Executed | Successfully claimed DAI 121.25 from the campaign contract to 0xf94957a1d7982fcf0f1dfff9ea56a11e918c7122 |\n\nThese are misleading because the 121.25 DAI have not been claimed - they have just started to be streamed. It is the *airstream* that has been claimed (i.e. the NFT), not the underlying tokens (the DAI).\n\nWhat we need to do:\n\n- [x] Revise the wording (I will take care of this)\n- [x] Link to the newly created stream\n- [ ] Ideally, inform the user about the vesting period (by adding a new variable here: [`airstreamEligibility`](https://github.com/sablier-labs/v2-interfaces/blob/b568517533c2f974f11d660bc7de01bb1284d8ea/packages/locales/src/en/common.json#L493))\n\n<img width=\"300\" alt=\"claim-tx-1\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5c8327a4-ac89-4bb9-97c4-238cd535789c\">\n<img width=\"300\" alt=\"claim-tx-2\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e377f26c-cea6-484b-86b8-7e00f064eec6\">\n","createdAt":"2023-12-14T18:27:04Z","labels":["priority: 2"],"number":725,"repository":"sablier-labs/interfaces","state":"closed","title":"Link to the (air)stream after it is claimed","type":"issue","updatedAt":"2023-12-20T11:36:50Z","url":"https://github.com/sablier-labs/interfaces/issues/725"},{"author":"PaulRBerg","body":"I have tried to claim an airstream from a campaign contract that did not have enough tokens deposited, and I got this error:\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-12-14 at 7 37 01 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/76f5b24d-fff4-4952-9a18-06eaef938de0\">\r\n\r\nSurely we can handle the error more gracefully than this? The modal should not appear if there are insufficient tokens deposited.","createdAt":"2023-12-14T17:41:12Z","labels":["priority: 3"],"number":723,"repository":"sablier-labs/interfaces","state":"closed","title":"Graceful handling of the case when the campaign doesn't have enough tokens","type":"issue","updatedAt":"2023-12-19T23:21:46Z","url":"https://github.com/sablier-labs/interfaces/issues/723"},{"author":"PaulRBerg","body":"The manager's address is not as important as how many tokens are currently deposited in the airstreams contract.\r\n\r\nThese properties should be swapped:\r\n\r\n<img width=\"820\" alt=\"SCR-20231214-rauh\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ce8950be-710f-4da4-a32c-b110acb277b8\">\r\n","createdAt":"2023-12-14T17:34:24Z","labels":["priority: 3"],"number":721,"repository":"sablier-labs/interfaces","state":"closed","title":"Swap the current balance and the manager in the airstreams dashboard","type":"issue","updatedAt":"2023-12-19T23:20:36Z","url":"https://github.com/sablier-labs/interfaces/issues/721"},{"author":"PaulRBerg","body":"I went through the normal airstream campaign wizard, deployed the contract, skipped funding, and then I saw this - notice that \"Streams\" is highlighted at the top, instead of \"Airstreams\":\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-12-14 at 6 04 07 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/9accb65a-aef6-49ca-99f3-d1d54a2f7b40\">\r\n","createdAt":"2023-12-14T16:05:23Z","labels":["type: bug","priority: 3"],"number":720,"repository":"sablier-labs/interfaces","state":"closed","title":"\"Streams\" tab highlighted after creating an airstreams campaign","type":"issue","updatedAt":"2023-12-19T23:20:43Z","url":"https://github.com/sablier-labs/interfaces/issues/720"},{"author":"PaulRBerg","body":"- [ ] Some words are capitalized, others are not\r\n    - Not sure if this is possible but it would be cool if the keys in the JSON could be capitalized; because if yes, we could remove all uses of `_.capitalize`, and choose the capitalized keys accordingly (e.g. `words.stream` vs` words.Stream`)\r\n- [ ] `modalCards`, `modalCovers`, and `modalLists` should be nested under a new object `modal`\r\n- [ ] i18next's [plurals](https://www.i18next.com/translation-function/plurals) feature is not used (e.g. `newStreamId` and `newStreamIds`)\r\n- [ ] The `structs` object has become polluted with non-structs (i.e. with sentences with a lot of words, such as `analyticsInform`)\r\n- [ ] There's no way to automatically detect which locales are unused\r\n\r\nHere:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/384fd4babacaa2e9f333ea147299a87152bb8fa4/packages/locales/src/en/common.json","createdAt":"2023-12-14T15:43:17Z","labels":["backlog","priority: 3","topic: seo"],"number":719,"repository":"sablier-labs/interfaces","state":"open","title":"Improve English locales","type":"issue","updatedAt":"2025-04-10T12:49:26Z","url":"https://github.com/sablier-labs/interfaces/issues/719"},{"author":"PaulRBerg","body":"- **Model**: it should say \"Distribution\" to mirror the label at the beginning of the campaign creation\r\n- **Cancelable**: it should say, \"Yes, each airstream will be cancelable\". There's the expiration thing and it is very confusing to have this wording for non-expirable campaigns.\r\n- **Transferable**: it should say, \"Yes, each airstream will be transferable\".\r\n- **For**: let's replace it with \"Vesting\". As explained in https://github.com/sablier-labs/v2-interfaces/issues/709, airstreams are particularly confusing with regard to time variables.\r\n\r\nHere:\r\n\r\n<img width=\"364\" alt=\"Screenshot 2023-12-14 at 5 29 36 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2a000717-5196-4005-901b-9acb674d68a5\">","createdAt":"2023-12-14T15:35:47Z","labels":["priority: 2"],"number":718,"repository":"sablier-labs/interfaces","state":"closed","title":"Confusing labels in summary configuration when creating airstreams","type":"issue","updatedAt":"2023-12-20T10:44:53Z","url":"https://github.com/sablier-labs/interfaces/issues/718"},{"author":"razgraf","body":"See #639 for context. The task is to implement search/filtering functionality for Airstreams, with the primary filters being:\r\n- chain\r\n- token\r\n- (maybe) sender address","createdAt":"2023-12-14T14:02:43Z","labels":[],"number":717,"repository":"sablier-labs/interfaces","state":"closed","title":"Add search functionality with token filtering for Airstreams","type":"issue","updatedAt":"2024-01-19T13:52:37Z","url":"https://github.com/sablier-labs/interfaces/issues/717"},{"author":"PaulRBerg","body":"Humans start counting from 1 (unfortunately):\r\n\r\n<img width=\"816\" alt=\"SCR-20231214-obfh\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a408a320-c967-4779-b468-85f77fbe5a68\">\r\n","createdAt":"2023-12-14T13:55:42Z","labels":["priority: 3"],"number":716,"repository":"sablier-labs/interfaces","state":"closed","title":"Start counting from 1 instead of 0","type":"issue","updatedAt":"2023-12-19T23:20:40Z","url":"https://github.com/sablier-labs/interfaces/issues/716"},{"author":"PaulRBerg","body":"The addresses parsed by the UI after the CSV file is uploaded are not checksummed:\r\n\r\n<img width=\"600\" alt=\"SCR-20231214-njpr\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4dccd88c-cb56-4bd2-bdd6-ef675a9fc9c8\">\r\n\r\nThe address in the red rectangle should be `0xF94957A1D7982fCF0F1Dfff9EA56a11E918c7122`.\r\n\r\nThis is an important feature because the copied addresses might have been maliciously manipulated (or an accidental human error might have been made).\r\n\r\nRelated:\r\n\r\n- [ethsum.netlify.app](https://ethsum.netlify.app)\r\n- https://twitter.com/PaulRBerg/status/1735258939648872472","createdAt":"2023-12-14T13:28:02Z","labels":["type: feature","priority: 1","resolution required"],"number":715,"repository":"sablier-labs/interfaces","state":"closed","title":"Checksum addresses in CSV parsing","type":"issue","updatedAt":"2024-01-18T09:32:32Z","url":"https://github.com/sablier-labs/interfaces/issues/715"},{"author":"razgraf","body":"See rationale in #708. \r\n\r\nWhile the visual changes will be changed in a commit to `experimental`, the in-code nomenclature should be refactored as well, later directly into `main`.\r\n\r\nTo be more specific the changes are most likely going to be:\r\n\r\n- \"cliff\" to \"cliff duration\"\r\n- \"cliff end date\" to \"cliff date\" ","createdAt":"2023-12-14T13:20:22Z","labels":["priority: 3"],"number":714,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor code references to \"cliff date\" and \"cliff duration\" to remove \"cliff end\"","type":"issue","updatedAt":"2023-12-19T23:33:01Z","url":"https://github.com/sablier-labs/interfaces/issues/714"},{"author":"PaulRBerg","body":"After uploading a CSV file and parsing the data, I noticed that the label at the top of the page reads \"100/2\".\r\n\r\nAs discussed on Slack, this is incorrect. @razgraf said that we should do something like this:\r\n\r\n```\r\nshown-results / Math.min(page, total-results)\r\n```\r\n\r\n<img width=\"500\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/8a4ce101-7e5a-4946-a98d-48355f001210\"/>\r\n","createdAt":"2023-12-14T13:18:44Z","labels":["type: bug","priority: 3"],"number":713,"repository":"sablier-labs/interfaces","state":"closed","title":"Smol bug in paginated loading in airstreams","type":"issue","updatedAt":"2023-12-19T23:20:53Z","url":"https://github.com/sablier-labs/interfaces/issues/713"},{"author":"PaulRBerg","body":"This informational card should not be displayed in the duration picker in the Airstreams form.\r\n\r\n- There is no date picker for Airstreams\r\n- It is not clear what the \"start\" is for airstreams (ref https://github.com/sablier-labs/v2-interfaces/issues/709)\r\n\r\n<img width=\"400\" alt=\"SCR-20231214-mvim\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/78f7bd05-d62e-420e-8964-1b3dce6394fc\">","createdAt":"2023-12-14T12:28:06Z","labels":["priority: 2"],"number":711,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove informational card about duration vs date in Airstreams duration picker","type":"issue","updatedAt":"2023-12-19T23:21:39Z","url":"https://github.com/sablier-labs/interfaces/issues/711"},{"author":"PaulRBerg","body":"Because airstream campaign creators will typically be organizations, we need to prioritize configurability over simplicity. Organizations will care a great deal about whether the recipients will be able to [dump the airstreams on OpenSea](https://twitter.com/PaulRBerg/status/1722358234206388682).\r\n\r\nThus, the \"Transferability\" flag should appear in the form instead of being tucked away in the \"Advanced\" modal:\r\n\r\n<img width=\"872\" alt=\"SCR-20231214-mlam\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/22c11001-ef1f-4a17-a4d3-f2bf37dfab65\">\r\n\r\nNote: for normal streams, is it still fine to have the flag be [hidden by default](https://github.com/sablier-labs/v2-interfaces/discussions/659).","createdAt":"2023-12-14T12:04:33Z","labels":["priority: 2"],"number":710,"repository":"sablier-labs/interfaces","state":"closed","title":"Display \"Transferability\" toggle in airstream campaign","type":"issue","updatedAt":"2023-12-19T23:21:58Z","url":"https://github.com/sablier-labs/interfaces/issues/710"},{"author":"PaulRBerg","body":"I find it very important to explain what \"Linear stream\" means in the context of Airstreams. A visual is not enough.\r\n\r\n<img width=\"500\" alt=\"Screenshot 2023-12-14 at 12 56 38 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/4c80ffb4-2beb-4dcb-9537-9195f6ab1eec\">\r\n\r\nIt is impossible to know if the linear streams start when the campaign is created, or when each user claims.\r\n\r\nThus, we should have an explainer below \"Distribution\" (or below the visuals) and say something like this:\r\n\r\n- Clarify that the streams start after each individual user claims\r\n- Explain the basics of the linear stream model (remember that most of the world doesn't know what money streaming is)","createdAt":"2023-12-14T11:00:05Z","labels":["priority: 1"],"number":709,"repository":"sablier-labs/interfaces","state":"closed","title":"Add explainers below the distribution models in the airstream campaign creator","type":"issue","updatedAt":"2023-12-22T14:34:22Z","url":"https://github.com/sablier-labs/interfaces/issues/709"},{"author":"maxdesalle","body":"It wasn't immediately obvious to me that the \"template\" button could be used to download the actual template, and it's not featured prominently enough, in my opinion, given its importance. The majority of users will have to download the template at least once, in order to understand how the formatting works.","createdAt":"2023-12-13T15:57:49Z","labels":[],"number":707,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature \"template\" more prominently in the Airstreams","type":"issue","updatedAt":"2023-12-19T23:19:49Z","url":"https://github.com/sablier-labs/interfaces/issues/707"},{"author":"PaulRBerg","body":"As argued [here](https://github.com/sablier-labs/private-discussions/discussions/4) and [here](https://github.com/sablier-labs/v2-interfaces/issues/675) and validated by Azam and [Holograph](https://sablier.slack.com/archives/C032HBFV4QJ/p1702417051462799), users want monthly releases, not exponential distributions (speaking of which - we need to do some user education on them!).\r\n\r\nGiven the above, it would be better to replace the \"Exponential\" Coming Soon curve with a simple \"Monthly\" curve:\r\n\r\n<img width=\"561\" alt=\"Screenshot 2023-12-13 at 4 39 04 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/875aadf2-fff1-43a0-a12f-d34b2d013d87\">\r\n","createdAt":"2023-12-13T14:41:24Z","labels":["priority: 3"],"number":706,"repository":"sablier-labs/interfaces","state":"closed","title":"[Airstreams] Replace \"Exponential\" curve with \"Monthly\"","type":"issue","updatedAt":"2023-12-19T23:25:57Z","url":"https://github.com/sablier-labs/interfaces/issues/706"},{"author":"razgraf","body":"The task is to implement the comments and context explained in [this thread](https://github.com/sablier-labs/v2-interfaces/pull/701#discussion_r1424600105), which follows the implementation for #699.","createdAt":"2023-12-12T21:41:41Z","labels":[],"number":704,"repository":"sablier-labs/interfaces","state":"closed","title":"Add context for blacklisted addresses","type":"issue","updatedAt":"2023-12-19T23:20:47Z","url":"https://github.com/sablier-labs/interfaces/issues/704"},{"author":"PaulRBerg","body":"Scenario:\r\n\r\n1. I am a recipient of a stream\r\n2. I am not sanctioned\r\n3. I go to the NFT transfer page\r\n4. I provide a sanctioned address as the new recipient\r\n\r\nThe UI should not allow NFT transfers to sanctioned addresses.","createdAt":"2023-12-12T18:31:58Z","labels":["priority: 1"],"number":703,"repository":"sablier-labs/interfaces","state":"closed","title":"Block NFT transfers to sanctioned addresses","type":"issue","updatedAt":"2023-12-12T19:43:23Z","url":"https://github.com/sablier-labs/interfaces/issues/703"},{"author":"PaulRBerg","body":"Scenario:\r\n\r\n1. I am a recipient of a stream\r\n2. I am not sanctioned\r\n3. I go to the withdraw form and use the `withdraw-to` functionality\r\n4. I provide a sanctioned address\r\n\r\nThe UI should not allow withdrawals to sanctioned addresses.","createdAt":"2023-12-12T18:31:14Z","labels":["priority: 1"],"number":702,"repository":"sablier-labs/interfaces","state":"closed","title":"Block withdrawals to sanctioned addresses","type":"issue","updatedAt":"2023-12-12T19:43:37Z","url":"https://github.com/sablier-labs/interfaces/issues/702"},{"author":"PaulRBerg","body":"The token contract has been added to the sanctions' list:\r\n\r\nhttps://sanctionssearch.ofac.treas.gov/Details.aspx?id=39796\r\n\r\nStreams created with $TORN should not be accessible in the Sablier UI.","createdAt":"2023-12-12T14:31:04Z","labels":["type: feature","priority: 1"],"number":699,"repository":"sablier-labs/interfaces","state":"closed","title":"Ban the $TORN token contract","type":"issue","updatedAt":"2023-12-12T21:40:53Z","url":"https://github.com/sablier-labs/interfaces/issues/699"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-interfaces/discussions/584 and evidenced by https://github.com/sablier-labs/v2-interfaces/issues/696, it would be a better UX to send a max approval (or at least a high amount like 1 trillion) instead of approving the amount input by the user, which is subject to rounding errors (and also subject to multiple approvals over time, which cost gas).\r\n\r\nSide note - I can't wait for our [Multiple Native Assets](https://github.com/sablier-labs/sabvm/issues/5) to become a thing.","createdAt":"2023-12-11T12:14:01Z","labels":["priority: 1"],"number":697,"repository":"sablier-labs/interfaces","state":"closed","title":"Approve a high amount instead of the deposit amount","type":"issue","updatedAt":"2023-12-11T12:26:38Z","url":"https://github.com/sablier-labs/interfaces/issues/697"},{"author":"PaulRBerg","body":"## Bug Description\r\n\r\n1. The user wrote \"5.428470485\" in the amount field\r\n2. The approval was _rounded down_ to 5.42847 (in the token's decimals)\r\n    - See this [transaction](https://bscscan.com/tx/0x7313269c9f8c284fa486d1fd40504d0f39d748f53731729b76db383d660a0f23) (click on \"Decode Input Data\")\r\n4. The user could not click on \"Create stream\" and clicking on \"Allow\" just sent perpetual approvals\r\n\r\n## Takeaways\r\n\r\nThis is solid empirical support in favor of sending a [max approval](https://github.com/sablier-labs/v2-interfaces/discussions/584) or at least a high amount (like 1 trillion).\r\n\r\nI will open a separate issue about this.\r\n\r\n## References\r\n\r\n- User wallet: https://bscscan.com/address/0x6017a150fcbf9e1d7439fdfeaa81f155d75c82ee\r\n- User proxy: https://bscscan.com/address/0x65E6cEB6997f8151EEab236b7D7D1A363CD97837\r\n- UNI contract: https://bscscan.com/address/0xbf5140a22578168fd562dccf235e5d43a02ce9b1#readProxyContract\r\n\r\n## Context\r\n\r\nSee the full conversation with this user on Crisp:\r\n\r\n[Crisp user transcript.pdf](https://github.com/sablier-labs/v2-interfaces/files/13635222/Crisp.user.transcript.pdf)","createdAt":"2023-12-11T12:11:29Z","labels":["type: bug","priority: 1"],"number":696,"repository":"sablier-labs/interfaces","state":"closed","title":"Allowance calculations round down when they should round up","type":"issue","updatedAt":"2023-12-16T17:55:56Z","url":"https://github.com/sablier-labs/interfaces/issues/696"},{"author":"PaulRBerg","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/693\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** December  9, 2023</sup>\r\nWhy does the streaming model appear in the table underneath the \"Value\" column and some other data like the token's name (not the symbol)?\r\n\r\nOr maybe we can scrape that header? I understand there are some design reasons.</div>","createdAt":"2023-12-11T09:59:02Z","labels":["priority: 3"],"number":695,"repository":"sablier-labs/interfaces","state":"closed","title":"Replace \"Lockup Linear\" with \"Token Name\" in the table","type":"issue","updatedAt":"2024-01-19T09:40:41Z","url":"https://github.com/sablier-labs/interfaces/issues/695"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-interfaces/discussions/688, the UI expects the user to have enough tokens in their wallet and for a recipient address to be specified before the \"Simulation\" button can be clicked.\r\n\r\nThe UI/UX would be much better if users could input only the time variables and get a simulation.","createdAt":"2023-12-09T21:28:36Z","labels":["priority: 2"],"number":692,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the Simulation button work without token amount and recipient address checks","type":"issue","updatedAt":"2024-01-19T13:52:37Z","url":"https://github.com/sablier-labs/interfaces/issues/692"},{"author":"PaulRBerg","body":"Ref:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/pull/606","createdAt":"2023-12-09T13:52:01Z","labels":["priority: 3"],"number":690,"repository":"sablier-labs/interfaces","state":"closed","title":"Change \"loading\" to \"pending\" in the UI, in the context of Transactions","type":"issue","updatedAt":"2024-01-19T09:40:43Z","url":"https://github.com/sablier-labs/interfaces/issues/690"},{"author":"razgraf","body":"Tasks for the launch of Airstreams \r\n\r\n- [x] update hosted-network `protocol` subgraphs from v2.0 to v2.1\r\n- [ ] update decentralized-network `protocol` subgraphs from v2.0 to v2.1 (mainnet, aribtrum, polygon)\r\n- [x] deploy suite of `merkle streamer` subgraphs on the hosted-network\r\n- [x] update list of deployment addresses \r\n- [x] perform soft tests on every network (proper ones on the cheap network)\r\n- [x] merge `experimental` in `main`\r\n- [x] add example airstream\r\n- [ ] restrict v2-interfaces [subgraph key](https://thegraph.com/studio/apikeys/v2-interfaces/) to only work on the sablier.com domain (login with ethereum multisig)\r\n   <img width=\"1391\" alt=\"Screenshot 2023-12-09 at 14 03 40\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/75966a44-1eb5-472d-a90d-5bb00ea09330\">\r\n- [x] #706\r\n- [x] #707\r\n- [x] quadruple check the address in both subgraph and app\r\n- [x] manually trigger deployment of landing website after merge","createdAt":"2023-12-08T16:05:31Z","labels":[],"number":685,"repository":"sablier-labs/interfaces","state":"closed","title":"Airstreams task board","type":"issue","updatedAt":"2024-01-08T13:27:48Z","url":"https://github.com/sablier-labs/interfaces/issues/685"},{"author":"PaulRBerg","body":"As explained in the [README](https://github.com/paulrberg/prb-math/tree/20d3a9c8278256c4ecdc8ac7918a38654b8c4ea3#helper-functions) of PRBMath, using helper functions like `uncheckedSub` is more gas expensive than using the vanilla operator `-`.\r\n\r\nWe should unwrap the values in the following cases and use `-` instead:\r\n\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Linear.sol#L121\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L198","createdAt":"2022-12-02T09:00:46Z","labels":[],"number":185,"repository":"sablier-labs/lockup","state":"closed","title":"Use vanilla operator \"-\" instead of \"uncheckedSub\"","type":"issue","updatedAt":"2022-12-06T12:10:20Z","url":"https://github.com/sablier-labs/lockup/issues/185"},{"author":"PaulRBerg","body":"#172 implemented e2e tests for the `create` function, which runs tests against a fork of Mainnet at a certain block number (16,126,000). Pinning to a block number means subsequent e2e test runs use cached RPC responses.\r\n\r\nThe trouble is that the cache works only locally, since we did not configure our CI to cache the RPC responses. But we can use GitHub's official [actions/cache](https://github.com/actions/cache) for this.\r\n\r\nThis is also a best practice [mentioned in the Foundry Book](https://book.getfoundry.sh/tutorials/best-practices?highlight=expectEmit#fork-tests):\r\n\r\n> Note that you may need to configure your CI to cache the RPC responses between runs)","createdAt":"2022-12-01T14:27:49Z","labels":[],"number":182,"repository":"sablier-labs/lockup","state":"closed","title":"Cache RPC responses in CI","type":"issue","updatedAt":"2022-12-16T13:22:44Z","url":"https://github.com/sablier-labs/lockup/issues/182"},{"author":"PaulRBerg","body":"As explained in this [post](https://stackoverflow.com/a/68423179/3873510) on StackOverflow, casting from `uint256` to `int256` throws an arithmetic Panic for values between `2^255` (which is `type(int256).max` and `2^256-1` (which is `type(uint256).max`).\r\n\r\nThere are quite a few places in `SablierV2Pro` where are not checking for this possible overflow\r\n\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L160\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L184\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L196\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L197\r\n- https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L198\r\n\r\nNote - there are other cases where we convert to `int256`, such as [this one](https://github.com/sablierhq/v2-core/blob/2241134dd49420d100b2251f9dd831e18e3b37ab/src/SablierV2Pro.sol#L160), but these are fine because casting a `uint40` to `int256` cannot overflow.\r\n\r\nWhile in practice this overflow should never occur (no tokens have supplies this large), we should consider this edge case, for precautionary reasons.\r\n\r\nThere are three ways to solve this:\r\n\r\n1. We just wait for @andreivladbrg to change type of the `depositAmount` and `segmentAmounts` to `uint128` (casting `uint128` to `int256` cannot overflow).\r\n2. We write a subroutine in `SablierV2` that perform the safe casting.\r\n3. We use OpenZeppelin's [`SafeCast`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4e8b2fa659ba87ab916beb3eb3c8335fb1238d9f/contracts/utils/math/SafeCast.sol) library.","createdAt":"2022-12-01T12:18:43Z","labels":[],"number":178,"repository":"sablier-labs/lockup","state":"closed","title":"Unsafe casting to \"int256\" in SablierV2Pro","type":"issue","updatedAt":"2022-12-06T08:37:38Z","url":"https://github.com/sablier-labs/lockup/issues/178"},{"author":"PaulRBerg","body":"Just like https://github.com/sablierhq/v2-core/issues/166 but for the cancel functionality.","createdAt":"2022-11-24T11:44:53Z","labels":[],"number":175,"repository":"sablier-labs/lockup","state":"closed","title":"Write end-to-end tests for the cancel functionality","type":"issue","updatedAt":"2023-01-31T15:50:18Z","url":"https://github.com/sablier-labs/lockup/issues/175"},{"author":"PaulRBerg","body":"Just like https://github.com/sablierhq/v2-core/issues/166 but for the withdraw functionality.","createdAt":"2022-11-24T11:43:42Z","labels":[],"number":174,"repository":"sablier-labs/lockup","state":"closed","title":"Write end-to-end tests for the withdrawal functionality","type":"issue","updatedAt":"2023-01-27T14:59:47Z","url":"https://github.com/sablier-labs/lockup/issues/174"},{"author":"PaulRBerg","body":"As per the discussions in https://github.com/sablierhq/v2-core/discussions/129, we should refactor the contracts to give free will to the recipient to burn the NFT whenever they want. That is, we should stop deleting the NFT in the `_cancel` and the `_withdraw` functions, and move the burn logic in a separate external function that can be called by the recipient if and when they so wish to burn the NFT (but only after the stream had been deleted from the `_streams` mapping).\r\n\r\nAs I see it, there are two benefits of doing this:\r\n\r\n1. It would enhance the DX of integrating Sablier, because integrators wouldn't have to handle the \"NFT burned\" case anymore.\r\n2. It would make it slightly easier to index historical streams (since there would remain an on-chain reference to the stream, via the NFT), and also a bit of historical value. Anyone wants to make a bet on the floor price of future famous Sablier V2 NFTs?","createdAt":"2022-11-17T09:33:58Z","labels":[],"number":169,"repository":"sablier-labs/lockup","state":"closed","title":"Give free will to the recipient to burn the NFT","type":"issue","updatedAt":"2022-12-17T11:46:19Z","url":"https://github.com/sablier-labs/lockup/issues/169"},{"author":"PaulRBerg","body":"See this [discussion](https://twitter.com/PaulRBerg/status/1543538470760726533) on Twitter.\r\n\r\nThe [Foundry config](https://github.com/foundry-rs/foundry/blob/master/config/README.md) for this is a boolean called `via_ir`, which by default is set to false.","createdAt":"2022-11-13T20:35:54Z","labels":[],"number":168,"repository":"sablier-labs/lockup","state":"closed","title":"Build with the \"--via-ir\" flag to enable powerful optimizations","type":"issue","updatedAt":"2023-01-04T15:39:25Z","url":"https://github.com/sablier-labs/lockup/issues/168"},{"author":"PaulRBerg","body":"The rationale for this has been fully outlined in this [tweet](https://twitter.com/PaulRBerg/status/1574071928544976896) and in discussion https://github.com/sablierhq/v2-core/discussions/151.\r\n\r\nThe idea is to start using explicit function arguments e.g. `foo({ x: x, y: y })` in certain cases where this would be beneficial and would not lead to repetitive code, such as when calling `_checkSegmentCounts`.","createdAt":"2022-11-13T19:52:50Z","labels":[],"number":167,"repository":"sablier-labs/lockup","state":"closed","title":"Use named arguments to provide maximum clarity","type":"issue","updatedAt":"2022-12-05T23:32:40Z","url":"https://github.com/sablier-labs/lockup/issues/167"},{"author":"PaulRBerg","body":"The tests should be simple.\r\n\r\n- No testing branches\r\n- Test only the successful function execution\r\n- Check that streams can be created with a diverse pool of tokens, e.g. DAI (18 decimals), USDC (6 decimals), BNB (no return value on `transfer`), some dog coin with a large supply, etc.\r\n- Ideally the inputs would be fuzzed\r\n\r\nTo implement this correctly we might have to move the current tests under a new directory called `integration`, and place the new tests under a directory called `e2e`.","createdAt":"2022-11-13T19:47:13Z","labels":[],"number":166,"repository":"sablier-labs/lockup","state":"closed","title":"Write e2e tests for the create stream functionality","type":"issue","updatedAt":"2022-11-24T11:43:19Z","url":"https://github.com/sablier-labs/lockup/issues/166"},{"author":"PaulRBerg","body":"See the [Foundry Book](https://book.getfoundry.sh/) and my [basis script](https://github.com/paulrberg/foundry-template/tree/main/script).","createdAt":"2022-11-13T19:44:55Z","labels":[],"number":165,"repository":"sablier-labs/lockup","state":"closed","title":"Write deployment scripts using Forge's Script contract","type":"issue","updatedAt":"2023-01-11T08:17:08Z","url":"https://github.com/sablier-labs/lockup/issues/165"},{"author":"PaulRBerg","body":"## Description\r\n\r\nThe rationale for this new feature has been outlined in https://github.com/sablierhq/v2-core/discussions/157.\r\n\r\n## Proposal\r\n\r\n### ISablierV2Sender\r\n\r\n```solidity\r\npragma solidity >=0.8.13;\r\n\r\ninterface ISablierV2Sender {\r\n    function onStreamCanceled(\r\n        uint256 streamId,\r\n        address caller,\r\n        uint128 withdrawAmount,\r\n        uint128 returnAmount\r\n    ) external;\r\n}\r\n```\r\n\r\n### ISablierV2Recipient\r\n\r\n```solidity\r\npragma solidity >=0.8.13;\r\n\r\ninterface ISablierV2Recipient {\r\n    function onStreamCanceled(\r\n        uint256 streamId,\r\n        address caller,\r\n        uint128 withdrawAmount,\r\n        uint128 returnAmount\r\n    ) external;\r\n\r\n    function onStreamWithdrawn(\r\n        uint256 streamId,\r\n        address caller,\r\n        uint128 withdrawAmount\r\n    ) external;\r\n}\r\n\r\n```\r\n\r\n### Implementation\r\n\r\nThe idea is to invoke the hooks at the end of the `cancel` and the `withdraw` functions, right before the event is emitted.\r\n\r\n**Important**: reverts are ignored. You can read more about how try/catch works in Solidity [here](https://ethereum.stackexchange.com/q/78562/24693) and [here](https://solidity-by-example.org/try-catch/).\r\n\r\n```solidity\r\n// Interactions: if the recipient is a contract, try to invoke the cancel hook on it, but ignore reverts.\r\nif (recipient.code.length) {\r\n    try\r\n        ISablierV2Recipient(recipient).onStreamCanceled(streamId, msg.sender, withdrawAmount, returnAmount)\r\n    {} catch {}\r\n}\r\n```\r\n\r\n```solidity\r\n// Interactions: if the recipient is a contract, try to invoke the withdraw hook on it, but ignore reverts.\r\nif (recipient.code.length > 0) {\r\n    try ISablierV2Recipient(recipient).onStreamWithdrawn(streamId, msg.sender, amount) {} catch {}\r\n}\r\n```\r\n\r\n## Reentrancy Warning\r\n\r\nWe should consider whether this feature will introduce any reentrancy risks. If it does, we should use something like OpenZeppelin's [`ReentrancyGuard`](https://docs.openzeppelin.com/contracts/4.x/api/security#ReentrancyGuard).\r\n\r\n## Ongoing Work\r\n\r\nI have started implementing this on the [`recipient-hooks`](https://github.com/sablierhq/v2-core/tree/recipient-hooks) branch, but I'm far from being done with it. @andreivladbrg feel free to pick up from where I left.","createdAt":"2022-11-13T19:35:00Z","labels":[],"number":164,"repository":"sablier-labs/lockup","state":"closed","title":"ISablierV2Recipient: sender and recipient hooks","type":"issue","updatedAt":"2022-12-14T13:50:38Z","url":"https://github.com/sablier-labs/lockup/issues/164"},{"author":"PaulRBerg","body":"By doing this we would save one storage slot (20k gas), though we will also add a little bit of overhead to convert the amounts back to `uint256` in `getWithdrawableAmount`.\r\n\r\n`uint128` should be more than enough for all tokens. @andreivladbrg looked at the top 1,000 tokens on CoinGecko, and found the token with the greatest supply to be [SHIRYO-INU](https://www.coingecko.com/en/coins/shiryo), which would still fit in `uint128`.","createdAt":"2022-11-13T17:07:10Z","labels":[],"number":163,"repository":"sablier-labs/lockup","state":"closed","title":"Switch to using \"uint128\" for the \"depositAmount\" and the \"withdrawnAmount\"","type":"issue","updatedAt":"2022-12-03T13:08:53Z","url":"https://github.com/sablier-labs/lockup/issues/163"},{"author":"PaulRBerg","body":"The current type (`uint60`) is bigger than it has to be for a time variable. As discussed on [StackExchange][1] and on [Twitter][2], `uint40` should be more than enough for all intents and purposes.\r\n\r\n[1]: https://ethereum.stackexchange.com/q/71366/24693\r\n[2]: https://twitter.com/PaulRBerg/status/1591832937179250693","createdAt":"2022-11-13T17:02:30Z","labels":[],"number":162,"repository":"sablier-labs/lockup","state":"closed","title":"Switch to using \"uint40\" for the time variables","type":"issue","updatedAt":"2022-12-03T13:08:59Z","url":"https://github.com/sablier-labs/lockup/issues/162"},{"author":"PaulRBerg","body":"The current approach is verbose and messy, e.g. in the `getWithdrawableAmount` function:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/04b776dba26b3448e8ca50d8743cccf05da91290/src/SablierV2Pro.sol#L176\r\n\r\nIt might be worth it to add a simple utility function that converts from `uint64` to `SD59x18`, and another one that converts from `uint256` to `SD59x18`.\r\n\r\nThese functions would ideally be placed in the `SablierV2` contract.","createdAt":"2022-11-13T11:48:29Z","labels":[],"number":161,"repository":"sablier-labs/lockup","state":"closed","title":"Add a helper function to convert from \"uint64\" to \"SD59x18\"","type":"issue","updatedAt":"2023-01-18T10:02:19Z","url":"https://github.com/sablier-labs/lockup/issues/161"},{"author":"PaulRBerg","body":"We should test that streams can be created towards smart contracts that do not implement the [IERC721Receiver][ierc721-receiver] interface. The only function that should be tested this way is `create`, not `create-with-duration`.\r\n\r\nMore context in https://github.com/sablierhq/v2-core/pull/143.\r\n\r\n[ierc721-receiver]: https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721Receiver","createdAt":"2022-10-24T18:33:28Z","labels":[],"number":144,"repository":"sablier-labs/lockup","state":"closed","title":"Add a test for when the recipient is a smart contract is not compliant with IERC721Receiver","type":"issue","updatedAt":"2022-12-14T13:55:11Z","url":"https://github.com/sablier-labs/lockup/issues/144"},{"author":"PaulRBerg","body":"The `recipient` argument currently used is a misnomer, since withdrawals need not be made to the recipient address:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/3d8e1534848288d07c2b35aa31d68c457cb69476/src/interfaces/ISablierV2.sol#L75","createdAt":"2022-10-23T19:47:47Z","labels":[],"number":142,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor the Withdraw event to to include a \"to\" argument instead of \"recipient\"","type":"issue","updatedAt":"2022-12-22T09:10:14Z","url":"https://github.com/sablier-labs/lockup/issues/142"},{"author":"PaulRBerg","body":"Maintaining the [`AbstractSablierV2`][1] contract is a chore. For instance, during my review of #131, I ended up having to inherit from all the ERC-721 methods in this abstract contract just to make the compiler not throw errors.\r\n\r\nThere should be a smarter way to achieve the same goal without maintaining this contract - maybe there is some Solidity feature that we don't know about, or some Foundry plugin.\r\n\r\n[1]: https://github.com/sablierhq/v2-core/blob/3d8e1534848288d07c2b35aa31d68c457cb69476/test/unit/abstract-sablier-v2/AbstractSablierV2UnitTest.t.sol","createdAt":"2022-10-22T13:43:27Z","labels":[],"number":139,"repository":"sablier-labs/lockup","state":"closed","title":"Figure out a way to get rid of the \"AbstractSablierV2\" testing contract","type":"issue","updatedAt":"2022-12-06T10:23:12Z","url":"https://github.com/sablier-labs/lockup/issues/139"},{"author":"andreivladbrg","body":"Given that we check if the deposit amount is equal to the segment amounts sum (Invariant: `segmentAmountsSum = depositAmount`)\r\nhttps://github.com/sablierhq/v2-core/blob/3d8e1534848288d07c2b35aa31d68c457cb69476/src/SablierV2Pro.sol#L365-L369\r\n\r\nIt turns out that storing the `depositAmount` variable in the struct is unnecessary, fact which increases the gas cost for both `create` and `withdraw` functions in the `SablierV2Pro` contract. \r\n\r\nWould be better to use a `for` loop in the `getDepositAmount` function to calculate the deposited amount from the `segmentAmounts` array.\r\nhttps://github.com/sablierhq/v2-core/blob/8c1791feca7b51da05f590ef21f1eab5c46540bd/src/SablierV2Pro.sol#L54-L63\r\n\r\nI solved this issue in this commit: [8c1791f](https://github.com/sablierhq/v2-core/commit/8c1791feca7b51da05f590ef21f1eab5c46540bd)\r\n\r\n<details>\r\n  <summary>Gas benefits</summary>\r\n\r\n### Before\r\nFrom this commit: [c0d667d](https://github.com/sablierhq/v2-core/commit/c0d667d9d263dacc5905c51fcdf1fcd2c3d53976)\r\n<img width=\"1026\" alt=\"Screen Shot 2022-10-22 at 12 48 03\" src=\"https://user-images.githubusercontent.com/99738872/197332898-28fae3c8-278f-40b3-94b5-344959e2e29d.png\">\r\n\r\n### After\r\nFrom this commit: 8c1791f\r\n<img width=\"1017\" alt=\"Screen Shot 2022-10-22 at 12 46 41\" src=\"https://user-images.githubusercontent.com/99738872/197332848-208291b0-dcb0-492f-9de1-9a34bf257f0a.png\">\r\n\r\n</details>\r\n","createdAt":"2022-10-22T09:51:22Z","labels":[],"number":137,"repository":"sablier-labs/lockup","state":"closed","title":"Remove the `depositAmount` variable from the Pro Stream struct","type":"issue","updatedAt":"2022-12-05T11:13:58Z","url":"https://github.com/sablier-labs/lockup/issues/137"},{"author":"andreivladbrg","body":"Given that we check this in the `_create` function from the `SablierV2Linear` contract: https://github.com/sablierhq/v2-core/blob/490f601b5a01f64ea12c047284eae7fab12e2ac0/src/SablierV2Linear.sol#L215-L223\r\nand in the `_checkSegments` function from the `SablierV2Pro` contract: \r\nhttps://github.com/sablierhq/v2-core/blob/490f601b5a01f64ea12c047284eae7fab12e2ac0/src/SablierV2Pro.sol#L327-L330\r\nhttps://github.com/sablierhq/v2-core/blob/490f601b5a01f64ea12c047284eae7fab12e2ac0/src/SablierV2Pro.sol#L344-L348\r\n\r\nIn the `_checkCreateArguments` function from the `SablierV2` contract we have this unnecessary check: https://github.com/sablierhq/v2-core/blob/490f601b5a01f64ea12c047284eae7fab12e2ac0/src/SablierV2.sol#L241-L244\r\n\r\n\r\nIf the checks from the `SablierV2Linear` and `SablierV2Pro` contracts pass `startTime < stopTime` will be implicitly true.","createdAt":"2022-09-24T10:59:22Z","labels":[],"number":135,"repository":"sablier-labs/lockup","state":"closed","title":"Remove unnecessary check in the create function","type":"issue","updatedAt":"2022-11-14T14:45:37Z","url":"https://github.com/sablier-labs/lockup/issues/135"},{"author":"PaulRBerg","body":"The tests aren't actually unit tests as I have defined them [here](https://twitter.com/PaulRBerg/status/1347884079421812737).","createdAt":"2022-08-11T16:18:22Z","labels":[],"number":128,"repository":"sablier-labs/lockup","state":"closed","title":"Delete the \"unit\" directory in the \"test\" directory","type":"issue","updatedAt":"2022-10-30T15:00:50Z","url":"https://github.com/sablier-labs/lockup/issues/128"},{"author":"PaulRBerg","body":"See my [foundry-template][1] to see how to use PRBTest alongside Forge Std's cheatcodes.\r\n\r\n[1]: https://github.com/paulrberg/foundry-template/blob/3abaf8aa40af2a3a8b5a14d202a03d8292ad4ad3/test/Foo.t.sol","createdAt":"2022-08-08T09:44:18Z","labels":[],"number":125,"repository":"sablier-labs/lockup","state":"closed","title":"Switch from Forge Std to PRBTest","type":"issue","updatedAt":"2022-10-29T13:50:42Z","url":"https://github.com/sablier-labs/lockup/issues/125"},{"author":"andreivladbrg","body":"In the `cancel` function there is a check which does the same thing as the `streamExists` modifier https://github.com/sablierhq/v2-core/blob/e229a4c07b2dec541fbb09eef581dfcf88254bf7/src/SablierV2.sol#L66-L69\r\n\r\nWe should use the `streamExists` modifier in order to make the code cleaner.","createdAt":"2022-07-26T15:25:13Z","labels":[],"number":118,"repository":"sablier-labs/lockup","state":"closed","title":"Use modifier for the \"cancel\" function ","type":"issue","updatedAt":"2022-07-27T10:48:23Z","url":"https://github.com/sablier-labs/lockup/issues/118"},{"author":"PaulRBerg","body":"Our currents tests don't currently cover the `_cancel` and `_withdraw` functions in `SablierV2Pro`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/c04f0ffb71678e1c82a5cb6515fa54d68dc9e994/src/SablierV2Pro.sol#L381-L392\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/c04f0ffb71678e1c82a5cb6515fa54d68dc9e994/src/SablierV2Pro.sol#L483-L497","createdAt":"2022-07-26T08:54:22Z","labels":[],"number":117,"repository":"sablier-labs/lockup","state":"closed","title":"Cover the \"_cancel\" and \"_withdraw\" internal functions of \"SablierV2Pro\"","type":"issue","updatedAt":"2023-01-05T13:28:08Z","url":"https://github.com/sablier-labs/lockup/issues/117"},{"author":"PaulRBerg","body":"[`external` functions are slightly cheaper than `public` functions](https://ethereum.stackexchange.com/questions/19380/external-vs-public-best-practices).\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/0ee0281d327dea339392748d63b9672baf280d49/src/SablierV2Linear.sol#L47-L58","createdAt":"2022-07-25T08:44:53Z","labels":[],"number":114,"repository":"sablier-labs/lockup","state":"closed","title":"Mark \"getReturnableAmount\" function as \"external\" in \"SablierV2Pro\"","type":"issue","updatedAt":"2022-07-27T10:49:12Z","url":"https://github.com/sablier-labs/lockup/issues/114"},{"author":"andreivladbrg","body":"As explained here https://github.com/sablierhq/v2-core/issues/109 same issue for the `getReturnableAmount` and `getWithdrawableAmount` functions.\r\n\r\n## With the load in memory\r\n<img width=\"861\" alt=\"Screen Shot 2022-07-23 at 13 20 43\" src=\"https://user-images.githubusercontent.com/99738872/180601458-a6227936-ff70-4ae5-9a3f-3cf1b5677d3a.png\">\r\n\r\n## Without the load in memory\r\n<img width=\"857\" alt=\"Screen Shot 2022-07-23 at 13 21 04\" src=\"https://user-images.githubusercontent.com/99738872/180601464-908d3fad-aa33-4484-9308-c61982c4b1e5.png\">\r\n","createdAt":"2022-07-23T10:33:21Z","labels":[],"number":111,"repository":"sablier-labs/lockup","state":"closed","title":"Optimize \"getReturnableAmount\" and \"getWithdrawableAmount\" functions","type":"issue","updatedAt":"2022-07-25T10:09:51Z","url":"https://github.com/sablier-labs/lockup/issues/111"},{"author":"andreivladbrg","body":"In the actual implementation of the `renounce` function there is a load in memory which is unnecessary and increases the gas cost \r\nhttps://github.com/sablierhq/v2-core/blob/6a882409f36b65384726c752c1bd21bb68661c69/src/SablierV2Linear.sol#L170\r\n\r\nI've tested what are the differences without loading the stream in memory and there is a major decrease of gas https://github.com/sablierhq/v2-core/commit/f9d88f688dacb29ecaeae2ad6879174824de15d8\r\n\r\n## With the load in memory\r\n<img width=\"861\" alt=\"Screen Shot 2022-07-22 at 16 51 58\" src=\"https://user-images.githubusercontent.com/99738872/180457368-06da31d2-4af0-4335-beae-b39626ffb804.png\">\r\n\r\n## Without the load in memory\r\n<img width=\"851\" alt=\"Screen Shot 2022-07-22 at 17 12 33\" src=\"https://user-images.githubusercontent.com/99738872/180457693-a898023f-561f-450a-a55e-4856ec29d6b0.png\">\r\n\r\n","createdAt":"2022-07-22T14:21:18Z","labels":[],"number":109,"repository":"sablier-labs/lockup","state":"closed","title":"Optimize the \"renounce\" function","type":"issue","updatedAt":"2022-07-25T10:09:57Z","url":"https://github.com/sablier-labs/lockup/issues/109"},{"author":"PaulRBerg","body":"There should be an additional branch in the `create` test tree:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/f947012e6ace17bfe306df498d77eee98297b854/test/unit/sablier-v2-linear/create/create.tree#L28\r\n\r\nMaybe @andreivladbrg you can now see the benefit of mirroring the testing branches in the test files - you yourself corrected this error by adding a `TokenContract` modifier in this commit:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/65516d951aaf3f12b59ff50765b433535b59d460/test/unit/sablier-v2-linear/create/create.t.sol#L252-L254","createdAt":"2022-07-19T12:47:36Z","labels":[],"number":103,"repository":"sablier-labs/lockup","state":"closed","title":"\"when the token is a contract\" branch missing in \"create\" tests","type":"issue","updatedAt":"2022-07-22T15:55:14Z","url":"https://github.com/sablier-labs/lockup/issues/103"},{"author":"PaulRBerg","body":"","createdAt":"2022-07-19T11:03:30Z","labels":[],"number":102,"repository":"sablier-labs/lockup","state":"closed","title":"Test \"getCliffTime\" in \"SablierV2Pro\"","type":"issue","updatedAt":"2022-07-19T11:23:47Z","url":"https://github.com/sablier-labs/lockup/issues/102"},{"author":"PaulRBerg","body":"","createdAt":"2022-07-19T11:02:20Z","labels":[],"number":101,"repository":"sablier-labs/lockup","state":"closed","title":"Test \"renounce\" in \"SablierV2Pro\"","type":"issue","updatedAt":"2022-07-25T09:43:37Z","url":"https://github.com/sablier-labs/lockup/issues/101"},{"author":"PaulRBerg","body":"## Description\r\n\r\nImplements what has been discussed in https://github.com/sablierhq/v2-core/discussions/96. In short: remove the check here:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/5f13c560f6a3c99a10899ffc95907a8bc7414d84/src/SablierV2Pro.sol#L238-L241\r\n\r\nBecause the `checkSegmentCounts` function will automatically check the count of the segments is less than `MAX_SEGMENT_COUNT`.\r\n\r\n## What to Beware\r\n\r\nThe [createWithDuration.tree](https://github.com/sablierhq/v2-core/blob/f947012e6ace17bfe306df498d77eee98297b854/test/unit/sablier-v2-pro/create/createWithDuration.tree) tree (and consequently the tests too) will have to be refactored to account for two new testing branches:\r\n\r\n1. The case when the block gas limit is overflown in the [for loop](https://github.com/sablierhq/v2-core/blob/f947012e6ace17bfe306df498d77eee98297b854/src/SablierV2Pro.sol#L248). This is the only scenario in the protocol where the block gas limit can be reached, but it's only when the user passes too many segment deltas that this can happen.\r\n~~2. The case when the count of `segmentMilestones` is greater than `MAX_SEGMENT_COUNT`.~~","createdAt":"2022-07-18T17:39:04Z","labels":[],"number":99,"repository":"sablier-labs/lockup","state":"closed","title":"Remove the `deltaCount` check","type":"issue","updatedAt":"2022-11-01T14:49:45Z","url":"https://github.com/sablier-labs/lockup/issues/99"},{"author":"PaulRBerg","body":"We should discard our own constant [MAX_UINT_256](https://github.com/sablierhq/v2-core/blob/076de1345e57b2a2cdbefc821e1abab7a71f8384/test/unit/SablierV2UnitTest.t.sol#L28) and instead use `forge-std`'s [UINT256_MAX](https://github.com/foundry-rs/forge-std/blob/98256095f37d83653ba1617d06ccd9604cbd7c6d/src/Test.sol#L11).","createdAt":"2022-07-01T14:56:05Z","labels":[],"number":92,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"UINT256_MAX\" constant from \"forge-std\"","type":"issue","updatedAt":"2022-07-04T14:46:54Z","url":"https://github.com/sablier-labs/lockup/issues/92"},{"author":"PaulRBerg","body":"","createdAt":"2022-06-24T12:01:26Z","labels":[],"number":89,"repository":"sablier-labs/lockup","state":"closed","title":"Test \"getReturnableAmount\" in \"SablierV2Pro\"","type":"issue","updatedAt":"2022-07-25T09:43:42Z","url":"https://github.com/sablier-labs/lockup/issues/89"},{"author":"PaulRBerg","body":"As per the rough consensus we have reached in #34, we should merge the `SablierV2Linear` and `SablierV2Cliff` contracts.","createdAt":"2022-06-22T11:39:33Z","labels":[],"number":86,"repository":"sablier-labs/lockup","state":"closed","title":"Merge \"SablierV2Linear\" and \"SablierV2Cliff\"","type":"issue","updatedAt":"2022-06-26T10:23:40Z","url":"https://github.com/sablier-labs/lockup/issues/86"},{"author":"andreivladbrg","body":"The way how the `cancelAll` function it is now implemented does not respect what we decided, to make `cancelAll` to never revert.\r\n\r\nTo be more specific, because of the modifier in the `cancelInternal` functions, `cancelAll` will revert when the caller is neither the sender nor the recipient of some of the streams.\r\nhttps://github.com/sablierhq/v2-core/blob/0792bd8142f54dc07b632a7e6d54508f5fa9c851/src/SablierV2Linear.sol#L330\r\n\r\nI've created a branch for how it should be implemented 6d55aaa1245d4c0fce6313268a712ca3fd054ce1.","createdAt":"2022-06-22T11:04:01Z","labels":[],"number":84,"repository":"sablier-labs/lockup","state":"closed","title":"Remove modifier from \"cancelInternal\" functions","type":"issue","updatedAt":"2022-06-22T11:28:28Z","url":"https://github.com/sablier-labs/lockup/issues/84"},{"author":"PaulRBerg","body":"As we have reached a rough consensus in #34, we should implement getters for the pro segments.","createdAt":"2022-06-21T15:47:55Z","labels":[],"number":80,"repository":"sablier-labs/lockup","state":"closed","title":"Implement getters for pro segments","type":"issue","updatedAt":"2022-06-26T10:21:26Z","url":"https://github.com/sablier-labs/lockup/issues/80"},{"author":"PaulRBerg","body":"For this testing tree:\r\n\r\n```tree\r\ngetSender.t.sol\r\n├── when the stream does not exist\r\n│  └── it should return zero\r\n└── when the stream exists\r\n   └── it should return the correct sender\r\n```\r\n\r\nGenerate a test contract that uses modifiers to structure the tests:\r\n\r\n```solidity\r\ncontract SablierV2Linear__GetSender is SablierV2LinearUnitTest {\r\n    /// @dev it should return zero.\r\n    function testGetSender__StreamNonExistent() external {\r\n        // ...\r\n    }\r\n\r\n    modifier StreamExistent() {\r\n        _;\r\n    }\r\n\r\n    /// @dev it should return the correct sender.\r\n    function testGetSender() external StreamExistent {\r\n        // ...\r\n    }\r\n}\r\n```","createdAt":"2022-06-21T15:11:33Z","labels":[],"number":77,"repository":"sablier-labs/lockup","state":"closed","title":"Modifiers for each testing branch","type":"issue","updatedAt":"2022-07-19T13:14:51Z","url":"https://github.com/sablier-labs/lockup/issues/77"},{"author":"PaulRBerg","body":"Our tests don't currently cover the case when the ERC-20 token used for streaming doesn't have 18 decimals.\r\n\r\nIrrespective of the decision we end up making with respect to https://github.com/sablierhq/v2-core/issues/11, we should write mirror tests that use a token with variable numbers of decimals.","createdAt":"2022-06-21T10:26:18Z","labels":[],"number":76,"repository":"sablier-labs/lockup","state":"closed","title":"Test the case when the token doesn't have 18 decimals","type":"issue","updatedAt":"2022-06-26T10:09:37Z","url":"https://github.com/sablier-labs/lockup/issues/76"},{"author":"PaulRBerg","body":"We need a non-cancelable stream in quite a few places:\r\n\r\n- [cancel.t.sol](https://github.com/sablierhq/v2-core/blob/1cca3e2fc5d33f10017a29847cedd7fdd0e814a1/test/unit/sablier-v2-linear/cancel/cancel.t.sol#L50-L58)\r\n- [cancelAll.t.sol](https://github.com/sablierhq/v2-core/blob/1cca3e2fc5d33f10017a29847cedd7fdd0e814a1/test/unit/sablier-v2-linear/cancel-all/cancelAll.t.sol#L86-L94)\r\n- [renounce.t.sol](https://github.com/sablierhq/v2-core/blob/1cca3e2fc5d33f10017a29847cedd7fdd0e814a1/test/unit/sablier-v2-linear/renounce/renounce.t.sol#L41-L49)","createdAt":"2022-06-18T10:39:55Z","labels":[],"number":72,"repository":"sablier-labs/lockup","state":"closed","title":"Create a testing helper function for creating a default non-cancelable stream","type":"issue","updatedAt":"2022-06-19T12:41:59Z","url":"https://github.com/sablier-labs/lockup/issues/72"},{"author":"PaulRBerg","body":"If the caller is not the recipient of any stream, the transaction should revert.\r\n\r\nBut if the caller is the recipient of all existing streams, the transaction should NOT revert if *some* of the streams do not exist.\r\n\r\nThis is not the current behavior of `withdrawAllTo`.","createdAt":"2022-06-17T12:01:41Z","labels":[],"number":70,"repository":"sablier-labs/lockup","state":"closed","title":"Make \"withdrawAllTo\" not revert when some of the streams don't exist","type":"issue","updatedAt":"2022-06-19T12:01:09Z","url":"https://github.com/sablier-labs/lockup/issues/70"},{"author":"PaulRBerg","body":"If the caller is neither the sender nor the recipient of any stream, the transaction should revert.\r\n\r\nBut if the caller is either the sender or the recipient of all existing streams, the transaction should NOT revert if *some* of the streams do not exist.\r\n\r\nThis is not the current behavior of `withdrawAll`.","createdAt":"2022-06-17T11:59:57Z","labels":[],"number":69,"repository":"sablier-labs/lockup","state":"closed","title":"Make \"withdrawAll\" not revert when some of the streams don't exist","type":"issue","updatedAt":"2022-06-19T12:01:06Z","url":"https://github.com/sablier-labs/lockup/issues/69"},{"author":"PaulRBerg","body":"## Description\r\n\r\n@razgraf shared a very good suggestion in https://github.com/sablierhq/v2-core/discussions/51#discussioncomment-2963137 to merge the `create` and `createFrom` functions.\r\n\r\nI pondered it for a few days, and I think that it would totally be worth it. Benefits:\r\n\r\n1. Easier for users to integrate Sablier, there's only two `create` variant to keep in mind, compared to four.\r\n2. Two fewer functions to maintain per contract.\r\n3. Two fewer test sets to maintain per contract.\r\n\r\nThe only disadvantage is the slightly higher gas cost to call the `create` function when `from` matches the `msg.sender`. But the overhead should be negligible.\r\n\r\n## Implementation\r\n\r\nOnly have one `create` function with all the arguments from the current `createFrom`, but check whether `from` matches `msg.sender`. If it does match, do not use the authorization system. Otherwise, use it.","createdAt":"2022-06-17T08:36:56Z","labels":[],"number":67,"repository":"sablier-labs/lockup","state":"closed","title":"Merge the \"create\" and \"createFrom\" functions","type":"issue","updatedAt":"2022-06-22T10:14:41Z","url":"https://github.com/sablier-labs/lockup/issues/67"},{"author":"PaulRBerg","body":"They are failing after I have accidentally merged https://github.com/sablierhq/v2-core/pull/60 without uncommenting two lines in the `assertEq` function:\r\n\r\n<img width=\"1728\" alt=\"Screen Shot 2022-06-16 at 9 37 41 PM\" src=\"https://user-images.githubusercontent.com/8782666/174142089-1c771e69-f271-4974-a300-c9d83d093496.png\">\r\n\r\n","createdAt":"2022-06-16T18:39:03Z","labels":[],"number":66,"repository":"sablier-labs/lockup","state":"closed","title":"Fix \"createWithDuration\" tests","type":"issue","updatedAt":"2022-06-17T10:50:59Z","url":"https://github.com/sablier-labs/lockup/issues/66"},{"author":"PaulRBerg","body":"As per the discussion in https://github.com/sablierhq/v2-core/discussions/50, it doesn't really make sense to revert when the provided array is empty in the `cancelAll`, `withdrawAll` and `withdrawAllTo` functions.\r\n\r\nThe function would simply do nothing. Which it neither bad nor good. It's just does nothing.","createdAt":"2022-06-16T13:39:55Z","labels":[],"number":63,"repository":"sablier-labs/lockup","state":"closed","title":"Do not revert when the array is empty in \"cancelAll\", \"withdrawAll\" and \"withdrawAllTo\"","type":"issue","updatedAt":"2022-06-19T12:00:53Z","url":"https://github.com/sablier-labs/lockup/issues/63"},{"author":"PaulRBerg","body":"This would in effect mean that the `msg.senders` \"donates\" the stream to the `sender`.","createdAt":"2022-06-15T15:36:51Z","labels":[],"number":56,"repository":"sablier-labs/lockup","state":"closed","title":"Add a test for the case when the \"sender\" differs from the \"msg.sender\" in the tests for the \"create\" function","type":"issue","updatedAt":"2022-06-26T10:17:32Z","url":"https://github.com/sablier-labs/lockup/issues/56"},{"author":"PaulRBerg","body":"The tests should include a branch in which the Sender has given authorization to Eve to create streams on their behalf for token A, but Eve attempts (unsuccessfully) to create a stream with token B.","createdAt":"2022-06-14T11:08:20Z","labels":[],"number":49,"repository":"sablier-labs/lockup","state":"closed","title":"Test the \"createFrom\" and \"createFromWithDuration\" functions","type":"issue","updatedAt":"2022-06-21T15:40:53Z","url":"https://github.com/sablier-labs/lockup/issues/49"},{"author":"PaulRBerg","body":"See https://github.com/foundry-rs/forge-std/pull/85.","createdAt":"2022-06-13T16:11:31Z","labels":[],"number":46,"repository":"sablier-labs/lockup","state":"closed","title":"Ditch local array \"assertEq\" and use forge-std's functions","type":"issue","updatedAt":"2022-06-16T08:23:54Z","url":"https://github.com/sablier-labs/lockup/issues/46"},{"author":"PaulRBerg","body":"Not all test descriptors use the modal verb \"should\":\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/5331ac43f6dcae9bc4ba1b795b89d0153ac2d7da/test/unit/sablier-v2-linear/cancel/cancel.tree#L14-L16","createdAt":"2022-06-13T14:28:55Z","labels":[],"number":45,"repository":"sablier-labs/lockup","state":"closed","title":"Use the modal verb \"should\" for every test descriptor","type":"issue","updatedAt":"2022-06-16T08:23:54Z","url":"https://github.com/sablier-labs/lockup/issues/45"},{"author":"PaulRBerg","body":"## Description\r\n\r\nIf the caller is neither the sender nor the recipient of any stream, the transaction should revert.\r\n\r\nBut if the caller is either the sender or the recipient of all streams, the transaction should NOT revert if *some* of the streams either do not exist or are already canceled.\r\n\r\nThis is not the current behavior of `cancelAll`.\r\n\r\n## Possible Implementations\r\n\r\n1. Use the [try/ catch control structure](https://docs.soliditylang.org/en/v0.6.0/control-structures.html#try-catch)\r\n2. Use if statements","createdAt":"2022-06-13T14:14:32Z","labels":[],"number":44,"repository":"sablier-labs/lockup","state":"closed","title":"Make \"cancelAll\" not revert when some of the streams either do not exist or are already canceled","type":"issue","updatedAt":"2022-06-19T12:01:18Z","url":"https://github.com/sablier-labs/lockup/issues/44"},{"author":"razgraf","body":"The task is to add a `rate per period` data point in the stream's details cover. See [this comment](https://github.com/sablier-labs/v2-interfaces/discussions/681#discussioncomment-7799942) for a suggested implementation.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/681\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **IaroslavMazur** December  8, 2023</sup>\r\nHow about adding the information about the \"streaming rate\" of the Stream somewhere (ideally, close to the \"Expected Payout\") on the Stream page in the Sablier UI?\r\n\r\nI was looking at [Stream #LL-1-273](https://app.sablier.com/stream/LL-1-273/), and one of the first questions I've got interested in regarding the Stream is how much the recipient is getting, say, per hour or day. However, I couldn't find this information directly available anywhere.\r\n\r\nWhile this can, of course, be calculated manually, I believe adding the \"streaming rate\" to the information presented about the Stream will enhance the UX, and make the Stream feel \"closer\"/more \"natural\" to the user (just like it's easier to grasp that someone is over-eating if they tell you directly that they're consuming 3.5kg worth of food a day vs 105kg per month).\r\n\r\nP.S. The example above isn't a sign that I'm hungry - it's just the first thing that came to my mind after the obvious \"how much you're making per year/month/day\" 😅 \r\n\r\n@sablier-labs/everybody, thoughts?</div>","createdAt":"2023-12-08T13:45:25Z","labels":["priority: 3"],"number":684,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"streaming rate\" to the Stream presentation page?","type":"issue","updatedAt":"2024-01-19T09:40:41Z","url":"https://github.com/sablier-labs/interfaces/issues/684"},{"author":"PaulRBerg","body":"A potential bug reported by Denham from Envio on Discord:\r\n\r\n> sometimes on polygon when I successfully create a linear stream on polygon the ui shows an error\r\n\r\nHere's the tx associated with the error:\r\n\r\nhttps://polygonscan.com/tx/0x12e5e3197bb842c03a27542cc1218acd91b60d393d7d3d7586827e167e4697d3\r\n\r\nAnd here's the error report:\r\n\r\n<img width=\"933\" alt=\"Screenshot 2023-12-08 at 11 41 08 AM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/7eabd109-c4cb-41de-864e-581a1006dd45\">\r\n","createdAt":"2023-12-08T09:43:31Z","labels":["type: bug","priority: 1"],"number":682,"repository":"sablier-labs/interfaces","state":"closed","title":"BlockNotFoundError: Block at number could not be found","type":"issue","updatedAt":"2023-12-08T13:33:23Z","url":"https://github.com/sablier-labs/interfaces/issues/682"},{"author":"PaulRBerg","body":"There must be some data attribute or something attached to the recipient input that makes 1Password consider it an email or a password field. This is annoying.\r\n\r\n<img width=\"400\" alt=\"SCR-20231207-kpwu\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/333c5554-86bb-4070-befa-d830bb720741\">","createdAt":"2023-12-07T09:46:04Z","labels":["priority: 3"],"number":679,"repository":"sablier-labs/interfaces","state":"closed","title":"Make 1Password not activate in the recipient address field","type":"issue","updatedAt":"2024-01-19T10:51:47Z","url":"https://github.com/sablier-labs/interfaces/issues/679"},{"author":"PaulRBerg","body":"## Context\r\n\r\nLots of things in finance are based on the monthly billing model:\r\n\r\n- Traditional payroll\r\n- Subscriptions\r\n- Invoices\r\n- Business reports\r\n- Etc.\r\n\r\n## Task\r\n\r\nWe should cater to the reality of monthly billing and enable a Monthly Unlock shape powered by LockupDynamic. This is how I imagine it would work:\r\n\r\n- Similar to Unlocks in Steps, the user can customize the number of months they want the stream to last for\r\n- The UI would dynamically calculate the segments and have each segment end at 00:00 on the date provided by the user, e.g. the 1st day of each month\r\n  - Example 1: Today is December 4, 2023, and I want to stream for 7 months. The 1st segment would end on January 1, 2024, and the last on July 1, 2024\r\n  - Example 2: Today is April 29, 2024, and I want to stream for 18 months. The 1st segment would end on May 1, 2024, and the last on October 1, 2025\r\n- There would be an info box that, when hovered, explains how the months are pre-computed for the user\r\n\r\n## Timeline\r\n\r\nImplementing this new shape is not a priority, so I have marked it as `priority3`.\r\n\r\nThere are other features that we need to settle first, such as https://github.com/sablier-labs/v2-interfaces/discussions/601.\r\n\r\n## User Validation\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-12-04 at 6 02 40 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ecd2f68c-4987-4269-8b4e-e9a9f63ef7c7\">\r\n\r\n<img width=\"400\" alt=\"71047221-93895d80-2143-11ea-994c-13c1d2a74199\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/17b0ce14-98c9-4adc-8356-fb60fe7bd1ac\">\r\n","createdAt":"2023-12-04T16:20:25Z","labels":["type: feature","backlog","priority: 3"],"number":675,"repository":"sablier-labs/interfaces","state":"closed","title":"Monthly unlocks shape","type":"issue","updatedAt":"2023-12-22T10:12:07Z","url":"https://github.com/sablier-labs/interfaces/issues/675"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/631\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** November  6, 2023</sup>\r\nFrom Discord:\r\n\r\n<img width=\"400\" alt=\"SCR-20231106-pkqu\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/20ad8fb0-1157-4ad2-8138-7f75832e3038\"></div>","createdAt":"2023-11-30T18:47:43Z","labels":[],"number":673,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a note in the gallery page that custom curves can be created programmatically","type":"issue","updatedAt":"2023-12-19T23:31:07Z","url":"https://github.com/sablier-labs/interfaces/issues/673"},{"author":"razgraf","body":"The task is to also show the transfer button in the actions section of the stream profile.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/644\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** November  8, 2023</sup>\r\nHere:\r\n\r\n<img width=\"350\" alt=\"SCR-20231108-rywf\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/148a3db4-de6e-4651-ba6c-457efdf85a25\">\r\n\r\nThe reason I am suggesting this is two-fold:\r\n\r\n1. The \"withdraw\" button is already visible in color form underneath the streaming circle\r\n2. A user has just asked us on Crisp if the NFT can be transferred - it should be obvious from the UI that they can do this\r\n\r\n<img width=\"350\" alt=\"SCR-20231108-rved\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/d6ca12a3-e9f1-4a7a-ba9a-bc13b0bddbd6\">\r\n</div>","createdAt":"2023-11-30T18:45:41Z","labels":[],"number":672,"repository":"sablier-labs/interfaces","state":"closed","title":"Suggestion to replace \"Withdraw\" button with \"Transfer NFT\" in \"Actions\" side panel","type":"issue","updatedAt":"2023-12-19T23:31:15Z","url":"https://github.com/sablier-labs/interfaces/issues/672"},{"author":"razgraf","body":"With the launch of our upcoming Airstreams feature, we should create a new section about it in the landing website. I'll probably deal with it soon, so it would be helpful to hear some feedback/requests for what the section should explain.\r\n\r\n@PaulRBerg @maxdesalle could you suggest some content for this section e.g. \r\n\r\n- a catchy description\r\n- a call-to-action, if any, aside from a natural contact-sales button)\r\n\r\nAlso, should we attach this section to the homepage, to the organizations page, or to both of them?","createdAt":"2023-11-30T16:53:38Z","labels":["type: feature","priority: 1"],"number":671,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"Airstreams\" section in the landing website","type":"issue","updatedAt":"2023-12-20T12:57:48Z","url":"https://github.com/sablier-labs/interfaces/issues/671"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/654\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** November 20, 2023</sup>\r\nWe keep getting user support requests like this:\r\n\r\n<img width=\"500\" alt=\"SCR-20231120-swbe\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/76400a85-a31b-4463-bcc0-26a3a4536c2e\">\r\n</div>","createdAt":"2023-11-30T16:27:42Z","labels":[],"number":670,"repository":"sablier-labs/interfaces","state":"closed","title":"References to V1 in the client app","type":"issue","updatedAt":"2023-12-19T23:26:37Z","url":"https://github.com/sablier-labs/interfaces/issues/670"},{"author":"maxdesalle","body":"Add a pricing section that highlights that the protocol and our interface is entirely free to use. This should probably be featured on both the main landing page as well as the Organizations page.","createdAt":"2023-11-29T18:35:05Z","labels":[],"number":666,"repository":"sablier-labs/interfaces","state":"closed","title":"Add pricing section","type":"issue","updatedAt":"2023-12-19T23:27:18Z","url":"https://github.com/sablier-labs/interfaces/issues/666"},{"author":"PaulRBerg","body":"See:\r\n\r\nhttps://docs.exact.ly/resources/brand-assets","createdAt":"2023-11-28T16:16:33Z","labels":["priority: 3"],"number":665,"repository":"sablier-labs/interfaces","state":"closed","title":"Feature Exactly on home page","type":"issue","updatedAt":"2023-12-19T23:31:04Z","url":"https://github.com/sablier-labs/interfaces/issues/665"},{"author":"maxdesalle","body":"Given the success of our \"contact sales\" buttons on the [Organizations](https://sablier.com/organizations) page (the $70M of TKST came from there, without even mentioning other projects), I think we should strongly consider adding a similar call to action at the top of the main [landing page](https://sablier.com/).\r\n\r\nEvery call I have with a potential user is essentially a 15-20 minute ad for Sablier. Over time, that compounds, even if they don't end up (directly) using Sablier. They will mention us next time they have a contact looking for a vesting solution, they will think about us next time they launch a token for a different project, etc.","createdAt":"2023-11-26T14:43:27Z","labels":[],"number":662,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"Contact Sales\" call to action on the main landing page","type":"issue","updatedAt":"2023-12-19T23:29:57Z","url":"https://github.com/sablier-labs/interfaces/issues/662"},{"author":"PaulRBerg","body":"A bug reported by SteakHut. The following Avalanche streams show up as having a withdrawable amount of zero:\r\n\r\n- https://app.sablier.com/stream/LD-43114-3/\r\n- https://app.sablier.com/stream/LD-43114-4/\r\n- https://app.sablier.com/stream/LD-43114-5/\r\n- https://app.sablier.com/stream/LD-43114-6/\r\n\r\nWhen in fact they have like ~5% of the deposit that can be withdrawn.\r\n\r\nSeparately, this is an edge case for the color of the \"Withdraw\" button - canceled stream that still have assets to be withdrawn should appear as the normal orange color instead of red. ","createdAt":"2023-11-17T06:47:28Z","labels":["type: bug","priority: 0"],"number":651,"repository":"sablier-labs/interfaces","state":"closed","title":"Canceled stream with unclaimed assets show up as zero withdrawable amount","type":"issue","updatedAt":"2023-11-17T21:01:54Z","url":"https://github.com/sablier-labs/interfaces/issues/651"},{"author":"PaulRBerg","body":"This repo should have a closed-source software license. The rationale is two-fold:\r\n\r\n- The repo is private\r\n- If anyone is added to the repo and forks the repo, they should not be able to freely distribute it","createdAt":"2023-11-13T09:41:51Z","labels":["backlog","priority: 2","type: docs"],"number":648,"repository":"sablier-labs/interfaces","state":"open","title":"Switch to closed-source software license","type":"issue","updatedAt":"2025-03-30T07:20:15Z","url":"https://github.com/sablier-labs/interfaces/issues/648"},{"author":"PaulRBerg","body":"The [For Organizations]() page on the landing website needs to be updated to reflect the actual benefits for orgs.\r\n\r\n- [ ] Mention the fact that streams can be created in bulk (up to 100 streams)","createdAt":"2023-11-10T17:18:57Z","labels":["backlog","priority: 3"],"number":647,"repository":"sablier-labs/interfaces","state":"closed","title":"Update \"For Organizations\" page","type":"issue","updatedAt":"2024-01-01T23:17:02Z","url":"https://github.com/sablier-labs/interfaces/issues/647"},{"author":"razgraf","body":"As our `streamId !== tokenId` in the application, users may try to input a badly formatted value in the search modal filter for identifiers.\r\n\r\nExample: https://twitter.com/BlockEnthusiast/status/1722367113493393777/photo/1\r\n\r\nOne neat way of fixing this is simply adding a better explanation in that warning, under the field. Something on the lines of: \r\n\r\n> \"The provided stream identifier is not valid. It should include a stream category, a tokenId and the chain e.g. `LL-5-1000`\"","createdAt":"2023-11-08T21:59:51Z","labels":["priority: 2"],"number":646,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve error message on misformatted stream ids in the search modal","type":"issue","updatedAt":"2023-12-19T23:30:00Z","url":"https://github.com/sablier-labs/interfaces/issues/646"},{"author":"PaulRBerg","body":"There should be a big red warning when the user clicks on \"Off\" here - funds can be lost!\r\n\r\n<img width=\"584\" alt=\"SCR-20231108-rvqq\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/34c9918f-07f5-4989-a770-1e89460c050a\">\r\n","createdAt":"2023-11-08T20:33:50Z","labels":["priority: 3"],"number":643,"repository":"sablier-labs/interfaces","state":"closed","title":"Add big red warning when the user disables withdrawals before transferring an NFT","type":"issue","updatedAt":"2023-12-20T15:41:21Z","url":"https://github.com/sablier-labs/interfaces/issues/643"},{"author":"PaulRBerg","body":"Reported by a user on Crisp:\r\n\r\n> I want to create the allow transaction for 1 USD Coin, but I get the error:\r\n> ERROR\r\n> Most likely, the frontend uses the wrong operation: x 10 * (18 * 10) or something like that. This is definitely a bug.\r\n\r\n```\r\nNumber \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000n\" is not in safe 256-bit unsigned integer range (0n to 115792089237316195423570985008687907853269984665640564039457584007913129639935n) Version: viem@1.18.7\r\n```","createdAt":"2023-11-08T17:33:36Z","labels":["type: bug","priority: 1"],"number":642,"repository":"sablier-labs/interfaces","state":"closed","title":"Allowance calculation bug","type":"issue","updatedAt":"2023-11-08T17:57:37Z","url":"https://github.com/sablier-labs/interfaces/issues/642"},{"author":"PaulRBerg","body":"Goerli is getting deprecated:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0c76cc53-99be-4bba-9103-a45b8705550d\"/>\r\n","createdAt":"2023-11-08T10:42:18Z","labels":["priority: 2"],"number":641,"repository":"sablier-labs/interfaces","state":"closed","title":"Change Goerli to Sepolia","type":"issue","updatedAt":"2023-12-19T23:27:06Z","url":"https://github.com/sablier-labs/interfaces/issues/641"},{"author":"razgraf","body":"This is a small task board for features still to be implemented (but necessary) for the airstreams feature.\r\n\r\n - [x] Fund modal in the create-airstream form (for partial funding)(#649)\r\n - [x] Manual-fill modal for step 2 in the create-airstream form (for `[CID, recipients, total, root]` without going through the backend generator - needs an IPFS validation for the given CID, could be with backend validation) (#649)\r\n - [x] Responsiveness (#650)\r\n - [x] `Warning.Bundle` in the create-airstream form\r\n - [x] CSV template ready for download (see form)(#649)\r\n - [x] Loading and error states for the airstream-profile (#650)\r\n - [x] Sanctions checks for airstreams in profile (token, admin) (~#649~)\r\n - [x] Check permissions (e.g. claim) after expiration\n - [x] Dashboard art for airstreams advertisement\n - [x] Cosmetics for the prefund airstream modal\r\n \r\n See https://github.com/sablier-labs/v2-interfaces/pull/567.","createdAt":"2023-11-07T22:27:26Z","labels":[],"number":640,"repository":"sablier-labs/interfaces","state":"closed","title":"Airstream features","type":"issue","updatedAt":"2023-12-19T23:30:30Z","url":"https://github.com/sablier-labs/interfaces/issues/640"},{"author":"razgraf","body":"## Filter by token\r\n\r\nLet users see all streams associated with a particular token.\r\n\r\nI think this is a super important feature for groups of streams related to vested tokens. People won't remember group ids (or intuit how they work). They will just try to filter their own token.\r\n\r\n_Originally posted by @PaulRBerg in https://github.com/sablier-labs/v2-interfaces/discussions/480#discussioncomment-7486256_","createdAt":"2023-11-07T10:46:37Z","labels":["type: feature","priority: 1"],"number":639,"repository":"sablier-labs/interfaces","state":"closed","title":"Add token filter in the search modal","type":"issue","updatedAt":"2023-12-20T11:04:00Z","url":"https://github.com/sablier-labs/interfaces/issues/639"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/6666c9676c5ccd3a2c8938efb456da17bbfc3e2c/packages/components/src/organisms/Modal/Specialized/ChainPicker/Body/index.tsx#L5\r\n","createdAt":"2023-11-06T21:15:27Z","labels":["type: bug","priority: 3"],"number":635,"repository":"sablier-labs/interfaces","state":"closed","title":"Import of \"useModalChainPicker\" has to use \"/dist\" path","type":"issue","updatedAt":"2023-11-08T12:58:53Z","url":"https://github.com/sablier-labs/interfaces/issues/635"},{"author":"PaulRBerg","body":"Here:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/blob/6666c9676c5ccd3a2c8938efb456da17bbfc3e2c/packages/components/src/organisms/Input/system/particles/Side/index.tsx#L3\r\n- https://github.com/sablier-labs/v2-interfaces/blob/6666c9676c5ccd3a2c8938efb456da17bbfc3e2c/packages/components/src/organisms/Modal/Specialized/ChainPicker/index.tsx#L2\r\n- https://github.com/sablier-labs/v2-interfaces/blob/6666c9676c5ccd3a2c8938efb456da17bbfc3e2c/packages/components/src/organisms/Modal/Specialized/ChainPicker/Body/index.tsx#L3\r\n\r\nSee full logs:\r\n\r\nhttps://app.warp.dev/block/xc1ZJMOPxu5r7NOSi9ViHS","createdAt":"2023-11-06T21:10:00Z","labels":["type: bug","priority: 3"],"number":634,"repository":"sablier-labs/interfaces","state":"closed","title":"Self-referential package references","type":"issue","updatedAt":"2023-11-09T10:35:25Z","url":"https://github.com/sablier-labs/interfaces/issues/634"},{"author":"PaulRBerg","body":"This:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/6666c9676c5ccd3a2c8938efb456da17bbfc3e2c/packages/machines/src/guards/date.ts#L1-L4\r\n\r\nShould be imported from `@sablier/v2-constants`.","createdAt":"2023-11-06T21:06:05Z","labels":["type: bug","priority: 3"],"number":633,"repository":"sablier-labs/interfaces","state":"closed","title":"Wrong export in \"constants\" package\"","type":"issue","updatedAt":"2023-11-09T10:35:35Z","url":"https://github.com/sablier-labs/interfaces/issues/633"},{"author":"PaulRBerg","body":"See:\r\n\r\nhttps://app.warp.dev/block/OCwl0jwqjaT5QKT9LeNp4m","createdAt":"2023-11-06T21:02:41Z","labels":["type: bug","priority: 3"],"number":632,"repository":"sablier-labs/interfaces","state":"closed","title":"Location of \"i18n.base.js\" causes TypeScript job to fail","type":"issue","updatedAt":"2023-11-08T12:58:52Z","url":"https://github.com/sablier-labs/interfaces/issues/632"},{"author":"PaulRBerg","body":"This is a feature that makes a lot of sense and has been requested by many users. See this item on Canny for more context:\r\n\r\nhttps://sablier.canny.io/feature-requests/p/upload-csv-file-to-create-a-group-of-streams\r\n\r\nI gather that we can remod the airstreams CSV upload functionality to work with groups of streams, too.","createdAt":"2023-11-03T11:04:13Z","labels":["type: feature","priority: 0"],"number":629,"repository":"sablier-labs/interfaces","state":"closed","title":"Create from CSV feature for groups of streams","type":"issue","updatedAt":"2024-01-30T10:22:23Z","url":"https://github.com/sablier-labs/interfaces/issues/629"},{"author":"PaulRBerg","body":"The [sitemap XML](https://sablier.com/sitemap.xml) file has been live for a while, but Google is still showing the old links:\r\n\r\n<img width=\"400\" alt=\"SCR-20231103-juqp\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/32572d5d-4f13-4ea0-8cf7-baaf3d9e521c\">\r\n","createdAt":"2023-11-03T10:45:50Z","labels":["type: bug","priority: 2"],"number":627,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate why sitemap is not working","type":"issue","updatedAt":"2024-01-04T17:45:06Z","url":"https://github.com/sablier-labs/interfaces/issues/627"},{"author":"razgraf","body":"- [x] Subgraph\r\n- [x] Check PRB Proxy, Permit2 etc.\r\n- [x] RPCs\r\n- [x] Token list and chain icons (files.sablier.com)\r\n\r\n\r\nhttps://v2-docs-hfcc6wuvg-sablier.vercel.app/contracts/v2/deployments#scroll","createdAt":"2023-11-03T10:27:47Z","labels":["type: feature","priority: 2"],"number":626,"repository":"sablier-labs/interfaces","state":"closed","title":"Deploy to Scroll","type":"issue","updatedAt":"2023-11-08T11:43:04Z","url":"https://github.com/sablier-labs/interfaces/issues/626"},{"author":"razgraf","body":"The case for an unsupported chain is treated in the app, but after the latest updates it may have deviated from the right path (the dashboard in some cases keeps the loading state). Investigate this edge-case again and make sure it behaves correctly.\r\n\r\nAlso, update the \"wrong chain\" label with an \"unsupported chain\" text.\r\n\r\nFor reference, from PRB:\r\n![SCR-20231102-tlow](https://github.com/sablier-labs/v2-interfaces/assets/15740806/d98421bb-d48b-41e7-ac85-9c3bff3182e6)\r\n","createdAt":"2023-11-02T22:37:48Z","labels":[],"number":625,"repository":"sablier-labs/interfaces","state":"closed","title":"Make sure the \"unsupported chain\" has the correct UX","type":"issue","updatedAt":"2023-12-19T23:26:25Z","url":"https://github.com/sablier-labs/interfaces/issues/625"},{"author":"razgraf","body":"ENVIO is an alternative to The Graph. They claim to have up to 100x improvements in indexing speed. Fun fact: ENVIO started because in a past product, the team had to implement a \"warning\" for users for slow subgraphs, as their latest transactions were always indexing with a delay (exactly what we did with the \"expected streams\" feature) - they identified this as bad UX and build an internal tool to account for it, which became their new startup.\r\n\r\nThe \"migration\" should be quite easy, as they (afaik) offer support for Assembly Script and the GQL API.\r\n\r\nWe'll have to tread carefully though, because of our existing The Graph grants, but we could simply use them (a) as a POC and (b) for networks where we're not incentivized by The Graph. In the future, we can build a system that picks the best data source based on the latest indexed block (i.e. we call both the-graph and envio, and send the main query after to the endpoint that yields the higher block number). ","createdAt":"2023-11-01T14:37:02Z","labels":["priority: 3"],"number":621,"repository":"sablier-labs/interfaces","state":"closed","title":"Explore ENVIO, create a test deployment for one of the networks","type":"issue","updatedAt":"2024-02-12T15:43:31Z","url":"https://github.com/sablier-labs/interfaces/issues/621"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/587\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** October  6, 2023</sup>\r\nFew users will understand why there are two addresses in the top-right wallet card:\r\n\r\n<img width=\"183\" alt=\"Screenshot 2023-10-06 at 11 44 00 AM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/726bd763-69f8-4716-87a4-e545b5fd17b4\">\r\n\r\nAnd even among those in the tiny minority who will understand, they will likely not care about it.\r\n\r\nSince we are also [planning](https://github.com/sablier-labs/v2-periphery/issues/168) on disabling the proxy for Safe users, I suggest removing the proxy address from the top-right wallet card.\r\n\r\nP.S. the PRBProxy address may be especially confusing for Safe users, who might assume that that is their Safe address.</div>","createdAt":"2023-10-31T18:16:03Z","labels":[],"number":620,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove proxy address from top-right wallet card","type":"issue","updatedAt":"2023-12-19T23:31:10Z","url":"https://github.com/sablier-labs/interfaces/issues/620"},{"author":"PaulRBerg","body":"I suggest we order the LockupDynamic curves by (perceived) popularity:\r\n\r\n- Unlock in Steps\r\n- Timelock\r\n- Unlock-Linear\r\n- Unlock-Dynamic\r\n- Exponential\r\n- Cliff-Exponential\r\n\r\nFor clarity: I am referring to the order in the gallery page.","createdAt":"2023-10-30T13:56:18Z","labels":["priority: 3"],"number":618,"repository":"sablier-labs/interfaces","state":"closed","title":"Reorder the LockupDynamic curves","type":"issue","updatedAt":"2023-11-22T15:56:27Z","url":"https://github.com/sablier-labs/interfaces/issues/618"},{"author":"PaulRBerg","body":"To prevent users from accidentally creating cancelable timelocks, when in fact they want them to be non-cancelable, we should \r\ndeactivate cancelability for the [Timelock curve](https://app.sablier.com/create/single/?shape=dynamicTimelock), i.e., the toggle should be on \"Off\" by default.\r\n\r\nIt is worth noting that timelocks are typically non-cancelable (hence the word \"lock\" in the name).\r\n\r\nI had been involved in a heated debate with a $HAY token holder that was pissed about this:\r\n\r\nhttps://twitter.com/PaulRBerg/status/1714048074530652590\r\nhttps://twitter.com/PaulRBerg/status/1714048279455875209\r\nhttps://twitter.com/alphabyaizen/status/1714047639807725594","createdAt":"2023-10-30T11:20:44Z","labels":["type: feature","priority: 1"],"number":617,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable cancelability by default for the \"Timelock\" curve","type":"issue","updatedAt":"2023-11-03T12:19:58Z","url":"https://github.com/sablier-labs/interfaces/issues/617"},{"author":"PaulRBerg","body":"Gnosis is launching its ENS domain project \"Genome\" soon. An integration, showing/resolving .gno domains on the frontend, would be nice.\r\n\r\nThe launch is in ~2 weeks, and an integration would work via this npm package:\r\n\r\nhttps://www.npmjs.com/package/@web3-name-sdk/core","createdAt":"2023-10-30T09:22:56Z","labels":["type: feature","backlog"],"number":615,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate Genome domains on Gnosis chain","type":"issue","updatedAt":"2023-11-30T15:32:33Z","url":"https://github.com/sablier-labs/interfaces/issues/615"},{"author":"PaulRBerg","body":"A recent user conversation has revealed the fact that on some chains, the indexing on The Graph takes a long time:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-10-29 at 10 03 46 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b15157e1-b158-4195-b6ab-ab63e6fe1fb0\">\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-10-29 at 10 01 18 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/d4ef2efd-baff-4da8-adcd-efe4328e77d8\">\r\n\r\nIt should be helpful to display a warning somewhere (maybe on a banner) about this slow indexing time.\r\n\r\nIIRC, Sushi had a warning like this.\r\n","createdAt":"2023-10-29T22:05:18Z","labels":["priority: 3"],"number":614,"repository":"sablier-labs/interfaces","state":"closed","title":"Add warning about slow indexing times on some chains","type":"issue","updatedAt":"2023-10-30T14:34:40Z","url":"https://github.com/sablier-labs/interfaces/issues/614"},{"author":"PaulRBerg","body":"Getting the following error:\r\n\r\n> error on line 9 at column 11: Opening and ending tag mismatch: changefreq line 7 and url","createdAt":"2023-10-29T19:00:41Z","labels":["type: bug","priority: 3"],"number":613,"repository":"sablier-labs/interfaces","state":"closed","title":"Sitemap not working","type":"issue","updatedAt":"2024-02-02T21:14:13Z","url":"https://github.com/sablier-labs/interfaces/issues/613"},{"author":"PaulRBerg","body":"Reported by a user on Discord:\r\n\r\n<img width=\"500\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/67e978d9-8ad6-468c-8a26-893793e7229f\"/>\r\n","createdAt":"2023-10-29T15:31:34Z","labels":["type: bug","priority: 3"],"number":611,"repository":"sablier-labs/interfaces","state":"closed","title":"Bug in \"Warning/Account\": duplicate \"or sender\"","type":"issue","updatedAt":"2023-10-30T15:53:42Z","url":"https://github.com/sablier-labs/interfaces/issues/611"},{"author":"PaulRBerg","body":"This is what it is currently displayed when trying to access a non-existing page on `sablier.com`:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-10-25 at 7 56 35 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e5b89083-6251-4785-b7b3-ca54423cf5a8\">\r\n\r\nFor better SEO and user retention, it would be better if we showed a 404 page, similar to how we do on `app.sablier.com`.\r\n\r\nThis seems like a low-effort task so I have opened a GitHub issue directly.","createdAt":"2023-10-25T18:58:29Z","labels":["priority: 3"],"number":607,"repository":"sablier-labs/interfaces","state":"closed","title":"Display a 404 page in the landing app","type":"issue","updatedAt":"2023-12-20T11:13:04Z","url":"https://github.com/sablier-labs/interfaces/issues/607"},{"author":"PaulRBerg","body":"See the discussion in https://github.com/sablier-labs/v2-interfaces/discussions/598, this [thread](https://twitter.com/kingscounselxyz/status/1700956101317955913), and this [thread](https://twitter.com/kingscounselxyz/status/1718950185210974316) on X.\r\n\r\nWe should add a banner at the top of the UI that contains a preview and a \"Read more\" button, which opens a modal.\r\n\r\nThe title should be \"Disclaimer for UK residents,\" and the text should say this:\r\n\r\n> This web application is provided as a tool for users to interact with the Sablier Protocol on their own initiative, with no endorsement or recommendation of cryptocurrency trading activities. In doing so, Sablier Labs is not recommending that users or potential users engage in cryptoasset trading activity, and users or potential users of the web application should not regard this webpage or its contents as involving any form of recommendation, invitation or inducement to deal in cryptoassets.\r\n\r\nFor a demo, use a VPN, switch to the UK, and open https://app.uniswap.org","createdAt":"2023-10-23T11:58:03Z","labels":["type: feature","priority: 1"],"number":599,"repository":"sablier-labs/interfaces","state":"closed","title":"Disclaimer for UK residents","type":"issue","updatedAt":"2023-12-20T10:46:38Z","url":"https://github.com/sablier-labs/interfaces/issues/599"},{"author":"PaulRBerg","body":"There's a (rude and angry) user on Twitter who has spotted some inconsistencies in the details panel on the right-hand side of the screen:\r\n\r\n- [x] When the stream is non-cancelable, the top label still says \"Cancelable\". This is misleading. It would be much, much clearer to say \"Non-Cancelable\" or \"Cancelability\" (I would prefer the former).\r\n  - Example: [LD-1-8](https://app.sablier.com/stream/LD-1-8)\r\n- [x] When the stream is canceled, the status wrongly appears as \"DepletedCanceled\"\r\n  - Example: [LD-1-7](https://app.sablier.com/stream/LD-1-7)\r\n  \r\nGiven the timely nature of the $HAY and $SCHAP situations, I am assigning a `priority1`. It would be helpful to get these bugs sorted soon, to get some momentum.\r\n\r\nReferences:\r\n\r\n- https://twitter.com/PaulRBerg/status/1714048074530652590\r\n- https://twitter.com/PaulRBerg/status/1714048279455875209\r\n- https://twitter.com/alphabyaizen/status/1714047639807725594\r\n\r\nScreenshots:\r\n\r\n<img width=\"300\" alt=\"SCR-20231016-uiqd\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/a981d502-9a5c-43d5-b427-e29e1ab645ee\">\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-10-16 at 11 42 17 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/364ddaff-b1b9-4ddf-9b66-617f4e300b88\">","createdAt":"2023-10-16T23:19:29Z","labels":["type: bug","priority: 1"],"number":596,"repository":"sablier-labs/interfaces","state":"closed","title":"Bugs in the \"Status\" and \"Cancelable\" sections of the details panel","type":"issue","updatedAt":"2023-11-03T10:32:52Z","url":"https://github.com/sablier-labs/interfaces/issues/596"},{"author":"PaulRBerg","body":"In response to the barrage of misconceptions[^1] related to timelocks, I suggest we implement a bespoke curve for timelocks, which doesn't even allow the user to make the stream cancelable\r\n\r\nSee the fuller rationale in https://github.com/sablier-labs/v2-core/issues/706\r\n\r\nRelated https://github.com/sablier-labs/v2-interfaces/issues/581\r\n\r\n[^1]: https://twitter.com/I_Hold_Bags/status/1713810126568636618","createdAt":"2023-10-16T14:33:56Z","labels":["type: feature"],"number":595,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"timelock\" stream shape","type":"issue","updatedAt":"2023-10-25T08:39:09Z","url":"https://github.com/sablier-labs/interfaces/issues/595"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWe have recently received an alleged vulnerability report regarding the smart contract-based hooks part of V2 Core. In short, the idea is that ill-intended recipients can transfer the NFT to a contract that performs a never-ending computation (e.g. [this contract](https://gist.github.com/PaulRBerg/6b91f46ba7ba50470243f17cf7362f74). After a few hours of debugging, the \"vulnerability\" turned out to be a false alarm for the protocol (you should have received an email from me). However, there is an implication for the UI.\r\n\r\nWhen the sender attempts to cancel a stream whose recipient is a DoS contract, the wallet software will shoot up the estimated gas price to the maximum block gas limit:\r\n\r\n<img width=\"200\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e5c884d3-f510-4068-ae93-61af982cac9f\"/>\r\n\r\nNow, the catch is that the transaction _will succeed_, even if the gas limit need not be that high. Based on my simulations on Goerli, [~548k gas](https://goerli.etherscan.io/tx/0x70695a4891149cc13b97fb1f9014fa8b55f42608eb47eda78afcfb890f7c7d22) is the threshold required to make the cancelation pass.\r\n\r\n## Solution\r\n\r\n- Check if the estimated gas limit is unusually high (with a simple litmus test such as \"is it greater than 10M?\")\r\n- If it is, hard-code the gas limit to 700k (bumping up the 548k threshold in order to account for different VM gas costs and ERC-20 tokens)\r\n\r\n## Prioritization\r\n\r\nIt is unlikely that any recipient will attempt this attack any time soon, so this is not a burning issue.\r\n\r\nI have set the priority to 2 and marked it as backlog, but feel free to disagree with my assessment.","createdAt":"2023-10-15T18:57:35Z","labels":["backlog","priority: 2"],"number":593,"repository":"sablier-labs/interfaces","state":"closed","title":"DoS via protocol hooks","type":"issue","updatedAt":"2023-11-30T19:39:07Z","url":"https://github.com/sablier-labs/interfaces/issues/593"},{"author":"razgraf","body":"https://vercel.com/blog/how-we-optimized-package-imports-in-next-js","createdAt":"2023-10-15T10:32:27Z","labels":["priority: 3","effort: high","type: build","work: complicated"],"number":592,"repository":"sablier-labs/interfaces","state":"closed","title":"Update to next ^13.5 / ^14","type":"issue","updatedAt":"2024-06-17T10:54:29Z","url":"https://github.com/sablier-labs/interfaces/issues/592"},{"author":"PaulRBerg","body":"The following buttons are not working:\r\n\r\n- \"Sablier on Safe\"\r\n- \"Request feature or chain\"\r\n\r\n<img width=\"200\" alt=\"SCR-20231006-oatn\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/86a42a05-2025-4e1a-b6f5-79311a92acd3\">\r\n","createdAt":"2023-10-06T12:54:27Z","labels":["type: bug","priority: 3"],"number":588,"repository":"sablier-labs/interfaces","state":"closed","title":"Landing page buttons non-functional","type":"issue","updatedAt":"2023-12-20T12:49:20Z","url":"https://github.com/sablier-labs/interfaces/issues/588"},{"author":"PaulRBerg","body":"Getting these console errors (no matter which page I open):\r\n\r\n> Lockdown failed: TypeError: At intrinsics.Object.groupBy expected boolean not function\r\n>\r\n> Protecting intrinsics failed: ReferenceError: harden is not defined\r\n\r\n<details><summary>Full logs</summary>\r\n<p>\r\n\r\nlockdown-run.js:17 Lockdown failed: TypeError: At intrinsics.Object.groupBy expected boolean not function at isAllowedPropertyValue (lockdown-install.js:1:53384) at isAllowedProperty (lockdown-install.js:1:53807) at visitProperties (lockdown-install.js:1:55095) at isAllowedPropertyValue (lockdown-install.js:1:53041) at isAllowedProperty (lockdown-install.js:1:53807) at visitProperties (lockdown-install.js:1:55095) at lockdown-install.js:1:55523 at repairIntrinsics (lockdown-install.js:1:144597) at lockdown-install.js:1:145462 at lockdown-run.js:4:3 (anonymous) @ lockdown-run.js:17 Show 1 more frame Show less\r\n\r\nProtecting intrinsics failed: ReferenceError: harden is not defined\r\n  at lockdown-more.js:69:13\r\n  at Set.forEach (<anonymous>)\r\n  at protectIntrinsics (lockdown-more.js:44:22)\r\n  at lockdown-more.js:97:5\r\n\r\n</p>\r\n</details> ","createdAt":"2023-10-04T12:10:28Z","labels":["type: bug","priority: 3"],"number":586,"repository":"sablier-labs/interfaces","state":"closed","title":"Lockdown failed: TypeError: At intrinsics.Object.groupBy expected boolean not function","type":"issue","updatedAt":"2023-10-04T17:50:59Z","url":"https://github.com/sablier-labs/interfaces/issues/586"},{"author":"razgraf","body":"As per this user request, we can create a stream shape with two segments\r\n- a `1s` segment of `a` tokens\r\n- an `duration - 1s` segment of `b` tokens\r\n\r\nThe setup would be similar to our `ExponentialCliff` configuration (in the sense that we need one extra field) - instead of the cliff input we'd have an amount input for the initial unlock (1st segment).\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/580\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** September 15, 2023</sup>\r\n## User Requests\r\n\r\nWe have received this request from two distinct users recently:\r\n\r\n- Wagyu (SteakHut)\r\n- [Wladimir Weinbender](https://twitter.com/Walodja1987/status/1681213879857168387)\r\n\r\n<img width=\"504\" alt=\"Screenshot 2023-09-15 at 3 14 28 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1f6832cd-0d7f-4cd7-a7f0-86c031299f6b\">\r\n\r\n## Implementation\r\n\r\nA new item is added in the [create stream gallery](https://app.sablier.com/gallery/) under the \"Lockup Dynamic\" section.\r\n\r\nThis item allows the user to specify a pre-defined amount that gets unlocked immediately.</div>","createdAt":"2023-09-15T12:51:32Z","labels":["type: feature","priority: 2"],"number":581,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"linear instant unlock\" stream shape","type":"issue","updatedAt":"2023-10-25T08:39:09Z","url":"https://github.com/sablier-labs/interfaces/issues/581"},{"author":"razgraf","body":"As discussed in #574 we could add a bespoke label / call to action for people to submit their own tokens.\r\nOne idea mentioned there was to add a small text under \"Community list\" on the lines of: \"Submit your own\" or \"List token\".\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/574\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** September  1, 2023</sup>\r\nThere's no link between the UI and our [community-token-list](https://github.com/sablier-labs/community-token-list) repo.\r\n\r\nI'm opening this discussion to explore the possibility of adding a call-to-action in the token dropdown, which would contain a hyperlink to the token community list repository.\r\n\r\nThe advantage would be that we would no longer get manual listing requests from users:\r\n\r\n<img width=\"400\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/1d09ff83-5804-41d4-a2ff-3b7921c56195\"/></div>","createdAt":"2023-09-04T14:05:14Z","labels":["type: feature"],"number":576,"repository":"sablier-labs/interfaces","state":"closed","title":"Add call to action in token-list area","type":"issue","updatedAt":"2023-12-19T23:30:59Z","url":"https://github.com/sablier-labs/interfaces/issues/576"},{"author":"razgraf","body":"Re-test the expected streams feature","createdAt":"2023-09-01T12:22:08Z","labels":[],"number":575,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-test the expected streams feature","type":"issue","updatedAt":"2023-12-22T19:20:10Z","url":"https://github.com/sablier-labs/interfaces/issues/575"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nI had a call with Dennison from [Tally](https://www.tally.xyz/) today, and I learned a few things about their proposal creation system.\r\n\r\nOne bottleneck is our use of [structs](https://docs.sablier.com/contracts/v2/reference/core/types/library.LockupLinear#createwithrange) as parameters for the create functions. Tally's proposal UI does not work with structs - it just shows \"tuple\" in a single input, without deconstructing the struct fields in separate key<>value pairs.\r\n\r\nWhat I ended up doing for our current Tally user is writing a [custom Solidity script](https://gist.github.com/PaulRBerg/f6af180f5b3f3643c7522b94af4a3309), but this is not a scalable approach.\r\n\r\nThe problem applies not just to Tally, but to most DAO governance forums. DAO proposals typically require the low-level calldata to be provided.\r\n\r\nRelated: [my tweet](https://twitter.com/PaulRBerg/status/1608502827437158405)\r\n\r\n## Solution\r\n\r\nTwo potential solutions:\r\n\r\n1. Build a bespoke page that lets the user choose the type of function they want to generate the calldata for, and then a form that mimics the create stream forms.\r\n2. Add a button somewhere in the current create stream forms that lets the user \"export\" the calldata. A modal would then appear with the generated calldata.\r\n\r\n## Timeline\r\n\r\nWe're not in a big rush. Marked as \"priority3\".","createdAt":"2023-08-16T13:26:23Z","labels":["type: feature","backlog","priority: 3"],"number":560,"repository":"sablier-labs/interfaces","state":"closed","title":"Calldata generator for create streams","type":"issue","updatedAt":"2024-01-09T15:33:41Z","url":"https://github.com/sablier-labs/interfaces/issues/560"},{"author":"PaulRBerg","body":"There are now two proxy targets:\r\n\r\n- `ProxyTargetApprove`\r\n- `ProxyTargetPermit2`\r\n\r\nThey have the exact same API. The only difference is in how the `transferData` parameter is provided.\r\n\r\n- In `Approve`, it has to be left empty\r\n- In `Permit2`, it's the same `Permit2Params` but now it has ABI encoded and provided as `bytes` (see [this](https://github.com/sablier-labs/v2-periphery/blob/ca9baa067c37bdbd4f62cfa5424b46550aaac03e/src/SablierV2ProxyTargetPermit2.sol#L42))\r\n\r\nRef https://github.com/sablier-labs/v2-periphery/pull/161","createdAt":"2023-08-16T10:21:20Z","labels":["type: feature"],"number":559,"repository":"sablier-labs/interfaces","state":"closed","title":"Conform to latest proxy targets API","type":"issue","updatedAt":"2023-11-22T16:24:40Z","url":"https://github.com/sablier-labs/interfaces/issues/559"},{"author":"PaulRBerg","body":"The task is to build dedicated pages for each use case in the landing website:\r\n\r\n- sablier.com/vesting\r\n- sablier.com/payroll\r\n- sablier.com/airdrops (though we might want to wait for airstreams to be released before working on this)\r\n- etc.\r\n\r\nAll pages would have the same layout structure, just with different labels.\r\n\r\nCopyright inspiration can be drawn from the [Use Cases](https://docs.sablier.com/concepts/use-cases) section of the docs.\r\n\r\nFor more context, see https://github.com/sablier-labs/private-discussions/discussions/3.","createdAt":"2023-08-15T17:09:14Z","labels":["type: feature","backlog"],"number":556,"repository":"sablier-labs/interfaces","state":"closed","title":"Dedicated landing page for each use case","type":"issue","updatedAt":"2024-01-05T12:12:09Z","url":"https://github.com/sablier-labs/interfaces/issues/556"},{"author":"razgraf","body":"As per this discussion - https://github.com/orgs/WalletConnect/discussions/3291 - Wallet Connect will throw some errors when linked from a Safe Wallet Connect app to the native application (not to be confused with the embedded version of the app through Safe).\r\n\r\nThe errors happen when:\r\n1. the safe is trying to connect to the wrong network (e.g, app has network A selected, safe is on network B)\r\n2. the safe disconnects from wallet connect\r\n3. a chain switch is attempted\r\n\r\n![Screenshot 2023-08-09 at 21 56 57](https://github.com/sablier-labs/v2-interfaces/assets/15740806/9861f222-e562-4d18-927b-d9372df8f88e)\r\n![Screenshot 2023-08-09 at 21 56 02](https://github.com/sablier-labs/v2-interfaces/assets/15740806/f98a3da7-ebd6-458f-b414-a3c4b96dd917)\r\n![Screenshot 2023-08-09 at 21 58 58](https://github.com/sablier-labs/v2-interfaces/assets/15740806/df08da72-9059-487c-ac95-5ee714d440bb)\r\n![Screenshot 2023-08-09 at 22 08 16](https://github.com/sablier-labs/v2-interfaces/assets/15740806/88d136f5-9e9b-4512-bbb7-0806405fe361)\r\n\r\n---\r\n\r\nThis issue will be used for internal SEO, as the problem isn't fixable. Whenever it happens on Sentry or to users, we'll use this issue to provide context.\r\n","createdAt":"2023-08-09T19:04:23Z","labels":[],"number":551,"repository":"sablier-labs/interfaces","state":"closed","title":"Wallet Connect: \"No matching key\" with native flow","type":"issue","updatedAt":"2023-08-09T19:08:58Z","url":"https://github.com/sablier-labs/interfaces/issues/551"},{"author":"PaulRBerg","body":"Feedback shared by Micah Zoltu a few months ago on Discord:\r\n\r\n![IMG_3764](https://github.com/sablier-labs/v2-interfaces/assets/8782666/c0b8c2c2-1fd9-4312-bf49-c3422e3cb756)\r\n","createdAt":"2023-08-09T06:23:28Z","labels":["backlog","priority: 3"],"number":549,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the token address the hyperlink in the token dropdown","type":"issue","updatedAt":"2023-08-11T05:43:42Z","url":"https://github.com/sablier-labs/interfaces/issues/549"},{"author":"PaulRBerg","body":"Feedback shared by Micah Zoltu a few months ago on Discord:\r\n\r\n> BUG: When a wallet is connected do not use a secondary channel for getting data from the blockchain. This is, sadly, a very common bug that breaks tools like The Interceptor which allows users to \"fork mainnet\" (not actually, but the terminology is hopefully illustrative).\r\n>\r\n> attempted to go through the account creation process but after creating an account it appears you are still hitting Infura rather than going through the wallet's RPC.\r\n>\r\n> This also is a privacy problem as you are making requests from my IP to Infura with my account information, when you should be using the Ethereum client I have configured in my wallet (which may be localhost).","createdAt":"2023-08-09T06:20:07Z","labels":["type: bug","priority: 3"],"number":548,"repository":"sablier-labs/interfaces","state":"closed","title":"Do not use a secondary channel for getting data from the blockchain","type":"issue","updatedAt":"2024-12-19T07:41:10Z","url":"https://github.com/sablier-labs/interfaces/issues/548"},{"author":"razgraf","body":"For most services using wallet connect you first connect to the account and then switch the chain (from inside of that specific service).  With Wallet Connect and the Safe WC plugin this flow is not possible (not to be confused with the native app connection through Safe's SDK).\r\n\r\n#### Steps to reproduce (using e.g. a Safe on Polygon)\r\n\r\n1. Open app.sablier.com\r\n2. Open your Safe interface and go to the Wallet Connect app\r\n3. Open rainbow kit on app.sablier.com, choose Wallet Connect and copy the connection link\r\n4. Paste the link in the Safe page\r\n5. The flow will crash: the app expected a connection to `chainId:1` (our default) so it won't allow the Polygon Safe to connect\r\n\r\nSimilar to a change made in V1 (https://github.com/sablier-labs/v1-interfaces/commit/1ad38723d4d6a6845c9a018861f251425a7ab249) we need a chain picker before the account-connect step, such that a \"desired chain\" can be provided explicitly to Wallet Connect. Now, without this new system, it defaults to Ethereum.\r\n\r\n#### Context\r\n\r\n![Screenshot 2023-07-30 at 14 29 14](https://github.com/sablier-labs/v2-interfaces/assets/15740806/64c7745a-a366-47d5-aeae-7df2abd2a8a0)\r\n\r\n","createdAt":"2023-08-08T21:37:42Z","labels":["type: bug","priority: 0"],"number":547,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement an offline chain picker to reverse the Wallet Connect flow","type":"issue","updatedAt":"2023-08-10T16:08:47Z","url":"https://github.com/sablier-labs/interfaces/issues/547"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/206\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** March 10, 2023</sup>\r\nWhile exploring [Nexstra](https://nextra.site/docs/docs-theme/start), I noticed that the first installation option they recommended was `pnpm`. My spidey-sense got activated, and I took it for a spin in my [Foundry template](https://github.com/PaulRBerg/foundry-template/commit/ab28c67f39fd4b91a6f27bc22271106c52249732). The result?\r\n\r\n[`pnpm`](https://pnpm.io/) is freaking AWESOME!\r\n\r\n- [x] Faster than Yarn (yes, faster even than Yarn Berry)\r\n- [x] Delightful terminal logging (cleaner)\r\n- [x] Less clunky than Yarn Berry! (we'd be able to purge the `.yarn` and the `.yarnrc.yml` file, as well as the [`!.yarn/`](https://github.com/sablierhq/v2-interfaces/blob/main/.gitignore#L146-L153) exceptions in `.gitignore`)\r\n\r\nThis is all while not compromising the user experience of upgrading dependencies. [`pnpm update --interactive`](https://github.com/pnpm/pnpm/issues/1012#issuecomment-575941037) is equivalent to Yarn's [`upgrade-interactive`](https://yarnpkg.com/cli/upgrade-interactive) plugin.</div>","createdAt":"2023-08-08T18:18:25Z","labels":["backlog"],"number":546,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate switching to PNPM","type":"issue","updatedAt":"2024-01-04T15:38:49Z","url":"https://github.com/sablier-labs/interfaces/issues/546"},{"author":"razgraf","body":"Send more details to Sentry for better error logging. Some features have been disabled for simplicity when integrating Sentry so slowly re-enabling them should help.","createdAt":"2023-08-03T19:38:26Z","labels":["priority: 3"],"number":543,"repository":"sablier-labs/interfaces","state":"closed","title":"Send sourcemaps and more data to Sentry to improve logs","type":"issue","updatedAt":"2023-08-09T12:16:56Z","url":"https://github.com/sablier-labs/interfaces/issues/543"},{"author":"razgraf","body":"As discussed in the tail end of #380 we should architect a way for the user to perform the proxy-creation under the hood, without having to perform a separate transaction for it. This would complete our \"proxy abstraction\" sprint.\r\n\r\nAt the same time, as brought up in the aforementioned discussion, there will be multiple updates that will have to take place inside the `create` system:\r\n\r\n- Proxy abstraction\r\n- Permit2 vs Approval toggle\r\n\r\nThis may ask for a smarter architecture around our machines and overall system such that code is still legible and we don't end up with a salad of \"if(s) and else(s)\". Remains to be seen.","createdAt":"2023-08-03T19:35:28Z","labels":["type: feature","priority: 1"],"number":542,"repository":"sablier-labs/interfaces","state":"closed","title":"Research abstracting the `proxy` creation and re-architect the `create` stream system","type":"issue","updatedAt":"2023-12-03T20:02:09Z","url":"https://github.com/sablier-labs/interfaces/issues/542"},{"author":"razgraf","body":"We should plug into the router and make sure we close modals automatically on page leave or page enter. This would guarantee:\r\n\r\n1. we don't have cases where the user clicks on the back button and the modal/cover remain open\r\n2. we don't have weird steps between clicking buttons (e.g. \"view stream\" after create) and the actual transition happening","createdAt":"2023-08-02T15:08:13Z","labels":["type: bug","type: feature"],"number":541,"repository":"sablier-labs/interfaces","state":"closed","title":"Close covers and modals on page-leave/page-enter","type":"issue","updatedAt":"2023-08-09T12:16:56Z","url":"https://github.com/sablier-labs/interfaces/issues/541"},{"author":"PaulRBerg","body":"We don't need checked arithmetic when calculating the `stopTime` in `createWithDuration`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/e5826d966471e3c1540fb6e1ffc7fd2b212bc3d0/src/SablierV2Linear.sol#L130\r\n\r\nThe reason being that the [`startTime > stopTime` comparison](https://github.com/sablierhq/v2-core/blob/e5826d966471e3c1540fb6e1ffc7fd2b212bc3d0/src/SablierV2.sol#L100-L102) will nonetheless ensure that the `stopTime` is greater than the `startTime`.","createdAt":"2022-06-10T07:30:36Z","labels":[],"number":40,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor to use unchecked arithmetic in all \"createWithDuration\" functions","type":"issue","updatedAt":"2022-06-16T17:49:48Z","url":"https://github.com/sablier-labs/lockup/issues/40"},{"author":"PaulRBerg","body":"","createdAt":"2022-06-09T11:29:04Z","labels":[],"number":36,"repository":"sablier-labs/lockup","state":"closed","title":"Add installation and usage in the Readme","type":"issue","updatedAt":"2022-06-16T13:35:59Z","url":"https://github.com/sablier-labs/lockup/issues/36"},{"author":"andreivladbrg","body":"The `testCancel__StreamOngoing__DeleteStream` and `testCancel__StreamOngoing__Event` tests written for the `cancel` function don't actually test the case when the stream is ongoing - in fact, they still test the case when the stream has ended, because they are warping to `stopTime`:\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/e5826d966471e3c1540fb6e1ffc7fd2b212bc3d0/test/unit/sablier-v2-linear/cancel/cancel.t.sol#L113\r\n\r\nThis was perhaps caused by accidentally copy-pasting the code from the other tests, and forgetting to update it to account for the \"ongoing stream\" case.","createdAt":"2022-06-09T11:09:48Z","labels":[],"number":35,"repository":"sablier-labs/lockup","state":"closed","title":"Mistakes in the ongoing stream tests of the \"cancel\" function","type":"issue","updatedAt":"2022-06-10T11:53:22Z","url":"https://github.com/sablier-labs/lockup/issues/35"},{"author":"PaulRBerg","body":"","createdAt":"2022-06-09T10:24:52Z","labels":[],"number":33,"repository":"sablier-labs/lockup","state":"closed","title":"Test the \"getStream\" function","type":"issue","updatedAt":"2022-06-16T17:51:15Z","url":"https://github.com/sablier-labs/lockup/issues/33"},{"author":"PaulRBerg","body":"","createdAt":"2022-06-09T10:24:36Z","labels":[],"number":32,"repository":"sablier-labs/lockup","state":"closed","title":"Test the \"cancelAll\", \"withdrawAll\" and \"withdrawAllTo\" functions","type":"issue","updatedAt":"2022-06-15T14:31:20Z","url":"https://github.com/sablier-labs/lockup/issues/32"},{"author":"PaulRBerg","body":"## Description\r\n\r\nThe way the `authorizations` mapping is currently defined permits third-party funders (in certain cases) to create streams that are worth more than what they had been authorized, because ERC-20 tokens have different decimals.\r\n\r\nFor example, if Alice authorizes Bob to create streams for up to 1,000 DAI, Bob would also have the ability to create streams worth up to 10^15 USDC (1 quadrillion). This is due to DAI having 18 decimals and USDC 6 decimals.\r\n\r\n## Solutions\r\n\r\n~1. Normalize the token amounts to 18 decimals when performing the authorization checks in `createFrom` and `createFromWithDuration`.~\r\n2. Add another child mapping in the parent mapping `authorizations` with the key `token`, such that authorizations are given on a per-token basis.\r\n\r\n~The 2nd solution is purer, but the 1st would involve fewer changes.~\r\n\r\n**Update**: the 1st solution may involve fewer changes, but it makes the tacit assumption that every token is equal in value to all other tokens (which is obviously wrong).\r\n\r\nThus the only solution is the 2nd one.","createdAt":"2022-06-09T08:43:11Z","labels":[],"number":30,"repository":"sablier-labs/lockup","state":"closed","title":"Bug in the authorization system: missing token units","type":"issue","updatedAt":"2022-06-16T08:28:20Z","url":"https://github.com/sablier-labs/lockup/issues/30"},{"author":"PaulRBerg","body":"Instead of:\r\n\r\n```text\r\nSablierV2Linear__FunctionName__UnitTest\r\n```\r\n\r\nWe should write:\r\n\r\n```text\r\nSablierV2Linear__UnitTest__FunctionName\r\n```\r\n\r\nTo better reflect the test tree hierarchy (the function directories are nested under the `unit` directory).","createdAt":"2022-06-09T07:54:29Z","labels":[],"number":29,"repository":"sablier-labs/lockup","state":"closed","title":"Reverse order of reference in testing contract names","type":"issue","updatedAt":"2022-06-16T12:33:47Z","url":"https://github.com/sablier-labs/lockup/issues/29"},{"author":"PaulRBerg","body":"The word \"length\" used in the context of segment arrays makes it a bit confusing - the length may refer to the array length, or it may refer to some bespoke property of the segment itself.\r\n\r\nBy referring to the length of the segment arrays as \"count\", we would erase any doubts.","createdAt":"2022-06-07T17:43:54Z","labels":[],"number":26,"repository":"sablier-labs/lockup","state":"closed","title":"Refactor \"length\" references to \"count\"","type":"issue","updatedAt":"2022-06-10T07:27:50Z","url":"https://github.com/sablier-labs/lockup/issues/26"},{"author":"PaulRBerg","body":"For running tests. We can start from @cleanunicorn's work on this:\r\n\r\nhttps://github.com/cleanunicorn/ethereum-smartcontract-template/blob/8de4bf83b643126257a512e65972f3e264635472/.github/workflows/ci.yml","createdAt":"2022-06-07T15:28:08Z","labels":[],"number":24,"repository":"sablier-labs/lockup","state":"closed","title":"Add GitHub Actions CI","type":"issue","updatedAt":"2022-06-17T17:19:54Z","url":"https://github.com/sablier-labs/lockup/issues/24"},{"author":"PaulRBerg","body":"## Description\r\n\r\nThus far, we have only written unit tests with specified input values. We should also write fuzz tests to stress-test the Sablier functions with random inputs.\r\n\r\n## Implementation\r\n\r\nRewrite the deepest branches in the test trees to use fuzzed amounts instead of hardcoded values. The rationale is that the deepest branches are the ones in which all function checks pass, hence the scenario in which there is the greatest variability in the function input arguments.\r\n\r\nThis does not mean that only the successful function executions should be fuzzed, only that this is where I think most of the fuzzing efforts will go to.","createdAt":"2022-06-07T14:43:08Z","labels":[],"number":22,"repository":"sablier-labs/lockup","state":"closed","title":"Write fuzz tests","type":"issue","updatedAt":"2023-01-05T13:28:08Z","url":"https://github.com/sablier-labs/lockup/issues/22"},{"author":"PaulRBerg","body":"This isn't trivial because the pro contracts expect the `segmentMilestones` to be unix timestamps. There are two work-arounds:\r\n\r\n1. Compute the unix timestamps dynamically in `createWithDuration`\r\n2. Rewrite the entire contract to only accept time deltas rather than unix timestamps","createdAt":"2022-06-07T10:42:45Z","labels":[],"number":20,"repository":"sablier-labs/lockup","state":"closed","title":"Implement \"createWithDuration\" in SablierV2Pro","type":"issue","updatedAt":"2022-06-18T17:59:31Z","url":"https://github.com/sablier-labs/lockup/issues/20"},{"author":"PaulRBerg","body":"It looks like [DSTest](https://github.com/dapphub/ds-test/blob/master/src/test.sol) does not follow the [industry standard of putting the expected value before the actual value](https://stackoverflow.com/questions/2404978/why-are-assertequals-parameters-in-the-order-expected-actual).","createdAt":"2022-06-07T09:59:02Z","labels":[],"number":19,"repository":"sablier-labs/lockup","state":"closed","title":"Swap order of expected + actual arguments in \"assertEq\" statements","type":"issue","updatedAt":"2022-06-09T07:12:25Z","url":"https://github.com/sablier-labs/lockup/issues/19"},{"author":"PaulRBerg","body":"The `testCreate__StopTimeEqualToStartTimeAndCliffTime` function should be:\r\n\r\n1. Renamed to `testCreate__CliffTimeEqualToStopTime`\r\n2. Rewritten such that the cliff time is equal to the stop time but is not equal to the start time","createdAt":"2022-06-02T15:22:17Z","labels":[],"number":13,"repository":"sablier-labs/lockup","state":"closed","title":"Fix the test when the cliff time is equal to the stop time in the `create` function tests for `SablierV2Cliff`","type":"issue","updatedAt":"2022-06-03T14:36:35Z","url":"https://github.com/sablier-labs/lockup/issues/13"},{"author":"PaulRBerg","body":"The fact that that they are \"default\" values is implied by their name being in uppercase.","createdAt":"2022-05-31T13:06:15Z","labels":[],"number":12,"repository":"sablier-labs/lockup","state":"closed","title":"Remove the \"DEFAULT_\" prefix from the testing constants","type":"issue","updatedAt":"2022-06-03T14:04:57Z","url":"https://github.com/sablier-labs/lockup/issues/12"},{"author":"PaulRBerg","body":"The issue with the current implementation is that it expects the token amounts to be compatible with the PRBMath `UD60x18` number format (which uses 18 decimals):\r\n\r\nhttps://github.com/sablierhq/v2-core/blob/1527035a7dfdafecab971ad7d41889c5868022c6/src/SablierV2Linear.sol#L89\r\n\r\nThis won't work with non-18-decimal tokens, such as USDC, which uses 6 decimals.","createdAt":"2022-05-31T10:58:48Z","labels":[],"number":11,"repository":"sablier-labs/lockup","state":"closed","title":"Check that \"getWithdrawableAmount\" works with non-18-decimal tokens","type":"issue","updatedAt":"2023-04-02T16:41:02Z","url":"https://github.com/sablier-labs/lockup/issues/11"},{"author":"PaulRBerg","body":"So that we can give it a different value based on what chain we deploy to, but at the same time keep the benefit of a low gas overhead.","createdAt":"2022-05-31T10:30:03Z","labels":[],"number":10,"repository":"sablier-labs/lockup","state":"closed","title":"Make the maximum segment count an immutable variable","type":"issue","updatedAt":"2022-06-17T15:33:52Z","url":"https://github.com/sablier-labs/lockup/issues/10"},{"author":"PaulRBerg","body":"https://github.com/foundry-rs/forge-std/pull/70","createdAt":"2022-05-31T09:05:18Z","labels":[],"number":9,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"changePrank\" instead of \"startPrank\" + \"stopPrank\"","type":"issue","updatedAt":"2022-06-03T14:32:11Z","url":"https://github.com/sablier-labs/lockup/issues/9"},{"author":"razgraf","body":"I'm proposing we add a variant to the withdraw method that allows routing claimed funds to a specified address.\r\n\r\n```solidity\r\nfunction withdrawTo(uint256 streamId, uint256 amount, address destination) external;\r\n```\r\n\r\nDX: It might be useful to have this for certain proxy patterns, erc4626 or purely integration utility\r\nUX: It allows us to add an extra (advanced) field to the withdraw form where a user could specify the destination of funds","createdAt":"2022-05-19T16:48:42Z","labels":[],"number":5,"repository":"sablier-labs/lockup","state":"closed","title":"Variants of the \"withdraw\" method","type":"issue","updatedAt":"2022-05-19T16:50:21Z","url":"https://github.com/sablier-labs/lockup/issues/5"},{"author":"PaulRBerg","body":"`> 0 == false` is more gas efficient than `== 0`.","createdAt":"2022-05-03T11:39:20Z","labels":[],"number":3,"repository":"sablier-labs/lockup","state":"closed","title":"Use \"> 0 == false\" instead of \"== 0\"","type":"issue","updatedAt":"2022-06-03T14:10:04Z","url":"https://github.com/sablier-labs/lockup/issues/3"},{"author":"razgraf","body":"As discussed with @PaulRBerg we might want to allow a native-sender (so not a proxy-sender) to cancel a stream they started. \r\n\r\nWhile this use-case will have no possible triggers through our current client application, integrators or us in a future system (e.g. airstreams) may decide to allow this type of non-proxy setup. Therefore, the app could allow cancelations for these senders. \r\n\r\nA question remains whether or not to fully support this type of \"sender\" at the app level (show streams in dashboard, allow all other sender actions e.g. withdraw).\r\n\r\nTasks:\r\n- [ ] Allow native-sender to perform `cancel` and `cancelMultiple`\r\n- [ ] Research if the architecture of the app would now support a merged dashboard (native-sender + proxy-sender) and/or other actions e.g. withdraw-as-sender","createdAt":"2023-08-02T09:36:17Z","labels":["type: feature"],"number":539,"repository":"sablier-labs/interfaces","state":"closed","title":"Provide the ability for a native-sender to cancel a stream","type":"issue","updatedAt":"2023-08-09T12:16:55Z","url":"https://github.com/sablier-labs/interfaces/issues/539"},{"author":"PaulRBerg","body":"## Description\r\n\r\nThis is a priority0 bug because it prevented the Utopia team from creating a stream via Safe on Polygon. This is what they did:\r\n\r\n1. On a Safe with 2/3 signers\r\n2. Create linear stream with range\r\n3. Sign with wallet 1, signature goes through\r\n4. Sign with wallet 2, message confirmed but the error above appears\r\n5. Can see the Permit2 confirmed message here: https://app.safe.global/transactions/messages?safe=matic:0xa8a563E9b243a7672F2b9262c5324e53f616e53b\r\n\r\nThey did not look into the console logs unfortunately but hopefully this error was logged on Sentry?\r\n\r\n## Screenshot\r\n\r\n<img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/5b4cfc1d-becd-4831-b218-00395bfae597\" width=\"300\"/>\r\n","createdAt":"2023-08-01T20:18:00Z","labels":["type: bug","priority: 0"],"number":538,"repository":"sablier-labs/interfaces","state":"closed","title":"TypeError: Cannot read properties of null (reading 'length')","type":"issue","updatedAt":"2023-08-02T13:28:50Z","url":"https://github.com/sablier-labs/interfaces/issues/538"},{"author":"razgraf","body":"Errors that come up from a user closing the wallet interface or rejecting a signature/transaction request aren't worth tracking. They're harmless logs.\r\n\r\n[Sentry](https://sablier-labs.sentry.io/issues/4266384942/?project=4504854258450432&query=is%3Aignored&referrer=issue-stream&stream_index=1) still gets them as part of our crashlytics tracking.\r\n\r\nTo prevent them from being sent we should add some custom logic in the global [error-logging utility](https://github.com/sablier-labs/v2-interfaces/blob/4853de0cd9e5e2a6dd1ccba6541eeecfdf714cee/packages/utils/src/vendors/crash.ts#L28).","createdAt":"2023-07-31T15:10:07Z","labels":[],"number":537,"repository":"sablier-labs/interfaces","state":"closed","title":"Stop tracking \"User rejected request\"","type":"issue","updatedAt":"2023-08-03T17:34:54Z","url":"https://github.com/sablier-labs/interfaces/issues/537"},{"author":"razgraf","body":"If an unsupported network is chosen, we'll prevent people from interacting with the app.\r\n\r\n<img width=\"456\" alt=\"Screenshot 2023-07-31 at 17 48 14\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/b85216ee-abb1-4dc9-bd21-4b4f2975d201\">\r\n\r\nIn the latest version of the app, we still have a few places where the UI doesn't handle this really well. For example, issues like [this one](https://sablier-labs.sentry.io/issues/4327702191/?project=4504854258450432&query=is%3Aunresolved&referrer=issue-stream&stream_index=15) are most likely caused by the UI trying to query contracts for an unknown `chainId`.\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/4853de0cd9e5e2a6dd1ccba6541eeecfdf714cee/apps/client/src/utils/contracts.ts#L69-L71\r\n\r\nWe should handle the edge-case by hiding/preventing interactions with certain parts of the UI if the account `status` is [`unsure`](https://github.com/sablier-labs/v2-interfaces/blob/4853de0cd9e5e2a6dd1ccba6541eeecfdf714cee/apps/client/src/contexts/Web3/logic.ts#L133).\r\n\r\n---\r\n\r\n[Sentry error](https://sablier-labs.sentry.io/issues/4315166539/?project=4504854258450432&query=is%3Aunresolved&referrer=issue-stream&stream_index=0)\r\n\r\n<details>\r\n<summary>Snippets from Sentry</summary>\r\n\r\n![Sentry](https://github.com/sablier-labs/v2-interfaces/assets/15740806/06568062-15e7-437a-ab79-a1f554f4255e)\r\n\r\n</details>\r\n\r\n","createdAt":"2023-07-31T14:53:08Z","labels":[],"number":536,"repository":"sablier-labs/interfaces","state":"closed","title":"Handle \"wrong chain\" error in the entire UI","type":"issue","updatedAt":"2023-08-11T13:23:45Z","url":"https://github.com/sablier-labs/interfaces/issues/536"},{"author":"PaulRBerg","body":"Requested by [TokenDao_](https://twitter.com/TokenDao_) Twitter user.\r\n\r\nhttps://tokenlists.org/token-list?url=list.tkn.eth","createdAt":"2023-07-28T20:22:12Z","labels":[],"number":533,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"list.tkn.eth\" token list","type":"issue","updatedAt":"2023-08-03T13:30:26Z","url":"https://github.com/sablier-labs/interfaces/issues/533"},{"author":"razgraf","body":"<img width=\"664\" alt=\"Screenshot 2023-07-26 at 01 47 14\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/50d69708-38d0-4116-9930-0d0d75f6d834\">\r\n","createdAt":"2023-07-25T22:47:29Z","labels":["type: bug"],"number":531,"repository":"sablier-labs/interfaces","state":"closed","title":"Check ENS resolution in the search modal","type":"issue","updatedAt":"2023-08-03T17:34:53Z","url":"https://github.com/sablier-labs/interfaces/issues/531"},{"author":"razgraf","body":"In order to prevent the app from having to upgrade every time a new community token list is deployed, we need a static QID instead of the dynamic/deployment-specific one. \r\n\r\nWe should investigate [Pinata's](https://www.pinata.cloud/) SDK or simply have a manual process if the SDK isn't worth implementing or it is too costly. I believe @gavriliumircea may already have some intel on this due to his past research into IPFS deployments for the app.\r\n\r\nTagging @maxdesalle for visibility as he has been leading the efforts with the community token list.","createdAt":"2023-07-25T21:49:43Z","labels":[],"number":530,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement IPFS static pins for the community token lists","type":"issue","updatedAt":"2023-07-31T15:12:44Z","url":"https://github.com/sablier-labs/interfaces/issues/530"},{"author":"razgraf","body":"We've gathered a few Sentry issues over the past week. The task is to resolve this first set of Sentry issues.","createdAt":"2023-07-25T21:47:03Z","labels":["type: bug"],"number":529,"repository":"sablier-labs/interfaces","state":"closed","title":"Resolve first set of Sentry issues (July)","type":"issue","updatedAt":"2023-08-11T13:25:29Z","url":"https://github.com/sablier-labs/interfaces/issues/529"},{"author":"razgraf","body":"When the browser wallet isn't connected, WC starts acting up. It prints a ton of \"can't establish connection to `wss bridge.walletconnect...`\" errors in the console.\r\n\r\nThe issue has been encountered by others (e.g. https://github.com/wagmi-dev/references/issues/427) and may have a solution once https://github.com/wagmi-dev/references/issues/439 is resolved.\r\n\r\nWe should keep an eye on the future wagmi releases for this.","createdAt":"2023-07-25T21:27:41Z","labels":["type: bug"],"number":528,"repository":"sablier-labs/interfaces","state":"closed","title":"Monitor the WalletConnect socket issue","type":"issue","updatedAt":"2023-07-30T20:30:00Z","url":"https://github.com/sablier-labs/interfaces/issues/528"},{"author":"razgraf","body":"https://docs.sablier.com/contracts/v2/deployments#base\r\n\r\n- [ ] Subgraph\r\n- [ ] RPC provider\r\n- [ ] Chain assets (including the asset repository)\r\n- [ ] App support","createdAt":"2023-07-25T17:36:57Z","labels":["type: feature","priority: 1"],"number":527,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for Base in the client app","type":"issue","updatedAt":"2023-08-07T09:18:24Z","url":"https://github.com/sablier-labs/interfaces/issues/527"},{"author":"razgraf","body":"If a form end date is set very close to the current time, we bump into false-positives checks.\r\n\r\nThe field itself may pass initial validations, but if the user waits for enough time such that `end date < current time`, the final form machine will begin processing the transaction - there currently is no final re-check for the dates. Of course, it will fail at a contract level during the simulation check, so the TX will not go through.\r\n\r\n<img width=\"561\" alt=\"Screen Shot 2023-07-22 at 14 33 28\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/66c03aa5-f80f-4729-a8b8-f9434bbcef23\">\r\n\r\n![image (4)](https://github.com/sablier-labs/v2-interfaces/assets/15740806/671eabeb-b85d-4ff5-8353-4ad4de14bb29)\r\n\r\n### Solution\r\n\r\nAdd an extra check for dates in the `onCheck` steps for the form machines.\r\n","createdAt":"2023-07-22T12:38:37Z","labels":["type: bug","priority: 0"],"number":523,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-check dates before submiting create stream forms","type":"issue","updatedAt":"2023-07-25T21:28:20Z","url":"https://github.com/sablier-labs/interfaces/issues/523"},{"author":"PaulRBerg","body":"The current confirmation models wrap by letters:\r\n\r\n| Example 1 | Example 2 |\r\n|--------|--------|\r\n| <img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2596d592-da01-4c75-96f5-c6e879f8ea36\" width=\"100\" height=\"230\"/> | <img src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ae429005-2c24-4d95-a696-f21751fa8aa9\" width=\"100\" height=\"230\"/> |\r\n\r\nIt would be clearer to wrap by word instead. It looks like [`word-wrap`](https://www.w3schools.com/cssref/css3_pr_word-wrap.php) can be used for this.\r\n","createdAt":"2023-07-21T19:32:40Z","labels":[],"number":522,"repository":"sablier-labs/interfaces","state":"closed","title":"Wrap by word instead of letters in confirmation modals","type":"issue","updatedAt":"2023-08-03T17:41:29Z","url":"https://github.com/sablier-labs/interfaces/issues/522"},{"author":"PaulRBerg","body":"The [current example](https://app.sablier.com/stream/LL-5-40/) use 245 million DAI, which does not match the typical numbers mentioned when shilling Sablier for the first time.\r\n\r\nSomething like 3K would be a better fit (given that it would also match the promo video).","createdAt":"2023-07-21T19:22:39Z","labels":[],"number":521,"repository":"sablier-labs/interfaces","state":"closed","title":"Show a more realistic stream example","type":"issue","updatedAt":"2023-08-03T17:34:53Z","url":"https://github.com/sablier-labs/interfaces/issues/521"},{"author":"PaulRBerg","body":"As per @maxdesalle's feedback on Slack\r\n\r\n<img width=\"464\" alt=\"SCR-20230719-omtj\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/91427fa7-8f2a-45b4-bcac-605a26f97ce2\">\r\n","createdAt":"2023-07-19T14:28:51Z","labels":["type: feature","priority: 1"],"number":520,"repository":"sablier-labs/interfaces","state":"closed","title":"Add paragraph about \"What is streaming?\" on the landing page","type":"issue","updatedAt":"2023-07-21T18:30:26Z","url":"https://github.com/sablier-labs/interfaces/issues/520"},{"author":"PaulRBerg","body":"Let users create streams with ETH, MATIC, etc., by using the `wrapAndCreate` functions in `ProxyTarget`:\r\n\r\nhttps://github.com/sablier-labs/v2-periphery/blob/d9c6943323cfc5508c8679c1cd45d5fa41d6095a/src/SablierV2ProxyTarget.sol#L352","createdAt":"2023-07-16T10:11:10Z","labels":["type: feature","backlog"],"number":519,"repository":"sablier-labs/interfaces","state":"closed","title":"Support for \"wrapAndCreate\" functionality","type":"issue","updatedAt":"2024-01-04T15:49:12Z","url":"https://github.com/sablier-labs/interfaces/issues/519"},{"author":"PaulRBerg","body":"Tasks:\r\n\r\n- Replace \"Spearbit\" by \"Cantina\" on the landing page\r\n- Replace \"Immunefi\" by \"Bug Bounty\" (and link to the [SECURITY](https://github.com/sablier-labs/v2-core/blob/main/SECURITY.md) page)\r\n\r\nExplanations:\r\n\r\n- A branch of Spearbit rebranded to Cantina, and we ended up getting audited by the latter not the former. It's Cantina which appears in the [audit report](https://github.com/sablier-labs/audits/tree/90193500138ec8cb8d5635088311f0610e10d8a6/v2-core).\r\n- Filling out the Immunefi sign up form takes hours; I just can't find the time to do it and honestly I don't think it's worth it given how (comparatively) small our maximum bounty payout is\r\n\r\n<img width=\"300\" alt=\"SCR-20230711-pzyy\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b0452736-2366-4284-8caa-205c5bcbb56d\">\r\n","createdAt":"2023-07-11T15:19:45Z","labels":["priority: 3"],"number":516,"repository":"sablier-labs/interfaces","state":"closed","title":"Update auditors on the landing page","type":"issue","updatedAt":"2023-07-11T16:51:19Z","url":"https://github.com/sablier-labs/interfaces/issues/516"},{"author":"PaulRBerg","body":"I've just bumped PRBProxy to v4.0.1 (to address Iaroslav's audit):\r\n\r\nhttps://github.com/PaulRBerg/prb-proxy/releases/tag/v4.0.1\r\n\r\nThe new address of the proxy registry is this:\r\n\r\n0x584009E9eDe26e212182c9745F5c000191296a78\r\n\r\nFor the ABIs, see [prbproxy.com](https://prbproxy.com/).","createdAt":"2023-07-10T14:39:00Z","labels":["type: feature","priority: 0"],"number":514,"repository":"sablier-labs/interfaces","state":"closed","title":"Update to PRBProxy v4.0.1","type":"issue","updatedAt":"2023-07-11T16:20:11Z","url":"https://github.com/sablier-labs/interfaces/issues/514"},{"author":"PaulRBerg","body":"`withdrawMultiple` is a super useful feature for recipients with lots of streams, and it's available for all users, not just proxy owners:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/68aa3a08ecbb3f0d3819e41a6b232884874fc6a6/src/abstracts/SablierV2Lockup.sol#L280C14-L288\r\n\r\nThis feature has been requested by several V1 users.","createdAt":"2023-07-10T09:49:47Z","labels":["type: feature","backlog"],"number":513,"repository":"sablier-labs/interfaces","state":"closed","title":"Support for \"withdrawMultiple\" functionality","type":"issue","updatedAt":"2023-10-16T10:00:21Z","url":"https://github.com/sablier-labs/interfaces/issues/513"},{"author":"razgraf","body":"Both app and landing page feature an example stream, so people can see what it looks like. Create one for 10 years (start date 2-3 years in the past), linear or cliff and link it in the app (links object in `package/constants`).","createdAt":"2023-07-07T15:00:15Z","labels":[],"number":511,"repository":"sablier-labs/interfaces","state":"closed","title":"Create example stream","type":"issue","updatedAt":"2023-07-14T08:48:39Z","url":"https://github.com/sablier-labs/interfaces/issues/511"},{"author":"razgraf","body":"Task is to bump wagmi and viem versions pre-launch.","createdAt":"2023-07-07T14:34:10Z","labels":[],"number":510,"repository":"sablier-labs/interfaces","state":"closed","title":"Bump wagmi, viem pre-launch","type":"issue","updatedAt":"2023-07-09T21:00:20Z","url":"https://github.com/sablier-labs/interfaces/issues/510"},{"author":"razgraf","body":"We should code a retry policy in v2, similar to v1 e.g. try to query decentralized subgraph, if it fails query the hosted one instead. We'll have to maintain copies (one hosted, one decentralized) but better be safe than sorry.","createdAt":"2023-07-06T06:15:48Z","labels":[],"number":508,"repository":"sablier-labs/interfaces","state":"closed","title":"Add redundancy rules to the subgraph query policy","type":"issue","updatedAt":"2023-12-19T23:26:13Z","url":"https://github.com/sablier-labs/interfaces/issues/508"},{"author":"PaulRBerg","body":"## Chains\r\n\r\n- [ ] Arbitrum\r\n- [ ] Avalanche\r\n- [ ] BSC\r\n- [ ] Gnosis\r\n- [ ] Goerli\r\n- [ ] Mainnet\r\n- [ ] Optimism\r\n- [ ] Polygon\r\n\r\n## References\r\n\r\n### Sablier\r\n\r\nThe addresses for all Sablier V2 deployments can be found here:\r\n\r\nhttps://docs.sablier.com/contracts/v2/addresses\r\n\r\n### PRBProxy\r\n\r\n`PRBProxyRegistry` is deployed at the same address on all chains: 0xD42a2bB59775694c9Df4c7822BfFAb150e6c699D.\r\n\r\nSee the README for more details:\r\n\r\nhttps://github.com/PaulRBerg/prb-proxy#deployments","createdAt":"2023-07-05T14:44:27Z","labels":["type: feature","priority: 1"],"number":506,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate multi-chain deployments","type":"issue","updatedAt":"2023-07-06T09:00:36Z","url":"https://github.com/sablier-labs/interfaces/issues/506"},{"author":"razgraf","body":"The protocol has been recently deployed on a couple of chains, including Ethereum Mainnet. We should add support for these chains, using the addresses listed in our [deployments](https://docs.sablier.com/contracts/v2/addresses) breakdown.\r\n\r\nThe checklist:\r\n- [ ] Is the Sablier V2 Protocol deployed? (core and periphery)\r\n- [ ] Is the PRBProxy deployed on that chain?\r\n- [ ] Is the subgraph deployed on that chain and pointing correctly to the addresses?","createdAt":"2023-07-04T16:26:15Z","labels":["type: feature","priority: 1"],"number":505,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for all prepared chains","type":"issue","updatedAt":"2023-07-07T06:45:36Z","url":"https://github.com/sablier-labs/interfaces/issues/505"},{"author":"razgraf","body":"The \"how to\" section in our landing website has an outdated screenshot. It should be updated to reflect the changes to the stream profile page.\r\n\r\n![Screenshot 2023-07-04 at 01 49 58](https://github.com/sablier-labs/v2-interfaces/assets/15740806/3d590f4c-fcdd-474a-9d8d-55c790d7dc61)\r\n","createdAt":"2023-07-03T22:50:38Z","labels":[],"number":503,"repository":"sablier-labs/interfaces","state":"closed","title":"Update screenshots in the `landing` app","type":"issue","updatedAt":"2023-07-05T14:52:05Z","url":"https://github.com/sablier-labs/interfaces/issues/503"},{"author":"razgraf","body":"The task is to rename all workspace items from the `@sablier/package` and `@sablier/app` to `@sablier/v2-package` and `@sablier/v2-app` respectively.\r\n\r\nUnfortunately this change reverts back the simplifications applied in #83 and specifically [#c7f3b65](https://github.com/sablier-labs/v2-interfaces/commit/c7f3b65f0b3d7610abf2023d2edc79760ab4e67c#diff-0b280a445be167f54cd916c0718c952b8e0d4ca9621903d05eec25efd4c6ed6d). \r\n\r\nTS doesn't recognize those packages any more because they don't share the exact same name as the physical package - meaning they don't abide by the first rule `\"@sablier/*\": [\"packages/*/src\"]` of tsconfig.\r\n\r\n\r\n\r\n----\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/455\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 24, 2023</sup>\r\n</div>","createdAt":"2023-07-02T17:23:18Z","labels":[],"number":498,"repository":"sablier-labs/interfaces","state":"closed","title":"Prefix all packages with `v2` (e.g. `@sablier/v2-*`)","type":"issue","updatedAt":"2023-07-02T17:47:54Z","url":"https://github.com/sablier-labs/interfaces/issues/498"},{"author":"razgraf","body":"After #488, to support #391 we could implement a new design for the proxy manager.\r\n\r\nRough mockup:\r\n![Proxy Manager](https://github.com/sablier-labs/v2-interfaces/assets/15740806/c10d0362-033c-49ce-8674-6654a6bb0c99)\r\n","createdAt":"2023-06-29T13:42:35Z","labels":[],"number":492,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-style the proxy manager","type":"issue","updatedAt":"2023-07-02T18:01:35Z","url":"https://github.com/sablier-labs/interfaces/issues/492"},{"author":"razgraf","body":"Following the discussion in #140 the task is to change the implementation of the stream circle (and helper elements) as such:\n\n- [x] the blue circle will now track the streamed amount progress (instead of elapsed time)\n- [x] the orange circle will keep tracking the withdrawn amount\n- [x] there will be an extra darker circle, beneath (Z axis) the blue circle, which will track the elapsed time\n- [x] the blue progress bars (stream profile, dashboard tables) will now track streamed amount progress (instead of elapsed time)\n- [x] add a legend to explain the colors \n\n\n\n----\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/140\n\n<div type='discussions-op-text'>\n\n<sup>Originally posted by **razgraf** December 15, 2022</sup>\n</div>","createdAt":"2023-06-29T13:23:18Z","labels":["priority: 1"],"number":491,"repository":"sablier-labs/interfaces","state":"closed","title":"Change functionality and semantics of the Stream Circle","type":"issue","updatedAt":"2023-07-02T16:41:17Z","url":"https://github.com/sablier-labs/interfaces/issues/491"},{"author":"razgraf","body":"The OG Meta Image is not being resolved correctly by meta tag explorers. The only deployment this can be tested with is the staging/sablier-beta one, as we've specifically changed the base domain (to mirror the vercel deployment).\r\n\r\nFrom initial investigation, it looks like the site-wide meta tags are overlapped with the page-specific ones (as in the site meta image overrides the stream profile meta image). This may be the cause of the problem.","createdAt":"2023-06-29T13:18:25Z","labels":["type: bug","priority: 2"],"number":490,"repository":"sablier-labs/interfaces","state":"closed","title":"OG Meta Image not showing up in meta-tags explorers","type":"issue","updatedAt":"2023-07-02T16:41:17Z","url":"https://github.com/sablier-labs/interfaces/issues/490"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/471\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 26, 2023</sup>\r\nIt would be nice to make the \"Create stream\" button more prominent, e.g. by making it orange, so that we increase the likelihood of users completing the create-stream process:\r\n\r\n<img width=\"500\" alt=\"SCR-20230626-jzeq\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b3a8cf5d-f62c-4dda-be9c-8335c3746392\">\r\n\r\nScenario:\r\n\r\n1. Alice opens Sablier for the first time\r\n2. Alice signs tx for granting ERC-20 approval to Permit2\r\n3. Alice switches context (e.g. opens Twitter)\r\n4. Alice goes back to the create stream form</div>","createdAt":"2023-06-27T10:12:37Z","labels":["priority: 3"],"number":487,"repository":"sablier-labs/interfaces","state":"closed","title":"Experiment with the style of the \"Create stream\"  button","type":"issue","updatedAt":"2023-06-29T15:04:29Z","url":"https://github.com/sablier-labs/interfaces/issues/487"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/470\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 25, 2023</sup>\r\n## Context\r\n\r\nIn https://github.com/sablier-labs/v2-interfaces/discussions/380, @razgraf articulated an explanation in favor of an explicit, separate \"Create account\" step for deploying proxies before being able to use Sablier:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/discussions/380#discussioncomment-6153185\r\n\r\nOne of Razvan's assumptions was that entirely abstracting away the proxy is not possible (post-deployment), but after testing the client app for a few weeks, I now think that that is achievable.\r\n\r\n## References\r\n\r\nLet's first hash out a list of all parts of the UI where the proxy is currently made explicit:\r\n\r\n- In the wallet button, the proxy appears underneath the EOA\r\n- In the wallet modal\r\n- In the stream profile, it says \"Your Proxy\"\r\n- In the search view, it says \"Sender (Proxy)\", and it asks the user to provide the proxy address\r\n- In the \"Details\" overlay, the proxy address is referenced as the stream sender (\"streaming to\")\r\n\r\nLMK if I've missed any!\r\n\r\n### Notes:\r\n\r\n- Re \"Create account\" modal: I will leave this aside since we've talked about it at length separately.\r\n- Re \"Manage proxy\" modal: this will need to remain implemented to account for the edge case when the proxy is deployed but the plugin is not installed. However, the wording can be slimmed down.\r\n\r\n## Problem\r\n\r\nMaking the proxy explicit and referencing it everywhere is problematic:\r\n\r\n1. First and foremost: it adds cognitive load onto non-technical users. Rather than focusing on educating these users on the nature of lockup streaming (which is a difficult thing to do, anyway!), we are also giving them homework on proxies. And this is a tall ask - I know Solidity developers who grapple with the forwarding proxy design.\r\n2. Stuffing the app with proxy references makes it more difficult to use and understand:\r\n     - When searching streams, how are users supposed to find the proxy address of a particular EOA? Go to Etherscan and call `getProxy`? People know about EOAs, not proxies.\r\n     - When recipients open the app, they see an alien address streaming tokens to them instead of the typical address they thought their payer had\r\n3.  The term \"proxy\" refers to different technical designs in Ethereum, and people dunk on most of them [^1]\r\n    - Unfortunately for us, the \"upgradeable proxy\" is the most popular type of proxy, which means that some Sablier users (many?) may be misled into considering Sablier an upgradeable protocol\r\n\r\n## Solution\r\n\r\n1. In the subgraph, normalize the streams so that proxy-originating streams are added to the EOA's list of streams\r\n    - Add an ancillary property for tracking the proxy that created the stream, which is null when the sender creates streams directly\r\n    - Optionally, add a boolean `rawSender`\r\n2. In general: display only EOAs regardless of whether the raw sender (in V2 Core) is the EOA's proxy\r\n3. In the search view: allow search by EOA only.\r\n4. For every sender action, check the raw sender;\r\n    - If `sender == proxy`: call V2 Periphery via proxy\r\n    - If `sender != proxy`: call V2 Core directly\r\n5. Keep mentioning the proxy in the wallet modal (but not the wallet button), as well as in various informational tooltips.\r\n\r\n## Concluding Remarks\r\n\r\nThere will be challenges in any case, but abstracting away the proxy may come with fewer downsides compared to making it glaringly explicit.\r\n\r\nBesides the refactoring cost, the only challenge introduced by my suggested solution would be one of *reverse synchronization* with the crypto ecosystem. People may look on Etherscan, see the raw sender (i.e., the proxy), open the Sablier UI, and try to search by that proxy address assuming that it is a direct user.\r\n\r\nHowever: (i) these are read-only users, and (ii) these are external users, and (iii) reverse lookups should be rare.\r\n\r\n[^1]: https://twitter.com/optimizoor/status/1671648226439741442</div>","createdAt":"2023-06-26T21:14:03Z","labels":["priority: 1"],"number":486,"repository":"sablier-labs/interfaces","state":"closed","title":"Abstract away the proxy (show the raw sender address instead)","type":"issue","updatedAt":"2023-06-30T11:49:35Z","url":"https://github.com/sablier-labs/interfaces/issues/486"},{"author":"razgraf","body":"This is a meta issue that includes all discussions and smaller issues that stemmed from #274.\r\n\r\n## Tasks\r\n\r\n- [x] Based on #274 replace the stream **alias** system (in both v2-interfaces and v2-subgraphs) with the `LL-<chainId>-<tokenId>` and `LD-<chainId>-<tokenId>` schemas\r\n   - Related: keep them uppercase if possible\r\n- [x] Based on #274 replace titles including \"[Category]\" with \"Lockup [Category]\"\r\n- [x] Based on #274 handle individual cases using the rules as much as possible (but situationally adapt where necessary)\r\n- [x] Based on #456 try to capitalize the usage of stream categories (i.e. **\"L**ockup **L**inear or **D**ynamic) \r\n- [ ] Based on #427 refactor the Transaction Modal descriptions to use capitalized terms and prevent repetition of the \"stream\" particle\r\n- [x] Based on #428 refactor the label from the 3rd column of the dashboard table to say \"Linear\" / \"Dynamic\" and \"Cliff of X\" while the label on the 1st column (above stream status) will mention the shorter stream `id`","createdAt":"2023-06-26T18:05:29Z","labels":["priority: 1"],"number":484,"repository":"sablier-labs/interfaces","state":"closed","title":"Include the `lockup` prefix in identifiers and titles (Meta Issue)","type":"issue","updatedAt":"2023-06-30T11:54:30Z","url":"https://github.com/sablier-labs/interfaces/issues/484"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/416\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\nThe FAQ on the landing page looks awesome, and I appreciate the effort put into building it. However, there are a couple of problems with it:\r\n\r\n1. Introduces a choice about which FAQ (landing page, or the [docs version](https://sablier-v2-docs.vercel.app/faq) to reference when someone asks us a generic question (e.g., on Discord).\r\n2. This FAQ is hidden at the bottom of a page (\"Organizations\") that it is hidden past another page (the main landing page). Unless we have millions of visitors to our website, very few people will end up reading this; people have decreasingly shorter attention spans in the modern world.\r\n3. If we wanted to share a link to this FAQ directly, it doesn't seem possible to auto-scroll to this section using the current implementation (I tried adding the `#Frequently-asked-questions` suffix in the URL).\r\n4. We will need to keep it in sync with the docs version. This increases the maintenance and coordination costs.\r\n\r\nGiven the above, I suggest we remove this section from the landing page and keep our FAQ exclusively on the docs website.\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-06-20 at 2 01 43 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/fbcbad86-39d2-413e-bf4c-49680e03a921\"></div>","createdAt":"2023-06-26T17:57:19Z","labels":[],"number":483,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename FAQ to \"Q&A Corner\" in the product landing page","type":"issue","updatedAt":"2023-06-29T15:11:27Z","url":"https://github.com/sablier-labs/interfaces/issues/483"},{"author":"razgraf","body":"Based on the discussion below the task is to refactor the following words (mainly from the stream details panel**s** - both the cover and the stationary panel)\r\n\r\n| From | To | Location |\r\n|--------|--------|--------|\r\n| Characteristics | Overview | Details Cover |\r\n| Details | Attributes | Right-side panel in Stream Profile |\r\n| Network | Chain | Everywhere in the app | \r\n| Milestones | Steps | Locale `form.label.steps` and check for other occurrences | \r\n| Active | Streaming | Stream statuses | \r\n\r\n---\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/463\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 24, 2023</sup>\r\n</div>","createdAt":"2023-06-26T17:29:58Z","labels":["priority: 2"],"number":482,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor certain words to improve the app's copy","type":"issue","updatedAt":"2023-06-29T15:11:26Z","url":"https://github.com/sablier-labs/interfaces/issues/482"},{"author":"razgraf","body":"In the Details panel of the Stream Profile there's a characteristic called \"Parties\" that describes the to and from addresses for a particular stream.\r\n\r\nThe task is to split those in \"Sender\" and \"Recipient\".\r\nPotentially, the first one will also include \"Proxy\" now that we'll be able to track proxies easier using the subgraph (cause they're immutable).\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/459\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 24, 2023</sup>\r\n## Suggestion\r\n\r\nThere's enough space in the \"Details\" overlay to split the \"Parties\" entry into two entries:\r\n\r\n- \"Sender\"\r\n- \"Recipient\"\r\n\r\nMuch clearer and declarative this way, IMHO. Also worth noting that \"Parties\" is a technical term, which is typically used in legal contracts, and that non-native English speakers may also interpret it as the plural of \"party\" (as in, celebration).\r\n\r\n## Screenshot\r\n\r\n<img width=\"300\" alt=\"SCR-20230624-pwhv\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2db1416a-2e34-48a0-80e2-35c83ae5ebfc\">\r\n</div>","createdAt":"2023-06-26T16:48:48Z","labels":[],"number":481,"repository":"sablier-labs/interfaces","state":"closed","title":"Split \"Parties\" label to \"Sender and Recipient\"","type":"issue","updatedAt":"2023-06-29T15:04:28Z","url":"https://github.com/sablier-labs/interfaces/issues/481"},{"author":"razgraf","body":"Change the existing text to one of the suggested versions or something like:\r\n```\r\nApprove the Sablier app to use your TKN assets (via Permit2) to create streams.\r\n```\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/437\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 21, 2023</sup>\r\nThe UI asks the user to allow the Permit2 contract to spend the ERC-20 token:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-21 at 5 48 39 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/183306ee-e916-4c65-a92c-95b38c61132e\">\r\n\r\nHowever, the end user may not know anything about Permit2. For all we know, Sablier may be their first interaction with web3. Thus, a more sensible wording would be something like this:\r\n\r\n> Approve the Sablier app to handle your TKN assets (via Permit2)\r\n\r\nOr:\r\n\r\n> Allow the Sablier app to create the stream by approving the Permit2 contract to spend your TKN assets\r\n\r\nOr:\r\n\r\n> Sablier creates streams via a contract called Permit2, which you need to approve before being able to create the stream\r\n\r\nThe point is to clarify that Sablier will take care of the approval, not some third-party contract system the user may not be familiar with.</div>","createdAt":"2023-06-26T14:09:16Z","labels":[],"number":479,"repository":"sablier-labs/interfaces","state":"closed","title":"Change text in the Approval form box","type":"issue","updatedAt":"2023-06-29T15:04:28Z","url":"https://github.com/sablier-labs/interfaces/issues/479"},{"author":"razgraf","body":"Switch labels for `Start/end date` to `Fixed dates` in the duration input switch.\r\n![Screenshot 2023-06-26 at 17 02 17](https://github.com/sablier-labs/v2-interfaces/assets/15740806/728accb3-6f1c-475d-a654-da1fc5754890)\r\n\r\n\r\n---\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/424\r\n\r\n<div type='discussions-op-text'>\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\n</div>","createdAt":"2023-06-26T14:02:51Z","labels":[],"number":478,"repository":"sablier-labs/interfaces","state":"closed","title":"Change labels for `Start/end date` button","type":"issue","updatedAt":"2023-06-29T15:04:27Z","url":"https://github.com/sablier-labs/interfaces/issues/478"},{"author":"razgraf","body":"The task is to re-style the warning box inside the \"Manage proxy\" modal.\r\n\r\n- [ ] Make the border and color \"white\"\r\n- [ ] Rewrite the copy in a more \"friendly\" way\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/425\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\nThis is how the \"Manage proxy\" modal currently looks like when the user doesn't have a proxy (i.e. virtually all users opening Sablier V2 for the first time):\r\n\r\n<img width=\"350\" alt=\"Screenshot 2023-06-20 at 8 58 48 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/0b145114-a66a-4388-aed4-22dc73ecefe8\">\r\n\r\nThis is a bit \"scary\":\r\n\r\n- The warning icon is used\r\n- The term \"missing\" is used (in a financial context, missing ain't a good thing)\r\n\r\nSuggestions:\r\n\r\n- Use a neutral color (e.g. green, blue, or get rid of colors somehow)\r\n- Use a friendlier icon\r\n- Rewrite the copyright to avoid the word \"missing\"\r\n- Position this modal as a _stepping stone_ toward entering the Sablier universe, not as a chore</div>","createdAt":"2023-06-26T13:29:29Z","labels":[],"number":477,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-style the proxy manager warning","type":"issue","updatedAt":"2023-06-29T15:11:25Z","url":"https://github.com/sablier-labs/interfaces/issues/477"},{"author":"razgraf","body":"The task is to add a set of longer durations to the `MomentPicker` and `DatePicker`.\r\n\r\n- try to only use available units (e.g. 6 months needs to be defined as 180 days to avoid confusions with non-equal months)\r\n- @gavriliumircea the cypress tests may need some attention here, as I remember some of these date-chips being used\r\n\r\n---\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/422\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\nThese are the default durations currently suggested by the client app:\r\n\r\n<img width=\"595\" alt=\"Screenshot 2023-06-20 at 8 34 35 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/afd38056-59ee-419b-845f-642f0c5cdbf5\">\r\n\r\nHowever, because we are placing an emphasis on organizations with Sablier V2, it would be helpful to suggest longer durations. Suggestions:\r\n\r\n- Add \"2 years\"\r\n- Add \"6 months\" (i.e. 180 days)\r\n- Replace \"15 days\" with \"7 days\" (a week-long anchor seems more realistic)\r\n- Remove \"12 hours\"</div>","createdAt":"2023-06-26T13:26:48Z","labels":["priority: 2"],"number":476,"repository":"sablier-labs/interfaces","state":"closed","title":"Add longer default durations in the date inputs","type":"issue","updatedAt":"2023-06-29T15:04:26Z","url":"https://github.com/sablier-labs/interfaces/issues/476"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/415\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\nSince integrations (both front-end and back-end) will play a critical role in growing Sablier V2, it would be helpful to add a \"Docs\" button in the navbar in the landing page, which currently has these four buttons:\r\n\r\n<img width=\"538\" alt=\"Screenshot 2023-06-20 at 1 34 16 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/bad812dd-0161-49b5-8d4e-e799fad62b36\">\r\n\r\nTwo ideas:\r\n\r\n1. Just add \"Docs\" before \"Links\"\r\n2. Replace \"App\" by \"Docs\", and place \"Docs\" before \"Links\" </div>","createdAt":"2023-06-26T13:05:06Z","labels":[],"number":475,"repository":"sablier-labs/interfaces","state":"closed","title":"Add \"docs\" in the product landing page toolbar (desktop)","type":"issue","updatedAt":"2023-06-29T15:11:25Z","url":"https://github.com/sablier-labs/interfaces/issues/475"},{"author":"razgraf","body":"The task is to attach a link to Sablier's Canny in\r\n- [x] the product landing page\n- [x] the account area (top right) in the app, under a \"Request Feature\" button\n\r\n---\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/413\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\n</div>","createdAt":"2023-06-26T12:49:23Z","labels":["type: feature","priority: 2"],"number":474,"repository":"sablier-labs/interfaces","state":"closed","title":"Link Canny workspace to the product landing page and app","type":"issue","updatedAt":"2023-06-29T15:11:24Z","url":"https://github.com/sablier-labs/interfaces/issues/474"},{"author":"PaulRBerg","body":"## Context\r\n\r\nOne of Cantina's findings during their recent audit had to do with the security of the `installPlugin` method:\r\n\r\nhttps://github.com/cantinasec/review-sablier2/issues/1\r\n\r\nWe used to allow collisions when installing plugins, but that turned out to be an insecure approach because of potential 4-byte selector collisions (maliciously mined, or accidental). We are now explicitly checking for overlapping methods when installing plugins:\r\n\r\nhttps://github.com/PaulRBerg/prb-proxy/pull/121\r\n\r\n## Steps for Repro\r\n\r\n1. Deploy a proxy without using the Sablier UI, e.g., via Etherscan's [Write contract](https://goerli.etherscan.io/address/0xa87bc4c1bc54e1c1b28d2dd942a094a6b665b8c9#writeContract) feature\r\n2. Install a plugin containing a method that collides with Sablier's `onStreamCanceled`, e.g. [`onAddictionFeesRefunded`](https://github.com/PaulRBerg/prb-proxy/blob/06360442359e0810ec914c133e53d7daf046ef71/test/mocks/plugins/PluginCollider.sol#L15C14-L15C37)\r\n3. Go to the client app\r\n4. Attempt to create a stream\r\n5. The tx will not be allowed by the UI because of a plugin address mismatch (ref https://github.com/sablier-labs/v2-interfaces/issues/397)\r\n6. The \"Manage proxy\" modal will appear\r\n7. The `installPlugin` tx will revert with a [`PRBProxyRegistry_PluginMethodCollision`](https://github.com/PaulRBerg/prb-proxy/blob/2fc7d99dc9a2debe8a014b81490d6095a67ce9d4/src/interfaces/IPRBProxyRegistry.sol#L24C11-L26) error\r\n\r\n## Solution\r\n\r\nUnfortunately, there's no easy fix. We would have to ask the user to sign two separate transactions:\r\n\r\n- Uninstall the (malicious) plugin\r\n- Install the genuine plugin\r\n\r\nHowever, the good news is that method collisions are rare, and malicious plugins may do something more overt like stealing the ERC-20 assets right away (rather than attempting this sophisticated attack with a method collision).\r\n\r\nSo, a more pragmatic solution would be this:\r\n\r\n1. Call the new getter `getPluginByOwner` on the proxy registry\r\n2. If the result is `address(0)`, run the \"Manage proxy\" modal as usual\r\n3. If the result is not the zero address, check if the address is a known Sablier plugin.\r\n4. If the address is not a known Sablier plugin, tell the user to ask for help on Discord, and hide the \"Manage proxy\" modal. Alternatively, show this warning in the \"Manage proxy\" modal itself, but block the submit button.\r\n\r\nVery very few users will arrive at step 4, so we should be able to brush this scenario aside (in the short term).","createdAt":"2023-06-26T08:43:42Z","labels":["type: bug","backlog"],"number":472,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement UI module for re-installing a plugin in the proxy","type":"issue","updatedAt":"2023-12-19T23:37:12Z","url":"https://github.com/sablier-labs/interfaces/issues/472"},{"author":"razgraf","body":"I've recently changed the `Ignore Build Step` configuration on Vercel to stop any builds from happening there. For some reasons, Github will still show these canceled/ignored builds as pending - although they're inactive on Vercel.\r\n\r\n- [x] Figure out why this is happening and prevent it\r\n- [x] Make sure this new setting doesn't affect preview builds (for cypress)","createdAt":"2023-06-25T18:07:34Z","labels":["type: bug","priority: 2"],"number":469,"repository":"sablier-labs/interfaces","state":"closed","title":"Vercel keeps CI pending although actions are clearly canceled (ignore build step)","type":"issue","updatedAt":"2023-06-26T19:19:48Z","url":"https://github.com/sablier-labs/interfaces/issues/469"},{"author":"PaulRBerg","body":"Steps to reproduce:\r\n\r\n1. Connect with user 0xF94957A1D7982fCF0F1Dfff9EA56a11E918c7122 (private key in 1Password)\r\n2. Load Ethereum Mainnet in MetaMask\r\n3. Load the client app\r\n4. You should see this stream in the dashboard: [`linear-5-222`](https://sablier-v2-client.vercel.app/stream/linear-5-222), which is a [Goerli stream](https://goerli.etherscan.io/tx/0xa3258c3baf959974c39d4d9ccf755fb55017974edba2175740efa48d4d41e797)","createdAt":"2023-06-24T15:58:19Z","labels":["type: bug","priority: 3"],"number":464,"repository":"sablier-labs/interfaces","state":"closed","title":"Goerli stream appears on dashboard while connected to Ethereum Mainnet","type":"issue","updatedAt":"2023-06-25T18:17:58Z","url":"https://github.com/sablier-labs/interfaces/issues/464"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nIn Sablier V2, the stream status is a [crisp category][1] and also a critical piece of information, since it serves as a \"compressed\" hint about what can and can't be done with the stream at a particular point in time. The status is checked by every single state-changing function in the contracts, and the NFT features it [prominently](https://github.com/sablier-labs/v2-core/discussions/520) as one of the four cards included in the SVG.\r\n\r\nHowever, in the UI, the stream status does not get the attention it deserves; it's missing from the right-hand view in the stream profile:\r\n\r\n<img width=\"200\" alt=\"Screenshot 2023-06-24 at 3 17 42 PM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/b5a868d1-1d75-45bc-93d0-a8eb27feecbb\">\r\n\r\nOnly below this, there's the simulation card that gives some _indirect_ information about the status:\r\n\r\n<img width=\"200\" alt=\"Screenshot 2023-06-24 at 3 30 03 PM\" src=\"https://github.com/sablier-labs/v2-core/assets/8782666/051ecb5e-097c-4b41-8449-0f7fb330fa93\">\r\n\r\nBut this is for settled streams. For streaming streams, the status is not made explicit - it only says that \"The stream will end\".\r\n\r\n### Notes\r\n\r\n- Making the status explicit would also help our ecosystem of integrators - because the status will be a critical piece of data that any integrator will use in determining the current value of a stream, its vendibility, etc.\r\n- On 13-inch devices like my MacBook Air, the simulation card does not appear without scrolling first ([screenshot](https://github.com/sablier-labs/v2-core/assets/8782666/f9bb7c60-3dd2-4da7-9bbe-76b940a979d7)).\r\n- Separately, how about renaming the subtitle from \"Details\" to \"Attributes\"? The former means two things now: the right-hand view I've referred to in this GitHub Issue, and the overview that appears when clicking on the \"Details\" button\r\n\r\n## Suggested Solution\r\n\r\n1. Create a bespoke attribute for the stream status (put it next to \"Shape\")\r\n2. Capitalize it to hint at the fact that it is a special category (`Settled` vs `settled`)\r\n3. Keep the fine print as is because it provides value and a little bit of redundancy doesn't hurt.\r\n\r\n[1]: https://github.com/sablier-labs/v2-core/blob/eeee4decd7045555d72e1f1046950dbd2c310b68/src/types/DataTypes.sol#L44-L56","createdAt":"2023-06-24T15:37:47Z","labels":["type: feature","priority: 2"],"number":461,"repository":"sablier-labs/interfaces","state":"closed","title":"Bespoke attribute for stream status in the right-hand view in the stream profile","type":"issue","updatedAt":"2023-06-29T15:04:26Z","url":"https://github.com/sablier-labs/interfaces/issues/461"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nAs discussed [here](https://github.com/sablier-labs/v2-core/discussions/558), in #441, on Slack, and on Discord with the Cantina team, transferring the NFT is a potentially dangerous operation.\r\n\r\nTo prevent an accidental loss of funds when the NFT is transferred, I have implemented a `withdrawMaxAndTransfer` function in V2 Core, which withdraws all currently available funds and then transfers the NFT immediately (within the same transaction). If the withdrawable amount is zero, the execution flow is not reverted - the withdrawal is simply skipped.\r\n\r\n## Solution\r\n\r\nUse the new `withdrawMaxAndTransfer` function in the \"Transfer Stream\" sidebar, and alter the ensurance card to say something along the lines:\r\n\r\n> Transferring the stream is an irreversible action. The funds that have been streamed already will be withdrawn to you now, but any potential future earnings will become under the control of the new recipient.\r\n\r\nIt would also be helpful to rename the \"Recipient\" sub-header to \"New Recipient\" to clarify to the user that they have to specify a new recipient address.\r\n\r\nNotes:\r\n\r\n- Only the current recipient can call `withdrawMaxAndTransfer`\r\n- It is OK to always call `withdrawMaxAndTransfer` because withdrawal amounts will skip the withdraw part and not revert the tx.\r\n- Self-transfers are not reverted, but this is a minor low-level detail that need not be mentioned in the UI","createdAt":"2023-06-24T10:48:43Z","labels":["type: feature"],"number":452,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate the new \"withdrawMaxAndTransfer\" function","type":"issue","updatedAt":"2023-07-03T22:41:51Z","url":"https://github.com/sablier-labs/interfaces/issues/452"},{"author":"PaulRBerg","body":"I'll keep this issue updated as I find more relevant changes.\r\n\r\n- `deployAndExecute` should be replaced with the new `deployAndInstallPlugin` functionality (ref https://github.com/PaulRBerg/prb-proxy/pull/125)\r\n- `permit2` is no longer part of the `Permit2Params` struct; it's an immutable variable that gets hard-coded at deployment time (https://github.com/sablier-labs/v2-periphery/pull/102/)\r\n- `PRBProxyAnnex` does not exist anymore; all references to it should be removed\r\n    - Note: the registry is now in charge of everything related to proxies\r\n- Proxies cannot be transferred anymore; any code design that assumes proxy transferability should be refactored on the basis that proxies are entities linked to their respective owners for life\r\n- The `proxies` getter is now `getProxy` (ref https://github.com/PaulRBerg/prb-proxy/pull/118)\r\n- There are many helpful new getters in the registry: `getPluginByOwner`, `getPluginByRegistry`, `getPermissionByOwner`, etc. Have a look at the new registry [here](https://github.com/PaulRBerg/prb-proxy/blob/2fc7d99dc9a2debe8a014b81490d6095a67ce9d4/src/interfaces/IPRBProxyRegistry.sol).\r\n- There is a new function `withdrawMaxAndTransfer` that can be used for transferring NFTs, which is safer than `transferFrom` (ref https://github.com/sablier-labs/v2-core/pull/561)","createdAt":"2023-06-24T10:07:27Z","labels":["type: feature","priority: 1"],"number":451,"repository":"sablier-labs/interfaces","state":"closed","title":"Post-audit contract changes relevant for V2 Interfaces","type":"issue","updatedAt":"2023-07-03T17:00:48Z","url":"https://github.com/sablier-labs/interfaces/issues/451"},{"author":"PaulRBerg","body":"## Context\r\n\r\nAs discussed [here](https://github.com/sablier-labs/v2-core/discussions/558), in #441, on Slack, and on Discord with the Cantina team, transferring the NFT is a potentially dangerous operation.\r\n\r\nTo prevent an accidental loss of funds when the NFT is transferred, I have implemented a `withdrawMaxAndTransfer` function in V2 Core, which withdraws all currently available funds and then transfers the NFT immediately (within the same transaction). There's an open PR here:\r\n\r\nhttps://github.com/sablier-labs/v2-core/pull/561\r\n\r\n## Implementation\r\n\r\nThis is how I suggest the new \"Transfer Stream\" sidebar to work:\r\n\r\n1. Check the stream's withdrawable amount\r\n2. If `> 0`: add a check-box to ask the user if they want to withdraw the funds before transferring\r\n    1. If the check-box is enabled, use `withdrawMaxAndTransfer` (this should be the **default** option)\r\n    2. If the check-box is disabled, use `transferFrom`\r\n3. If `== 0`: use `transferFrom` and hide the rest of the features discussed above\r\n\r\n## Diagram\r\n\r\n```mermaid\r\nflowchart TD\r\n    A --->|No| B[Is checkbox enabled?]\r\n    A[Zero withdrawable amount?] -->|Yes| Z[transferFrom]\r\n    B --> |Yes| C[withdrawMaxAndTransfer]\r\n    B --> |No| Z\r\n```","createdAt":"2023-06-22T16:39:58Z","labels":["type: feature","backlog"],"number":450,"repository":"sablier-labs/interfaces","state":"closed","title":"Use new functionality \"withdrawMaxAndTransfer\" in the \"Transfer Stream\" side bar","type":"issue","updatedAt":"2023-06-24T10:36:37Z","url":"https://github.com/sablier-labs/interfaces/issues/450"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/414\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 20, 2023</sup>\r\nTwo places where my suggestions applies:\r\n\r\n1. The landing page (first section under \"Why Sablier\")\r\n2. The stream gallery page in the client app\r\n\r\nThe rationale is thus:\r\n\r\n- The exponential curve is more emblematic of Sablier V2 than the traditional monthly-unlocks payment model\r\n- It feels a bit odd (at least to me) to feature a fundamentally non-streaming design so prominently on our marketing materials; I suggest we position it as a curve _indirectly_ enabled by the universality of the Lockup Dynamic streaming model, not as a flagship curve\r\n\r\n<img width=\"600\" alt=\"Screenshot 2023-06-20 at 1 31 18 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/57a74744-fa1a-4d79-a4df-1b2f3aec60dc\">\r\n</div>","createdAt":"2023-06-22T13:22:07Z","labels":[],"number":448,"repository":"sablier-labs/interfaces","state":"closed","title":"Make traditional monthly-unlocks stream shape the last in the list","type":"issue","updatedAt":"2023-06-23T10:13:08Z","url":"https://github.com/sablier-labs/interfaces/issues/448"},{"author":"razgraf","body":"The task is to remove the individual [item + amount] pairs - the modal will keep just the final list of stream ids and the first sentence.\r\n\r\nHowever, this applies only for the success state, as loading states should still show granular data such that the user can cancel the action if they notice a mistake.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/440\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 21, 2023</sup>\r\nThe transaction confirmation modal for groups of streams looks like this:\r\n\r\n<img width=\"250\" alt=\"Screenshot 2023-06-21 at 9 30 28 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/d306219f-f469-44d9-9701-cb65e83c7ff1\">\r\n\r\nIt is beautiful but also packed with a lot of information -  line 3 is particularly difficult to read, and draws attention away from what (I think is) the essential information: the stream ids.\r\n\r\nMy suggestion is to simplify this modal so that it only lists out the created stream ids, and maybe the combined total amount. The granular per-stream information can be viewed in the dashboard and each respective stream profile.</div>","createdAt":"2023-06-22T08:54:24Z","labels":["priority: 3"],"number":446,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove item amounts from group transaction modal","type":"issue","updatedAt":"2023-06-22T17:39:00Z","url":"https://github.com/sablier-labs/interfaces/issues/446"},{"author":"PaulRBerg","body":"A meta issue for tracking some small end-to-end inconsistencies I found during my recent review of the client app.\r\n\r\n- [x] `Details/Timeline` view for canceled streams: the line where it says \"It will end on\" should be removed\r\n- [x] In the withdraw form, when the connected user is the sender, the \"Who should receive the funds\" question should be turned into smth like \"This is the recipient address\"\r\n- [x] In the stream profile, when the stream is canceled, it is a bit confusing to continue showing the \"Cancelable\" attribute\r\n\r\nFeel free to edit my comment to add more as you find them.","createdAt":"2023-06-21T20:41:02Z","labels":["type: bug","priority: 3"],"number":444,"repository":"sablier-labs/interfaces","state":"closed","title":"Meta issue: small end-to-end inconsistencies in client app","type":"issue","updatedAt":"2023-06-26T13:34:10Z","url":"https://github.com/sablier-labs/interfaces/issues/444"},{"author":"PaulRBerg","body":"As discussed [here](https://github.com/sablier-labs/v2-core/discussions/558), as well as on on Slack, transferring the NFT is a potentially dangerous operation.\r\n\r\nTo warn the user of the fact that the unwithdrawn-yet funds will not be automatically withdrawn, we should consider updating the copy and turning this section into a yellow-colored warning:\r\n\r\n<img width=\"625\" alt=\"Screenshot 2023-06-21 at 10 08 44 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/54694c15-a8eb-4a7f-a51f-0a182b477e4a\">\r\n","createdAt":"2023-06-21T19:11:18Z","labels":["priority: 3"],"number":441,"repository":"sablier-labs/interfaces","state":"closed","title":"Transferring the NFT is a potentially dangerous operation","type":"issue","updatedAt":"2023-06-22T09:51:06Z","url":"https://github.com/sablier-labs/interfaces/issues/441"},{"author":"PaulRBerg","body":"## Steps to Reproduce\r\n\r\n1. Max approve Permit2 to spend your ERC-20 assets (manually on Etherscan, or via some other app)\r\n2. Go to the group stream creation form\r\n3. Type in the amounts so that no individual amount overflows your wallet balance, but the combined total amount does\r\n4. The client app will let you create the stream\r\n5. Big revert ahead\r\n\r\n## Suggested Solution\r\n\r\nHandle this potential overflow by checking that the combined total amount is less than the user's wallet balance, and block the user from proceeding to create the group of streams.\r\n\r\n## Screenshots\r\n\r\n<img width=\"500\" alt=\"SCR-20230621-pslx\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/2278b0e0-da87-403a-a36f-a5b0ba41f023\">\r\n\r\n<img width=\"300\" alt=\"Screenshot 2023-06-21 at 5 57 34 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/e5eec5f0-ba45-4a0e-b877-3e8f05269bca\">\r\n","createdAt":"2023-06-21T15:02:15Z","labels":["type: bug","priority: 2"],"number":438,"repository":"sablier-labs/interfaces","state":"closed","title":"Unhandled overflow when creating groups of stream","type":"issue","updatedAt":"2023-06-26T12:20:18Z","url":"https://github.com/sablier-labs/interfaces/issues/438"},{"author":"PaulRBerg","body":"## Description\r\n\r\nThe current duration picker has three fields: (i) Days, (ii) Hours, and (iii) Minutes.\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-21 at 4 07 09 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/3fad35ca-06fb-4694-a5c2-f7e6833bb517\">\r\n\r\nI propose replacing the \"Minutes\" duration picker with \"Years\" (with 1 Year = 365 days) because the latter is a much more useful feature for our current users.\r\n\r\n- The emphasis in Sablier V2 is on organizations (which may not find any value in minute-long streams)\r\n   - The landing page makes this absolutely clear. We even have a page dedicated to organizations, which serves as a sales brochure.\r\n- Two of the most popular use cases for Sablier, payroll and vesting, involve a long-term, ongoing collaboration between multiple parties\r\n- Letting users choose year-long duration plays to our advantage regardless of our direct business pitch (organizations): longer streams lead to more loyal users, more usage, and more TVL\r\n- Historical reference on the importance of year-long streams: [users have explicitly requested](https://twitter.com/Sablier/status/1372934170838700034) this feature in V1.\r\n- If we are honest with ourselves, the two most popular use cases for minute-long streams are:\r\n    - Airdrop hunting (no need to care about these folks)\r\n    - Testing the app (testing hour-long streams is fine)\r\n- A notable exception is [consultancy fee](https://twitter.com/PaulRBerg/status/1221890907873648642?) streaming, but Sablier V1 has not gained traction with this use case (for which, TBH, open-ended streaming is a better fit)\r\n\r\n## Side note\r\n\r\nI've opened an issue because I am confident that \"years\" instead of \"minutes\" is the objectively correct approach for our users' needs. Nevertheless, if you have not been convinced by the rationale above, feel free to delete this issue and turn it into a discussion.","createdAt":"2023-06-21T13:31:55Z","labels":["type: feature","priority: 2"],"number":434,"repository":"sablier-labs/interfaces","state":"closed","title":"Replace \"Minutes\" duration picker by \"Years\"","type":"issue","updatedAt":"2023-06-26T12:20:17Z","url":"https://github.com/sablier-labs/interfaces/issues/434"},{"author":"PaulRBerg","body":"The \"Action summary\" in the cancellation sidebar mentions this:\r\n\r\n> Any assets already streamed (and not withdrawn) will be sent in the recipient's wallet.\r\n\r\nHowever, this statement is no longer accurate since we've refactored the cancel function to not auto-withdraw the funds to the recipient:\r\n\r\nhttps://github.com/sablier-labs/v2-core/pull/422","createdAt":"2023-06-21T11:19:33Z","labels":["priority: 3"],"number":433,"repository":"sablier-labs/interfaces","state":"closed","title":"Inaccurate statement in \"Action summary\" in the cancellation side bar","type":"issue","updatedAt":"2023-06-22T18:15:32Z","url":"https://github.com/sablier-labs/interfaces/issues/433"},{"author":"PaulRBerg","body":"## Description\r\n\r\nSteps to reproduce:\r\n\r\n1. Open the client app on [MetaMask iOS](https://apps.apple.com/us/app/metamask-blockchain-wallet/id1438144202)\r\n2. Go to the create stream form\r\n3. Pick any streaming model\r\n4. Fill in the form\r\n5. Wait for the \"Signing transaction\" modal to pop up\r\n6. Nothing happens - no prompt to sign the tx appears in MetaMask\r\n7. The Sablier app remains stuck on the \"Signing transaction\" model; clicking on the back arrow doesn't do anything\r\n\r\nNotes:\r\n\r\n- I've tested this three times; closed and opened MetaMask, same behavior\r\n- I've tried to test with [other mobile wallets](https://twitter.com/PaulRBerg/status/1671446862325325826), but none worked on Goerli\r\n- My guess is that this has to do with the way EIP-712 signatures are handled on MetaMask iOS\r\n\r\n## Environment\r\n\r\n- iPhone 13 Pro Max\r\n- iOS 16.5\r\n- MetaMask iOS v6.3.0\r\n\r\n## Screenshot\r\n\r\n<img width=\"250\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/bef7e5df-626f-416e-ad52-b732ec7ba8fc\"/>","createdAt":"2023-06-21T10:48:14Z","labels":["type: bug","backlog"],"number":432,"repository":"sablier-labs/interfaces","state":"closed","title":"Create stream not working on MetaMask Mobile","type":"issue","updatedAt":"2023-12-20T09:57:25Z","url":"https://github.com/sablier-labs/interfaces/issues/432"},{"author":"PaulRBerg","body":"## Scenario\r\n\r\n- Create a stream toward yourself\r\n- Open it in the client app\r\n- Hope that you can cancel it\r\n- You can't\r\n\r\nI tested this with [0xF94957A1D7982fCF0F1Dfff9EA56a11E918c7122](https://goerli.etherscan.io/address/0xF94957A1D7982fCF0F1Dfff9EA56a11E918c7122), and with stream id [linear-5-222](https://sablier-v2-client.vercel.app/stream/linear-5-222).\r\n\r\n## My Thoughts\r\n\r\nRather than implement a complicated \"dual\" view of the stream profile - and ask the user which view they would like to be on - we could simply disable self-streaming in the UI.\r\n\r\nAlthough self-streaming is a [legitimate use case](https://twitter.com/PaulRBerg/status/1213426778133467136), it is not a popular use case for Sablier, and so we need not bother with it now, given that it introduces loopholes like the one presented herein (and maybe others, who knows).","createdAt":"2023-06-20T21:57:17Z","labels":["type: feature","priority: 2"],"number":430,"repository":"sablier-labs/interfaces","state":"closed","title":"Show `cancel` button when user is both sender and recipient","type":"issue","updatedAt":"2023-06-26T12:20:17Z","url":"https://github.com/sablier-labs/interfaces/issues/430"},{"author":"PaulRBerg","body":"At present, the client app prints the full technical log underneath the tx submit button, e.g. for \"Allow\":\r\n\r\n<img width=\"415\" alt=\"Screenshot 2023-06-20 at 9 12 29 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/735b79ca-c8b7-494b-a80c-78301fb20c55\">\r\n\r\nThat output is rather technical and might be meaningless to non-technical users. However, since rejecting tx requests is a common user action, I suggest handling this case more gracefully and printing smth along the lines of:\r\n\r\n> You rejected the transaction signature request","createdAt":"2023-06-20T18:15:45Z","labels":["backlog","priority: 3"],"number":426,"repository":"sablier-labs/interfaces","state":"closed","title":"Handle user-denied transaction signature requests more gracefully","type":"issue","updatedAt":"2023-06-24T14:58:36Z","url":"https://github.com/sablier-labs/interfaces/issues/426"},{"author":"PaulRBerg","body":"The word \"Token\" repeats underneath every token in the token picker dropdown:\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-20 at 8 15 26 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/7bb8cf6d-52d6-4bba-b707-e24c46a53216\">\r\n\r\nThis is a bit repetitive and redundant given that the word \"tokens\" is written in the title.","createdAt":"2023-06-20T17:16:27Z","labels":["priority: 3"],"number":421,"repository":"sablier-labs/interfaces","state":"closed","title":"Repetitive \"Token\" suffix in token picker dropdown","type":"issue","updatedAt":"2023-06-22T17:38:59Z","url":"https://github.com/sablier-labs/interfaces/issues/421"},{"author":"PaulRBerg","body":"Two sub-tasks about the \"Audited and secure\" section:\r\n\r\n- [x] Center it (as discussed on Slack)\n- [x] Duplicate \"Audited and secure\" on the main landing page (as discussed on https://github.com/sablier-labs/v2-interfaces/discussions/418)","createdAt":"2023-06-20T15:17:39Z","labels":["priority: 3"],"number":419,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor \"Audited and secure\" section on landing page","type":"issue","updatedAt":"2023-06-22T17:38:58Z","url":"https://github.com/sablier-labs/interfaces/issues/419"},{"author":"razgraf","body":"Fix missing or unsynced dependencies based on results after #403\r\n\r\nRun `yarn g:all-deps` and fix the issues.","createdAt":"2023-06-20T12:14:07Z","labels":[],"number":417,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix missing or unsynced dependencies based on results after #403","type":"issue","updatedAt":"2023-06-21T08:11:49Z","url":"https://github.com/sablier-labs/interfaces/issues/417"},{"author":"PaulRBerg","body":"## Description\r\n\r\nI was testing the landing page, and I noticed that the \"Contact sales\" button is hidden on mobile:\r\n\r\n<img width=\"300\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/ee5a8fd7-dc73-42d8-af12-1aa093969de2\"/>\r\n\r\nAlso, it looks like the card itself is flickering:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/assets/8782666/dc10b407-e8fc-4a3d-a93a-ec80c1adb735\r\n\r\n## Environment\r\n\r\n- iPhone 13 Pro Max\r\n- Safari","createdAt":"2023-06-19T20:05:39Z","labels":["type: bug","priority: 3"],"number":412,"repository":"sablier-labs/interfaces","state":"closed","title":"\"Contact sales\" button hidden on mobile","type":"issue","updatedAt":"2023-06-22T17:38:58Z","url":"https://github.com/sablier-labs/interfaces/issues/412"},{"author":"razgraf","body":"While both the app and the subgraphs are engineered to support multiple deployments of Sablier's contracts at the same time, we should:\r\n1. make sure this works properly\r\n2. engineer a system that directs the create stream forms towards specific contracts using additional flags\r\n   - e.g. `if (token === DAI) {pick linear-with-fl} else {pick linear-without-fl}` \r\n   - could be part of the `contracter` method.\r\n\r\n---\r\n#### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/233\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** April  5, 2023</sup>\r\n</div>","createdAt":"2023-06-18T14:13:57Z","labels":["type: feature"],"number":407,"repository":"sablier-labs/interfaces","state":"closed","title":"Enable and test support for contract duality with and without flash-loans","type":"issue","updatedAt":"2023-06-26T12:20:17Z","url":"https://github.com/sablier-labs/interfaces/issues/407"},{"author":"razgraf","body":"The task is to create a separate `.eslintrc.yml` in the cypress folders (e.g. `apps/client/cypress/.eslintrc.yml`) which extends an additional plugin, [eslint-plugin-cypress](https://github.com/cypress-io/eslint-plugin-cypress).\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/381\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June 12, 2023</sup>\r\nWould it help if we used [eslint-plugin-cypress](https://github.com/cypress-io/eslint-plugin-cypress), @gavriliumircea?</div>","createdAt":"2023-06-17T12:38:53Z","labels":["priority: 3"],"number":405,"repository":"sablier-labs/interfaces","state":"closed","title":"Use \"eslint-plugin-cypress\"","type":"issue","updatedAt":"2023-06-20T22:37:16Z","url":"https://github.com/sablier-labs/interfaces/issues/405"},{"author":"razgraf","body":"We should have a look through the guards implemented (as tests) by the contracts team and mirror them, when possible, in our own input guards (e.g. checks of `0x0(0)`).\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/357\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June  9, 2023</sup>\r\n@maxdesalle has recently discovered an issue in the create stream form, namely, that the UI was allowing zero deposit amounts.\r\n\r\nIn V2 Core, we have applied my [testing tree approach](https://twitter.com/PaulRBerg/status/1624763320539525121), which has the nice benefit of doubling as a non-Solidity checklist for what inputs are not allowed (in this case, in the create functions).\r\n\r\n- [`createWithRange`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-linear/create-with-range/createWithRange.tree)\r\n- [`createWithDurations`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-linear/create-with-durations/createWithDurations.tree)\r\n- [`createWithDeltas`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-dynamic/create-with-deltas/createWithDeltas.tree)\r\n- [`createWithMilestones`](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup-dynamic/create-with-milestones/createWithMilestones.tree)\r\n\r\nCc @razgraf, @gavriliumircea, you might find these helpful for sanity-checking the create stream forms (as well as the other testing trees for the other stream actions, e.g. [withdraw](https://github.com/sablier-labs/v2-core/blob/5997ac05751960259c03aa166158d5db8aea1675/test/integration/basic/lockup/withdraw/withdraw.t.sol)).</div>","createdAt":"2023-06-17T12:35:04Z","labels":["priority: 2"],"number":404,"repository":"sablier-labs/interfaces","state":"closed","title":"Match input guards with the checklists from v2-core","type":"issue","updatedAt":"2023-06-20T22:37:16Z","url":"https://github.com/sablier-labs/interfaces/issues/404"},{"author":"razgraf","body":"The task is to create a global `g:deps-check-use` script we can run once in a while to fix our dependency tree (e.g. when we have missing dependencies in our packages, when we have extra ones etc.).\r\n\r\nAt the same time, a `g:deps-check-sync` script can be provided to account for mismatches between different package versions.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/321\r\n\r\n<div type='discussions-op-text'>\r\n<sup>Originally posted by **PaulRBerg** June  5, 2023</sup>\r\n</div>\r\n\r\nRelated to #321, #317 and #328 as well.","createdAt":"2023-06-17T12:24:52Z","labels":[],"number":403,"repository":"sablier-labs/interfaces","state":"closed","title":"Add global script to detect missing types and declarations","type":"issue","updatedAt":"2023-06-20T13:47:14Z","url":"https://github.com/sablier-labs/interfaces/issues/403"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/306\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June  4, 2023</sup>\r\nI saw these:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/models/src/Stream/Functionality.ts#L557-L564\r\n\r\nWhy are they not localized in `locales`?</div>","createdAt":"2023-06-17T11:58:16Z","labels":[],"number":402,"repository":"sablier-labs/interfaces","state":"closed","title":"Move texts from `models` to `locales`","type":"issue","updatedAt":"2023-06-22T17:38:57Z","url":"https://github.com/sablier-labs/interfaces/issues/402"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/300\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June  3, 2023</sup>\r\nMany directories under `packages/constants` are of the form `NAME/index.ts`.\r\n\r\nUnless I'm missing something, these files would be more readable and easier to search (e.g. in VSCode's `CMD+P`) if we renamed them to `name.ts`.\r\n\r\nE.g. this:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/constants/src/blacklist/index.ts\r\n\r\nWould become this:\r\n\r\n```text\r\nblacklist.ts\r\n```\r\n</div>","createdAt":"2023-06-17T11:51:35Z","labels":["priority: 3"],"number":401,"repository":"sablier-labs/interfaces","state":"closed","title":"Simplify nesting structure in `packages/constants`","type":"issue","updatedAt":"2023-06-20T22:37:15Z","url":"https://github.com/sablier-labs/interfaces/issues/401"},{"author":"razgraf","body":"We've grown a lot since starting this repository, especially on the TypeScript side. There's been a consistent error I've made in the beginning (I realized a while back) where variables that were passed as arguments have been marked as optional, when in fact they were expected - just that they could be undefined as well.\n\nSmall example: in a guard function, we may require `chainId` and revert if it doesn't exist. Typing the props with `?` would help us achieve the verification (chainId would be regarded as possibly `undefined`), although the intention wouldn't be represented quite right (we're expecting the chainId in the arguments, just not with a valid value at all times).\n\n```ts\ninterface A { chainId?: number }\ninterface B { chainId: number | undefined }\n```\n\nWe should do a soft \"review\" of the codebase and refactor these cases.\n\n\n---\n\n**Some examples**\n\n- [ ] form contexts (values should be `string | undefined`)","createdAt":"2023-06-17T10:28:18Z","labels":["backlog","priority: 2"],"number":400,"repository":"sablier-labs/interfaces","state":"closed","title":"Convert `?` into `x | undefined` when NIL was expected instead of optionality","type":"issue","updatedAt":"2023-12-20T00:04:58Z","url":"https://github.com/sablier-labs/interfaces/issues/400"},{"author":"PaulRBerg","body":"## Description\r\n\r\nA recurrent theme in Cantina's recent audit report is the inescapable insecurity of proxy plugins[^1][^2] - they can never be trusted to be 100% safe.\r\n\r\nWhile reviewing these audit findings, I realized that the preceding fact has security implications for the client app. That is, our UI should not _assume_ that the proxy plugin associated with the `onStreamCanceled` method is our genuine plugin. Instead, the UI should perform a bytecode check. Specifically, it should load the bytecode of the on-chain resolved plugin (via [`getCode`](https://docs.ethers.org/v5/single-page/#/v5/api/providers/provider/-%23-Provider-getCode)?), and compare it against a local, hard-coded bytecode. And if there is a mismatch, the user should not be allowed to create streams (this would be analogous to the sanction modal, I guess).\r\n\r\n## Notes\r\n\r\n- Situations like this should be rare, but it's better to be safe than sorry.\r\n- Because this should be rare, there's no need to provide functionality for uninstalling the malicious plugin; a simple, informational message explaining that the user ought to double-check their proxy plugins would suffice (for now).\r\n- At the moment, the periphery contracts' bytecode has to be generated manually with Forge, but in the future, we will provide hard-coded values in the repo itself[^3].\r\n\r\n## Alternative Idea\r\n\r\nWe could also consider listing the `SablierV2ProxyPlugin` contract in the `SablierV2Archive` contract (although this would be a bit recursive since the former contains an on-chain reference to the latter), and the UI could perform an on-chain check, i.e., `archive.isListed(resolvedProxyPlugin)`.\r\n\r\n[^1]: https://github.com/cantinasec/review-sablier2/issues/13\r\n[^2]: https://github.com/cantinasec/review-sablier2/issues/19\r\n[^3]: https://github.com/sablier-labs/v2-periphery/issues/67","createdAt":"2023-06-16T22:06:04Z","labels":["priority: 2"],"number":397,"repository":"sablier-labs/interfaces","state":"closed","title":"Check that the proxy plugin address is actually the correct one","type":"issue","updatedAt":"2023-06-26T08:23:29Z","url":"https://github.com/sablier-labs/interfaces/issues/397"},{"author":"razgraf","body":"### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/52\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** October 16, 2022</sup>\r\nI just started looking at the `tsconfig.json` and it's hard for me to contrast and compare the differences between them, because the keys are not ordered alphabetically in all files.\r\n\r\nLuckily there is a Prettier plugin that can do this for us, [`pretiter-plugin-sort-json`](https://www.npmjs.com/package/prettier-plugin-sort-json).\r\n\r\nWould you be happy to start using it in this repo, @razgraf? Can make a PR if yes.</div>","createdAt":"2023-06-16T20:58:53Z","labels":["priority: 2"],"number":394,"repository":"sablier-labs/interfaces","state":"closed","title":"Install \"prettier-plugin-sort-json\" to move json sorting (including locales) to prettier","type":"issue","updatedAt":"2023-06-20T13:47:14Z","url":"https://github.com/sablier-labs/interfaces/issues/394"},{"author":"PaulRBerg","body":"See @razgraf's idea here:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/discussions/386#discussioncomment-6200088","createdAt":"2023-06-16T20:39:21Z","labels":["priority: 3"],"number":393,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename \"declarations\" package to \"types-declarations\"","type":"issue","updatedAt":"2023-06-22T17:38:55Z","url":"https://github.com/sablier-labs/interfaces/issues/393"},{"author":"PaulRBerg","body":"As discussed in #364.","createdAt":"2023-06-16T18:20:53Z","labels":["priority: 3"],"number":392,"repository":"sablier-labs/interfaces","state":"closed","title":"Rename all `next/dynamic` default exports","type":"issue","updatedAt":"2023-06-20T22:37:15Z","url":"https://github.com/sablier-labs/interfaces/issues/392"},{"author":"razgraf","body":"See https://github.com/sablier-labs/v2-interfaces/discussions/284#discussioncomment-6199985 for implementation details.\r\n\r\n### Discussed in https://github.com/sablier-labs/v2-interfaces/discussions/284\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **PaulRBerg** June  2, 2023</sup>\r\n[PRBProxy](https://github.com/PaulRBerg/prb-proxy) is meant to be a universal proxy that will be (hopefully) used by increasingly more DeFi projects. As a result, the likelihood of the proxy ending up holding a non-zero amount of ERC-20 assets is high.\r\n\r\nThat, coupled with the risk that our very own [`ProxyTarget`](https://github.com/sablier-labs/v2-periphery/blob/c174b310a2215f598076ca0d1204ba773c4ff015/src/SablierV2ProxyTarget.sol) might contain errors and leave assets in the proxy instead of forwarding them to the proxy owner, opens up the possibility for a situation whereby the proxy owner has unclaimed assets in the proxy.\r\n\r\nTo address this potential issue, our UI could provide a \"module\" for (i) viewing the current balance of the proxy and (ii) calling a target to make ERC-20 withdrawals from it. This module would be similar to the WETH-wrap and unwrap functionality offered by e.g. OpenSea.\r\n\r\nNote: this is low-priority. I've opened this discussion just so we are aware of this possibility.</div>","createdAt":"2023-06-16T18:02:52Z","labels":["priority: 2"],"number":391,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement UI module for withdrawing assets from the proxy","type":"issue","updatedAt":"2023-07-04T16:33:55Z","url":"https://github.com/sablier-labs/interfaces/issues/391"},{"author":"gavriliumircea","body":"During the review for #383 I discovered that the extend field in the cypress tsconfig.json doen't seem to be working properly. Even though the file should extend the @sablier/tsconfig/paths.json at runtine the specified paths couldn't been resolved. For now I removed the extends field and recreate the tsconfig.json for the cypress env.\r\n<img width=\"959\" alt=\"Screenshot 2023-06-14 at 15 13 55\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/48255669/6b1ed5ed-7a90-4f5b-a32e-70156bcdefd4\">\r\n","createdAt":"2023-06-14T14:09:32Z","labels":["type: test","priority: 3"],"number":389,"repository":"sablier-labs/interfaces","state":"closed","title":"Cypress tsconfig.json problems","type":"issue","updatedAt":"2023-06-15T14:48:10Z","url":"https://github.com/sablier-labs/interfaces/issues/389"},{"author":"PaulRBerg","body":"## Description\r\n\r\nAt present, the repo has [~184mB](https://app.warp.dev/block/gIri5aXfIKZODGQgcn5lZC), and the asset files play a role in this  figure:\r\n\r\nhttps://app.warp.dev/block/HJAW1VYPAJhXY1X8LUJp4l\r\n\r\n## Solution\r\n\r\nI suggest a two-pronged approach:\r\n\r\n- [ ] Compress the image files (I don't think that the OpenGraph preview images like `facebook.png` need to have that high a resolution, definitely not ~1.39mB)\r\n- [ ] De-duplicate the `public` folder across the apps - there's a [script](https://github.com/sablier-labs/v1-interfaces/blob/9abd444e0006433fd96c56cb0d53e3d80490b02d/scripts/templatify.js) for doing this in V1 Interfaces\r\n\r\n","createdAt":"2023-06-13T09:29:43Z","labels":["backlog","priority: 3"],"number":388,"repository":"sablier-labs/interfaces","state":"closed","title":"Compress and de-duplicate asset files to reduce the size of the repo","type":"issue","updatedAt":"2023-06-27T10:49:12Z","url":"https://github.com/sablier-labs/interfaces/issues/388"},{"author":"PaulRBerg","body":"## Description\r\n\r\nThe token dropdown is **wicked**!\r\n\r\nJust a suggestion: it would be nice to display the popular stablecoins (USDC, DAI, etc.) and WETH at the top instead of 0xBTC, 1INCH, etc. The vast majority of users will want to stream the former.\r\n\r\nAlso: we're giving these folks free marketing.\r\n\r\n## Screenshot\r\n\r\n<img width=\"400\" alt=\"Screenshot 2023-06-12 at 2 17 05 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/b2b41e64-219f-4927-b305-a132d6c14554\">","createdAt":"2023-06-12T11:19:11Z","labels":["type: feature","backlog","priority: 3"],"number":379,"repository":"sablier-labs/interfaces","state":"closed","title":"Display stablecoins and WETH at the top","type":"issue","updatedAt":"2023-12-19T23:26:42Z","url":"https://github.com/sablier-labs/interfaces/issues/379"},{"author":"PaulRBerg","body":"The following script name:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/b3cce4eeadd96ca724af3c0d4e5dd2e942c3e86c/apps/client/package.json#L112\r\n\r\nConflicts with the name of the `cypress` dependency itself, which makes it unclear what is run (the script or the dependency) in the other scripts, i.e., `cypress-open`, and so forth:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/b3cce4eeadd96ca724af3c0d4e5dd2e942c3e86c/apps/client/package.json#L113-L115","createdAt":"2023-06-12T11:00:41Z","labels":["priority: 3"],"number":378,"repository":"sablier-labs/interfaces","state":"closed","title":"Base \"cypress\" script name conflicts with \"cypress\" dependency","type":"issue","updatedAt":"2023-06-12T17:59:57Z","url":"https://github.com/sablier-labs/interfaces/issues/378"},{"author":"PaulRBerg","body":"Getting this warning with the latest version of Next (v13.4.4):\r\n\r\n> warn The static directory has been deprecated in favor of the public directory. https://nextjs.org/docs/messages/static-dir-deprecated","createdAt":"2023-06-12T10:53:17Z","labels":["priority: 3","effort: medium","type: refactor","work: complicated"],"number":377,"repository":"sablier-labs/interfaces","state":"closed","title":"Use the \"public\" directory instead of \"static\" in Next.js","type":"issue","updatedAt":"2024-06-25T15:40:55Z","url":"https://github.com/sablier-labs/interfaces/issues/377"},{"author":"PaulRBerg","body":"The following code is not a set of \"constants\":\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/b3cce4eeadd96ca724af3c0d4e5dd2e942c3e86c/apps/client/src/constants/helpers.ts\r\n\r\nThese are dynamic functions that generate a non-constant output based upon the input values. They should be moved to a `utils` directory under `apps/client/src`.","createdAt":"2023-06-12T10:43:15Z","labels":["priority: 3"],"number":376,"repository":"sablier-labs/interfaces","state":"closed","title":"Move \"constants/helpers\" to a \"utils\" directory","type":"issue","updatedAt":"2023-06-20T22:37:14Z","url":"https://github.com/sablier-labs/interfaces/issues/376"},{"author":"PaulRBerg","body":"Steps to reproduce:\r\n\r\n1. Go [here](https://github.com/sablier-labs/v2-interfaces/blob/3b58aa292c16edb5ba94281b2739289132ca32f2/apps/client/src/components/organisms/ModalCards/Search/Form/fields.tsx#L57-L73)\r\n2. Add [this code](https://gist.github.com/PaulRBerg/facade652634c7a28fa46f5088932795)\r\n3. You should get the following type error in VSCode:\r\n\r\n```text\r\nType '{ id: string; label: { value: string; }; isChevron: true; isOnlyRight: true; onMinus: () => void; onPlus: () => void; source: { id: string; image: IImage | undefined; title: string; }[]; value: { id: string; image: IImage | undefined; title: string; } | undefined; warning: string | undefined; }' is not assignable to type 'IntrinsicAttributes & Props'.\r\n  Property 'onMinus' does not exist on type 'IntrinsicAttributes & Omit<ISInput, \"value\" | \"onChange\" | \"right\" | \"left\"> & { isChevron?: boolean | undefined; isOnlyRight?: boolean | undefined; } & { ...; }'.ts(2322)\r\n```\r\n\r\n@gavriliumircea - I will let you investigate this further since it's above my pay grade. In the meantime, I will proceed with trimming down the `PropsExtra` type to get rid of this type error on my branch, since it's a blocker. I will rewrite it like this:\r\n\r\n```typescript\r\ntype PropsExtra = {\r\n  onChange: (value: IItem, direction: \"left\" | \"right\") => void;\r\n  /** Keep the id unique so the current value's position can be successfully identified */\r\n  source: IItem[];\r\n  /** Keep the id unique so the current value's position can be successfully identified */\r\n  value?: IItem;\r\n};\r\n```","createdAt":"2023-06-11T19:43:44Z","labels":["type: bug","priority: 2"],"number":372,"repository":"sablier-labs/interfaces","state":"closed","title":"Misconfigured types in \"Input.TextStepper\"","type":"issue","updatedAt":"2023-06-17T10:34:03Z","url":"https://github.com/sablier-labs/interfaces/issues/372"},{"author":"PaulRBerg","body":"It's a no-brainer - it speeds up all root-level scripts and the build pipeline, and it's also tightly integrated with Vercel (they've acquired Turborepo):\r\n\r\nhttps://turbo.build/repo","createdAt":"2023-06-11T17:22:24Z","labels":["backlog","priority: 3"],"number":371,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate Turborepo","type":"issue","updatedAt":"2023-06-16T21:21:59Z","url":"https://github.com/sablier-labs/interfaces/issues/371"},{"author":"PaulRBerg","body":"Correct me I'm wrong @gavriliumircea, but I think that it would be best to refactor all imports such as the one below into constants under `src`, so that Cypress-related stuff doesn't leak into production code:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/3b58aa292c16edb5ba94281b2739289132ca32f2/apps/labs/src/pages/Home/index.tsx#L3","createdAt":"2023-06-10T20:27:44Z","labels":["priority: 1"],"number":368,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove cypress-related imports from production","type":"issue","updatedAt":"2023-06-17T10:32:19Z","url":"https://github.com/sablier-labs/interfaces/issues/368"},{"author":"PaulRBerg","body":"After sleeping upon the idea explained in #358, I am now fairly confident this is the right approach. Having to remember to initialize `BigNumber` (or any other external dependency, for that matter) is error-prone.\r\n\r\nThe initial mixins that would be included are:\r\n\r\n- `lodash`\r\n- `dayjs`\r\n- `bignumber.js`","createdAt":"2023-06-10T17:27:31Z","labels":["type: feature","priority: 2"],"number":366,"repository":"sablier-labs/interfaces","state":"closed","title":"Create a \"@sablier/mixins\" package","type":"issue","updatedAt":"2023-06-17T10:33:52Z","url":"https://github.com/sablier-labs/interfaces/issues/366"},{"author":"PaulRBerg","body":"## Rationale\r\n\r\nThe code base doesn't currently have any unit tests, but it would be helpful to have some.\r\n\r\nUnit tests provide greater confidence that the internal logic of the front-end apps works as expected.\r\n\r\n## Targets\r\n\r\nThe packages where unit tests would be particularly helpful are:\r\n\r\n- `utils`\r\n- `hooks`\r\n- `machines` (maybe)\r\n- Some parts of the apps (maybe)\r\n\r\n## Tooling\r\n\r\nIt looks like Jest and Vitest are both good tools to use in a Next.js-powered monorepo:\r\n\r\nhttps://github.com/belgattitude/nextjs-monorepo-example#53-tests\r\n\r\n## Related Issues\r\n\r\n- #331","createdAt":"2023-06-10T11:23:34Z","labels":["type: test","backlog","priority: 3"],"number":365,"repository":"sablier-labs/interfaces","state":"closed","title":"Write unit tests","type":"issue","updatedAt":"2023-06-16T21:23:10Z","url":"https://github.com/sablier-labs/interfaces/issues/365"},{"author":"PaulRBerg","body":"The `i18n.base.js` file at the root of the repo implements logic; it's not a configuration file.\r\n\r\nIts natural place is in the `locales` package - which is rather empty at the moment.","createdAt":"2023-06-09T18:22:52Z","labels":["priority: 3"],"number":362,"repository":"sablier-labs/interfaces","state":"closed","title":"Move \"i18n.base.js\" to \"locales\" package","type":"issue","updatedAt":"2023-06-20T22:37:14Z","url":"https://github.com/sablier-labs/interfaces/issues/362"},{"author":"PaulRBerg","body":"## Bug Description\r\n\r\n`components/molecules/index.ts` imports the `Ensurance` component:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/4928294682d278d16a6b9cfc1c80a9abf86b0ade/apps/client/src/components/molecules/Ensurance/index.tsx#L3\r\n\r\nAnd the `Ensurance` component imports `components/molecules/index.ts` back:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/4928294682d278d16a6b9cfc1c80a9abf86b0ade/apps/client/src/components/molecules/index.ts#L7\r\n\r\nInfinite regress.\r\n\r\n## Context\r\n\r\nThe bug was addressed by @razgraf in this commit:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/pull/342/commits/be95f47fd3d394d2e7743a1750ba19cc3a525e12\r\n\r\nSo we will close this issue once #342 is merged.\r\n\r\n## Explanation\r\n\r\nThere comes the question of why wasn't this circular import detected on `main`? Here's the explanation:\r\n\r\n- In my PR, I switched all Lodash imports to be made from `@sablier/utils` instead of `lodash`\r\n- Importing `@sablier/utils` triggers the build error - if you add `import \"@sablier/utils\"` in `Card.tsx`, you will get the same error on the `main` branch.\r\n- Unfortunately, this is where the chain of reasoning stops. I've spent a few hours debugging this and couldn't figure it out. It's not worth it to continue at this point.\r\n- But, given that the error log mention `styled-components`, something seems to be awry with that. It's possibly that importing the `@sablier/utils` package fools Next.js into importing other `styled-components`-related types, or the `styled-components` package itself (although it's not listed as a dependency, so it's strange ..). Anyway.\r\n\r\n## Full Log\r\n\r\n- [My local machine](https://app.warp.dev/block/WmSn5hpU8IPspUr0diwEMi)\r\n- [CI](https://github.com/sablier-labs/v2-interfaces/actions/runs/5221280648/jobs/9425349716)","createdAt":"2023-06-09T16:20:25Z","labels":["type: bug","priority: 1"],"number":360,"repository":"sablier-labs/interfaces","state":"closed","title":"Circular import between \"components/molecules\" and \"Ensurance\" in client app","type":"issue","updatedAt":"2023-06-09T16:40:07Z","url":"https://github.com/sablier-labs/interfaces/issues/360"},{"author":"PaulRBerg","body":"The `vendors.crash.log(error)` logic repeats itself in many parts of the code base.\r\n\r\nFor easy maintainability, and good order, we should write a subroutine in the `utils` package that accepts a function and implements a `try/catch` block, which send the crash log on error.","createdAt":"2023-06-09T16:15:59Z","labels":["type: feature","priority: 3"],"number":359,"repository":"sablier-labs/interfaces","state":"closed","title":"Write util for \"vendors.crash.log(error)\"","type":"issue","updatedAt":"2023-06-16T17:15:45Z","url":"https://github.com/sablier-labs/interfaces/issues/359"},{"author":"maxdesalle","body":"When trying to create 100 streams at once using group streams, the interface rejects it.\r\n\r\nIt would be useful for users to know up to how many streams can be created in a reliably way using our interface.\r\n![CleanShot 2023-06-09 at 14 39 45@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/2669e0b5-e9e7-4424-b351-c68e07866b32)\r\n","createdAt":"2023-06-09T12:51:55Z","labels":[],"number":356,"repository":"sablier-labs/interfaces","state":"closed","title":"Highlight how many streams can be created using group streams","type":"issue","updatedAt":"2023-06-13T07:59:14Z","url":"https://github.com/sablier-labs/interfaces/issues/356"},{"author":"maxdesalle","body":"There is currently a relatively short 1K-day limit, meaning streams can only be created with a duration up to 1000 days. However, it happens occasionally that our users create streams that span over four, five and sometimes even more years. 1000 days is not enough.\r\n\r\n![CleanShot 2023-06-09 at 14 28 48@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/b6b49bde-ae11-4fa8-a95b-1d7a9881d672)\r\n","createdAt":"2023-06-09T12:50:07Z","labels":[],"number":355,"repository":"sablier-labs/interfaces","state":"closed","title":"Change max stream duration","type":"issue","updatedAt":"2023-06-13T07:59:13Z","url":"https://github.com/sablier-labs/interfaces/issues/355"},{"author":"maxdesalle","body":"When searching for a stream, these buttons should only appear IMO when a stream was actually selected. Leaving it as a placeholder might give wrong impressions to users, who might think they are having loading problems, or that something is wrong with the user interface.\r\n\r\n![CleanShot 2023-06-09 at 14 25 52@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/d9c6e992-9f09-4492-8491-397577525111)\r\n","createdAt":"2023-06-09T12:48:35Z","labels":[],"number":354,"repository":"sablier-labs/interfaces","state":"closed","title":"Placeholder buttons shouldn't appear when no streams are selected","type":"issue","updatedAt":"2023-06-13T07:59:14Z","url":"https://github.com/sablier-labs/interfaces/issues/354"},{"author":"maxdesalle","body":"It's not immediately clear to me either what this is used for. My guess is that this is where pending streams are displayed? Even that is correct, the average user won't know or understand this. I think an explainer message would be great here.\r\n\r\nAdditionally, it's not clear what is meant with \"items on this device\"? Shouldn't it be \"streams\" as opposed to \"items\"?\r\n\r\n![CleanShot 2023-06-09 at 14 14 42@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/9fcb614e-09a1-4b76-9f32-b392d600351c)\r\n![CleanShot 2023-06-09 at 14 14 46@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/49020c76-0d14-4398-a43b-fc0ba6645154)\r\n\r\nAn additional explainer could, for example, be located here, and give additional information about what is exactly displayed in this tab. I would make it very clear that this is where they can find expected streams, and explain what \"expected streams\" actually are.\r\n\r\n![CleanShot 2023-06-09 at 14 22 56@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/f24f31cf-dfdf-4606-abf2-514c9a1537b4)\r\n","createdAt":"2023-06-09T12:47:13Z","labels":[],"number":353,"repository":"sablier-labs/interfaces","state":"closed","title":"Add additional information for the expected streams modal","type":"issue","updatedAt":"2023-06-13T10:01:20Z","url":"https://github.com/sablier-labs/interfaces/issues/353"},{"author":"maxdesalle","body":"It's not immediately clear when opening the simulation tab when creating a stream, that the token amount (here DAI) displayed is based on the selected date in the date menu located above it.\r\n\r\n@razgraf shared two great suggestions:\r\n\r\n- \"It default to today. We could add another text in that box. E.g. \"On date x you'll jave 0.008\"\"\r\n- \"We can also make that input darker so it attracts the attention more.\"\r\n\r\n![CleanShot 2023-06-09 at 14 06 19@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/a895c3d5-bab4-4700-9bdd-d01cfb0b5f52)\r\n","createdAt":"2023-06-09T12:45:13Z","labels":[],"number":352,"repository":"sablier-labs/interfaces","state":"closed","title":"Display additional info in simulation tab","type":"issue","updatedAt":"2023-06-13T07:59:13Z","url":"https://github.com/sablier-labs/interfaces/issues/352"},{"author":"maxdesalle","body":"When putting \"0\" as the number of tokens to be streamed, nothing stops the user from creating the stream, and it results in an error message when the interface actually tries to create the invalid transaction.\r\n\r\n![CleanShot 2023-06-09 at 14 04 04@2x](https://github.com/sablier-labs/v2-interfaces/assets/70470326/70a389c2-7d20-43fd-bb1a-7217f78d79be)\r\n","createdAt":"2023-06-09T12:34:09Z","labels":["type: bug","priority: 0"],"number":351,"repository":"sablier-labs/interfaces","state":"closed","title":"No warnings when putting 0 tokens as the streamed to be streamed","type":"issue","updatedAt":"2023-06-13T07:59:13Z","url":"https://github.com/sablier-labs/interfaces/issues/351"},{"author":"PaulRBerg","body":"Ref https://github.com/sablier-labs/v2-interfaces/issues/313#issuecomment-1576584403.","createdAt":"2023-06-09T09:15:57Z","labels":["type: bug","priority: 2"],"number":350,"repository":"sablier-labs/interfaces","state":"closed","title":"Declare `styled-components` as a dependency in the `components` package","type":"issue","updatedAt":"2023-06-17T10:33:24Z","url":"https://github.com/sablier-labs/interfaces/issues/350"},{"author":"PaulRBerg","body":"My PR #346 has triggered this CI fail:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/actions/runs/5215924887/jobs/9414072319?pr=342\r\n\r\nI googled the error, and this seems to be a fairly advanced problem related to `styled-components`:\r\n\r\nhttps://stackoverflow.com/a/68412479/3873510\r\n\r\nI opened this issue for tracking since it is above my pay grade, and it doesn't seem to be related to my PR.","createdAt":"2023-06-08T21:57:17Z","labels":["type: bug","priority: 2"],"number":347,"repository":"sablier-labs/interfaces","state":"closed","title":"Potential duplicate dependency on `styled-components`","type":"issue","updatedAt":"2023-06-08T22:06:05Z","url":"https://github.com/sablier-labs/interfaces/issues/347"},{"author":"PaulRBerg","body":"The `next/core-web-vitals` set of ESLint rules is extended in the base `.eslintrc.base.yml` config:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/83be84960cc58f7a06d62e162f30ed93acf25c48/.eslintrc.base.yml#L6\r\n\r\nConfig which is inherited by each package in `packages`.","createdAt":"2023-06-08T21:10:55Z","labels":["priority: 3"],"number":345,"repository":"sablier-labs/interfaces","state":"closed","title":"Apply Next-related linting rules only in the apps","type":"issue","updatedAt":"2023-06-20T22:37:13Z","url":"https://github.com/sablier-labs/interfaces/issues/345"},{"author":"PaulRBerg","body":"I've just opened PR #342, which failed its first CI run, although locally everything worked well when I ran `lint-check`.\r\n\r\nAs I've hinted at in #322, something strange is going on with `.eslintcache`.\r\n\r\nAs the per the explanation given in this [StackOverflow answer](https://stackoverflow.com/a/65391293/3873510) this file should not be generated at the same level with `src`; it should be put in `node_modules`.","createdAt":"2023-06-08T19:31:30Z","labels":["type: bug"],"number":344,"repository":"sablier-labs/interfaces","state":"closed","title":"Make ESLint not produce `.eslintcache` files anymore","type":"issue","updatedAt":"2023-06-19T15:44:58Z","url":"https://github.com/sablier-labs/interfaces/issues/344"},{"author":"PaulRBerg","body":"Analogous to #309, but for the `humanized` parameter in `_.toValuePrepared`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/83be84960cc58f7a06d62e162f30ed93acf25c48/packages/utils/src/libraries/lodash.ts#L407-L418\r\n\r\nHere is a particular case where the type error occurs:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/83be84960cc58f7a06d62e162f30ed93acf25c48/apps/client/src/extensions/ExponentialCliff/process.ts#L134-L142\r\n\r\nHere are all the cases where the type error occurs:\r\n\r\nhttps://app.warp.dev/block/QPztkJhUjL5qNBAPg7SLEf\r\n\r\nRelated: https://github.com/sablier-labs/v2-interfaces/issues/326","createdAt":"2023-06-08T17:47:16Z","labels":["type: bug","priority: 2"],"number":341,"repository":"sablier-labs/interfaces","state":"closed","title":"Type 'number' is not assignable to type 'string | BigNumber | undefined'.","type":"issue","updatedAt":"2023-06-17T10:34:48Z","url":"https://github.com/sablier-labs/interfaces/issues/341"},{"author":"gavriliumircea","body":"The end to end test with cypress need to be revisited due to the changes at the subgraph and contracts level. Also it would be useful to have a list of flows that should covered in a beta testing stage.","createdAt":"2023-06-08T13:13:20Z","labels":["type: test"],"number":339,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix cypress tests and create a list of manual test cases for beta testing","type":"issue","updatedAt":"2023-06-12T17:59:56Z","url":"https://github.com/sablier-labs/interfaces/issues/339"},{"author":"PaulRBerg","body":"Refs:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/298#issuecomment-1580678019\r\n- https://github.com/sablier-labs/v2-interfaces/issues/298#issuecomment-1581094527","createdAt":"2023-06-07T15:49:11Z","labels":["priority: 3"],"number":338,"repository":"sablier-labs/interfaces","state":"closed","title":"Split `tsc` part in `lint-fix` into a separate `compile-check` check","type":"issue","updatedAt":"2023-06-20T13:47:12Z","url":"https://github.com/sablier-labs/interfaces/issues/338"},{"author":"PaulRBerg","body":"We're on React v18.\r\n\r\n[Starting with React v17](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html), JSX can be used without importing React. No longer do we have to import React in the global scope, or add it as a dependency:\r\n\r\nhttps://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#removing-unused-react-imports\r\n\r\nThis is great for our packages, e.g. `themes`, which could be sanitized by getting rid of the React-related dependencies (the fewer dependencies we have to manage, the better).","createdAt":"2023-06-06T22:19:30Z","labels":["priority: 2"],"number":334,"repository":"sablier-labs/interfaces","state":"closed","title":"Delete all unused \"import React from react\" in JSX/TSX files","type":"issue","updatedAt":"2023-06-20T22:37:12Z","url":"https://github.com/sablier-labs/interfaces/issues/334"},{"author":"PaulRBerg","body":"This issue is a generalization of https://github.com/sablier-labs/v2-interfaces/issues/297.\r\n\r\nAn important problem I have discovered since I started reviewing this code base is the current lack of sensitivity to dependency requirements.\r\n\r\nWhat we want from our package management system is this:\r\n\r\n- if an external dependency is imported within a particular package of ours, AND\r\n- The said package does _not_ list the said dependency in `package.json`, THEN\r\n- The compiler should complain when building the said package ([example](https://app.warp.dev/block/6zSYL5Z4z6bQZQtclKWSZc))\r\n\r\nAll of the above is trivial to do with [Project References](https://www.typescriptlang.org/docs/handbook/project-references.html), but, unfortunately, this feature of TypeScript is [not compatible with Next.js](https://github.com/vercel/next.js/discussions/50866) (due to Next.js' reliance on a bespoke compilation pipeline, i.e. SWC).\r\n\r\nMore research is needed on how this issue can be addressed without PREFs.\r\n\r\nRefs:\r\n\r\n- https://github.com/sablier-labs/v2-interfaces/issues/297\r\n- https://github.com/sablier-labs/v2-interfaces/issues/290#issuecomment-1577044762\r\n- https://github.com/sablier-labs/v2-interfaces/issues/290#issuecomment-1576555172","createdAt":"2023-06-06T20:13:07Z","labels":["priority: 1"],"number":333,"repository":"sablier-labs/interfaces","state":"closed","title":"Ability to detect missing dependencies","type":"issue","updatedAt":"2023-06-17T10:33:32Z","url":"https://github.com/sablier-labs/interfaces/issues/333"},{"author":"PaulRBerg","body":"One necessary task for addressing #290 and #330 is to introduce a dichotomy of TSConfig files:\r\n\r\n| Name | Description |\r\n|--------|--------|\r\n| `tsconfig.json` | Development-oriented TSConfig file, which contains `paths`, meant to provide IDE support |\r\n| `tsconfig.build.json` | Build-oriented TSConfig, which doesn't contain `paths`, meant to be used when building the packages/ apps |\r\n\r\nThe latter has to avoid `paths` because [TypeScript does not resolve the paths in `outDir`](https://github.com/microsoft/TypeScript/issues/10866).\r\n\r\nThe advantages of this approach are explained in this article: [How to set up a TypeScript monorepo and make Go to definition work](https://medium.com/@NiGhTTraX/how-to-set-up-a-typescript-monorepo-with-lerna-c6acda7d4559).\r\n\r\nAnd an example can be found here: https://github.com/NiGhTTraX/ts-monorepo\r\n\r\n_Side note_: `tsconfig.build.json` could alternatively be named `tsconfig.prod.json`.","createdAt":"2023-06-06T16:29:56Z","labels":["type: feature","priority: 1"],"number":331,"repository":"sablier-labs/interfaces","state":"closed","title":"Dichotomy between development and production `tsconfig.json` files","type":"issue","updatedAt":"2023-06-17T10:32:44Z","url":"https://github.com/sablier-labs/interfaces/issues/331"},{"author":"PaulRBerg","body":"This is a special case of #290, but it is an important case, so I opened a separate issue for it. We might end up not implementing TypeScript Project References (because of Next.js' [limitations](https://github.com/vercel/next.js/issues/8708)), but, at a minimum, we should absolutely make the Next.js app builds independent of one another.\r\n\r\nTo reproduce:\r\n\r\n1. Go to `apps/product/src/pages/Home/index.tsx`\r\n2. Add this code: `const foo: bool = 42;`\r\n3. Go to `apps/labs`\r\n4. Run `yarn build`\r\n5. You will get this error:\r\n\r\nhttps://app.warp.dev/block/dTAchQqnnfwiZDXKcLTepx","createdAt":"2023-06-06T15:51:18Z","labels":["priority: 1"],"number":330,"repository":"sablier-labs/interfaces","state":"closed","title":"App builds are not independent of one another","type":"issue","updatedAt":"2023-06-17T10:32:50Z","url":"https://github.com/sablier-labs/interfaces/issues/330"},{"author":"PaulRBerg","body":"Unless I'm missing something, the dummy ESLint config at the root of the repo is there only to make the ESLint VSCode extension work:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/.eslintrc.yml\r\n\r\nBut there's no need for this file; we could simply define the `eslint.workingDirectories` VSCode setting:\r\n\r\nhttps://github.com/belgattitude/nextjs-monorepo-example/tree/1b8dcd1651b2f88ac0acd4c0fb98e8abac740a7d#61-vscode\r\n\r\nNote: this issue goes hand in hand with https://github.com/sablier-labs/v2-interfaces/issues/312.","createdAt":"2023-06-06T13:43:05Z","labels":["type: feature","priority: 3"],"number":329,"repository":"sablier-labs/interfaces","state":"closed","title":"Replace dummy ESLint config with `workingDirectories` VSCode setting","type":"issue","updatedAt":"2023-06-17T10:33:57Z","url":"https://github.com/sablier-labs/interfaces/issues/329"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe `lodash` mixins have to be manually initialized:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/utils/src/libraries/lodash.ts#L418-L444\r\n\r\nAnd the `lodash` types have to be manually included:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/types/src/libraries/lodash.d.ts#L17\r\n\r\nThe above is quite problematic because it requires every consumer of the `@sablier/utils` to call `initialize` _before_ importing and using `_` in its own context, and to also take care of `@sablier/types`. This approach is prone to errors because it is trivial to forget to perform the operations in the right order as there's no _topological_ connection between the global lodash package (`_`) and the mixings in `@sablier/utils`.\r\n\r\nThen, what's the point of exporting the mixins outside of the `utils/libraries/lodash`?\r\n\r\n## Solution\r\n\r\n1. Use the solution suggested [here](https://stackoverflow.com/a/41832451/3873510), apply the mixins in the global JavaScript context, and export a mutated lodash that is of type `LoDashMixins`.\r\n2. Import lodash from `@sablier/utils` - this makes sense because we're basically using - and intending to - use a mutated version of lodash, not lodash itself.","createdAt":"2023-06-05T22:20:03Z","labels":["type: bug","priority: 1"],"number":326,"repository":"sablier-labs/interfaces","state":"closed","title":"Lodash mixins are too loose","type":"issue","updatedAt":"2023-06-17T10:34:20Z","url":"https://github.com/sablier-labs/interfaces/issues/326"},{"author":"PaulRBerg","body":"The current approach involves each package defining an explicit `global.d.ts`, and this is not great due to the following reasons:\r\n\r\n- It pollutes the namespace with superfluous types; e.g. what do the `utils` need the `*.png` module declarations for?\r\n- It is repetitive and manual because a `globals.d.ts` needs to implemented and `include`d in each package\r\n- Most importantly, it is not compatible with a modular design (ref #290) ([Typescript does not copy `*.d.ts`](https://stackoverflow.com/questions/56018167/typescript-does-not-copy-d-ts-files-to-build) files)\r\n\r\nLuckily, TypeScript comes with a built-in, declarative solution to all of these issues, i.e., [`typeRoots`](https://www.typescriptlang.org/tsconfig#typeRoots). We can create a new `declarations` package that starts with `@types/` which will automatically be loaded by TypeScript without having to lift a finger - and lo and behold how all packages that install this local `@types/` package get the module declarations without having to provide a bespoke `globals.d.ts` file.\r\n\r\nhttps://github.com/microsoft/TypeScript/issues/30855#issuecomment-1432931820","createdAt":"2023-06-05T22:07:56Z","labels":["priority: 2"],"number":325,"repository":"sablier-labs/interfaces","state":"closed","title":"Global declarations package","type":"issue","updatedAt":"2023-06-17T10:34:14Z","url":"https://github.com/sablier-labs/interfaces/issues/325"},{"author":"razgraf","body":"The `json-sort-cli` tool supports a [`--ci`](https://codsen.com/os/json-sort-cli) flag that can run the ordering tool in read-mode, which means it will fail when json elements are not in alphabetical order.\r\n\r\nWe should integrate this in our `prettier-check` script in `@sablier/locales` similar to how the base, `write`-mode or the utility is integrated in `prettier-fix`.","createdAt":"2023-06-05T16:07:41Z","labels":["priority: 3"],"number":320,"repository":"sablier-labs/interfaces","state":"closed","title":"Add order check for locales in the `prettier-check` script","type":"issue","updatedAt":"2023-06-20T13:47:12Z","url":"https://github.com/sablier-labs/interfaces/issues/320"},{"author":"PaulRBerg","body":"Anything related to Cypress (e.g. the [types](https://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/tsconfig.base.json#L48)) should be moved to a `tsconfig.test.json` file to separate the production and testing environments.\r\n\r\nI'm not sufficiently familiar with TypeScript to confirm that testing stuff does not get included in the production build - I would be inclined to believe that this does not happen (thanks to webpack), but still, we're giving the compiler unnecessary workload by including testing logic and types in the production build flow. Separating the environments would lead to faster build times, which is a desirable thing (e.g, they increase the CI run times).\r\n\r\nHere's an example from [The Ultimate Guide to TypeScript Monorepos](https://dev.to/mxro/the-ultimate-guide-to-typescript-monorepos-5ap7):\r\n\r\nhttps://github.com/goldstack/typescript-monorepo-boilerplate/blob/4cb5ad5fef6cacb232a1795173faa1e35aac6c68/packages/app-nextjs-1/tsconfig.test.json","createdAt":"2023-06-05T16:05:19Z","labels":["type: test","priority: 3"],"number":319,"repository":"sablier-labs/interfaces","state":"closed","title":"Provide testing-specific TSConfig file for Cypress","type":"issue","updatedAt":"2023-06-17T10:33:01Z","url":"https://github.com/sablier-labs/interfaces/issues/319"},{"author":"razgraf","body":"After #281 we won't be using `ethers` any more. The import linting rule should be removed.","createdAt":"2023-06-05T15:59:28Z","labels":[],"number":318,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove `ethers` import rule from `**/.eslintrc.yml`","type":"issue","updatedAt":"2023-06-08T13:37:55Z","url":"https://github.com/sablier-labs/interfaces/issues/318"},{"author":"PaulRBerg","body":"TypeScript types are never `dependencies`, but that's where the package `@sablier/types` is currently declared in all `packages`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/utils/package.json#L12-L13","createdAt":"2023-06-05T11:14:45Z","labels":["priority: 3"],"number":315,"repository":"sablier-labs/interfaces","state":"closed","title":"`@sablier/types` should be in ` devDependencies`","type":"issue","updatedAt":"2023-06-08T22:10:10Z","url":"https://github.com/sablier-labs/interfaces/issues/315"},{"author":"PaulRBerg","body":"As discussed in https://github.com/sablier-labs/v2-interfaces/discussions/301\r\n\r\n- [ ] Turn all `peerDependencies` into `dependencies` or `devDependencies`\r\n- [ ] Remove all unneeded `peerDependencies` (See [my conversation](https://chat.openai.com/share/7f2de93a-2f50-460f-a9ed-8a6a2a827c00) with ChatGPT)\r\n\r\nNote: when the repo is turned into a monorepo, missing dependencies can cause type errors:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/issues/313#issuecomment-1576584403","createdAt":"2023-06-05T11:06:00Z","labels":["type: bug","priority: 1"],"number":314,"repository":"sablier-labs/interfaces","state":"closed","title":"Polish `peerDependencies`","type":"issue","updatedAt":"2023-06-17T10:33:40Z","url":"https://github.com/sablier-labs/interfaces/issues/314"},{"author":"PaulRBerg","body":"I started getting compilation errors in `@sablier/components` after addressing the global compilation issue described in #290:\r\n\r\nhttps://app.warp.dev/block/oxnrOVYLQ1yZBo4xthZTGV\r\n\r\nExplanations:\r\n\r\n- https://github.com/microsoft/TypeScript/issues/42873\r\n- https://stackoverflow.com/q/73786166/3873510\r\n\r\nPossible fixes:\r\n\r\n1. Define `@types/react` everywhere (not fully sure this would work)\r\n2. Use Yarn's [resolution system](https://yarnpkg.com/cli/set/resolution)","createdAt":"2023-06-05T10:50:58Z","labels":["type: bug","priority: 2"],"number":313,"repository":"sablier-labs/interfaces","state":"closed","title":"Multiple versions of `@types/react`","type":"issue","updatedAt":"2023-06-09T09:16:07Z","url":"https://github.com/sablier-labs/interfaces/issues/313"},{"author":"PaulRBerg","body":"It would be very helpful to commit the following VSCode settings in version control (in `.vscode/settings.json`), to ensure that users are always using the workspace TypeScript compiler, not the one loaded by VSCode by default:\r\n\r\n```json\r\n{\r\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\r\n  \"editor.formatOnSave\": true,\r\n  \"typescript.tsdk\": \"node_modules/typescript/lib\"\r\n}\r\n```\r\n\r\nAdditionally, more relevant settings from [`sablier-labs/vscode-setup`](https://github.com/sablier-labs/vscode-setup) could be used.","createdAt":"2023-06-05T10:12:11Z","labels":["type: feature","priority: 3"],"number":312,"repository":"sablier-labs/interfaces","state":"closed","title":"Commit basic VSCode settings in version control","type":"issue","updatedAt":"2023-06-17T10:34:38Z","url":"https://github.com/sablier-labs/interfaces/issues/312"},{"author":"PaulRBerg","body":"I started getting many compilation errors in `@sablier/components` after addressing the global compilation issue described in #290:\r\n\r\nhttps://app.warp.dev/block/T1UfuZdXl912qKEIA8Deeb\r\n\r\nThe problem is best explained here:\r\n\r\nhttps://github.com/microsoft/TypeScript/issues/5711\r\n\r\nThe fix is contextual for each error reported by TypeScript.","createdAt":"2023-06-05T10:00:18Z","labels":["type: bug","priority: 2"],"number":311,"repository":"sablier-labs/interfaces","state":"closed","title":"Exported variable ... has or is using name ... from external module ... but cannot be named.","type":"issue","updatedAt":"2023-06-07T11:37:01Z","url":"https://github.com/sablier-labs/interfaces/issues/311"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/94d110791c08ac0873ee15f6b18ecbe265802e75/packages/hooks/src/useTokenBalance.ts#L30","createdAt":"2023-06-04T18:31:48Z","labels":["type: bug","priority: 2"],"number":309,"repository":"sablier-labs/interfaces","state":"closed","title":"Type 'number | undefined' is not assignable to type 'string | number | BigNumber'","type":"issue","updatedAt":"2023-06-17T10:34:52Z","url":"https://github.com/sablier-labs/interfaces/issues/309"},{"author":"PaulRBerg","body":"Here:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/94d110791c08ac0873ee15f6b18ecbe265802e75/packages/hooks/src/useRequestStreamItem.ts#L41","createdAt":"2023-06-04T18:22:16Z","labels":["type: bug","priority: 2"],"number":308,"repository":"sablier-labs/interfaces","state":"closed","title":"'filter.streamIds' is possibly 'undefined'","type":"issue","updatedAt":"2023-06-17T10:34:29Z","url":"https://github.com/sablier-labs/interfaces/issues/308"},{"author":"andreivladbrg","body":"While I was testing the app I noticed that in the search bar when creating a dynamic stream it says \"pro\" instead of \"dynamic\"\r\n\r\n<img width=\"277\" alt=\"image\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/99738872/b356dacc-5ac7-4cd1-b8f5-8cd17c877c00\">\r\n","createdAt":"2023-06-04T14:18:39Z","labels":["type: feature","priority: 1"],"number":303,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor shape names from pro to dynamic","type":"issue","updatedAt":"2023-06-08T18:18:41Z","url":"https://github.com/sablier-labs/interfaces/issues/303"},{"author":"PaulRBerg","body":"In the protocol, `SETTLED` is defined as a stream in which all assets have been streamed, so these comments are incorrect:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/constants/src/stream/index.ts#L46\r\n\r\nLockup Dynamic streams can become `SETTLED` long before `endTime`, because segment amounts can be zero.\r\n\r\nFor easy maintabability, I suggest copy-pasting the comments from the contracts:\r\n\r\nhttps://github.com/sablier-labs/v2-core/blob/239a695e242d0f395d8afdb77777d39c6211a2d2/src/types/DataTypes.sol#L47","createdAt":"2023-06-04T14:03:37Z","labels":["priority: 3"],"number":302,"repository":"sablier-labs/interfaces","state":"closed","title":"Comments explaining the `SETTLED` status are incorrect","type":"issue","updatedAt":"2023-06-20T22:37:11Z","url":"https://github.com/sablier-labs/interfaces/issues/302"},{"author":"PaulRBerg","body":"This:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/utils/src/index.ts\r\n\r\nCan be simplified like this:\r\n\r\n```typescript\r\nimport vendors from \"./vendors\";\r\n\r\nexport { initialize, vendors };\r\n```\r\n\r\nSimilarly, this:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/utils/src/vendors/index.ts\r\n\r\nCan be rewritten like this:\r\n\r\n```typescript\r\nexport default { crash, track };\r\n```\r\n\r\nThis is not just a matter of style - it's also a matter of simplicity and ergonomics. There's no benefit in exporting the same logic in multiple ways.","createdAt":"2023-06-03T20:34:09Z","labels":["priority: 3"],"number":299,"repository":"sablier-labs/interfaces","state":"closed","title":"Superfluous re-export in `utils` and unused exports in `subgraphs`","type":"issue","updatedAt":"2023-06-20T13:47:11Z","url":"https://github.com/sablier-labs/interfaces/issues/299"},{"author":"PaulRBerg","body":"All `lint-fix` scripts run `tsc`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/utils/package.json#L55\r\n\r\nBut this doesn't actually achieve anything. Running `tsc` simply compiles the TypeScript code; it doesn't fix any linting errors.\r\n\r\nWe should update all `lint-fix` scripts like this:\r\n\r\n```json\r\n\"lint-fix\": \"yarn eslint --cache --fix --ignore-path ../../.eslintignore .\",\r\n```","createdAt":"2023-06-03T20:10:00Z","labels":["priority: 3"],"number":298,"repository":"sablier-labs/interfaces","state":"closed","title":"Redundant use of `tsc` in `lint-fix` scripts","type":"issue","updatedAt":"2023-06-07T16:49:10Z","url":"https://github.com/sablier-labs/interfaces/issues/298"},{"author":"PaulRBerg","body":"The `locales` packages uses a Lodash mixin defined in `utils`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/locales/src/index.ts#L23\r\n\r\nHowever, `@sablier/utils` is not listed as a dependency in `package.json`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/locales/package.json#L12-L14\r\n\r\nThis works only because all \"packages\" are compiled in the global scope (ref #290). There are likely more issues analogous to this.","createdAt":"2023-06-03T17:50:00Z","labels":["priority: 2"],"number":297,"repository":"sablier-labs/interfaces","state":"closed","title":"Install missing local package dependencies in monorepo packages","type":"issue","updatedAt":"2023-06-17T10:33:10Z","url":"https://github.com/sablier-labs/interfaces/issues/297"},{"author":"PaulRBerg","body":"The Lodash mixin `isNilOrEmptyString` is currently defined like this:\r\n\r\n```typescript\r\nexport function isNilOrEmptyString(value: unknown): value is null | undefined {\r\n  return _.isNil(value) || _.toString(value).length === 0;\r\n}\r\n```\r\n\r\nThis function contains a type guard, i.e. `value is null | undefined `, which serves as an add-on that helps TypeScript narrow down the type of the input `value` _when_ the function evaluates to `true`.\r\n\r\nThe problem is that the type guard is incomplete - it does not contain all the possible types for which the function evaluates to `true`. It's missing the empty string `\"\"`.\r\n\r\nThe complete implementation is:\r\n\r\n```typescript\r\nexport function isNilOrEmptyString(\r\n  value: unknown,\r\n): value is null | undefined | \"\" {\r\n  return _.isNil(value) || _.toString(value).length === 0;\r\n}\r\n```\r\n\r\nMore context from ChatGPT: https://chat.openai.com/share/3af47a0f-a690-4871-88f6-70dcf67216b2","createdAt":"2023-06-03T13:45:26Z","labels":["type: bug","priority: 3"],"number":295,"repository":"sablier-labs/interfaces","state":"closed","title":"Incorrect type guard in `isNilOrEmptyString`","type":"issue","updatedAt":"2023-06-17T10:35:05Z","url":"https://github.com/sablier-labs/interfaces/issues/295"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nWhile working on the fix for https://github.com/sablier-labs/v2-interfaces/issues/290, I bumped into another compilation error:\r\n\r\nhttps://app.warp.dev/block/ifyzMlglC2WO6sH2pswFUc\r\n\r\nIt turns out that the issue is related to the Lodash mixings defined in the `utils` package, e.g. `isNilOrEmptyString`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/packages/utils/src/libraries/lodash.ts#L103-L105\r\n\r\nThese mixins don't have any associated type declarations.\r\n\r\nFor more details, see my conversation with ChatGPT: https://chat.openai.com/share/1056a537-7174-4020-a358-ef9cd9534ea6\r\n\r\n## Solution\r\n\r\n```typescript\r\ndeclare module 'lodash' {\r\n  interface LoDashStatic {\r\n    isNilOrEmptyString(value: unknown): value is null | undefined;\r\n  }\r\n}\r\n```","createdAt":"2023-06-03T13:31:38Z","labels":["type: bug"],"number":294,"repository":"sablier-labs/interfaces","state":"closed","title":"No type declarations for Lodash mixins","type":"issue","updatedAt":"2023-06-03T17:47:01Z","url":"https://github.com/sablier-labs/interfaces/issues/294"},{"author":"PaulRBerg","body":"I'm not quite sure why the current set-up works (perhaps the root issue is https://github.com/sablier-labs/v2-interfaces/issues/290), but, in a TypeScript project, any files that do not use the typical extension `*.ts` or `*.tsx` need an explicit module declaration, like this:\r\n\r\n```typescript\r\ndeclare module \"*.png\";\r\n```\r\n\r\nHowever, there are no such module declarations for the media files in `packages/assets`.\r\n\r\nReferences:\r\n\r\n- https://stackoverflow.com/a/57176553/3873510\r\n- https://stackoverflow.com/q/71099924/3873510\r\n- https://stackoverflow.com/q/64732623/3873510\r\n- https://github.com/Microsoft/TypeScript/issues/15146","createdAt":"2023-06-03T13:15:50Z","labels":["priority: 3"],"number":293,"repository":"sablier-labs/interfaces","state":"closed","title":"No module declarations for media files","type":"issue","updatedAt":"2023-06-03T20:42:45Z","url":"https://github.com/sablier-labs/interfaces/issues/293"},{"author":"PaulRBerg","body":"The media files in `packages/assets` may be part of our future public URLs (e.g. `sablier.com/logo/icon-gradient.svg`).\r\n\r\nFor [best SEO results](https://developers.google.com/search/docs/crawling-indexing/url-structure), it is recommended to use hyphens for separating words in URLs.\r\n\r\nTherefore, we should rename all assets to contain hyphens (`-`) instead of underscores (`_`).","createdAt":"2023-06-03T13:10:43Z","labels":["priority: 3"],"number":292,"repository":"sablier-labs/interfaces","state":"closed","title":"Use hyphens in all asset file names","type":"issue","updatedAt":"2023-06-20T22:37:11Z","url":"https://github.com/sablier-labs/interfaces/issues/292"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThere is an `include` field in the root `tsconfig.base.json` file, which defines universal globs `**/*`:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/tsconfig.base.json#L51\r\n\r\nThe problem is that the TypeScript compiler resolves the `include` array relative to the location of the config file itself, not relative to the directory from which `tsc` is run. As a result, running `tsc` anywhere in the monorepo will re-compile all code in all packages, every time.\r\n\r\nFor more details, see my conversation with ChatGPT: https://chat.openai.com/share/47f1a4be-e75e-4c97-b5d7-304005782be6\r\n\r\n## Solution\r\n\r\nI suggest a two-pronged approach:\r\n\r\n1. Remove `include` from the base config\r\n2. Define `include` in each package's config","createdAt":"2023-06-03T12:12:46Z","labels":["type: bug","type: feature","priority: 0"],"number":290,"repository":"sablier-labs/interfaces","state":"closed","title":"All packages are compiled every time","type":"issue","updatedAt":"2023-06-17T10:32:37Z","url":"https://github.com/sablier-labs/interfaces/issues/290"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nOnly a handful of packages under `packages` contain `@types/node` as a dev dependency, although all of them are using the root `tsconfig.base.json` file, which requires the `node` types:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/tsconfig.base.json#L48\r\n\r\nAs with https://github.com/sablier-labs/v2-interfaces/issues/288, I am not quite sure why `tarn tsc` works - it shouldn't.\r\n\r\n## Solution\r\n\r\nInstall `@types/node` as a dev dependency in all packages.","createdAt":"2023-06-03T12:00:26Z","labels":["priority: 3"],"number":289,"repository":"sablier-labs/interfaces","state":"closed","title":"Install missing `@types/node` dev dependency","type":"issue","updatedAt":"2023-06-17T10:32:56Z","url":"https://github.com/sablier-labs/interfaces/issues/289"},{"author":"PaulRBerg","body":"## Problem\r\n\r\nThe `cypress` types are loaded in the root `tsconfig.base.json` file:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/tsconfig.base.json#L48\r\n\r\nThis is not good because Cypress is only needed in `apps`. I'm actually not sure why `yarn tsc` passes in each package under `packages` - it shouldn't, because the Cypress types are not available there (my guess is that this is related to Yarn's hoisting of `node_modules`).\r\n\r\n## Solution\r\n\r\n`cypress` should be removed from there, and defined explicitly in each `tsconfig.json` file under `apps`, like so:\r\n\r\n```json\r\n{\r\n  \"extends\": \"../../tsconfig.base.json\",\r\n  \"compilerOptions\": {\r\n    \"types\": [\"cypress\", \"node\"]\r\n  }\r\n}\r\n```","createdAt":"2023-06-03T11:59:02Z","labels":["priority: 3"],"number":288,"repository":"sablier-labs/interfaces","state":"closed","title":"`cypress` types should not be defined in the root","type":"issue","updatedAt":"2023-06-17T10:33:46Z","url":"https://github.com/sablier-labs/interfaces/issues/288"},{"author":"PaulRBerg","body":"I did not properly hook up the CI jobs in https://github.com/sablier-labs/v2-interfaces/commit/6ac5fe0cfe38a17c7a225a24cc1367879d566557. This step:\r\n\r\nhttps://github.com/sablier-labs/v2-interfaces/blob/8d895f546840450acac78cb3377f9530ff9e2580/.github/workflows/ci-client.yml#L37\r\n\r\nShould be rewritten like this:\r\n\r\n```diff\r\n- if: steps.cache.outputs.cache-hit != 'true'\r\n+ if: steps.cache-node-modules.outputs.cache-hit != 'true'\r\n```\r\n\r\nThat is, the name of the step is incorrect.","createdAt":"2023-06-03T10:44:09Z","labels":["type: bug","priority: 3"],"number":287,"repository":"sablier-labs/interfaces","state":"closed","title":"Node modules caching not working in CI","type":"issue","updatedAt":"2023-06-09T08:10:39Z","url":"https://github.com/sablier-labs/interfaces/issues/287"},{"author":"razgraf","body":"As per #257 we should refactor the apps to a more defined name structure:\r\n```ts\r\n\r\ntype prefix = \"client\" | \"landing\";\r\ntype purpose = string | undefined; // e.g. \"labs\", \"light\" or empty (default cases for the core v2 apps)\r\n\r\ntype name = `${prefix}{purpose extends undefined ? \"\" : `-${purpose}` }`","createdAt":"2023-06-02T20:34:31Z","labels":["priority: 2"],"number":285,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor app suite naming to `landing`, `client` and `landing-labs`","type":"issue","updatedAt":"2023-07-03T17:58:24Z","url":"https://github.com/sablier-labs/interfaces/issues/285"},{"author":"PaulRBerg","body":"The create stream form features this input:\r\n\r\n<img width=\"419\" alt=\"Screenshot 2023-06-02 at 2 46 36 PM\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/8782666/f92cad64-eac5-4abd-99a5-d77e2b28133e\">\r\n\r\nThis wording is not clear enough; it could mean any one of the following things:\r\n\r\n1. Cancel and recover all funds back\r\n2. Cancel and recover some funds back\r\n3. Cancel the stream creation transaction itself - in Ethereum, the word \"cancel\" is frequently used to refer to canceling txs\r\n\r\nSuggestions:\r\n\r\n- [ ] Add an info icon to the copy, which when clicked would open a tooltip explaining that canceling means a partial recover, and ideally provide an example, too.\r\n- [ ] Use the modal verb \"would\" instead of \"can\". The latter does not imply a choice; it sounds as if you are surveying the user on their knowledge about how Sablier works.\r\n- [ ] Turn the copy into \"Would you like the stream to be cancelable?\" (to make it clear that the cancelability refers to streams, not txs)\r\n\r\nAlternatively, instead of a tooltip, we could simply add more context in the copy itself, e.g.\r\n\r\n> Would you like the stream to be cancelable (i.e. be able to recover unstreamed assets)?","createdAt":"2023-06-02T11:56:31Z","labels":[],"number":283,"repository":"sablier-labs/interfaces","state":"closed","title":"Explain \"cancelability\"","type":"issue","updatedAt":"2023-06-03T11:30:38Z","url":"https://github.com/sablier-labs/interfaces/issues/283"},{"author":"razgraf","body":"When used inside the Safe ecosystem, the client app cannot track transaction txs properly. This is caused by the Safe Connector yielding the wrong transaction hash as per this wagmi issue: https://github.com/wagmi-dev/wagmi/issues/2461.\r\n\r\n\r\nWorst case scenario, a hotfix can be implemented that disables tx-watching if the `host` is identified as a Gnosis Safe, but it would be messy. Hopefully they fix it soon.","createdAt":"2023-05-30T20:35:35Z","labels":["type: bug","priority: 0"],"number":279,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix Safe transaction hash watcher","type":"issue","updatedAt":"2023-06-26T09:35:51Z","url":"https://github.com/sablier-labs/interfaces/issues/279"},{"author":"razgraf","body":"Depends on[ #440](https://github.com/sablier-labs/v2-core/pull/440)","createdAt":"2023-05-29T15:32:55Z","labels":["type: feature"],"number":278,"repository":"sablier-labs/interfaces","state":"closed","title":"Add the NFT to the stream details panel","type":"issue","updatedAt":"2023-05-31T21:10:41Z","url":"https://github.com/sablier-labs/interfaces/issues/278"},{"author":"razgraf","body":"In order to support next-export (and #243 's IPFS deployment which relies on it) we have to fix it. At the moment it won't work due to `Sentry` and `next-translate`.\r\n\r\nThe `getServerSideProps` hack used in #198 also had to be disabled to due the above.","createdAt":"2023-05-28T21:23:16Z","labels":["type: bug","priority: 2"],"number":277,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix next-export (next-translate/i18n)","type":"issue","updatedAt":"2023-05-30T18:14:54Z","url":"https://github.com/sablier-labs/interfaces/issues/277"},{"author":"razgraf","body":"Since we started working on this repository all linters have undergone major updates. To avoid technical debt we should bump packages and re-configure them to work with the latest versions. \r\n\r\nCaution is warranted as all these linters have introduced a lot of breaking changes which also break some plugins we rely upon (e.g. the semantic ordering, default eslint rules etc.).\r\n\r\nThis issue should also serve as an aggregator for related issues such as #2 and #224.\r\n\r\nThis is not top-priority at the moment.","createdAt":"2023-05-28T21:17:02Z","labels":["backlog","stale"],"number":276,"repository":"sablier-labs/interfaces","state":"closed","title":"Update and re-configure eslint, stylelint and prettier","type":"issue","updatedAt":"2024-09-22T03:07:38Z","url":"https://github.com/sablier-labs/interfaces/issues/276"},{"author":"razgraf","body":"The simulate modal isn't showing the chart any more. This may have happened after the conditional optimizations done on the Chart.JS imports.\r\n\r\n<img width=\"1275\" alt=\"Screenshot 2023-05-25 at 20 29 21\" src=\"https://github.com/sablier-labs/v2-interfaces/assets/15740806/4dada6f9-fbcd-478b-bd0b-ed74e53a2146\">\r\n","createdAt":"2023-05-25T17:30:47Z","labels":["type: bug","priority: 2"],"number":272,"repository":"sablier-labs/interfaces","state":"closed","title":"Simulate modal isn't working","type":"issue","updatedAt":"2023-05-25T17:59:57Z","url":"https://github.com/sablier-labs/interfaces/issues/272"},{"author":"gavriliumircea","body":"A fresh checkup for non-translated strings should be applied over the entire app to account for the latest changes (some places may still use hardcoded words/phrases).","createdAt":"2023-05-25T16:38:00Z","labels":["priority: 2"],"number":271,"repository":"sablier-labs/interfaces","state":"closed","title":"Check translations in all sablier apps","type":"issue","updatedAt":"2023-05-29T20:25:21Z","url":"https://github.com/sablier-labs/interfaces/issues/271"},{"author":"razgraf","body":"End dates have to be situated in the future.","createdAt":"2023-05-24T18:00:00Z","labels":["type: bug","priority: 0"],"number":270,"repository":"sablier-labs/interfaces","state":"closed","title":"Force a future end date in the create stream forms","type":"issue","updatedAt":"2023-05-29T20:25:22Z","url":"https://github.com/sablier-labs/interfaces/issues/270"},{"author":"gavriliumircea","body":"After the integration with PRBProxy the sender of the stream will be the address of the proxy instead of the EOA. In order to help user to better understand this concept we need to update the design of our SearchModal. Sender/Recipient field will be split and a new type of input will be needed that will perform a resolution to the proxyAddress of an EOA.","createdAt":"2023-05-19T11:18:49Z","labels":["type: feature"],"number":269,"repository":"sablier-labs/interfaces","state":"closed","title":"Refine search modal","type":"issue","updatedAt":"2023-05-25T17:59:23Z","url":"https://github.com/sablier-labs/interfaces/issues/269"},{"author":"razgraf","body":"The createSingle and createGroup machines now involve a two step sign-process: signature and transaction. We should change the title of the modal during these phases from \"Confirming Transaction\" to\r\n\r\n1. \"Signing transaction (1/2)\"\r\n2. \"Confirming transaction (2/2)\"\r\n\r\n![Screenshot 2023-05-18 at 20 06 28](https://github.com/sablierhq/v2-interfaces/assets/15740806/03a6c1b7-231e-47e0-ad4b-d1816549ee9b)\r\n","createdAt":"2023-05-18T17:08:47Z","labels":[],"number":266,"repository":"sablier-labs/interfaces","state":"closed","title":"Include a new \"signing\" step in the transaction machine (createSingle/createGroup)","type":"issue","updatedAt":"2023-05-25T17:59:23Z","url":"https://github.com/sablier-labs/interfaces/issues/266"},{"author":"razgraf","body":"At the moment, once the allowance request will pop-up in the wallet, if the user rejects it the machine will not allow them to retry it. The system needs to make sure users can re-run the process from the initial state if they click the button again.\r\n\r\n![Screenshot 2023-05-18 at 20 04 48](https://github.com/sablierhq/v2-interfaces/assets/15740806/29929323-6555-41a8-b265-5e457bbe5138)\r\n","createdAt":"2023-05-18T17:05:08Z","labels":["type: bug","priority: 1"],"number":265,"repository":"sablier-labs/interfaces","state":"closed","title":"Reset allowance machine after the fail state (on rejected)","type":"issue","updatedAt":"2023-05-25T17:59:22Z","url":"https://github.com/sablier-labs/interfaces/issues/265"},{"author":"razgraf","body":"Create a nice illustrations for the default state of the dashboard: no streams.\r\n\r\nIt should include two call-to-actions: \"create stream\" and \"see recent stream on <network>.","createdAt":"2023-05-18T17:01:52Z","labels":["type: feature","priority: 1"],"number":264,"repository":"sablier-labs/interfaces","state":"closed","title":"Add no-data graphics to the dashboard","type":"issue","updatedAt":"2023-06-20T23:30:05Z","url":"https://github.com/sablier-labs/interfaces/issues/264"},{"author":"razgraf","body":"Because post #249 the connect address doesn't have dual personality any more, the feature that \"searches and selects\" streams to be stopped/canceled at the same time cannot has to act on different rules.\r\n\r\nTo be precise, we can only allow stop to be called *as a sender* (through the proxy) or *as a recipient* (through the contracts) but not both at the same time.","createdAt":"2023-05-18T16:54:04Z","labels":["priority: 1"],"number":263,"repository":"sablier-labs/interfaces","state":"closed","title":"Prevent stopMultiple from being called on recipient and sender streams at the same time","type":"issue","updatedAt":"2023-05-25T17:59:22Z","url":"https://github.com/sablier-labs/interfaces/issues/263"},{"author":"razgraf","body":"#249 included major updates to the way to perform our transactions. Now everything is done through the proxy system, which means analyzing logs may prove a bit harder than before.\r\n\r\nThe feature meant to provide the user with a one-click travel to their newly created streams was disabled during these updates. The goal is to enable it again by modifying the event parsing system to support this proxy -> target -> lockup flow.\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/pull/249#discussion_r1195543728","createdAt":"2023-05-18T16:07:42Z","labels":["type: feature","priority: 2"],"number":262,"repository":"sablier-labs/interfaces","state":"closed","title":"Re-implement the streamId extraction from logs after the create transaction","type":"issue","updatedAt":"2023-05-25T17:59:22Z","url":"https://github.com/sablier-labs/interfaces/issues/262"},{"author":"razgraf","body":"The current meta image doesn't contain the hourglass svg. Even if importing it entirely won't work, it might be worth to import it partially (the hourglass) and re-write the coloring system to mirror the one in the contracts.\r\n\r\n![Screenshot 2023-05-18 at 16 05 37](https://github.com/sablierhq/v2-interfaces/assets/15740806/c2682560-6183-4b5e-a287-b2d57eae4e79)\r\n","createdAt":"2023-05-18T13:06:33Z","labels":["type: feature","priority: 0"],"number":260,"repository":"sablier-labs/interfaces","state":"closed","title":"Add the NFT to the generated stream meta image","type":"issue","updatedAt":"2023-05-30T23:03:46Z","url":"https://github.com/sablier-labs/interfaces/issues/260"},{"author":"razgraf","body":"While doing some bundle optimization for the `product` app I've attempted to conditionally import mixpanel only in apps that use it e.g. the client app, not the product/labs app.\r\n\r\nEven though we're now very explicit when importing the tracking section of our vendors (a.k.a. mixpanel), the bundle analyzer still shows it (bottom right) as part of the coded. What's weird enough is that the sources/debugger tab of the browser won't show it as ever being touched (neither as a node_module or as an entry-point through `@sablier/utils/index`). \r\n\r\n![Screenshot 2023-05-18 at 15 42 47](https://github.com/sablierhq/v2-interfaces/assets/15740806/b3f59752-9d1c-4953-b867-2ac76a4532d4)\r\n","createdAt":"2023-05-18T12:48:32Z","labels":["priority: 3"],"number":259,"repository":"sablier-labs/interfaces","state":"closed","title":"Figure out why the mixpanel package is so \"sticky\" even when not in use","type":"issue","updatedAt":"2023-06-22T11:48:34Z","url":"https://github.com/sablier-labs/interfaces/issues/259"},{"author":"gavriliumircea","body":"This matter could be left towards the end of the development and should basically consist in an deployAndExecute command and the tests regarding this matter.","createdAt":"2023-05-16T14:35:39Z","labels":[],"number":258,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate proxy plugin system in the create proxy machine","type":"issue","updatedAt":"2023-05-25T17:59:21Z","url":"https://github.com/sablier-labs/interfaces/issues/258"},{"author":"razgraf","body":"This issue should track small UI bugs and other visual problems we encounter during testing this month.\n\n- [x] [1 - Address cutoff](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1542353643)\n- [x] [2 - Read button](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1554438831)\n- [x] [3 - Panel](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1595743323) \n- [x] [4 - Landing margins](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1598511655)\n- [x] [5 - Use case icons](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1598512831)\n- [x] [6 - Safari min-height issue](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1600458417)\n- [x] [7 - Stream circle amount](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1600786933)\n- [x] [8 - Truncated link](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1600873709) \n- [x] [9 - Cancelable labels](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1605465426) \n- [ ] 10 - Scroll - Won't fix\n- [x] [11 - NaN](https://github.com/sablier-labs/v2-interfaces/issues/253#issuecomment-1607197248) ","createdAt":"2023-05-10T14:54:48Z","labels":["priority: 1"],"number":253,"repository":"sablier-labs/interfaces","state":"closed","title":"[Thread] Small UI bugs and sizing issues","type":"issue","updatedAt":"2023-07-02T16:41:16Z","url":"https://github.com/sablier-labs/interfaces/issues/253"},{"author":"razgraf","body":"Make sure to add support for more wallets before launch.\r\n\r\nWalletConnect V2 can be configured as soon as https://github.com/sablierhq/v1-interfaces/issues/290 gets fixed.","createdAt":"2023-05-10T14:07:50Z","labels":["type: feature","priority: 2"],"number":252,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for multiple wallets through RainbowKit","type":"issue","updatedAt":"2023-06-26T12:20:16Z","url":"https://github.com/sablier-labs/interfaces/issues/252"},{"author":"PaulRBerg","body":"USDT is the primary example:\r\n\r\nhttps://gist.github.com/plutoegg/a8794a24dfa84d0b0104141612b52977#file-tethertoken-sol-L267-L271\r\n\r\nThe implication for the UI is that the approval mechanism will have to work something like this:\r\n\r\n```mermaid\r\nflowchart TD\r\n    A[Is token special?] -->|Yes| B[Is current allowance > 0]\r\n    A ---->|No| Z[Approve]\r\n    B --> |Yes| C[Set allowance to 0]\r\n    B ---->|No| Z[Approve]\r\n    C --> Z[Approve]\r\n```","createdAt":"2023-05-10T09:58:27Z","labels":["type: feature","backlog"],"number":250,"repository":"sablier-labs/interfaces","state":"closed","title":"Certain tokens require the allowance to be set to zero first if it's already non-zero","type":"issue","updatedAt":"2024-01-04T15:50:40Z","url":"https://github.com/sablier-labs/interfaces/issues/250"},{"author":"razgraf","body":"With version 1.0.1 wagmi switched from using ethers to their own viem library under the hood. The also introduce a ton of changes in terms of method parameters, types etc.\r\n\r\nWe should consider (1) updating and (2) switching ethers dependencies, if possible, to viem if that's lighter (ethers is still a huge library so the cost may be worth the trouble).\r\n\r\n\r\nhttps://github.com/wagmi-dev/wagmi/discussions/2207\r\n\r\nThey literally upgraded this for the public 12h ago 🤪","createdAt":"2023-05-09T16:08:06Z","labels":["priority: 1"],"number":248,"repository":"sablier-labs/interfaces","state":"closed","title":"Update wagmi, refactor from ethers-v5 to viem","type":"issue","updatedAt":"2023-06-07T18:45:47Z","url":"https://github.com/sablier-labs/interfaces/issues/248"},{"author":"razgraf","body":"As a requirement for Safe (but not only that, for decentralized backups as well) we should include IPFS deployments into our CI/CD flow.\r\n\r\nFigure out a way to do that using a GA build with Vercel hosted environment variables (this is preferred so we don't have to maintain the same secrets on github and vercel at the same time) on IPFS. Use Pinata to \"pin\" new deployments to a static hash we can submit to Safe or link to our sablier ENS.\r\n\r\nPinata GA - https://github.com/marketplace/actions/ipfs-pinata-deploy-github-action\r\n\r\n\r\n---\r\nThe alternative would've been to use fleek.co but it seems to be down quite a lot lately.\r\n\r\n\r\n---\r\n\r\n\r\nhttps://blog.thirdweb.com/guides/how-to-host-your-web-app-on-ipfs/","createdAt":"2023-04-17T21:12:00Z","labels":["type: feature","priority: 2"],"number":243,"repository":"sablier-labs/interfaces","state":"closed","title":"Deploy to IPFS through github actions","type":"issue","updatedAt":"2023-05-30T19:07:01Z","url":"https://github.com/sablier-labs/interfaces/issues/243"},{"author":"razgraf","body":"We should add translations to the Meta component.\r\n\r\n<img width=\"1074\" alt=\"Screenshot 2023-04-18 at 00 05 50\" src=\"https://user-images.githubusercontent.com/15740806/232610801-e32b7830-45e2-48a9-9603-94b76c3aae65.png\">\r\n","createdAt":"2023-04-17T21:06:25Z","labels":["priority: 3"],"number":242,"repository":"sablier-labs/interfaces","state":"closed","title":"Add translations to `package/components/src/organisms/Meta`","type":"issue","updatedAt":"2023-05-18T12:49:52Z","url":"https://github.com/sablier-labs/interfaces/issues/242"},{"author":"razgraf","body":"Right now the search system is a two-step process starting from the dashboard:\r\n1. User configures the search by filling in the `alias` or the `full id` of the stream\r\n2. The filters are converted to `full ids` only and routed to the search tab\r\n\r\n| 1. Configure | 2. Route |\r\n|--------|--------|\r\n| <img width=\"1123\" alt=\"Screenshot 2023-04-12 at 16 12 14\" src=\"https://user-images.githubusercontent.com/15740806/231468701-f6a72bc4-21b3-4511-9e83-b6f025b4e81c.png\"> | ``` https://v2-client.vercel.app/?t=search&c=5&i=0x0784fb3ff8f3d0386c1ffa3a0984a0c600d8f2ab-5-1 ``` | \r\n\r\nThis introduces bad UX as we now mainly show aliases to the user instead of full ids.\r\nThe idea is for the user to copy the URL and re-use it when they're trying to search for the same set of streams. Therefore, the link itself should allow for aliases instead of always converting to full-ids, for consistency.\r\n\r\nWhile the subgraph may still require full-ids, the conversion should be done at \"query time\", not visible to the user.\r\n\r\n\r\nTL;DR; The stream link should be converted (and work with): `https://v2-client.vercel.app/?t=search&c=5&i=linear-5-1\r\n`","createdAt":"2023-04-12T13:19:26Z","labels":["priority: 3"],"number":240,"repository":"sablier-labs/interfaces","state":"closed","title":"Add support for aliases in the \"search routing\" feature","type":"issue","updatedAt":"2023-04-18T10:40:44Z","url":"https://github.com/sablier-labs/interfaces/issues/240"},{"author":"razgraf","body":"After the targets are ready in [v2-periphery](https://github.com/sablierhq/v2-periphery/) we should start work on integrating the proxy logic and the permi2 system. \r\n\r\n- [ ] app: support proxy creation\r\n- [ ] app: system for proxy resolution\r\n- [ ] app: change all permission systems to check for `proxy(wallet)` rights instead of `wallet`\r\n- [ ] app: change allowance system to check for allowances against proxy-to-permit2 router + all other permit2 details\r\n- [ ] subgraph: upgrade to a \"User\" entity that holds both an underlying address and a link to a proxy address\r\n- [ ] subgraph: change all queries from the app to search for `recipient = wallet` and `sender = proxy(wallet)`","createdAt":"2023-04-10T17:44:41Z","labels":["priority: 0"],"number":238,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate proxy logic and permit2","type":"issue","updatedAt":"2023-05-25T17:55:37Z","url":"https://github.com/sablier-labs/interfaces/issues/238"},{"author":"razgraf","body":"List of layout issues:\r\n\r\n**Pro stream profile, action section gap (pro timeline + buttons)**\r\n<img width=\"630\" alt=\"Screenshot 2023-04-10 at 13 46 43\" src=\"https://user-images.githubusercontent.com/15740806/230887480-5c764f5f-f5e9-4fd6-94ce-6c55ceb291eb.png\">\r\n","createdAt":"2023-04-10T10:47:31Z","labels":["type: bug","priority: 2"],"number":237,"repository":"sablier-labs/interfaces","state":"closed","title":"Responsive layout issues","type":"issue","updatedAt":"2023-04-21T11:37:37Z","url":"https://github.com/sablier-labs/interfaces/issues/237"},{"author":"PaulRBerg","body":"As per https://github.com/sablierhq/v2-core/pull/422, the `cancel` function no longer withdraws the assets to the recipient. Now, the recipient has to manually withdraw the assets after a stream is canceled.\r\n\r\nNote that there is no special function for withdrawing assets in this scenario. You can use the same good old `withdraw(uint256,address,uint256)`.","createdAt":"2023-04-07T17:55:28Z","labels":["type: feature","priority: 0"],"number":235,"repository":"sablier-labs/interfaces","state":"closed","title":"Allow withdrawals when the stream's status is `CANCELED`","type":"issue","updatedAt":"2023-05-26T19:27:15Z","url":"https://github.com/sablier-labs/interfaces/issues/235"},{"author":"PaulRBerg","body":"We have recently bumped into an interesting scenario in `v2-core`, which has led to the failure of one of our invariant tests. A detailed explanation of what happened can be found [here](https://github.com/sablierhq/v2-core/issues/373#issuecomment-1493975332), but the TLDR; is that the recipient cannot withdraw to a third-party address when the recipient doubles as the sender of the stream.\r\n\r\nHandling this edge case in the `withdraw` function is not worth it because the base gas cost for calling this function would increase for all users. We will just accept this as a known limitation of the withdraw function.\r\n\r\nThe implication for the UI is that we have to check if `sender == recipient` in the withdraw form and, if yes, disable the address field and hard code `to` to the recipient address.","createdAt":"2023-04-03T09:30:39Z","labels":["type: feature"],"number":230,"repository":"sablier-labs/interfaces","state":"closed","title":"Disallow withdrawals to third-party addresses when `sender == recipient`","type":"issue","updatedAt":"2023-05-25T17:59:21Z","url":"https://github.com/sablier-labs/interfaces/issues/230"},{"author":"PaulRBerg","body":"See the discussion in [issue #13](https://github.com/cantinasec/sablier/issues/13) reported by the Cantina team.\r\n\r\nThe idea is to prevent accidental streams toward addresses that suffer from one of the following weaknesses:\r\n\r\n1. They cannot interact with the Sablier streaming functions (e.g. Coinbase addresses that cannot call `withdraw`)\r\n2. They cannot transfer the NFT\r\n\r\nIn practice, if one of the issues above applies, the other should also apply. But there may be cases when the recipient can call the Sablier `withdraw` function but cannot call the ERC-721 `transferFrom` function, e.g. when a contract is developed like this.\r\n\r\nAnyway. The point of my opening this issue here is to suggest the addition of an informational tooltip in the recipient field of the create stream form, which would say something along the lines of:\r\n\r\n> Make sure that the recipient is able to interact with the Sablier protocol, specifically with the `withdraw` and the `transferFrom` functions.","createdAt":"2023-03-30T12:27:20Z","labels":[],"number":229,"repository":"sablier-labs/interfaces","state":"closed","title":"Show warning about recipient addresses (potentially in a tooltip)","type":"issue","updatedAt":"2023-05-28T21:07:35Z","url":"https://github.com/sablier-labs/interfaces/issues/229"},{"author":"razgraf","body":"Would be nice to have a simulation/preview of the stream share before pushing the \"create\" button. Similar to what we have in the stream profile.\r\n\r\nThis would probably involve creating a temporary internal `new Stream()` based on the values chosen by the user. This stream will then be passed to the existing simulation modal.\r\n\r\n<img width=\"1246\" alt=\"Screenshot 2023-03-28 at 17 48 36\" src=\"https://user-images.githubusercontent.com/15740806/228277212-04ea5551-9d81-40c8-94cb-72e62c3f6ffd.png\">\r\n","createdAt":"2023-03-28T14:54:33Z","labels":["type: feature","priority: 2"],"number":228,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a simulation capability to the create-stream form","type":"issue","updatedAt":"2023-04-06T09:22:23Z","url":"https://github.com/sablier-labs/interfaces/issues/228"},{"author":"razgraf","body":"We use a lot of bundle imports in our codebase. While this makes life easier, it does increase the size of the bundle (running analyze will show that packages is one of the largest imports).","createdAt":"2023-03-23T12:00:45Z","labels":[],"number":226,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve imports, modularize","type":"issue","updatedAt":"2023-04-18T09:19:25Z","url":"https://github.com/sablier-labs/interfaces/issues/226"},{"author":"gavriliumircea","body":"When testing the load time we discovered that safari does not show the stream circle is not displyed.\r\n<img width=\"995\" alt=\"Screenshot 2023-03-23 at 13 58 00\" src=\"https://user-images.githubusercontent.com/48255669/227197288-297ac2e6-be27-4622-b091-053a518d2543.png\">\r\n","createdAt":"2023-03-23T11:59:32Z","labels":[],"number":225,"repository":"sablier-labs/interfaces","state":"closed","title":"Test across multiple browsers","type":"issue","updatedAt":"2023-03-30T08:43:41Z","url":"https://github.com/sablier-labs/interfaces/issues/225"},{"author":"PaulRBerg","body":"Starting v8.23.0, ESLint introduced a new configuration file that aims to replace the older syntax. Now, all ESLint users must place the configuration in a file called `eslint.config.js`, which has a cleaner syntax.\r\n\r\nhttps://eslint.org/docs/latest/use/configure/configuration-files-new","createdAt":"2023-03-23T11:41:35Z","labels":["backlog"],"number":224,"repository":"sablier-labs/interfaces","state":"closed","title":"Switch to flat config `eslint.config.js`","type":"issue","updatedAt":"2023-05-29T06:26:27Z","url":"https://github.com/sablier-labs/interfaces/issues/224"},{"author":"razgraf","body":"The terms are currently attached to the v1 app. We should route those within the v2 landing website once we code and deploy it prior to the launch.","createdAt":"2023-03-21T21:47:52Z","labels":["priority: 2"],"number":222,"repository":"sablier-labs/interfaces","state":"closed","title":"Attach the privacy policy and terms of service to the new deployments","type":"issue","updatedAt":"2023-07-11T19:09:12Z","url":"https://github.com/sablier-labs/interfaces/issues/222"},{"author":"razgraf","body":"With #213 we implemented a system that dynamically generates meta images for streams. Unfortunately, due to lodash's usage of `Function` we bumped into an annoying [error](https://nextjs.org/docs/messages/edge-dynamic-code-evaluation).\r\n\r\nThe generator needs to be adapted to not include lodash or any of our other packages (e.g. themes and constants) which may rely on lodash themselves. ","createdAt":"2023-03-21T21:12:15Z","labels":[],"number":221,"repository":"sablier-labs/interfaces","state":"closed","title":"Avoid edge-dynamic-code-evaluation in the meta image generator","type":"issue","updatedAt":"2023-05-18T12:52:25Z","url":"https://github.com/sablier-labs/interfaces/issues/221"},{"author":"razgraf","body":"Add media queries and rules to make the website responsive. \r\nMake sure to check with mobile wallets e.g. Coinbase, Metamask, Rainbow.","createdAt":"2023-03-21T20:58:47Z","labels":[],"number":219,"repository":"sablier-labs/interfaces","state":"closed","title":"Make the client layout responsive","type":"issue","updatedAt":"2023-04-06T09:25:29Z","url":"https://github.com/sablier-labs/interfaces/issues/219"},{"author":"razgraf","body":"For out e2e tests with cypress we're using custom data attributes (`data-cy`) to mark certain component we need to keep track of. \r\n\r\nWith the final version of Next, it looks like the compiler is now able to [remove specific react properties](https://nextjs.org/docs/advanced-features/compiler#remove-react-properties) in production. Let's figure out if we can use this to remove the cy attributes for the public deployments.\r\n\r\nThe same can be said for our `console.info` logging (helpful in development) which we can later exclude through another [compiler flag](https://nextjs.org/docs/advanced-features/compiler#remove-react-properties).","createdAt":"2023-03-13T13:59:20Z","labels":[],"number":210,"repository":"sablier-labs/interfaces","state":"closed","title":"Customize compiler options to cleanup project (data-cy, console.info)","type":"issue","updatedAt":"2023-03-22T09:13:54Z","url":"https://github.com/sablier-labs/interfaces/issues/210"},{"author":"razgraf","body":"The polling system is affecting the chart.js graphs by re-rendering them, thus removing them from the DOM.","createdAt":"2023-03-07T18:18:57Z","labels":[],"number":201,"repository":"sablier-labs/interfaces","state":"closed","title":"Stream graph updates removes the chart canvas","type":"issue","updatedAt":"2023-03-07T22:23:38Z","url":"https://github.com/sablier-labs/interfaces/issues/201"},{"author":"razgraf","body":"As we know, subgraphs may fail to load just-in-time data for chains that are indexed slower (e.g. Polygon). Therefore we cannot expect for the app to retrieve new data after a stream is created, even with the `DEFAULT_RESET_SLEEP` we use as wiggle room.\r\n\r\nA solution for this would require a \"stream watcher\" which could, in its simplest form, be implemented in the following steps:\r\n- after a create transaction is finished, we get the stream identifiers from the logs (already happening in #195)\r\n- we store those identifiers in an \"expected\" queue\r\n- every time new streams are loaded into the app we compare their ids to those in the queue\r\n- for the streams we now know are indexed we stop tracking them in the queue\r\n\r\nNotes:\r\n- this solution will run locally and be based off of a persisted store of expected streams\r\n- a \"reset queue\" and a \"check again\" button should be implemented into this system to allow users to refresh the state in case of stale data\r\n- the feature could embedded into a modal and made easily accessible through a small button (highlighted w/ yellow) located in the toolbar\r\n\r\n![Screenshot 2023-02-28 at 01 32 52](https://user-images.githubusercontent.com/15740806/221713219-dde54da9-272d-4b2e-8c80-5cf518973148.png)\r\n","createdAt":"2023-02-27T23:33:40Z","labels":["type: feature","priority: 2"],"number":197,"repository":"sablier-labs/interfaces","state":"closed","title":"System for \"expected\" streams","type":"issue","updatedAt":"2023-03-14T11:15:30Z","url":"https://github.com/sablier-labs/interfaces/issues/197"},{"author":"razgraf","body":"The allowance box will flicker as the token machine will be moving from the `checking` state to an `allowed` or `denied` state. This is probably due to the async nature of the allowance checking step.\r\n\r\nFix: implement a separate \"local\" sync check that only checks against cached balances from the Token model (static) and move refactor the old \"checking\" state into a \"fetching\" state.","createdAt":"2023-02-27T23:25:05Z","labels":["type: bug","priority: 0"],"number":196,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix allowance flicker in create stream(s) form","type":"issue","updatedAt":"2023-03-06T22:59:08Z","url":"https://github.com/sablier-labs/interfaces/issues/196"},{"author":"PaulRBerg","body":"I know, a tedious and unpleasant task, but it has to be done. See, for reference, how we implemented this in `v1-interfaces`:\r\n\r\n- https://github.com/sablierhq/v1-interfaces/pull/243\r\n- https://github.com/sablierhq/v1-interfaces/pull/249\r\n- https://github.com/sablierhq/v1-interfaces/issues/244\r\n\r\nThe list of sanctioned addresses can be found [here](https://home.treasury.gov/policy-issues/financial-sanctions/recent-actions/20220808).","createdAt":"2023-02-27T17:53:52Z","labels":["type: feature","priority: 2"],"number":194,"repository":"sablier-labs/interfaces","state":"closed","title":"Block sanctioned addresses and tokens","type":"issue","updatedAt":"2023-04-26T13:24:58Z","url":"https://github.com/sablier-labs/interfaces/issues/194"},{"author":"razgraf","body":"We should be able to tap into blockchain events and extract the ID of a stream that was just created by an app-triggered transaction.\r\n\r\nThis way we can provide a way for the user to view the stream they just created (similar to the transaction modal in V1).","createdAt":"2023-02-26T23:06:18Z","labels":["type: feature","priority: 1"],"number":192,"repository":"sablier-labs/interfaces","state":"closed","title":"Figure out how to extract the streamId after the create transaction is completed","type":"issue","updatedAt":"2023-03-03T17:16:20Z","url":"https://github.com/sablier-labs/interfaces/issues/192"},{"author":"razgraf","body":"Make sure the app has a well defined behavior when the account is connected but the selected network isn't supported by us.\r\n\r\nOne idea would be to flip the app the a \"public\" state, similar to the unconnected behavior while notifying the user that they have to pick the correct network from the account area.","createdAt":"2023-02-26T22:34:08Z","labels":[],"number":190,"repository":"sablier-labs/interfaces","state":"closed","title":"Unsupported network state","type":"issue","updatedAt":"2023-02-26T23:03:48Z","url":"https://github.com/sablier-labs/interfaces/issues/190"},{"author":"PaulRBerg","body":"We need a cookie consent popup for the following services:\r\n\r\n- Crisp\r\n- Google Analytics\r\n- Mixpanel\r\n- Rollbar\r\n\r\nZerion does a good job at this:\r\n\r\n<img width=\"1055\" alt=\"zerion-cookies-1\" src=\"https://user-images.githubusercontent.com/8782666/218770863-89798d25-5219-4723-92ca-4fb461112a0c.png\">\r\n\r\n<img width=\"388\" alt=\"zerion-cookies-2\" src=\"https://user-images.githubusercontent.com/8782666/218770889-4ed50144-9c1d-4b9e-9a14-3a839f1970ec.png\">\r\n","createdAt":"2023-02-26T10:21:57Z","labels":["type: feature"],"number":189,"repository":"sablier-labs/interfaces","state":"closed","title":"Cookie consent system","type":"issue","updatedAt":"2023-03-21T21:54:33Z","url":"https://github.com/sablier-labs/interfaces/issues/189"},{"author":"razgraf","body":"","createdAt":"2023-02-21T17:26:54Z","labels":["type: bug"],"number":181,"repository":"sablier-labs/interfaces","state":"closed","title":"Disable the cancel button after a stream has been renounced","type":"issue","updatedAt":"2023-02-22T21:42:53Z","url":"https://github.com/sablier-labs/interfaces/issues/181"},{"author":"razgraf","body":"If the modal is closed before confirming, the action button becomes disabled because the machine is still locked waiting in a process state. Find a way to cancel the current transition if the modal is closed before submission.","createdAt":"2023-02-21T15:15:15Z","labels":["type: bug"],"number":179,"repository":"sablier-labs/interfaces","state":"closed","title":"Reset machines in covers if the transaction modal is closed ","type":"issue","updatedAt":"2023-02-22T21:42:53Z","url":"https://github.com/sablier-labs/interfaces/issues/179"},{"author":"gavriliumircea","body":"If a stream has ended, the recipient is not able to perform any withdrawals.\r\n![image](https://user-images.githubusercontent.com/48255669/218466050-b223c8da-de22-4a1a-b9b5-4868e153307e.png)","createdAt":"2023-02-13T13:06:06Z","labels":["type: bug"],"number":178,"repository":"sablier-labs/interfaces","state":"closed","title":"Withdraw is not available for streams that ended","type":"issue","updatedAt":"2023-02-26T10:14:10Z","url":"https://github.com/sablier-labs/interfaces/issues/178"},{"author":"razgraf","body":"The app currently doesn't track transactions that are replaced (e.g. increasing the gas and posting a tx with the same nonce). Check if wagmi/ethers has some friendly utility to implement this advanced tx-watching.","createdAt":"2023-02-09T15:23:49Z","labels":["type: feature","priority: 3"],"number":176,"repository":"sablier-labs/interfaces","state":"closed","title":"Figure out how to track replaced transactions","type":"issue","updatedAt":"2023-03-06T22:59:08Z","url":"https://github.com/sablier-labs/interfaces/issues/176"},{"author":"razgraf","body":"Some small screens (e.g. landscape devices) may cause the modal to be cut off. We should investigate how the component reacts to screens smaller than its height.","createdAt":"2023-02-09T15:02:21Z","labels":["priority: 3"],"number":175,"repository":"sablier-labs/interfaces","state":"closed","title":"Investigate modal cutoff on small screens","type":"issue","updatedAt":"2023-02-22T21:42:52Z","url":"https://github.com/sablier-labs/interfaces/issues/175"},{"author":"razgraf","body":"For context, our system includes the two following elements (relevant to the issue):\r\n- a query hook that requests data (specifically the user's streams), caches them and saves them to the store\r\n- a watcher hook that, upon account change, resets the contents of the store (to clean the UI) and invalidates the query cache (we want fresh data every time)\r\n\r\nThis unfortunately causes the request for streams to happen two times:\r\n1. When the signer changes, the dependencies for the request will change and the request will fire again\r\n2. When the watcher notices, it will reset everything. This will cause the re-triggering the query\r\n\r\n---\r\nWhile this doesn't cause that much harm, it's annoying to have an extra request firing without the need for it.\r\n\r\nA temporary fix has been added to the `useStreamsOwned` hook where the query is only enabled if, apart from some other flags, the store doesn't already have data. This condition will most likely be reconsidered when we start supporting pagination (the query must be available when the limit/skip flags increase over existing page of content)\r\n","createdAt":"2023-01-31T19:04:44Z","labels":["type: bug","priority: 3"],"number":171,"repository":"sablier-labs/interfaces","state":"closed","title":"Double query triggered when the signer is updated","type":"issue","updatedAt":"2023-02-26T23:03:19Z","url":"https://github.com/sablier-labs/interfaces/issues/171"},{"author":"razgraf","body":"There's currently a way to create streams that start and end at the same time. This may cause certain divisions to be divisions by 0 (when using the stream duration). For safety, make it impossible to create streams where start time isn't strictly lower than the end time.","createdAt":"2023-01-26T12:20:07Z","labels":[],"number":168,"repository":"sablier-labs/interfaces","state":"closed","title":"Enforce start time !== end time in duration guards","type":"issue","updatedAt":"2023-02-26T10:21:43Z","url":"https://github.com/sablier-labs/interfaces/issues/168"},{"author":"razgraf","body":"The `Stream.findStreamedAmount` utility currently lacks the ability to compute a result for pro streams. ","createdAt":"2023-01-26T11:45:48Z","labels":["priority: 0"],"number":167,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement the streamed amount calculation for pro streams","type":"issue","updatedAt":"2023-02-21T17:49:34Z","url":"https://github.com/sablier-labs/interfaces/issues/167"},{"author":"gavriliumircea","body":"After a discussion with @razgraf we decided to recalculate, depositAmount = numberOfStep * stepAmount. This new value will be shown in the transaction loading modal.","createdAt":"2023-01-26T11:23:17Z","labels":[],"number":166,"repository":"sablier-labs/interfaces","state":"closed","title":"Stepper amount has cases where the approximation error cause failure in the pro contract","type":"issue","updatedAt":"2023-01-26T16:12:23Z","url":"https://github.com/sablier-labs/interfaces/issues/166"},{"author":"razgraf","body":"Make use of the SSR features of Next to query the stream profile server side. This will improve loading times for the stream profile page, as well as help our SEO.","createdAt":"2023-01-25T16:52:10Z","labels":["type: feature","priority: 1"],"number":165,"repository":"sablier-labs/interfaces","state":"closed","title":"Query content server-side for the stream profile","type":"issue","updatedAt":"2023-02-25T12:37:53Z","url":"https://github.com/sablier-labs/interfaces/issues/165"},{"author":"razgraf","body":"The search modal features a chain-selector. Due to memoization it's possible that the chain icon fails to update when the value gets changed.\r\n\r\n<img width=\"223\" alt=\"Screenshot 2023-01-25 at 18 28 18\" src=\"https://user-images.githubusercontent.com/15740806/214619849-a77a6223-b0bb-4a42-8de9-463a4a8dd1b8.png\">\r\n","createdAt":"2023-01-25T16:29:25Z","labels":["type: bug","priority: 2"],"number":164,"repository":"sablier-labs/interfaces","state":"closed","title":"Chain icon doesn't update when the value changes","type":"issue","updatedAt":"2023-02-21T18:15:13Z","url":"https://github.com/sablier-labs/interfaces/issues/164"},{"author":"razgraf","body":"![Screenshot 2023-01-24 at 22 37 46](https://user-images.githubusercontent.com/15740806/214404720-c347ceca-525e-46c1-b55c-771e72e2a841.png)\r\n","createdAt":"2023-01-24T20:38:28Z","labels":["type: feature","priority: 2"],"number":163,"repository":"sablier-labs/interfaces","state":"closed","title":"Implement segment viewer in the stream profile page","type":"issue","updatedAt":"2023-02-25T18:26:11Z","url":"https://github.com/sablier-labs/interfaces/issues/163"},{"author":"razgraf","body":"The flow: user goes to the dashboard search tab, scrolls through the list, clicks on a stream to view more details. When they click to return back to the dashboard (either through the in-app back button or the browser's) the page scrolls back to the top.\r\n\r\nThis is a weird UX issue which I haven't yet found the solution to. The table should resume its previous position.\r\n\r\n- Tried overriding the browser's scroll [restoration](https://github.com/vercel/next.js/issues/20951) as well as next/router's options.\r\n- The issue could also be related to the mounting and un-mounting of the dashboard table","createdAt":"2023-01-24T14:24:26Z","labels":["type: bug","backlog","stale"],"number":162,"repository":"sablier-labs/interfaces","state":"closed","title":"Restore scroll for the dashboard-to-profile routing","type":"issue","updatedAt":"2024-01-07T14:06:29Z","url":"https://github.com/sablier-labs/interfaces/issues/162"},{"author":"razgraf","body":"We currently cannot use the `satisfies` TS 4.9 keyword due to a prettier plugin breaking support. Watch the issue on this https://github.com/trivago/prettier-plugin-sort-imports/pull/196 and bump the package once they fix it on their side (w/ babel).","createdAt":"2023-01-20T16:25:39Z","labels":[],"number":160,"repository":"sablier-labs/interfaces","state":"closed","title":"Bump @trivago/prettier-plugin-sort-imports once it fixes support for `satisfies`","type":"issue","updatedAt":"2023-02-26T10:13:47Z","url":"https://github.com/sablier-labs/interfaces/issues/160"},{"author":"razgraf","body":"At this moment our app will \"suggest\" pro stream shapes to the user. These are hardcoded examples that come with pretty names and illustrations. \r\n\r\nThe problem: once a request for creation leaves the app and the stream gets configured through the contract, we have no way of knowing which \"type\" it was. Exponential? Step? \r\n\r\nWe should figure out a way to reverse engineer the type of stream based on some extension discriminator. We could scale our extension configuration with a new `isExtension` method which returns the type after it passes through checks against these discriminators.","createdAt":"2023-01-19T15:35:34Z","labels":["priority: 2"],"number":158,"repository":"sablier-labs/interfaces","state":"closed","title":"Find a way to perform reverse-resolution on the pro stream type","type":"issue","updatedAt":"2023-02-23T20:08:24Z","url":"https://github.com/sablier-labs/interfaces/issues/158"},{"author":"razgraf","body":"For cases when a token is used to stream, but isn't recognized by the token lists downloaded by the app, provide the missing details directly from the subgraph (it should have the token symbol, name and address).\r\n\r\n![Screenshot 2023-01-19 at 17 23 51](https://user-images.githubusercontent.com/15740806/213482062-f14cf240-b126-4161-8083-e79ae08cd519.png)\r\n","createdAt":"2023-01-19T15:25:06Z","labels":["type: bug","priority: 1"],"number":157,"repository":"sablier-labs/interfaces","state":"closed","title":"Fill in details of a token from the subgraph when it isn't recognized by the app","type":"issue","updatedAt":"2023-01-25T16:05:38Z","url":"https://github.com/sablier-labs/interfaces/issues/157"},{"author":"razgraf","body":"For the final version of the initial app we should create additional guards on any `Input.Address`. Specifically, test that:\r\n~~1. The recipient fields do not contain the address of the sender (you can't stream to yourself)~~\r\n2. The recipient fields do not contain the address of one of our registered tokens (prevent people from streaming to a token contract)\r\n3. The recipient fields do not contain sanctioned addresses (use the OFAC API from TRM or any other provider)","createdAt":"2023-01-19T14:41:10Z","labels":["priority: 2"],"number":156,"repository":"sablier-labs/interfaces","state":"closed","title":"Additional guards for the address inputs","type":"issue","updatedAt":"2023-04-26T13:24:58Z","url":"https://github.com/sablier-labs/interfaces/issues/156"},{"author":"razgraf","body":"The duration modal won't always set the hours and minutes to zero when entering it from an `undefined` value.\r\n\r\nPicture for context (the hour/minute selectors wouldn't be active with this issue):\r\n![Screenshot 2023-01-15 at 23 50 01](https://user-images.githubusercontent.com/15740806/212569073-100fb99a-4414-46eb-82bd-983dc4913bfd.png)\r\n","createdAt":"2023-01-15T21:50:35Z","labels":["type: bug"],"number":154,"repository":"sablier-labs/interfaces","state":"closed","title":"The duration modal doesn't alway select default 00:00 for `hh:mm`","type":"issue","updatedAt":"2023-02-15T23:29:59Z","url":"https://github.com/sablier-labs/interfaces/issues/154"},{"author":"razgraf","body":"There may be a de-sync inside the `address` input logic as relates to ENS resolution. ","createdAt":"2023-01-13T17:37:57Z","labels":["type: bug"],"number":153,"repository":"sablier-labs/interfaces","state":"closed","title":"Desync between Address input and ENS resolution","type":"issue","updatedAt":"2023-01-20T14:19:40Z","url":"https://github.com/sablier-labs/interfaces/issues/153"},{"author":"razgraf","body":"We're going to be querying multiple subgraphs within the app (one for each network) regardless of the chain our user is connected to. For example, the dashboard should be able to search on each chain even if the signer's wallet is connected to mainnet. \r\n\r\nTherefore it makes no sense to use the `ApolloProvider` and `ApolloConsumer` in our component tree, but have multiple simple clients outside of the component tree.\r\n\r\nUnfortunately this causes the clients to be [re-created](https://github.com/apollographql/apollo-client/issues/9547) on each route change which in turn invalidates that client's cache. In the end, queries are executed multiple times even though a cached result should've already existed.\r\n\r\nWe should re-configure this in #151 such that those clients avoid getting re-created.\r\n\r\n---\r\n\r\nThere's also another problem with `onCompleted` from `useQuery` being called even when results are taken from the cache. As we're using that callback to set the streams in the store, it would be good to *not* have it re-commit unnecessary data to the store.\r\n\r\nThis seems to be [inconsistent](https://github.com/apollographql/apollo-client/issues/10059) between apollo version.","createdAt":"2023-01-12T20:29:01Z","labels":["type: bug","priority: 3"],"number":152,"repository":"sablier-labs/interfaces","state":"closed","title":"Setup apollo client's such that cache isn't reset","type":"issue","updatedAt":"2023-01-20T14:19:40Z","url":"https://github.com/sablier-labs/interfaces/issues/152"},{"author":"razgraf","body":"There's a warning caused by a recent update in zustand. Its storage system has changed and requires a new configuration object.\r\n\r\nI've opened an issue in [wagmi's codebase](https://github.com/wagmi-dev/wagmi/issues/1634) as well as updated our own codebase. We should follow this and upgrade when the fix is out.","createdAt":"2023-01-11T15:00:40Z","labels":["type: bug","priority: 2"],"number":150,"repository":"sablier-labs/interfaces","state":"closed","title":"Follow wagmi's zustand upgrade (storage setup warning)","type":"issue","updatedAt":"2023-01-11T15:30:07Z","url":"https://github.com/sablier-labs/interfaces/issues/150"},{"author":"gavriliumircea","body":"Refactor \"Stream Shape\" to somehow work better with these extensions - data is duplicated between StreamShape and the Extension types. Refers to [](https://github.com/sablierhq/v2-interfaces/pull/141)","createdAt":"2023-01-10T10:53:54Z","labels":[],"number":149,"repository":"sablier-labs/interfaces","state":"closed","title":"Refactor \"Stream Shape\"","type":"issue","updatedAt":"2023-01-11T16:58:49Z","url":"https://github.com/sablier-labs/interfaces/issues/149"},{"author":"razgraf","body":"Take the duration modal as an example. The user can click on one of the suggested durations, for example `30 minutes`. This will trigger the minutes input to be filled in with a value of `30`. We should add some visual feedback to the user when a field gets completed. Maybe through a class that gets attached to it? Or a special `onChange` parameter that triggers the animation (when the value is filled-in by the system, not the user).","createdAt":"2023-01-03T12:06:03Z","labels":["priority: 3"],"number":146,"repository":"sablier-labs/interfaces","state":"closed","title":"Create a visual feedback for actions that trigger a field to be filled-in","type":"issue","updatedAt":"2023-05-28T20:35:06Z","url":"https://github.com/sablier-labs/interfaces/issues/146"},{"author":"razgraf","body":"The amount field shows a warning when the value exceeds the maximum allowed. When the maximum allowed is zero (user has no funds in their wallet) the policy looks a bit weird. We should cover this case in the amount guard (e.g. \"Not enough funds in your wallet\" when amount is zero).\r\n\r\n<img width=\"836\" alt=\"Screenshot 2023-01-03 at 13 58 20\" src=\"https://user-images.githubusercontent.com/15740806/210353313-5343ee9b-bee2-407f-961a-ef313d91d887.png\">\r\n","createdAt":"2023-01-03T12:01:21Z","labels":["priority: 3"],"number":145,"repository":"sablier-labs/interfaces","state":"closed","title":"Improve warning text (policy) for a zero wallet balance","type":"issue","updatedAt":"2023-01-20T14:19:39Z","url":"https://github.com/sablier-labs/interfaces/issues/145"},{"author":"gavriliumircea","body":"![image](https://user-images.githubusercontent.com/48255669/209841172-efdc048c-2c15-440d-913d-9e2991fddf20.png)\r\n","createdAt":"2022-12-28T16:16:21Z","labels":["type: bug","priority: 3"],"number":144,"repository":"sablier-labs/interfaces","state":"closed","title":"Override input autocomplete highlight for fields","type":"issue","updatedAt":"2023-01-11T15:04:15Z","url":"https://github.com/sablier-labs/interfaces/issues/144"},{"author":"gavriliumircea","body":"When trying to convert a period of time between 360 and 364 days the returned value of the _.toDuration() function is wrong.\r\n![image](https://user-images.githubusercontent.com/48255669/209227356-dfcf70b5-5fa1-4122-a964-a0561535ad68.png)\r\n","createdAt":"2022-12-22T21:16:36Z","labels":[],"number":142,"repository":"sablier-labs/interfaces","state":"closed","title":"_.toDuration conversion inaccuracies ","type":"issue","updatedAt":"2023-01-11T14:31:41Z","url":"https://github.com/sablier-labs/interfaces/issues/142"},{"author":"razgraf","body":"As a UX improvement I made the ENS resolution happen on mainnet at all times.\r\n\r\nThis however may introduce problems, especially if (1) ENS goes multi-chain and (2) the ENS target is a smart contract wallet (unable to deploy at the same address on all chains).","createdAt":"2022-12-15T19:27:48Z","labels":["type: bug","priority: 2"],"number":139,"repository":"sablier-labs/interfaces","state":"closed","title":"ENS resolution should be chain-specific","type":"issue","updatedAt":"2023-01-15T21:47:05Z","url":"https://github.com/sablier-labs/interfaces/issues/139"},{"author":"razgraf","body":"The `onClick` event is currently anchored to the input itself, not the entire field box. This makes it so clicking on the padding under the `input` doesn't trigger any event. \r\n\r\nWe should try extending this hitbox to cover that padding space as well.\r\n\r\n![Screenshot 2022-12-06 at 16 18 01](https://user-images.githubusercontent.com/15740806/205936087-97f7913a-5123-411d-a511-26e9b1d5911a.png) \r\n_(Non-clickable padding and under the actual text)_\r\n","createdAt":"2022-12-06T14:19:26Z","labels":["type: bug","priority: 3"],"number":127,"repository":"sablier-labs/interfaces","state":"closed","title":"Increase hitbox for fields","type":"issue","updatedAt":"2023-01-12T13:05:26Z","url":"https://github.com/sablier-labs/interfaces/issues/127"},{"author":"razgraf","body":"The default values of our pickers will be `undefined`. If the stepper arrows are used, the input will not work. It needs to assume `undefined` is `0` and do (0 + 1) not (undefined + 1).","createdAt":"2022-12-02T11:50:03Z","labels":["type: bug","priority: 2"],"number":125,"repository":"sablier-labs/interfaces","state":"closed","title":"AmountStepper doesn't work when the value is undefined (should default to 0)","type":"issue","updatedAt":"2022-12-06T21:55:10Z","url":"https://github.com/sablier-labs/interfaces/issues/125"},{"author":"razgraf","body":"Coming from #116, I think we should create a utility hook for live updates. It would include a `setInterval` that every minute (or whatever given polling interval) returns dayjs() (meaining \"now\") plus some duration parameter.","createdAt":"2022-12-01T13:57:03Z","labels":["type: feature","priority: 2"],"number":122,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a live-update hook for dates that should update frequently in the UI","type":"issue","updatedAt":"2022-12-01T14:35:04Z","url":"https://github.com/sablier-labs/interfaces/issues/122"},{"author":"razgraf","body":"The zustand store creator already has access to the initial object. Create an `api.resetFields` utility that brings the state back to its original shape.","createdAt":"2022-12-01T13:33:13Z","labels":["type: feature","priority: 2"],"number":121,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a \"resetFields\" feature to the zustand store template","type":"issue","updatedAt":"2022-12-01T14:35:04Z","url":"https://github.com/sablier-labs/interfaces/issues/121"},{"author":"gavriliumircea","body":"Amount stepper measure does not appear in the UI( it should be displayed in the right part of the input).","createdAt":"2022-11-29T09:41:13Z","labels":["priority: 1"],"number":120,"repository":"sablier-labs/interfaces","state":"closed","title":"Amount stepper measure does not appear in the UI","type":"issue","updatedAt":"2022-12-01T14:35:04Z","url":"https://github.com/sablier-labs/interfaces/issues/120"},{"author":"gavriliumircea","body":"When developing the duration picker, it was discovered that the modal should have a width of at least 1050px. Any value under that would create an overflow of the last amount stepper.","createdAt":"2022-11-29T09:34:34Z","labels":["type: bug","priority: 1"],"number":119,"repository":"sablier-labs/interfaces","state":"closed","title":"Inputs in Duration Picker overflow its width","type":"issue","updatedAt":"2022-12-01T14:35:03Z","url":"https://github.com/sablier-labs/interfaces/issues/119"},{"author":"razgraf","body":"### Context\r\n\r\nWe use `undefined` to flag a pristine state throughout the code-base. We rely on it to show the value is untouched so systems considering it can minimize its impact. One of the reasons for choosing it was to make sure we **do not** plague the code with both `null` and `undefined`, limiting ourselves to just one as much as possible.\r\n\r\nFor example, when we write something in an input and trigger a warning, the value of that warning will be an arbitrary string. Upon solving the error, warning should revert to `undefined`, such that the form can continue its validation.\r\n\r\n### Issue\r\n\r\nThe current [update action](https://github.com/sablierhq/v2-interfaces/blob/main/packages/contexts/src/Form/store.ts) taken upon a state store uses `lodash.mergeWith` to combine the old state with an updated set of nested values. A limitation I've just discovered with this utility is the way it treats updates from `any` to `undefined`, by skipping them and retaining the old value of that given variable.\r\n\r\nAs we're actually making use of the non-defined state of our variables, the utility needs to be upgraded to allow for those kind of transitions.","createdAt":"2022-11-28T23:21:36Z","labels":[],"number":117,"repository":"sablier-labs/interfaces","state":"closed","title":"Lodash's mergeWith does not support to-undefined transitions","type":"issue","updatedAt":"2022-12-01T12:33:26Z","url":"https://github.com/sablier-labs/interfaces/issues/117"},{"author":"razgraf","body":"To make sure things work properly until #2 is fixed, we should run a system wide refactor and remove the usage of `;` near `theme.styles` elements. \r\n\r\nExample of refactor\r\n`${(props) => props.theme.styles.row};` to `${(props) => props.theme.styles.row}`","createdAt":"2022-11-24T14:21:17Z","labels":["priority: 2"],"number":114,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove `;` from inline `theme.styles` for styled-components","type":"issue","updatedAt":"2022-11-24T15:58:57Z","url":"https://github.com/sablier-labs/interfaces/issues/114"},{"author":"gavriliumircea","body":"This behaviour was found in the token picker modal.(See attached ss)\r\n<img width=\"736\" alt=\"Screenshot 2022-11-21 at 16 34 41\" src=\"https://user-images.githubusercontent.com/48255669/203081642-eecd2f40-b6ac-4e26-9073-4fe23096356a.png\">\r\n","createdAt":"2022-11-21T14:36:17Z","labels":["priority: 2"],"number":109,"repository":"sablier-labs/interfaces","state":"closed","title":"Gradient text overlay not rendered on chrome","type":"issue","updatedAt":"2023-01-02T14:36:21Z","url":"https://github.com/sablier-labs/interfaces/issues/109"},{"author":"razgraf","body":"As seen in the Token Picker modal, tokens do not always resolve to a working icon. This causes our lists to be full of default HTML squares. We should make use of the onError state of the `<img />` tag and provide a fallback that looks better.\r\n\r\n\r\n----\r\n![Screenshot 2022-11-18 at 22 01 09](https://user-images.githubusercontent.com/15740806/202792420-5131d30c-5490-42d9-a728-33b8a5bcd391.png)\r\n","createdAt":"2022-11-18T20:03:31Z","labels":["priority: 3"],"number":108,"repository":"sablier-labs/interfaces","state":"closed","title":"Add fallback to token logos (if the image doesn't load)","type":"issue","updatedAt":"2023-01-25T16:05:37Z","url":"https://github.com/sablier-labs/interfaces/issues/108"},{"author":"razgraf","body":"As per #66 we've implemented an alias system (through tsconfig) that maps roots and shared packages with the `~` symbol. After using it in production for a while, I'm both happy about its versatility and suspicions about its misuse. \r\n\r\nThe distrust comes from making:\r\n1. both `~/components` and `@sablier/components` available to the client app (they point to the same external components package)\r\n2. `~/components` aliases available outside of the components package (the general case for problem no. 1 as `~/components` should only be available in `components`)\r\n3. client `~/client/*` packages available inside the shared packages\r\n\r\n_Note: I've use components as an example but this applies to every shared package we have._\r\n\r\n---\r\n\r\nIf the developer pays enough attention, this should not be a huge issues. But it turns into a problem/misunderstanding for\r\n1.  new people before learning where things live in the repo\r\n2. cases where you rely on the editor to auto-import a component --- usually the wrong flavor is chosen (e.g. editor prefers  `~/components` instead of the auto-linked`@sablier/components`)\r\n\r\nI've found myself in the 2nd case too many times, while the 1st causes more of a cognitive delay at the moment, even for me (I keep asking: \"should I have access to that?\").\r\n\r\nI think that we should re-engineer tsconfig's paths such that\r\n1. packages can only access other packages using the `@sablier/x` syntax\r\n2. packages can only access their own root alias (`~/x`) available only inside the `x` package\r\n\r\nThis does however mean that we will have to override each package's tsconfig with `paths`, while only extending every other base condition.\r\n","createdAt":"2022-11-04T15:21:19Z","labels":["priority: 2"],"number":102,"repository":"sablier-labs/interfaces","state":"closed","title":"Create a more restrictive `~` alias system ","type":"issue","updatedAt":"2023-01-02T14:36:21Z","url":"https://github.com/sablier-labs/interfaces/issues/102"},{"author":"PaulRBerg","body":"#87 added a new app in the monorepo and by doing that it duplicated the `_document` component between the client and the labs landing page:\r\n\r\n- https://github.com/sablierhq/v2-interfaces/blob/accd95a4dfd54988b11a3b1e71763b5eef36e9a9/apps/client/pages/_document.tsx\r\n- https://github.com/sablierhq/v2-interfaces/blob/accd95a4dfd54988b11a3b1e71763b5eef36e9a9/apps/landing-labs/pages/_document.tsx\r\n\r\nPossible solution is to move this to the `components` package. I would have done that myself had it not been for the fact that I didn't know where to put (in `atoms`, `molecules`, or `organisms`).","createdAt":"2022-11-02T13:19:15Z","labels":["backlog","priority: 3"],"number":96,"repository":"sablier-labs/interfaces","state":"closed","title":"Deduplicate \"_document\" Next component","type":"issue","updatedAt":"2023-02-22T06:28:09Z","url":"https://github.com/sablier-labs/interfaces/issues/96"},{"author":"PaulRBerg","body":"#87 added a new app in the monorepo and by doing that it duplicated the `public` directory between the client and the labs landing page.\r\n\r\nSee how I did this in v1-interfaces:\r\n\r\nhttps://github.com/sablierhq/v1-interfaces/tree/3930d5b05f41e8509bf83fd2263145c2cebbed99/template\r\n\r\nThe idea is to use a template generator like [Handlebars](https://handlebarsjs.com/) or [Mustache](https://mustache.github.io/) and write a script that generates the `public` directories for each app.\r\n\r\nThis seems like a common scenario. There might be an open-source project that does.","createdAt":"2022-11-02T13:16:32Z","labels":["priority: 2"],"number":95,"repository":"sablier-labs/interfaces","state":"closed","title":"Deduplicate \"public\" directory with a template generator","type":"issue","updatedAt":"2022-11-02T16:27:16Z","url":"https://github.com/sablier-labs/interfaces/issues/95"},{"author":"PaulRBerg","body":"Exact same issue as https://github.com/sablierhq/v2-interfaces/issues/73, but for `.prettierignore`.","createdAt":"2022-11-02T10:52:18Z","labels":["type: bug","priority: 3"],"number":94,"repository":"sablier-labs/interfaces","state":"closed","title":"Prettier ignore file not picked up by Prettier","type":"issue","updatedAt":"2022-11-10T20:32:53Z","url":"https://github.com/sablier-labs/interfaces/issues/94"},{"author":"PaulRBerg","body":"I would expect the app to scroll to the bottom of the page when I click the down arrow, but that didn't happen:\r\n\r\nhttps://user-images.githubusercontent.com/8782666/199463996-1d28d7ac-a8fe-4012-ae27-ce6c8cc58ad4.mov\r\n\r\n","createdAt":"2022-11-02T10:16:21Z","labels":["type: bug","priority: 3"],"number":92,"repository":"sablier-labs/interfaces","state":"closed","title":"Clicking on the down arrow in the landing page doesn't work","type":"issue","updatedAt":"2022-11-02T12:43:28Z","url":"https://github.com/sablier-labs/interfaces/issues/92"},{"author":"razgraf","body":"In the labs landing app there's an outstanding bug related to the website's overflow.\r\n\r\nAs the user clicks on an anchor tag intended to redirect them somewhere inside the page (normally anchored to an `#id`) the page gets cut off after the scroll is executed.\r\n\r\nThis bug can be reproduced on both Firefox and Brave.","createdAt":"2022-10-27T17:12:29Z","labels":["type: bug","priority: 0"],"number":89,"repository":"sablier-labs/interfaces","state":"closed","title":"Fix anchor-tag scroll causing the page to be cut off","type":"issue","updatedAt":"2022-11-02T11:01:15Z","url":"https://github.com/sablier-labs/interfaces/issues/89"},{"author":"razgraf","body":"The current implementation of our Github Actions runs `yarn install` on every instance. Therefore it takes a few minutes for each run just to handle these packages. \r\n\r\nWe should figure out a way to:\r\n- cache those modules between runs (possibly w/ [@actions/cache](https://github.com/actions/cache)) \r\n- make sure those cached modules are shared between jobs inside a common workflow (e.g. ci + deploy)","createdAt":"2022-10-27T17:07:05Z","labels":["priority: 2"],"number":88,"repository":"sablier-labs/interfaces","state":"closed","title":"Optimize actions by cache-ing and sharing modules","type":"issue","updatedAt":"2023-03-08T18:11:25Z","url":"https://github.com/sablier-labs/interfaces/issues/88"},{"author":"razgraf","body":"As per #72 there seems to be a problem introduced by the latest `wagmi` version.","createdAt":"2022-10-22T11:19:59Z","labels":["priority: 2"],"number":76,"repository":"sablier-labs/interfaces","state":"closed","title":"Bump wagmi to the latest 0.7+ version and fix compatibility issues","type":"issue","updatedAt":"2022-11-02T11:01:32Z","url":"https://github.com/sablier-labs/interfaces/issues/76"},{"author":"razgraf","body":"Post #64 we'll have included a change to the typescript configuration. That change will provide global  access through the `~/*` path to the client app.\r\n\r\nAs per my comment here: https://github.com/sablierhq/v2-interfaces/pull/64#issuecomment-1287759602 this is not something we should do as it denies the intended scope of the path alias relative to the project.\r\n\r\n\r\nQuoting here:\r\n\r\n> I'm generally delighted to include this PR into the repository, but I do have one important comment.\r\n> \r\n> As this is a monorepo, we're expecting to have multiple applications inside it, not just the client one. By including `\"~/*\": [\"./apps/client/src/*\"]` as an alias inside every package, we're basically denying the scope of `~/*`.\r\n> \r\n> This notation is meant to access the root source package of the current working sub-project, not just a specific one. For example, inside the client app it would access `apps/client/src/*` while for a future landing app it would access `apps/landing/src/*`. This PR locks it to one app alone.\r\n> \r\n> I'm proposing we remove it from the base configuration and use it separately inside the apps folder.\r\n> \r\n> Notes:\r\n> \r\n>    - It would be great to have this functionality for every shared package as well. Unfortunately tsconfig paths get messy when a package used as a dependency (e.g. hooks) defines the same path alias as the end-product (e.g. client). So this is not currently possible.\r\n>    - I'll follow up with this suggestion in a new PR for the sake of keeping history intact\r\n>    -  Unsure if a project referencing itself would cause any issues long term (e.g. hooks includes an alias to itself)\r\n\r\n","createdAt":"2022-10-22T10:56:59Z","labels":["priority: 3"],"number":75,"repository":"sablier-labs/interfaces","state":"closed","title":"TSConfig path alias `~/*` not used properly","type":"issue","updatedAt":"2022-11-02T11:01:55Z","url":"https://github.com/sablier-labs/interfaces/issues/75"},{"author":"PaulRBerg","body":"See my findings in https://github.com/sablierhq/v2-interfaces/discussions/69. The root `.eslintignore` file is not picked up by any `lint-check` or `lint-fix` script:\r\n\r\nhttps://github.com/sablierhq/v2-interfaces/blob/main/.eslintignore","createdAt":"2022-10-20T16:16:04Z","labels":["type: bug","priority: 3"],"number":73,"repository":"sablier-labs/interfaces","state":"closed","title":"ESLint ignore file not picked up by ESLint","type":"issue","updatedAt":"2022-11-02T11:02:02Z","url":"https://github.com/sablier-labs/interfaces/issues/73"},{"author":"PaulRBerg","body":"All Prettier scripts in the repo rely upon the [`@trivago/prettier-plugin-sort-imports`](https://www.npmjs.com/package/@trivago/prettier-plugin-sort-imports) plugin. However, the plugin is listed as a dev dependency only in the root `package.json`.\r\n\r\nIn practice, the script run even without this dependency listed in each `package.json`, but it's a best practice to list all dependencies consumed because each package should be self-sufficient.","createdAt":"2022-10-20T15:52:24Z","labels":["priority: 3"],"number":71,"repository":"sablier-labs/interfaces","state":"closed","title":"Missing dev dependency: \"@trivago/prettier-plugin-sort-imports\"","type":"issue","updatedAt":"2022-11-02T11:02:09Z","url":"https://github.com/sablier-labs/interfaces/issues/71"},{"author":"razgraf","body":"Seeing as after our latest cleanup `main` is the primary development branch, we can remove `develop` from the tree for now. We'll revert back to it once we start testing production builds, but for now we can just keep `main` as the canon branch.","createdAt":"2022-10-19T13:37:05Z","labels":["priority: 3"],"number":63,"repository":"sablier-labs/interfaces","state":"closed","title":"Remove `develop` until further notice","type":"issue","updatedAt":"2022-11-02T11:02:32Z","url":"https://github.com/sablier-labs/interfaces/issues/63"},{"author":"PaulRBerg","body":"The root package and the `client` package use `^5.33.1`, while all other packages use `^5.34.0`.\r\n\r\nThis is not technically an issue, because thanks to the caret Yarn has resolved the version to `5.36.1` (I found this out by running `yarn why`).\r\n\r\nStill, this dependency is known to wreak havoc in the ESLint set-up if it's not tightly controlled. It would be clearer if the semver was made to be the same across all packages.","createdAt":"2022-10-19T10:44:40Z","labels":[],"number":62,"repository":"sablier-labs/interfaces","state":"closed","title":"Inconsistent version of \"@typescript-eslint/parser\" dependency","type":"issue","updatedAt":"2022-10-22T11:31:42Z","url":"https://github.com/sablier-labs/interfaces/issues/62"},{"author":"PaulRBerg","body":"As per the [ESLint docs](https://eslint.org/docs/latest/user-guide/configuring/configuration-files) on configuration file:\r\n\r\n> The `eslint-config-` prefix can be omitted from the configuration name. For example, `airbnb` resolves as `eslint-config-airbnb`.\r\n\r\nAnd:\r\n\r\n> `~/.eslintrc.*` files load shareable configs and custom parsers from `~/node_modules/` – similarly to `require()` – in the user’s home directory.\r\n\r\nSo instead of:\r\n\r\n```yaml\r\n\"../../node_modules/eslint-config-next/core-web-vitals.js\"\r\n```\r\n\r\nWe can just write:\r\n\r\n```yaml\r\nnext/core-web-vitals\r\n```","createdAt":"2022-10-18T16:34:21Z","labels":["priority: 3"],"number":58,"repository":"sablier-labs/interfaces","state":"closed","title":"Simplify path to \"core/next-web-vitals\"","type":"issue","updatedAt":"2022-11-02T11:02:25Z","url":"https://github.com/sablier-labs/interfaces/issues/58"},{"author":"PaulRBerg","body":"As per the [Next.js docs](https://nextjs.org/docs/basic-features/eslint#additional-configurations) on configuration files, the Next configuration should be loaded after any other configuration to ensure that the Next rules (especially the `parser`, `plugins`, and the `settings` properties) are not overwritten.\r\n\r\nI think that this has been in part caused by the misconception that running `next lint` ignores the ESLint configuration available in the repo. It doesn't ignore it.\r\n\r\nHow I know that this is the case? If I switch the order of the extended configs, I get warnings like this (in all packages):\r\n\r\n<img width=\"1726\" alt=\"components-new-warnings\" src=\"https://user-images.githubusercontent.com/8782666/196489395-6a07f27e-d2e7-4816-b63c-156fd2f88a6b.png\">","createdAt":"2022-10-18T16:32:11Z","labels":["type: bug","priority: 2"],"number":57,"repository":"sablier-labs/interfaces","state":"closed","title":"Order of extended ESLint configs is wrong","type":"issue","updatedAt":"2022-11-02T11:02:37Z","url":"https://github.com/sablier-labs/interfaces/issues/57"},{"author":"PaulRBerg","body":"To clear builds, cached files, etc.","createdAt":"2022-10-16T19:48:49Z","labels":["priority: 3"],"number":50,"repository":"sablier-labs/interfaces","state":"closed","title":"Add a \"clean\" script","type":"issue","updatedAt":"2022-11-02T11:02:41Z","url":"https://github.com/sablier-labs/interfaces/issues/50"},{"author":"PaulRBerg","body":"<img width=\"1234\" alt=\"Screen Shot 2022-10-16 at 10 38 57 PM\" src=\"https://user-images.githubusercontent.com/8782666/196054712-9b3e516a-cd94-4b79-8606-5e71b5aefdd7.png\">\r\n","createdAt":"2022-10-16T19:40:06Z","labels":["type: bug","backlog"],"number":49,"repository":"sablier-labs/interfaces","state":"closed","title":"Install missing external peer dependencies in package","type":"issue","updatedAt":"2023-12-20T00:00:58Z","url":"https://github.com/sablier-labs/interfaces/issues/49"},{"author":"PaulRBerg","body":"Here are the best solutions according to this [review](https://flatlogic.com/blog/10-best-error-monitoring-and-error-tracking-tools/)\r\n\r\n- Sentry\r\n- Rollbar\r\n- Raygun\r\n\r\nAccording to the article linked above, Sentry has a whopping 90% of market share! Should be worth taking a look at it.\r\n","createdAt":"2022-10-15T16:22:41Z","labels":["type: feature","priority: 2"],"number":41,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate an error tracking vendor","type":"issue","updatedAt":"2023-03-17T22:01:08Z","url":"https://github.com/sablier-labs/interfaces/issues/41"},{"author":"PaulRBerg","body":"This isn't so that we start translating the app right away, but so that when we eventually decide we want to do that to not have to refactor a bigger app to add support for 18n. It's easier add support in advance.\r\n\r\nSide note - I so wish we all spoke the same language.","createdAt":"2022-10-15T16:20:02Z","labels":["type: feature","priority: 3"],"number":40,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate a language library (i18n)","type":"issue","updatedAt":"2023-03-30T18:28:13Z","url":"https://github.com/sablier-labs/interfaces/issues/40"},{"author":"PaulRBerg","body":"## Todos\r\n\r\n- [ ] Analytics: Google Analytics OR [Plausible](https://plausible.io/)\r\n- [ ] Help Chat: Crisp or Drift\r\n\r\n## Description\r\n\r\nGoogle's charts and analytics features are great. For example, you can get global user distribution maps like this:\r\n\r\n<img width=\"1435\" alt=\"google-analytics-sablier-v1\" src=\"https://user-images.githubusercontent.com/8782666/195996993-3cc64c81-70a9-4c6f-bcc6-13de640c4e26.png\">\r\n\r\nNote: this is the actual analytics page for the V1 landing page.","createdAt":"2022-10-15T16:18:01Z","labels":["type: feature","priority: 2"],"number":39,"repository":"sablier-labs/interfaces","state":"closed","title":"Integrate Analytics and Help Chat","type":"issue","updatedAt":"2023-06-26T12:20:15Z","url":"https://github.com/sablier-labs/interfaces/issues/39"},{"author":"PaulRBerg","body":"I have read the [Client Interface Setup](https://www.notion.so/sablier/Client-Interfaces-Setup-75fd8bab192e4669bb10a3ab082759d9) and I understand that there are well-known issues with using an extendable base `tsconfig.json`.\r\n\r\nStill, there's quite a bit of duplicated configuration logic in the monorepo right now. As you said on Notion, we should return to this problem at a later date and figure out a solution, hence why I opened this issue.","createdAt":"2022-10-15T10:01:02Z","labels":["priority: 2"],"number":33,"repository":"sablier-labs/interfaces","state":"closed","title":"Use an extendable base \"tsconfig.json\"","type":"issue","updatedAt":"2022-11-02T11:02:48Z","url":"https://github.com/sablier-labs/interfaces/issues/33"},{"author":"PaulRBerg","body":"The script should:\r\n\r\n- [x] Lint the code with Prettier (using the [`--check`](https://github.com/paulrberg/typescript-template/blob/a6095b534c58792755376ee41388d712f8e21e67/package.json#L56) flag)\r\n- [x] Lint the code with ESLint\r\n- [x] Lint the code with StyleLint\r\n- [x] [Check](https://github.com/paulrberg/typescript-template/blob/a6095b534c58792755376ee41388d712f8e21e67/package.json#L57) that the apps can be built with TypeScript\r\n\r\nTips:\r\n\r\n- Start from the [CI script](https://github.com/paulrberg/hardhat-template/blob/main/.github/workflows/ci.yml) that I use in my Hardhat template","createdAt":"2022-10-09T12:29:01Z","labels":["type: feature","priority: 0"],"number":22,"repository":"sablier-labs/interfaces","state":"closed","title":"Continuous integration with GitHub Actions","type":"issue","updatedAt":"2022-11-02T11:02:57Z","url":"https://github.com/sablier-labs/interfaces/issues/22"},{"author":"PaulRBerg","body":"To make it clear that users need to accept out Terms of Service when using the Sablier interfaces, we should add a warning about this in the wallet connection modal.\r\n\r\nSee how Uniswap [did][1] this:\r\n\r\n<img width=\"426\" alt=\"uniswap-disclaimer\" src=\"https://user-images.githubusercontent.com/8782666/194028424-5435fbc2-044e-43f3-8d3d-25f3b672bba7.png\">\r\n\r\n[1]: https://github.com/Uniswap/interface/blob/fc08ede58afa2d6f15da7845d3167022ced7940a/src/components/WalletModal/index.tsx#L310-L341","createdAt":"2022-10-05T09:30:07Z","labels":["priority: 1"],"number":13,"repository":"sablier-labs/interfaces","state":"closed","title":"Prompt user to agree to Terms of Service when connecting a wallet","type":"issue","updatedAt":"2023-02-21T20:57:31Z","url":"https://github.com/sablier-labs/interfaces/issues/13"},{"author":"razgraf","body":"Unfortunately [wagmi](https://wagmi.sh/) is not compatible with the server side of next.js. As per #9 we should follow the conversation around official SSR support for the library.\r\n\r\nThe suggested fixes are a bit heavy (custom cookie storage) so we're just jumping over the server aspect in the app for web3 (we assume the server doesn't have access to the account, before mounting the client side).\r\n\r\nKnown open issues:\r\n- https://github.com/wagmi-dev/wagmi/issues/542\r\n- https://github.com/wagmi-dev/wagmi/pull/689","createdAt":"2022-10-04T19:28:24Z","labels":["type: bug","priority: 0"],"number":12,"repository":"sablier-labs/interfaces","state":"closed","title":"Follow wagmi's updates on SSR support","type":"issue","updatedAt":"2023-02-25T01:17:46Z","url":"https://github.com/sablier-labs/interfaces/issues/12"},{"author":"razgraf","body":"We should implement or at least play with a frontend testing framework like [Cypress](https://www.cypress.io/).","createdAt":"2022-10-02T19:10:15Z","labels":["type: feature","priority: 2"],"number":8,"repository":"sablier-labs/interfaces","state":"closed","title":"Frontend testing framework (e.g. Cypress)","type":"issue","updatedAt":"2023-02-21T18:25:09Z","url":"https://github.com/sablier-labs/interfaces/issues/8"},{"author":"razgraf","body":"```jsx\r\nconst Container = styled.div`\r\n  ${(props) => props.theme.styles.container}\r\n  &{\r\n    width: 100%;\r\n  }\r\n`\r\n```\r\n\r\nWhen using variables inside our styled components, stylelint doesn't know how to parse them, so the auto-fixer fails. We need this to work properly such that the css rules are ordered in a consistent manner, without the developer having to consciously care about their ordering.\r\n\r\nThe formatter has issues with inline declarations (i.e. usage of `${props => props.theme.styles.row}` in the same context as normal css rules. While this still flags inappropriate usage It doesn’t know how to automatically fix them.\r\n\r\n**Temporary solution**\r\nFor now we’re using the &{...} workaround to push normal css rules into their own sub-context. We should refactor or improve the formatter rules at some point and get rid of this limitation. More can be found in the `.stylelinrc` files, related to the `stylelint-semantic-groups` package.","createdAt":"2022-09-24T15:36:24Z","labels":["priority: 2"],"number":2,"repository":"sablier-labs/interfaces","state":"closed","title":"Stylelint parsing errors for inline variables","type":"issue","updatedAt":"2023-05-29T06:27:10Z","url":"https://github.com/sablier-labs/interfaces/issues/2"}]}